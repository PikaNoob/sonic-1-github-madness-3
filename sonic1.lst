00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 003C                  		andi.w	#$3C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            CheckSumError:
000003BC 6100 0000                  		bsr.w	VDPSetupGame
000003C0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CA 7E3F                       		moveq	#$3F,d7
000003CC                            
000003CC                            CheckSum_Red:
000003CC 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D4 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D8                            
000003D8                            CheckSum_Loop:
000003D8 60FE                       		bra.s	CheckSum_Loop
000003DA                            ; ===========================================================================
000003DA                            
000003DA                            BusError:
000003DA 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E0 6000                       		bra.s	loc_43A
000003E2                            ; ===========================================================================
000003E2                            
000003E2                            AddressError:
000003E2 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E8 6000                       		bra.s	loc_43A
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            IllegalInstr:
000003EA 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F0 54AF 0002                  		addq.l	#2,2(sp)
000003F4 6000                       		bra.s	loc_462
000003F6                            ; ===========================================================================
000003F6                            
000003F6                            ZeroDivide:
000003F6 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FC 6000                       		bra.s	loc_462
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            ChkInstr:
000003FE 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000404 6000                       		bra.s	loc_462
00000406                            ; ===========================================================================
00000406                            
00000406                            TrapvInstr:
00000406 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_462
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            PrivilegeViol:
0000040E 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000414 6000                       		bra.s	loc_462
00000416                            ; ===========================================================================
00000416                            
00000416                            Trace:
00000416 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            Line1010Emu:
0000041E 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000424 54AF 0002                  		addq.l	#2,2(sp)
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            Line1111Emu:
0000042A 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000430 54AF 0002                  		addq.l	#2,2(sp)
00000434 6000                       		bra.s	loc_462
00000436                            ; ===========================================================================
00000436                            
00000436                            ErrorExcept:
00000436 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043C 6000                       		bra.s	loc_462
0000043E                            ; ===========================================================================
0000043E                            
0000043E                            loc_43A:
0000043E 46FC 2700                  		move	#$2700,sr
00000442 544F                       		addq.w	#2,sp
00000444 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000448 544F                       		addq.w	#2,sp
0000044A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000450 6100 0000                  		bsr.w	ShowErrorMsg
00000454 202F 0002                  		move.l	2(sp),d0
00000458 6100 0000                  		bsr.w	sub_5BA
0000045C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000460 6100 0000                  		bsr.w	sub_5BA
00000464 6000                       		bra.s	loc_478
00000466                            ; ===========================================================================
00000466                            
00000466                            loc_462:
00000466 46FC 2700                  		move	#$2700,sr
0000046A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000470 6100 0000                  		bsr.w	ShowErrorMsg
00000474 202F 0002                  		move.l	2(sp),d0
00000478 6100 0000                  		bsr.w	sub_5BA
0000047C                            
0000047C                            loc_478:
0000047C 6100 0000                  		bsr.w	ErrorWaitForC
00000480 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000486 46FC 2300                  		move	#$2300,sr
0000048A 4E73                       		rte	
0000048C                            
0000048C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048C                            
0000048C                            
0000048C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048C 4DF9 00C0 0000             		lea	($C00000).l,a6
00000492 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049C 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A2 323C 027F                  		move.w	#$27F,d1
000004A6                            
000004A6                            Error_LoadGfx:
000004A6 3C98                       		move.w	(a0)+,(a6)
000004A8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AC 7000                       		moveq	#0,d0		; clear	d0
000004AE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C4 7212                       		moveq	#$12,d1		; number of characters
000004C6                            
000004C6                            Error_LoopChars:
000004C6 7000                       		moveq	#0,d0
000004C8 1018                       		move.b	(a0)+,d0
000004CA 0640 0790                  		addi.w	#$790,d0
000004CE 3C80                       		move.w	d0,(a6)
000004D0 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D4 4E75                       		rts	
000004D6                            ; End of function ShowErrorMsg
000004D6                            
000004D6                            ; ===========================================================================
000004D6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EA 0000                       		dc.w asc_5A6-ErrorText
000004EC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000512 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000525 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000538 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000571 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000584 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000597 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BE 00                         		even
000005BE                            
000005BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BE                            
000005BE                            
000005BE                            sub_5BA:				; XREF: loc_43A; loc_462
000005BE 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C2 7407                       		moveq	#7,d2
000005C4                            
000005C4                            loc_5C0:
000005C4 E998                       		rol.l	#4,d0
000005C6 6100                       		bsr.s	sub_5CA
000005C8 51CA FFFA                  		dbf	d2,loc_5C0
000005CC 4E75                       		rts	
000005CE                            ; End of function sub_5BA
000005CE                            
000005CE                            
000005CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CE                            
000005CE                            
000005CE                            sub_5CA:				; XREF: sub_5BA
000005CE 3200                       		move.w	d0,d1
000005D0 0241 000F                  		andi.w	#$F,d1
000005D4 0C41 000A                  		cmpi.w	#$A,d1
000005D8 6500                       		bcs.s	loc_5D8
000005DA 5E41                       		addq.w	#7,d1
000005DC                            
000005DC                            loc_5D8:
000005DC 0641 07C0                  		addi.w	#$7C0,d1
000005E0 3C81                       		move.w	d1,(a6)
000005E2 4E75                       		rts	
000005E4                            ; End of function sub_5CA
000005E4                            
000005E4                            
000005E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E4                            
000005E4                            
000005E4                            ErrorWaitForC:				; XREF: loc_478
000005E4 6100 0000                  		bsr.w	ReadJoypads
000005E8 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EE 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F2 4E75                       		rts	
000005F4                            ; End of function ErrorWaitForC
000005F4                            
000005F4                            ; ===========================================================================
000005F4                            
000005F4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D34                            Art_Text_end:		even
00000D34                            
00000D34                            ; ===========================================================================
00000D34                            ;VBlank
00000D34                            loc_B10:				; XREF: Vectors
00000D34 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D38 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D3C 6700                       		beq.s	loc_B88
00000D3E 3039 00C0 0004             		move.w	($C00004).l,d0
00000D44 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D56 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D5C 6700                       		beq.s	loc_B42
00000D5E 303C 0700                  		move.w	#$700,d0
00000D62                            
00000D62                            loc_B3E:
00000D62 51C8 FFFE                  		dbf	d0,loc_B3E
00000D66                            
00000D66                            loc_B42:
00000D66 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D6A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D70 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D76 0240 003E                  		andi.w	#$3E,d0
00000D7A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D82                            
00000D82                            loc_B5E:				; XREF: loc_B88
00000D82 4EB9 0000 0000             		jsr	sub_71B4C
00000D88                            
00000D88                            loc_B64:				; XREF: loc_D50
00000D88 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D8C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D90 4E73                       		rte	
00000D92                            ; ===========================================================================
00000D92 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D96 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D9A 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9E 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DAA 0000                       		dc.w loc_E72-off_B6E
00000DAC                            ; ===========================================================================
00000DAC                            
00000DAC                            loc_B88:				; XREF: loc_B10; off_B6E
00000DAC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB2 6700                       		beq.s	loc_B9A
00000DB4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DBA 6600 FFC6                  		bne.w	loc_B5E
00000DBE                            
00000DBE                            loc_B9A:
00000DBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC8 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD4 6700                       		beq.s	loc_BBA
00000DD6 303C 0700                  		move.w	#$700,d0
00000DDA                            
00000DDA                            loc_BB6:
00000DDA 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDE                            
00000DDE                            loc_BBA:
00000DDE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DEC                            
00000DEC                            loc_BC8:
00000DEC 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF4 66F6                       		bne.s	loc_BC8
00000DF6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DFA 6600                       		bne.s	loc_BFE
00000DFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E02 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E08 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0E 3ABC 977F                  		move.w	#$977F,(a5)
00000E12 3ABC C000                  		move.w	#$C000,(a5)
00000E16 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E20 6000                       		bra.s	loc_C22
00000E22                            ; ===========================================================================
00000E22                            
00000E22                            loc_BFE:				; XREF: loc_BC8
00000E22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E28 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E34 3ABC 977F                  		move.w	#$977F,(a5)
00000E38 3ABC C000                  		move.w	#$C000,(a5)
00000E3C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E46                            
00000E46                            loc_C22:				; XREF: loc_BC8
00000E46 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E52 6000 FF2E                  		bra.w	loc_B5E
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C32:				; XREF: off_B6E
00000E56 6100 0000                  		bsr.w	sub_106E
00000E5A                            
00000E5A                            loc_C36:				; XREF: off_B6E
00000E5A 4A78 F614                  		tst.w	($FFFFF614).w
00000E5E 6700 0000                  		beq.w	locret_C42
00000E62 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E66                            
00000E66                            locret_C42:
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C44:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 6100 0000                  		bsr.w	sub_6886
00000E70 6100 0000                  		bsr.w	sub_1642
00000E74 4A78 F614                  		tst.w	($FFFFF614).w
00000E78 6700 0000                  		beq.w	locret_C5C
00000E7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E80                            
00000E80                            locret_C5C:
00000E80 4E75                       		rts	
00000E82                            ; ===========================================================================
00000E82                            
00000E82                            loc_C5E:				; XREF: off_B6E
00000E82 6100 0000                  		bsr.w	sub_106E
00000E86 4E75                       		rts	
00000E88                            ; ===========================================================================
00000E88                            
00000E88                            loc_C64:				; XREF: off_B6E
00000E88 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8E 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E92                            
00000E92                            loc_C6E:				; XREF: off_B6E
00000E92 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E9A                            
00000E9A                            loc_C76:
00000E9A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EA2 66F6                       		bne.s	loc_C76		; if not, branch
00000EA4 6100 0000                  		bsr.w	ReadJoypads
00000EA8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EAC 6600                       		bne.s	loc_CB0
00000EAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EC0 3ABC 977F                  		move.w	#$977F,(a5)
00000EC4 3ABC C000                  		move.w	#$C000,(a5)
00000EC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED2 6000                       		bra.s	loc_CD4
00000ED4                            ; ===========================================================================
00000ED4                            
00000ED4                            loc_CB0:				; XREF: loc_C76
00000ED4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EE0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE6 3ABC 977F                  		move.w	#$977F,(a5)
00000EEA 3ABC C000                  		move.w	#$C000,(a5)
00000EEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF8                            
00000EF8                            loc_CD4:				; XREF: loc_C76
00000EF8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F02 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F08 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0E 3ABC 977F                  		move.w	#$977F,(a5)
00000F12 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7800                  		move.w	#$7800,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 4A38 F767                  		tst.b	($FFFFF767).w
00000F48 6700                       		beq.s	loc_D50
00000F4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F50 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F56 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F5C 3ABC 977F                  		move.w	#$977F,(a5)
00000F60 3ABC 7000                  		move.w	#$7000,(a5)
00000F64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F74                            
00000F74                            loc_D50:
00000F74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F7C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F82 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F88 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F94 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F9A 6400                       		bcc.s	Demo_Time
00000F9C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA2 588F                       		addq.l	#4,sp
00000FA4 6000 FDE2                  		bra.w	loc_B64
00000FA8                            
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            ; Subroutine to	run a demo for an amount of time
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            
00000FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA8                            
00000FA8                            
00000FA8                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FAC 4EB9 0000 0000             		jsr	AniArt_Load
00000FB2 4EB9 0000 0000             		jsr	HudUpdate
00000FB8 6100 0000                  		bsr.w	sub_165E
00000FBC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC0 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC4 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC8                            
00000FC8                            Demo_TimeEnd:
00000FC8 4E75                       		rts	
00000FCA                            ; End of function Demo_Time
00000FCA                            
00000FCA                            ; ===========================================================================
00000FCA                            
00000FCA                            loc_DA6:				; XREF: off_B6E
00000FCA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD2                            
00000FD2                            loc_DAE:
00000FD2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FDA 66F6                       		bne.s	loc_DAE		; if not, branch
00000FDC 6100 0000                  		bsr.w	ReadJoypads
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC C000                  		move.w	#$C000,(a5)
00000FFA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001010 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7800                  		move.w	#$7800,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001034 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001042 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001054 6100 0000                  		bsr.w	PalCycle_SS
00001058 4A38 F767                  		tst.b	($FFFFF767).w
0000105C 6700                       		beq.s	loc_E64
0000105E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001064 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000106A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001070 3ABC 977F                  		move.w	#$977F,(a5)
00001074 3ABC 7000                  		move.w	#$7000,(a5)
00001078 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001082 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001088                            
00001088                            loc_E64:
00001088 4A78 F614                  		tst.w	($FFFFF614).w
0000108C 6700 0000                  		beq.w	locret_E70
00001090 5378 F614                  		subq.w	#1,($FFFFF614).w
00001094                            
00001094                            locret_E70:
00001094 4E75                       		rts	
00001096                            ; ===========================================================================
00001096                            
00001096                            loc_E72:				; XREF: off_B6E
00001096 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109E                            
0000109E                            loc_E7A:
0000109E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A6 66F6                       		bne.s	loc_E7A		; if not, branch
000010A8 6100 0000                  		bsr.w	ReadJoypads
000010AC 4A38 F64E                  		tst.b	($FFFFF64E).w
000010B0 6600                       		bne.s	loc_EB4
000010B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C4 3ABC 977F                  		move.w	#$977F,(a5)
000010C8 3ABC C000                  		move.w	#$C000,(a5)
000010CC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D6 6000                       		bra.s	loc_ED8
000010D8                            ; ===========================================================================
000010D8                            
000010D8                            loc_EB4:				; XREF: loc_E7A
000010D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010EA 3ABC 977F                  		move.w	#$977F,(a5)
000010EE 3ABC C000                  		move.w	#$C000,(a5)
000010F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010FC                            
000010FC                            loc_ED8:				; XREF: loc_E7A
000010FC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001100 4BF9 00C0 0004             		lea	($C00004).l,a5
00001106 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000110C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001112                            
00001112                            loc_EEE:
00001112 3ABC 977F                  		move.w	#$977F,(a5)
00001116 3ABC 7C00                  		move.w	#$7C00,(a5)
0000111A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001120 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001124 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001130 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001136 3ABC 977F                  		move.w	#$977F,(a5)
0000113A 3ABC 7800                  		move.w	#$7800,(a5)
0000113E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001144 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001148 4A38 F767                  		tst.b	($FFFFF767).w
0000114C 6700                       		beq.s	loc_F54
0000114E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001154 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000115A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001160 3ABC 977F                  		move.w	#$977F,(a5)
00001164 3ABC 7000                  		move.w	#$7000,(a5)
00001168 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001172 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001178                            
00001178                            loc_F54:
00001178 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001180 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001186 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000118C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001192 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001198 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000119C 4EB9 0000 0000             		jsr	AniArt_Load
000011A2 4EB9 0000 0000             		jsr	HudUpdate
000011A8 6100 0000                  		bsr.w	sub_1642
000011AC 4E75                       		rts	
000011AE                            ; ===========================================================================
000011AE                            
000011AE                            loc_F8A:				; XREF: off_B6E
000011AE 6100 0000                  		bsr.w	sub_106E
000011B2 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B6 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011BC 4E75                       		rts	
000011BE                            ; ===========================================================================
000011BE                            
000011BE                            loc_F9A:				; XREF: off_B6E
000011BE 6100 0000                  		bsr.w	sub_106E
000011C2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C6 6000 0000                  		bra.w	sub_1642
000011CA                            ; ===========================================================================
000011CA                            
000011CA                            loc_FA6:				; XREF: off_B6E
000011CA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D2                            
000011D2                            loc_FAE:
000011D2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011DA 66F6                       		bne.s	loc_FAE		; if not, branch
000011DC 6100 0000                  		bsr.w	ReadJoypads
000011E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011EC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F2 3ABC 977F                  		move.w	#$977F,(a5)
000011F6 3ABC C000                  		move.w	#$C000,(a5)
000011FA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001200 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001204 4BF9 00C0 0004             		lea	($C00004).l,a5
0000120A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001210 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001216 3ABC 977F                  		move.w	#$977F,(a5)
0000121A 3ABC 7800                  		move.w	#$7800,(a5)
0000121E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001224 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001234 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001254 4A38 F767                  		tst.b	($FFFFF767).w
00001258 6700                       		beq.s	loc_1060
0000125A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001260 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001266 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000126C 3ABC 977F                  		move.w	#$977F,(a5)
00001270 3ABC 7000                  		move.w	#$7000,(a5)
00001274 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000127A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001284                            
00001284                            loc_1060:
00001284 4A78 F614                  		tst.w	($FFFFF614).w
00001288 6700 0000                  		beq.w	locret_106C
0000128C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001290                            
00001290                            locret_106C:
00001290 4E75                       		rts	
00001292                            
00001292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001292                            
00001292                            
00001292                            sub_106E:				; XREF: loc_C32; et al
00001292 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000129A                            
0000129A                            loc_1076:
0000129A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012A2 66F6                       		bne.s	loc_1076	; if not, branch
000012A4 6100 0000                  		bsr.w	ReadJoypads
000012A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000012AC 6600                       		bne.s	loc_10B0
000012AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012C0 3ABC 977F                  		move.w	#$977F,(a5)
000012C4 3ABC C000                  		move.w	#$C000,(a5)
000012C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D2 6000                       		bra.s	loc_10D4
000012D4                            ; ===========================================================================
000012D4                            
000012D4                            loc_10B0:				; XREF: sub_106E
000012D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E6 3ABC 977F                  		move.w	#$977F,(a5)
000012EA 3ABC C000                  		move.w	#$C000,(a5)
000012EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F8                            
000012F8                            loc_10D4:				; XREF: sub_106E
000012F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001304 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000130A 3ABC 977F                  		move.w	#$977F,(a5)
0000130E 3ABC 7800                  		move.w	#$7800,(a5)
00001312 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001318 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000131C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001322 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001328 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132E 3ABC 977F                  		move.w	#$977F,(a5)
00001332 3ABC 7C00                  		move.w	#$7C00,(a5)
00001336 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000133C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001340 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001348 4E75                       		rts	
0000134A                            ; End of function sub_106E
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Subroutine to	move pallets from the RAM to CRAM
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            PalToCRAM:
0000134A 46FC 2700                  		move	#$2700,sr
0000134E 4A78 F644                  		tst.w	($FFFFF644).w
00001352 6700                       		beq.s	locret_119C
00001354 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000135A 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135E 43F9 00C0 0000             		lea	($C00000).l,a1
00001364 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001368 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001370 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B6 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013BA 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BE 6600                       		bne.s	loc_119E
000013C0                            
000013C0                            locret_119C:
000013C0 4E73                       		rte	
000013C2                            ; ===========================================================================
000013C2                            
000013C2                            loc_119E:				; XREF: PalToCRAM
000013C2 4238 F64F                  		clr.b	($FFFFF64F).w
000013C6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013CA 6100 FBDC                  		bsr.w	Demo_Time
000013CE 4EB9 0000 0000             		jsr	sub_71B4C
000013D4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D8 4E73                       		rte	
000013DA                            ; End of function PalToCRAM
000013DA                            
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            ; Subroutine to	initialise joypads
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            
000013DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013DA                            
000013DA                            
000013DA                            JoypadInit:				; XREF: GameClrRAM
000013DA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013E2                            
000013E2                            Joypad_WaitZ80:
000013E2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013EA 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013EC 7040                       		moveq	#$40,d0
000013EE 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F4 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013FA 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001400 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001408 4E75                       		rts	
0000140A                            ; End of function JoypadInit
0000140A                            
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            ; Subroutine to	read joypad input, and send it to the RAM
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            
0000140A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140A                            
0000140A                            
0000140A                            ReadJoypads:
0000140A 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140E 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001414 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001416 5449                       		addq.w	#2,a1		; do the second	joypad
00001418                            
00001418                            Joypad_Read:
00001418 12BC 0000                  		move.b	#0,(a1)
0000141C 4E71                       		nop	
0000141E 4E71                       		nop	
00001420 1011                       		move.b	(a1),d0
00001422 E508                       		lsl.b	#2,d0
00001424 0200 00C0                  		andi.b	#$C0,d0
00001428 12BC 0040                  		move.b	#$40,(a1)
0000142C 4E71                       		nop	
0000142E 4E71                       		nop	
00001430 1211                       		move.b	(a1),d1
00001432 0201 003F                  		andi.b	#$3F,d1
00001436 8001                       		or.b	d1,d0
00001438 4600                       		not.b	d0
0000143A 1210                       		move.b	(a0),d1
0000143C B101                       		eor.b	d0,d1
0000143E 10C0                       		move.b	d0,(a0)+
00001440 C200                       		and.b	d0,d1
00001442 10C1                       		move.b	d1,(a0)+
00001444 4E75                       		rts	
00001446                            ; End of function ReadJoypads
00001446                            
00001446                            
00001446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001446                            
00001446                            
00001446                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001446 41F9 00C0 0004             		lea	($C00004).l,a0
0000144C 43F9 00C0 0000             		lea	($C00000).l,a1
00001452 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001458 7E12                       		moveq	#$12,d7
0000145A                            
0000145A                            VDP_Loop:
0000145A 309A                       		move.w	(a2)+,(a0)
0000145C 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001460                            
00001460 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001466 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000146A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001470 7000                       		moveq	#0,d0
00001472 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000147C 3E3C 003F                  		move.w	#$3F,d7
00001480                            
00001480                            VDP_ClrCRAM:
00001480 3280                       		move.w	d0,(a1)
00001482 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001486                            
00001486 42B8 F616                  		clr.l	($FFFFF616).w
0000148A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148E 2F01                       		move.l	d1,-(sp)
00001490 4BF9 00C0 0004             		lea	($C00004).l,a5
00001496 3ABC 8F01                  		move.w	#$8F01,(a5)
0000149A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014A0 3ABC 9780                  		move.w	#$9780,(a5)
000014A4 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014AA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014B2                            
000014B2                            loc_128E:
000014B2 3215                       		move.w	(a5),d1
000014B4 0801 0001                  		btst	#1,d1
000014B8 66F8                       		bne.s	loc_128E
000014BA                            
000014BA 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BE 221F                       		move.l	(sp)+,d1
000014C0 4E75                       		rts	
000014C2                            ; End of function VDPSetupGame
000014C2                            
000014C2                            ; ===========================================================================
000014C2 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014CA 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014D2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014DA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014E2 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the screen
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearScreen:
000014E8 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EE 3ABC 8F01                  		move.w	#$8F01,(a5)
000014F2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F8 3ABC 9780                  		move.w	#$9780,(a5)
000014FC 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001502 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000150A                            
0000150A                            loc_12E6:
0000150A 3215                       		move.w	(a5),d1
0000150C 0801 0001                  		btst	#1,d1
00001510 66F8                       		bne.s	loc_12E6
00001512                            
00001512 3ABC 8F02                  		move.w	#$8F02,(a5)
00001516 4BF9 00C0 0004             		lea	($C00004).l,a5
0000151C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001520 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001526 3ABC 9780                  		move.w	#$9780,(a5)
0000152A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001530 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001538                            
00001538                            loc_1314:
00001538 3215                       		move.w	(a5),d1
0000153A 0801 0001                  		btst	#1,d1
0000153E 66F8                       		bne.s	loc_1314
00001540                            
00001540 3ABC 8F02                  		move.w	#$8F02,(a5)
00001544 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000154C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001554 43F8 F800                  		lea	($FFFFF800).w,a1
00001558 7000                       		moveq	#0,d0
0000155A 323C 009F                  		move.w	#$9F,d1
0000155E                            
0000155E                            loc_133A:
0000155E 22C0                       		move.l	d0,(a1)+
00001560 51C9 FFFC                  		dbf	d1,loc_133A
00001564                            
00001564 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001568 7000                       		moveq	#0,d0
0000156A 323C 00FF                  		move.w	#$FF,d1
0000156E                            
0000156E                            loc_134A:
0000156E 22C0                       		move.l	d0,(a1)+
00001570 51C9 FFFC                  		dbf	d1,loc_134A
00001574 4E75                       		rts	
00001576                            ; End of function ClearScreen
00001576                            
00001576                            ; ---------------------------------------------------------------------------
00001576                            ; Subroutine to	load the sound driver
00001576                            ; ---------------------------------------------------------------------------
00001576                            
00001576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001576                            
00001576                            
00001576                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001576 4E71                       		nop	
00001578 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001580 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001588 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158E 43F9 00A0 0000             		lea	($A00000).l,a1
00001594 6100 0000                  		bsr.w	KosDec		; decompress
00001598 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 4E71                       		nop	
000015A6 4E71                       		nop	
000015A8 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B8 4E75                       		rts	
000015BA                            ; End of function SoundDriverLoad
000015BA                            
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            ; Subroutine to	play a sound or	music track
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            
000015BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BA                            
000015BA                            
000015BA                            PlaySound:
000015BA 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BE 4E75                       		rts	
000015C0                            ; End of function PlaySound
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; Subroutine to	play a special sound/music (E0-E4)
000015C0                            ;
000015C0                            ; E0 - Fade out
000015C0                            ; E1 - Sega
000015C0                            ; E2 - Speed up
000015C0                            ; E3 - Normal speed
000015C0                            ; E4 - Stop
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            
000015C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C0                            
000015C0                            
000015C0                            PlaySound_Special:
000015C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C4 4E75                       		rts	
000015C6                            ; End of function PlaySound_Special
000015C6                            
000015C6                            ; ===========================================================================
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; Unused sound/music subroutine
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            
000015C6                            PlaySound_Unk:
000015C6 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015CA 4E75                       		rts	
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	pause the game
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PauseGame:				; XREF: Level_MainLoop; et al
000015CC 4E71                       		nop	
000015CE 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015D2 6700                       		beq.s	Unpause		; if not, branch
000015D4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D8 6600                       		bne.s	loc_13BE	; if yes, branch
000015DA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015E0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015E2                            
000015E2                            loc_13BE:
000015E2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E8 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EE                            
000015EE                            loc_13CA:
000015EE 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F4 6100 0000                  		bsr.w	DelayProgram
000015F8 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015FC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001604 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001606 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000160C 4E71                       		nop	
0000160E 6000                       		bra.s	loc_1404
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_ChkBC:				; XREF: PauseGame
00001610 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001616 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001618 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161E 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001620                            
00001620                            Pause_ChkStart:				; XREF: PauseGame
00001620 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001626 67C6                       		beq.s	loc_13CA	; if not, branch
00001628                            
00001628                            loc_1404:				; XREF: PauseGame
00001628 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162E                            
0000162E                            Unpause:				; XREF: PauseGame
0000162E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001634                            
00001634                            Pause_DoNothing:			; XREF: PauseGame
00001634 4E75                       		rts	
00001636                            ; ===========================================================================
00001636                            
00001636                            Pause_SlowMo:				; XREF: PauseGame
00001636 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000163C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001642 4E75                       		rts	
00001644                            ; End of function PauseGame
00001644                            
00001644                            ; ---------------------------------------------------------------------------
00001644                            ; Subroutine to	display	patterns via the VDP
00001644                            ; ---------------------------------------------------------------------------
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000164A 283C 0080 0000             		move.l	#$800000,d4
00001650                            
00001650                            loc_142C:
00001650 2D40 0004                  		move.l	d0,4(a6)
00001654 3601                       		move.w	d1,d3
00001656                            
00001656                            loc_1432:
00001656 3C99                       		move.w	(a1)+,(a6)
00001658 51CB FFFC                  		dbf	d3,loc_1432
0000165C D084                       		add.l	d4,d0
0000165E 51CA FFF0                  		dbf	d2,loc_142C
00001662 4E75                       		rts	
00001664                            ; End of function ShowVDPGraphics
00001664                            
00001664                            ; ---------------------------------------------------------------------------
00001664                            ; Nemesis decompression	algorithm
00001664                            ; ---------------------------------------------------------------------------
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            NemDec:
00001664 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001668 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166E 49F9 00C0 0000             		lea	($C00000).l,a4
00001674 6000                       		bra.s	loc_145C
00001676                            ; ===========================================================================
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001680                            
00001680                            loc_145C:				; XREF: NemDec
00001680 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001684 3418                       		move.w	(a0)+,d2
00001686 E34A                       		lsl.w	#1,d2
00001688 6400                       		bcc.s	loc_146A
0000168A D6FC 000A                  		adda.w	#$A,a3
0000168E                            
0000168E                            loc_146A:
0000168E E54A                       		lsl.w	#2,d2
00001690 3A42                       		movea.w	d2,a5
00001692 7608                       		moveq	#8,d3
00001694 7400                       		moveq	#0,d2
00001696 7800                       		moveq	#0,d4
00001698 6100 0000                  		bsr.w	NemDec4
0000169C 1A18                       		move.b	(a0)+,d5
0000169E E145                       		asl.w	#8,d5
000016A0 1A18                       		move.b	(a0)+,d5
000016A2 3C3C 0010                  		move.w	#$10,d6
000016A6 6100                       		bsr.s	NemDec2
000016A8 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016AC 4E75                       		rts	
000016AE                            ; End of function NemDec
000016AE                            
000016AE                            
000016AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AE                            
000016AE                            
000016AE                            NemDec2:				; XREF: NemDec
000016AE 3E06                       		move.w	d6,d7
000016B0 5147                       		subq.w	#8,d7
000016B2 3205                       		move.w	d5,d1
000016B4 EE69                       		lsr.w	d7,d1
000016B6 0C01 00FC                  		cmpi.b	#-4,d1
000016BA 6400                       		bcc.s	loc_14D6
000016BC 0241 00FF                  		andi.w	#$FF,d1
000016C0 D241                       		add.w	d1,d1
000016C2 1031 1000                  		move.b	(a1,d1.w),d0
000016C6 4880                       		ext.w	d0
000016C8 9C40                       		sub.w	d0,d6
000016CA 0C46 0009                  		cmpi.w	#9,d6
000016CE 6400                       		bcc.s	loc_14B2
000016D0 5046                       		addq.w	#8,d6
000016D2 E145                       		asl.w	#8,d5
000016D4 1A18                       		move.b	(a0)+,d5
000016D6                            
000016D6                            loc_14B2:
000016D6 1231 1001                  		move.b	1(a1,d1.w),d1
000016DA 3001                       		move.w	d1,d0
000016DC 0241 000F                  		andi.w	#$F,d1
000016E0 0240 00F0                  		andi.w	#$F0,d0
000016E4                            
000016E4                            loc_14C0:				; XREF: NemDec3
000016E4 E848                       		lsr.w	#4,d0
000016E6                            
000016E6                            loc_14C2:				; XREF: NemDec3
000016E6 E98C                       		lsl.l	#4,d4
000016E8 8801                       		or.b	d1,d4
000016EA 5343                       		subq.w	#1,d3
000016EC 6600                       		bne.s	loc_14D0
000016EE 4ED3                       		jmp	(a3)
000016F0                            ; End of function NemDec2
000016F0                            
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            NemDec3:				; XREF: loc_1502
000016F0 7800                       		moveq	#0,d4
000016F2 7608                       		moveq	#8,d3
000016F4                            
000016F4                            loc_14D0:				; XREF: NemDec2
000016F4 51C8 FFF0                  		dbf	d0,loc_14C2
000016F8 60B4                       		bra.s	NemDec2
000016FA                            ; ===========================================================================
000016FA                            
000016FA                            loc_14D6:				; XREF: NemDec2
000016FA 5D46                       		subq.w	#6,d6
000016FC 0C46 0009                  		cmpi.w	#9,d6
00001700 6400                       		bcc.s	loc_14E4
00001702 5046                       		addq.w	#8,d6
00001704 E145                       		asl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708                            
00001708                            loc_14E4:				; XREF: NemDec3
00001708 5F46                       		subq.w	#7,d6
0000170A 3205                       		move.w	d5,d1
0000170C EC69                       		lsr.w	d6,d1
0000170E 3001                       		move.w	d1,d0
00001710 0241 000F                  		andi.w	#$F,d1
00001714 0240 0070                  		andi.w	#$70,d0
00001718 0C46 0009                  		cmpi.w	#9,d6
0000171C 64C6                       		bcc.s	loc_14C0
0000171E 5046                       		addq.w	#8,d6
00001720 E145                       		asl.w	#8,d5
00001722 1A18                       		move.b	(a0)+,d5
00001724 60BE                       		bra.s	loc_14C0
00001726                            ; End of function NemDec3
00001726                            
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_1502:				; XREF: NemDec
00001726 2884                       		move.l	d4,(a4)
00001728 534D                       		subq.w	#1,a5
0000172A 380D                       		move.w	a5,d4
0000172C 66C2                       		bne.s	NemDec3
0000172E 4E75                       		rts	
00001730                            ; ===========================================================================
00001730 B982                       		eor.l	d4,d2
00001732 2882                       		move.l	d2,(a4)
00001734 534D                       		subq.w	#1,a5
00001736 380D                       		move.w	a5,d4
00001738 66B6                       		bne.s	NemDec3
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1518:				; XREF: NemDec
0000173C 28C4                       		move.l	d4,(a4)+
0000173E 534D                       		subq.w	#1,a5
00001740 380D                       		move.w	a5,d4
00001742 66AC                       		bne.s	NemDec3
00001744 4E75                       		rts	
00001746                            ; ===========================================================================
00001746 B982                       		eor.l	d4,d2
00001748 28C2                       		move.l	d2,(a4)+
0000174A 534D                       		subq.w	#1,a5
0000174C 380D                       		move.w	a5,d4
0000174E 66A0                       		bne.s	NemDec3
00001750 4E75                       		rts	
00001752                            
00001752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001752                            
00001752                            
00001752                            NemDec4:				; XREF: NemDec
00001752 1018                       		move.b	(a0)+,d0
00001754                            
00001754                            loc_1530:
00001754 0C00 00FF                  		cmpi.b	#-1,d0
00001758 6600                       		bne.s	loc_1538
0000175A 4E75                       		rts	
0000175C                            ; ===========================================================================
0000175C                            
0000175C                            loc_1538:				; XREF: NemDec4
0000175C 3E00                       		move.w	d0,d7
0000175E                            
0000175E                            loc_153A:
0000175E 1018                       		move.b	(a0)+,d0
00001760 0C00 0080                  		cmpi.b	#$80,d0
00001764 64EE                       		bcc.s	loc_1530
00001766 1200                       		move.b	d0,d1
00001768 0247 000F                  		andi.w	#$F,d7
0000176C 0241 0070                  		andi.w	#$70,d1
00001770 8E41                       		or.w	d1,d7
00001772 0240 000F                  		andi.w	#$F,d0
00001776 1200                       		move.b	d0,d1
00001778 E149                       		lsl.w	#8,d1
0000177A 8E41                       		or.w	d1,d7
0000177C 7208                       		moveq	#8,d1
0000177E 9240                       		sub.w	d0,d1
00001780 6600                       		bne.s	loc_1568
00001782 1018                       		move.b	(a0)+,d0
00001784 D040                       		add.w	d0,d0
00001786 3387 0000                  		move.w	d7,(a1,d0.w)
0000178A 60D2                       		bra.s	loc_153A
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1568:				; XREF: NemDec4
0000178C 1018                       		move.b	(a0)+,d0
0000178E E368                       		lsl.w	d1,d0
00001790 D040                       		add.w	d0,d0
00001792 7A01                       		moveq	#1,d5
00001794 E36D                       		lsl.w	d1,d5
00001796 5345                       		subq.w	#1,d5
00001798                            
00001798                            loc_1574:
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 5440                       		addq.w	#2,d0
0000179E 51CD FFF8                  		dbf	d5,loc_1574
000017A2 60BA                       		bra.s	loc_153A
000017A4                            ; End of function NemDec4
000017A4                            
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            ; Subroutine to	load pattern load cues
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            
000017A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A4                            
000017A4                            
000017A4                            LoadPLC:
000017A4 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AE D040                       		add.w	d0,d0
000017B0 3031 0000                  		move.w	(a1,d0.w),d0
000017B4 43F1 0000                  		lea	(a1,d0.w),a1
000017B8 45F8 F680                  		lea	($FFFFF680).w,a2
000017BC                            
000017BC                            loc_1598:
000017BC 4A92                       		tst.l	(a2)
000017BE 6700                       		beq.s	loc_15A0
000017C0 5C4A                       		addq.w	#6,a2
000017C2 60F8                       		bra.s	loc_1598
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_15A0:				; XREF: LoadPLC
000017C4 3019                       		move.w	(a1)+,d0
000017C6 6B00                       		bmi.s	loc_15AC
000017C8                            
000017C8                            loc_15A4:
000017C8 24D9                       		move.l	(a1)+,(a2)+
000017CA 34D9                       		move.w	(a1)+,(a2)+
000017CC 51C8 FFFA                  		dbf	d0,loc_15A4
000017D0                            
000017D0                            loc_15AC:
000017D0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D4 4E75                       		rts	
000017D6                            ; End of function LoadPLC
000017D6                            
000017D6                            
000017D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D6                            
000017D6                            
000017D6                            LoadPLC2:
000017D6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017DA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017E0 D040                       		add.w	d0,d0
000017E2 3031 0000                  		move.w	(a1,d0.w),d0
000017E6 43F1 0000                  		lea	(a1,d0.w),a1
000017EA 6100                       		bsr.s	ClearPLC
000017EC 45F8 F680                  		lea	($FFFFF680).w,a2
000017F0 3019                       		move.w	(a1)+,d0
000017F2 6B00                       		bmi.s	loc_15D8
000017F4                            
000017F4                            loc_15D0:
000017F4 24D9                       		move.l	(a1)+,(a2)+
000017F6 34D9                       		move.w	(a1)+,(a2)+
000017F8 51C8 FFFA                  		dbf	d0,loc_15D0
000017FC                            
000017FC                            loc_15D8:
000017FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001800 4E75                       		rts	
00001802                            ; End of function LoadPLC2
00001802                            
00001802                            ; ---------------------------------------------------------------------------
00001802                            ; Subroutine to	clear the pattern load cues
00001802                            ; ---------------------------------------------------------------------------
00001802                            
00001802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001802                            
00001802                            
00001802                            ClearPLC:				; XREF: LoadPLC2
00001802 45F8 F680                  		lea	($FFFFF680).w,a2
00001806 701F                       		moveq	#$1F,d0
00001808                            
00001808                            ClearPLC_Loop:
00001808 429A                       		clr.l	(a2)+
0000180A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180E 4E75                       		rts	
00001810                            ; End of function ClearPLC
00001810                            
00001810                            ; ---------------------------------------------------------------------------
00001810                            ; Subroutine to	use graphics listed in a pattern load cue
00001810                            ; ---------------------------------------------------------------------------
00001810                            
00001810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001810                            
00001810                            
00001810                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001810 4AB8 F680                  		tst.l	($FFFFF680).w
00001814 6700                       		beq.s	locret_1640
00001816 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000181A 6600                       		bne.s	locret_1640
0000181C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001820 47F9 0000 1726             		lea	(loc_1502).l,a3
00001826 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000182A 3418                       		move.w	(a0)+,d2
0000182C 6A00                       		bpl.s	loc_160E
0000182E D6FC 000A                  		adda.w	#$A,a3
00001832                            
00001832                            loc_160E:
00001832 0242 7FFF                  		andi.w	#$7FFF,d2
00001836 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000183A 6100 FF16                  		bsr.w	NemDec4
0000183E 1A18                       		move.b	(a0)+,d5
00001840 E145                       		asl.w	#8,d5
00001842 1A18                       		move.b	(a0)+,d5
00001844 7C10                       		moveq	#$10,d6
00001846 7000                       		moveq	#0,d0
00001848 21C8 F680                  		move.l	a0,($FFFFF680).w
0000184C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001850 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001854 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001858 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000185C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001860 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001864                            
00001864                            locret_1640:
00001864 4E75                       		rts	
00001866                            ; End of function RunPLC_RAM
00001866                            
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001866 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000186A 6700 0000                  		beq.w	locret_16DA
0000186E 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001874 7000                       		moveq	#0,d0
00001876 3038 F684                  		move.w	($FFFFF684).w,d0
0000187A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001880 6000                       		bra.s	loc_1676
00001882                            ; End of function sub_1642
00001882                            
00001882                            
00001882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001882                            
00001882                            
00001882                            sub_165E:				; XREF: Demo_Time
00001882 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001886 6700                       		beq.s	locret_16DA
00001888 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188E 7000                       		moveq	#0,d0
00001890 3038 F684                  		move.w	($FFFFF684).w,d0
00001894 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000189A                            
0000189A                            loc_1676:				; XREF: sub_1642
0000189A 49F9 00C0 0004             		lea	($C00004).l,a4
000018A0 E588                       		lsl.l	#2,d0
000018A2 E448                       		lsr.w	#2,d0
000018A4 0040 4000                  		ori.w	#$4000,d0
000018A8 4840                       		swap	d0
000018AA 2880                       		move.l	d0,(a4)
000018AC 594C                       		subq.w	#4,a4
000018AE 2078 F680                  		movea.l	($FFFFF680).w,a0
000018B2 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B6 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018BA 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BE 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018C2 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C6 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018CA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CE                            
000018CE                            loc_16AA:				; XREF: sub_165E
000018CE 3A7C 0008                  		movea.w	#8,a5
000018D2 6100 FE1C                  		bsr.w	NemDec3
000018D6 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018DA 6700                       		beq.s	loc_16DC
000018DC 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018E0 66EC                       		bne.s	loc_16AA
000018E2 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018EA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EE 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018F2 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018FA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FE                            
000018FE                            locret_16DA:				; XREF: sub_1642
000018FE 4E75                       		rts	
00001900                            ; ===========================================================================
00001900                            
00001900                            loc_16DC:				; XREF: sub_165E
00001900 41F8 F680                  		lea	($FFFFF680).w,a0
00001904 7015                       		moveq	#$15,d0
00001906                            
00001906                            loc_16E2:				; XREF: sub_165E
00001906 20E8 0006                  		move.l	6(a0),(a0)+
0000190A 51C8 FFFA                  		dbf	d0,loc_16E2
0000190E 4E75                       		rts	
00001910                            ; End of function sub_165E
00001910                            
00001910                            ; ---------------------------------------------------------------------------
00001910                            ; Subroutine to	execute	the pattern load cue
00001910                            ; ---------------------------------------------------------------------------
00001910                            
00001910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001910                            
00001910                            
00001910                            RunPLC_ROM:
00001910 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001916 D040                       		add.w	d0,d0
00001918 3031 0000                  		move.w	(a1,d0.w),d0
0000191C 43F1 0000                  		lea	(a1,d0.w),a1
00001920 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001922                            
00001922                            RunPLC_Loop:
00001922 2059                       		movea.l	(a1)+,a0	; get art pointer
00001924 7000                       		moveq	#0,d0
00001926 3019                       		move.w	(a1)+,d0	; get VRAM address
00001928 E588                       		lsl.l	#2,d0		; divide address by $20
0000192A E448                       		lsr.w	#2,d0
0000192C 0040 4000                  		ori.w	#$4000,d0
00001930 4840                       		swap	d0
00001932 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001938 6100 FD2A                  		bsr.w	NemDec		; decompress
0000193C 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001940 4E75                       		rts	
00001942                            ; End of function RunPLC_ROM
00001942                            
00001942                            ; ---------------------------------------------------------------------------
00001942                            ; Enigma decompression algorithm
00001942                            ; ---------------------------------------------------------------------------
00001942                            
00001942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001942                            
00001942                            
00001942                            EniDec:
00001942 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001946 3640                       		movea.w	d0,a3
00001948 1018                       		move.b	(a0)+,d0
0000194A 4880                       		ext.w	d0
0000194C 3A40                       		movea.w	d0,a5
0000194E 1818                       		move.b	(a0)+,d4
00001950 E70C                       		lsl.b	#3,d4
00001952 3458                       		movea.w	(a0)+,a2
00001954 D4CB                       		adda.w	a3,a2
00001956 3858                       		movea.w	(a0)+,a4
00001958 D8CB                       		adda.w	a3,a4
0000195A 1A18                       		move.b	(a0)+,d5
0000195C E145                       		asl.w	#8,d5
0000195E 1A18                       		move.b	(a0)+,d5
00001960 7C10                       		moveq	#$10,d6
00001962                            
00001962                            loc_173E:				; XREF: loc_1768
00001962 7007                       		moveq	#7,d0
00001964 3E06                       		move.w	d6,d7
00001966 9E40                       		sub.w	d0,d7
00001968 3205                       		move.w	d5,d1
0000196A EE69                       		lsr.w	d7,d1
0000196C 0241 007F                  		andi.w	#$7F,d1
00001970 3401                       		move.w	d1,d2
00001972 0C41 0040                  		cmpi.w	#$40,d1
00001976 6400                       		bcc.s	loc_1758
00001978 7006                       		moveq	#6,d0
0000197A E24A                       		lsr.w	#1,d2
0000197C                            
0000197C                            loc_1758:
0000197C 6100 0000                  		bsr.w	sub_188C
00001980 0242 000F                  		andi.w	#$F,d2
00001984 E849                       		lsr.w	#4,d1
00001986 D241                       		add.w	d1,d1
00001988 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000198C                            ; End of function EniDec
0000198C                            
0000198C                            ; ===========================================================================
0000198C                            
0000198C                            loc_1768:				; XREF: loc_17B4
0000198C 32CA                       		move.w	a2,(a1)+
0000198E 524A                       		addq.w	#1,a2
00001990 51CA FFFA                  		dbf	d2,loc_1768
00001994 60CC                       		bra.s	loc_173E
00001996                            ; ===========================================================================
00001996                            
00001996                            loc_1772:				; XREF: loc_17B4
00001996 32CC                       		move.w	a4,(a1)+
00001998 51CA FFFC                  		dbf	d2,loc_1772
0000199C 60C4                       		bra.s	loc_173E
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_177A:				; XREF: loc_17B4
0000199E 6100 0000                  		bsr.w	loc_17DC
000019A2                            
000019A2                            loc_177E:
000019A2 32C1                       		move.w	d1,(a1)+
000019A4 51CA FFFC                  		dbf	d2,loc_177E
000019A8 60B8                       		bra.s	loc_173E
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_1786:				; XREF: loc_17B4
000019AA 6100 0000                  		bsr.w	loc_17DC
000019AE                            
000019AE                            loc_178A:
000019AE 32C1                       		move.w	d1,(a1)+
000019B0 5241                       		addq.w	#1,d1
000019B2 51CA FFFA                  		dbf	d2,loc_178A
000019B6 60AA                       		bra.s	loc_173E
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_1794:				; XREF: loc_17B4
000019B8 6100 0000                  		bsr.w	loc_17DC
000019BC                            
000019BC                            loc_1798:
000019BC 32C1                       		move.w	d1,(a1)+
000019BE 5341                       		subq.w	#1,d1
000019C0 51CA FFFA                  		dbf	d2,loc_1798
000019C4 609C                       		bra.s	loc_173E
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_17A2:				; XREF: loc_17B4
000019C6 0C42 000F                  		cmpi.w	#$F,d2
000019CA 6700                       		beq.s	loc_17C4
000019CC                            
000019CC                            loc_17A8:
000019CC 6100 0000                  		bsr.w	loc_17DC
000019D0 32C1                       		move.w	d1,(a1)+
000019D2 51CA FFF8                  		dbf	d2,loc_17A8
000019D6 608A                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17B4:				; XREF: EniDec
000019D8 60B2                       		bra.s	loc_1768
000019DA                            ; ===========================================================================
000019DA 60B0                       		bra.s	loc_1768
000019DC                            ; ===========================================================================
000019DC 60B8                       		bra.s	loc_1772
000019DE                            ; ===========================================================================
000019DE 60B6                       		bra.s	loc_1772
000019E0                            ; ===========================================================================
000019E0 60BC                       		bra.s	loc_177A
000019E2                            ; ===========================================================================
000019E2 60C6                       		bra.s	loc_1786
000019E4                            ; ===========================================================================
000019E4 60D2                       		bra.s	loc_1794
000019E6                            ; ===========================================================================
000019E6 60DE                       		bra.s	loc_17A2
000019E8                            ; ===========================================================================
000019E8                            
000019E8                            loc_17C4:				; XREF: loc_17A2
000019E8 5348                       		subq.w	#1,a0
000019EA 0C46 0010                  		cmpi.w	#$10,d6
000019EE 6600                       		bne.s	loc_17CE
000019F0 5348                       		subq.w	#1,a0
000019F2                            
000019F2                            loc_17CE:
000019F2 3008                       		move.w	a0,d0
000019F4 E248                       		lsr.w	#1,d0
000019F6 6400                       		bcc.s	loc_17D6
000019F8 5248                       		addq.w	#1,a0
000019FA                            
000019FA                            loc_17D6:
000019FA 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FE 4E75                       		rts	
00001A00                            ; ===========================================================================
00001A00                            
00001A00                            loc_17DC:				; XREF: loc_17A2
00001A00 360B                       		move.w	a3,d3
00001A02 1204                       		move.b	d4,d1
00001A04 D201                       		add.b	d1,d1
00001A06 6400                       		bcc.s	loc_17EE
00001A08 5346                       		subq.w	#1,d6
00001A0A 0D05                       		btst	d6,d5
00001A0C 6700                       		beq.s	loc_17EE
00001A0E 0043 8000                  		ori.w	#-$8000,d3
00001A12                            
00001A12                            loc_17EE:
00001A12 D201                       		add.b	d1,d1
00001A14 6400                       		bcc.s	loc_17FC
00001A16 5346                       		subq.w	#1,d6
00001A18 0D05                       		btst	d6,d5
00001A1A 6700                       		beq.s	loc_17FC
00001A1C 0643 4000                  		addi.w	#$4000,d3
00001A20                            
00001A20                            loc_17FC:
00001A20 D201                       		add.b	d1,d1
00001A22 6400                       		bcc.s	loc_180A
00001A24 5346                       		subq.w	#1,d6
00001A26 0D05                       		btst	d6,d5
00001A28 6700                       		beq.s	loc_180A
00001A2A 0643 2000                  		addi.w	#$2000,d3
00001A2E                            
00001A2E                            loc_180A:
00001A2E D201                       		add.b	d1,d1
00001A30 6400                       		bcc.s	loc_1818
00001A32 5346                       		subq.w	#1,d6
00001A34 0D05                       		btst	d6,d5
00001A36 6700                       		beq.s	loc_1818
00001A38 0043 1000                  		ori.w	#$1000,d3
00001A3C                            
00001A3C                            loc_1818:
00001A3C D201                       		add.b	d1,d1
00001A3E 6400                       		bcc.s	loc_1826
00001A40 5346                       		subq.w	#1,d6
00001A42 0D05                       		btst	d6,d5
00001A44 6700                       		beq.s	loc_1826
00001A46 0043 0800                  		ori.w	#$800,d3
00001A4A                            
00001A4A                            loc_1826:
00001A4A 3205                       		move.w	d5,d1
00001A4C 3E06                       		move.w	d6,d7
00001A4E 9E4D                       		sub.w	a5,d7
00001A50 6400                       		bcc.s	loc_1856
00001A52 3C07                       		move.w	d7,d6
00001A54 0646 0010                  		addi.w	#$10,d6
00001A58 4447                       		neg.w	d7
00001A5A EF69                       		lsl.w	d7,d1
00001A5C 1A10                       		move.b	(a0),d5
00001A5E EF3D                       		rol.b	d7,d5
00001A60 DE47                       		add.w	d7,d7
00001A62 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A66 D245                       		add.w	d5,d1
00001A68                            
00001A68                            loc_1844:				; XREF: loc_1868
00001A68 300D                       		move.w	a5,d0
00001A6A D040                       		add.w	d0,d0
00001A6C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A70 D243                       		add.w	d3,d1
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 E14D                       		lsl.w	#8,d5
00001A76 1A18                       		move.b	(a0)+,d5
00001A78 4E75                       		rts	
00001A7A                            ; ===========================================================================
00001A7A                            
00001A7A                            loc_1856:				; XREF: loc_1826
00001A7A 6700                       		beq.s	loc_1868
00001A7C EE69                       		lsr.w	d7,d1
00001A7E 300D                       		move.w	a5,d0
00001A80 D040                       		add.w	d0,d0
00001A82 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A86 D243                       		add.w	d3,d1
00001A88 300D                       		move.w	a5,d0
00001A8A 6000                       		bra.s	sub_188C
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1868:				; XREF: loc_1856
00001A8C 7C10                       		moveq	#$10,d6
00001A8E                            
00001A8E                            loc_186A:
00001A8E 60D8                       		bra.s	loc_1844
00001A90                            ; ===========================================================================
00001A90 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA6 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AB0                            
00001AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB0                            
00001AB0                            
00001AB0                            sub_188C:				; XREF: EniDec
00001AB0 9C40                       		sub.w	d0,d6
00001AB2 0C46 0009                  		cmpi.w	#9,d6
00001AB6 6400                       		bcc.s	locret_189A
00001AB8 5046                       		addq.w	#8,d6
00001ABA E145                       		asl.w	#8,d5
00001ABC 1A18                       		move.b	(a0)+,d5
00001ABE                            
00001ABE                            locret_189A:
00001ABE 4E75                       		rts	
00001AC0                            ; End of function sub_188C
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Kosinski decompression algorithm
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            KosDec:
00001AC0                            
00001AC0 =FFFFFFFE                  var_2		= -2
00001AC0 =FFFFFFFF                  var_1		= -1
00001AC0                            
00001AC0 558F                       		subq.l	#2,sp
00001AC2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC6 1E98                       		move.b	(a0)+,(sp)
00001AC8 3A17                       		move.w	(sp),d5
00001ACA 780F                       		moveq	#$F,d4
00001ACC                            
00001ACC                            loc_18A8:
00001ACC E24D                       		lsr.w	#1,d5
00001ACE 40C6                       		move	sr,d6
00001AD0 51CC 0000                  		dbf	d4,loc_18BA
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18BA:
00001ADE 44C6                       		move	d6,ccr
00001AE0 6400                       		bcc.s	loc_18C2
00001AE2 12D8                       		move.b	(a0)+,(a1)+
00001AE4 60E6                       		bra.s	loc_18A8
00001AE6                            ; ===========================================================================
00001AE6                            
00001AE6                            loc_18C2:				; XREF: KosDec
00001AE6 7600                       		moveq	#0,d3
00001AE8 E24D                       		lsr.w	#1,d5
00001AEA 40C6                       		move	sr,d6
00001AEC 51CC 0000                  		dbf	d4,loc_18D6
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18D6:
00001AFA 44C6                       		move	d6,ccr
00001AFC 6500                       		bcs.s	loc_1906
00001AFE E24D                       		lsr.w	#1,d5
00001B00 51CC 0000                  		dbf	d4,loc_18EA
00001B04 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B08 1E98                       		move.b	(a0)+,(sp)
00001B0A 3A17                       		move.w	(sp),d5
00001B0C 780F                       		moveq	#$F,d4
00001B0E                            
00001B0E                            loc_18EA:
00001B0E E353                       		roxl.w	#1,d3
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18FC
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18FC:
00001B20 E353                       		roxl.w	#1,d3
00001B22 5243                       		addq.w	#1,d3
00001B24 74FF                       		moveq	#-1,d2
00001B26 1418                       		move.b	(a0)+,d2
00001B28 6000                       		bra.s	loc_191C
00001B2A                            ; ===========================================================================
00001B2A                            
00001B2A                            loc_1906:				; XREF: loc_18C2
00001B2A 1018                       		move.b	(a0)+,d0
00001B2C 1218                       		move.b	(a0)+,d1
00001B2E 74FF                       		moveq	#-1,d2
00001B30 1401                       		move.b	d1,d2
00001B32 EB4A                       		lsl.w	#5,d2
00001B34 1400                       		move.b	d0,d2
00001B36 0241 0007                  		andi.w	#7,d1
00001B3A 6700                       		beq.s	loc_1928
00001B3C 1601                       		move.b	d1,d3
00001B3E 5243                       		addq.w	#1,d3
00001B40                            
00001B40                            loc_191C:
00001B40 1031 2000                  		move.b	(a1,d2.w),d0
00001B44 12C0                       		move.b	d0,(a1)+
00001B46 51CB FFF8                  		dbf	d3,loc_191C
00001B4A 6080                       		bra.s	loc_18A8
00001B4C                            ; ===========================================================================
00001B4C                            
00001B4C                            loc_1928:				; XREF: loc_1906
00001B4C 1218                       		move.b	(a0)+,d1
00001B4E 6700                       		beq.s	loc_1938
00001B50 0C01 0001                  		cmpi.b	#1,d1
00001B54 6700 FF76                  		beq.w	loc_18A8
00001B58 1601                       		move.b	d1,d3
00001B5A 60E4                       		bra.s	loc_191C
00001B5C                            ; ===========================================================================
00001B5C                            
00001B5C                            loc_1938:				; XREF: loc_1928
00001B5C 548F                       		addq.l	#2,sp
00001B5E 4E75                       		rts	
00001B60                            ; End of function KosDec
00001B60                            
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            ; Pallet cycling routine loading subroutine
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            
00001B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B60                            
00001B60                            
00001B60                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B60 7400                       		moveq	#0,d2
00001B62 7000                       		moveq	#0,d0
00001B64 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B68 D040                       		add.w	d0,d0		; multiply by 2
00001B6A 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6E 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B72                            ; End of function PalCycle_Load
00001B72                            
00001B72                            ; ===========================================================================
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routines
00001B72                            ; ---------------------------------------------------------------------------
00001B72 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B74 0000                       		dc.w PalCycle_LZ-PalCycle
00001B76 0000                       		dc.w PalCycle_MZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B7C 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B80                            
00001B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B80                            
00001B80                            
00001B80                            PalCycle_Title:				; XREF: TitleScreen
00001B80 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B86 6000                       		bra.s	loc_196A
00001B88                            ; ===========================================================================
00001B88                            
00001B88                            PalCycle_GHZ:				; XREF: PalCycle
00001B88 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8E                            
00001B8E                            loc_196A:				; XREF: PalCycle_Title
00001B8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B92 6A00                       		bpl.s	locret_1990
00001B94 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B9A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA2 0240 0003                  		andi.w	#3,d0
00001BA6 E748                       		lsl.w	#3,d0
00001BA8 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BAC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BB0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB4                            
00001BB4                            locret_1990:
00001BB4 4E75                       		rts	
00001BB6                            ; End of function PalCycle_Title
00001BB6                            
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_LZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	loc_19D8
00001BBC 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BCA 0240 0003                  		andi.w	#3,d0
00001BCE E748                       		lsl.w	#3,d0
00001BD0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BDC 6600                       		bne.s	loc_19C0
00001BDE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE4                            
00001BE4                            loc_19C0:
00001BE4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BEC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BFC                            
00001BFC                            loc_19D8:
00001BFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C00 0240 0007                  		andi.w	#7,d0
00001C04 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C08 6700                       		beq.s	locret_1A3A
00001C0A 7201                       		moveq	#1,d1
00001C0C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C10 6700                       		beq.s	loc_19F0
00001C12 4441                       		neg.w	d1
00001C14                            
00001C14                            loc_19F0:
00001C14 3038 F650                  		move.w	($FFFFF650).w,d0
00001C18 0240 0003                  		andi.w	#3,d0
00001C1C D041                       		add.w	d1,d0
00001C1E 0C40 0003                  		cmpi.w	#3,d0
00001C22 6500                       		bcs.s	loc_1A0A
00001C24 3200                       		move.w	d0,d1
00001C26 7000                       		moveq	#0,d0
00001C28 4A41                       		tst.w	d1
00001C2A 6A00                       		bpl.s	loc_1A0A
00001C2C 7002                       		moveq	#2,d0
00001C2E                            
00001C2E                            loc_1A0A:
00001C2E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C32 D040                       		add.w	d0,d0
00001C34 3200                       		move.w	d0,d1
00001C36 D040                       		add.w	d0,d0
00001C38 D041                       		add.w	d1,d0
00001C3A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C40 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C44 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C48 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C52 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E                            
00001C5E                            locret_1A3A:
00001C5E 4E75                       		rts	
00001C60                            ; End of function PalCycle_LZ
00001C60                            
00001C60                            ; ===========================================================================
00001C60 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C68                            ; ===========================================================================
00001C68                            
00001C68                            PalCycle_MZ:				; XREF: PalCycle
00001C68 4E75                       		rts	
00001C6A                            
00001C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6A                            
00001C6A                            
00001C6A                            PalCycle_SLZ:				; XREF: PalCycle
00001C6A 4E75                       		rts	
00001C6C                            ; End of function PalCycle_SLZ
00001C6C                            
00001C6C                            
00001C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6C                            
00001C6C                            
00001C6C                            PalCycle_SYZ:				; XREF: PalCycle
00001C6C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C70 6A00                       		bpl.s	locret_1AC6
00001C72 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C78 3038 F632                  		move.w	($FFFFF632).w,d0
00001C7C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C80 0240 0003                  		andi.w	#3,d0
00001C84 E548                       		lsl.w	#2,d0
00001C86 3200                       		move.w	d0,d1
00001C88 D040                       		add.w	d0,d0
00001C8A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C90 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C94 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C98 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CAA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CB0                            
00001CB0                            locret_1AC6:
00001CB0 4E75                       		rts	
00001CB2                            ; End of function PalCycle_SYZ
00001CB2                            
00001CB2                            
00001CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB2                            
00001CB2                            
00001CB2                            PalCycle_SBZ:				; XREF: PalCycle
00001CB2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CBC 6700                       		beq.s	loc_1ADA
00001CBE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC4                            
00001CC4                            loc_1ADA:
00001CC4 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC8 321A                       		move.w	(a2)+,d1
00001CCA                            
00001CCA                            loc_1AE0:
00001CCA 5311                       		subq.b	#1,(a1)
00001CCC 6B00                       		bmi.s	loc_1AEA
00001CCE 5489                       		addq.l	#2,a1
00001CD0 5C8A                       		addq.l	#6,a2
00001CD2 6000                       		bra.s	loc_1B06
00001CD4                            ; ===========================================================================
00001CD4                            
00001CD4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD4 12DA                       		move.b	(a2)+,(a1)+
00001CD6 1011                       		move.b	(a1),d0
00001CD8 5200                       		addq.b	#1,d0
00001CDA B01A                       		cmp.b	(a2)+,d0
00001CDC 6500                       		bcs.s	loc_1AF6
00001CDE 7000                       		moveq	#0,d0
00001CE0                            
00001CE0                            loc_1AF6:
00001CE0 12C0                       		move.b	d0,(a1)+
00001CE2 0240 000F                  		andi.w	#$F,d0
00001CE6 D040                       		add.w	d0,d0
00001CE8 305A                       		movea.w	(a2)+,a0
00001CEA 365A                       		movea.w	(a2)+,a3
00001CEC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CF0                            
00001CF0                            loc_1B06:				; XREF: PalCycle_SBZ
00001CF0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF8 6A00                       		bpl.s	locret_1B64
00001CFA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D00 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D06 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D0A 6700                       		beq.s	loc_1B2E
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D12 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D18                            
00001D18                            loc_1B2E:
00001D18 72FF                       		moveq	#-1,d1
00001D1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1E 6700                       		beq.s	loc_1B38
00001D20 4441                       		neg.w	d1
00001D22                            
00001D22                            loc_1B38:
00001D22 3038 F632                  		move.w	($FFFFF632).w,d0
00001D26 0240 0003                  		andi.w	#3,d0
00001D2A D041                       		add.w	d1,d0
00001D2C 0C40 0003                  		cmpi.w	#3,d0
00001D30 6500                       		bcs.s	loc_1B52
00001D32 3200                       		move.w	d0,d1
00001D34 7000                       		moveq	#0,d0
00001D36 4A41                       		tst.w	d1
00001D38 6A00                       		bpl.s	loc_1B52
00001D3A 7002                       		moveq	#2,d0
00001D3C                            
00001D3C                            loc_1B52:
00001D3C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D40 D040                       		add.w	d0,d0
00001D42 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D4A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4E                            
00001D4E                            locret_1B64:
00001D4E 4E75                       		rts	
00001D50                            ; End of function PalCycle_SBZ
00001D50                            
00001D50                            ; ===========================================================================
00001D50                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D70                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D90                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DB0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DC2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E3C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E60                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E80                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E90                            
00001E90                            Pal_SBZCycList:
00001E90                            	include "_inc\SBZ pallet script 1.asm"
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Scrap Brain Zone 1 pallet cycling script
00001E90                            ; ---------------------------------------------------------------------------
00001E90 0008                       	dc.w 8			; number of entries - 1
00001E92 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E94 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E96 FB50                       	dc.w $FB50		; RAM address
00001E98 0D08                       	dc.b $D, 8
00001E9A 0000                       	dc.w Pal_SBZCyc2
00001E9C FB52                       	dc.w $FB52
00001E9E 0E08                       	dc.b $E, 8
00001EA0 0000                       	dc.w Pal_SBZCyc3
00001EA2 FB6E                       	dc.w $FB6E
00001EA4 0B08                       	dc.b $B, 8
00001EA6 0000                       	dc.w Pal_SBZCyc5
00001EA8 FB70                       	dc.w $FB70
00001EAA 0708                       	dc.b 7,	8
00001EAC 0000                       	dc.w Pal_SBZCyc6
00001EAE FB72                       	dc.w $FB72
00001EB0 1C10                       	dc.b $1C, $10
00001EB2 0000                       	dc.w Pal_SBZCyc7
00001EB4 FB7E                       	dc.w $FB7E
00001EB6 0303                       	dc.b 3,	3
00001EB8 0000                       	dc.w Pal_SBZCyc8
00001EBA FB78                       	dc.w $FB78
00001EBC 0303                       	dc.b 3,	3
00001EBE 0000                       	dc.w Pal_SBZCyc8+2
00001EC0 FB7A                       	dc.w $FB7A
00001EC2 0303                       	dc.b 3,	3
00001EC4 0000                       	dc.w Pal_SBZCyc8+4
00001EC6 FB7C                       	dc.w $FB7C
00001EC8                            	even
00001EC8                            	even
00001EC8                            
00001EC8                            Pal_SBZCycList2:
00001EC8                            	include "_inc\SBZ pallet script 2.asm"
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8                            ; Scrap Brain Zone 2 pallet cycling script
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8 0006                       	dc.w 6
00001ECA 0708                       	dc.b 7,	8
00001ECC 0000                       	dc.w Pal_SBZCyc1
00001ECE FB50                       	dc.w $FB50
00001ED0 0D08                       	dc.b $D, 8
00001ED2 0000                       	dc.w Pal_SBZCyc2
00001ED4 FB52                       	dc.w $FB52
00001ED6 0908                       	dc.b 9,	8
00001ED8 0000                       	dc.w Pal_SBZCyc9
00001EDA FB70                       	dc.w $FB70
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc6
00001EE0 FB72                       	dc.w $FB72
00001EE2 0303                       	dc.b 3,	3
00001EE4 0000                       	dc.w Pal_SBZCyc8
00001EE6 FB78                       	dc.w $FB78
00001EE8 0303                       	dc.b 3,	3
00001EEA 0000                       	dc.w Pal_SBZCyc8+2
00001EEC FB7A                       	dc.w $FB7A
00001EEE 0303                       	dc.b 3,	3
00001EF0 0000                       	dc.w Pal_SBZCyc8+4
00001EF2 FB7C                       	dc.w $FB7C
00001EF4                            	even
00001EF4                            	even
00001EF4                            
00001EF4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F04                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F14                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F24                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F30                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F40                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F50                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F70                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F7A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F8A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            ; Subroutine to	fade out and fade in
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            
00001F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F96                            
00001F96                            
00001F96                            Pal_FadeTo:
00001F96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F9C                            
00001F9C                            Pal_FadeTo2:
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 7200                       		moveq	#0,d1
00001FAA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAE                            
00001FAE                            Pal_ToBlack:
00001FAE 30C1                       		move.w	d1,(a0)+
00001FB0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB4                            
00001FB4 383C 0015                  		move.w	#$15,d4
00001FB8                            
00001FB8                            loc_1DCE:
00001FB8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBE 6100 0000                  		bsr.w	DelayProgram
00001FC2 6100                       		bsr.s	Pal_FadeIn
00001FC4 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FCC 4E75                       		rts	
00001FCE                            ; End of function Pal_FadeTo
00001FCE                            
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            ; Pallet fade-in subroutine
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            
00001FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCE                            
00001FCE                            
00001FCE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCE 7000                       		moveq	#0,d0
00001FD0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE D2C0                       		adda.w	d0,a1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            loc_1DFA:
00001FE4 6100                       		bsr.s	Pal_AddColor
00001FE6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FF0 6600                       		bne.s	locret_1E24
00001FF2 7000                       		moveq	#0,d0
00001FF4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FFC 1038 F626                  		move.b	($FFFFF626).w,d0
00002000 D0C0                       		adda.w	d0,a0
00002002 D2C0                       		adda.w	d0,a1
00002004 1038 F627                  		move.b	($FFFFF627).w,d0
00002008                            
00002008                            loc_1E1E:
00002008 6100                       		bsr.s	Pal_AddColor
0000200A 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200E                            
0000200E                            locret_1E24:
0000200E 4E75                       		rts	
00002010                            ; End of function Pal_FadeIn
00002010                            
00002010                            
00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            
00002010                            
00002010                            Pal_AddColor:				; XREF: Pal_FadeIn
00002010 3419                       		move.w	(a1)+,d2
00002012 3610                       		move.w	(a0),d3
00002014 B642                       		cmp.w	d2,d3
00002016 6700                       		beq.s	loc_1E4E
00002018 3203                       		move.w	d3,d1
0000201A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002020 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002022 30C1                       		move.w	d1,(a0)+	; update pallet
00002024 4E75                       		rts	
00002026                            ; ===========================================================================
00002026                            
00002026                            Pal_AddGreen:				; XREF: Pal_AddColor
00002026 3203                       		move.w	d3,d1
00002028 0641 0020                  		addi.w	#$20,d1		; increase green value
0000202C B242                       		cmp.w	d2,d1
0000202E 6200                       		bhi.s	Pal_AddRed
00002030 30C1                       		move.w	d1,(a0)+	; update pallet
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            Pal_AddRed:				; XREF: Pal_AddGreen
00002034 5458                       		addq.w	#2,(a0)+	; increase red value
00002036 4E75                       		rts	
00002038                            ; ===========================================================================
00002038                            
00002038                            loc_1E4E:				; XREF: Pal_AddColor
00002038 5448                       		addq.w	#2,a0
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_AddColor
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeFrom:
0000203C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002042 383C 0015                  		move.w	#$15,d4
00002046                            
00002046                            loc_1E5C:
00002046 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000204C 6100 0000                  		bsr.w	DelayProgram
00002050 6100                       		bsr.s	Pal_FadeOut
00002052 6100 F7BC                  		bsr.w	RunPLC_RAM
00002056 51CC FFEE                  		dbf	d4,loc_1E5C
0000205A 4E75                       		rts	
0000205C                            ; End of function Pal_FadeFrom
0000205C                            
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            ; Pallet fade-out subroutine
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            
0000205C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205C                            
0000205C                            
0000205C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000205C 7000                       		moveq	#0,d0
0000205E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002062 1038 F626                  		move.b	($FFFFF626).w,d0
00002066 D0C0                       		adda.w	d0,a0
00002068 1038 F627                  		move.b	($FFFFF627).w,d0
0000206C                            
0000206C                            loc_1E82:
0000206C 6100                       		bsr.s	Pal_DecColor
0000206E 51C8 FFFC                  		dbf	d0,loc_1E82
00002072                            
00002072 7000                       		moveq	#0,d0
00002074 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002078 1038 F626                  		move.b	($FFFFF626).w,d0
0000207C D0C0                       		adda.w	d0,a0
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            loc_1E98:
00002082 6100                       		bsr.s	Pal_DecColor
00002084 51C8 FFFC                  		dbf	d0,loc_1E98
00002088 4E75                       		rts	
0000208A                            ; End of function Pal_FadeOut
0000208A                            
0000208A                            
0000208A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208A                            
0000208A                            
0000208A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000208A 3410                       		move.w	(a0),d2
0000208C 6700                       		beq.s	loc_1ECC
0000208E 3202                       		move.w	d2,d1
00002090 0241 000E                  		andi.w	#$E,d1
00002094 6700                       		beq.s	Pal_DecGreen
00002096 5558                       		subq.w	#2,(a0)+	; decrease red value
00002098 4E75                       		rts	
0000209A                            ; ===========================================================================
0000209A                            
0000209A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000209A 3202                       		move.w	d2,d1
0000209C 0241 00E0                  		andi.w	#$E0,d1
000020A0 6700                       		beq.s	Pal_DecBlue
000020A2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A6 4E75                       		rts	
000020A8                            ; ===========================================================================
000020A8                            
000020A8                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A8 3202                       		move.w	d2,d1
000020AA 0241 0E00                  		andi.w	#$E00,d1
000020AE 6700                       		beq.s	loc_1ECC
000020B0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B4 4E75                       		rts	
000020B6                            ; ===========================================================================
000020B6                            
000020B6                            loc_1ECC:				; XREF: Pal_DecColor
000020B6 5448                       		addq.w	#2,a0
000020B8 4E75                       		rts	
000020BA                            ; End of function Pal_DecColor
000020BA                            
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            ; Subroutine to	fill the pallet	with white (special stage)
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            
000020BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BA                            
000020BA                            
000020BA                            Pal_MakeWhite:				; XREF: SpecialStage
000020BA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020C0 7000                       		moveq	#0,d0
000020C2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C6 1038 F626                  		move.b	($FFFFF626).w,d0
000020CA D0C0                       		adda.w	d0,a0
000020CC 323C 0EEE                  		move.w	#$EEE,d1
000020D0 1038 F627                  		move.b	($FFFFF627).w,d0
000020D4                            
000020D4                            PalWhite_Loop:
000020D4 30C1                       		move.w	d1,(a0)+
000020D6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020DA 383C 0015                  		move.w	#$15,d4
000020DE                            
000020DE                            loc_1EF4:
000020DE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E4 6100 0000                  		bsr.w	DelayProgram
000020E8 6100                       		bsr.s	Pal_WhiteToBlack
000020EA 6100 F724                  		bsr.w	RunPLC_RAM
000020EE 51CC FFEE                  		dbf	d4,loc_1EF4
000020F2 4E75                       		rts	
000020F4                            ; End of function Pal_MakeWhite
000020F4                            
000020F4                            
000020F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F4                            
000020F4                            
000020F4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F4 7000                       		moveq	#0,d0
000020F6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FE 1038 F626                  		move.b	($FFFFF626).w,d0
00002102 D0C0                       		adda.w	d0,a0
00002104 D2C0                       		adda.w	d0,a1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            loc_1F20:
0000210A 6100                       		bsr.s	Pal_DecColor2
0000210C 51C8 FFFC                  		dbf	d0,loc_1F20
00002110                            
00002110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002116 6600                       		bne.s	locret_1F4A
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002122 1038 F626                  		move.b	($FFFFF626).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	($FFFFF627).w,d0
0000212E                            
0000212E                            loc_1F44:
0000212E 6100                       		bsr.s	Pal_DecColor2
00002130 51C8 FFFC                  		dbf	d0,loc_1F44
00002134                            
00002134                            locret_1F4A:
00002134 4E75                       		rts	
00002136                            ; End of function Pal_WhiteToBlack
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002136 3419                       		move.w	(a1)+,d2
00002138 3610                       		move.w	(a0),d3
0000213A B642                       		cmp.w	d2,d3
0000213C 6700                       		beq.s	loc_1F78
0000213E 3203                       		move.w	d3,d1
00002140 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002144 6500                       		bcs.s	loc_1F64
00002146 B242                       		cmp.w	d2,d1
00002148 6500                       		bcs.s	loc_1F64
0000214A 30C1                       		move.w	d1,(a0)+
0000214C 4E75                       		rts	
0000214E                            ; ===========================================================================
0000214E                            
0000214E                            loc_1F64:				; XREF: Pal_DecColor2
0000214E 3203                       		move.w	d3,d1
00002150 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002154 6500                       		bcs.s	loc_1F74
00002156 B242                       		cmp.w	d2,d1
00002158 6500                       		bcs.s	loc_1F74
0000215A 30C1                       		move.w	d1,(a0)+
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F74:				; XREF: loc_1F64
0000215E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002160 4E75                       		rts	
00002162                            ; ===========================================================================
00002162                            
00002162                            loc_1F78:				; XREF: Pal_DecColor2
00002162 5448                       		addq.w	#2,a0
00002164 4E75                       		rts	
00002166                            ; End of function Pal_DecColor2
00002166                            
00002166                            ; ---------------------------------------------------------------------------
00002166                            ; Subroutine to	make a white flash when	you enter a special stage
00002166                            ; ---------------------------------------------------------------------------
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_MakeFlash:				; XREF: SpecialStage
00002166 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000216C 383C 0015                  		move.w	#$15,d4
00002170                            
00002170                            loc_1F86:
00002170 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002176 6100 0000                  		bsr.w	DelayProgram
0000217A 6100                       		bsr.s	Pal_ToWhite
0000217C 6100 F692                  		bsr.w	RunPLC_RAM
00002180 51CC FFEE                  		dbf	d4,loc_1F86
00002184 4E75                       		rts	
00002186                            ; End of function Pal_MakeFlash
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002186 7000                       		moveq	#0,d0
00002188 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000218C 1038 F626                  		move.b	($FFFFF626).w,d0
00002190 D0C0                       		adda.w	d0,a0
00002192 1038 F627                  		move.b	($FFFFF627).w,d0
00002196                            
00002196                            loc_1FAC:
00002196 6100                       		bsr.s	Pal_AddColor2
00002198 51C8 FFFC                  		dbf	d0,loc_1FAC
0000219C 7000                       		moveq	#0,d0
0000219E 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021A2 1038 F626                  		move.b	($FFFFF626).w,d0
000021A6 D0C0                       		adda.w	d0,a0
000021A8 1038 F627                  		move.b	($FFFFF627).w,d0
000021AC                            
000021AC                            loc_1FC2:
000021AC 6100                       		bsr.s	Pal_AddColor2
000021AE 51C8 FFFC                  		dbf	d0,loc_1FC2
000021B2 4E75                       		rts	
000021B4                            ; End of function Pal_ToWhite
000021B4                            
000021B4                            
000021B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B4                            
000021B4                            
000021B4                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B4 3410                       		move.w	(a0),d2
000021B6 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021BA 6700                       		beq.s	loc_2006
000021BC 3202                       		move.w	d2,d1
000021BE 0241 000E                  		andi.w	#$E,d1
000021C2 0C41 000E                  		cmpi.w	#$E,d1
000021C6 6700                       		beq.s	loc_1FE2
000021C8 5458                       		addq.w	#2,(a0)+	; increase red value
000021CA 4E75                       		rts	
000021CC                            ; ===========================================================================
000021CC                            
000021CC                            loc_1FE2:				; XREF: Pal_AddColor2
000021CC 3202                       		move.w	d2,d1
000021CE 0241 00E0                  		andi.w	#$E0,d1
000021D2 0C41 00E0                  		cmpi.w	#$E0,d1
000021D6 6700                       		beq.s	loc_1FF4
000021D8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021DC 4E75                       		rts	
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1FF4:				; XREF: loc_1FE2
000021DE 3202                       		move.w	d2,d1
000021E0 0241 0E00                  		andi.w	#$E00,d1
000021E4 0C41 0E00                  		cmpi.w	#$E00,d1
000021E8 6700                       		beq.s	loc_2006
000021EA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EE 4E75                       		rts	
000021F0                            ; ===========================================================================
000021F0                            
000021F0                            loc_2006:				; XREF: Pal_AddColor2
000021F0 5448                       		addq.w	#2,a0
000021F2 4E75                       		rts	
000021F4                            ; End of function Pal_AddColor2
000021F4                            
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            ; Pallet cycling routine - Sega	logo
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            
000021F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F4                            
000021F4                            
000021F4                            PalCycle_Sega:				; XREF: SegaScreen
000021F4 4A38 F635                  		tst.b	($FFFFF635).w
000021F8 6600                       		bne.s	loc_206A
000021FA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002204 7205                       		moveq	#5,d1
00002206 3038 F632                  		move.w	($FFFFF632).w,d0
0000220A                            
0000220A                            loc_2020:
0000220A 6A00                       		bpl.s	loc_202A
0000220C 5448                       		addq.w	#2,a0
0000220E 5341                       		subq.w	#1,d1
00002210 5440                       		addq.w	#2,d0
00002212 60F6                       		bra.s	loc_2020
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_202A:				; XREF: PalCycle_Sega
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2034
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2034:
0000221E 0C40 0060                  		cmpi.w	#$60,d0
00002222 6400                       		bcc.s	loc_203E
00002224 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002228                            
00002228                            loc_203E:
00002228 5440                       		addq.w	#2,d0
0000222A 51C9 FFE8                  		dbf	d1,loc_202A
0000222E 3038 F632                  		move.w	($FFFFF632).w,d0
00002232 5440                       		addq.w	#2,d0
00002234 3400                       		move.w	d0,d2
00002236 0242 001E                  		andi.w	#$1E,d2
0000223A 6600                       		bne.s	loc_2054
0000223C 5440                       		addq.w	#2,d0
0000223E                            
0000223E                            loc_2054:
0000223E 0C40 0064                  		cmpi.w	#$64,d0
00002242 6D00                       		blt.s	loc_2062
00002244 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000224A 70F4                       		moveq	#-$C,d0
0000224C                            
0000224C                            loc_2062:
0000224C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002250 7001                       		moveq	#1,d0
00002252 4E75                       		rts	
00002254                            ; ===========================================================================
00002254                            
00002254                            loc_206A:				; XREF: loc_202A
00002254 5338 F634                  		subq.b	#1,($FFFFF634).w
00002258 6A00                       		bpl.s	loc_20BC
0000225A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002260 3038 F632                  		move.w	($FFFFF632).w,d0
00002264 0640 000C                  		addi.w	#$C,d0
00002268 0C40 0030                  		cmpi.w	#$30,d0
0000226C 6500                       		bcs.s	loc_2088
0000226E 7000                       		moveq	#0,d0
00002270 4E75                       		rts	
00002272                            ; ===========================================================================
00002272                            
00002272                            loc_2088:				; XREF: loc_206A
00002272 31C0 F632                  		move.w	d0,($FFFFF632).w
00002276 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000227C 41F0 0000                  		lea	(a0,d0.w),a0
00002280 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002284 22D8                       		move.l	(a0)+,(a1)+
00002286 22D8                       		move.l	(a0)+,(a1)+
00002288 3298                       		move.w	(a0)+,(a1)
0000228A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228E 7000                       		moveq	#0,d0
00002290 722C                       		moveq	#$2C,d1
00002292                            
00002292                            loc_20A8:
00002292 3400                       		move.w	d0,d2
00002294 0242 001E                  		andi.w	#$1E,d2
00002298 6600                       		bne.s	loc_20B2
0000229A 5440                       		addq.w	#2,d0
0000229C                            
0000229C                            loc_20B2:
0000229C 3390 0000                  		move.w	(a0),(a1,d0.w)
000022A0 5440                       		addq.w	#2,d0
000022A2 51C9 FFEE                  		dbf	d1,loc_20A8
000022A6                            
000022A6                            loc_20BC:
000022A6 7001                       		moveq	#1,d0
000022A8 4E75                       		rts	
000022AA                            ; End of function PalCycle_Sega
000022AA                            
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E6                            
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            ; Subroutines to load pallets
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            
000022E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E6                            
000022E6                            
000022E6                            PalLoad1:
000022E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EC E748                       		lsl.w	#3,d0
000022EE D2C0                       		adda.w	d0,a1
000022F0 2459                       		movea.l	(a1)+,a2
000022F2 3659                       		movea.w	(a1)+,a3
000022F4 D6FC 0080                  		adda.w	#$80,a3
000022F8 3E19                       		move.w	(a1)+,d7
000022FA                            
000022FA                            loc_2110:
000022FA 26DA                       		move.l	(a2)+,(a3)+
000022FC 51CF FFFC                  		dbf	d7,loc_2110
00002300 4E75                       		rts	
00002302                            ; End of function PalLoad1
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            PalLoad2:
00002302 43F9 0000 0000             		lea	(PalPointers).l,a1
00002308 E748                       		lsl.w	#3,d0
0000230A D2C0                       		adda.w	d0,a1
0000230C 2459                       		movea.l	(a1)+,a2
0000230E 3659                       		movea.w	(a1)+,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2128:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2128
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad2
0000231A                            
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            ; Underwater pallet loading subroutine
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad3_Water:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 96FC 0080                  		suba.w	#$80,a3
0000232C 3E19                       		move.w	(a1)+,d7
0000232E                            
0000232E                            loc_2144:
0000232E 26DA                       		move.l	(a2)+,(a3)+
00002330 51CF FFFC                  		dbf	d7,loc_2144
00002334 4E75                       		rts	
00002336                            ; End of function PalLoad3_Water
00002336                            
00002336                            
00002336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002336                            
00002336                            
00002336                            PalLoad4_Water:
00002336 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233C E748                       		lsl.w	#3,d0
0000233E D2C0                       		adda.w	d0,a1
00002340 2459                       		movea.l	(a1)+,a2
00002342 3659                       		movea.w	(a1)+,a3
00002344 96FC 0100                  		suba.w	#$100,a3
00002348 3E19                       		move.w	(a1)+,d7
0000234A                            
0000234A                            loc_2160:
0000234A 26DA                       		move.l	(a2)+,(a3)+
0000234C 51CF FFFC                  		dbf	d7,loc_2160
00002350 4E75                       		rts	
00002352                            ; End of function PalLoad4_Water
00002352                            
00002352                            ; ===========================================================================
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352                            PalPointers:
00002352                            	include "_inc\Pallet pointers.asm"
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002356 FB00                       	dc.w $FB00		; RAM address
00002358 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000235A 0000 0000                  	dc.l Pal_Title
0000235E FB00                       	dc.w $FB00
00002360 001F                       	dc.w $1F
00002362 0000 0000                  	dc.l Pal_LevelSel
00002366 FB00                       	dc.w $FB00
00002368 001F                       	dc.w $1F
0000236A 0000 0000                  	dc.l Pal_Sonic
0000236E FB00                       	dc.w $FB00
00002370 0007                       	dc.w 7
00002372 0000 0000                  	dc.l Pal_GHZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_LZ
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_MZ
00002386 FB20                       	dc.w $FB20
00002388 0017                       	dc.w $17
0000238A 0000 0000                  	dc.l Pal_SLZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_SYZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ1
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_Special
000023A6 FB00                       	dc.w $FB00
000023A8 001F                       	dc.w $1F
000023AA 0000 0000                  	dc.l Pal_LZWater
000023AE FB00                       	dc.w $FB00
000023B0 001F                       	dc.w $1F
000023B2 0000 0000                  	dc.l Pal_SBZ3
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_SBZ3Water
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SBZ2
000023C6 FB20                       	dc.w $FB20
000023C8 0017                       	dc.w $17
000023CA 0000 0000                  	dc.l Pal_LZSonWater
000023CE FB00                       	dc.w $FB00
000023D0 0007                       	dc.w 7
000023D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D6 FB00                       	dc.w $FB00
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_SpeResult
000023DE FB00                       	dc.w $FB00
000023E0 001F                       	dc.w $1F
000023E2 0000 0000                  	dc.l Pal_SpeContinue
000023E6 FB00                       	dc.w $FB00
000023E8 000F                       	dc.w $F
000023EA 0000 0000                  	dc.l Pal_Ending
000023EE FB00                       	dc.w $FB00
000023F0 001F                       	dc.w $1F
000023F2 0000 0000                  	dc.l Pal_Idiot
000023F6 FB20                       	dc.w $FB20
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Gronic
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002402 0000 0000                  	dc.l Pal_LZGroWater
00002406 FB00                       	dc.w $FB00
00002408 0007                       	dc.w 7
0000240A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000240E FB00                       	dc.w $FB00
00002410 0007                       	dc.w 7
00002412 0000 0000                  	dc.l Pal_Anakama
00002416 FB00                       	dc.w $FB00
00002418 0007                       	dc.w 7
00002418 0007                       	dc.w 7
0000241A                            
0000241A                            ; ---------------------------------------------------------------------------
0000241A                            ; Pallet data
0000241A                            ; ---------------------------------------------------------------------------
0000241A                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000249A                            Pal_Title:	incbin	pallet\title.bin
0000251A                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000259A                            Pal_Sonic:	incbin	pallet\sonic.bin
000025BA                            Pal_GHZ:	incbin	pallet\ghz.bin
0000261A                            Pal_LZ:		incbin	pallet\lz.bin
0000267A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026FA                            Pal_MZ:		incbin	pallet\mz.bin
0000275A                            Pal_SLZ:	incbin	pallet\slz.bin
000027BA                            Pal_SYZ:	incbin	pallet\syz.bin
0000281A                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000287A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028DA                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000295A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029BA                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A3A                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A5A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A7A                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AFA                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B3A                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BBA                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BDA                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002BFA                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C1A                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C3A                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002CBA                            
00002CBA                            ; ---------------------------------------------------------------------------
00002CBA                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002CBA                            ; ---------------------------------------------------------------------------
00002CBA                            
00002CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CBA                            
00002CBA                            
00002CBA                            DelayProgram:				; XREF: PauseGame
00002CBA 46FC 2300                  		move	#$2300,sr
00002CBE                            
00002CBE                            loc_29AC:
00002CBE 4A38 F62A                  		tst.b	($FFFFF62A).w
00002CC2 66FA                       		bne.s	loc_29AC
00002CC4 4E75                       		rts	
00002CC6                            ; End of function DelayProgram
00002CC6                            
00002CC6                            ; ---------------------------------------------------------------------------
00002CC6                            ; Subroutine to	generate a pseudo-random number	in d0
00002CC6                            ; ---------------------------------------------------------------------------
00002CC6                            
00002CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CC6                            
00002CC6                            
00002CC6                            RandomNumber:
00002CC6 2238 F636                  		move.l	($FFFFF636).w,d1
00002CCA 6600                       		bne.s	loc_29C0
00002CCC 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002CD2                            
00002CD2                            loc_29C0:
00002CD2 2001                       		move.l	d1,d0
00002CD4 E581                       		asl.l	#2,d1
00002CD6 D280                       		add.l	d0,d1
00002CD8 E781                       		asl.l	#3,d1
00002CDA D280                       		add.l	d0,d1
00002CDC 3001                       		move.w	d1,d0
00002CDE 4841                       		swap	d1
00002CE0 D041                       		add.w	d1,d0
00002CE2 3200                       		move.w	d0,d1
00002CE4 4841                       		swap	d1
00002CE6 21C1 F636                  		move.l	d1,($FFFFF636).w
00002CEA 4E75                       		rts	
00002CEC                            ; End of function RandomNumber
00002CEC                            
00002CEC                            
00002CEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CEC                            
00002CEC                            
00002CEC                            CalcSine:				; XREF: SS_BGAnimate; et al
00002CEC 0240 00FF                  		andi.w	#$FF,d0
00002CF0 D040                       		add.w	d0,d0
00002CF2 0640 0080                  		addi.w	#$80,d0
00002CF6 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002CFA 0440 0080                  		subi.w	#$80,d0
00002CFE 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D02 4E75                       		rts	
00002D04                            ; End of function CalcSine
00002D04                            
00002D04                            ; ===========================================================================
00002D04                            
00002D04                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002F84                            
00002F84                            ; ===========================================================================
00002F84 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F88 3200                       		move.w	d0,d1
00002F8A 4841                       		swap	d1
00002F8C 7000                       		moveq	#0,d0
00002F8E 3200                       		move.w	d0,d1
00002F90 7407                       		moveq	#7,d2
00002F92                            
00002F92                            loc_2C80:
00002F92 E599                       		rol.l	#2,d1
00002F94 D040                       		add.w	d0,d0
00002F96 5240                       		addq.w	#1,d0
00002F98 9240                       		sub.w	d0,d1
00002F9A 6400                       		bcc.s	loc_2C9A
00002F9C D240                       		add.w	d0,d1
00002F9E 5340                       		subq.w	#1,d0
00002FA0 51CA FFF0                  		dbf	d2,loc_2C80
00002FA4 E248                       		lsr.w	#1,d0
00002FA6 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FAA 4E75                       		rts	
00002FAC                            ; ===========================================================================
00002FAC                            
00002FAC                            loc_2C9A:
00002FAC 5240                       		addq.w	#1,d0
00002FAE 51CA FFE2                  		dbf	d2,loc_2C80
00002FB2 E248                       		lsr.w	#1,d0
00002FB4 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FB8 4E75                       		rts	
00002FBA                            
00002FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002FBA                            
00002FBA                            
00002FBA                            CalcAngle:
00002FBA 48E7 1800                  		movem.l	d3-d4,-(sp)
00002FBE 7600                       		moveq	#0,d3
00002FC0 7800                       		moveq	#0,d4
00002FC2 3601                       		move.w	d1,d3
00002FC4 3802                       		move.w	d2,d4
00002FC6 8843                       		or.w	d3,d4
00002FC8 6700                       		beq.s	loc_2D04
00002FCA 3802                       		move.w	d2,d4
00002FCC 4A43                       		tst.w	d3
00002FCE 6A00 0000                  		bpl.w	loc_2CC2
00002FD2 4443                       		neg.w	d3
00002FD4                            
00002FD4                            loc_2CC2:
00002FD4 4A44                       		tst.w	d4
00002FD6 6A00 0000                  		bpl.w	loc_2CCA
00002FDA 4444                       		neg.w	d4
00002FDC                            
00002FDC                            loc_2CCA:
00002FDC B843                       		cmp.w	d3,d4
00002FDE 6400 0000                  		bcc.w	loc_2CDC
00002FE2 E18C                       		lsl.l	#8,d4
00002FE4 88C3                       		divu.w	d3,d4
00002FE6 7000                       		moveq	#0,d0
00002FE8 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002FEC 6000                       		bra.s	loc_2CE6
00002FEE                            ; ===========================================================================
00002FEE                            
00002FEE                            loc_2CDC:				; XREF: CalcAngle
00002FEE E18B                       		lsl.l	#8,d3
00002FF0 86C4                       		divu.w	d4,d3
00002FF2 7040                       		moveq	#$40,d0
00002FF4 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002FF8                            
00002FF8                            loc_2CE6:
00002FF8 4A41                       		tst.w	d1
00002FFA 6A00 0000                  		bpl.w	loc_2CF2
00002FFE 4440                       		neg.w	d0
00003000 0640 0080                  		addi.w	#$80,d0
00003004                            
00003004                            loc_2CF2:
00003004 4A42                       		tst.w	d2
00003006 6A00 0000                  		bpl.w	loc_2CFE
0000300A 4440                       		neg.w	d0
0000300C 0640 0100                  		addi.w	#$100,d0
00003010                            
00003010                            loc_2CFE:
00003010 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003014 4E75                       		rts	
00003016                            ; ===========================================================================
00003016                            
00003016                            loc_2D04:				; XREF: CalcAngle
00003016 303C 0040                  		move.w	#$40,d0
0000301A 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000301E 4E75                       		rts	
00003020                            ; End of function CalcAngle
00003020                            
00003020                            ; ===========================================================================
00003020                            
00003020                            Angle_Data:	incbin	misc\angles.bin
00003122                            
00003122                            ; ===========================================================================
00003122                            
00003122                            ; ---------------------------------------------------------------------------
00003122                            ; Sega screen
00003122                            ; ---------------------------------------------------------------------------
00003122                            
00003122                            SegaScreen:				; XREF: GameModeArray
00003122 103C 00E4                  		move.b	#$E4,d0
00003126 6100 E498                  		bsr.w	PlaySound_Special ; stop music
0000312A 6100 E6D6                  		bsr.w	ClearPLC
0000312E 6100 EF0C                  		bsr.w	Pal_FadeFrom
00003132 4DF9 00C0 0004             		lea	($C00004).l,a6
00003138 3CBC 8004                  		move.w	#$8004,(a6)
0000313C 3CBC 8230                  		move.w	#$8230,(a6)
00003140 3CBC 8407                  		move.w	#$8407,(a6)
00003144 3CBC 8700                  		move.w	#$8700,(a6)
00003148 3CBC 8B00                  		move.w	#$8B00,(a6)
0000314C 4238 F64E                  		clr.b	($FFFFF64E).w
00003150 46FC 2700                  		move	#$2700,sr
00003154 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003158 0200 00BF                  		andi.b	#$BF,d0
0000315C 33C0 00C0 0004             		move.w	d0,($C00004).l
00003162 6100 E384                  		bsr.w	ClearScreen
00003166 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003170 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003176 6100 E4EC                  		bsr.w	NemDec
0000317A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003180 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003186 303C 0000                  		move.w	#0,d0
0000318A 6100 E7B6                  		bsr.w	EniDec
0000318E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003194 203C 6510 0003             		move.l	#$65100003,d0
0000319A 7217                       		moveq	#$17,d1
0000319C 7407                       		moveq	#7,d2
0000319E 6100 E4A4                  		bsr.w	ShowVDPGraphics
000031A2 43F9 00FF 0180             		lea	($FF0180).l,a1
000031A8 203C 4000 0003             		move.l	#$40000003,d0
000031AE 7227                       		moveq	#$27,d1
000031B0 741B                       		moveq	#$1B,d2
000031B2 6100 E490                  		bsr.w	ShowVDPGraphics
000031B6 7000                       		moveq	#0,d0
000031B8 6100 F148                  		bsr.w	PalLoad2	; load Sega logo pallet
000031BC 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000031C2 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000031C8 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000031CE 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000031D4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031D8 0000 0040                  		ori.b	#$40,d0
000031DC 33C0 00C0 0004             		move.w	d0,($C00004).l
000031E2                            
000031E2                            Sega_WaitPallet:
000031E2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000031E8 6100 FAD0                  		bsr.w	DelayProgram
000031EC 6100 F006                  		bsr.w	PalCycle_Sega
000031F0 66F0                       		bne.s	Sega_WaitPallet
000031F2                            
000031F2 103C 00E1                  		move.b	#$E1,d0
000031F6 6100 E3C8                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000031FA 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003200 6100 FAB8                  		bsr.w	DelayProgram
00003204 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000320A                            
0000320A                            Sega_WaitEnd:
0000320A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003210 6100 FAA8                  		bsr.w	DelayProgram
00003214 4A78 F614                  		tst.w	($FFFFF614).w
00003218 6700                       		beq.s	Sega_GotoTitle
0000321A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003220 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003222                            
00003222                            Sega_GotoTitle:
00003222 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003228 4E75                       		rts	
0000322A                            ; ===========================================================================
0000322A                            
0000322A                            ; ---------------------------------------------------------------------------
0000322A                            ; Title	screen
0000322A                            ; ---------------------------------------------------------------------------
0000322A                            
0000322A                            TitleScreen:				; XREF: GameModeArray
0000322A 103C 00E4                  		move.b	#$E4,d0
0000322E 6100 E390                  		bsr.w	PlaySound_Special ; stop music
00003232 6100 EE08                  		bsr.w	Pal_FadeFrom
00003236 6100 E5CA                  		bsr.w	ClearPLC
0000323A 46FC 2700                  		move	#$2700,sr
0000323E 6100 E336                  		bsr.w	SoundDriverLoad
00003242 4DF9 00C0 0004             		lea	($C00004).l,a6
00003248 3CBC 8004                  		move.w	#$8004,(a6)
0000324C 3CBC 8230                  		move.w	#$8230,(a6)
00003250 3CBC 8407                  		move.w	#$8407,(a6)
00003254 3CBC 9001                  		move.w	#$9001,(a6)
00003258 3CBC 9200                  		move.w	#$9200,(a6)
0000325C 3CBC 8B03                  		move.w	#$8B03,(a6)
00003260 3CBC 8720                  		move.w	#$8720,(a6)
00003264 4238 F64E                  		clr.b	($FFFFF64E).w
00003268 6100 E27E                  		bsr.w	ClearScreen
0000326C 43F8 D000                  		lea	($FFFFD000).w,a1
00003270 7000                       		moveq	#0,d0
00003272 323C 07FF                  		move.w	#$7FF,d1
00003276                            
00003276                            Title_ClrObjRam:
00003276 22C0                       		move.l	d0,(a1)+
00003278 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000327C                            
0000327C                            ; gomer
0000327C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003286 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
0000328C 6100 E3D6                  		bsr.w	NemDec
00003290 7003                       		moveq	#3,d0		; load Sonic's pallet
00003292 6100 F052                  		bsr.w	PalLoad1
00003296                            
00003296 43F9 00FF 0000             		lea	($FF0000).l,a1
0000329C 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000032A2 303C 0000                  		move.w	#0,d0
000032A6 6100 E69A                  		bsr.w	EniDec
000032AA                            ; help how the fuck can i do this IT SHOWS NOTHING
000032AA 43F9 00FF 0000             		lea	($FF0000).l,a1
000032B0 203C 4000 0003             		move.l	#$40000003,d0
000032B6 7227                       		moveq	#$27,d1
000032B8 741B                       		moveq	#$1B,d2
000032BA 6100 E388                  		bsr.w	ShowVDPGraphics
000032BE                            
000032BE                            
000032BE 43F9 00FF 0000             		lea	($FF0000).l,a1
000032C4 203C 6000 0003             		move.l	#$60000003,d0
000032CA 7227                       		moveq	#$27,d1
000032CC 741B                       		moveq	#$1B,d2
000032CE                            
000032CE 6100 ECC6                  		bsr.w	Pal_FadeTo
000032D2 6100 ED68                  		bsr.w	Pal_FadeFrom
000032D6                            
000032D6                            
000032D6 6100 E210                  		bsr.w	ClearScreen
000032DA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032E4 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000032EA 6100 E378                  		bsr.w	NemDec
000032EE 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000032F8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000032FE 6100 E364                  		bsr.w	NemDec
00003302 43F9 00FF 0000             		lea	($FF0000).l,a1
00003308 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000330E 303C 0000                  		move.w	#0,d0
00003312 6100 E62E                  		bsr.w	EniDec
00003316 43F9 00FF 0000             		lea	($FF0000).l,a1
0000331C 203C 4000 0003             		move.l	#$40000003,d0
00003322 7227                       		moveq	#$27,d1
00003324 741B                       		moveq	#$1B,d2
00003326 6100 E31C                  		bsr.w	ShowVDPGraphics
0000332A 6100 ED10                  		bsr.w	Pal_FadeFrom
0000332E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003332 7000                       		moveq	#0,d0
00003334 323C 001F                  		move.w	#$1F,d1
00003338                            
00003338                            
00003338                            Title_ClrPallet:
00003338 22C0                       		move.l	d0,(a1)+
0000333A 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
0000333E                            
0000333E 7003                       		moveq	#3,d0		; load Sonic's pallet
00003340 6100 EFA4                  		bsr.w	PalLoad1
00003344 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000334A 4EB9 0000 0000             		jsr	ObjectsLoad
00003350 4EB9 0000 0000             		jsr	BuildSprites
00003356 6100 EC3E                  		bsr.w	Pal_FadeTo
0000335A 46FC 2700                  		move	#$2700,sr
0000335E 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003368 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000336E 6100 E2F4                  		bsr.w	NemDec
00003372 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000337C 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003382 6100 E2E0                  		bsr.w	NemDec
00003386 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003390 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003396 6100 E2CC                  		bsr.w	NemDec
0000339A 4DF9 00C0 0000             		lea	($C00000).l,a6
000033A0 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000033A8 4BF9 0000 05F4             		lea	(Art_Text).l,a5
000033AE 323C 0BB6                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000033B2                            
000033B2                            Title_LoadText:
000033B2 2C9D                       		move.l	(a5)+,(a6)
000033B4 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000033B8                            
000033B8 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000033BE 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000033C4 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000033CA 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000033D0 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000033D6 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000033DC 6100 0000                  		bsr.w	LevelSizeLoad
000033E0 6100 0000                  		bsr.w	DeformBgLayer
000033E4                            
000033E4 43F8 B000                  		lea	($FFFFB000).w,a1
000033E8 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000033EE 303C 0000                  		move.w	#0,d0
000033F2 6100 E54E                  		bsr.w	EniDec
000033F6 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000033FC 43F9 00FF 0000             		lea	($FF0000).l,a1
00003402 6100 E6BC                  		bsr.w	KosDec
00003406 6100 0000                  		bsr.w	LevelLayoutLoad
0000340A                            
0000340A 46FC 2700                  		move	#$2700,sr
0000340E 6100 E0D8                  		bsr.w	ClearScreen
00003412 4BF9 00C0 0004             		lea	($C00004).l,a5
00003418 4DF9 00C0 0000             		lea	($C00000).l,a6
0000341E 47F8 F708                  		lea	($FFFFF708).w,a3
00003422 49F8 A440                  		lea	($FFFFA440).w,a4
00003426 343C 6000                  		move.w	#$6000,d2
0000342A 6100 0000                  		bsr.w	LoadTilesFromStart2
0000342E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003434 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000343A 303C 0000                  		move.w	#0,d0
0000343E 6100 E502                  		bsr.w	EniDec
00003442 43F9 00FF 0000             		lea	($FF0000).l,a1
00003448 203C 4206 0003             		move.l	#$42060003,d0
0000344E 7221                       		moveq	#$21,d1
00003450 7415                       		moveq	#$15,d2
00003452 6100 E1F0                  		bsr.w	ShowVDPGraphics
00003456 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003460 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003466 6100 E1FC                  		bsr.w	NemDec
0000346A 7001                       		moveq	#1,d0		; load title screen pallet
0000346C 6100 EE78                  		bsr.w	PalLoad1
00003470 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003474 6100 E14A                  		bsr.w	PlaySound_Special
00003478 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000347E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003484 43F8 D080                  		lea	($FFFFD080).w,a1
00003488 7000                       		moveq	#0,d0
0000348A 323C 000F                  		move.w	#$F,d1
0000348E                            
0000348E                            Title_ClrObjRam2:
0000348E 22C0                       		move.l	d0,(a1)+
00003490 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003494                            
00003494 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000349A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000034A0 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000034A6 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000034AC 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000034B2 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000034B8 4EB9 0000 0000             		jsr	ObjectsLoad
000034BE 6100 0000                  		bsr.w	DeformBgLayer
000034C2 4EB9 0000 0000             		jsr	BuildSprites
000034C8 7000                       		moveq	#0,d0
000034CA 6100 E30A                  		bsr.w	LoadPLC2
000034CE 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000034D4 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000034DA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000034DE 0000 0040                  		ori.b	#$40,d0
000034E2 33C0 00C0 0004             		move.w	d0,($C00004).l
000034E8 6100 EAAC                  		bsr.w	Pal_FadeTo
000034EC                            
000034EC                            loc_317C:
000034EC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000034F2 6100 F7C6                  		bsr.w	DelayProgram
000034F6 4EB9 0000 0000             		jsr	ObjectsLoad
000034FC 6100 0000                  		bsr.w	DeformBgLayer
00003500 4EB9 0000 0000             		jsr	BuildSprites
00003506 6100 E678                  		bsr.w	PalCycle_Title
0000350A 6100 E304                  		bsr.w	RunPLC_RAM
0000350E 3038 D008                  		move.w	($FFFFD008).w,d0
00003512 5440                       		addq.w	#2,d0
00003514 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003518 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000351C 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000351E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003524 4E75                       		rts	
00003526                            ; ===========================================================================
00003526                            
00003526                            Title_ChkRegion:
00003526 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000352A 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000352C 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003532 6000                       		bra.s	Title_EnterCheat
00003534                            ; ===========================================================================
00003534                            
00003534                            Title_RegionJ:				; XREF: Title_ChkRegion
00003534 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
0000353A                            
0000353A                            Title_EnterCheat:			; XREF: Title_ChkRegion
0000353A 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
0000353E D0C0                       		adda.w	d0,a0
00003540 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003544 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003548 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000354A 6600                       		bne.s	loc_3210	; if not, branch
0000354C 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003550 4A00                       		tst.b	d0
00003552 6600                       		bne.s	Title_CountC
00003554 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003558 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
0000355C E249                       		lsr.w	#1,d1
0000355E 0241 0003                  		andi.w	#3,d1
00003562 6700                       		beq.s	Title_PlayRing
00003564 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003568 6A00                       		bpl.s	Title_PlayRing
0000356A 7201                       		moveq	#1,d1
0000356C 1181 1001                  		move.b	d1,1(a0,d1.w)
00003570                            
00003570                            Title_PlayRing:
00003570 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003576 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000357A 6100 E044                  		bsr.w	PlaySound_Special
0000357E 6000                       		bra.s	Title_CountC
00003580                            ; ===========================================================================
00003580                            
00003580                            loc_3210:				; XREF: Title_EnterCheat
00003580 4A00                       		tst.b	d0
00003582 6700                       		beq.s	Title_CountC
00003584 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000358A 6700                       		beq.s	Title_CountC
0000358C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003592                            
00003592                            Title_CountC:
00003592 1038 F605                  		move.b	($FFFFF605).w,d0
00003596 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000359A 6700                       		beq.s	loc_3230	; if not, branch
0000359C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000035A0                            
000035A0                            loc_3230:
000035A0 4A78 F614                  		tst.w	($FFFFF614).w
000035A4 6700 0000                  		beq.w	Demo
000035A8                            		; (temporary until we have an actual options screen)
000035A8 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000035AE 6700                       		beq.s	@notc
000035B0                            
000035B0 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
000035B4 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
000035BA 6D00                       		blt.s	@notoverflow
000035BC 11FC 0000 FFE8             		move.b	#0,(v_character).w
000035C2                            	@notoverflow:
000035C2 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035C6 6100 DFF8                  		bsr.w	PlaySound_Special
000035CA                            	@notc:
000035CA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000035D0 6700 FF1A                  		beq.w	loc_317C	; if not, branch
000035D4                            
000035D4                            Title_ChkLevSel:
000035D4 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000035D8 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035DC 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000035E2 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035E6                            		
000035E6                            		
000035E6 7002                       		moveq	#2,d0
000035E8 6100 ED18                  		bsr.w	PalLoad2	; load level select pallet
000035EC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000035F0 7000                       		moveq	#0,d0
000035F2 323C 00DF                  		move.w	#$DF,d1
000035F6                            
000035F6                            Title_ClrScroll:
000035F6 22C0                       		move.l	d0,(a1)+
000035F8 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000035FC                            
000035FC 21C0 F616                  		move.l	d0,($FFFFF616).w
00003600 46FC 2700                  		move	#$2700,sr
00003604 4DF9 00C0 0000             		lea	($C00000).l,a6
0000360A 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003614 323C 03FF                  		move.w	#$3FF,d1
00003618                            
00003618                            Title_ClrVram:
00003618 2C80                       		move.l	d0,(a6)
0000361A 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000361E                            
0000361E 6100 0000                  		bsr.w	LevSelTextLoad
00003622                            		
00003622                            		; sound test fix
00003622 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003626 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
0000362C                            		
0000362C 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003630 0C46 0014                  		cmpi.w	#$14,d6
00003634 6700                       		beq.s	@issndtst
00003636 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
0000363A                            	@issndtst:
0000363A 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
0000363E 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003642                            		
00003642 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003646 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000364E                            		
0000364E 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003654 6700                       		beq.s	@issndtst2
00003656                            		
00003656 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
0000365C 6100 0000                  		bsr.w	CStringSlop
00003660 6000                       		bra.s	LevelSelect
00003662                            	@issndtst2:
00003662 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003668 6100 0000                  		bsr.w	CStringSlop
0000366C                            ; ---------------------------------------------------------------------------
0000366C                            ; Level	Select
0000366C                            ; ---------------------------------------------------------------------------
0000366C                            LevelSelect:
0000366C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003672 6100 F646                  		bsr.w	DelayProgram
00003676 6100 0000                  		bsr.w	LevSelControls
0000367A 6100 E194                  		bsr.w	RunPLC_RAM
0000367E 4AB8 F680                  		tst.l	($FFFFF680).w
00003682 66E8                       		bne.s	LevelSelect
00003684 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000368A 67E0                       		beq.s	LevelSelect	; if not, branch
0000368C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003690 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003694 6600                       		bne.s	@dont	; if not, dont blow this place up
00003696                            			
00003696 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
0000369C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036A2 6100 F616                  		bsr.w	DelayProgram
000036A6                            	@dont:
000036A6 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000036AA 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000036AC                            		
000036AC 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
000036B2 67B8                       		beq.s	LevelSelect	; if not, branch
000036B4                            		
000036B4 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
000036BA 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
000036BC                            		
000036BC 1038 FF84                  		move.b	($FFFFFF84).w,d0
000036C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000036C4                            		
000036C4 4EB9 0000 0000             		jsr		ShowNow_Playing
000036CA 60A0                       		bra.s	LevelSelect
000036CC                            ; ===========================================================================
000036CC                            
000036CC                            LevSel_SEGA:				; XREF: LevelSelect
000036CC 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
000036D2 4E75                       		rts	
000036D4                            ; ===========================================================================
000036D4                            
000036D4                            LevSel_Ending:				; XREF: LevelSelect
000036D4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000036DA 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000036E0 4E75                       		rts	
000036E2                            ; ===========================================================================
000036E2                            
000036E2                            LevSel_Credits:				; XREF: LevelSelect
000036E2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000036E8 103C 0091                  		move.b	#$91,d0
000036EC 6100 DED2                  		bsr.w	PlaySound_Special ; play credits music
000036F0 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000036F6 4E75                       		rts	
000036F8                            ; ===========================================================================
000036F8                            
000036F8                            LevSel_Level_SS:			; XREF: LevelSelect
000036F8 D040                       		add.w	d0,d0
000036FA 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000036FE 6B00 FF6C                  		bmi.w	LevelSelect
00003702 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003706 6600                       		bne.s	LevSel_Level	; if not, branch
00003708 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000370E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003712 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003718 7000                       		moveq	#0,d0
0000371A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000371E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003722 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003726 4E75                       		rts	
00003728                            ; ===========================================================================
00003728                            
00003728                            LevSel_Level:				; XREF: LevSel_Level_SS
00003728 0240 3FFF                  		andi.w	#$3FFF,d0
0000372C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003730                            
00003730                            PlayLevel:				; XREF: ROM:00003246j ...
00003730 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003736 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000373C 7000                       		moveq	#0,d0
0000373E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003742 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003746 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000374A 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000374E 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003752 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003756 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000375A 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000375E 103C 00E0                  		move.b	#$E0,d0
00003762 6100 DE5C                  		bsr.w	PlaySound_Special ; fade out music
00003766 4E75                       		rts	
00003768                            ; ===========================================================================
00003768                            ; ---------------------------------------------------------------------------
00003768                            ; Level	select - level pointers
00003768                            ; ---------------------------------------------------------------------------
00003768                            LSelectPointers:
00003768                            		incbin	misc\ls_point.bin
00003792                            		even
00003792                            ; ---------------------------------------------------------------------------
00003792                            ; Level	select codes
00003792                            ; ---------------------------------------------------------------------------
00003792                            LevelSelectCode_J:
00003792                            		incbin	misc\ls_jcode.bin
00003798                            		even
00003798                            
00003798                            LevelSelectCode_US:
00003798                            		incbin	misc\ls_ucode.bin
0000379E                            		even
0000379E                            ; ===========================================================================
0000379E                            
0000379E                            ; ---------------------------------------------------------------------------
0000379E                            ; Demo mode
0000379E                            ; ---------------------------------------------------------------------------
0000379E                            
0000379E                            Demo:					; XREF: TitleScreen
0000379E 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000037A4                            
000037A4                            loc_33B6:				; XREF: loc_33E4
000037A4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000037AA 6100 F50E                  		bsr.w	DelayProgram
000037AE 6100 0000                  		bsr.w	DeformBgLayer
000037B2 6100 E3AC                  		bsr.w	PalCycle_Load
000037B6 6100 E058                  		bsr.w	RunPLC_RAM
000037BA 3038 D008                  		move.w	($FFFFD008).w,d0
000037BE 5440                       		addq.w	#2,d0
000037C0 31C0 D008                  		move.w	d0,($FFFFD008).w
000037C4 0C40 1C00                  		cmpi.w	#$1C00,d0
000037C8 6500                       		bcs.s	loc_33E4
000037CA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000037D0 4E75                       		rts	
000037D2                            ; ===========================================================================
000037D2                            
000037D2                            loc_33E4:				; XREF: Demo
000037D2 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000037D8 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
000037DC 4A78 F614                  		tst.w	($FFFFF614).w
000037E0 6600 FFC2                  		bne.w	loc_33B6
000037E4 103C 00E0                  		move.b	#$E0,d0
000037E8 6100 DDD6                  		bsr.w	PlaySound_Special ; fade out music
000037EC 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000037F0 0240 0007                  		andi.w	#7,d0
000037F4 D040                       		add.w	d0,d0
000037F6 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000037FA 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000037FE 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003802 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003808 6500                       		bcs.s	loc_3422	; if yes, branch
0000380A 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003810                            
00003810                            loc_3422:
00003810 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003816 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000381C 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003820 6600                       		bne.s	Demo_Level	; if not, branch
00003822 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003828 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000382C 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003830                            
00003830                            Demo_Level:
00003830 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003836 7000                       		moveq	#0,d0
00003838 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000383C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003840 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003844 4E75                       		rts	
00003846                            ; ===========================================================================
00003846                            ; ---------------------------------------------------------------------------
00003846                            ; Levels used in demos
00003846                            ; ---------------------------------------------------------------------------
00003846                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000384E                            		even
0000384E                            
0000384E                            ; ---------------------------------------------------------------------------
0000384E                            ; Subroutine to	change what you're selecting in the level select
0000384E                            ; ---------------------------------------------------------------------------
0000384E                            
0000384E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000384E                            
0000384E                            
0000384E                            LevSelControls:				; XREF: LevelSelect
0000384E 1238 F605                  		move.b	($FFFFF605).w,d1
00003852 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003856 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003858 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000385C 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
00003860                            
00003860                            LevSel_UpDown:
00003860 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003866 1238 F604                  		move.b	($FFFFF604).w,d1
0000386A 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000386E 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
00003872 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003876 0801 0000                  		btst	#0,d1		; is up	pressed?
0000387A 6700                       		beq.s	LevSel_Down	; if not, branch
0000387C 5346                       		subq.w	#1,d6		; move up 1 selection
0000387E 6400                       		bcc.s	LevSel_Down
00003880 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003882                            
00003882                            LevSel_Down:
00003882 0801 0001                  		btst	#1,d1		; is down pressed?
00003886 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003888 5246                       		addq.w	#1,d6		; move down 1 selection
0000388A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000388E 6500                       		bcs.s	LevSel_Refresh
00003890 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003892 6000                       		bra.s	LevSel_Refresh
00003894                            		
00003894                            LevSel_LR:
00003894 0801 0002                  		btst	#2,d1		; is left pressed?
00003898 6700                       		beq.s	LevSel_Right	; if not, branch
0000389A 0446 0000                  		sub.w	#lsrow2size,d6
0000389E 64E2                       		bcc.s	LevSel_Down
000038A0 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000038A4                            LevSel_Right:
000038A4 0801 0003                  		btst	#3,d1		; is right pressed?
000038A8 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038AA 0646 0000                  		add.w	#lsrow1size,d6
000038AE 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038B2 6500                       		bcs.s	LevSel_Refresh
000038B4 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
000038B8                            ; ===========================================================================
000038B8                            LevSel_Refresh:
000038B8                            		
000038B8 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000038BC 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000038C0                            		
000038C0 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000038C6 6600                       		bne.s	@exitsndtest
000038C8                            		
000038C8 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000038CC 43F9 0000 0000             		lea	(Controls_Normal).l,a1
000038D2 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000038DA 6100 0000                  		bsr.w	CStringSlop
000038DE                            	@exitsndtest:
000038DE                            	
000038DE 363C C65F                  		move.w	#$C680-$21,d3
000038E2 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000038E6 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000038EA                            		
000038EA 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
000038F0 6600                       		bne.s	@entersndtest
000038F2                            		
000038F2 363C C65F                  		move.w	#$C680-$21,d3
000038F6 43F9 0000 0000             		lea	(Controls_SND).l,a1
000038FC 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003904 6100 0000                  		bsr.w	CStringSlop
00003908                            	@entersndtest:
00003908 4E75                       		rts	
0000390A                            		
0000390A                            LevSel_SndTest:				; XREF: LevSelControls
0000390A 1238 F605                  		move.b	($FFFFF605).w,d1
0000390E 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003912 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003914 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
0000391A 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
0000391E                            		
0000391E 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003922 0801 0002                  		btst	#2,d1		; is left pressed?
00003926 6700                       		beq.s	SndTest_Right	; if not, branch
00003928 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
0000392A                            		; no need the fact it's a byte does the trick
0000392A                            
0000392A                            SndTest_Right:
0000392A 0801 0003                  		btst	#3,d1		; is right pressed?
0000392E 6700                       		beq.s	SndTest_A	; if not, branch
00003930 5200                       		addq.b	#1,d0		; add 1	to sound test
00003932                            		; same here
00003932                            		
00003932                            SndTest_A:
00003932 0801 0006                  		btst	#6,d1		; is A pressed?
00003936 6700                       		beq.s	SndTest_B	; if not, branch
00003938 5100                       		subq.b	#8,d0		; subtract $10 to sound test
0000393A 5100                       		subq.b	#8,d0
0000393C                            		
0000393C                            SndTest_B:
0000393C 0801 0004                  		btst	#4,d1		; is B pressed?
00003940 6700                       		beq.s	SndTest_Refresh	; if not, branch
00003942 5000                       		addq.b	#8,d0		; add $10 to sound test
00003944 5000                       		addq.b	#8,d0
00003946                            
00003946                            SndTest_Refresh:
00003946 363C C65F                  		move.w	#$C680-$21,d3
0000394A 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
0000394E 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00003952                            
00003952                            LevSel_NoMove:
00003952 4E75                       		rts	
00003954                            ; End of function LevSelControls
00003954                            
00003954                            ; ---------------------------------------------------------------------------
00003954                            ; Subroutine to load level select text
00003954                            ; ---------------------------------------------------------------------------
00003954                            
00003954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003954                            
00003954                            LevSelTextLoad_loop:
00003954 2D44 0004                  		move.l	d4,4(a6)
00003958 6100 0000                  		bsr.w	LevSel_ChgLine
0000395C 0684 0080 0000             		addi.l	#$800000,d4
00003962 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003966 4E75                       		rts
00003968                            LevSelTextLoad:				; XREF: TitleScreen
00003968 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000396E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003974 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003978 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
0000397E                            		
0000397E 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003982 61D0                       		bsr.s	LevSelTextLoad_loop
00003984                            		
00003984                            		
00003984 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
0000398A 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
0000398E 61C4                       		bsr.s	LevSelTextLoad_loop
00003990 363C C65F                  		move.w	#$C680-$21,d3
00003994                            		
00003994                            LevSelHighlightCode:
00003994 4DF9 00C0 0000             		lea	($C00000).l,a6
0000399A 7000                       		moveq	#0,d0
0000399C 3038 FF82                  		move.w	($FFFFFF82).w,d0
000039A0 3200                       		move.w	d0,d1
000039A2 283C 6086 0003             		move.l	#lsscrpos,d4
000039A8                            		
000039A8 0C40 0000                  		cmpi.w	#lsrow1size,d0
000039AC 6D00                       		blt.s	@notsecond
000039AE                            		
000039AE 0440 0000                  		sub.w	#lsrow1size,d0
000039B2 0684 0024 0000             		addi.l	#lsoff,d4
000039B8                            	@notsecond:
000039B8 EF48                       		lsl.w	#7,d0
000039BA 4840                       		swap	d0
000039BC D880                       		add.l	d0,d4
000039BE 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039C4 E749                       		lsl.w	#3,d1
000039C6 D241                       		add.w	d1,d1
000039C8 D2C1                       		adda.w	d1,a1
000039CA 2D44 0004                  		move.l	d4,4(a6)
000039CE 6100 0000                  		bsr.w	LevSel_ChgLine
000039D2 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000039D8 6700                       		beq.s	LevSelSndTest
000039DA 4E75                       		rts
000039DC                            
000039DC                            LevSelSndTest:
000039DC 0643 0030                  		add.w	#$30,d3
000039E0 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000039EA 1038 FF84                  		move.b	($FFFFFF84).w,d0
000039EE 1400                       		move.b	d0,d2
000039F0 E808                       		lsr.b	#4,d0
000039F2 6100 0000                  		bsr.w	LevSel_ChgSnd
000039F6 1002                       		move.b	d2,d0
000039F8 6100 0000                  		bsr.w	LevSel_ChgSnd
000039FC 4E75                       		rts	
000039FE                            ; End of function LevSelTextLoad
000039FE                            
000039FE                            
000039FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039FE                            
000039FE                            
000039FE                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000039FE 0240 000F                  		andi.w	#$F,d0
00003A02 0C00 000A                  		cmpi.b	#$A,d0
00003A06 6500                       		bcs.s	loc_3580
00003A08 5E00                       		addi.b	#7,d0
00003A0A                            
00003A0A                            loc_3580:
00003A0A D043                       		add.w	d3,d0
00003A0C 3C80                       		move.w	d0,(a6)
00003A0E 4E75                       		rts	
00003A10                            ; End of function LevSel_ChgSnd
00003A10                            
00003A10                            
00003A10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A10                            
00003A10                            
00003A10                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A10 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A12                            
00003A12                            @loop:
00003A12 7000                       		moveq	#0,d0
00003A14 1019                       		move.b	(a1)+,d0
00003A16 0C00 0020                  		cmpi.b	#$20,d0
00003A1A 6E00                       		bgt.s	@draw
00003A1C 3CBC 0000                  		move.w	#0,(a6)
00003A20 51CA FFF0                  		dbf	d2,@loop
00003A24 4E75                       		rts	
00003A26                            ; ===========================================================================
00003A26                            
00003A26                            @draw:				; XREF: LevSel_ChgLine
00003A26 D043                       		add.w	d3,d0
00003A28 3C80                       		move.w	d0,(a6)
00003A2A 51CA FFE6                  		dbf	d2,@loop
00003A2E 4E75                       		rts	
00003A30                            ; End of function LevSel_ChgLine
00003A30                            		
00003A30                            CStringSlop_draw:
00003A30 D043                       		add.w	d3,d0
00003A32 3C80                       		move.w	d0,(a6)
00003A34                            CStringSlop:				; XREF: LevSelTextLoad
00003A34 7000                       		moveq	#0,d0
00003A36 1019                       		move.b	(a1)+,d0
00003A38 0C00 0020                  		cmpi.b	#$20,d0
00003A3C 6EF2                       		bgt.s	CStringSlop_draw
00003A3E                            		
00003A3E 0C00 0001                  		cmpi.b	#1,d0
00003A42 6700                       		beq.s	@InsertSpaces
00003A44 6500                       		blo.s	@end
00003A46                            		
00003A46 3CBC 0000                  		move.w	#0,(a6)
00003A4A 60E8                       		bra.s	CStringSlop
00003A4C                            	@end:
00003A4C 4E75                       		rts
00003A4E                            	@InsertSpaces:
00003A4E 7000                       		moveq	#0,d0
00003A50 1019                       		move.b	(a1)+,d0
00003A52                            		
00003A52                            	@insert:
00003A52 3CBC 0000                  		move.w	#0,(a6)
00003A56 51C8 FFFA                  		dbf.w	d0,@insert
00003A5A 60D8                       		bra.s	CStringSlop
00003A5C                            ; End of function LevSel_ChgLine
00003A5C                            
00003A5C                            ; ===========================================================================
00003A5C                            ; ---------------------------------------------------------------------------
00003A5C                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003A5C                            ; ---------------------------------------------------------------------------
00003A5C                            LevelMenuText:	
00003A5C 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003A6C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A7C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A8C 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003A9C 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003AAC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003ABC 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003ACC 2020 2020 2020 2020 2020+          dc.b    "               2"
00003ADC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AEC 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003AFC 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B0C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B1C                            LMTSecondRow:
00003B1C 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003B2C 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003B3C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B4C 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003B5C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B6C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B7C 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003B8C 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003B9C 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003BAC 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003BBC 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003BCC                            LMTSelectableEnd:
00003BCC 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003BDC                            LMTEnd:
00003BDC                            
00003BDC                            Now_Playing:
00003BDC 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003BEC                            		even
00003BEC                            NP_Track:
00003BEC 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003BF4                            		even
00003BF4                            NP_SFX:
00003BF4 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003BFC                            		even
00003BFC                            
00003BFC                            ShowNow_Playing:
00003BFC 1C00                       		move.b	d0,d6
00003BFE 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C02 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C06 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C0C 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C14 6100 FE1E                  		bsr.w	CStringSlop
00003C18                            		
00003C18 43FA FFD2                  		lea	NP_Track(pc),a1
00003C1C 0C06 00A0                  		cmpi.b	#$A0,d6
00003C20 6D00                       		blt.s	@track
00003C22                            		
00003C22 43FA FFD0                  		lea	NP_SFX(pc),a1
00003C26                            	@track:
00003C26 6100 FE0C                  		bsr.w	CStringSlop
00003C2A                            		
00003C2A 0643 0030                  		add.w	#$30,d3
00003C2E 1006                       		move.b	d6,d0
00003C30 1400                       		move.b	d0,d2
00003C32 E808                       		lsr.b	#4,d0
00003C34 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003C38 1002                       		move.b	d2,d0
00003C3A 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003C3E 4E75                       		rts	
00003C40                            
00003C40                            ; 1 is insert spaces btw
00003C40                            Controls_Normal:
00003C40 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003C4C                            		even		
00003C4C                            Controls_SND:
00003C4C 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003C72 00                         		even
00003C72                            ; ---------------------------------------------------------------------------
00003C72                            ; Music	playlist
00003C72                            ; ---------------------------------------------------------------------------
00003C72                            MusicList1:	incbin	misc\muslist1.bin
00003C7A                            		even
00003C7A                            MusicList2:	incbin	misc\muslist2.bin
00003C80                            		even
00003C80                            MusicList3:	incbin	misc\muslist3.bin
00003C86                            		even
00003C86                            MusicList4:	incbin	misc\muslist4.bin
00003C8C                            		even
00003C8C                            ; ===========================================================================
00003C8C                            
00003C8C                            ; ---------------------------------------------------------------------------
00003C8C                            ; Level
00003C8C                            ; ---------------------------------------------------------------------------
00003C8C                            
00003C8C                            Level:					; XREF: GameModeArray
00003C8C 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003C92 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C96 6B00                       		bmi.s	loc_37B6
00003C98 103C 00E0                  		move.b	#$E0,d0
00003C9C 6100 D922                  		bsr.w	PlaySound_Special ; fade out music
00003CA0                            
00003CA0                            loc_37B6:
00003CA0 6100 DB60                  		bsr.w	ClearPLC
00003CA4 6100 E396                  		bsr.w	Pal_FadeFrom
00003CA8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CAC 6B00                       		bmi.s	Level_ClrRam
00003CAE 46FC 2700                  		move	#$2700,sr
00003CB2 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003CBC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003CC2 6100 D9A0                  		bsr.w	NemDec
00003CC6 46FC 2300                  		move	#$2300,sr
00003CCA 7000                       		moveq	#0,d0
00003CCC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003CD0 E948                       		lsl.w	#4,d0
00003CD2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003CD8 45F2 0000                  		lea	(a2,d0.w),a2
00003CDC 7000                       		moveq	#0,d0
00003CDE 1012                       		move.b	(a2),d0
00003CE0 6700                       		beq.s	loc_37FC
00003CE2 6100 DAC0                  		bsr.w	LoadPLC		; load level patterns
00003CE6                            
00003CE6                            loc_37FC:
00003CE6 7001                       		moveq	#1,d0
00003CE8 6100 DABA                  		bsr.w	LoadPLC		; load standard	patterns
00003CEC                            
00003CEC                            Level_ClrRam:
00003CEC 43F8 D000                  		lea	($FFFFD000).w,a1
00003CF0 7000                       		moveq	#0,d0
00003CF2 323C 07FF                  		move.w	#$7FF,d1
00003CF6                            
00003CF6                            Level_ClrObjRam:
00003CF6 22C0                       		move.l	d0,(a1)+
00003CF8 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003CFC                            
00003CFC 43F8 F628                  		lea	($FFFFF628).w,a1
00003D00 7000                       		moveq	#0,d0
00003D02 323C 0015                  		move.w	#$15,d1
00003D06                            
00003D06                            Level_ClrVars:
00003D06 22C0                       		move.l	d0,(a1)+
00003D08 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003D0C                            
00003D0C 43F8 F700                  		lea	($FFFFF700).w,a1
00003D10 7000                       		moveq	#0,d0
00003D12 323C 003F                  		move.w	#$3F,d1
00003D16                            
00003D16                            Level_ClrVars2:
00003D16 22C0                       		move.l	d0,(a1)+
00003D18 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003D1C                            
00003D1C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003D20 7000                       		moveq	#0,d0
00003D22 323C 0047                  		move.w	#$47,d1
00003D26                            
00003D26                            Level_ClrVars3:
00003D26 22C0                       		move.l	d0,(a1)+
00003D28 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003D2C                            
00003D2C 46FC 2700                  		move	#$2700,sr
00003D30 6100 D7B6                  		bsr.w	ClearScreen
00003D34 4DF9 00C0 0004             		lea	($C00004).l,a6
00003D3A 3CBC 8B03                  		move.w	#$8B03,(a6)
00003D3E 3CBC 8230                  		move.w	#$8230,(a6)
00003D42 3CBC 8407                  		move.w	#$8407,(a6)
00003D46 3CBC 857C                  		move.w	#$857C,(a6)
00003D4A 3CBC 9001                  		move.w	#$9001,(a6)
00003D4E 3CBC 8004                  		move.w	#$8004,(a6)
00003D52 3CBC 8720                  		move.w	#$8720,(a6)
00003D56 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003D5C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003D60 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D66 6600                       		bne.s	Level_LoadPal	; if not, branch
00003D68 3CBC 8014                  		move.w	#$8014,(a6)
00003D6C 7000                       		moveq	#0,d0
00003D6E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D72 D040                       		add.w	d0,d0
00003D74 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003D7A 3031 0000                  		move.w	(a1,d0.w),d0
00003D7E 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003D82 31C0 F648                  		move.w	d0,($FFFFF648).w
00003D86 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003D8A 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003D8E 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003D92 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003D98 6000 0000                  		bra.w	Level_LoadPal
00003D9C                            Player_Palette:
00003D9C                            		; normal, lz, sbz, blank
00003D9C 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003DA4                            		
00003DA4 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003DAC 0018 0016 0017 0000        		dc.w	24,22,23,0 ; Pal_Anakama 
00003DB4                            		; add more player palettes
00003DB4                            Level_LoadPal:
00003DB4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003DBA 46FC 2300                  		move	#$2300,sr
00003DBE                            
00003DBE 7200                       		moveq	#0,d1
00003DC0 1238 FFE8                  		move.b	(v_character),d1
00003DC4 D241                       		add.w	d1,d1
00003DC6 D241                       		add.w	d1,d1
00003DC8 D241                       		add.w	d1,d1
00003DCA 303B 10D0                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003DCE                            		
00003DCE 6100 E532                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003DD2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003DD8 6600                       		bne.s	Level_GetBgm	; if not, branch
00003DDA 303B 10C2                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003DDE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003DE4 6600                       		bne.s	Level_WaterPal	; if not, branch
00003DE6 303B 10B8                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003DEA                            
00003DEA                            Level_WaterPal:
00003DEA 6100 E52E                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003DEE 4A38 FE30                  		tst.b	($FFFFFE30).w
00003DF2 6700                       		beq.s	Level_GetBgm
00003DF4 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003DFA                            
00003DFA                            ; NineKode begins here - How to play different songs on different acts
00003DFA                             
00003DFA                            Level_GetBgm:
00003DFA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DFE 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003E02 7000                       		moveq	#0,d0
00003E04 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E08                             
00003E08 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003E0E 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003E10 43F9 0000 3C72             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003E16 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E18                             
00003E18                            Level_GetBgm2:
00003E18 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003E1E 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003E20 43F9 0000 3C7A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003E26 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E28                             
00003E28                            Level_GetBgm3:
00003E28 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003E2E 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003E30 43F9 0000 3C80             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003E36 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E38                             
00003E38                            Level_GetBgm4:
00003E38 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003E3E 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003E40 43F9 0000 3C86             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003E46                             
00003E46                            Level_PlayBgm:
00003E46 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003E4A 6100 D76E                  		bsr.w	PlaySound	; play music
00003E4E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003E54                             
00003E54                            ; NineKode ends here
00003E54                            
00003E54                            Level_TtlCard:
00003E54 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003E5A 6100 EE5E                  		bsr.w	DelayProgram
00003E5E 4EB9 0000 0000             		jsr	ObjectsLoad
00003E64 4EB9 0000 0000             		jsr	BuildSprites
00003E6A 6100 D9A4                  		bsr.w	RunPLC_RAM
00003E6E 3038 D108                  		move.w	($FFFFD108).w,d0
00003E72 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003E76 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003E78 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003E7C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003E7E 4EB9 0000 0000             		jsr	Hud_Base
00003E84                            
00003E84                            loc_3946:
00003E84 7003                       		moveq	#3,d0
00003E86 6100 E45E                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003E8A 6100 0000                  		bsr.w	LevelSizeLoad
00003E8E 6100 0000                  		bsr.w	DeformBgLayer
00003E92 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003E98 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003E9C 6100 0000                  		bsr.w	LoadTilesFromStart
00003EA0 4EB9 0000 0000             		jsr	FloorLog_Unk
00003EA6 6100 0000                  		bsr.w	ColIndexLoad
00003EAA 6100 0000                  		bsr.w	LZWaterEffects
00003EAE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003EB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003EB8 6B00                       		bmi.s	Level_ChkDebug
00003EBA 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003EC0                            
00003EC0                            Level_ChkDebug:
00003EC0 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003EC4 6700                       		beq.s	Level_ChkWater	; if not, branch
00003EC6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003ECC 6700                       		beq.s	Level_ChkWater	; if not, branch
00003ECE 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003ED4                            
00003ED4                            Level_ChkWater:
00003ED4 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003EDA 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003EE0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003EE6 6600                       		bne.s	Level_LoadObj	; if not, branch
00003EE8 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003EEE 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003EF4 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003EFA 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003F00                            
00003F00                            Level_LoadObj:
00003F00 4EB9 0000 0000             		jsr	ObjPosLoad
00003F06 4EB9 0000 0000             		jsr	ObjectsLoad
00003F0C 4EB9 0000 0000             		jsr	BuildSprites
00003F12 7000                       		moveq	#0,d0
00003F14 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003F18 6600                       		bne.s	loc_39E8	; if yes, branch
00003F1A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003F1E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003F22 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003F26                            
00003F26                            loc_39E8:
00003F26 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003F2A 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003F2E 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003F32 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003F36                            		; move.b	d0,($FFFFFE2F).w
00003F36 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003F3C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003F40 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003F44 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003F48 6100 0000                  		bsr.w	OscillateNumInit
00003F4C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003F52 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003F58 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003F5E 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003F64 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003F6A 7000                       		moveq	#0,d0
00003F6C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F70 E548                       		lsl.w	#2,d0
00003F72 2271 0000                  		movea.l	(a1,d0.w),a1
00003F76 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F7A 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003F7C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003F82 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003F86 5340                       		subq.w	#1,d0
00003F88 E548                       		lsl.w	#2,d0
00003F8A 2271 0000                  		movea.l	(a1,d0.w),a1
00003F8E                            
00003F8E                            Level_Demo:
00003F8E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003F94 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003F98 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003F9E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FA2 6A00                       		bpl.s	Level_ChkWaterPal
00003FA4 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003FAA 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003FB0 6600                       		bne.s	Level_ChkWaterPal
00003FB2 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003FB8                            
00003FB8                            Level_ChkWaterPal:
00003FB8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003FBE 6600                       		bne.s	Level_Delay	; if not, branch
00003FC0 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003FC2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003FC8 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003FCA 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003FCC                            
00003FCC                            Level_WaterPal2:
00003FCC 6100 E368                  		bsr.w	PalLoad4_Water
00003FD0                            
00003FD0                            Level_Delay:
00003FD0 323C 0003                  		move.w	#3,d1
00003FD4                            
00003FD4                            Level_DelayLoop:
00003FD4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003FDA 6100 ECDE                  		bsr.w	DelayProgram
00003FDE 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003FE2                            
00003FE2 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003FE8 6100 DFB2                  		bsr.w	Pal_FadeTo2
00003FEC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FF0 6B00                       		bmi.s	Level_ClrCardArt
00003FF2 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003FF6 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003FFA 5838 D124                  		addq.b	#4,($FFFFD124).w
00003FFE 5838 D164                  		addq.b	#4,($FFFFD164).w
00004002 6000                       		bra.s	Level_StartGame
00004004                            ; ===========================================================================
00004004                            
00004004                            Level_ClrCardArt:
00004004 7002                       		moveq	#2,d0
00004006 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000400C 7000                       		moveq	#0,d0
0000400E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004012 0640 0015                  		addi.w	#$15,d0
00004016 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000401C                            
0000401C                            Level_StartGame:
0000401C 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004022                            
00004022                            ; ---------------------------------------------------------------------------
00004022                            ; Main level loop (when	all title card and loading sequences are finished)
00004022                            ; ---------------------------------------------------------------------------
00004022                            
00004022                            Level_MainLoop:
00004022 6100 D5A8                  		bsr.w	PauseGame
00004026 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000402C 6100 EC8C                  		bsr.w	DelayProgram
00004030 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004034 6100 0000                  		bsr.w	MoveSonicInDemo
00004038 6100 0000                  		bsr.w	LZWaterEffects
0000403C 4EB9 0000 0000             		jsr	ObjectsLoad
00004042 4A78 FE08                  		tst.w	($FFFFFE08).w
00004046 6600                       		bne.s	loc_3B10
00004048 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000404E 6400                       		bcc.s	loc_3B14
00004050                            
00004050                            loc_3B10:
00004050 6100 0000                  		bsr.w	DeformBgLayer
00004054                            
00004054                            loc_3B14:
00004054 4EB9 0000 0000             		jsr	BuildSprites
0000405A 4EB9 0000 0000             		jsr	ObjPosLoad
00004060 6100 DAFE                  		bsr.w	PalCycle_Load
00004064 6100 D7AA                  		bsr.w	RunPLC_RAM
00004068 6100 0000                  		bsr.w	OscillateNumDo
0000406C 6100 0000                  		bsr.w	ChangeRingFrame
00004070 6100 0000                  		bsr.w	SignpostArtLoad
00004074 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000407A 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000407C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004080 6600 FC0A                  		bne.w	Level		; if yes, branch
00004084 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000408A 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
0000408E 4E75                       		rts	
00004090                            ; ===========================================================================
00004090                            
00004090                            Level_ChkDemo:				; XREF: Level_MainLoop
00004090 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00004094 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004096 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000409A 6700                       		beq.s	Level_EndDemo	; if not, branch
0000409C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000040A2 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000040A6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000040AC 4E75                       		rts	
000040AE                            ; ===========================================================================
000040AE                            
000040AE                            Level_EndDemo:				; XREF: Level_ChkDemo
000040AE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000040B4 6600                       		bne.s	loc_3B88	; if not, branch
000040B6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000040BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040C0 6A00                       		bpl.s	loc_3B88	; if yes, branch
000040C2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000040C8                            
000040C8                            loc_3B88:
000040C8 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000040CE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000040D4 4278 F794                  		clr.w	($FFFFF794).w
000040D8                            
000040D8                            loc_3B98:
000040D8 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000040DE 6100 EBDA                  		bsr.w	DelayProgram
000040E2 6100 0000                  		bsr.w	MoveSonicInDemo
000040E6 4EB9 0000 0000             		jsr	ObjectsLoad
000040EC 4EB9 0000 0000             		jsr	BuildSprites
000040F2 4EB9 0000 0000             		jsr	ObjPosLoad
000040F8 5378 F794                  		subq.w	#1,($FFFFF794).w
000040FC 6A00                       		bpl.s	loc_3BC8
000040FE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004104 6100 DF56                  		bsr.w	Pal_FadeOut
00004108                            
00004108                            loc_3BC8:
00004108 4A78 F614                  		tst.w	($FFFFF614).w
0000410C 66CA                       		bne.s	loc_3B98
0000410E 4E75                       		rts	
00004110                            ; ===========================================================================
00004110                            ; ---------------------------------------------------------------------------
00004110                            ; Subroutine to	do special water effects in Labyrinth Zone
00004110                            ; ---------------------------------------------------------------------------
00004110                            
00004110                            LZWaterEffects:				; XREF: Level
00004110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004116 6600                       		bne.s	locret_3C28	; if not, branch
00004118 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000411E 6400                       		bcc.s	LZMoveWater
00004120 6100 0000                  		bsr.w	LZWindTunnels
00004124 6100 0000                  		bsr.w	LZWaterSlides
00004128 6100 0000                  		bsr.w	LZDynamicWater
0000412C                            
0000412C                            LZMoveWater:
0000412C 4238 F64E                  		clr.b	($FFFFF64E).w
00004130 7000                       		moveq	#0,d0
00004132 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004136 E248                       		lsr.w	#1,d0
00004138 D078 F648                  		add.w	($FFFFF648).w,d0
0000413C 31C0 F646                  		move.w	d0,($FFFFF646).w
00004140 3038 F646                  		move.w	($FFFFF646).w,d0
00004144 9078 F704                  		sub.w	($FFFFF704).w,d0
00004148 6400                       		bcc.s	loc_3C1A
0000414A 4A40                       		tst.w	d0
0000414C 6A00                       		bpl.s	loc_3C1A
0000414E 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004154 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000415A                            
0000415A                            loc_3C1A:
0000415A 0C40 00DF                  		cmpi.w	#$DF,d0
0000415E 6500                       		bcs.s	loc_3C24
00004160 303C 00DF                  		move.w	#$DF,d0
00004164                            
00004164                            loc_3C24:
00004164 11C0 F625                  		move.b	d0,($FFFFF625).w
00004168                            
00004168                            locret_3C28:
00004168 4E75                       		rts	
0000416A                            ; ===========================================================================
0000416A                            ; ---------------------------------------------------------------------------
0000416A                            ; Labyrinth default water heights
0000416A                            ; ---------------------------------------------------------------------------
0000416A                            WaterHeight:	incbin	misc\lz_heigh.bin
00004172                            		even
00004172                            ; ===========================================================================
00004172                            
00004172                            ; ---------------------------------------------------------------------------
00004172                            ; Labyrinth dynamic water routines
00004172                            ; ---------------------------------------------------------------------------
00004172                            
00004172                            LZDynamicWater:				; XREF: LZWaterEffects
00004172 7000                       		moveq	#0,d0
00004174 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004178 D040                       		add.w	d0,d0
0000417A 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
0000417E 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004182 7200                       		moveq	#0,d1
00004184 1238 F64C                  		move.b	($FFFFF64C).w,d1
00004188 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000418C 9078 F648                  		sub.w	($FFFFF648).w,d0
00004190 6700                       		beq.s	locret_3C5A
00004192 6400                       		bcc.s	loc_3C56
00004194 4441                       		neg.w	d1
00004196                            
00004196                            loc_3C56:
00004196 D378 F648                  		add.w	d1,($FFFFF648).w
0000419A                            
0000419A                            locret_3C5A:
0000419A 4E75                       		rts	
0000419C                            ; ===========================================================================
0000419C 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
0000419E 0000                       		dc.w DynWater_LZ2-DynWater_Index
000041A0 0000                       		dc.w DynWater_LZ3-DynWater_Index
000041A2 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000041A4                            ; ===========================================================================
000041A4                            
000041A4                            DynWater_LZ1:				; XREF: DynWater_Index
000041A4 3038 F700                  		move.w	($FFFFF700).w,d0
000041A8 1438 F64D                  		move.b	($FFFFF64D).w,d2
000041AC 6600                       		bne.s	loc_3CD0
000041AE 323C 00B8                  		move.w	#$B8,d1
000041B2 0C40 0600                  		cmpi.w	#$600,d0
000041B6 6500                       		bcs.s	loc_3CB4
000041B8 323C 0108                  		move.w	#$108,d1
000041BC 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000041C2 6500                       		bcs.s	loc_3CBA
000041C4 0C40 0C00                  		cmpi.w	#$C00,d0
000041C8 6500                       		bcs.s	loc_3CB4
000041CA 323C 0318                  		move.w	#$318,d1
000041CE 0C40 1080                  		cmpi.w	#$1080,d0
000041D2 6500                       		bcs.s	loc_3CB4
000041D4 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000041DA 323C 05C8                  		move.w	#$5C8,d1
000041DE 0C40 1380                  		cmpi.w	#$1380,d0
000041E2 6500                       		bcs.s	loc_3CB4
000041E4 323C 03A8                  		move.w	#$3A8,d1
000041E8 B278 F648                  		cmp.w	($FFFFF648).w,d1
000041EC 6600                       		bne.s	loc_3CB4
000041EE 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000041F4                            
000041F4                            loc_3CB4:
000041F4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041F8 4E75                       		rts	
000041FA                            ; ===========================================================================
000041FA                            
000041FA                            loc_3CBA:				; XREF: DynWater_LZ1
000041FA 0C40 0C80                  		cmpi.w	#$C80,d0
000041FE 65F4                       		bcs.s	loc_3CB4
00004200 323C 00E8                  		move.w	#$E8,d1
00004204 0C40 1500                  		cmpi.w	#$1500,d0
00004208 65EA                       		bcs.s	loc_3CB4
0000420A 323C 0108                  		move.w	#$108,d1
0000420E 60E4                       		bra.s	loc_3CB4
00004210                            ; ===========================================================================
00004210                            
00004210                            loc_3CD0:				; XREF: DynWater_LZ1
00004210 5302                       		subq.b	#1,d2
00004212 6600                       		bne.s	locret_3CF4
00004214 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000421A 6400                       		bcc.s	locret_3CF4
0000421C 323C 03A8                  		move.w	#$3A8,d1
00004220 0C40 1300                  		cmpi.w	#$1300,d0
00004224 6500                       		bcs.s	loc_3CF0
00004226 323C 0108                  		move.w	#$108,d1
0000422A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004230                            
00004230                            loc_3CF0:
00004230 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004234                            
00004234                            locret_3CF4:
00004234 4E75                       		rts	
00004236                            ; ===========================================================================
00004236                            
00004236                            DynWater_LZ2:				; XREF: DynWater_Index
00004236 3038 F700                  		move.w	($FFFFF700).w,d0
0000423A 323C 0328                  		move.w	#$328,d1
0000423E 0C40 0500                  		cmpi.w	#$500,d0
00004242 6500                       		bcs.s	loc_3D12
00004244 323C 03C8                  		move.w	#$3C8,d1
00004248 0C40 0B00                  		cmpi.w	#$B00,d0
0000424C 6500                       		bcs.s	loc_3D12
0000424E 323C 0428                  		move.w	#$428,d1
00004252                            
00004252                            loc_3D12:
00004252 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004256 4E75                       		rts	
00004258                            ; ===========================================================================
00004258                            
00004258                            DynWater_LZ3:				; XREF: DynWater_Index
00004258 3038 F700                  		move.w	($FFFFF700).w,d0
0000425C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004260 6600                       		bne.s	loc_3D5E
00004262 323C 0500                  		move.w	#$500,d1
00004266 0C40 0600                  		cmpi.w	#$600,d0
0000426A 6500                       		bcs.s	loc_3D54
0000426C 0C40 1B00                  		cmpi.w	#$1B00,d0
00004270 6500                       		bcs.s	loc_3D54
00004272 323C 0850                  		move.w	#$850,d1
00004276                            
00004276                            loc_3D54:
00004276 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000427A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000427E 4E75                       		rts	
00004280                            ; ===========================================================================
00004280                            
00004280                            loc_3D5E:				; XREF: DynWater_LZ3
00004280 5302                       		subq.b	#1,d2
00004282 6600                       		bne.s	loc_3DA8
00004284 323C 04C8                  		move.w	#$4C8,d1
00004288 0C40 0770                  		cmpi.w	#$770,d0
0000428C 6500                       		bcs.s	loc_3DA2
0000428E 323C 0308                  		move.w	#$308,d1
00004292 0C40 1400                  		cmpi.w	#$1400,d0
00004296 6500                       		bcs.s	loc_3DA2
00004298 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
0000429E 6700                       		beq.s	loc_3D8E
000042A0 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000042A6 6400                       		bcc.s	loc_3D8E
000042A8 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000042AE 6400                       		bcc.s	loc_3DA2
000042B0                            
000042B0                            loc_3D8E:
000042B0 323C 0508                  		move.w	#$508,d1
000042B4 31C1 F648                  		move.w	d1,($FFFFF648).w
000042B8 0C40 1770                  		cmpi.w	#$1770,d0
000042BC 6500                       		bcs.s	loc_3DA2
000042BE 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000042C4                            
000042C4                            loc_3DA2:
000042C4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042C8 4E75                       		rts	
000042CA                            ; ===========================================================================
000042CA                            
000042CA                            loc_3DA8:
000042CA 5302                       		subq.b	#1,d2
000042CC 6600                       		bne.s	loc_3DD2
000042CE 323C 0508                  		move.w	#$508,d1
000042D2 0C40 1860                  		cmpi.w	#$1860,d0
000042D6 6500                       		bcs.s	loc_3DCC
000042D8 323C 0188                  		move.w	#$188,d1
000042DC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000042E0 6400                       		bcc.s	loc_3DC6
000042E2 B278 F648                  		cmp.w	($FFFFF648).w,d1
000042E6 6600                       		bne.s	loc_3DCC
000042E8                            
000042E8                            loc_3DC6:
000042E8 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
000042EE                            
000042EE                            loc_3DCC:
000042EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042F2 4E75                       		rts	
000042F4                            ; ===========================================================================
000042F4                            
000042F4                            loc_3DD2:
000042F4 5302                       		subq.b	#1,d2
000042F6 6600                       		bne.s	loc_3E0E
000042F8 323C 0188                  		move.w	#$188,d1
000042FC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004300 6500                       		bcs.s	loc_3E04
00004302 323C 0900                  		move.w	#$900,d1
00004306 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000430A 6500                       		bcs.s	loc_3E04
0000430C 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004312 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004318 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000431E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004324 4E75                       		rts	
00004326                            ; ===========================================================================
00004326                            
00004326                            loc_3E04:
00004326 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000432A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000432E 4E75                       		rts	
00004330                            ; ===========================================================================
00004330                            
00004330                            loc_3E0E:
00004330 0C40 1E00                  		cmpi.w	#$1E00,d0
00004334 6500                       		bcs.s	locret_3E1A
00004336 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000433C                            
0000433C                            locret_3E1A:
0000433C 4E75                       		rts	
0000433E                            ; ===========================================================================
0000433E                            
0000433E                            DynWater_SBZ3:				; XREF: DynWater_Index
0000433E 323C 0228                  		move.w	#$228,d1
00004342 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004348 6500                       		bcs.s	loc_3E2C
0000434A 323C 04C8                  		move.w	#$4C8,d1
0000434E                            
0000434E                            loc_3E2C:
0000434E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004352 4E75                       		rts
00004354                            
00004354                            ; ---------------------------------------------------------------------------
00004354                            ; Labyrinth Zone "wind tunnels"	subroutine
00004354                            ; ---------------------------------------------------------------------------
00004354                            
00004354                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004354                            
00004354                            
00004354                            LZWindTunnels:				; XREF: LZWaterEffects
00004354 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004358 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000435C 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004362 7000                       		moveq	#0,d0
00004364 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004368 E748                       		lsl.w	#3,d0
0000436A D4C0                       		adda.w	d0,a2
0000436C 7200                       		moveq	#0,d1
0000436E 4A38 FE11                  		tst.b	($FFFFFE11).w
00004372 6600                       		bne.s	loc_3E56
00004374 7201                       		moveq	#1,d1
00004376 514A                       		subq.w	#8,a2
00004378                            
00004378                            loc_3E56:
00004378 43F8 D000                  		lea	($FFFFD000).w,a1
0000437C                            
0000437C                            LZWind_Loop:
0000437C 3029 0008                  		move.w	8(a1),d0
00004380 B052                       		cmp.w	(a2),d0
00004382 6500 0000                  		bcs.w	loc_3EF4
00004386 B06A 0004                  		cmp.w	4(a2),d0
0000438A 6400 0000                  		bcc.w	loc_3EF4
0000438E 3429 000C                  		move.w	$C(a1),d2
00004392 B46A 0002                  		cmp.w	2(a2),d2
00004396 6500                       		bcs.s	loc_3EF4
00004398 B46A 0006                  		cmp.w	6(a2),d2
0000439C 6400                       		bcc.s	loc_3EF4
0000439E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000043A2 0200 003F                  		andi.b	#$3F,d0
000043A6 6600                       		bne.s	loc_3E90
000043A8 303C 00D0                  		move.w	#$D0,d0
000043AC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rushing water sound
000043B2                            
000043B2                            loc_3E90:
000043B2 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000043B6 6600 0000                  		bne.w	locret_3F0A
000043BA 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000043C0 6400                       		bcc.s	loc_3F06
000043C2 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000043C8 0440 0080                  		subi.w	#$80,d0
000043CC B052                       		cmp.w	(a2),d0
000043CE 6400                       		bcc.s	LZWind_Move
000043D0 7002                       		moveq	#2,d0
000043D2 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000043D8 6600                       		bne.s	loc_3EBA
000043DA 4440                       		neg.w	d0
000043DC                            
000043DC                            loc_3EBA:
000043DC D169 000C                  		add.w	d0,$C(a1)
000043E0                            
000043E0                            LZWind_Move:
000043E0 5869 0008                  		addq.w	#4,8(a1)
000043E4 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
000043EA 337C 0000 0012             		move.w	#0,$12(a1)
000043F0 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
000043F6 08E9 0001 0022             		bset	#1,$22(a1)
000043FC 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004402 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004404 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004408                            
00004408                            LZWind_MoveDown:
00004408 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000440E 6700                       		beq.s	locret_3EF2	; if not, branch
00004410 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004414                            
00004414                            locret_3EF2:
00004414 4E75                       		rts	
00004416                            ; ===========================================================================
00004416                            
00004416                            loc_3EF4:				; XREF: LZWindTunnels
00004416 504A                       		addq.w	#8,a2
00004418 51C9 FF62                  		dbf	d1,LZWind_Loop
0000441C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004420 6700                       		beq.s	locret_3F0A
00004422 137C 0000 001C             		move.b	#0,$1C(a1)
00004428                            
00004428                            loc_3F06:
00004428 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000442C                            
0000442C                            locret_3F0A:
0000442C 4E75                       		rts	
0000442E                            ; End of function LZWindTunnels
0000442E                            
0000442E                            ; ===========================================================================
0000442E 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004436 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004448 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004456                            					; XREF: LZWindTunnels
00004456                            		even
00004456                            
00004456                            ; ---------------------------------------------------------------------------
00004456                            ; Labyrinth Zone water slide subroutine
00004456                            ; ---------------------------------------------------------------------------
00004456                            
00004456                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004456                            
00004456                            
00004456                            LZWaterSlides:				; XREF: LZWaterEffects
00004456 43F8 D000                  		lea	($FFFFD000).w,a1
0000445A 0829 0001 0022             		btst	#1,$22(a1)
00004460 6600                       		bne.s	loc_3F6A
00004462 3029 000C                  		move.w	$C(a1),d0
00004466 E248                       		lsr.w	#1,d0
00004468 0240 0380                  		andi.w	#$380,d0
0000446C 1229 0008                  		move.b	8(a1),d1
00004470 0241 007F                  		andi.w	#$7F,d1
00004474 D041                       		add.w	d1,d0
00004476 45F8 A400                  		lea	($FFFFA400).w,a2
0000447A 1032 0000                  		move.b	(a2,d0.w),d0
0000447E 45FA 0000                  		lea	byte_3FCF(pc),a2
00004482 7206                       		moveq	#6,d1
00004484                            
00004484                            loc_3F62:
00004484 B022                       		cmp.b	-(a2),d0
00004486 57C9 FFFC                  		dbeq	d1,loc_3F62
0000448A 6700                       		beq.s	LZSlide_Move
0000448C                            
0000448C                            loc_3F6A:
0000448C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004490 6700                       		beq.s	locret_3F7A
00004492 337C 0005 003E             		move.w	#5,$3E(a1)
00004498 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000449C                            
0000449C                            locret_3F7A:
0000449C 4E75                       		rts	
0000449E                            ; ===========================================================================
0000449E                            
0000449E                            LZSlide_Move:				; XREF: LZWaterSlides
0000449E 0C41 0003                  		cmpi.w	#3,d1
000044A2 6400                       		bcc.s	loc_3F84
000044A4 4E71                       		nop	
000044A6                            
000044A6                            loc_3F84:
000044A6 08A9 0000 0022             		bclr	#0,$22(a1)
000044AC 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000044B0 1340 0014                  		move.b	d0,$14(a1)
000044B4 6A00                       		bpl.s	loc_3F9A
000044B6 08E9 0000 0022             		bset	#0,$22(a1)
000044BC                            
000044BC                            loc_3F9A:
000044BC 4229 0015                  		clr.b	$15(a1)
000044C0 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000044C6 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000044CC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000044D0 0200 001F                  		andi.b	#$1F,d0
000044D4 6600                       		bne.s	locret_3FBE
000044D6 303C 00D0                  		move.w	#$D0,d0
000044DA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play water sound
000044E0                            
000044E0                            locret_3FBE:
000044E0 4E75                       		rts	
000044E2                            ; End of function LZWaterSlides
000044E2                            
000044E2                            ; ===========================================================================
000044E2 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000044F1 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000044F2                            		even
000044F2                            
000044F2                            ; ---------------------------------------------------------------------------
000044F2                            ; Subroutine to	move Sonic in demo mode
000044F2                            ; ---------------------------------------------------------------------------
000044F2                            
000044F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044F2                            
000044F2                            
000044F2                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000044F2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000044F6 6600                       		bne.s	MoveDemo_On	; if yes, branch
000044F8 4E75                       		rts	
000044FA                            ; ===========================================================================
000044FA                            
000044FA                            ; This is an unused subroutine for recording a demo
000044FA                            
000044FA                            MoveDemo_Record:
000044FA 43F9 0008 0000             		lea	($80000).l,a1
00004500 3038 F790                  		move.w	($FFFFF790).w,d0
00004504 D2C0                       		adda.w	d0,a1
00004506 1038 F604                  		move.b	($FFFFF604).w,d0
0000450A B011                       		cmp.b	(a1),d0
0000450C 6600                       		bne.s	loc_3FFA
0000450E 5229 0001                  		addq.b	#1,1(a1)
00004512 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004518 6700                       		beq.s	loc_3FFA
0000451A 4E75                       		rts	
0000451C                            ; ===========================================================================
0000451C                            
0000451C                            loc_3FFA:				; XREF: MoveDemo_Record
0000451C 1340 0002                  		move.b	d0,2(a1)
00004520 137C 0000 0003             		move.b	#0,3(a1)
00004526 5478 F790                  		addq.w	#2,($FFFFF790).w
0000452A 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004530 4E75                       		rts	
00004532                            ; ===========================================================================
00004532                            
00004532                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004532 4A38 F604                  		tst.b	($FFFFF604).w
00004536 6A00                       		bpl.s	loc_4022
00004538 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000453C 6B00                       		bmi.s	loc_4022
0000453E 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004544                            
00004544                            loc_4022:
00004544 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000454A 7000                       		moveq	#0,d0
0000454C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004550 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004556 6600                       		bne.s	loc_4038
00004558 7006                       		moveq	#6,d0
0000455A                            
0000455A                            loc_4038:
0000455A E548                       		lsl.w	#2,d0
0000455C 2271 0000                  		movea.l	(a1,d0.w),a1
00004560 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004564 6A00                       		bpl.s	loc_4056
00004566 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000456C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004570 5340                       		subq.w	#1,d0
00004572 E548                       		lsl.w	#2,d0
00004574 2271 0000                  		movea.l	(a1,d0.w),a1
00004578                            
00004578                            loc_4056:
00004578 3038 F790                  		move.w	($FFFFF790).w,d0
0000457C D2C0                       		adda.w	d0,a1
0000457E 1011                       		move.b	(a1),d0
00004580 41F8 F604                  		lea	($FFFFF604).w,a0
00004584 1200                       		move.b	d0,d1
00004586 1410                       		move.b	(a0),d2
00004588 B500                       		eor.b	d2,d0
0000458A 10C1                       		move.b	d1,(a0)+
0000458C C001                       		and.b	d1,d0
0000458E 10C0                       		move.b	d0,(a0)+
00004590 5338 F792                  		subq.b	#1,($FFFFF792).w
00004594 6400                       		bcc.s	locret_407E
00004596 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000459C 5478 F790                  		addq.w	#2,($FFFFF790).w
000045A0                            
000045A0                            locret_407E:
000045A0 4E75                       		rts	
000045A2                            ; End of function MoveSonicInDemo
000045A2                            
000045A2                            ; ===========================================================================
000045A2                            ; ---------------------------------------------------------------------------
000045A2                            ; Demo sequence	pointers
000045A2                            ; ---------------------------------------------------------------------------
000045A2                            Demo_Index:
000045A2                            	include "_inc\Demo pointers for intro.asm"
000045A2                            ; ---------------------------------------------------------------------------
000045A2                            ; Demo sequence	pointers
000045A2                            ; ---------------------------------------------------------------------------
000045A2 0000 0000                  	dc.l Demo_GHZ
000045A6 0000 0000                  	dc.l Demo_GHZ
000045AA 0000 0000                  	dc.l Demo_MZ
000045AE 0000 0000                  	dc.l Demo_MZ
000045B2 0000 0000                  	dc.l Demo_SYZ
000045B6 0000 0000                  	dc.l Demo_SYZ
000045BA 0000 0000                  	dc.l Demo_SS
000045BE 0000 0000                  	dc.l Demo_SS
000045BE 0000 0000                  	dc.l Demo_SS
000045C2                            
000045C2                            Demo_EndIndex:
000045C2                            	include "_inc\Demo pointers for ending.asm"
000045C2                            ; ---------------------------------------------------------------------------
000045C2                            ; Demo (ending) sequence pointers
000045C2                            ; ---------------------------------------------------------------------------
000045C2 0000 0000                  	dc.l Demo_EndGHZ1
000045C6 0000 0000                  	dc.l Demo_EndMZ
000045CA 0000 0000                  	dc.l Demo_EndSYZ
000045CE 0000 0000                  	dc.l Demo_EndLZ
000045D2 0000 0000                  	dc.l Demo_EndSLZ
000045D6 0000 0000                  	dc.l Demo_EndSBZ1
000045DA 0000 0000                  	dc.l Demo_EndSBZ2
000045DE 0000 0000                  	dc.l Demo_EndGHZ2
000045DE 0000 0000                  	dc.l Demo_EndGHZ2
000045E2                            
000045E2 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000045F2 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004602 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004612                            		even
00004612                            
00004612                            ; ---------------------------------------------------------------------------
00004612                            ; Collision index loading subroutine
00004612                            ; ---------------------------------------------------------------------------
00004612                            
00004612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004612                            
00004612                            
00004612                            ColIndexLoad:				; XREF: Level
00004612 7000                       		moveq	#0,d0
00004614 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004618 E548                       		lsl.w	#2,d0
0000461A 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004620 4E75                       		rts	
00004622                            ; End of function ColIndexLoad
00004622                            
00004622                            ; ===========================================================================
00004622                            ; ---------------------------------------------------------------------------
00004622                            ; Collision index pointers
00004622                            ; ---------------------------------------------------------------------------
00004622                            ColPointers:
00004622                            	include "_inc\Collision index pointers.asm"
00004622                            ; ---------------------------------------------------------------------------
00004622                            ; Collision index pointers
00004622                            ; ---------------------------------------------------------------------------
00004622 0000 0000                  	dc.l Col_GHZ
00004626 0000 0000                  	dc.l Col_LZ
0000462A 0000 0000                  	dc.l Col_MZ
0000462E 0000 0000                  	dc.l Col_SLZ
00004632 0000 0000                  	dc.l Col_SYZ
00004636 0000 0000                  	dc.l Col_SBZ
00004636 0000 0000                  	dc.l Col_SBZ
0000463A                            
0000463A                            ; ---------------------------------------------------------------------------
0000463A                            ; Oscillating number subroutine
0000463A                            ; ---------------------------------------------------------------------------
0000463A                            
0000463A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000463A                            
0000463A                            
0000463A                            OscillateNumInit:			; XREF: Level
0000463A 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000463E 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004644 7220                       		moveq	#$20,d1
00004646                            
00004646                            Osc_Loop:
00004646 32DA                       		move.w	(a2)+,(a1)+
00004648 51C9 FFFC                  		dbf	d1,Osc_Loop
0000464C 4E75                       		rts	
0000464E                            ; End of function OscillateNumInit
0000464E                            
0000464E                            ; ===========================================================================
0000464E 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004652 0000 0080                  		dc.w 0,	$80
00004656 0000 0080                  		dc.w 0,	$80
0000465A 0000 0080                  		dc.w 0,	$80
0000465E 0000 0080                  		dc.w 0,	$80
00004662 0000 0080                  		dc.w 0,	$80
00004666 0000 0080                  		dc.w 0,	$80
0000466A 0000 0080                  		dc.w 0,	$80
0000466E 0000 0080                  		dc.w 0,	$80
00004672 0000 50F0                  		dc.w 0,	$50F0
00004676 011E 2080                  		dc.w $11E, $2080
0000467A 00B4 3080                  		dc.w $B4, $3080
0000467E 010E 5080                  		dc.w $10E, $5080
00004682 01C2 7080                  		dc.w $1C2, $7080
00004686 0276 0080                  		dc.w $276, $80
0000468A 0000 0080                  		dc.w 0,	$80
0000468E 0000                       		dc.w 0
00004690                            		even
00004690                            
00004690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004690                            
00004690                            
00004690                            OscillateNumDo:				; XREF: Level
00004690 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004696 6400                       		bcc.s	locret_41C4
00004698 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000469C 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000046A2 3619                       		move.w	(a1)+,d3
000046A4 720F                       		moveq	#$F,d1
000046A6                            
000046A6                            loc_4184:
000046A6 341A                       		move.w	(a2)+,d2
000046A8 381A                       		move.w	(a2)+,d4
000046AA 0303                       		btst	d1,d3
000046AC 6600                       		bne.s	loc_41A4
000046AE 3029 0002                  		move.w	2(a1),d0
000046B2 D042                       		add.w	d2,d0
000046B4 3340 0002                  		move.w	d0,2(a1)
000046B8 D151                       		add.w	d0,0(a1)
000046BA B811                       		cmp.b	0(a1),d4
000046BC 6200                       		bhi.s	loc_41BA
000046BE 03C3                       		bset	d1,d3
000046C0 6000                       		bra.s	loc_41BA
000046C2                            ; ===========================================================================
000046C2                            
000046C2                            loc_41A4:				; XREF: OscillateNumDo
000046C2 3029 0002                  		move.w	2(a1),d0
000046C6 9042                       		sub.w	d2,d0
000046C8 3340 0002                  		move.w	d0,2(a1)
000046CC D151                       		add.w	d0,0(a1)
000046CE B811                       		cmp.b	0(a1),d4
000046D0 6300                       		bls.s	loc_41BA
000046D2 0383                       		bclr	d1,d3
000046D4                            
000046D4                            loc_41BA:
000046D4 5849                       		addq.w	#4,a1
000046D6 51C9 FFCE                  		dbf	d1,loc_4184
000046DA 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000046DE                            
000046DE                            locret_41C4:
000046DE 4E75                       		rts	
000046E0                            ; End of function OscillateNumDo
000046E0                            
000046E0                            ; ===========================================================================
000046E0 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000046E4 0002 0018                  		dc.w 2,	$18
000046E8 0002 0020                  		dc.w 2,	$20
000046EC 0002 0030                  		dc.w 2,	$30
000046F0 0004 0020                  		dc.w 4,	$20
000046F4 0008 0008                  		dc.w 8,	8
000046F8 0008 0040                  		dc.w 8,	$40
000046FC 0004 0040                  		dc.w 4,	$40
00004700 0002 0050                  		dc.w 2,	$50
00004704 0002 0050                  		dc.w 2,	$50
00004708 0002 0020                  		dc.w 2,	$20
0000470C 0003 0030                  		dc.w 3,	$30
00004710 0005 0050                  		dc.w 5,	$50
00004714 0007 0070                  		dc.w 7,	$70
00004718 0002 0010                  		dc.w 2,	$10
0000471C 0002 0010                  		dc.w 2,	$10
00004720                            		even
00004720                            
00004720                            ; ---------------------------------------------------------------------------
00004720                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004720                            ; ---------------------------------------------------------------------------
00004720                            
00004720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004720                            
00004720                            
00004720                            ChangeRingFrame:			; XREF: Level
00004720 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004724 6A00                       		bpl.s	loc_421C
00004726 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000472C 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004730 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004736                            
00004736                            loc_421C:
00004736 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000473A 6A00                       		bpl.s	loc_4232
0000473C 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004742 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004746 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000474C                            
0000474C                            loc_4232:
0000474C 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004750 6A00                       		bpl.s	loc_4250
00004752 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004758 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000475C 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004762 6500                       		bcs.s	loc_4250
00004764 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000476A                            
0000476A                            loc_4250:
0000476A 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000476E 6700                       		beq.s	locret_4272
00004770 7000                       		moveq	#0,d0
00004772 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004776 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000477A 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000477E EF58                       		rol.w	#7,d0
00004780 0240 0003                  		andi.w	#3,d0
00004784 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004788 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000478C                            
0000478C                            locret_4272:
0000478C 4E75                       		rts	
0000478E                            ; End of function ChangeRingFrame
0000478E                            
0000478E                            ; ---------------------------------------------------------------------------
0000478E                            ; End-of-act signpost pattern loading subroutine
0000478E                            ; ---------------------------------------------------------------------------
0000478E                            
0000478E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000478E                            
0000478E                            
0000478E                            SignpostArtLoad:			; XREF: Level
0000478E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004792 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004796 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000479C 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000479E 3038 F700                  		move.w	($FFFFF700).w,d0
000047A2 3238 F72A                  		move.w	($FFFFF72A).w,d1
000047A6 0441 0100                  		subi.w	#$100,d1
000047AA B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000047AC 6D00                       		blt.s	Signpost_Exit	; if not, branch
000047AE 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000047B2 6700                       		beq.s	Signpost_Exit
000047B4 B278 F728                  		cmp.w	($FFFFF728).w,d1
000047B8 6700                       		beq.s	Signpost_Exit
000047BA 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000047BE 7012                       		moveq	#$12,d0
000047C0 6000 D014                  		bra.w	LoadPLC2	; load signpost	patterns
000047C4                            ; ===========================================================================
000047C4                            
000047C4                            Signpost_Exit:
000047C4 4E75                       		rts	
000047C6                            ; End of function SignpostArtLoad
000047C6                            
000047C6                            ; ===========================================================================
000047C6                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004846                            Demo_MZ:	incbin	demodata\i_mz.bin
00004976                            Demo_SYZ:	incbin	demodata\i_syz.bin
000049F6                            Demo_SS:	incbin	demodata\i_ss.bin
00004AF6                            ; ===========================================================================
00004AF6                            
00004AF6                            ; ---------------------------------------------------------------------------
00004AF6                            ; Special Stage
00004AF6                            ; ---------------------------------------------------------------------------
00004AF6                            
00004AF6                            SpecialStage:				; XREF: GameModeArray
00004AF6 303C 00CA                  		move.w	#$CA,d0
00004AFA 6100 CAC4                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004AFE 6100 D666                  		bsr.w	Pal_MakeFlash
00004B02 46FC 2700                  		move	#$2700,sr
00004B06 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B0C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004B10 3CBC 8004                  		move.w	#$8004,(a6)
00004B14 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004B1A 3CBC 9011                  		move.w	#$9011,(a6)
00004B1E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B22 0200 00BF                  		andi.b	#$BF,d0
00004B26 33C0 00C0 0004             		move.w	d0,($C00004).l
00004B2C 6100 C9BA                  		bsr.w	ClearScreen
00004B30 46FC 2300                  		move	#$2300,sr
00004B34 4BF9 00C0 0004             		lea	($C00004).l,a5
00004B3A 3ABC 8F01                  		move.w	#$8F01,(a5)
00004B3E 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004B44 3ABC 9780                  		move.w	#$9780,(a5)
00004B48 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004B4E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004B56                            
00004B56                            loc_463C:
00004B56 3215                       		move.w	(a5),d1
00004B58 0801 0001                  		btst	#1,d1
00004B5C 66F8                       		bne.s	loc_463C
00004B5E 3ABC 8F02                  		move.w	#$8F02,(a5)
00004B62 6100 0000                  		bsr.w	SS_BGLoad
00004B66 7014                       		moveq	#$14,d0
00004B68 6100 CDA6                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004B6C 43F8 D000                  		lea	($FFFFD000).w,a1
00004B70 7000                       		moveq	#0,d0
00004B72 323C 07FF                  		move.w	#$7FF,d1
00004B76                            
00004B76                            SS_ClrObjRam:
00004B76 22C0                       		move.l	d0,(a1)+
00004B78 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004B7C                            
00004B7C 43F8 F700                  		lea	($FFFFF700).w,a1
00004B80 7000                       		moveq	#0,d0
00004B82 323C 003F                  		move.w	#$3F,d1
00004B86                            
00004B86                            SS_ClrRam:
00004B86 22C0                       		move.l	d0,(a1)+
00004B88 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004B8C                            
00004B8C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004B90 7000                       		moveq	#0,d0
00004B92 323C 0027                  		move.w	#$27,d1
00004B96                            
00004B96                            SS_ClrRam2:
00004B96 22C0                       		move.l	d0,(a1)+
00004B98 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004B9C                            
00004B9C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004BA0 7000                       		moveq	#0,d0
00004BA2 323C 007F                  		move.w	#$7F,d1
00004BA6                            
00004BA6                            SS_ClrNemRam:
00004BA6 22C0                       		move.l	d0,(a1)+
00004BA8 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004BAC                            
00004BAC 4238 F64E                  		clr.b	($FFFFF64E).w
00004BB0 4278 FE02                  		clr.w	($FFFFFE02).w
00004BB4 700A                       		moveq	#$A,d0
00004BB6 6100 D72E                  		bsr.w	PalLoad1	; load special stage pallet
00004BBA 4EB9 0000 0000             		jsr	SS_Load
00004BC0 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004BC8 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004BD0 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004BD6 6100 0000                  		bsr.w	PalCycle_SS
00004BDA 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004BDE 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004BE2 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004BE8 303C 0089                  		move.w	#$89,d0
00004BEC 6100 C9CC                  		bsr.w	PlaySound	; play special stage BG	music
00004BF0 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004BF6 43F9 0000 45A2             		lea	(Demo_Index).l,a1
00004BFC 7006                       		moveq	#6,d0
00004BFE E548                       		lsl.w	#2,d0
00004C00 2271 0000                  		movea.l	(a1,d0.w),a1
00004C04 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004C0A 5338 F792                  		subq.b	#1,($FFFFF792).w
00004C0E 4278 FE20                  		clr.w	($FFFFFE20).w
00004C12 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004C16 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004C1C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004C22                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004C22                            ;		beq.s	SS_NoDebug	; if not, branch
00004C22                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004C22                            ;		beq.s	SS_NoDebug	; if not, branch
00004C22                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004C22                            
00004C22                            SS_NoDebug:
00004C22 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C26 0000 0040                  		ori.b	#$40,d0
00004C2A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C30 6100 D488                  		bsr.w	Pal_MakeWhite
00004C34                            
00004C34                            ; ---------------------------------------------------------------------------
00004C34                            ; Main Special Stage loop
00004C34                            ; ---------------------------------------------------------------------------
00004C34                            
00004C34                            SS_MainLoop:
00004C34 6100 C996                  		bsr.w	PauseGame
00004C38 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004C3E 6100 E07A                  		bsr.w	DelayProgram
00004C42 4A78 F784                          tst.w   ($FFFFF784).w
00004C46 6700                               beq.s   SS_NotReversed
00004C48 5378 F784                          subi.w  #1,($FFFFF784).w
00004C4C                            
00004C4C                            SS_NotReversed:
00004C4C 6100 F8A4                  		bsr.w	MoveSonicInDemo
00004C50 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C56 4EB9 0000 0000             		jsr	ObjectsLoad
00004C5C 4EB9 0000 0000             		jsr	BuildSprites
00004C62 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C68 6100 0000                  		bsr.w	SS_BGAnimate
00004C6C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C70 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004C72 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004C76 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004C7A                            
00004C7A                            SS_ChkEnd:
00004C7A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004C80 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004C84                            
00004C84 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C88 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004C8C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004C92 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004C98 6500                       		bcs.s	SS_End		; if not, branch
00004C9A 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004C9E                            
00004C9E                            SS_End:
00004C9E 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004CA4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004CAA 4278 F794                  		clr.w	($FFFFF794).w
00004CAE                            
00004CAE                            SS_EndLoop:
00004CAE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004CB4 6100 E004                  		bsr.w	DelayProgram
00004CB8 6100 F838                  		bsr.w	MoveSonicInDemo
00004CBC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004CC2 4EB9 0000 0000             		jsr	ObjectsLoad
00004CC8 4EB9 0000 0000             		jsr	BuildSprites
00004CCE 4EB9 0000 0000             		jsr	SS_ShowLayout
00004CD4 6100 0000                  		bsr.w	SS_BGAnimate
00004CD8 5378 F794                  		subq.w	#1,($FFFFF794).w
00004CDC 6A00                       		bpl.s	loc_47D4
00004CDE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004CE4 6100 D4A0                  		bsr.w	Pal_ToWhite
00004CE8                            
00004CE8                            loc_47D4:
00004CE8 4A78 F614                  		tst.w	($FFFFF614).w
00004CEC 66C0                       		bne.s	SS_EndLoop
00004CEE                            
00004CEE 46FC 2700                  		move	#$2700,sr
00004CF2 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CF8 3CBC 8230                  		move.w	#$8230,(a6)
00004CFC 3CBC 8407                  		move.w	#$8407,(a6)
00004D00 3CBC 9001                  		move.w	#$9001,(a6)
00004D04 6100 C7E2                  		bsr.w	ClearScreen
00004D08 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D12 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D18 6100 C94A                  		bsr.w	NemDec
00004D1C 4EB9 0000 0000             		jsr	Hud_Base
00004D22 46FC 2300                  		move	#$2300,sr
00004D26 7011                       		moveq	#$11,d0
00004D28 6100 D5D8                  		bsr.w	PalLoad2	; load results screen pallet
00004D2C 7000                       		moveq	#0,d0
00004D2E 6100 CAA6                  		bsr.w	LoadPLC2
00004D32 701B                       		moveq	#$1B,d0
00004D34 6100 CA6E                  		bsr.w	LoadPLC		; load results screen patterns
00004D38 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004D3E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004D44 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004D48 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004D4C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004D50 303C 008E                  		move.w	#$8E,d0
00004D54 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004D5A 43F8 D000                  		lea	($FFFFD000).w,a1
00004D5E 7000                       		moveq	#0,d0
00004D60 323C 07FF                  		move.w	#$7FF,d1
00004D64                            
00004D64                            SS_EndClrObjRam:
00004D64 22C0                       		move.l	d0,(a1)+
00004D66 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004D6A                            
00004D6A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004D70                            
00004D70                            SS_NormalExit:
00004D70 6100 C85A                  		bsr.w	PauseGame
00004D74 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004D7A 6100 DF3E                  		bsr.w	DelayProgram
00004D7E 4EB9 0000 0000             		jsr	ObjectsLoad
00004D84 4EB9 0000 0000             		jsr	BuildSprites
00004D8A 6100 CA84                  		bsr.w	RunPLC_RAM
00004D8E 4A78 FE02                  		tst.w	($FFFFFE02).w
00004D92 67DC                       		beq.s	SS_NormalExit
00004D94 4AB8 F680                  		tst.l	($FFFFF680).w
00004D98 66D6                       		bne.s	SS_NormalExit
00004D9A 303C 00CA                  		move.w	#$CA,d0
00004D9E 6100 C820                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004DA2 6100 D3C2                  		bsr.w	Pal_MakeFlash
00004DA6 4E75                       		rts	
00004DA8                            ; ===========================================================================
00004DA8                            
00004DA8                            SS_ToSegaScreen:
00004DA8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004DAE 4E75                       		rts
00004DB0                            
00004DB0                            ; ---------------------------------------------------------------------------
00004DB0                            ; Special stage	background loading subroutine
00004DB0                            ; ---------------------------------------------------------------------------
00004DB0                            
00004DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DB0                            
00004DB0                            
00004DB0                            SS_BGLoad:				; XREF: SpecialStage
00004DB0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DB6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004DBC 303C 4051                  		move.w	#$4051,d0
00004DC0 6100 CB80                  		bsr.w	EniDec
00004DC4 263C 5000 0001             		move.l	#$50000001,d3
00004DCA 45F9 00FF 0080             		lea	($FF0080).l,a2
00004DD0 7E06                       		moveq	#6,d7
00004DD2                            
00004DD2                            loc_48BE:
00004DD2 2003                       		move.l	d3,d0
00004DD4 7C03                       		moveq	#3,d6
00004DD6 7800                       		moveq	#0,d4
00004DD8 0C47 0003                  		cmpi.w	#3,d7
00004DDC 6400                       		bcc.s	loc_48CC
00004DDE 7801                       		moveq	#1,d4
00004DE0                            
00004DE0                            loc_48CC:
00004DE0 7A07                       		moveq	#7,d5
00004DE2                            
00004DE2                            loc_48CE:
00004DE2 224A                       		movea.l	a2,a1
00004DE4 0A04 0001                  		eori.b	#1,d4
00004DE8 6600                       		bne.s	loc_48E2
00004DEA 0C47 0006                  		cmpi.w	#6,d7
00004DEE 6600                       		bne.s	loc_48F2
00004DF0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DF6                            
00004DF6                            loc_48E2:
00004DF6 48E7 F800                  		movem.l	d0-d4,-(sp)
00004DFA 7207                       		moveq	#7,d1
00004DFC 7407                       		moveq	#7,d2
00004DFE 6100 C844                  		bsr.w	ShowVDPGraphics
00004E02 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004E06                            
00004E06                            loc_48F2:
00004E06 0680 0010 0000             		addi.l	#$100000,d0
00004E0C 51CD FFD4                  		dbf	d5,loc_48CE
00004E10 0680 0380 0000             		addi.l	#$3800000,d0
00004E16 0A04 0001                  		eori.b	#1,d4
00004E1A 51CE FFC4                  		dbf	d6,loc_48CC
00004E1E 0683 1000 0000             		addi.l	#$10000000,d3
00004E24 6A00                       		bpl.s	loc_491C
00004E26 4843                       		swap	d3
00004E28 0683 0000 C000             		addi.l	#$C000,d3
00004E2E 4843                       		swap	d3
00004E30                            
00004E30                            loc_491C:
00004E30 D4FC 0080                  		adda.w	#$80,a2
00004E34 51CF FF9C                  		dbf	d7,loc_48BE
00004E38 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E3E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004E44 303C 4000                  		move.w	#$4000,d0
00004E48 6100 CAF8                  		bsr.w	EniDec
00004E4C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E52 203C 4000 0003             		move.l	#$40000003,d0
00004E58 723F                       		moveq	#$3F,d1
00004E5A 741F                       		moveq	#$1F,d2
00004E5C 6100 C7E6                  		bsr.w	ShowVDPGraphics
00004E60 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E66 203C 5000 0003             		move.l	#$50000003,d0
00004E6C 723F                       		moveq	#$3F,d1
00004E6E 743F                       		moveq	#$3F,d2
00004E70 6100 C7D2                  		bsr.w	ShowVDPGraphics
00004E74 4E75                       		rts	
00004E76                            ; End of function SS_BGLoad
00004E76                            
00004E76                            ; ---------------------------------------------------------------------------
00004E76                            ; Pallet cycling routine - special stage
00004E76                            ; ---------------------------------------------------------------------------
00004E76                            
00004E76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E76                            
00004E76                            
00004E76                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004E76 4A78 F63A                  		tst.w	($FFFFF63A).w
00004E7A 6600                       		bne.s	locret_49E6
00004E7C 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004E80 6A00                       		bpl.s	locret_49E6
00004E82 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E88 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004E8C 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004E90 0240 001F                  		andi.w	#$1F,d0
00004E94 E548                       		lsl.w	#2,d0
00004E96 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004E9C D0C0                       		adda.w	d0,a0
00004E9E 1018                       		move.b	(a0)+,d0
00004EA0 6A00                       		bpl.s	loc_4992
00004EA2 303C 01FF                  		move.w	#$1FF,d0
00004EA6                            
00004EA6                            loc_4992:
00004EA6 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004EAA 7000                       		moveq	#0,d0
00004EAC 1018                       		move.b	(a0)+,d0
00004EAE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004EB2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004EB8 43F1 0000                  		lea	(a1,d0.w),a1
00004EBC 303C 8200                  		move.w	#-$7E00,d0
00004EC0 1019                       		move.b	(a1)+,d0
00004EC2 3C80                       		move.w	d0,(a6)
00004EC4 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004EC8 303C 8400                  		move.w	#-$7C00,d0
00004ECC 1018                       		move.b	(a0)+,d0
00004ECE 3C80                       		move.w	d0,(a6)
00004ED0 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004EDA 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004EE2 7000                       		moveq	#0,d0
00004EE4 1018                       		move.b	(a0)+,d0
00004EE6 6B00                       		bmi.s	loc_49E8
00004EE8 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004EEE D2C0                       		adda.w	d0,a1
00004EF0 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004EF4 24D9                       		move.l	(a1)+,(a2)+
00004EF6 24D9                       		move.l	(a1)+,(a2)+
00004EF8 24D9                       		move.l	(a1)+,(a2)+
00004EFA                            
00004EFA                            locret_49E6:
00004EFA 4E75                       		rts	
00004EFC                            ; ===========================================================================
00004EFC                            
00004EFC                            loc_49E8:				; XREF: PalCycle_SS
00004EFC 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004F00 0C40 008A                  		cmpi.w	#$8A,d0
00004F04 6500                       		bcs.s	loc_49F4
00004F06 5241                       		addq.w	#1,d1
00004F08                            
00004F08                            loc_49F4:
00004F08 C2FC 002A                  		mulu.w	#$2A,d1
00004F0C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004F12 D2C1                       		adda.w	d1,a1
00004F14 0240 007F                  		andi.w	#$7F,d0
00004F18 0880 0000                  		bclr	#0,d0
00004F1C 6700                       		beq.s	loc_4A18
00004F1E 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004F22 24D1                       		move.l	(a1),(a2)+
00004F24 24E9 0004                  		move.l	4(a1),(a2)+
00004F28 24E9 0008                  		move.l	8(a1),(a2)+
00004F2C                            
00004F2C                            loc_4A18:
00004F2C D2FC 000C                  		adda.w	#$C,a1
00004F30 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004F34 0C40 000A                  		cmpi.w	#$A,d0
00004F38 6500                       		bcs.s	loc_4A2E
00004F3A 0440 000A                  		subi.w	#$A,d0
00004F3E 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004F42                            
00004F42                            loc_4A2E:
00004F42 3200                       		move.w	d0,d1
00004F44 D040                       		add.w	d0,d0
00004F46 D041                       		add.w	d1,d0
00004F48 D2C0                       		adda.w	d0,a1
00004F4A 24D9                       		move.l	(a1)+,(a2)+
00004F4C 34D9                       		move.w	(a1)+,(a2)+
00004F4E 4E75                       		rts	
00004F50                            ; End of function PalCycle_SS
00004F50                            
00004F50                            ; ===========================================================================
00004F50 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004F60                            					; XREF: PalCycle_SS
00004F60 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004F70 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004F80 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004F90 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004FA0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004FB0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004FC0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004FD0                            		even
00004FD0 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004FDE                            					; XREF: PalCycle_SS
00004FDE                            		even
00004FDE                            
00004FDE                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005026                            		even
00005026                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
000050F8                            		even
000050F8                            
000050F8                            ; ---------------------------------------------------------------------------
000050F8                            ; Subroutine to	make the special stage background animated
000050F8                            ; ---------------------------------------------------------------------------
000050F8                            
000050F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050F8                            
000050F8                            
000050F8                            SS_BGAnimate:				; XREF: SpecialStage
000050F8 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
000050FC 6600                       		bne.s	loc_4BF6
000050FE 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005104 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000510A                            
0000510A                            loc_4BF6:
0000510A 0C40 0008                  		cmpi.w	#8,d0
0000510E 6400                       		bcc.s	loc_4C4E
00005110 0C40 0006                  		cmpi.w	#6,d0
00005114 6600                       		bne.s	loc_4C10
00005116 5278 F718                  		addq.w	#1,($FFFFF718).w
0000511A 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000511E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005124                            
00005124                            loc_4C10:
00005124 7000                       		moveq	#0,d0
00005126 3038 F708                  		move.w	($FFFFF708).w,d0
0000512A 4440                       		neg.w	d0
0000512C 4840                       		swap	d0
0000512E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005134 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005138 7609                       		moveq	#9,d3
0000513A                            
0000513A                            loc_4C26:
0000513A 302B 0002                  		move.w	2(a3),d0
0000513E 6100 DBAC                  		bsr.w	CalcSine
00005142 7400                       		moveq	#0,d2
00005144 1419                       		move.b	(a1)+,d2
00005146 C1C2                       		muls.w	d2,d0
00005148 E080                       		asr.l	#8,d0
0000514A 36C0                       		move.w	d0,(a3)+
0000514C 1419                       		move.b	(a1)+,d2
0000514E 4882                       		ext.w	d2
00005150 D55B                       		add.w	d2,(a3)+
00005152 51CB FFE6                  		dbf	d3,loc_4C26
00005156 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000515A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005160 6000                       		bra.s	loc_4C7E
00005162                            ; ===========================================================================
00005162                            
00005162                            loc_4C4E:				; XREF: SS_BGAnimate
00005162 0C40 000C                  		cmpi.w	#$C,d0
00005166 6600                       		bne.s	loc_4C74
00005168 5378 F718                  		subq.w	#1,($FFFFF718).w
0000516C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005170 243C 0001 8000             		move.l	#$18000,d2
00005176 7206                       		moveq	#6,d1
00005178                            
00005178                            loc_4C64:
00005178 2013                       		move.l	(a3),d0
0000517A 9082                       		sub.l	d2,d0
0000517C 26C0                       		move.l	d0,(a3)+
0000517E 0482 0000 2000             		subi.l	#$2000,d2
00005184 51C9 FFF2                  		dbf	d1,loc_4C64
00005188                            
00005188                            loc_4C74:
00005188 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000518C 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005192                            
00005192                            loc_4C7E:
00005192 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005196 3038 F718                  		move.w	($FFFFF718).w,d0
0000519A 4440                       		neg.w	d0
0000519C 4840                       		swap	d0
0000519E 7600                       		moveq	#0,d3
000051A0 161A                       		move.b	(a2)+,d3
000051A2 3438 F70C                  		move.w	($FFFFF70C).w,d2
000051A6 4442                       		neg.w	d2
000051A8 0242 00FF                  		andi.w	#$FF,d2
000051AC E54A                       		lsl.w	#2,d2
000051AE                            
000051AE                            loc_4C9A:
000051AE 301B                       		move.w	(a3)+,d0
000051B0 544B                       		addq.w	#2,a3
000051B2 7200                       		moveq	#0,d1
000051B4 121A                       		move.b	(a2)+,d1
000051B6 5341                       		subq.w	#1,d1
000051B8                            
000051B8                            loc_4CA4:
000051B8 2380 2000                  		move.l	d0,(a1,d2.w)
000051BC 5842                       		addq.w	#4,d2
000051BE 0242 03FC                  		andi.w	#$3FC,d2
000051C2 51C9 FFF4                  		dbf	d1,loc_4CA4
000051C6 51CB FFE6                  		dbf	d3,loc_4C9A
000051CA 4E75                       		rts	
000051CC                            ; End of function SS_BGAnimate
000051CC                            
000051CC                            ; ===========================================================================
000051CC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000051D8                            		even
000051D8 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000051E0                            		even
000051E0 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000051F4                            		even
000051F4                            					; XREF: SS_BGAnimate
000051F4                            ; ===========================================================================
000051F4                            
000051F4                            ; ---------------------------------------------------------------------------
000051F4                            ; Continue screen
000051F4                            ; ---------------------------------------------------------------------------
000051F4                            
000051F4                            ContinueScreen:				; XREF: GameModeArray
000051F4 6100 CE46                  		bsr.w	Pal_FadeFrom
000051F8 46FC 2700                  		move	#$2700,sr
000051FC 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005200 0200 00BF                  		andi.b	#$BF,d0
00005204 33C0 00C0 0004             		move.w	d0,($C00004).l
0000520A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005210 3CBC 8004                  		move.w	#$8004,(a6)
00005214 3CBC 8700                  		move.w	#$8700,(a6)
00005218 6100 C2CE                  		bsr.w	ClearScreen
0000521C 43F8 D000                  		lea	($FFFFD000).w,a1
00005220 7000                       		moveq	#0,d0
00005222 323C 07FF                  		move.w	#$7FF,d1
00005226                            
00005226                            Cont_ClrObjRam:
00005226 22C0                       		move.l	d0,(a1)+
00005228 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000522C                            
0000522C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005236 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000523C 6100 C426                  		bsr.w	NemDec
00005240 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000524A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005250 6100 C412                  		bsr.w	NemDec
00005254 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000525E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005264 6100 C3FE                  		bsr.w	NemDec
00005268 720A                       		moveq	#10,d1
0000526A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005270 7012                       		moveq	#$12,d0
00005272 6100 D072                  		bsr.w	PalLoad1	; load continue	screen pallet
00005276 103C 0090                  		move.b	#$90,d0
0000527A 6100 C33E                  		bsr.w	PlaySound	; play continue	music
0000527E 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005284 42B8 F700                  		clr.l	($FFFFF700).w
00005288 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005290 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005296 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
0000529C 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000052A2 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000052A8 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000052AE 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000052B4 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000052BA 4EB9 0000 0000             		jsr	ObjectsLoad
000052C0 4EB9 0000 0000             		jsr	BuildSprites
000052C6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000052CA 0000 0040                  		ori.b	#$40,d0
000052CE 33C0 00C0 0004             		move.w	d0,($C00004).l
000052D4 6100 CCC0                  		bsr.w	Pal_FadeTo
000052D8                            
000052D8                            ; ---------------------------------------------------------------------------
000052D8                            ; Continue screen main loop
000052D8                            ; ---------------------------------------------------------------------------
000052D8                            
000052D8                            Cont_MainLoop:
000052D8 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000052DE 6100 D9DA                  		bsr.w	DelayProgram
000052E2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052E8 6400                       		bcc.s	loc_4DF2
000052EA 46FC 2700                  		move	#$2700,sr
000052EE 3238 F614                  		move.w	($FFFFF614).w,d1
000052F2 82FC 003C                  		divu.w	#$3C,d1
000052F6 0281 0000 000F             		andi.l	#$F,d1
000052FC 4EB9 0000 0000             		jsr	ContScrCounter
00005302 46FC 2300                  		move	#$2300,sr
00005306                            
00005306                            loc_4DF2:
00005306 4EB9 0000 0000             		jsr	ObjectsLoad
0000530C 4EB9 0000 0000             		jsr	BuildSprites
00005312 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005318 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000531A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005320 64B6                       		bcc.s	Cont_MainLoop
00005322 4A78 F614                  		tst.w	($FFFFF614).w
00005326 6600 FFB0                  		bne.w	Cont_MainLoop
0000532A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005330 4E75                       		rts	
00005332                            ; ===========================================================================
00005332                            
00005332                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005332 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005338 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000533E 7000                       		moveq	#0,d0
00005340 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005344 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005348 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000534C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005350 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005354 4E75                       		rts	
00005356                            ; ===========================================================================
00005356                            
00005356                            ; ---------------------------------------------------------------------------
00005356                            ; Object 80 - Continue screen elements
00005356                            ; ---------------------------------------------------------------------------
00005356                            
00005356                            Obj80:					; XREF: Obj_Index
00005356 7000                       		moveq	#0,d0
00005358 1028 0024                  		move.b	$24(a0),d0
0000535C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005360 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005364                            ; ===========================================================================
00005364 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005366 0000                       		dc.w Obj80_Display-Obj80_Index
00005368 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000536A 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000536C                            ; ===========================================================================
0000536C                            
0000536C                            Obj80_Main:				; XREF: Obj80_Index
0000536C 5428 0024                  		addq.b	#2,$24(a0)
00005370 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005378 317C 8500 0002             		move.w	#$8500,2(a0)
0000537E 117C 0000 0001             		move.b	#0,1(a0)
00005384 117C 003C 0019             		move.b	#$3C,$19(a0)
0000538A 317C 0120 0008             		move.w	#$120,8(a0)
00005390 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005396 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
0000539C                            
0000539C                            Obj80_Display:				; XREF: Obj80_Index
0000539C 4EF9 0000 0000             		jmp	DisplaySprite
000053A2                            ; ===========================================================================
000053A2                            Obj80_MiniSonicPos:
000053A2 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000053B4 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000053C0                            ; ===========================================================================
000053C0                            
000053C0                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000053C0 2248                       		movea.l	a0,a1
000053C2 45F9 0000 53A2             		lea	(Obj80_MiniSonicPos).l,a2
000053C8 7200                       		moveq	#0,d1
000053CA 1238 FE18                  		move.b	($FFFFFE18).w,d1
000053CE 5501                       		subq.b	#2,d1
000053D0 6400                       		bcc.s	loc_4EC4
000053D2 4EF9 0000 0000             		jmp	DeleteObject
000053D8                            ; ===========================================================================
000053D8                            
000053D8                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000053D8 7601                       		moveq	#1,d3
000053DA 0C01 000E                  		cmpi.b	#$E,d1
000053DE 6500                       		bcs.s	loc_4ED0
000053E0 7600                       		moveq	#0,d3
000053E2 720E                       		moveq	#$E,d1
000053E4                            
000053E4                            loc_4ED0:
000053E4 1401                       		move.b	d1,d2
000053E6 0202 0001                  		andi.b	#1,d2
000053EA                            
000053EA                            Obj80_MiniSonLoop:
000053EA 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000053EE 335A 0008                  		move.w	(a2)+,8(a1)
000053F2 4A02                       		tst.b	d2
000053F4 6700                       		beq.s	loc_4EEA
000053F6 0469 000A 0008             		subi.w	#$A,8(a1)
000053FC                            
000053FC                            loc_4EEA:
000053FC 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005402 137C 0006 001A             		move.b	#6,$1A(a1)
00005408 137C 0006 0024             		move.b	#6,$24(a1)
0000540E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005416 337C 8551 0002             		move.w	#$8551,2(a1)
0000541C 137C 0000 0001             		move.b	#0,1(a1)
00005422 43E9 0040                  		lea	$40(a1),a1
00005426 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000542A 43E9 FFC0                  		lea	-$40(a1),a1
0000542E 1343 0028                  		move.b	d3,$28(a1)
00005432                            
00005432                            Obj80_ChkType:				; XREF: Obj80_Index
00005432 4A28 0028                  		tst.b	$28(a0)
00005436 6700                       		beq.s	loc_4F40
00005438 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000543E 6500                       		bcs.s	loc_4F40
00005440 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005444 0200 0001                  		andi.b	#1,d0
00005448 6600                       		bne.s	loc_4F40
0000544A 4A78 D010                  		tst.w	($FFFFD010).w
0000544E 6600                       		bne.s	Obj80_Delete
00005450 4E75                       		rts	
00005452                            ; ===========================================================================
00005452                            
00005452                            loc_4F40:				; XREF: Obj80_ChkType
00005452 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005456 0200 000F                  		andi.b	#$F,d0
0000545A 6600                       		bne.s	Obj80_Display2
0000545C 0868 0000 001A             		bchg	#0,$1A(a0)
00005462                            
00005462                            Obj80_Display2:
00005462 4EF9 0000 0000             		jmp	DisplaySprite
00005468                            ; ===========================================================================
00005468                            
00005468                            Obj80_Delete:				; XREF: Obj80_ChkType
00005468 4EF9 0000 0000             		jmp	DeleteObject
0000546E                            ; ===========================================================================
0000546E                            
0000546E                            ; ---------------------------------------------------------------------------
0000546E                            ; Object 81 - Sonic on the continue screen
0000546E                            ; ---------------------------------------------------------------------------
0000546E                            
0000546E                            Obj81:					; XREF: Obj_Index
0000546E 7000                       		moveq	#0,d0
00005470 1028 0024                  		move.b	$24(a0),d0
00005474 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005478 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
0000547C 4EF9 0000 0000             		jmp	DisplaySprite
00005482                            ; ===========================================================================
00005482 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005484 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005486 0000                       		dc.w Obj81_Animate-Obj81_Index
00005488 0000                       		dc.w Obj81_Run-Obj81_Index
0000548A                            ; ===========================================================================
0000548A                            
0000548A                            Obj81_Main:				; XREF: Obj81_Index
0000548A 5428 0024                  		addq.b	#2,$24(a0)
0000548E 317C 00A0 0008             		move.w	#$A0,8(a0)
00005494 317C 00C0 000C             		move.w	#$C0,$C(a0)
0000549A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000054A2 317C 0780 0002             		move.w	#$780,2(a0)
000054A8 117C 0004 0001             		move.b	#4,1(a0)
000054AE 117C 0002 0018             		move.b	#2,$18(a0)
000054B4 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000054BA 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000054C0                            
000054C0                            Obj81_ChkLand:				; XREF: Obj81_Index
000054C0 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000054C6 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000054C8 5428 0024                  		addq.b	#2,$24(a0)
000054CC 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000054D0 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054D8 317C 8500 0002             		move.w	#$8500,2(a0)
000054DE 117C 0000 001C             		move.b	#0,$1C(a0)
000054E4 6000                       		bra.s	Obj81_Animate
000054E6                            ; ===========================================================================
000054E6                            
000054E6                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000054E6 4EB9 0000 0000             		jsr	SpeedToPos
000054EC 4EB9 0000 0000             		jsr	Sonic_Animate
000054F2 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000054F8                            ; ===========================================================================
000054F8                            
000054F8                            Obj81_Animate:				; XREF: Obj81_Index
000054F8 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000054FC 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000054FE 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005504 4EF9 0000 0000             		jmp	AnimateSprite
0000550A                            ; ===========================================================================
0000550A                            
0000550A                            Obj81_GetUp:				; XREF: Obj81_Animate
0000550A 5428 0024                  		addq.b	#2,$24(a0)
0000550E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005516 317C 0780 0002             		move.w	#$780,2(a0)
0000551C 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005522 4268 0014                  		clr.w	$14(a0)
00005526 5168 000C                  		subq.w	#8,$C(a0)
0000552A 103C 00E0                  		move.b	#$E0,d0
0000552E 6100 C090                  		bsr.w	PlaySound_Special ; fade out music
00005532                            
00005532                            Obj81_Run:				; XREF: Obj81_Index
00005532 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005538 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000553A 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005540 6000                       		bra.s	Obj81_ShowRun
00005542                            ; ===========================================================================
00005542                            
00005542                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005542 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005548                            
00005548                            Obj81_ShowRun:				; XREF: Obj81_Run
00005548 4EB9 0000 0000             		jsr	SpeedToPos
0000554E 4EB9 0000 0000             		jsr	Sonic_Animate
00005554 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000555A                            ; ===========================================================================
0000555A                            Ani_obj81:
0000555A                            	include "_anim\obj81.asm"
0000555A                            ; ---------------------------------------------------------------------------
0000555A                            ; Animation script - Sonic on the continue screen
0000555A                            ; ---------------------------------------------------------------------------
0000555A 0000                       		dc.w byte_504A-Ani_obj81
0000555C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005568 00                         		even
00005568 00                         		even
00005568                            
00005568                            ; ---------------------------------------------------------------------------
00005568                            ; Sprite mappings - Continue screen
00005568                            ; ---------------------------------------------------------------------------
00005568                            Map_obj80:
00005568                            	include "_maps\obj80.asm"
00005568                            ; ---------------------------------------------------------------------------
00005568                            ; Sprite mappings - Continue screen
00005568                            ; ---------------------------------------------------------------------------
00005568 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000556C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005570 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005574 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005578 0B                         byte_5066:	dc.b $B
00005579 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000557E F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005583 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005588 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000558D F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005592 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005597 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000559C F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000055A1 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000055A6 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000055AB 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000055B0 03                         byte_509E:	dc.b 3
000055B1 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000055B6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055BB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055C0 03                         byte_50AE:	dc.b 3
000055C1 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000055C6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055CB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055D0 03                         byte_50BE:	dc.b 3
000055D1 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000055D6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055DB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055E0 02                         byte_50CE:	dc.b 2
000055E1 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000055E6 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000055EB 01                         byte_50D9:	dc.b 1
000055EC 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000055F1 01                         byte_50DF:	dc.b 1
000055F2 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000055F8 00                         		even
000055F8 00                         		even
000055F8                            
000055F8                            ; ===========================================================================
000055F8                            ; ---------------------------------------------------------------------------
000055F8                            ; Ending sequence in Green Hill	Zone
000055F8                            ; ---------------------------------------------------------------------------
000055F8                            
000055F8                            EndingSequence:				; XREF: GameModeArray
000055F8 103C 00E4                  		move.b	#$E4,d0
000055FC 6100 BFC2                  		bsr.w	PlaySound_Special ; stop music
00005600 6100 CA3A                  		bsr.w	Pal_FadeFrom
00005604 43F8 D000                  		lea	($FFFFD000).w,a1
00005608 7000                       		moveq	#0,d0
0000560A 323C 07FF                  		move.w	#$7FF,d1
0000560E                            
0000560E                            End_ClrObjRam:
0000560E 22C0                       		move.l	d0,(a1)+
00005610 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005614                            
00005614 43F8 F628                  		lea	($FFFFF628).w,a1
00005618 7000                       		moveq	#0,d0
0000561A 323C 0015                  		move.w	#$15,d1
0000561E                            
0000561E                            End_ClrRam:
0000561E 22C0                       		move.l	d0,(a1)+
00005620 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005624                            
00005624 43F8 F700                  		lea	($FFFFF700).w,a1
00005628 7000                       		moveq	#0,d0
0000562A 323C 003F                  		move.w	#$3F,d1
0000562E                            
0000562E                            End_ClrRam2:
0000562E 22C0                       		move.l	d0,(a1)+
00005630 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005634                            
00005634 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005638 7000                       		moveq	#0,d0
0000563A 323C 0047                  		move.w	#$47,d1
0000563E                            
0000563E                            End_ClrRam3:
0000563E 22C0                       		move.l	d0,(a1)+
00005640 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005644                            
00005644 46FC 2700                  		move	#$2700,sr
00005648 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000564C 0200 00BF                  		andi.b	#$BF,d0
00005650 33C0 00C0 0004             		move.w	d0,($C00004).l
00005656 6100 BE90                  		bsr.w	ClearScreen
0000565A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005660 3CBC 8B03                  		move.w	#$8B03,(a6)
00005664 3CBC 8230                  		move.w	#$8230,(a6)
00005668 3CBC 8407                  		move.w	#$8407,(a6)
0000566C 3CBC 857C                  		move.w	#$857C,(a6)
00005670 3CBC 9001                  		move.w	#$9001,(a6)
00005674 3CBC 8004                  		move.w	#$8004,(a6)
00005678 3CBC 8720                  		move.w	#$8720,(a6)
0000567C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005682 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005686 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000568C 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005692 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005698 6700                       		beq.s	End_LoadData	; if yes, branch
0000569A 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000056A0                            
000056A0                            End_LoadData:
000056A0 701C                       		moveq	#$1C,d0
000056A2 6100 C26C                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000056A6 4EB9 0000 0000             		jsr	Hud_Base
000056AC 6100 0000                  		bsr.w	LevelSizeLoad
000056B0 6100 0000                  		bsr.w	DeformBgLayer
000056B4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000056BA 6100 0000                  		bsr.w	MainLoadBlockLoad
000056BE 6100 0000                  		bsr.w	LoadTilesFromStart
000056C2 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000056CA 46FC 2300                  		move	#$2300,sr
000056CE 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000056D4 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000056D8 6100 C3E6                  		bsr.w	KosDec
000056DC 7003                       		moveq	#3,d0
000056DE 6100 CC06                  		bsr.w	PalLoad1	; load Sonic's pallet
000056E2 303C 008B                  		move.w	#$8B,d0
000056E6 6100 BED2                  		bsr.w	PlaySound	; play ending sequence music
000056EA 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000056F0 6700                       		beq.s	End_LoadSonic	; if not, branch
000056F2 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000056F8                            
000056F8                            End_LoadSonic:
000056F8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000056FE 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005704 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000570A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005710 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005716 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000571C 4EB9 0000 0000             		jsr	ObjPosLoad
00005722 4EB9 0000 0000             		jsr	ObjectsLoad
00005728 4EB9 0000 0000             		jsr	BuildSprites
0000572E 7000                       		moveq	#0,d0
00005730 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005734 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005738 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000573C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005740 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005744 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005748 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000574C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005750 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005754 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005758 6100 EEE0                  		bsr.w	OscillateNumInit
0000575C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005762 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005768 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000576E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005774 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000577A 6100 D53E                  		bsr.w	DelayProgram
0000577E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005782 0000 0040                  		ori.b	#$40,d0
00005786 33C0 00C0 0004             		move.w	d0,($C00004).l
0000578C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005792 6100 C802                  		bsr.w	Pal_FadeTo
00005796                            
00005796                            ; ---------------------------------------------------------------------------
00005796                            ; Main ending sequence loop
00005796                            ; ---------------------------------------------------------------------------
00005796                            
00005796                            End_MainLoop:
00005796 6100 BE34                  		bsr.w	PauseGame
0000579A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000057A0 6100 D518                  		bsr.w	DelayProgram
000057A4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000057A8 6100 0000                  		bsr.w	End_MoveSonic
000057AC 4EB9 0000 0000             		jsr	ObjectsLoad
000057B2 6100 0000                  		bsr.w	DeformBgLayer
000057B6 4EB9 0000 0000             		jsr	BuildSprites
000057BC 4EB9 0000 0000             		jsr	ObjPosLoad
000057C2 6100 C39C                  		bsr.w	PalCycle_Load
000057C6 6100 EEC8                  		bsr.w	OscillateNumDo
000057CA 6100 EF54                  		bsr.w	ChangeRingFrame
000057CE 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000057D4 6700                       		beq.s	loc_52DA	; if yes, branch
000057D6 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000057DC 103C 0091                  		move.b	#$91,d0
000057E0 6100 BDDE                  		bsr.w	PlaySound_Special ; play credits music
000057E4 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000057EA 4E75                       		rts	
000057EC                            ; ===========================================================================
000057EC                            
000057EC                            loc_52DA:
000057EC 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000057F0 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000057F4                            
000057F4 4278 FE02                  		clr.w	($FFFFFE02).w
000057F8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000057FE 4278 F794                  		clr.w	($FFFFF794).w
00005802                            
00005802                            End_AllEmlds:				; XREF: loc_5334
00005802 6100 BDC8                  		bsr.w	PauseGame
00005806 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000580C 6100 D4AC                  		bsr.w	DelayProgram
00005810 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005814 6100 0000                  		bsr.w	End_MoveSonic
00005818 4EB9 0000 0000             		jsr	ObjectsLoad
0000581E 6100 0000                  		bsr.w	DeformBgLayer
00005822 4EB9 0000 0000             		jsr	BuildSprites
00005828 4EB9 0000 0000             		jsr	ObjPosLoad
0000582E 6100 EE60                  		bsr.w	OscillateNumDo
00005832 6100 EEEC                  		bsr.w	ChangeRingFrame
00005836 5378 F794                  		subq.w	#1,($FFFFF794).w
0000583A 6A00                       		bpl.s	loc_5334
0000583C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005842 6100 C942                  		bsr.w	Pal_ToWhite
00005846                            
00005846                            loc_5334:
00005846 4A78 FE02                  		tst.w	($FFFFFE02).w
0000584A 6700 FFB6                  		beq.w	End_AllEmlds
0000584E 4278 FE02                  		clr.w	($FFFFFE02).w
00005852 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005858 4BF9 00C0 0004             		lea	($C00004).l,a5
0000585E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005864 47F8 F700                  		lea	($FFFFF700).w,a3
00005868 49F8 A400                  		lea	($FFFFA400).w,a4
0000586C 343C 4000                  		move.w	#$4000,d2
00005870 6100 0000                  		bsr.w	LoadTilesFromStart2
00005874 7013                       		moveq	#$13,d0
00005876 6100 CA6E                  		bsr.w	PalLoad1	; load ending pallet
0000587A 6100 C83E                  		bsr.w	Pal_MakeWhite
0000587E 6000 FF16                  		bra.w	End_MainLoop
00005882                            
00005882                            ; ---------------------------------------------------------------------------
00005882                            ; Subroutine controlling Sonic on the ending sequence
00005882                            ; ---------------------------------------------------------------------------
00005882                            
00005882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005882                            
00005882                            
00005882                            End_MoveSonic:				; XREF: End_MainLoop
00005882 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005886 6600                       		bne.s	End_MoveSonic2
00005888 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
0000588E 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005890 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005894 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000589A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            End_MoveSonic2:				; XREF: End_MoveSonic
000058A2 5500                       		subq.b	#2,d0
000058A4 6600                       		bne.s	End_MoveSonic3
000058A6 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000058AC 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000058AE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058B2 7000                       		moveq	#0,d0
000058B4 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000058B8 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000058BC 31C0 D014                  		move.w	d0,($FFFFD014).w
000058C0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000058C6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000058CC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000058D2 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000058D8 4E75                       		rts	
000058DA                            ; ===========================================================================
000058DA                            
000058DA                            End_MoveSonic3:				; XREF: End_MoveSonic
000058DA 5500                       		subq.b	#2,d0
000058DC 6600                       		bne.s	End_MoveSonExit
000058DE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058E2 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000058E8 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000058EE 4278 D024                  		clr.w	($FFFFD024).w
000058F2                            
000058F2                            End_MoveSonExit:
000058F2 4E75                       		rts	
000058F4                            ; End of function End_MoveSonic
000058F4                            
000058F4                            ; ===========================================================================
000058F4                            ; ---------------------------------------------------------------------------
000058F4                            ; Object 87 - Sonic on ending sequence
000058F4                            ; ---------------------------------------------------------------------------
000058F4                            
000058F4                            Obj87:					; XREF: Obj_Index
000058F4 7000                       		moveq	#0,d0
000058F6 1028 0025                  		move.b	$25(a0),d0
000058FA 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000058FE 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005902 4EF9 0000 0000             		jmp	DisplaySprite
00005908                            ; ===========================================================================
00005908 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000590C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005910 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005914 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005918 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000591C                            ; ===========================================================================
0000591C                            
0000591C                            Obj87_Main:				; XREF: Obj87_Index
0000591C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005922 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005924 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000592A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005930 4E75                       		rts	
00005932                            ; ===========================================================================
00005932                            
00005932                            Obj87_Main2:				; XREF: Obj87_Main
00005932 5428 0025                  		addq.b	#2,$25(a0)
00005936 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000593E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005944 117C 0004 0001             		move.b	#4,1(a0)
0000594A 4228 0022                  		clr.b	$22(a0)
0000594E 117C 0002 0018             		move.b	#2,$18(a0)
00005954 117C 0000 001A             		move.b	#0,$1A(a0)
0000595A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005960                            
00005960                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005960 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005964 6600                       		bne.s	Obj87_Wait
00005966 5428 0025                  		addq.b	#2,$25(a0)
0000596A 317C 0001 001C             		move.w	#1,$1C(a0)
00005970 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005976                            
00005976                            Obj87_Wait:
00005976 4E75                       		rts	
00005978                            ; ===========================================================================
00005978                            
00005978                            Obj87_LookUp:				; XREF: Obj87_Index
00005978 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005980 6600                       		bne.s	locret_5480
00005982 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005988 317C 005A 0030             		move.w	#$5A,$30(a0)
0000598E 5428 0025                  		addq.b	#2,$25(a0)
00005992                            
00005992                            locret_5480:
00005992 4E75                       		rts	
00005994                            ; ===========================================================================
00005994                            
00005994                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005994 5368 0030                  		subq.w	#1,$30(a0)
00005998 6600                       		bne.s	Obj87_Wait2
0000599A 43F8 D400                  		lea	($FFFFD400).w,a1
0000599E 323C 00FF                  		move.w	#$FF,d1
000059A2                            
000059A2                            Obj87_ClrLoop:
000059A2 4299                       		clr.l	(a1)+
000059A4 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000059A8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000059AE 5428 0025                  		addq.b	#2,$25(a0)
000059B2 117C 0001 001C             		move.b	#1,$1C(a0)
000059B8 317C 003C 0030             		move.w	#$3C,$30(a0)
000059BE                            
000059BE                            Obj87_Wait2:
000059BE 4E75                       		rts	
000059C0                            ; ===========================================================================
000059C0                            
000059C0                            Obj87_MakeLogo:				; XREF: Obj87_Index
000059C0 5368 0030                  		subq.w	#1,$30(a0)
000059C4 6600                       		bne.s	Obj87_Wait3
000059C6 5428 0025                  		addq.b	#2,$25(a0)
000059CA 317C 00B4 0030             		move.w	#$B4,$30(a0)
000059D0 117C 0002 001C             		move.b	#2,$1C(a0)
000059D6 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000059DC                            
000059DC                            Obj87_Wait3:
000059DC 4E75                       		rts	
000059DE                            ; ===========================================================================
000059DE                            
000059DE                            Obj87_Animate:				; XREF: Obj87_Index
000059DE 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000059E4 4EF9 0000 0000             		jmp	AnimateSprite
000059EA                            ; ===========================================================================
000059EA                            
000059EA                            Obj87_Leap:				; XREF: Obj87_Index
000059EA 5368 0030                  		subq.w	#1,$30(a0)
000059EE 6600                       		bne.s	Obj87_Wait4
000059F0 5428 0025                  		addq.b	#2,$25(a0)
000059F4 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000059FC 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A02 117C 0004 0001             		move.b	#4,1(a0)
00005A08 4228 0022                  		clr.b	$22(a0)
00005A0C 117C 0002 0018             		move.b	#2,$18(a0)
00005A12 117C 0005 001A             		move.b	#5,$1A(a0)
00005A18 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005A1E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005A24 60B8                       		bra.s	Obj87_Animate
00005A26                            ; ===========================================================================
00005A26                            
00005A26                            Obj87_Wait4:				; XREF: Obj87_Leap
00005A26 4E75                       		rts	
00005A28                            ; ===========================================================================
00005A28                            Ani_obj87:
00005A28                            	include "_anim\obj87.asm"
00005A28                            ; ---------------------------------------------------------------------------
00005A28                            ; Animation script - Sonic on the ending sequence
00005A28                            ; ---------------------------------------------------------------------------
00005A28 0000                       		dc.w byte_551C-Ani_obj87
00005A2A 0000                       		dc.w byte_552A-Ani_obj87
00005A2C 0000                       		dc.w byte_5534-Ani_obj87
00005A2E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005A3C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005A46 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005A4E                            		even
00005A4E                            		even
00005A4E                            
00005A4E                            ; ===========================================================================
00005A4E                            ; ---------------------------------------------------------------------------
00005A4E                            ; Object 88 - chaos emeralds on	the ending sequence
00005A4E                            ; ---------------------------------------------------------------------------
00005A4E                            
00005A4E                            Obj88:					; XREF: Obj_Index
00005A4E 7000                       		moveq	#0,d0
00005A50 1028 0024                  		move.b	$24(a0),d0
00005A54 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005A58 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005A5C 4EF9 0000 0000             		jmp	DisplaySprite
00005A62                            ; ===========================================================================
00005A62 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005A64 0000                       		dc.w Obj88_Move-Obj88_Index
00005A66                            ; ===========================================================================
00005A66                            
00005A66                            Obj88_Main:				; XREF: Obj88_Index
00005A66 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005A6C 6700                       		beq.s	Obj88_Main2
00005A6E 588F                       		addq.l	#4,sp
00005A70 4E75                       		rts	
00005A72                            ; ===========================================================================
00005A72                            
00005A72                            Obj88_Main2:				; XREF: Obj88_Main
00005A72 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005A78 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005A7E 2248                       		movea.l	a0,a1
00005A80 7600                       		moveq	#0,d3
00005A82 7401                       		moveq	#1,d2
00005A84 7205                       		moveq	#5,d1
00005A86                            
00005A86                            Obj88_MainLoop:
00005A86 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005A8A 5429 0024                  		addq.b	#2,$24(a1)
00005A8E 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005A96 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005A9C 137C 0004 0001             		move.b	#4,1(a1)
00005AA2 137C 0001 0018             		move.b	#1,$18(a1)
00005AA8 3368 0008 0038             		move.w	8(a0),$38(a1)
00005AAE 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005AB4 1342 001C                  		move.b	d2,$1C(a1)
00005AB8 1342 001A                  		move.b	d2,$1A(a1)
00005ABC 5202                       		addq.b	#1,d2
00005ABE 1343 0026                  		move.b	d3,$26(a1)
00005AC2 0603 002A                  		addi.b	#$2A,d3
00005AC6 43E9 0040                  		lea	$40(a1),a1
00005ACA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005ACE                            
00005ACE                            Obj88_Move:				; XREF: Obj88_Index
00005ACE 3028 003E                  		move.w	$3E(a0),d0
00005AD2 D168 0026                  		add.w	d0,$26(a0)
00005AD6 1028 0026                  		move.b	$26(a0),d0
00005ADA 4EB9 0000 2CEC             		jsr	(CalcSine).l
00005AE0 7800                       		moveq	#0,d4
00005AE2 1828 003C                  		move.b	$3C(a0),d4
00005AE6 C3C4                       		muls.w	d4,d1
00005AE8 E081                       		asr.l	#8,d1
00005AEA C1C4                       		muls.w	d4,d0
00005AEC E080                       		asr.l	#8,d0
00005AEE D268 0038                  		add.w	$38(a0),d1
00005AF2 D068 003A                  		add.w	$3A(a0),d0
00005AF6 3141 0008                  		move.w	d1,8(a0)
00005AFA 3140 000C                  		move.w	d0,$C(a0)
00005AFE 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005B04 6700                       		beq.s	loc_55FA
00005B06 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005B0C                            
00005B0C                            loc_55FA:
00005B0C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005B12 6700                       		beq.s	loc_5608
00005B14 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005B1A                            
00005B1A                            loc_5608:
00005B1A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005B20 6700                       		beq.s	locret_5614
00005B22 5368 003A                  		subq.w	#1,$3A(a0)
00005B26                            
00005B26                            locret_5614:
00005B26 4E75                       		rts	
00005B28                            ; ===========================================================================
00005B28                            ; ---------------------------------------------------------------------------
00005B28                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005B28                            ; ---------------------------------------------------------------------------
00005B28                            
00005B28                            Obj89:					; XREF: Obj_Index
00005B28 7000                       		moveq	#0,d0
00005B2A 1028 0024                  		move.b	$24(a0),d0
00005B2E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005B32 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005B36                            ; ===========================================================================
00005B36 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005B38 0000                       		dc.w Obj89_Move-Obj89_Index
00005B3A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005B3C                            ; ===========================================================================
00005B3C                            
00005B3C                            Obj89_Main:				; XREF: Obj89_Index
00005B3C 5428 0024                  		addq.b	#2,$24(a0)
00005B40 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005B46 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005B4C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005B54 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005B5A 117C 0000 0001             		move.b	#0,1(a0)
00005B60 117C 0000 0018             		move.b	#0,$18(a0)
00005B66                            
00005B66                            Obj89_Move:				; XREF: Obj89_Index
00005B66 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005B6C 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005B6E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005B74 4EB9 0000 0000             		jsr	DisplaySprite
00005B7A                            ; ===========================================================================
00005B7A                            
00005B7A                            Obj89_Delay:				; XREF: Obj89_Move
00005B7A 5428 0024                  		addq.b	#2,$24(a0)
00005B7E 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005B84                            
00005B84                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005B84 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005B88 6A00                       		bpl.s	Obj89_Display
00005B8A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005B90                            
00005B90                            Obj89_Display:
00005B90 4EB9 0000 0000             		jsr	DisplaySprite
00005B96                            ; ===========================================================================
00005B96                            ; ---------------------------------------------------------------------------
00005B96                            ; Sprite mappings - Sonic on the ending	sequence
00005B96                            ; ---------------------------------------------------------------------------
00005B96                            Map_obj87:
00005B96                            	include "_maps\obj87.asm"
00005B96                            ; ---------------------------------------------------------------------------
00005B96                            ; Sprite mappings - Sonic on the ending	sequence
00005B96                            ; ---------------------------------------------------------------------------
00005B96 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005B9A 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005B9E 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005BA2 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005BA6 02                         byte_5690:	dc.b 2
00005BA7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005BAC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005BB1 03                         byte_569B:	dc.b 3
00005BB2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005BB7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005BBC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005BC1 02                         byte_56AB:	dc.b 2
00005BC2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005BC7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005BCC 02                         byte_56B6:	dc.b 2
00005BCD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005BD2 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005BD7 02                         byte_56C1:	dc.b 2
00005BD8 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005BDD FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005BE2 03                         byte_56CC:	dc.b 3
00005BE3 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005BE8 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005BED 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005BF2 07                         byte_56DC:	dc.b 7
00005BF3 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005BF8 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005BFD BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005C02 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005C07 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005C0C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005C11 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005C16 18                         byte_5700:	dc.b $18
00005C17 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005C1C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005C21 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005C26 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005C2B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005C30 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005C35 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005C3A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005C3F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005C44 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005C49 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005C4E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005C53 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005C58 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005C5D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005C62 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005C67 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005C6C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005C71 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005C76 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005C7B D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005C80 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005C85 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005C8A F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005C90 00                         		even
00005C90 00                         		even
00005C90                            
00005C90                            ; ---------------------------------------------------------------------------
00005C90                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C90                            ; ---------------------------------------------------------------------------
00005C90                            Map_obj88:
00005C90                            	include "_maps\obj88.asm"
00005C90                            ; ---------------------------------------------------------------------------
00005C90                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C90                            ; ---------------------------------------------------------------------------
00005C90 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005C94 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005C98 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005C9C 0000                       		dc.w byte_57AC-Map_obj88
00005C9E 01                         byte_5788:	dc.b 1
00005C9F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005CA4 01                         byte_578E:	dc.b 1
00005CA5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005CAA 01                         byte_5794:	dc.b 1
00005CAB F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005CB0 01                         byte_579A:	dc.b 1
00005CB1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005CB6 01                         byte_57A0:	dc.b 1
00005CB7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005CBC 01                         byte_57A6:	dc.b 1
00005CBD F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005CC2 01                         byte_57AC:	dc.b 1
00005CC3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005CC8                            		even
00005CC8                            		even
00005CC8                            
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            Map_obj89:
00005CC8                            	include "_maps\obj89.asm"
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8 0000                       		dc.w byte_57B4-Map_obj89
00005CCA 03                         byte_57B4:	dc.b 3
00005CCB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005CD0 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005CD5 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005CDA                            		even
00005CDA                            		even
00005CDA                            
00005CDA                            ; ===========================================================================
00005CDA                            ; ---------------------------------------------------------------------------
00005CDA                            ; Credits ending sequence
00005CDA                            ; ---------------------------------------------------------------------------
00005CDA                            
00005CDA                            Credits:				; XREF: GameModeArray
00005CDA 6100 BB26                  		bsr.w	ClearPLC
00005CDE 6100 C35C                  		bsr.w	Pal_FadeFrom
00005CE2 4DF9 00C0 0004             		lea	($C00004).l,a6
00005CE8 3CBC 8004                  		move.w	#$8004,(a6)
00005CEC 3CBC 8230                  		move.w	#$8230,(a6)
00005CF0 3CBC 8407                  		move.w	#$8407,(a6)
00005CF4 3CBC 9001                  		move.w	#$9001,(a6)
00005CF8 3CBC 9200                  		move.w	#$9200,(a6)
00005CFC 3CBC 8B03                  		move.w	#$8B03,(a6)
00005D00 3CBC 8720                  		move.w	#$8720,(a6)
00005D04 4238 F64E                  		clr.b	($FFFFF64E).w
00005D08 6100 B7DE                  		bsr.w	ClearScreen
00005D0C 43F8 D000                  		lea	($FFFFD000).w,a1
00005D10 7000                       		moveq	#0,d0
00005D12 323C 07FF                  		move.w	#$7FF,d1
00005D16                            
00005D16                            Cred_ClrObjRam:
00005D16 22C0                       		move.l	d0,(a1)+
00005D18 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005D1C                            
00005D1C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005D26 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005D2C 6100 B936                  		bsr.w	NemDec
00005D30 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005D34 7000                       		moveq	#0,d0
00005D36 323C 001F                  		move.w	#$1F,d1
00005D3A                            
00005D3A                            Cred_ClrPallet:
00005D3A 22C0                       		move.l	d0,(a1)+
00005D3C 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005D40                            
00005D40 7003                       		moveq	#3,d0
00005D42 6100 C5A2                  		bsr.w	PalLoad1	; load Sonic's pallet
00005D46 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005D4C 4EB9 0000 0000             		jsr	ObjectsLoad
00005D52 4EB9 0000 0000             		jsr	BuildSprites
00005D58 6100 0000                  		bsr.w	EndingDemoLoad
00005D5C 7000                       		moveq	#0,d0
00005D5E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005D62 E948                       		lsl.w	#4,d0
00005D64 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005D6A 45F2 0000                  		lea	(a2,d0.w),a2
00005D6E 7000                       		moveq	#0,d0
00005D70 1012                       		move.b	(a2),d0
00005D72 6700                       		beq.s	loc_5862
00005D74 6100 BA2E                  		bsr.w	LoadPLC		; load level patterns
00005D78                            
00005D78                            loc_5862:
00005D78 7001                       		moveq	#1,d0
00005D7A 6100 BA28                  		bsr.w	LoadPLC		; load standard	level patterns
00005D7E 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005D84 6100 C210                  		bsr.w	Pal_FadeTo
00005D88                            
00005D88                            Cred_WaitLoop:
00005D88 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005D8E 6100 CF2A                  		bsr.w	DelayProgram
00005D92 6100 BA7C                  		bsr.w	RunPLC_RAM
00005D96 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005D9A 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005D9C 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005DA0 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005DA2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005DA8 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005DAC 4E75                       		rts	
00005DAE                            
00005DAE                            ; ---------------------------------------------------------------------------
00005DAE                            ; Ending sequence demo loading subroutine
00005DAE                            ; ---------------------------------------------------------------------------
00005DAE                            
00005DAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005DAE                            
00005DAE                            
00005DAE                            EndingDemoLoad:				; XREF: Credits
00005DAE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005DB2 0240 000F                  		andi.w	#$F,d0
00005DB6 D040                       		add.w	d0,d0
00005DB8 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005DBC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005DC0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005DC4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005DCA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005DCC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005DD2 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005DD8 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005DDE 7000                       		moveq	#0,d0
00005DE0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005DE4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005DE8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005DEC 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005DF0 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005DF6 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005DF8 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005DFE 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005E02 303C 0008                  		move.w	#8,d0
00005E06                            
00005E06                            EndDemo_LampLoad:
00005E06 24D9                       		move.l	(a1)+,(a2)+
00005E08 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005E0C                            
00005E0C                            EndDemo_Exit:
00005E0C 4E75                       		rts	
00005E0E                            ; End of function EndingDemoLoad
00005E0E                            
00005E0E                            ; ===========================================================================
00005E0E                            ; ---------------------------------------------------------------------------
00005E0E                            ; Levels used in the end sequence demos
00005E0E                            ; ---------------------------------------------------------------------------
00005E0E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005E1E                            
00005E1E                            ; ---------------------------------------------------------------------------
00005E1E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005E1E                            ; ---------------------------------------------------------------------------
00005E1E                            EndDemo_LampVar:
00005E1E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005E20 0A00 062C 000D             		dc.w $A00, $62C, $D
00005E26 0000 0000                  		dc.l 0
00005E2A 0000                       		dc.b 0,	0
00005E2C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005E40 0101                       		dc.b 1,	1
00005E42                            ; ===========================================================================
00005E42                            ; ---------------------------------------------------------------------------
00005E42                            ; "TRY AGAIN" and "END"	screens
00005E42                            ; ---------------------------------------------------------------------------
00005E42                            
00005E42                            TryAgainEnd:				; XREF: Credits
00005E42 6100 B9BE                  		bsr.w	ClearPLC
00005E46 6100 C1F4                  		bsr.w	Pal_FadeFrom
00005E4A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E50 3CBC 8004                  		move.w	#$8004,(a6)
00005E54 3CBC 8230                  		move.w	#$8230,(a6)
00005E58 3CBC 8407                  		move.w	#$8407,(a6)
00005E5C 3CBC 9001                  		move.w	#$9001,(a6)
00005E60 3CBC 9200                  		move.w	#$9200,(a6)
00005E64 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E68 3CBC 8720                  		move.w	#$8720,(a6)
00005E6C 4238 F64E                  		clr.b	($FFFFF64E).w
00005E70 6100 B676                  		bsr.w	ClearScreen
00005E74 43F8 D000                  		lea	($FFFFD000).w,a1
00005E78 7000                       		moveq	#0,d0
00005E7A 323C 07FF                  		move.w	#$7FF,d1
00005E7E                            
00005E7E                            TryAg_ClrObjRam:
00005E7E 22C0                       		move.l	d0,(a1)+
00005E80 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005E84                            
00005E84 701D                       		moveq	#$1D,d0
00005E86 6100 BA88                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005E8A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E8E 7000                       		moveq	#0,d0
00005E90 323C 001F                  		move.w	#$1F,d1
00005E94                            
00005E94                            TryAg_ClrPallet:
00005E94 22C0                       		move.l	d0,(a1)+
00005E96 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005E9A                            
00005E9A 7013                       		moveq	#$13,d0
00005E9C 6100 C448                  		bsr.w	PalLoad1	; load ending pallet
00005EA0 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005EA4 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005EAA 4EB9 0000 0000             		jsr	ObjectsLoad
00005EB0 4EB9 0000 0000             		jsr	BuildSprites
00005EB6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005EBC 6100 C0D8                  		bsr.w	Pal_FadeTo
00005EC0                            
00005EC0                            ; ---------------------------------------------------------------------------
00005EC0                            ; "TRY AGAIN" and "END"	screen main loop
00005EC0                            ; ---------------------------------------------------------------------------
00005EC0                            TryAg_MainLoop:
00005EC0 6100 B70A                  		bsr.w	PauseGame
00005EC4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005ECA 6100 CDEE                  		bsr.w	DelayProgram
00005ECE 4EB9 0000 0000             		jsr	ObjectsLoad
00005ED4 4EB9 0000 0000             		jsr	BuildSprites
00005EDA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005EE0 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005EE2 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005EE6 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005EE8 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005EEE 67D0                       		beq.s	TryAg_MainLoop
00005EF0                            
00005EF0                            TryAg_Exit:
00005EF0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005EF6 4E75                       		rts	
00005EF8                            
00005EF8                            ; ===========================================================================
00005EF8                            ; ---------------------------------------------------------------------------
00005EF8                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005EF8                            ; ---------------------------------------------------------------------------
00005EF8                            
00005EF8                            Obj8B:					; XREF: Obj_Index
00005EF8 7000                       		moveq	#0,d0
00005EFA 1028 0024                  		move.b	$24(a0),d0
00005EFE 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005F02 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005F06 4EF9 0000 0000             		jmp	DisplaySprite
00005F0C                            ; ===========================================================================
00005F0C 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005F0E 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005F10 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005F12 0000                       		dc.w loc_5A8E-Obj8B_Index
00005F14                            ; ===========================================================================
00005F14                            
00005F14                            Obj8B_Main:				; XREF: Obj8B_Index
00005F14 5428 0024                  		addq.b	#2,$24(a0)
00005F18 317C 0120 0008             		move.w	#$120,8(a0)
00005F1E 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005F24 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005F2C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005F32 117C 0000 0001             		move.b	#0,1(a0)
00005F38 117C 0002 0018             		move.b	#2,$18(a0)
00005F3E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005F44 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005F4A 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005F4C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005F52 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005F58 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005F5E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005F64                            
00005F64                            Obj8B_Animate:				; XREF: Obj8B_Index
00005F64 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005F6A 4EF9 0000 0000             		jmp	AnimateSprite
00005F70                            ; ===========================================================================
00005F70                            
00005F70                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005F70 5428 0024                  		addq.b	#2,$24(a0)
00005F74 7002                       		moveq	#2,d0
00005F76 0828 0000 001C             		btst	#0,$1C(a0)
00005F7C 6700                       		beq.s	loc_5A6A
00005F7E 4440                       		neg.w	d0
00005F80                            
00005F80                            loc_5A6A:
00005F80 43F8 D800                  		lea	($FFFFD800).w,a1
00005F84 7205                       		moveq	#5,d1
00005F86                            
00005F86                            loc_5A70:
00005F86 1340 003E                  		move.b	d0,$3E(a1)
00005F8A 3400                       		move.w	d0,d2
00005F8C E742                       		asl.w	#3,d2
00005F8E D529 0026                  		add.b	d2,$26(a1)
00005F92 43E9 0040                  		lea	$40(a1),a1
00005F96 51C9 FFEE                  		dbf	d1,loc_5A70
00005F9A 5228 001A                  		addq.b	#1,$1A(a0)
00005F9E 317C 0070 0030             		move.w	#112,$30(a0)
00005FA4                            
00005FA4                            loc_5A8E:				; XREF: Obj8B_Index
00005FA4 5368 0030                  		subq.w	#1,$30(a0)
00005FA8 6A00                       		bpl.s	locret_5AA0
00005FAA 0868 0000 001C             		bchg	#0,$1C(a0)
00005FB0 117C 0002 0024             		move.b	#2,$24(a0)
00005FB6                            
00005FB6                            locret_5AA0:
00005FB6 4E75                       		rts	
00005FB8                            ; ===========================================================================
00005FB8                            Ani_obj8B:
00005FB8                            	include "_anim\obj8B.asm"
00005FB8                            ; ---------------------------------------------------------------------------
00005FB8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005FB8                            ; ---------------------------------------------------------------------------
00005FB8 0000                       		dc.w byte_5AA8-Ani_obj8B
00005FBA 0000                       		dc.w byte_5AAC-Ani_obj8B
00005FBC 0000                       		dc.w byte_5AB0-Ani_obj8B
00005FBE 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005FC2 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005FC6 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005FD8                            		even
00005FD8                            		even
00005FD8                            
00005FD8                            ; ===========================================================================
00005FD8                            ; ---------------------------------------------------------------------------
00005FD8                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005FD8                            ; ---------------------------------------------------------------------------
00005FD8                            
00005FD8                            Obj8C:					; XREF: Obj_Index
00005FD8 7000                       		moveq	#0,d0
00005FDA 1028 0024                  		move.b	$24(a0),d0
00005FDE 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005FE2 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005FE6 4EF9 0000 0000             		jmp	DisplaySprite
00005FEC                            ; ===========================================================================
00005FEC 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005FEE 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005FF0                            ; ===========================================================================
00005FF0                            
00005FF0                            Obj8C_Main:				; XREF: Obj8C_Index
00005FF0 2248                       		movea.l	a0,a1
00005FF2 7400                       		moveq	#0,d2
00005FF4 7600                       		moveq	#0,d3
00005FF6 7205                       		moveq	#5,d1
00005FF8 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005FFC                            
00005FFC                            Obj8C_MakeEms:				; XREF: loc_5B42
00005FFC 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006000 5429 0024                  		addq.b	#2,$24(a1)
00006004 237C 0000 5C90 0004        		move.l	#Map_obj88,4(a1)
0000600C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006012 137C 0000 0001             		move.b	#0,1(a1)
00006018 137C 0001 0018             		move.b	#1,$18(a1)
0000601E 337C 0104 0008             		move.w	#$104,8(a1)
00006024 337C 0120 0038             		move.w	#$120,$38(a1)
0000602A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006030 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006036 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000603C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006040                            
00006040                            Obj8C_ChkEms:
00006040 7000                       		moveq	#0,d0
00006042 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006046 5340                       		subq.w	#1,d0
00006048 6500                       		bcs.s	loc_5B42
0000604A                            
0000604A                            Obj8C_ChkEmLoop:
0000604A B433 0000                  		cmp.b	(a3,d0.w),d2
0000604E 6600                       		bne.s	loc_5B3E
00006050 5202                       		addq.b	#1,d2
00006052 60EC                       		bra.s	Obj8C_ChkEms
00006054                            ; ===========================================================================
00006054                            
00006054                            loc_5B3E:
00006054 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006058                            
00006058                            loc_5B42:
00006058 1342 001A                  		move.b	d2,$1A(a1)
0000605C 5229 001A                  		addq.b	#1,$1A(a1)
00006060 5202                       		addq.b	#1,d2
00006062 137C 0080 0026             		move.b	#$80,$26(a1)
00006068 1343 001E                  		move.b	d3,$1E(a1)
0000606C 1343 001F                  		move.b	d3,$1F(a1)
00006070 0643 000A                  		addi.w	#$A,d3
00006074 43E9 0040                  		lea	$40(a1),a1
00006078 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
0000607C                            
0000607C                            Obj8C_Move:				; XREF: Obj8C_Index
0000607C 4A68 003E                  		tst.w	$3E(a0)
00006080 6700                       		beq.s	locret_5BBA
00006082 4A28 001E                  		tst.b	$1E(a0)
00006086 6700                       		beq.s	loc_5B78
00006088 5328 001E                  		subq.b	#1,$1E(a0)
0000608C 6600                       		bne.s	loc_5B80
0000608E                            
0000608E                            loc_5B78:
0000608E 3028 003E                  		move.w	$3E(a0),d0
00006092 D168 0026                  		add.w	d0,$26(a0)
00006096                            
00006096                            loc_5B80:
00006096 1028 0026                  		move.b	$26(a0),d0
0000609A 6700                       		beq.s	loc_5B8C
0000609C 0C00 0080                  		cmpi.b	#$80,d0
000060A0 6600                       		bne.s	loc_5B96
000060A2                            
000060A2                            loc_5B8C:
000060A2 4268 003E                  		clr.w	$3E(a0)
000060A6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000060AC                            
000060AC                            loc_5B96:
000060AC 4EB9 0000 2CEC             		jsr	(CalcSine).l
000060B2 7800                       		moveq	#0,d4
000060B4 1828 003C                  		move.b	$3C(a0),d4
000060B8 C3C4                       		muls.w	d4,d1
000060BA E081                       		asr.l	#8,d1
000060BC C1C4                       		muls.w	d4,d0
000060BE E080                       		asr.l	#8,d0
000060C0 D268 0038                  		add.w	$38(a0),d1
000060C4 D068 003A                  		add.w	$3A(a0),d0
000060C8 3141 0008                  		move.w	d1,8(a0)
000060CC 3140 000A                  		move.w	d0,$A(a0)
000060D0                            
000060D0                            locret_5BBA:
000060D0 4E75                       		rts	
000060D2                            ; ===========================================================================
000060D2                            ; ---------------------------------------------------------------------------
000060D2                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000060D2                            ; ---------------------------------------------------------------------------
000060D2                            Map_obj8B:
000060D2                            	include "_maps\obj8B.asm"
000060D2                            ; ---------------------------------------------------------------------------
000060D2                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000060D2                            ; ---------------------------------------------------------------------------
000060D2 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000060D6 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000060DA 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000060DE 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000060E2 08                         byte_5BCC:	dc.b 8
000060E3 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000060E8 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
000060ED E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000060F2 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000060F7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000060FC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006101 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006106 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000610B 08                         byte_5BF5:	dc.b 8
0000610C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006111 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006116 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000611B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006120 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006125 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000612A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000612F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006134 08                         byte_5C1E:	dc.b 8
00006135 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000613A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000613F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006144 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006149 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000614E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006153 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006158 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000615D 08                         byte_5C47:	dc.b 8
0000615E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006163 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006168 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000616D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006172 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006177 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000617C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006181 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006186 0C                         byte_5C70:	dc.b $C
00006187 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
0000618C F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006191 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006196 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
0000619B ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000061A0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000061A5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000061AA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000061AF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000061B4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000061B9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000061BE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000061C3 0A                         byte_5CAD:	dc.b $A
000061C4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000061C9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000061CE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000061D3 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000061D8 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000061DD F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000061E2 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000061E7 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000061EC 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000061F1 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000061F6 0A                         byte_5CE0:	dc.b $A
000061F7 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
000061FC E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006201 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006206 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000620B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006210 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006215 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000621A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000621F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006224 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006229 0C                         byte_5D13:	dc.b $C
0000622A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000622F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006234 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006239 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000623E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006243 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006248 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000624D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006252 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006257 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000625C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006261 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006266                            		even
00006266                            		even
00006266                            
00006266                            ; ---------------------------------------------------------------------------
00006266                            ; Ending sequence demos
00006266                            ; ---------------------------------------------------------------------------
00006266                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006294                            		even
00006294                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000062D4                            		even
000062D4                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006304                            		even
00006304                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006334                            		even
00006334                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006354                            		even
00006354                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006374                            		even
00006374                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000063A4                            		even
000063A4                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000063D4                            		even
000063D4                            
000063D4                            ; ---------------------------------------------------------------------------
000063D4                            ; Subroutine to	load level boundaries and start	locations
000063D4                            ; ---------------------------------------------------------------------------
000063D4                            
000063D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063D4                            
000063D4                            
000063D4                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000063D4 7000                       		moveq	#0,d0
000063D6 11C0 F740                  		move.b	d0,($FFFFF740).w
000063DA 11C0 F741                  		move.b	d0,($FFFFF741).w
000063DE 11C0 F746                  		move.b	d0,($FFFFF746).w
000063E2 11C0 F748                  		move.b	d0,($FFFFF748).w
000063E6 11C0 F742                  		move.b	d0,($FFFFF742).w
000063EA 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063EE ED08                       		lsl.b	#6,d0
000063F0 E848                       		lsr.w	#4,d0
000063F2 3200                       		move.w	d0,d1
000063F4 D040                       		add.w	d0,d0
000063F6 D041                       		add.w	d1,d0
000063F8 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000063FC 3018                       		move.w	(a0)+,d0
000063FE 31C0 F730                  		move.w	d0,($FFFFF730).w
00006402 2018                       		move.l	(a0)+,d0
00006404 21C0 F728                  		move.l	d0,($FFFFF728).w
00006408 21C0 F720                  		move.l	d0,($FFFFF720).w
0000640C 2018                       		move.l	(a0)+,d0
0000640E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006412 21C0 F724                  		move.l	d0,($FFFFF724).w
00006416 3038 F728                  		move.w	($FFFFF728).w,d0
0000641A 0640 0240                  		addi.w	#$240,d0
0000641E 31C0 F732                  		move.w	d0,($FFFFF732).w
00006422 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006428 3018                       		move.w	(a0)+,d0
0000642A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000642E 6000 0000                  		bra.w	LevSz_ChkLamp
00006432                            ; ===========================================================================
00006432                            ; ---------------------------------------------------------------------------
00006432                            ; Level size array and ending start location array
00006432                            ; ---------------------------------------------------------------------------
00006432                            LevelSizeArray:        ; GHZ
00006432 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
0000643E 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
0000644A 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006456 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006462                                    ; LZ
00006462 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
0000646E 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
0000647A 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
00006486 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
00006492                                    ; MZ
00006492 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
0000649E 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000064AA 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000064B6 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
000064C2                                    ; SLZ
000064C2 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
000064CE 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
000064DA 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
000064E6 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000064F2                                    ; SYZ
000064F2 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
000064FE 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
0000650A 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006516 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006522                                    ; SBZ
00006522 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
0000652E 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
0000653A 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006546 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006552                                    ; Ending
00006552 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
0000655E 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
0000656A 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
00006576 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
00006582                                    even
00006582                            EndingStLocArray:
00006582                            		incbin	misc\sloc_end.bin
000065A2                            		even
000065A2                            
000065A2                            ; ===========================================================================
000065A2                            
000065A2                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000065A2 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000065A6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000065A8 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000065AE 3238 D008                  		move.w	($FFFFD008).w,d1
000065B2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000065B6 6000                       		bra.s	loc_60D0
000065B8                            ; ===========================================================================
000065B8                            
000065B8                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000065B8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000065BC ED08                       		lsl.b	#6,d0
000065BE E848                       		lsr.w	#4,d0
000065C0 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000065C4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000065C8 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000065CA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000065CE 5340                       		subq.w	#1,d0
000065D0 E548                       		lsl.w	#2,d0
000065D2 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000065D6                            
000065D6                            LevSz_SonicPos:
000065D6 7200                       		moveq	#0,d1
000065D8 3219                       		move.w	(a1)+,d1
000065DA 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000065DE 7000                       		moveq	#0,d0
000065E0 3011                       		move.w	(a1),d0
000065E2 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000065E6                            
000065E6                            loc_60D0:				; XREF: LevSz_ChkLamp
000065E6 0441 00A0                  		subi.w	#$A0,d1
000065EA 6400                       		bcc.s	loc_60D8
000065EC 7200                       		moveq	#0,d1
000065EE                            
000065EE                            loc_60D8:
000065EE 3438 F72A                  		move.w	($FFFFF72A).w,d2
000065F2 B242                       		cmp.w	d2,d1
000065F4 6500                       		bcs.s	loc_60E2
000065F6 3202                       		move.w	d2,d1
000065F8                            
000065F8                            loc_60E2:
000065F8 31C1 F700                  		move.w	d1,($FFFFF700).w
000065FC 0440 0060                  		subi.w	#$60,d0
00006600 6400                       		bcc.s	loc_60EE
00006602 7000                       		moveq	#0,d0
00006604                            
00006604                            loc_60EE:
00006604 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006608 6D00                       		blt.s	loc_60F8
0000660A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000660E                            
0000660E                            loc_60F8:
0000660E 31C0 F704                  		move.w	d0,($FFFFF704).w
00006612 6100 0000                  		bsr.w	BgScrollSpeed
00006616 7000                       		moveq	#0,d0
00006618 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000661C E508                       		lsl.b	#2,d0
0000661E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006624 6000 0000                  		bra.w	LevSz_Unk
00006628                            ; ===========================================================================
00006628                            ; ---------------------------------------------------------------------------
00006628                            ; Sonic	start location array
00006628                            ; ---------------------------------------------------------------------------
00006628                            StartLocArray:	incbin	misc\sloc_lev.bin
00006698                            		even
00006698                            
00006698                            ; ---------------------------------------------------------------------------
00006698                            ; Which	256x256	tiles contain loops or roll-tunnels
00006698                            ; ---------------------------------------------------------------------------
00006698                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006698                            ; loop,	loop, tunnel, tunnel
00006698                            ; ---------------------------------------------------------------------------
00006698                            LoopTileNums:	incbin	misc\loopnums.bin
000066B4                            		even
000066B4                            
000066B4                            ; ===========================================================================
000066B4                            
000066B4                            LevSz_Unk:				; XREF: LevelSizeLoad
000066B4 7000                       		moveq	#0,d0
000066B6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000066BA E748                       		lsl.w	#3,d0
000066BC 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000066C0 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000066C4 24D9                       		move.l	(a1)+,(a2)+
000066C6 24D9                       		move.l	(a1)+,(a2)+
000066C8 4E75                       		rts	
000066CA                            ; End of function LevelSizeLoad
000066CA                            
000066CA                            ; ===========================================================================
000066CA 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000066D2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066DA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066E2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066EA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066F2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066FA 0070 0100 0100 0100        		dc.l $700100, $1000100
00006702                            
00006702                            ; ---------------------------------------------------------------------------
00006702                            ; Subroutine to	set scroll speed of some backgrounds
00006702                            ; ---------------------------------------------------------------------------
00006702                            
00006702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006702                            
00006702                            
00006702                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006702 4A38 FE30                  		tst.b	($FFFFFE30).w
00006706 6600                       		bne.s	loc_6206
00006708 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000670C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006710 31C1 F708                  		move.w	d1,($FFFFF708).w
00006714 31C1 F710                  		move.w	d1,($FFFFF710).w
00006718 31C1 F718                  		move.w	d1,($FFFFF718).w
0000671C                            
0000671C                            loc_6206:
0000671C 7400                       		moveq	#0,d2
0000671E 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006722 D442                       		add.w	d2,d2
00006724 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006728 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000672C                            ; End of function BgScrollSpeed
0000672C                            
0000672C                            ; ===========================================================================
0000672C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006730 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006734 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006738 0000                       		dc.w BgScroll_End-BgScroll_Index
0000673A                            ; ===========================================================================
0000673A                            
0000673A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000673A 6000 0000                  		bra.w	Deform_GHZ
0000673E                            ; ===========================================================================
0000673E                            
0000673E                            BgScroll_LZ:				; XREF: BgScroll_Index
0000673E E280                       		asr.l	#1,d0
00006740 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006744 4E75                       		rts	
00006746                            ; ===========================================================================
00006746                            
00006746                            BgScroll_MZ:				; XREF: BgScroll_Index
00006746 4E75                       		rts	
00006748                            ; ===========================================================================
00006748                            
00006748                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006748 E280                       		asr.l	#1,d0
0000674A 0640 00C0                  		addi.w	#$C0,d0
0000674E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006752 4E75                       		rts	
00006754                            ; ===========================================================================
00006754                            
00006754                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006754 E980                       		asl.l	#4,d0
00006756 2400                       		move.l	d0,d2
00006758 E380                       		asl.l	#1,d0
0000675A D082                       		add.l	d2,d0
0000675C E080                       		asr.l	#8,d0
0000675E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006762 31C0 F714                  		move.w	d0,($FFFFF714).w
00006766 4E75                       		rts	
00006768                            ; ===========================================================================
00006768                            
00006768                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006768 E980                       		asl.l	#4,d0
0000676A E380                       		asl.l	#1,d0
0000676C E080                       		asr.l	#8,d0
0000676E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006772 4E75                       		rts	
00006774                            ; ===========================================================================
00006774                            
00006774                            BgScroll_End:				; XREF: BgScroll_Index
00006774 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000677A 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006780 4E75                       		rts	
00006782                            ; ===========================================================================
00006782 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006788 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000678E 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006794 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000679A 4E75                       		rts
0000679C                            
0000679C                            ; ---------------------------------------------------------------------------
0000679C                            ; Background layer deformation subroutines
0000679C                            ; ---------------------------------------------------------------------------
0000679C                            
0000679C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000679C                            
0000679C                            
0000679C                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000679C 4A38 F744                  		tst.b	($FFFFF744).w
000067A0 6700                       		beq.s	loc_628E
000067A2 4E75                       		rts	
000067A4                            ; ===========================================================================
000067A4                            
000067A4                            loc_628E:
000067A4 4278 F754                  		clr.w	($FFFFF754).w
000067A8 4278 F756                  		clr.w	($FFFFF756).w
000067AC 4278 F758                  		clr.w	($FFFFF758).w
000067B0 4278 F75A                  		clr.w	($FFFFF75A).w
000067B4 6100 0000                  		bsr.w	ScrollHoriz
000067B8 6100 0000                  		bsr.w	ScrollVertical
000067BC 6100 0000                  		bsr.w	DynScrResizeLoad
000067C0 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000067C6 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000067CC 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000067D2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067D8 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000067DE 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000067E4 7000                       		moveq	#0,d0
000067E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000067EA D040                       		add.w	d0,d0
000067EC 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000067F0 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000067F4                            ; End of function DeformBgLayer
000067F4                            
000067F4                            ; ===========================================================================
000067F4                            ; ---------------------------------------------------------------------------
000067F4                            ; Offset index for background layer deformation	code
000067F4                            ; ---------------------------------------------------------------------------
000067F4 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000067F8 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000067FC 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006800 0000                       		dc.w Deform_GHZ-Deform_Index
00006802                            ; ---------------------------------------------------------------------------
00006802                            ; Green	Hill Zone background layer deformation code
00006802                            ; ---------------------------------------------------------------------------
00006802                            
00006802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006802                            
00006802                            
00006802                            Deform_GHZ:				; XREF: Deform_Index
00006802 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006806 48C4                       		ext.l	d4
00006808 EB84                       		asl.l	#5,d4
0000680A 2204                       		move.l	d4,d1
0000680C E384                       		asl.l	#1,d4
0000680E D881                       		add.l	d1,d4
00006810 7A00                       		moveq	#0,d5
00006812 6100 0000                  		bsr.w	ScrollBlock1
00006816 6100 0000                  		bsr.w	ScrollBlock4
0000681A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000681E 3038 F704                  		move.w	($FFFFF704).w,d0
00006822 0240 07FF                  		andi.w	#$7FF,d0
00006826 EA48                       		lsr.w	#5,d0
00006828 4440                       		neg.w	d0
0000682A 0640 0026                  		addi.w	#$26,d0
0000682E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006832 3800                       		move.w	d0,d4
00006834 6100 0000                  		bsr.w	ScrollBlock3
00006838 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000683E 323C 006F                  		move.w	#$6F,d1
00006842 9244                       		sub.w	d4,d1
00006844 3038 F700                  		move.w	($FFFFF700).w,d0
00006848 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000684E 6600                       		bne.s	loc_633C
00006850 7000                       		moveq	#0,d0
00006852                            
00006852                            loc_633C:
00006852 4440                       		neg.w	d0
00006854 4840                       		swap	d0
00006856 3038 F708                  		move.w	($FFFFF708).w,d0
0000685A 4440                       		neg.w	d0
0000685C                            
0000685C                            loc_6346:
0000685C 22C0                       		move.l	d0,(a1)+
0000685E 51C9 FFFC                  		dbf	d1,loc_6346
00006862 323C 0027                  		move.w	#$27,d1
00006866 3038 F710                  		move.w	($FFFFF710).w,d0
0000686A 4440                       		neg.w	d0
0000686C                            
0000686C                            loc_6356:
0000686C 22C0                       		move.l	d0,(a1)+
0000686E 51C9 FFFC                  		dbf	d1,loc_6356
00006872 3038 F710                  		move.w	($FFFFF710).w,d0
00006876 0640 0000                  		addi.w	#0,d0
0000687A 3438 F700                  		move.w	($FFFFF700).w,d2
0000687E 0642 FE00                  		addi.w	#-$200,d2
00006882 9440                       		sub.w	d0,d2
00006884 48C2                       		ext.l	d2
00006886 E182                       		asl.l	#8,d2
00006888 85FC 0068                  		divs.w	#$68,d2
0000688C 48C2                       		ext.l	d2
0000688E E182                       		asl.l	#8,d2
00006890 7600                       		moveq	#0,d3
00006892 3600                       		move.w	d0,d3
00006894 323C 0047                  		move.w	#$47,d1
00006898 D244                       		add.w	d4,d1
0000689A                            
0000689A                            loc_6384:
0000689A 3003                       		move.w	d3,d0
0000689C 4440                       		neg.w	d0
0000689E 22C0                       		move.l	d0,(a1)+
000068A0 4843                       		swap	d3
000068A2 D682                       		add.l	d2,d3
000068A4 4843                       		swap	d3
000068A6 51C9 FFF2                  		dbf	d1,loc_6384
000068AA 4E75                       		rts	
000068AC                            ; End of function Deform_GHZ
000068AC                            
000068AC                            ; ---------------------------------------------------------------------------
000068AC                            ; Labyrinth Zone background layer deformation code
000068AC                            ; ---------------------------------------------------------------------------
000068AC                            
000068AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068AC                            
000068AC                            
000068AC                            Deform_LZ:				; XREF: Deform_Index
000068AC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068B0 48C4                       		ext.l	d4
000068B2 EF84                       		asl.l	#7,d4
000068B4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000068B8 48C5                       		ext.l	d5
000068BA EF85                       		asl.l	#7,d5
000068BC 6100 0000                  		bsr.w	ScrollBlock1
000068C0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000068C6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068CA 323C 00DF                  		move.w	#$DF,d1
000068CE 3038 F700                  		move.w	($FFFFF700).w,d0
000068D2 4440                       		neg.w	d0
000068D4 4840                       		swap	d0
000068D6 3038 F708                  		move.w	($FFFFF708).w,d0
000068DA 4440                       		neg.w	d0
000068DC                            
000068DC                            loc_63C6:
000068DC 22C0                       		move.l	d0,(a1)+
000068DE 51C9 FFFC                  		dbf	d1,loc_63C6
000068E2 3038 F646                  		move.w	($FFFFF646).w,d0
000068E6 9078 F704                  		sub.w	($FFFFF704).w,d0
000068EA 4E75                       		rts	
000068EC                            ; End of function Deform_LZ
000068EC                            
000068EC                            ; ---------------------------------------------------------------------------
000068EC                            ; Marble Zone background layer deformation code
000068EC                            ; ---------------------------------------------------------------------------
000068EC                            
000068EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068EC                            
000068EC                            
000068EC                            Deform_MZ:				; XREF: Deform_Index
000068EC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068F0 48C4                       		ext.l	d4
000068F2 ED84                       		asl.l	#6,d4
000068F4 2204                       		move.l	d4,d1
000068F6 E384                       		asl.l	#1,d4
000068F8 D881                       		add.l	d1,d4
000068FA 7A00                       		moveq	#0,d5
000068FC 6100 0000                  		bsr.w	ScrollBlock1
00006900 303C 0200                  		move.w	#$200,d0
00006904 3238 F704                  		move.w	($FFFFF704).w,d1
00006908 0441 01C8                  		subi.w	#$1C8,d1
0000690C 6500                       		bcs.s	loc_6402
0000690E 3401                       		move.w	d1,d2
00006910 D241                       		add.w	d1,d1
00006912 D242                       		add.w	d2,d1
00006914 E441                       		asr.w	#2,d1
00006916 D041                       		add.w	d1,d0
00006918                            
00006918                            loc_6402:
00006918 31C0 F714                  		move.w	d0,($FFFFF714).w
0000691C 6100 0000                  		bsr.w	ScrollBlock3
00006920 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006926 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000692A 323C 00DF                  		move.w	#$DF,d1
0000692E 3038 F700                  		move.w	($FFFFF700).w,d0
00006932 4440                       		neg.w	d0
00006934 4840                       		swap	d0
00006936 3038 F708                  		move.w	($FFFFF708).w,d0
0000693A 4440                       		neg.w	d0
0000693C                            
0000693C                            loc_6426:
0000693C 22C0                       		move.l	d0,(a1)+
0000693E 51C9 FFFC                  		dbf	d1,loc_6426
00006942 4E75                       		rts	
00006944                            ; End of function Deform_MZ
00006944                            
00006944                            ; ---------------------------------------------------------------------------
00006944                            ; Star Light Zone background layer deformation code
00006944                            ; ---------------------------------------------------------------------------
00006944                            
00006944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006944                            
00006944                            
00006944                            Deform_SLZ:				; XREF: Deform_Index
00006944 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006948 48C4                       		ext.l	d4
0000694A EB84                       		asl.l	#5,d4
0000694C 2204                       		move.l	d4,d1
0000694E E384                       		asl.l	#1,d4
00006950 D881                       		add.l	d1,d4
00006952 7A00                       		moveq	#0,d5
00006954 6100 0000                  		bsr.w	ScrollBlock1
00006958 6100 0000                  		bsr.w	ScrollBlock3
0000695C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006960                            	;	move.w	($FFFFF704).w,d0
00006960                            	;	andi.w	#$7FF,d0
00006960 EA48                       		lsr.w	#5,d0
00006962 4440                       		neg.w	d0
00006964 0640 0026                  		addi.w	#$26,d0
00006968 31C0 F714                  		move.w	d0,($FFFFF714).w
0000696C 3800                       		move.w	d0,d4
0000696E                            	;	bsr.w	ScrollBlock3
0000696E 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006974 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006978                            
00006978 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000697C 4440                       		neg.w	d0			; negate (positive to negative)
0000697E 4840                       		swap	d0			; send to the left side of d0
00006980 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006984 45F8 A800                  		lea	($FFFFA800).w,a2
00006988 069A 0000 5000             		addi.l	#$5000,(a2)+
0000698E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006994 3038 A800                  		move.w	($FFFFA800).w,d0
00006998 4440                       		neg.w	d0			; negate (positive to negative)
0000699A E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
0000699C 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069A0                            slz_DeformLoop_1:
000069A0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069A2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000069A6                            
000069A6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069AA 4440                       		neg.w	d0			; negate (positive to negative)
000069AC 4840                       		swap	d0			; send to the left side of d0
000069AE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069B2 45F8 A800                  		lea	($FFFFA800).w,a2
000069B6 069A 0000 5000             		addi.l	#$5000,(a2)+
000069BC 069A 0000 C000             		addi.l	#$C000,(a2)+
000069C2 3038 A800                  		move.w	($FFFFA800).w,d0
000069C6 4440                       		neg.w	d0			; negate (positive to negative)
000069C8 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000069CA 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069CE                            slz_DeformLoop_2:
000069CE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069D0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000069D4                            
000069D4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069D8 4440                       		neg.w	d0			; negate (positive to negative)
000069DA 4840                       		swap	d0			; send to the left side of d0
000069DC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069E0 45F8 A800                  		lea	($FFFFA800).w,a2
000069E4 069A 0000 5000             		addi.l	#$5000,(a2)+
000069EA 069A 0000 C000             		addi.l	#$C000,(a2)+
000069F0 3038 A800                  		move.w	($FFFFA800).w,d0
000069F4 4440                       		neg.w	d0			; negate (positive to negative)
000069F6 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069F8 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069FC                            slz_DeformLoop_3:
000069FC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069FE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006A02                            
00006A02 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A06 4440                       		neg.w	d0			; negate (positive to negative)
00006A08 4840                       		swap	d0			; send to the left side of d0
00006A0A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A0E 45F8 A800                  		lea	($FFFFA800).w,a2
00006A12 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A18 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A1E 3038 A800                  		move.w	($FFFFA800).w,d0
00006A22 4440                       		neg.w	d0			; negate (positive to negative)
00006A24 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A26 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A2A                            slz_DeformLoop_4:
00006A2A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A2C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006A30                            
00006A30 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A34 4440                       		neg.w	d0			; negate (positive to negative)
00006A36 4840                       		swap	d0			; send to the left side of d0
00006A38 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A3C 45F8 A800                  		lea	($FFFFA800).w,a2
00006A40 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A46 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A4C 3038 A800                  		move.w	($FFFFA800).w,d0
00006A50 4440                       		neg.w	d0			; negate (positive to negative)
00006A52 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A54 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A58                            slz_DeformLoop_5:
00006A58 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A5A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006A5E                            
00006A5E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A62 4440                       		neg.w	d0			; negate (positive to negative)
00006A64 4840                       		swap	d0			; send to the left side of d0
00006A66 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A6A 4440                       		neg.w	d0			; negate (positive to negative)
00006A6C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A6E 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A72                            slz_DeformLoop_6:
00006A72 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A74 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006A78                            
00006A78 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A7C 4440                       		neg.w	d0			; negate (positive to negative)
00006A7E 4840                       		swap	d0			; send to the left side of d0
00006A80 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A84 4440                       		neg.w	d0			; negate (positive to negative)
00006A86 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006A88 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A8C                            slz_DeformLoop_7:
00006A8C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A8E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006A92                            
00006A92 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A96 4440                       		neg.w	d0			; negate (positive to negative)
00006A98 4840                       		swap	d0			; send to the left side of d0
00006A9A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A9E 4440                       		neg.w	d0			; negate (positive to negative)
00006AA0 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006AA2 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AA6                            slz_DeformLoop_8:
00006AA6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AA8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006AAC                            
00006AAC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AB0 4440                       		neg.w	d0			; negate (positive to negative)
00006AB2 4840                       		swap	d0			; send to the left side of d0
00006AB4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AB8 4440                       		neg.w	d0			; negate (positive to negative)
00006ABA EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006ABC 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AC0                            slz_DeformLoop_9:
00006AC0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AC2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006AC6                            
00006AC6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006ACA 4440                       		neg.w	d0			; negate (positive to negative)
00006ACC 4840                       		swap	d0			; send to the left side of d0
00006ACE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AD2 4440                       		neg.w	d0			; negate (positive to negative)
00006AD4 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006AD6 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006ADA                            slz_DeformLoop_10:
00006ADA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006ADC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006AE0                            
00006AE0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AE4 4440                       		neg.w	d0			; negate (positive to negative)
00006AE6 4840                       		swap	d0			; send to the left side of d0
00006AE8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AEC 4440                       		neg.w	d0			; negate (positive to negative)
00006AEE E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006AF0 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AF4                            slz_DeformLoop_11:
00006AF4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AF6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006AFA                            
00006AFA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AFE 4440                       		neg.w	d0			; negate (positive to negative)
00006B00 4840                       		swap	d0			; send to the left side of d0
00006B02 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B06 4440                       		neg.w	d0			; negate (positive to negative)
00006B08 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B0A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B0E                            slz_DeformLoop_12:
00006B0E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B10 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006B14                            
00006B14 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B18 4440                       		neg.w	d0			; negate (positive to negative)
00006B1A 4840                       		swap	d0			; send to the left side of d0
00006B1C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B20 4440                       		neg.w	d0			; negate (positive to negative)
00006B22 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B24 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B28                            slz_DeformLoop_13:
00006B28 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B2A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006B2E 4E75                       		rts	
00006B30                            ; End of function Deform_SLZ
00006B30 4E75                       		rts	
00006B32                            ; End of function Deform_SLZ_2
00006B32                            
00006B32                            ; ---------------------------------------------------------------------------
00006B32                            ; Spring Yard Zone background layer deformation	code
00006B32                            ; ---------------------------------------------------------------------------
00006B32                            
00006B32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B32                            
00006B32                            
00006B32                            Deform_SYZ:				; XREF: Deform_Index
00006B32 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B36 48C4                       		ext.l	d4
00006B38 ED84                       		asl.l	#6,d4
00006B3A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B3E 48C5                       		ext.l	d5
00006B40 E985                       		asl.l	#4,d5
00006B42 2205                       		move.l	d5,d1
00006B44 E385                       		asl.l	#1,d5
00006B46 DA81                       		add.l	d1,d5
00006B48 6100 0000                  		bsr.w	ScrollBlock1
00006B4C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B52 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B56 323C 00DF                  		move.w	#$DF,d1
00006B5A 3038 F700                  		move.w	($FFFFF700).w,d0
00006B5E 4440                       		neg.w	d0
00006B60 4840                       		swap	d0
00006B62 3038 F708                  		move.w	($FFFFF708).w,d0
00006B66 4440                       		neg.w	d0
00006B68                            
00006B68                            loc_653C:
00006B68 22C0                       		move.l	d0,(a1)+
00006B6A 51C9 FFFC                  		dbf	d1,loc_653C
00006B6E 4E75                       		rts	
00006B70                            ; End of function Deform_SYZ
00006B70                            
00006B70                            ; ---------------------------------------------------------------------------
00006B70                            ; Scrap	Brain Zone background layer deformation	code
00006B70                            ; ---------------------------------------------------------------------------
00006B70                            
00006B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B70                            
00006B70                            
00006B70                            Deform_SBZ:				; XREF: Deform_Index
00006B70 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B74 48C4                       		ext.l	d4
00006B76 ED84                       		asl.l	#6,d4
00006B78 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B7C 48C5                       		ext.l	d5
00006B7E E985                       		asl.l	#4,d5
00006B80 E385                       		asl.l	#1,d5
00006B82 6100 0000                  		bsr.w	ScrollBlock1
00006B86 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B8C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B90 323C 00DF                  		move.w	#$DF,d1
00006B94 3038 F700                  		move.w	($FFFFF700).w,d0
00006B98 4440                       		neg.w	d0
00006B9A 4840                       		swap	d0
00006B9C 3038 F708                  		move.w	($FFFFF708).w,d0
00006BA0 4440                       		neg.w	d0
00006BA2                            
00006BA2                            loc_6576:
00006BA2 22C0                       		move.l	d0,(a1)+
00006BA4 51C9 FFFC                  		dbf	d1,loc_6576
00006BA8 4E75                       		rts	
00006BAA                            ; End of function Deform_SBZ
00006BAA                            
00006BAA                            ; ---------------------------------------------------------------------------
00006BAA                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006BAA                            ; ---------------------------------------------------------------------------
00006BAA                            
00006BAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BAA                            
00006BAA                            
00006BAA                            ScrollHoriz:				; XREF: DeformBgLayer
00006BAA 3838 F700                  		move.w	($FFFFF700).w,d4
00006BAE 6100                       		bsr.s	ScrollHoriz2
00006BB0 3038 F700                  		move.w	($FFFFF700).w,d0
00006BB4 0240 0010                  		andi.w	#$10,d0
00006BB8 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006BBC B300                       		eor.b	d1,d0
00006BBE 6600                       		bne.s	locret_65B0
00006BC0 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006BC6 3038 F700                  		move.w	($FFFFF700).w,d0
00006BCA 9044                       		sub.w	d4,d0
00006BCC 6A00                       		bpl.s	loc_65AA
00006BCE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006BD4 4E75                       		rts	
00006BD6                            ; ===========================================================================
00006BD6                            
00006BD6                            loc_65AA:
00006BD6 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006BDC                            
00006BDC                            locret_65B0:
00006BDC 4E75                       		rts	
00006BDE                            ; End of function ScrollHoriz
00006BDE                            
00006BDE                            
00006BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BDE                            
00006BDE                            
00006BDE                            ScrollHoriz2:				; XREF: ScrollHoriz
00006BDE 3038 D008                  		move.w	($FFFFD008).w,d0
00006BE2 9078 F700                  		sub.w	($FFFFF700).w,d0
00006BE6 0440 0090                  		subi.w	#$90,d0
00006BEA 6500                       		bcs.s	loc_65F6
00006BEC 0440 0010                  		subi.w	#$10,d0
00006BF0 6400                       		bcc.s	loc_65CC
00006BF2 4278 F73A                  		clr.w	($FFFFF73A).w
00006BF6 4E75                       		rts	
00006BF8                            ; ===========================================================================
00006BF8                            
00006BF8                            loc_65CC:
00006BF8 0C40 0010                  		cmpi.w	#$10,d0
00006BFC 6500                       		bcs.s	loc_65D6
00006BFE 303C 0010                  		move.w	#$10,d0
00006C02                            
00006C02                            loc_65D6:
00006C02 D078 F700                  		add.w	($FFFFF700).w,d0
00006C06 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006C0A 6D00                       		blt.s	loc_65E4
00006C0C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006C10                            
00006C10                            loc_65E4:
00006C10 3200                       		move.w	d0,d1
00006C12 9278 F700                  		sub.w	($FFFFF700).w,d1
00006C16 E141                       		asl.w	#8,d1
00006C18 31C0 F700                  		move.w	d0,($FFFFF700).w
00006C1C 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006C20 4E75                       		rts	
00006C22                            ; ===========================================================================
00006C22                            
00006C22                            loc_65F6:				; XREF: ScrollHoriz2
00006C22 D078 F700                  		add.w	($FFFFF700).w,d0
00006C26 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006C2A 6EE4                       		bgt.s	loc_65E4
00006C2C 3038 F728                  		move.w	($FFFFF728).w,d0
00006C30 60DE                       		bra.s	loc_65E4
00006C32                            ; End of function ScrollHoriz2
00006C32                            
00006C32                            ; ===========================================================================
00006C32 4A40                       		tst.w	d0
00006C34 6A00                       		bpl.s	loc_6610
00006C36 303C FFFE                  		move.w	#-2,d0
00006C3A 60E6                       		bra.s	loc_65F6
00006C3C                            ; ===========================================================================
00006C3C                            
00006C3C                            loc_6610:
00006C3C 303C 0002                  		move.w	#2,d0
00006C40 60B6                       		bra.s	loc_65CC
00006C42                            
00006C42                            ; ---------------------------------------------------------------------------
00006C42                            ; Subroutine to	scroll the level vertically as Sonic moves
00006C42                            ; ---------------------------------------------------------------------------
00006C42                            
00006C42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C42                            
00006C42                            
00006C42                            ScrollVertical:				; XREF: DeformBgLayer
00006C42 7200                       		moveq	#0,d1
00006C44 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006C48 9078 F704                  		sub.w	($FFFFF704).w,d0
00006C4C 0838 0002 D022             		btst	#2,($FFFFD022).w
00006C52 6700                       		beq.s	loc_662A
00006C54 5B40                       		subq.w	#5,d0
00006C56                            
00006C56                            loc_662A:
00006C56 0838 0001 D022             		btst	#1,($FFFFD022).w
00006C5C 6700                       		beq.s	loc_664A
00006C5E 0640 0020                  		addi.w	#$20,d0
00006C62 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C66 6500                       		bcs.s	loc_6696
00006C68 0440 0040                  		subi.w	#$40,d0
00006C6C 6400                       		bcc.s	loc_6696
00006C6E 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C72 6600                       		bne.s	loc_66A8
00006C74 6000                       		bra.s	loc_6656
00006C76                            ; ===========================================================================
00006C76                            
00006C76                            loc_664A:
00006C76 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C7A 6600                       		bne.s	loc_665C
00006C7C 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C80 6600                       		bne.s	loc_66A8
00006C82                            
00006C82                            loc_6656:
00006C82 4278 F73C                  		clr.w	($FFFFF73C).w
00006C86 4E75                       		rts	
00006C88                            ; ===========================================================================
00006C88                            
00006C88                            loc_665C:
00006C88 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006C8E 6600                       		bne.s	loc_6684
00006C90 3238 D014                  		move.w	($FFFFD014).w,d1
00006C94 6A00                       		bpl.s	loc_666C
00006C96 4441                       		neg.w	d1
00006C98                            
00006C98                            loc_666C:
00006C98 0C41 0800                  		cmpi.w	#$800,d1
00006C9C 6400                       		bcc.s	loc_6696
00006C9E 323C 0600                  		move.w	#$600,d1
00006CA2 0C40 0006                  		cmpi.w	#6,d0
00006CA6 6E00                       		bgt.s	loc_66F6
00006CA8 0C40 FFFA                  		cmpi.w	#-6,d0
00006CAC 6D00                       		blt.s	loc_66C0
00006CAE 6000                       		bra.s	loc_66AE
00006CB0                            ; ===========================================================================
00006CB0                            
00006CB0                            loc_6684:
00006CB0 323C 0200                  		move.w	#$200,d1
00006CB4 0C40 0002                  		cmpi.w	#2,d0
00006CB8 6E00                       		bgt.s	loc_66F6
00006CBA 0C40 FFFE                  		cmpi.w	#-2,d0
00006CBE 6D00                       		blt.s	loc_66C0
00006CC0 6000                       		bra.s	loc_66AE
00006CC2                            ; ===========================================================================
00006CC2                            
00006CC2                            loc_6696:
00006CC2 323C 1000                  		move.w	#$1000,d1
00006CC6 0C40 0010                  		cmpi.w	#$10,d0
00006CCA 6E00                       		bgt.s	loc_66F6
00006CCC 0C40 FFF0                  		cmpi.w	#-$10,d0
00006CD0 6D00                       		blt.s	loc_66C0
00006CD2 6000                       		bra.s	loc_66AE
00006CD4                            ; ===========================================================================
00006CD4                            
00006CD4                            loc_66A8:
00006CD4 7000                       		moveq	#0,d0
00006CD6 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006CDA                            
00006CDA                            loc_66AE:
00006CDA 7200                       		moveq	#0,d1
00006CDC 3200                       		move.w	d0,d1
00006CDE D278 F704                  		add.w	($FFFFF704).w,d1
00006CE2 4A40                       		tst.w	d0
00006CE4 6A00 0000                  		bpl.w	loc_6700
00006CE8 6000 0000                  		bra.w	loc_66CC
00006CEC                            ; ===========================================================================
00006CEC                            
00006CEC                            loc_66C0:
00006CEC 4441                       		neg.w	d1
00006CEE 48C1                       		ext.l	d1
00006CF0 E181                       		asl.l	#8,d1
00006CF2 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006CF6 4841                       		swap	d1
00006CF8                            
00006CF8                            loc_66CC:
00006CF8 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006CFC 6E00                       		bgt.s	loc_6724
00006CFE 0C41 FF00                  		cmpi.w	#-$100,d1
00006D02 6E00                       		bgt.s	loc_66F0
00006D04 0241 07FF                  		andi.w	#$7FF,d1
00006D08 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D0E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006D14 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D1A 6000                       		bra.s	loc_6724
00006D1C                            ; ===========================================================================
00006D1C                            
00006D1C                            loc_66F0:
00006D1C 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006D20 6000                       		bra.s	loc_6724
00006D22                            ; ===========================================================================
00006D22                            
00006D22                            loc_66F6:
00006D22 48C1                       		ext.l	d1
00006D24 E181                       		asl.l	#8,d1
00006D26 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D2A 4841                       		swap	d1
00006D2C                            
00006D2C                            loc_6700:
00006D2C B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006D30 6D00                       		blt.s	loc_6724
00006D32 0441 0800                  		subi.w	#$800,d1
00006D36 6500                       		bcs.s	loc_6720
00006D38 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D3E 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006D44 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D4A 6000                       		bra.s	loc_6724
00006D4C                            ; ===========================================================================
00006D4C                            
00006D4C                            loc_6720:
00006D4C 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006D50                            
00006D50                            loc_6724:
00006D50 3838 F704                  		move.w	($FFFFF704).w,d4
00006D54 4841                       		swap	d1
00006D56 2601                       		move.l	d1,d3
00006D58 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006D5C E09B                       		ror.l	#8,d3
00006D5E 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006D62 21C1 F704                  		move.l	d1,($FFFFF704).w
00006D66 3038 F704                  		move.w	($FFFFF704).w,d0
00006D6A 0240 0010                  		andi.w	#$10,d0
00006D6E 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006D72 B300                       		eor.b	d1,d0
00006D74 6600                       		bne.s	locret_6766
00006D76 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006D7C 3038 F704                  		move.w	($FFFFF704).w,d0
00006D80 9044                       		sub.w	d4,d0
00006D82 6A00                       		bpl.s	loc_6760
00006D84 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006D8A 4E75                       		rts	
00006D8C                            ; ===========================================================================
00006D8C                            
00006D8C                            loc_6760:
00006D8C 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006D92                            
00006D92                            locret_6766:
00006D92 4E75                       		rts	
00006D94                            ; End of function ScrollVertical
00006D94                            
00006D94                            
00006D94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D94                            
00006D94                            
00006D94                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006D94 2438 F708                  		move.l	($FFFFF708).w,d2
00006D98 2002                       		move.l	d2,d0
00006D9A D084                       		add.l	d4,d0
00006D9C 21C0 F708                  		move.l	d0,($FFFFF708).w
00006DA0 2200                       		move.l	d0,d1
00006DA2 4841                       		swap	d1
00006DA4 0241 0010                  		andi.w	#$10,d1
00006DA8 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006DAC B701                       		eor.b	d3,d1
00006DAE 6600                       		bne.s	loc_679C
00006DB0 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006DB6 9082                       		sub.l	d2,d0
00006DB8 6A00                       		bpl.s	loc_6796
00006DBA 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006DC0 6000                       		bra.s	loc_679C
00006DC2                            ; ===========================================================================
00006DC2                            
00006DC2                            loc_6796:
00006DC2 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006DC8                            
00006DC8                            loc_679C:
00006DC8 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006DCC 2003                       		move.l	d3,d0
00006DCE D085                       		add.l	d5,d0
00006DD0 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006DD4 2200                       		move.l	d0,d1
00006DD6 4841                       		swap	d1
00006DD8 0241 0010                  		andi.w	#$10,d1
00006DDC 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DE0 B501                       		eor.b	d2,d1
00006DE2 6600                       		bne.s	locret_67D0
00006DE4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DEA 9083                       		sub.l	d3,d0
00006DEC 6A00                       		bpl.s	loc_67CA
00006DEE 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DF4 4E75                       		rts	
00006DF6                            ; ===========================================================================
00006DF6                            
00006DF6                            loc_67CA:
00006DF6 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DFC                            
00006DFC                            locret_67D0:
00006DFC 4E75                       		rts	
00006DFE                            ; End of function ScrollBlock1
00006DFE                            
00006DFE                            
00006DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DFE                            
00006DFE                            
00006DFE                            ScrollBlock2:				; XREF: Deform_SLZ
00006DFE 2438 F708                  		move.l	($FFFFF708).w,d2
00006E02 2002                       		move.l	d2,d0
00006E04 D084                       		add.l	d4,d0
00006E06 21C0 F708                  		move.l	d0,($FFFFF708).w
00006E0A 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006E0E 2003                       		move.l	d3,d0
00006E10 D085                       		add.l	d5,d0
00006E12 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006E16 2200                       		move.l	d0,d1
00006E18 4841                       		swap	d1
00006E1A 0241 0010                  		andi.w	#$10,d1
00006E1E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E22 B501                       		eor.b	d2,d1
00006E24 6600                       		bne.s	locret_6812
00006E26 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E2C 9083                       		sub.l	d3,d0
00006E2E 6A00                       		bpl.s	loc_680C
00006E30 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E36 4E75                       		rts	
00006E38                            ; ===========================================================================
00006E38                            
00006E38                            loc_680C:
00006E38 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E3E                            
00006E3E                            locret_6812:
00006E3E 4E75                       		rts	
00006E40                            ; End of function ScrollBlock2
00006E40                            
00006E40                            
00006E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E40                            
00006E40                            
00006E40                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006E40 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006E44 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006E48 3200                       		move.w	d0,d1
00006E4A 0241 0010                  		andi.w	#$10,d1
00006E4E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E52 B501                       		eor.b	d2,d1
00006E54 6600                       		bne.s	locret_6842
00006E56 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E5C 9043                       		sub.w	d3,d0
00006E5E 6A00                       		bpl.s	loc_683C
00006E60 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E66 4E75                       		rts	
00006E68                            ; ===========================================================================
00006E68                            
00006E68                            loc_683C:
00006E68 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E6E                            
00006E6E                            locret_6842:
00006E6E 4E75                       		rts	
00006E70                            ; End of function ScrollBlock3
00006E70                            
00006E70                            
00006E70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E70                            
00006E70                            
00006E70                            ScrollBlock4:				; XREF: Deform_GHZ
00006E70 3438 F710                  		move.w	($FFFFF710).w,d2
00006E74 3638 F714                  		move.w	($FFFFF714).w,d3
00006E78 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006E7C 48C0                       		ext.l	d0
00006E7E EF80                       		asl.l	#7,d0
00006E80 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006E84 3038 F710                  		move.w	($FFFFF710).w,d0
00006E88 0240 0010                  		andi.w	#$10,d0
00006E8C 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006E90 B300                       		eor.b	d1,d0
00006E92 6600                       		bne.s	locret_6884
00006E94 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006E9A 3038 F710                  		move.w	($FFFFF710).w,d0
00006E9E 9042                       		sub.w	d2,d0
00006EA0 6A00                       		bpl.s	loc_687E
00006EA2 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006EA8 6000                       		bra.s	locret_6884
00006EAA                            ; ===========================================================================
00006EAA                            
00006EAA                            loc_687E:
00006EAA 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006EB0                            
00006EB0                            locret_6884:
00006EB0 4E75                       		rts	
00006EB2                            ; End of function ScrollBlock4
00006EB2                            
00006EB2                            
00006EB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EB2                            
00006EB2                            
00006EB2                            sub_6886:				; XREF: loc_C44
00006EB2 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EB8 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EBE 45F8 F756                  		lea	($FFFFF756).w,a2
00006EC2 47F8 F708                  		lea	($FFFFF708).w,a3
00006EC6 49F8 A440                  		lea	($FFFFA440).w,a4
00006ECA 343C 6000                  		move.w	#$6000,d2
00006ECE 6100 0000                  		bsr.w	sub_6954
00006ED2 45F8 F758                  		lea	($FFFFF758).w,a2
00006ED6 47F8 F710                  		lea	($FFFFF710).w,a3
00006EDA 6000 0000                  		bra.w	sub_69F4
00006EDE                            ; End of function sub_6886
00006EDE                            
00006EDE                            ; ---------------------------------------------------------------------------
00006EDE                            ; Subroutine to	display	correct	tiles as you move
00006EDE                            ; ---------------------------------------------------------------------------
00006EDE                            
00006EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EDE                            
00006EDE                            
00006EDE                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006EDE 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EE4 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EEA 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006EEE 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006EF2 49F8 A440                  		lea	($FFFFA440).w,a4
00006EF6 343C 6000                  		move.w	#$6000,d2
00006EFA 6100 0000                  		bsr.w	sub_6954
00006EFE 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006F02 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006F06 6100 0000                  		bsr.w	sub_69F4
00006F0A 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006F0E 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006F12 49F8 A400                  		lea	($FFFFA400).w,a4
00006F16 343C 4000                  		move.w	#$4000,d2
00006F1A 4A12                       		tst.b	(a2)
00006F1C 6700                       		beq.s	locret_6952
00006F1E 0892 0000                  		bclr	#0,(a2)
00006F22 6700                       		beq.s	loc_6908
00006F24 78F0                       		moveq	#-$10,d4
00006F26 7AF0                       		moveq	#-$10,d5
00006F28 6100 0000                  		bsr.w	sub_6C20
00006F2C 78F0                       		moveq	#-$10,d4
00006F2E 7AF0                       		moveq	#-$10,d5
00006F30 6100 0000                  		bsr.w	sub_6AD8
00006F34                            
00006F34                            loc_6908:
00006F34 0892 0001                  		bclr	#1,(a2)
00006F38 6700                       		beq.s	loc_6922
00006F3A 383C 00E0                  		move.w	#$E0,d4
00006F3E 7AF0                       		moveq	#-$10,d5
00006F40 6100 0000                  		bsr.w	sub_6C20
00006F44 383C 00E0                  		move.w	#$E0,d4
00006F48 7AF0                       		moveq	#-$10,d5
00006F4A 6100 0000                  		bsr.w	sub_6AD8
00006F4E                            
00006F4E                            loc_6922:
00006F4E 0892 0002                  		bclr	#2,(a2)
00006F52 6700                       		beq.s	loc_6938
00006F54 78F0                       		moveq	#-$10,d4
00006F56 7AF0                       		moveq	#-$10,d5
00006F58 6100 0000                  		bsr.w	sub_6C20
00006F5C 78F0                       		moveq	#-$10,d4
00006F5E 7AF0                       		moveq	#-$10,d5
00006F60 6100 0000                  		bsr.w	sub_6B04
00006F64                            
00006F64                            loc_6938:
00006F64 0892 0003                  		bclr	#3,(a2)
00006F68 6700                       		beq.s	locret_6952
00006F6A 78F0                       		moveq	#-$10,d4
00006F6C 3A3C 0140                  		move.w	#$140,d5
00006F70 6100 0000                  		bsr.w	sub_6C20
00006F74 78F0                       		moveq	#-$10,d4
00006F76 3A3C 0140                  		move.w	#$140,d5
00006F7A 6100 0000                  		bsr.w	sub_6B04
00006F7E                            
00006F7E                            locret_6952:
00006F7E 4E75                       		rts	
00006F80                            ; End of function LoadTilesAsYouMove
00006F80                            
00006F80                            
00006F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F80                            
00006F80                            
00006F80                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006F80 4A12                       		tst.b	(a2)
00006F82 6700 0000                  		beq.w	locret_69F2
00006F86 0892 0000                  		bclr	#0,(a2)
00006F8A 6700                       		beq.s	loc_6972
00006F8C 78F0                       		moveq	#-$10,d4
00006F8E 7AF0                       		moveq	#-$10,d5
00006F90 6100 0000                  		bsr.w	sub_6C20
00006F94 78F0                       		moveq	#-$10,d4
00006F96 7AF0                       		moveq	#-$10,d5
00006F98 7C1F                       		moveq	#$1F,d6
00006F9A 6100 0000                  		bsr.w	sub_6ADA
00006F9E                            
00006F9E                            loc_6972:
00006F9E 0892 0001                  		bclr	#1,(a2)
00006FA2 6700                       		beq.s	loc_698E
00006FA4 383C 00E0                  		move.w	#$E0,d4
00006FA8 7AF0                       		moveq	#-$10,d5
00006FAA 6100 0000                  		bsr.w	sub_6C20
00006FAE 383C 00E0                  		move.w	#$E0,d4
00006FB2 7AF0                       		moveq	#-$10,d5
00006FB4 7C1F                       		moveq	#$1F,d6
00006FB6 6100 0000                  		bsr.w	sub_6ADA
00006FBA                            
00006FBA                            loc_698E:
00006FBA 0892 0002                  		bclr	#2,(a2)
00006FBE 6700                       		beq.s	loc_69BE
00006FC0 78F0                       		moveq	#-$10,d4
00006FC2 7AF0                       		moveq	#-$10,d5
00006FC4 6100 0000                  		bsr.w	sub_6C20
00006FC8 78F0                       		moveq	#-$10,d4
00006FCA 7AF0                       		moveq	#-$10,d5
00006FCC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FD0 322B 0004                  		move.w	4(a3),d1
00006FD4 0241 FFF0                  		andi.w	#-$10,d1
00006FD8 9C41                       		sub.w	d1,d6
00006FDA 6D00                       		blt.s	loc_69BE
00006FDC E84E                       		lsr.w	#4,d6
00006FDE 0C46 000F                  		cmpi.w	#$F,d6
00006FE2 6500                       		bcs.s	loc_69BA
00006FE4 7C0F                       		moveq	#$F,d6
00006FE6                            
00006FE6                            loc_69BA:
00006FE6 6100 0000                  		bsr.w	sub_6B06
00006FEA                            
00006FEA                            loc_69BE:
00006FEA 0892 0003                  		bclr	#3,(a2)
00006FEE 6700                       		beq.s	locret_69F2
00006FF0 78F0                       		moveq	#-$10,d4
00006FF2 3A3C 0140                  		move.w	#$140,d5
00006FF6 6100 0000                  		bsr.w	sub_6C20
00006FFA 78F0                       		moveq	#-$10,d4
00006FFC 3A3C 0140                  		move.w	#$140,d5
00007000 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007004 322B 0004                  		move.w	4(a3),d1
00007008 0241 FFF0                  		andi.w	#-$10,d1
0000700C 9C41                       		sub.w	d1,d6
0000700E 6D00                       		blt.s	locret_69F2
00007010 E84E                       		lsr.w	#4,d6
00007012 0C46 000F                  		cmpi.w	#$F,d6
00007016 6500                       		bcs.s	loc_69EE
00007018 7C0F                       		moveq	#$F,d6
0000701A                            
0000701A                            loc_69EE:
0000701A 6100 0000                  		bsr.w	sub_6B06
0000701E                            
0000701E                            locret_69F2:
0000701E 4E75                       		rts	
00007020                            ; End of function sub_6954
00007020                            
00007020                            
00007020                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007020                            
00007020                            
00007020                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007020 4A12                       		tst.b	(a2)
00007022 6700 0000                  		beq.w	locret_6A80
00007026 0892 0002                  		bclr	#2,(a2)
0000702A 6700                       		beq.s	loc_6A3E
0000702C 0C53 0010                  		cmpi.w	#$10,(a3)
00007030 6500                       		bcs.s	loc_6A3E
00007032 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007036 322B 0004                  		move.w	4(a3),d1
0000703A 0241 FFF0                  		andi.w	#-$10,d1
0000703E 9841                       		sub.w	d1,d4
00007040 3F04                       		move.w	d4,-(sp)
00007042 7AF0                       		moveq	#-$10,d5
00007044 6100 0000                  		bsr.w	sub_6C20
00007048 381F                       		move.w	(sp)+,d4
0000704A 7AF0                       		moveq	#-$10,d5
0000704C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007050 322B 0004                  		move.w	4(a3),d1
00007054 0241 FFF0                  		andi.w	#-$10,d1
00007058 9C41                       		sub.w	d1,d6
0000705A 6D00                       		blt.s	loc_6A3E
0000705C E84E                       		lsr.w	#4,d6
0000705E 0446 000E                  		subi.w	#$E,d6
00007062 6400                       		bcc.s	loc_6A3E
00007064 4446                       		neg.w	d6
00007066 6100 0000                  		bsr.w	sub_6B06
0000706A                            
0000706A                            loc_6A3E:
0000706A 0892 0003                  		bclr	#3,(a2)
0000706E 6700                       		beq.s	locret_6A80
00007070 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007074 322B 0004                  		move.w	4(a3),d1
00007078 0241 FFF0                  		andi.w	#-$10,d1
0000707C 9841                       		sub.w	d1,d4
0000707E 3F04                       		move.w	d4,-(sp)
00007080 3A3C 0140                  		move.w	#$140,d5
00007084 6100 0000                  		bsr.w	sub_6C20
00007088 381F                       		move.w	(sp)+,d4
0000708A 3A3C 0140                  		move.w	#$140,d5
0000708E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007092 322B 0004                  		move.w	4(a3),d1
00007096 0241 FFF0                  		andi.w	#-$10,d1
0000709A 9C41                       		sub.w	d1,d6
0000709C 6D00                       		blt.s	locret_6A80
0000709E E84E                       		lsr.w	#4,d6
000070A0 0446 000E                  		subi.w	#$E,d6
000070A4 6400                       		bcc.s	locret_6A80
000070A6 4446                       		neg.w	d6
000070A8 6100 0000                  		bsr.w	sub_6B06
000070AC                            
000070AC                            locret_6A80:
000070AC 4E75                       		rts	
000070AE                            ; End of function sub_69F4
000070AE                            
000070AE                            ; ===========================================================================
000070AE 4A12                       		tst.b	(a2)
000070B0 6700                       		beq.s	locret_6AD6
000070B2 0892 0002                  		bclr	#2,(a2)
000070B6 6700                       		beq.s	loc_6AAC
000070B8 383C 00D0                  		move.w	#$D0,d4
000070BC 322B 0004                  		move.w	4(a3),d1
000070C0 0241 FFF0                  		andi.w	#-$10,d1
000070C4 9841                       		sub.w	d1,d4
000070C6 3F04                       		move.w	d4,-(sp)
000070C8 7AF0                       		moveq	#-$10,d5
000070CA 6100 0000                  		bsr.w	sub_6C3C
000070CE 381F                       		move.w	(sp)+,d4
000070D0 7AF0                       		moveq	#-$10,d5
000070D2 7C02                       		moveq	#2,d6
000070D4 6100 0000                  		bsr.w	sub_6B06
000070D8                            
000070D8                            loc_6AAC:
000070D8 0892 0003                  		bclr	#3,(a2)
000070DC 6700                       		beq.s	locret_6AD6
000070DE 383C 00D0                  		move.w	#$D0,d4
000070E2 322B 0004                  		move.w	4(a3),d1
000070E6 0241 FFF0                  		andi.w	#-$10,d1
000070EA 9841                       		sub.w	d1,d4
000070EC 3F04                       		move.w	d4,-(sp)
000070EE 3A3C 0140                  		move.w	#$140,d5
000070F2 6100 0000                  		bsr.w	sub_6C3C
000070F6 381F                       		move.w	(sp)+,d4
000070F8 3A3C 0140                  		move.w	#$140,d5
000070FC 7C02                       		moveq	#2,d6
000070FE 6100 0000                  		bsr.w	sub_6B06
00007102                            
00007102                            locret_6AD6:
00007102 4E75                       		rts	
00007104                            
00007104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007104                            
00007104                            
00007104                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007104 7C15                       		moveq	#$15,d6
00007106                            ; End of function sub_6AD8
00007106                            
00007106                            
00007106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007106                            
00007106                            
00007106                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007106 2E3C 0080 0000             		move.l	#$800000,d7
0000710C 2200                       		move.l	d0,d1
0000710E                            
0000710E                            loc_6AE2:
0000710E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007112 6100 0000                  		bsr.w	sub_6BD6
00007116 2001                       		move.l	d1,d0
00007118 6100 0000                  		bsr.w	sub_6B32
0000711C 5801                       		addq.b	#4,d1
0000711E 0201 007F                  		andi.b	#$7F,d1
00007122 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007126 0645 0010                  		addi.w	#$10,d5
0000712A 51CE FFE2                  		dbf	d6,loc_6AE2
0000712E 4E75                       		rts	
00007130                            ; End of function sub_6ADA
00007130                            
00007130                            
00007130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007130                            
00007130                            
00007130                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007130 7C0F                       		moveq	#$F,d6
00007132                            ; End of function sub_6B04
00007132                            
00007132                            
00007132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007132                            
00007132                            
00007132                            sub_6B06:				; XREF: sub_6954
00007132 2E3C 0080 0000             		move.l	#$800000,d7
00007138 2200                       		move.l	d0,d1
0000713A                            
0000713A                            loc_6B0E:
0000713A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000713E 6100 0000                  		bsr.w	sub_6BD6
00007142 2001                       		move.l	d1,d0
00007144 6100 0000                  		bsr.w	sub_6B32
00007148 0641 0100                  		addi.w	#$100,d1
0000714C 0241 0FFF                  		andi.w	#$FFF,d1
00007150 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007154 0644 0010                  		addi.w	#$10,d4
00007158 51CE FFE0                  		dbf	d6,loc_6B0E
0000715C 4E75                       		rts	
0000715E                            ; End of function sub_6B06
0000715E                            
0000715E                            
0000715E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000715E                            
0000715E                            
0000715E                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
0000715E 8042                       		or.w	d2,d0
00007160 4840                       		swap	d0
00007162 0810 0004                  		btst	#4,(a0)
00007166 6600                       		bne.s	loc_6B6E
00007168 0810 0003                  		btst	#3,(a0)
0000716C 6600                       		bne.s	loc_6B4E
0000716E 2A80                       		move.l	d0,(a5)
00007170 2C99                       		move.l	(a1)+,(a6)
00007172 D087                       		add.l	d7,d0
00007174 2A80                       		move.l	d0,(a5)
00007176 2C99                       		move.l	(a1)+,(a6)
00007178 4E75                       		rts	
0000717A                            ; ===========================================================================
0000717A                            
0000717A                            loc_6B4E:
0000717A 2A80                       		move.l	d0,(a5)
0000717C 2819                       		move.l	(a1)+,d4
0000717E 0A84 0800 0800             		eori.l	#$8000800,d4
00007184 4844                       		swap	d4
00007186 2C84                       		move.l	d4,(a6)
00007188 D087                       		add.l	d7,d0
0000718A 2A80                       		move.l	d0,(a5)
0000718C 2819                       		move.l	(a1)+,d4
0000718E 0A84 0800 0800             		eori.l	#$8000800,d4
00007194 4844                       		swap	d4
00007196 2C84                       		move.l	d4,(a6)
00007198 4E75                       		rts	
0000719A                            ; ===========================================================================
0000719A                            
0000719A                            loc_6B6E:
0000719A 0810 0003                  		btst	#3,(a0)
0000719E 6600                       		bne.s	loc_6B90
000071A0 2A80                       		move.l	d0,(a5)
000071A2 2A19                       		move.l	(a1)+,d5
000071A4 2819                       		move.l	(a1)+,d4
000071A6 0A84 1000 1000             		eori.l	#$10001000,d4
000071AC 2C84                       		move.l	d4,(a6)
000071AE D087                       		add.l	d7,d0
000071B0 2A80                       		move.l	d0,(a5)
000071B2 0A85 1000 1000             		eori.l	#$10001000,d5
000071B8 2C85                       		move.l	d5,(a6)
000071BA 4E75                       		rts	
000071BC                            ; ===========================================================================
000071BC                            
000071BC                            loc_6B90:
000071BC 2A80                       		move.l	d0,(a5)
000071BE 2A19                       		move.l	(a1)+,d5
000071C0 2819                       		move.l	(a1)+,d4
000071C2 0A84 1800 1800             		eori.l	#$18001800,d4
000071C8 4844                       		swap	d4
000071CA 2C84                       		move.l	d4,(a6)
000071CC D087                       		add.l	d7,d0
000071CE 2A80                       		move.l	d0,(a5)
000071D0 0A85 1800 1800             		eori.l	#$18001800,d5
000071D6 4845                       		swap	d5
000071D8 2C85                       		move.l	d5,(a6)
000071DA 4E75                       		rts	
000071DC                            ; End of function sub_6B32
000071DC                            
000071DC                            ; ===========================================================================
000071DC 4E75                       		rts	
000071DE                            ; ===========================================================================
000071DE 2A80                       		move.l	d0,(a5)
000071E0 3A3C 2000                  		move.w	#$2000,d5
000071E4 3819                       		move.w	(a1)+,d4
000071E6 D845                       		add.w	d5,d4
000071E8 3C84                       		move.w	d4,(a6)
000071EA 3819                       		move.w	(a1)+,d4
000071EC D845                       		add.w	d5,d4
000071EE 3C84                       		move.w	d4,(a6)
000071F0 D087                       		add.l	d7,d0
000071F2 2A80                       		move.l	d0,(a5)
000071F4 3819                       		move.w	(a1)+,d4
000071F6 D845                       		add.w	d5,d4
000071F8 3C84                       		move.w	d4,(a6)
000071FA 3819                       		move.w	(a1)+,d4
000071FC D845                       		add.w	d5,d4
000071FE 3C84                       		move.w	d4,(a6)
00007200 4E75                       		rts	
00007202                            
00007202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007202                            
00007202                            
00007202                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007202 43F8 B000                  		lea	($FFFFB000).w,a1
00007206 D86B 0004                  		add.w	4(a3),d4
0000720A DA53                       		add.w	(a3),d5
0000720C 3604                       		move.w	d4,d3
0000720E E24B                       		lsr.w	#1,d3
00007210 0243 0380                  		andi.w	#$380,d3
00007214 E64D                       		lsr.w	#3,d5
00007216 3005                       		move.w	d5,d0
00007218 EA48                       		lsr.w	#5,d0
0000721A 0240 007F                  		andi.w	#$7F,d0
0000721E D043                       		add.w	d3,d0
00007220 76FF                       		moveq	#-1,d3
00007222 1634 0000                  		move.b	(a4,d0.w),d3
00007226 6700                       		beq.s	locret_6C1E
00007228 5303                       		subq.b	#1,d3
0000722A 0243 007F                  		andi.w	#$7F,d3
0000722E EE5B                       		ror.w	#7,d3
00007230 D844                       		add.w	d4,d4
00007232 0244 01E0                  		andi.w	#$1E0,d4
00007236 0245 001E                  		andi.w	#$1E,d5
0000723A D644                       		add.w	d4,d3
0000723C D645                       		add.w	d5,d3
0000723E 2043                       		movea.l	d3,a0
00007240 3610                       		move.w	(a0),d3
00007242 0243 03FF                  		andi.w	#$3FF,d3
00007246 E74B                       		lsl.w	#3,d3
00007248 D2C3                       		adda.w	d3,a1
0000724A                            
0000724A                            locret_6C1E:
0000724A 4E75                       		rts	
0000724C                            ; End of function sub_6BD6
0000724C                            
0000724C                            
0000724C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000724C                            
0000724C                            
0000724C                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000724C D86B 0004                  		add.w	4(a3),d4
00007250 DA53                       		add.w	(a3),d5
00007252 0244 00F0                  		andi.w	#$F0,d4
00007256 0245 01F0                  		andi.w	#$1F0,d5
0000725A E94C                       		lsl.w	#4,d4
0000725C E44D                       		lsr.w	#2,d5
0000725E D845                       		add.w	d5,d4
00007260 7003                       		moveq	#3,d0
00007262 4840                       		swap	d0
00007264 3004                       		move.w	d4,d0
00007266 4E75                       		rts	
00007268                            ; End of function sub_6C20
00007268                            
00007268                            
00007268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007268                            ; not used
00007268                            
00007268                            
00007268                            sub_6C3C:
00007268 D86B 0004                  		add.w	4(a3),d4
0000726C DA53                       		add.w	(a3),d5
0000726E 0244 00F0                  		andi.w	#$F0,d4
00007272 0245 01F0                  		andi.w	#$1F0,d5
00007276 E94C                       		lsl.w	#4,d4
00007278 E44D                       		lsr.w	#2,d5
0000727A D845                       		add.w	d5,d4
0000727C 7002                       		moveq	#2,d0
0000727E 4840                       		swap	d0
00007280 3004                       		move.w	d4,d0
00007282 4E75                       		rts	
00007284                            ; End of function sub_6C3C
00007284                            
00007284                            ; ---------------------------------------------------------------------------
00007284                            ; Subroutine to	load tiles as soon as the level	appears
00007284                            ; ---------------------------------------------------------------------------
00007284                            
00007284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007284                            
00007284                            
00007284                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007284 4BF9 00C0 0004             		lea	($C00004).l,a5
0000728A 4DF9 00C0 0000             		lea	($C00000).l,a6
00007290 47F8 F700                  		lea	($FFFFF700).w,a3
00007294 49F8 A400                  		lea	($FFFFA400).w,a4
00007298 343C 4000                  		move.w	#$4000,d2
0000729C 6100                       		bsr.s	LoadTilesFromStart2
0000729E 47F8 F708                  		lea	($FFFFF708).w,a3
000072A2 49F8 A440                  		lea	($FFFFA440).w,a4
000072A6 343C 6000                  		move.w	#$6000,d2
000072AA                            ; End of function LoadTilesFromStart
000072AA                            
000072AA                            
000072AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072AA                            
000072AA                            
000072AA                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000072AA 78F0                       		moveq	#-$10,d4
000072AC 7C0F                       		moveq	#$F,d6
000072AE                            
000072AE                            loc_6C82:
000072AE 48E7 0E00                  		movem.l	d4-d6,-(sp)
000072B2 7A00                       		moveq	#0,d5
000072B4 3204                       		move.w	d4,d1
000072B6 6100 FF94                  		bsr.w	sub_6C20
000072BA 3801                       		move.w	d1,d4
000072BC 7A00                       		moveq	#0,d5
000072BE 7C1F                       		moveq	#$1F,d6
000072C0 6100 FE44                  		bsr.w	sub_6ADA
000072C4 4CDF 0070                  		movem.l	(sp)+,d4-d6
000072C8 0644 0010                  		addi.w	#$10,d4
000072CC 51CE FFE0                  		dbf	d6,loc_6C82
000072D0 4E75                       		rts	
000072D2                            ; End of function LoadTilesFromStart2
000072D2                            
000072D2                            ; ---------------------------------------------------------------------------
000072D2                            ; Main Load Block loading subroutine
000072D2                            ; ---------------------------------------------------------------------------
000072D2                            
000072D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D2                            
000072D2                            
000072D2                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000072D2 7000                       		moveq	#0,d0
000072D4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000072D8 E948                       		lsl.w	#4,d0
000072DA 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000072E0 45F2 0000                  		lea	(a2,d0.w),a2
000072E4 2F0A                       		move.l	a2,-(sp)
000072E6 588A                       		addq.l	#4,a2
000072E8 205A                       		movea.l	(a2)+,a0
000072EA 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000072EE 303C 0000                  		move.w	#0,d0
000072F2 6100 A64E                  		bsr.w	EniDec
000072F6 205A                       		movea.l	(a2)+,a0
000072F8 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000072FE 6100 A7C0                  		bsr.w	KosDec
00007302 6100 0000                  		bsr.w	LevelLayoutLoad
00007306 301A                       		move.w	(a2)+,d0
00007308 3012                       		move.w	(a2),d0
0000730A 0240 00FF                  		andi.w	#$FF,d0
0000730E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007314 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007316 700C                       		moveq	#$C,d0		; use SB3 pallet
00007318                            
00007318                            MLB_ChkSBZPal:
00007318 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000731E 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007320 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007326 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007328                            
00007328                            MLB_UsePal0E:
00007328 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000732A                            
0000732A                            MLB_NormalPal:
0000732A 6100 AFBA                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000732E 245F                       		movea.l	(sp)+,a2
00007330 584A                       		addq.w	#4,a2
00007332 7000                       		moveq	#0,d0
00007334 1012                       		move.b	(a2),d0
00007336 6700                       		beq.s	locret_6D10
00007338 6100 A46A                  		bsr.w	LoadPLC		; load pattern load cues
0000733C                            
0000733C                            locret_6D10:
0000733C 4E75                       		rts	
0000733E                            ; End of function MainLoadBlockLoad
0000733E                            
0000733E                            ; ---------------------------------------------------------------------------
0000733E                            ; Level	layout loading subroutine
0000733E                            ; ---------------------------------------------------------------------------
0000733E                            
0000733E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000733E                            
0000733E                            
0000733E                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000733E 47F8 A400                  		lea	($FFFFA400).w,a3
00007342 323C 01FF                  		move.w	#$1FF,d1
00007346 7000                       		moveq	#0,d0
00007348                            
00007348                            LevLoad_ClrRam:
00007348 26C0                       		move.l	d0,(a3)+
0000734A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000734E                            
0000734E 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007352 7200                       		moveq	#0,d1
00007354 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007358 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000735C 7202                       		moveq	#2,d1
0000735E                            ; End of function LevelLayoutLoad
0000735E                            
0000735E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000735E                            
0000735E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000735E                            
0000735E                            
0000735E                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000735E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007362 ED08                       		lsl.b	#6,d0
00007364 EA48                       		lsr.w	#5,d0
00007366 3400                       		move.w	d0,d2
00007368 D040                       		add.w	d0,d0
0000736A D042                       		add.w	d2,d0
0000736C D041                       		add.w	d1,d0
0000736E 43F9 0000 0000             		lea	(Level_Index).l,a1
00007374 3031 0000                  		move.w	(a1,d0.w),d0
00007378 43F1 0000                  		lea	(a1,d0.w),a1
0000737C 7200                       		moveq	#0,d1
0000737E 3401                       		move.w	d1,d2
00007380 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007382 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007384                            
00007384                            LevLoad_NumRows:
00007384 3001                       		move.w	d1,d0
00007386 204B                       		movea.l	a3,a0
00007388                            
00007388                            LevLoad_Row:
00007388 10D9                       		move.b	(a1)+,(a0)+
0000738A 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
0000738E 47EB 0080                  		lea	$80(a3),a3	; do next row
00007392 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007396 4E75                       		rts	
00007398                            ; End of function LevelLayoutLoad2
00007398                            
00007398                            ; ---------------------------------------------------------------------------
00007398                            ; Dynamic screen resize	loading	subroutine
00007398                            ; ---------------------------------------------------------------------------
00007398                            
00007398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007398                            
00007398                            
00007398                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007398 7000                       		moveq	#0,d0
0000739A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000739E D040                       		add.w	d0,d0
000073A0 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000073A4 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000073A8 7202                       		moveq	#2,d1
000073AA 3038 F726                  		move.w	($FFFFF726).w,d0
000073AE 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000073B2 6700                       		beq.s	locret_6DAA
000073B4 6400                       		bcc.s	loc_6DAC
000073B6 4441                       		neg.w	d1
000073B8 3038 F704                  		move.w	($FFFFF704).w,d0
000073BC B078 F726                  		cmp.w	($FFFFF726).w,d0
000073C0 6300                       		bls.s	loc_6DA0
000073C2 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000073C6 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000073CC                            
000073CC                            loc_6DA0:
000073CC D378 F72E                  		add.w	d1,($FFFFF72E).w
000073D0 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073D6                            
000073D6                            locret_6DAA:
000073D6 4E75                       		rts	
000073D8                            ; ===========================================================================
000073D8                            
000073D8                            loc_6DAC:				; XREF: DynScrResizeLoad
000073D8 3038 F704                  		move.w	($FFFFF704).w,d0
000073DC 5040                       		addq.w	#8,d0
000073DE B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000073E2 6500                       		bcs.s	loc_6DC4
000073E4 0838 0001 D022             		btst	#1,($FFFFD022).w
000073EA 6700                       		beq.s	loc_6DC4
000073EC D241                       		add.w	d1,d1
000073EE D241                       		add.w	d1,d1
000073F0                            
000073F0                            loc_6DC4:
000073F0 D378 F72E                  		add.w	d1,($FFFFF72E).w
000073F4 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073FA 4E75                       		rts	
000073FC                            ; End of function DynScrResizeLoad
000073FC                            
000073FC                            ; ===========================================================================
000073FC                            ; ---------------------------------------------------------------------------
000073FC                            ; Offset index for dynamic screen resizing
000073FC                            ; ---------------------------------------------------------------------------
000073FC 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007400 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007404 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007408 0000                       		dc.w Resize_Ending-Resize_Index
0000740A                            ; ===========================================================================
0000740A                            ; ---------------------------------------------------------------------------
0000740A                            ; Green	Hill Zone dynamic screen resizing
0000740A                            ; ---------------------------------------------------------------------------
0000740A                            
0000740A                            Resize_GHZ:				; XREF: Resize_Index
0000740A 7000                       		moveq	#0,d0
0000740C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007410 D040                       		add.w	d0,d0
00007412 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007416 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000741A                            ; ===========================================================================
0000741A 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000741C 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000741E 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007420                            ; ===========================================================================
00007420                            
00007420                            Resize_GHZ1:
00007420 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007426 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000742C 6500                       		bcs.s	locret_6E08	; if not, branch
0000742E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007434                            
00007434                            locret_6E08:
00007434 4E75                       		rts	
00007436                            ; ===========================================================================
00007436                            
00007436                            Resize_GHZ2:
00007436 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000743C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007442 6500                       		bcs.s	locret_6E3A
00007444 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000744A 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007450 6500                       		bcs.s	locret_6E3A
00007452 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007458 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000745E 6500                       		bcs.s	locret_6E3A
00007460 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007466                            
00007466                            locret_6E3A:
00007466 4E75                       		rts	
00007468                            ; ===========================================================================
00007468                            
00007468                            Resize_GHZ3:
00007468 7000                       		moveq	#0,d0
0000746A 1038 F742                  		move.b	($FFFFF742).w,d0
0000746E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007472 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007476                            ; ===========================================================================
00007476 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007478 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000747A 0000                       		dc.w Resize_GHZ3end-off_6E4A
0000747C                            ; ===========================================================================
0000747C                            
0000747C                            Resize_GHZ3main:
0000747C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007482 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007488 6500                       		bcs.s	locret_6E96
0000748A 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007490 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007496 6500                       		bcs.s	locret_6E96
00007498 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
0000749E 6500                       		bcs.s	loc_6E98
000074A0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000074A6 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000074AC 6400                       		bcc.s	loc_6E8E
000074AE 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000074B4 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000074BA                            
000074BA                            loc_6E8E:
000074BA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074C0 6400                       		bcc.s	loc_6E98
000074C2                            
000074C2                            locret_6E96:
000074C2 4E75                       		rts	
000074C4                            ; ===========================================================================
000074C4                            
000074C4                            loc_6E98:
000074C4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000074CA 5438 F742                  		addq.b	#2,($FFFFF742).w
000074CE 4E75                       		rts	
000074D0                            ; ===========================================================================
000074D0                            
000074D0                            Resize_GHZ3boss:
000074D0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000074D6 6400                       		bcc.s	loc_6EB0
000074D8 5538 F742                  		subq.b	#2,($FFFFF742).w
000074DC                            
000074DC                            loc_6EB0:
000074DC 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000074E2 6500                       		bcs.s	locret_6EE8
000074E4 6100 0000                  		bsr.w	SingleObjLoad
000074E8 6600                       		bne.s	loc_6ED0
000074EA 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000074EE 337C 2A60 0008             		move.w	#$2A60,8(a1)
000074F4 337C 0280 000C             		move.w	#$280,$C(a1)
000074FA                            
000074FA                            loc_6ED0:
000074FA 303C 008C                  		move.w	#$8C,d0
000074FE 6100 A0BA                  		bsr.w	PlaySound	; play boss music
00007502 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007508 5438 F742                  		addq.b	#2,($FFFFF742).w
0000750C 7011                       		moveq	#$11,d0
0000750E 6000 A294                  		bra.w	LoadPLC		; load boss patterns
00007512                            ; ===========================================================================
00007512                            
00007512                            locret_6EE8:
00007512 4E75                       		rts	
00007514                            ; ===========================================================================
00007514                            
00007514                            Resize_GHZ3end:
00007514 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000751A 4E75                       		rts	
0000751C                            ; ===========================================================================
0000751C                            ; ---------------------------------------------------------------------------
0000751C                            ; Labyrinth Zone dynamic screen	resizing
0000751C                            ; ---------------------------------------------------------------------------
0000751C                            
0000751C                            Resize_LZ:				; XREF: Resize_Index
0000751C 7000                       		moveq	#0,d0
0000751E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007522 D040                       		add.w	d0,d0
00007524 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007528 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000752C                            ; ===========================================================================
0000752C 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000752E 0000                       		dc.w Resize_LZ12-Resize_LZx
00007530 0000                       		dc.w Resize_LZ3-Resize_LZx
00007532 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007534                            ; ===========================================================================
00007534                            
00007534                            Resize_LZ12:
00007534 4E75                       		rts	
00007536                            ; ===========================================================================
00007536                            
00007536                            Resize_LZ3:
00007536 7000                       		moveq	#0,d0
00007538 1038 F742                  		move.b	($FFFFF742).w,d0
0000753C 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007540 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
00007544                            ; ===========================================================================
00007544                            off_6E4A2:	
00007544 0000                       		dc.w Resize_LZ3boss-off_6E4A2
00007546 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007548                            ; ===========================================================================
00007548                            Resize_LZ3boss:
00007548 4A38 F742                  		tst.b	($FFFFF742).w
0000754C 6600                       		bne.s	locret_6F62
0000754E 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007554 6500                       		bcs.s	locret_6F62
00007556 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
0000755C 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00007562                            
00007562 6100 0000                  		bsr.w	SingleObjLoad
00007566 6600                       		bne.s	loc_6F4A
00007568 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000756C 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007572 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007578                            loc_6F4A:
00007578 303C 008C                  		move.w	#$8C,d0
0000757C 6100 A03C                  		bsr.w	PlaySound	; play boss music
00007580 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007586 5438 F742                  		addq.b	#2,($FFFFF742).w
0000758A 7020                       		moveq	#$20,d0
0000758C 6000 A216                  		bra.w	LoadPLC		; load boss patterns
00007590                            ; ===========================================================================
00007590                            
00007590                            locret_6F62:
00007590 4E75                       		rts	
00007592                            ; ===========================================================================
00007592                            
00007592                            Resize_LZ3end:
00007592 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007598 4E75                       		rts	
0000759A                            ; ===========================================================================
0000759A                            
0000759A                            Resize_SBZ3:
0000759A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000075A0 6500                       		bcs.s	locret_6F8C
000075A2 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000075A8 6400                       		bcc.s	locret_6F8C	; if not, branch
000075AA 4238 FE30                  		clr.b	($FFFFFE30).w
000075AE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000075B4 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000075BA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000075C0                            
000075C0                            locret_6F8C:
000075C0 4E75                       		rts	
000075C2                            ; ===========================================================================
000075C2                            ; ---------------------------------------------------------------------------
000075C2                            ; Marble Zone dynamic screen resizing
000075C2                            ; ---------------------------------------------------------------------------
000075C2                            
000075C2                            Resize_MZ:				; XREF: Resize_Index
000075C2 7000                       		moveq	#0,d0
000075C4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075C8 D040                       		add.w	d0,d0
000075CA 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000075CE 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000075D2                            ; ===========================================================================
000075D2 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000075D4 0000                       		dc.w Resize_MZ2-Resize_MZx
000075D6 0000                       		dc.w Resize_MZ3-Resize_MZx
000075D8                            ; ===========================================================================
000075D8                            
000075D8                            Resize_MZ1:
000075D8 7000                       		moveq	#0,d0
000075DA 1038 F742                  		move.b	($FFFFF742).w,d0
000075DE 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000075E2 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000075E6                            ; ===========================================================================
000075E6 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000075E8 0000                       		dc.w loc_6FEA-off_6FB2
000075EA 0000                       		dc.w loc_702E-off_6FB2
000075EC 0000                       		dc.w loc_7050-off_6FB2
000075EE                            ; ===========================================================================
000075EE                            
000075EE                            loc_6FBA:
000075EE 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000075F4 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000075FA 6500                       		bcs.s	locret_6FE8
000075FC 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007602 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007608 6500                       		bcs.s	locret_6FE8
0000760A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007610 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007616 6500                       		bcs.s	locret_6FE8
00007618 5438 F742                  		addq.b	#2,($FFFFF742).w
0000761C                            
0000761C                            locret_6FE8:
0000761C 4E75                       		rts	
0000761E                            ; ===========================================================================
0000761E                            
0000761E                            loc_6FEA:
0000761E 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007624 6400                       		bcc.s	loc_6FF8
00007626 5538 F742                  		subq.b	#2,($FFFFF742).w
0000762A 4E75                       		rts	
0000762C                            ; ===========================================================================
0000762C                            
0000762C                            loc_6FF8:
0000762C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007632 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007638 6400                       		bcc.s	locret_702C
0000763A 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007640 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007646 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
0000764C 6400                       		bcc.s	locret_702C
0000764E 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007654 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000765A 6500                       		bcs.s	locret_702C
0000765C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007660                            
00007660                            locret_702C:
00007660 4E75                       		rts	
00007662                            ; ===========================================================================
00007662                            
00007662                            loc_702E:
00007662 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007668 6400                       		bcc.s	loc_703C
0000766A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000766E 4E75                       		rts	
00007670                            ; ===========================================================================
00007670                            
00007670                            loc_703C:
00007670 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007676 6500                       		bcs.s	locret_704E
00007678 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000767E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007682                            
00007682                            locret_704E:
00007682 4E75                       		rts	
00007684                            ; ===========================================================================
00007684                            
00007684                            loc_7050:
00007684 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000768A 6500                       		bcs.s	locret_7072
0000768C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007692 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007698 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000769E 6500                       		bcs.s	locret_7072
000076A0 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076A6                            
000076A6                            locret_7072:
000076A6 4E75                       		rts	
000076A8                            ; ===========================================================================
000076A8                            
000076A8                            Resize_MZ2:
000076A8 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000076AE 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000076B4 6500                       		bcs.s	locret_7088
000076B6 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000076BC                            
000076BC                            locret_7088:
000076BC 4E75                       		rts	
000076BE                            ; ===========================================================================
000076BE                            
000076BE                            Resize_MZ3:
000076BE 7000                       		moveq	#0,d0
000076C0 1038 F742                  		move.b	($FFFFF742).w,d0
000076C4 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000076C8 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000076CC                            ; ===========================================================================
000076CC 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000076CE 0000                       		dc.w Resize_MZ3end-off_7098
000076D0                            ; ===========================================================================
000076D0                            
000076D0                            Resize_MZ3boss:
000076D0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000076D6 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000076DC 6500                       		bcs.s	locret_70E8
000076DE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076E4 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000076EA 6500                       		bcs.s	locret_70E8
000076EC 6100 0000                  		bsr.w	SingleObjLoad
000076F0 6600                       		bne.s	loc_70D0
000076F2 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000076F6 337C 19F0 0008             		move.w	#$19F0,8(a1)
000076FC 337C 022C 000C             		move.w	#$22C,$C(a1)
00007702                            
00007702                            loc_70D0:
00007702 303C 008C                  		move.w	#$8C,d0
00007706 6100 9EB2                  		bsr.w	PlaySound	; play boss music
0000770A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007710 5438 F742                  		addq.b	#2,($FFFFF742).w
00007714 7011                       		moveq	#$11,d0
00007716 6000 A08C                  		bra.w	LoadPLC		; load boss patterns
0000771A                            ; ===========================================================================
0000771A                            
0000771A                            locret_70E8:
0000771A 4E75                       		rts	
0000771C                            ; ===========================================================================
0000771C                            
0000771C                            Resize_MZ3end:
0000771C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007722 4E75                       		rts	
00007724                            ; ===========================================================================
00007724                            ; ---------------------------------------------------------------------------
00007724                            ; Star Light Zone dynamic screen resizing
00007724                            ; ---------------------------------------------------------------------------
00007724                            
00007724                            Resize_SLZ:				; XREF: Resize_Index
00007724 7000                       		moveq	#0,d0
00007726 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000772A D040                       		add.w	d0,d0
0000772C 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007730 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007734                            ; ===========================================================================
00007734 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007736 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007738 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000773A                            ; ===========================================================================
0000773A                            
0000773A                            Resize_SLZ1:
0000773A 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00007740 4E75                       		rts	
00007742                            
00007742                            Resize_SLZ2:
00007742 4E75                       		rts	
00007744                            ; ===========================================================================
00007744                            
00007744                            Resize_SLZ3:
00007744 7000                       		moveq	#0,d0
00007746 1038 F742                  		move.b	($FFFFF742).w,d0
0000774A 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000774E 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007752                            ; ===========================================================================
00007752 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007754 0000                       		dc.w Resize_SLZ3boss-off_7118
00007756 0000                       		dc.w Resize_SLZ3end-off_7118
00007758                            ; ===========================================================================
00007758                            
00007758                            Resize_SLZ3main:
00007758 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000775E 6500                       		bcs.s	locret_7130
00007760 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007766 5438 F742                  		addq.b	#2,($FFFFF742).w
0000776A                            
0000776A                            locret_7130:
0000776A 4E75                       		rts	
0000776C                            ; ===========================================================================
0000776C                            
0000776C                            Resize_SLZ3boss:
0000776C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007772 6500                       		bcs.s	locret_715C
00007774 6100 0000                  		bsr.w	SingleObjLoad
00007778 6600                       		bne.s	loc_7144
0000777A 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000777E                            
0000777E                            loc_7144:
0000777E 303C 008C                  		move.w	#$8C,d0
00007782 6100 9E36                  		bsr.w	PlaySound	; play boss music
00007786 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000778C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007790 7011                       		moveq	#$11,d0
00007792 6000 A010                  		bra.w	LoadPLC		; load boss patterns
00007796                            ; ===========================================================================
00007796                            
00007796                            locret_715C:
00007796 4E75                       		rts	
00007798                            ; ===========================================================================
00007798                            
00007798                            Resize_SLZ3end:
00007798 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000779E 4E75                       		rts
000077A0 4E75                       		rts
000077A2                            ; ===========================================================================
000077A2                            ; ---------------------------------------------------------------------------
000077A2                            ; Spring Yard Zone dynamic screen resizing
000077A2                            ; ---------------------------------------------------------------------------
000077A2                            
000077A2                            Resize_SYZ:				; XREF: Resize_Index
000077A2 7000                       		moveq	#0,d0
000077A4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000077A8 D040                       		add.w	d0,d0
000077AA 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000077AE 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000077B2                            ; ===========================================================================
000077B2 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000077B4 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000077B6 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000077B8                            ; ===========================================================================
000077B8                            
000077B8                            Resize_SYZ1:
000077B8 4E75                       		rts	
000077BA                            ; ===========================================================================
000077BA                            
000077BA                            Resize_SYZ2:
000077BA 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077C0 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000077C6 6500                       		bcs.s	locret_71A2
000077C8 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000077CE 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000077D4 6500                       		bcs.s	locret_71A2
000077D6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077DC                            
000077DC                            locret_71A2:
000077DC 4E75                       		rts	
000077DE                            ; ===========================================================================
000077DE                            
000077DE                            Resize_SYZ3:
000077DE 7000                       		moveq	#0,d0
000077E0 1038 F742                  		move.b	($FFFFF742).w,d0
000077E4 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000077E8 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000077EC                            ; ===========================================================================
000077EC 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000077EE 0000                       		dc.w Resize_SYZ3boss-off_71B2
000077F0 0000                       		dc.w Resize_SYZ3end-off_71B2
000077F2                            ; ===========================================================================
000077F2                            
000077F2                            Resize_SYZ3main:
000077F2 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000077F8 6500                       		bcs.s	locret_71CE
000077FA 6100 0000                  		bsr.w	SingleObjLoad
000077FE 6600                       		bne.s	locret_71CE
00007800 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007804 5438 F742                  		addq.b	#2,($FFFFF742).w
00007808                            
00007808                            locret_71CE:
00007808 4E75                       		rts	
0000780A                            ; ===========================================================================
0000780A                            
0000780A                            Resize_SYZ3boss:
0000780A 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007810 6500                       		bcs.s	locret_7200
00007812 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007818 6100 0000                  		bsr.w	SingleObjLoad
0000781C 6600                       		bne.s	loc_71EC
0000781E 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007822 5438 F742                  		addq.b	#2,($FFFFF742).w
00007826                            
00007826                            loc_71EC:
00007826 303C 008C                  		move.w	#$8C,d0
0000782A 6100 9D8E                  		bsr.w	PlaySound	; play boss music
0000782E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007834 7011                       		moveq	#$11,d0
00007836 6000 9F6C                  		bra.w	LoadPLC		; load boss patterns
0000783A                            ; ===========================================================================
0000783A                            
0000783A                            locret_7200:
0000783A 4E75                       		rts	
0000783C                            ; ===========================================================================
0000783C                            
0000783C                            Resize_SYZ3end:
0000783C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007842 4E75                       		rts	
00007844                            ; ===========================================================================
00007844                            ; ---------------------------------------------------------------------------
00007844                            ; Scrap	Brain Zone dynamic screen resizing
00007844                            ; ---------------------------------------------------------------------------
00007844                            
00007844                            Resize_SBZ:				; XREF: Resize_Index
00007844 7000                       		moveq	#0,d0
00007846 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000784A D040                       		add.w	d0,d0
0000784C 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007850 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007854                            ; ===========================================================================
00007854 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007856 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007858 0000                       		dc.w Resize_FZ-Resize_SBZx
0000785A                            ; ===========================================================================
0000785A                            
0000785A                            Resize_SBZ1:
0000785A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007860 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007866 6500                       		bcs.s	locret_7242
00007868 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000786E 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007874 6500                       		bcs.s	locret_7242
00007876 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000787C                            
0000787C                            locret_7242:
0000787C 4E75                       		rts	
0000787E                            ; ===========================================================================
0000787E                            
0000787E                            Resize_SBZ2:
0000787E 7000                       		moveq	#0,d0
00007880 1038 F742                  		move.b	($FFFFF742).w,d0
00007884 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007888 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000788C                            ; ===========================================================================
0000788C 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000788E 0000                       		dc.w Resize_SBZ2boss-off_7252
00007890 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007892 0000                       		dc.w Resize_SBZ2end-off_7252
00007894                            ; ===========================================================================
00007894                            
00007894                            Resize_SBZ2main:
00007894 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000789A 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000078A0 6500                       		bcs.s	locret_727A
000078A2 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000078A8 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000078AE 6500                       		bcs.s	locret_727A
000078B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000078B4                            
000078B4                            locret_727A:
000078B4 4E75                       		rts	
000078B6                            ; ===========================================================================
000078B6                            
000078B6                            Resize_SBZ2boss:
000078B6 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000078BC 6500                       		bcs.s	locret_7298
000078BE 6100 0000                  		bsr.w	SingleObjLoad
000078C2 6600                       		bne.s	locret_7298
000078C4 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000078C8 5438 F742                  		addq.b	#2,($FFFFF742).w
000078CC 701E                       		moveq	#$1E,d0
000078CE 6000 9ED4                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000078D2                            ; ===========================================================================
000078D2                            
000078D2                            locret_7298:
000078D2 4E75                       		rts	
000078D4                            ; ===========================================================================
000078D4                            
000078D4                            Resize_SBZ2boss2:
000078D4 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000078DA 6500                       		bcs.s	loc_72B6
000078DC 6100 0000                  		bsr.w	SingleObjLoad
000078E0 6600                       		bne.s	loc_72B0
000078E2 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000078E6 5438 F742                  		addq.b	#2,($FFFFF742).w
000078EA                            
000078EA                            loc_72B0:
000078EA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078F0                            
000078F0                            loc_72B6:
000078F0 6000                       		bra.s	loc_72C2
000078F2                            ; ===========================================================================
000078F2                            
000078F2                            Resize_SBZ2end:
000078F2 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000078F8 6500                       		bcs.s	loc_72C2
000078FA 4E75                       		rts	
000078FC                            ; ===========================================================================
000078FC                            
000078FC                            loc_72C2:
000078FC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007902 4E75                       		rts	
00007904                            ; ===========================================================================
00007904                            
00007904                            Resize_FZ:
00007904 7000                       		moveq	#0,d0
00007906 1038 F742                  		move.b	($FFFFF742).w,d0
0000790A 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000790E 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007912                            ; ===========================================================================
00007912 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007916 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
0000791A 0000                       		dc.w Resize_FZend2-off_72D8
0000791C                            ; ===========================================================================
0000791C                            
0000791C                            Resize_FZmain:
0000791C 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007922 6500                       		bcs.s	loc_72F4
00007924 5438 F742                  		addq.b	#2,($FFFFF742).w
00007928 701F                       		moveq	#$1F,d0
0000792A 6100 9E78                  		bsr.w	LoadPLC		; load FZ boss patterns
0000792E                            
0000792E                            loc_72F4:
0000792E 60CC                       		bra.s	loc_72C2
00007930                            ; ===========================================================================
00007930                            
00007930                            Resize_FZboss:
00007930 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007936 6500                       		bcs.s	loc_7312
00007938 6100 0000                  		bsr.w	SingleObjLoad
0000793C 6600                       		bne.s	loc_7312
0000793E 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007942 5438 F742                  		addq.b	#2,($FFFFF742).w
00007946 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000794C                            
0000794C                            loc_7312:
0000794C 60AE                       		bra.s	loc_72C2
0000794E                            ; ===========================================================================
0000794E                            
0000794E                            Resize_FZend:
0000794E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007954 6500                       		bcs.s	loc_7320
00007956 5438 F742                  		addq.b	#2,($FFFFF742).w
0000795A                            
0000795A                            loc_7320:
0000795A 60A0                       		bra.s	loc_72C2
0000795C                            ; ===========================================================================
0000795C                            
0000795C                            locret_7322:
0000795C 4E75                       		rts	
0000795E                            ; ===========================================================================
0000795E                            
0000795E                            Resize_FZend2:
0000795E 609C                       		bra.s	loc_72C2
00007960                            ; ===========================================================================
00007960                            ; ---------------------------------------------------------------------------
00007960                            ; Ending sequence dynamic screen resizing (empty)
00007960                            ; ---------------------------------------------------------------------------
00007960                            
00007960                            Resize_Ending:				; XREF: Resize_Index
00007960 4E75                       		rts	
00007962                            ; ===========================================================================
00007962                            ; ---------------------------------------------------------------------------
00007962                            ; Object 11 - GHZ bridge
00007962                            ; ---------------------------------------------------------------------------
00007962                            
00007962                            Obj11:					; XREF: Obj_Index
00007962 7000                       		moveq	#0,d0
00007964 1028 0024                  		move.b	$24(a0),d0
00007968 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000796C 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007970                            ; ===========================================================================
00007970 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007974 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007978 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000797C                            ; ===========================================================================
0000797C                            
0000797C                            Obj11_Main:				; XREF: Obj11_Index
0000797C 5428 0024                  		addq.b	#2,$24(a0)
00007980 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007988 317C 438E 0002             		move.w	#$438E,2(a0)
0000798E 117C 0004 0001             		move.b	#4,1(a0)
00007994 117C 0003 0018             		move.b	#3,$18(a0)
0000799A 117C 0080 0019             		move.b	#$80,$19(a0)
000079A0 3428 000C                  		move.w	$C(a0),d2
000079A4 3628 0008                  		move.w	8(a0),d3
000079A8 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000079AA 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000079AE 7200                       		moveq	#0,d1
000079B0 1212                       		move.b	(a2),d1		; copy a2 to d1
000079B2 14FC 0000                  		move.b	#0,(a2)+
000079B6 3001                       		move.w	d1,d0
000079B8 E248                       		lsr.w	#1,d0
000079BA E948                       		lsl.w	#4,d0
000079BC 9640                       		sub.w	d0,d3
000079BE 5501                       		subq.b	#2,d1
000079C0 6500                       		bcs.s	Obj11_Action
000079C2                            
000079C2                            Obj11_MakeBdg:
000079C2 6100 0000                  		bsr.w	SingleObjLoad
000079C6 6600                       		bne.s	Obj11_Action
000079C8 5228 0028                  		addq.b	#1,$28(a0)
000079CC B668 0008                  		cmp.w	8(a0),d3
000079D0 6600                       		bne.s	loc_73B8
000079D2 0643 0010                  		addi.w	#$10,d3
000079D6 3142 000C                  		move.w	d2,$C(a0)
000079DA 3142 003C                  		move.w	d2,$3C(a0)
000079DE 3A08                       		move.w	a0,d5
000079E0 0445 D000                  		subi.w	#-$3000,d5
000079E4 EC4D                       		lsr.w	#6,d5
000079E6 0245 007F                  		andi.w	#$7F,d5
000079EA 14C5                       		move.b	d5,(a2)+
000079EC 5228 0028                  		addq.b	#1,$28(a0)
000079F0                            
000079F0                            loc_73B8:				; XREF: ROM:00007398j
000079F0 3A09                       		move.w	a1,d5
000079F2 0445 D000                  		subi.w	#-$3000,d5
000079F6 EC4D                       		lsr.w	#6,d5
000079F8 0245 007F                  		andi.w	#$7F,d5
000079FC 14C5                       		move.b	d5,(a2)+
000079FE 137C 000A 0024             		move.b	#$A,$24(a1)
00007A04 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007A06 3342 000C                  		move.w	d2,$C(a1)
00007A0A 3342 003C                  		move.w	d2,$3C(a1)
00007A0E 3343 0008                  		move.w	d3,8(a1)
00007A12 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007A1A 337C 438E 0002             		move.w	#$438E,2(a1)
00007A20 137C 0004 0001             		move.b	#4,1(a1)
00007A26 137C 0003 0018             		move.b	#3,$18(a1)
00007A2C 137C 0008 0019             		move.b	#8,$19(a1)
00007A32 0643 0010                  		addi.w	#$10,d3
00007A36 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007A3A                            
00007A3A                            Obj11_Action:				; XREF: Obj11_Index
00007A3A 6100                       		bsr.s	Obj11_Solid
00007A3C 4A28 003E                  		tst.b	$3E(a0)
00007A40 6700                       		beq.s	Obj11_Display
00007A42 5928 003E                  		subq.b	#4,$3E(a0)
00007A46 6100 0000                  		bsr.w	Obj11_Bend
00007A4A                            
00007A4A                            Obj11_Display:
00007A4A 6100 0000                  		bsr.w	DisplaySprite
00007A4E 6000 0000                  		bra.w	Obj11_ChkDel
00007A52                            
00007A52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A52                            
00007A52                            
00007A52                            Obj11_Solid:				; XREF: Obj11_Action
00007A52 7200                       		moveq	#0,d1
00007A54 1228 0028                  		move.b	$28(a0),d1
00007A58 E749                       		lsl.w	#3,d1
00007A5A 3401                       		move.w	d1,d2
00007A5C 5041                       		addq.w	#8,d1
00007A5E D442                       		add.w	d2,d2
00007A60 43F8 D000                  		lea	($FFFFD000).w,a1
00007A64 4A69 0012                  		tst.w	$12(a1)
00007A68 6B00 0000                  		bmi.w	locret_751E
00007A6C 3029 0008                  		move.w	8(a1),d0
00007A70 9068 0008                  		sub.w	8(a0),d0
00007A74 D041                       		add.w	d1,d0
00007A76 6B00 0000                  		bmi.w	locret_751E
00007A7A B042                       		cmp.w	d2,d0
00007A7C 6400 0000                  		bcc.w	locret_751E
00007A80 6000                       		bra.s	Platform2
00007A82                            ; End of function Obj11_Solid
00007A82                            
00007A82                            ; ---------------------------------------------------------------------------
00007A82                            ; Platform subroutine
00007A82                            ; ---------------------------------------------------------------------------
00007A82                            
00007A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A82                            
00007A82                            
00007A82                            PlatformObject:
00007A82 43F8 D000                  		lea	($FFFFD000).w,a1
00007A86 4A69 0012                  		tst.w	$12(a1)
00007A8A 6B00 0000                  		bmi.w	locret_751E
00007A8E 3029 0008                  		move.w	8(a1),d0
00007A92 9068 0008                  		sub.w	8(a0),d0
00007A96 D041                       		add.w	d1,d0
00007A98 6B00 0000                  		bmi.w	locret_751E
00007A9C D241                       		add.w	d1,d1
00007A9E B041                       		cmp.w	d1,d0
00007AA0 6400 0000                  		bcc.w	locret_751E
00007AA4                            
00007AA4                            Platform2:
00007AA4 3028 000C                  		move.w	$C(a0),d0
00007AA8 5140                       		subq.w	#8,d0
00007AAA                            
00007AAA                            Platform3:
00007AAA 3429 000C                  		move.w	$C(a1),d2
00007AAE 1229 0016                  		move.b	$16(a1),d1
00007AB2 4881                       		ext.w	d1
00007AB4 D242                       		add.w	d2,d1
00007AB6 5841                       		addq.w	#4,d1
00007AB8 9041                       		sub.w	d1,d0
00007ABA 6200 0000                  		bhi.w	locret_751E
00007ABE 0C40 FFF0                  		cmpi.w	#-$10,d0
00007AC2 6500 0000                  		bcs.w	locret_751E
00007AC6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007ACA 6B00 0000                  		bmi.w	locret_751E
00007ACE 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007AD4 6400 0000                  		bcc.w	locret_751E
00007AD8 D440                       		add.w	d0,d2
00007ADA 5642                       		addq.w	#3,d2
00007ADC 3342 000C                  		move.w	d2,$C(a1)
00007AE0 5428 0024                  		addq.b	#2,$24(a0)
00007AE4                            
00007AE4                            loc_74AE:
00007AE4 0829 0003 0022             		btst	#3,$22(a1)
00007AEA 6700                       		beq.s	loc_74DC
00007AEC 7000                       		moveq	#0,d0
00007AEE 1029 003D                  		move.b	$3D(a1),d0
00007AF2 ED48                       		lsl.w	#6,d0
00007AF4 0680 00FF D000             		addi.l	#$FFD000,d0
00007AFA 2440                       		movea.l	d0,a2
00007AFC 08AA 0003 0022             		bclr	#3,$22(a2)
00007B02 422A 0025                  		clr.b	$25(a2)
00007B06 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007B0C 6600                       		bne.s	loc_74DC
00007B0E 552A 0024                  		subq.b	#2,$24(a2)
00007B12                            
00007B12                            loc_74DC:
00007B12 3008                       		move.w	a0,d0
00007B14 0440 D000                  		subi.w	#-$3000,d0
00007B18 EC48                       		lsr.w	#6,d0
00007B1A 0240 007F                  		andi.w	#$7F,d0
00007B1E 1340 003D                  		move.b	d0,$3D(a1)
00007B22 137C 0000 0026             		move.b	#0,$26(a1)
00007B28 337C 0000 0012             		move.w	#0,$12(a1)
00007B2E 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007B34 0829 0001 0022             		btst	#1,$22(a1)
00007B3A 6700                       		beq.s	loc_7512
00007B3C 2F08                       		move.l	a0,-(sp)
00007B3E 2049                       		movea.l	a1,a0
00007B40 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007B46 205F                       		movea.l	(sp)+,a0
00007B48                            
00007B48                            loc_7512:
00007B48 08E9 0003 0022             		bset	#3,$22(a1)
00007B4E 08E8 0003 0022             		bset	#3,$22(a0)
00007B54                            
00007B54                            locret_751E:
00007B54 4E75                       		rts	
00007B56                            ; End of function PlatformObject
00007B56                            
00007B56                            ; ---------------------------------------------------------------------------
00007B56                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007B56                            ; ---------------------------------------------------------------------------
00007B56                            
00007B56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B56                            
00007B56                            
00007B56                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007B56 43F8 D000                  		lea	($FFFFD000).w,a1
00007B5A 4A69 0012                  		tst.w	$12(a1)
00007B5E 6B00 FFF4                  		bmi.w	locret_751E
00007B62 3029 0008                  		move.w	8(a1),d0
00007B66 9068 0008                  		sub.w	8(a0),d0
00007B6A D041                       		add.w	d1,d0
00007B6C 6BE6                       		bmi.s	locret_751E
00007B6E D241                       		add.w	d1,d1
00007B70 B041                       		cmp.w	d1,d0
00007B72 64E0                       		bcc.s	locret_751E
00007B74 0828 0000 0001             		btst	#0,1(a0)
00007B7A 6700                       		beq.s	loc_754A
00007B7C 4640                       		not.w	d0
00007B7E D041                       		add.w	d1,d0
00007B80                            
00007B80                            loc_754A:
00007B80 E248                       		lsr.w	#1,d0
00007B82 7600                       		moveq	#0,d3
00007B84 1632 0000                  		move.b	(a2,d0.w),d3
00007B88 3028 000C                  		move.w	$C(a0),d0
00007B8C 9043                       		sub.w	d3,d0
00007B8E 6000 FF1A                  		bra.w	Platform3
00007B92                            ; End of function SlopeObject
00007B92                            
00007B92                            
00007B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B92                            
00007B92                            
00007B92                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007B92 43F8 D000                  		lea	($FFFFD000).w,a1
00007B96 4A69 0012                  		tst.w	$12(a1)
00007B9A 6B00 FFB8                  		bmi.w	locret_751E
00007B9E 3029 0008                  		move.w	8(a1),d0
00007BA2 9068 0008                  		sub.w	8(a0),d0
00007BA6 D041                       		add.w	d1,d0
00007BA8 6B00 FFAA                  		bmi.w	locret_751E
00007BAC D241                       		add.w	d1,d1
00007BAE B041                       		cmp.w	d1,d0
00007BB0 6400 FFA2                  		bcc.w	locret_751E
00007BB4 3028 000C                  		move.w	$C(a0),d0
00007BB8 9043                       		sub.w	d3,d0
00007BBA 6000 FEEE                  		bra.w	Platform3
00007BBE                            ; End of function Obj15_Solid
00007BBE                            
00007BBE                            ; ===========================================================================
00007BBE                            
00007BBE                            Obj11_Action2:				; XREF: Obj11_Index
00007BBE 6100                       		bsr.s	Obj11_WalkOff
00007BC0 6100 0000                  		bsr.w	DisplaySprite
00007BC4 6000 0000                  		bra.w	Obj11_ChkDel
00007BC8                            
00007BC8                            ; ---------------------------------------------------------------------------
00007BC8                            ; Subroutine allowing Sonic to walk off a bridge
00007BC8                            ; ---------------------------------------------------------------------------
00007BC8                            
00007BC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BC8                            
00007BC8                            
00007BC8                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007BC8 7200                       		moveq	#0,d1
00007BCA 1228 0028                  		move.b	$28(a0),d1
00007BCE E749                       		lsl.w	#3,d1
00007BD0 3401                       		move.w	d1,d2
00007BD2 5041                       		addq.w	#8,d1
00007BD4 6100                       		bsr.s	ExitPlatform2
00007BD6 6400                       		bcc.s	locret_75BE
00007BD8 E848                       		lsr.w	#4,d0
00007BDA 1140 003F                  		move.b	d0,$3F(a0)
00007BDE 1028 003E                  		move.b	$3E(a0),d0
00007BE2 0C00 0040                  		cmpi.b	#$40,d0
00007BE6 6700                       		beq.s	loc_75B6
00007BE8 5828 003E                  		addq.b	#4,$3E(a0)
00007BEC                            
00007BEC                            loc_75B6:
00007BEC 6100 0000                  		bsr.w	Obj11_Bend
00007BF0 6100 0000                  		bsr.w	Obj11_MoveSonic
00007BF4                            
00007BF4                            locret_75BE:
00007BF4 4E75                       		rts	
00007BF6                            ; End of function Obj11_WalkOff
00007BF6                            
00007BF6                            ; ---------------------------------------------------------------------------
00007BF6                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007BF6                            ; ---------------------------------------------------------------------------
00007BF6                            
00007BF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BF6                            
00007BF6                            
00007BF6                            ExitPlatform:
00007BF6 3401                       		move.w	d1,d2
00007BF8                            
00007BF8                            ExitPlatform2:
00007BF8 D442                       		add.w	d2,d2
00007BFA 43F8 D000                  		lea	($FFFFD000).w,a1
00007BFE 0829 0001 0022             		btst	#1,$22(a1)
00007C04 6600                       		bne.s	loc_75E0
00007C06 3029 0008                  		move.w	8(a1),d0
00007C0A 9068 0008                  		sub.w	8(a0),d0
00007C0E D041                       		add.w	d1,d0
00007C10 6B00                       		bmi.s	loc_75E0
00007C12 B042                       		cmp.w	d2,d0
00007C14 6500                       		bcs.s	locret_75F2
00007C16                            
00007C16                            loc_75E0:
00007C16 08A9 0003 0022             		bclr	#3,$22(a1)
00007C1C 117C 0002 0024             		move.b	#2,$24(a0)
00007C22 08A8 0003 0022             		bclr	#3,$22(a0)
00007C28                            
00007C28                            locret_75F2:
00007C28 4E75                       		rts	
00007C2A                            ; End of function ExitPlatform
00007C2A                            
00007C2A                            
00007C2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C2A                            
00007C2A                            
00007C2A                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007C2A 7000                       		moveq	#0,d0
00007C2C 1028 003F                  		move.b	$3F(a0),d0
00007C30 1030 0029                  		move.b	$29(a0,d0.w),d0
00007C34 ED48                       		lsl.w	#6,d0
00007C36 0680 00FF D000             		addi.l	#$FFD000,d0
00007C3C 2440                       		movea.l	d0,a2
00007C3E 43F8 D000                  		lea	($FFFFD000).w,a1
00007C42 302A 000C                  		move.w	$C(a2),d0
00007C46 5140                       		subq.w	#8,d0
00007C48 7200                       		moveq	#0,d1
00007C4A 1229 0016                  		move.b	$16(a1),d1
00007C4E 9041                       		sub.w	d1,d0
00007C50 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007C54 4E75                       		rts	
00007C56                            ; End of function Obj11_MoveSonic
00007C56                            
00007C56                            
00007C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C56                            
00007C56                            
00007C56                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007C56 1028 003E                  		move.b	$3E(a0),d0
00007C5A 6100 B090                  		bsr.w	CalcSine
00007C5E 3800                       		move.w	d0,d4
00007C60 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007C66 7000                       		moveq	#0,d0
00007C68 1028 0028                  		move.b	$28(a0),d0
00007C6C E948                       		lsl.w	#4,d0
00007C6E 7600                       		moveq	#0,d3
00007C70 1628 003F                  		move.b	$3F(a0),d3
00007C74 3403                       		move.w	d3,d2
00007C76 D640                       		add.w	d0,d3
00007C78 7A00                       		moveq	#0,d5
00007C7A 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007C80 1A35 3000                  		move.b	(a5,d3.w),d5
00007C84 0243 000F                  		andi.w	#$F,d3
00007C88 E94B                       		lsl.w	#4,d3
00007C8A 47F4 3000                  		lea	(a4,d3.w),a3
00007C8E 45E8 0029                  		lea	$29(a0),a2
00007C92                            
00007C92                            loc_765C:
00007C92 7000                       		moveq	#0,d0
00007C94 101A                       		move.b	(a2)+,d0
00007C96 ED48                       		lsl.w	#6,d0
00007C98 0680 00FF D000             		addi.l	#$FFD000,d0
00007C9E 2240                       		movea.l	d0,a1
00007CA0 7000                       		moveq	#0,d0
00007CA2 101B                       		move.b	(a3)+,d0
00007CA4 5240                       		addq.w	#1,d0
00007CA6 C0C5                       		mulu.w	d5,d0
00007CA8 C0C4                       		mulu.w	d4,d0
00007CAA 4840                       		swap	d0
00007CAC D069 003C                  		add.w	$3C(a1),d0
00007CB0 3340 000C                  		move.w	d0,$C(a1)
00007CB4 51CA FFDC                  		dbf	d2,loc_765C
00007CB8 7000                       		moveq	#0,d0
00007CBA 1028 0028                  		move.b	$28(a0),d0
00007CBE 7600                       		moveq	#0,d3
00007CC0 1628 003F                  		move.b	$3F(a0),d3
00007CC4 5203                       		addq.b	#1,d3
00007CC6 9600                       		sub.b	d0,d3
00007CC8 4403                       		neg.b	d3
00007CCA 6B00                       		bmi.s	locret_76CA
00007CCC 3403                       		move.w	d3,d2
00007CCE E94B                       		lsl.w	#4,d3
00007CD0 47F4 3000                  		lea	(a4,d3.w),a3
00007CD4 D6C2                       		adda.w	d2,a3
00007CD6 5342                       		subq.w	#1,d2
00007CD8 6500                       		bcs.s	locret_76CA
00007CDA                            
00007CDA                            loc_76A4:
00007CDA 7000                       		moveq	#0,d0
00007CDC 101A                       		move.b	(a2)+,d0
00007CDE ED48                       		lsl.w	#6,d0
00007CE0 0680 00FF D000             		addi.l	#$FFD000,d0
00007CE6 2240                       		movea.l	d0,a1
00007CE8 7000                       		moveq	#0,d0
00007CEA 1023                       		move.b	-(a3),d0
00007CEC 5240                       		addq.w	#1,d0
00007CEE C0C5                       		mulu.w	d5,d0
00007CF0 C0C4                       		mulu.w	d4,d0
00007CF2 4840                       		swap	d0
00007CF4 D069 003C                  		add.w	$3C(a1),d0
00007CF8 3340 000C                  		move.w	d0,$C(a1)
00007CFC 51CA FFDC                  		dbf	d2,loc_76A4
00007D00                            
00007D00                            locret_76CA:
00007D00 4E75                       		rts	
00007D02                            ; End of function Obj11_Bend
00007D02                            
00007D02                            ; ===========================================================================
00007D02                            ; ---------------------------------------------------------------------------
00007D02                            ; GHZ bridge-bending data
00007D02                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007D02                            ; ---------------------------------------------------------------------------
00007D02                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007E12                            		even
00007E12                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007F12                            		even
00007F12                            
00007F12                            ; ===========================================================================
00007F12                            
00007F12                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007F12 3028 0008                  		move.w	8(a0),d0
00007F16 0240 FF80                  		andi.w	#$FF80,d0
00007F1A 3238 F700                  		move.w	($FFFFF700).w,d1
00007F1E 0441 0080                  		subi.w	#$80,d1
00007F22 0241 FF80                  		andi.w	#$FF80,d1
00007F26 9041                       		sub.w	d1,d0
00007F28 0C40 0280                  		cmpi.w	#$280,d0
00007F2C 6200 0000                  		bhi.w	Obj11_DelAll
00007F30 4E75                       		rts	
00007F32                            ; ===========================================================================
00007F32                            
00007F32                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007F32 7400                       		moveq	#0,d2
00007F34 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007F38 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007F3A 5302                       		subq.b	#1,d2		; subtract 1
00007F3C 6500                       		bcs.s	Obj11_Delete
00007F3E                            
00007F3E                            Obj11_DelLoop:
00007F3E 7000                       		moveq	#0,d0
00007F40 101A                       		move.b	(a2)+,d0
00007F42 ED48                       		lsl.w	#6,d0
00007F44 0680 00FF D000             		addi.l	#$FFD000,d0
00007F4A 2240                       		movea.l	d0,a1
00007F4C B048                       		cmp.w	a0,d0
00007F4E 6700                       		beq.s	loc_791E
00007F50 6100 0000                  		bsr.w	DeleteObject2
00007F54                            
00007F54                            loc_791E:
00007F54 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007F58                            
00007F58                            Obj11_Delete:
00007F58 6100 0000                  		bsr.w	DeleteObject
00007F5C 4E75                       		rts	
00007F5E                            ; ===========================================================================
00007F5E                            
00007F5E                            Obj11_Delete2:				; XREF: Obj11_Index
00007F5E 6100 0000                  		bsr.w	DeleteObject
00007F62 4E75                       		rts	
00007F64                            ; ===========================================================================
00007F64                            
00007F64                            Obj11_Display2:				; XREF: Obj11_Index
00007F64 6100 0000                  		bsr.w	DisplaySprite
00007F68 4E75                       		rts	
00007F6A                            ; ===========================================================================
00007F6A                            ; ---------------------------------------------------------------------------
00007F6A                            ; Sprite mappings - GHZ	bridge
00007F6A                            ; ---------------------------------------------------------------------------
00007F6A                            Map_obj11:
00007F6A                            	include "_maps\obj11.asm"
00007F6A                            ; ---------------------------------------------------------------------------
00007F6A                            ; Sprite mappings - GHZ	bridge
00007F6A                            ; ---------------------------------------------------------------------------
00007F6A 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007F6E 0000                       		dc.w byte_794B-Map_obj11
00007F70 01                         byte_793A:	dc.b 1
00007F71 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007F76 02                         byte_7940:	dc.b 2
00007F77 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007F7C 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007F81 01                         byte_794B:	dc.b 1
00007F82 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007F88 00                         		even
00007F88 00                         		even
00007F88                            
00007F88                            ; ===========================================================================
00007F88                            ; ---------------------------------------------------------------------------
00007F88                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007F88                            ;	    - spiked ball on a chain (SBZ)
00007F88                            ; ---------------------------------------------------------------------------
00007F88                            
00007F88                            Obj15:					; XREF: Obj_Index
00007F88 7000                       		moveq	#0,d0
00007F8A 1028 0024                  		move.b	$24(a0),d0
00007F8E 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007F92 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007F96                            ; ===========================================================================
00007F96 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007F9A 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007F9E 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007FA2 0000                       		dc.w Obj15_Action-Obj15_Index
00007FA4                            ; ===========================================================================
00007FA4                            
00007FA4                            Obj15_Main:				; XREF: Obj15_Index
00007FA4 5428 0024                  		addq.b	#2,$24(a0)
00007FA8 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007FB0 317C 4380 0002             		move.w	#$4380,2(a0)
00007FB6 117C 0004 0001             		move.b	#4,1(a0)
00007FBC 117C 0003 0018             		move.b	#3,$18(a0)
00007FC2 117C 0018 0019             		move.b	#$18,$19(a0)
00007FC8 117C 0008 0016             		move.b	#8,$16(a0)
00007FCE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007FD4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007FDA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007FE0 6600                       		bne.s	Obj15_NotSLZ
00007FE2 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007FEA 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007FF0 117C 0020 0019             		move.b	#$20,$19(a0)
00007FF6 117C 0010 0016             		move.b	#$10,$16(a0)
00007FFC 117C 0099 0020             		move.b	#$99,$20(a0)
00008002                            
00008002                            Obj15_NotSLZ:
00008002 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008008 6600                       		bne.s	Obj15_SetLength
0000800A 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008012 317C 0391 0002             		move.w	#$391,2(a0)
00008018 117C 0018 0019             		move.b	#$18,$19(a0)
0000801E 117C 0018 0016             		move.b	#$18,$16(a0)
00008024 117C 0086 0020             		move.b	#$86,$20(a0)
0000802A 117C 000C 0024             		move.b	#$C,$24(a0)
00008030                            
00008030                            Obj15_SetLength:
00008030 1810                       		move.b	0(a0),d4
00008032 7200                       		moveq	#0,d1
00008034 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008038 1212                       		move.b	(a2),d1		; move a2 to d1
0000803A 3F01                       		move.w	d1,-(sp)
0000803C 0241 000F                  		andi.w	#$F,d1
00008040 14FC 0000                  		move.b	#0,(a2)+
00008044 3601                       		move.w	d1,d3
00008046 E94B                       		lsl.w	#4,d3
00008048 5003                       		addq.b	#8,d3
0000804A 1143 003C                  		move.b	d3,$3C(a0)
0000804E 5103                       		subq.b	#8,d3
00008050 4A28 001A                  		tst.b	$1A(a0)
00008054 6700                       		beq.s	Obj15_MakeChain
00008056 5003                       		addq.b	#8,d3
00008058 5341                       		subq.w	#1,d1
0000805A                            
0000805A                            Obj15_MakeChain:
0000805A 6100 0000                  		bsr.w	SingleObjLoad
0000805E 6600                       		bne.s	loc_7A92
00008060 5228 0028                  		addq.b	#1,$28(a0)
00008064 3A09                       		move.w	a1,d5
00008066 0445 D000                  		subi.w	#-$3000,d5
0000806A EC4D                       		lsr.w	#6,d5
0000806C 0245 007F                  		andi.w	#$7F,d5
00008070 14C5                       		move.b	d5,(a2)+
00008072 137C 000A 0024             		move.b	#$A,$24(a1)
00008078 1284                       		move.b	d4,0(a1)	; load swinging	object
0000807A 2368 0004 0004             		move.l	4(a0),4(a1)
00008080 3368 0002 0002             		move.w	2(a0),2(a1)
00008086 08A9 0006 0002             		bclr	#6,2(a1)
0000808C 137C 0004 0001             		move.b	#4,1(a1)
00008092 137C 0004 0018             		move.b	#4,$18(a1)
00008098 137C 0008 0019             		move.b	#8,$19(a1)
0000809E 137C 0001 001A             		move.b	#1,$1A(a1)
000080A4 1343 003C                  		move.b	d3,$3C(a1)
000080A8 0403 0010                  		subi.b	#$10,d3
000080AC 6400                       		bcc.s	loc_7A8E
000080AE 137C 0002 001A             		move.b	#2,$1A(a1)
000080B4 137C 0003 0018             		move.b	#3,$18(a1)
000080BA 08E9 0006 0002             		bset	#6,2(a1)
000080C0                            
000080C0                            loc_7A8E:
000080C0 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
000080C4                            
000080C4                            loc_7A92:
000080C4 3A08                       		move.w	a0,d5
000080C6 0445 D000                  		subi.w	#-$3000,d5
000080CA EC4D                       		lsr.w	#6,d5
000080CC 0245 007F                  		andi.w	#$7F,d5
000080D0 14C5                       		move.b	d5,(a2)+
000080D2 317C 4080 0026             		move.w	#$4080,$26(a0)
000080D8 317C FE00 003E             		move.w	#-$200,$3E(a0)
000080DE 321F                       		move.w	(sp)+,d1
000080E0 0801 0004                  		btst	#4,d1		; is object type $8X ?
000080E4 6700                       		beq.s	loc_7AD4	; if not, branch
000080E6 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000080EE 317C 43AA 0002             		move.w	#$43AA,2(a0)
000080F4 117C 0001 001A             		move.b	#1,$1A(a0)
000080FA 117C 0002 0018             		move.b	#2,$18(a0)
00008100 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008106                            
00008106                            loc_7AD4:
00008106 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000810C 6700                       		beq.s	Obj15_Action	; if yes, branch
0000810E                            
0000810E                            Obj15_SetSolid:				; XREF: Obj15_Index
0000810E 7200                       		moveq	#0,d1
00008110 1228 0019                  		move.b	$19(a0),d1
00008114 7600                       		moveq	#0,d3
00008116 1628 0016                  		move.b	$16(a0),d3
0000811A 6100 FA76                  		bsr.w	Obj15_Solid
0000811E                            
0000811E                            Obj15_Action:				; XREF: Obj15_Index
0000811E 6100 0000                  		bsr.w	Obj15_Move
00008122 6100 0000                  		bsr.w	DisplaySprite
00008126 6000 0000                  		bra.w	Obj15_ChkDel
0000812A                            ; ===========================================================================
0000812A                            
0000812A                            Obj15_Action2:				; XREF: Obj15_Index
0000812A 7200                       		moveq	#0,d1
0000812C 1228 0019                  		move.b	$19(a0),d1
00008130 6100 FAC4                  		bsr.w	ExitPlatform
00008134 3F28 0008                  		move.w	8(a0),-(sp)
00008138 6100 0000                  		bsr.w	Obj15_Move
0000813C 341F                       		move.w	(sp)+,d2
0000813E 7600                       		moveq	#0,d3
00008140 1628 0016                  		move.b	$16(a0),d3
00008144 5203                       		addq.b	#1,d3
00008146 6100 0000                  		bsr.w	MvSonicOnPtfm
0000814A 6100 0000                  		bsr.w	DisplaySprite
0000814E 6000 0000                  		bra.w	Obj15_ChkDel
00008152                            
00008152 4E75                       		rts
00008154                            
00008154                            ; ---------------------------------------------------------------------------
00008154                            ; Subroutine to	change Sonic's position with a platform
00008154                            ; ---------------------------------------------------------------------------
00008154                            
00008154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008154                            
00008154                            
00008154                            MvSonicOnPtfm:
00008154 43F8 D000                  		lea	($FFFFD000).w,a1
00008158 3028 000C                  		move.w	$C(a0),d0
0000815C 9043                       		sub.w	d3,d0
0000815E 6000                       		bra.s	MvSonic2
00008160                            ; End of function MvSonicOnPtfm
00008160                            
00008160                            ; ---------------------------------------------------------------------------
00008160                            ; Subroutine to	change Sonic's position with a platform
00008160                            ; ---------------------------------------------------------------------------
00008160                            
00008160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008160                            
00008160                            
00008160                            MvSonicOnPtfm2:
00008160 43F8 D000                  		lea	($FFFFD000).w,a1
00008164 3028 000C                  		move.w	$C(a0),d0
00008168 0440 0009                  		subi.w	#9,d0
0000816C                            
0000816C                            MvSonic2:
0000816C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008170 6B00                       		bmi.s	locret_7B62
00008172 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008178 6400                       		bcc.s	locret_7B62
0000817A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000817E 6600                       		bne.s	locret_7B62
00008180 7200                       		moveq	#0,d1
00008182 1229 0016                  		move.b	$16(a1),d1
00008186 9041                       		sub.w	d1,d0
00008188 3340 000C                  		move.w	d0,$C(a1)
0000818C 9468 0008                  		sub.w	8(a0),d2
00008190 9569 0008                  		sub.w	d2,8(a1)
00008194                            
00008194                            locret_7B62:
00008194 4E75                       		rts	
00008196                            ; End of function MvSonicOnPtfm2
00008196                            
00008196                            
00008196                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008196                            
00008196                            
00008196                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008196 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000819A 323C 0080                  		move.w	#$80,d1
0000819E 0828 0000 0022             		btst	#0,$22(a0)
000081A4 6700                       		beq.s	loc_7B78
000081A6 4440                       		neg.w	d0
000081A8 D041                       		add.w	d1,d0
000081AA                            
000081AA                            loc_7B78:
000081AA 6000                       		bra.s	Obj15_Move2
000081AC                            ; End of function Obj15_Move
000081AC                            
000081AC                            
000081AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081AC                            
000081AC                            
000081AC                            Obj48_Move:				; XREF: Obj48_Display2
000081AC 4A28 003D                  		tst.b	$3D(a0)
000081B0 6600                       		bne.s	loc_7B9C
000081B2 3028 003E                  		move.w	$3E(a0),d0
000081B6 5040                       		addq.w	#8,d0
000081B8 3140 003E                  		move.w	d0,$3E(a0)
000081BC D168 0026                  		add.w	d0,$26(a0)
000081C0 0C40 0200                  		cmpi.w	#$200,d0
000081C4 6600                       		bne.s	loc_7BB6
000081C6 117C 0001 003D             		move.b	#1,$3D(a0)
000081CC 6000                       		bra.s	loc_7BB6
000081CE                            ; ===========================================================================
000081CE                            
000081CE                            loc_7B9C:
000081CE 3028 003E                  		move.w	$3E(a0),d0
000081D2 5140                       		subq.w	#8,d0
000081D4 3140 003E                  		move.w	d0,$3E(a0)
000081D8 D168 0026                  		add.w	d0,$26(a0)
000081DC 0C40 FE00                  		cmpi.w	#-$200,d0
000081E0 6600                       		bne.s	loc_7BB6
000081E2 117C 0000 003D             		move.b	#0,$3D(a0)
000081E8                            
000081E8                            loc_7BB6:
000081E8 1028 0026                  		move.b	$26(a0),d0
000081EC                            ; End of function Obj48_Move
000081EC                            
000081EC                            
000081EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081EC                            
000081EC                            
000081EC                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000081EC 6100 AAFE                  		bsr.w	CalcSine
000081F0 3428 0038                  		move.w	$38(a0),d2
000081F4 3628 003A                  		move.w	$3A(a0),d3
000081F8 45E8 0028                  		lea	$28(a0),a2
000081FC 7C00                       		moveq	#0,d6
000081FE 1C1A                       		move.b	(a2)+,d6
00008200                            
00008200                            loc_7BCE:
00008200 7800                       		moveq	#0,d4
00008202 181A                       		move.b	(a2)+,d4
00008204 ED4C                       		lsl.w	#6,d4
00008206 0684 00FF D000             		addi.l	#$FFD000,d4
0000820C 2244                       		movea.l	d4,a1
0000820E 7800                       		moveq	#0,d4
00008210 1829 003C                  		move.b	$3C(a1),d4
00008214 2A04                       		move.l	d4,d5
00008216 C9C0                       		muls.w	d0,d4
00008218 E084                       		asr.l	#8,d4
0000821A CBC1                       		muls.w	d1,d5
0000821C E085                       		asr.l	#8,d5
0000821E D842                       		add.w	d2,d4
00008220 DA43                       		add.w	d3,d5
00008222 3344 000C                  		move.w	d4,$C(a1)
00008226 3345 0008                  		move.w	d5,8(a1)
0000822A 51CE FFD4                  		dbf	d6,loc_7BCE
0000822E 4E75                       		rts	
00008230                            ; End of function Obj15_Move2
00008230                            
00008230                            ; ===========================================================================
00008230                            
00008230                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008230 3028 003A                  		move.w	$3A(a0),d0
00008234 0240 FF80                  		andi.w	#$FF80,d0
00008238 3238 F700                  		move.w	($FFFFF700).w,d1
0000823C 0441 0080                  		subi.w	#$80,d1
00008240 0241 FF80                  		andi.w	#$FF80,d1
00008244 9041                       		sub.w	d1,d0
00008246 0C40 0280                  		cmpi.w	#$280,d0
0000824A 6200 0000                  		bhi.w	Obj15_DelAll
0000824E 4E75                       		rts	
00008250                            ; ===========================================================================
00008250                            
00008250                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008250 7400                       		moveq	#0,d2
00008252 45E8 0028                  		lea	$28(a0),a2
00008256 141A                       		move.b	(a2)+,d2
00008258                            
00008258                            Obj15_DelLoop:
00008258 7000                       		moveq	#0,d0
0000825A 101A                       		move.b	(a2)+,d0
0000825C ED48                       		lsl.w	#6,d0
0000825E 0680 00FF D000             		addi.l	#$FFD000,d0
00008264 2240                       		movea.l	d0,a1
00008266 6100 0000                  		bsr.w	DeleteObject2
0000826A 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000826E 4E75                       		rts	
00008270                            ; ===========================================================================
00008270                            
00008270                            Obj15_Delete:				; XREF: Obj15_Index
00008270 6100 0000                  		bsr.w	DeleteObject
00008274 4E75                       		rts	
00008276                            ; ===========================================================================
00008276                            
00008276                            Obj15_Display:				; XREF: Obj15_Index
00008276 6000 0000                  		bra.w	DisplaySprite
0000827A                            ; ===========================================================================
0000827A                            ; ---------------------------------------------------------------------------
0000827A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000827A                            ; ---------------------------------------------------------------------------
0000827A                            Map_obj15:
0000827A                            	include "_maps\obj15ghz.asm"
0000827A                            ; ---------------------------------------------------------------------------
0000827A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000827A                            ; ---------------------------------------------------------------------------
0000827A 0000                       		dc.w byte_7C4E-Map_obj15
0000827C 0000                       		dc.w byte_7C59-Map_obj15
0000827E 0000                       		dc.w byte_7C5F-Map_obj15
00008280 02                         byte_7C4E:	dc.b 2
00008281 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008286 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000828B 01                         byte_7C59:	dc.b 1
0000828C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008291 01                         byte_7C5F:	dc.b 1
00008292 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008298 00                         		even
00008298 00                         		even
00008298                            
00008298                            ; ---------------------------------------------------------------------------
00008298                            ; Sprite mappings - SLZ	swinging platforms
00008298                            ; ---------------------------------------------------------------------------
00008298                            Map_obj15a:
00008298                            	include "_maps\obj15slz.asm"
00008298                            ; ---------------------------------------------------------------------------
00008298                            ; Sprite mappings - SLZ	swinging platforms
00008298                            ; ---------------------------------------------------------------------------
00008298 0000                       		dc.w byte_7C6C-Map_obj15a
0000829A 0000                       		dc.w byte_7C95-Map_obj15a
0000829C 0000                       		dc.w byte_7C9B-Map_obj15a
0000829E 08                         byte_7C6C:	dc.b 8
0000829F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000082A4 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000082A9 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000082AE F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000082B3 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000082B8 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000082BD 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000082C2 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000082C7 01                         byte_7C95:	dc.b 1
000082C8 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000082CD 01                         byte_7C9B:	dc.b 1
000082CE F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000082D4 00                         		even
000082D4 00                         		even
000082D4                            
000082D4                            ; ===========================================================================
000082D4                            ; ---------------------------------------------------------------------------
000082D4                            ; Object 17 - helix of spikes on a pole	(GHZ)
000082D4                            ; ---------------------------------------------------------------------------
000082D4                            
000082D4                            Obj17:					; XREF: Obj_Index
000082D4 7000                       		moveq	#0,d0
000082D6 1028 0024                  		move.b	$24(a0),d0
000082DA 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000082DE 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000082E2                            ; ===========================================================================
000082E2 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000082E4 0000                       		dc.w Obj17_Action-Obj17_Index
000082E6 0000                       		dc.w Obj17_Action-Obj17_Index
000082E8 0000                       		dc.w Obj17_Delete-Obj17_Index
000082EA 0000                       		dc.w Obj17_Display-Obj17_Index
000082EC                            ; ===========================================================================
000082EC                            
000082EC                            Obj17_Main:				; XREF: Obj17_Index
000082EC 5428 0024                  		addq.b	#2,$24(a0)
000082F0 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000082F8 317C 4398 0002             		move.w	#$4398,2(a0)
000082FE 117C 0007 0022             		move.b	#7,$22(a0)
00008304 117C 0004 0001             		move.b	#4,1(a0)
0000830A 117C 0003 0018             		move.b	#3,$18(a0)
00008310 117C 0008 0019             		move.b	#8,$19(a0)
00008316 3428 000C                  		move.w	$C(a0),d2
0000831A 3628 0008                  		move.w	8(a0),d3
0000831E 1810                       		move.b	0(a0),d4
00008320 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008324 7200                       		moveq	#0,d1
00008326 1212                       		move.b	(a2),d1		; move a2 to d1
00008328 14FC 0000                  		move.b	#0,(a2)+
0000832C 3001                       		move.w	d1,d0
0000832E E248                       		lsr.w	#1,d0
00008330 E948                       		lsl.w	#4,d0
00008332 9640                       		sub.w	d0,d3
00008334 5501                       		subq.b	#2,d1
00008336 6500                       		bcs.s	Obj17_Action
00008338 7C00                       		moveq	#0,d6
0000833A                            
0000833A                            Obj17_MakeHelix:
0000833A 6100 0000                  		bsr.w	SingleObjLoad
0000833E 6600                       		bne.s	Obj17_Action
00008340 5228 0028                  		addq.b	#1,$28(a0)
00008344 3A09                       		move.w	a1,d5
00008346 0445 D000                  		subi.w	#$D000,d5
0000834A EC4D                       		lsr.w	#6,d5
0000834C 0245 007F                  		andi.w	#$7F,d5
00008350 14C5                       		move.b	d5,(a2)+
00008352 137C 0008 0024             		move.b	#8,$24(a1)
00008358 1284                       		move.b	d4,0(a1)
0000835A 3342 000C                  		move.w	d2,$C(a1)
0000835E 3343 0008                  		move.w	d3,8(a1)
00008362 2368 0004 0004             		move.l	4(a0),4(a1)
00008368 337C 4398 0002             		move.w	#$4398,2(a1)
0000836E 137C 0004 0001             		move.b	#4,1(a1)
00008374 137C 0003 0018             		move.b	#3,$18(a1)
0000837A 137C 0008 0019             		move.b	#8,$19(a1)
00008380 1346 003E                  		move.b	d6,$3E(a1)
00008384 5206                       		addq.b	#1,d6
00008386 0206 0007                  		andi.b	#7,d6
0000838A 0643 0010                  		addi.w	#$10,d3
0000838E B668 0008                  		cmp.w	8(a0),d3
00008392 6600                       		bne.s	loc_7D78
00008394 1146 003E                  		move.b	d6,$3E(a0)
00008398 5206                       		addq.b	#1,d6
0000839A 0206 0007                  		andi.b	#7,d6
0000839E 0643 0010                  		addi.w	#$10,d3
000083A2 5228 0028                  		addq.b	#1,$28(a0)
000083A6                            
000083A6                            loc_7D78:
000083A6 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000083AA                            
000083AA                            Obj17_Action:				; XREF: Obj17_Index
000083AA 6100 0000                  		bsr.w	Obj17_RotateSpikes
000083AE 6100 0000                  		bsr.w	DisplaySprite
000083B2 6000 0000                  		bra.w	Obj17_ChkDel
000083B6                            
000083B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083B6                            
000083B6                            
000083B6                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000083B6 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000083BA 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000083C0 D028 003E                  		add.b	$3E(a0),d0
000083C4 0200 0007                  		andi.b	#7,d0
000083C8 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000083CC 6600                       		bne.s	locret_7DA6
000083CE 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000083D4                            
000083D4                            locret_7DA6:
000083D4 4E75                       		rts	
000083D6                            ; End of function Obj17_RotateSpikes
000083D6                            
000083D6                            ; ===========================================================================
000083D6                            
000083D6                            Obj17_ChkDel:				; XREF: Obj17_Action
000083D6 3028 0008                  		move.w	8(a0),d0
000083DA 0240 FF80                  		andi.w	#$FF80,d0
000083DE 3238 F700                  		move.w	($FFFFF700).w,d1
000083E2 0441 0080                  		subi.w	#$80,d1
000083E6 0241 FF80                  		andi.w	#$FF80,d1
000083EA 9041                       		sub.w	d1,d0
000083EC 0C40 0280                  		cmpi.w	#$280,d0
000083F0 6200 0000                  		bhi.w	Obj17_DelAll
000083F4 4E75                       		rts	
000083F6                            ; ===========================================================================
000083F6                            
000083F6                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000083F6 7400                       		moveq	#0,d2
000083F8 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000083FC 141A                       		move.b	(a2)+,d2	; move a2 to d2
000083FE 5502                       		subq.b	#2,d2
00008400 6500                       		bcs.s	Obj17_Delete
00008402                            
00008402                            Obj17_DelLoop:
00008402 7000                       		moveq	#0,d0
00008404 101A                       		move.b	(a2)+,d0
00008406 ED48                       		lsl.w	#6,d0
00008408 0680 00FF D000             		addi.l	#$FFD000,d0
0000840E 2240                       		movea.l	d0,a1
00008410 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008414 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008418                            
00008418                            Obj17_Delete:				; XREF: Obj17_Index
00008418 6100 0000                  		bsr.w	DeleteObject
0000841C 4E75                       		rts	
0000841E                            ; ===========================================================================
0000841E                            
0000841E                            Obj17_Display:				; XREF: Obj17_Index
0000841E 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008422 6000 0000                  		bra.w	DisplaySprite
00008426                            ; ===========================================================================
00008426                            ; ---------------------------------------------------------------------------
00008426                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008426                            ; ---------------------------------------------------------------------------
00008426                            Map_obj17:
00008426                            	include "_maps\obj17.asm"
00008426                            ; ---------------------------------------------------------------------------
00008426                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008426                            ; ---------------------------------------------------------------------------
00008426 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000842A 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000842E 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008432 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008436 01                         byte_7E08:	dc.b 1
00008437 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000843C 01                         byte_7E0E:	dc.b 1
0000843D F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008442 01                         byte_7E14:	dc.b 1
00008443 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008448 01                         byte_7E1A:	dc.b 1
00008449 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000844E 01                         byte_7E20:	dc.b 1
0000844F 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008454 01                         byte_7E26:	dc.b 1
00008455 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000845A 01                         byte_7E2C:	dc.b 1
0000845B F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008460                            		even
00008460                            		even
00008460                            
00008460                            ; ===========================================================================
00008460                            ; ---------------------------------------------------------------------------
00008460                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008460                            ; ---------------------------------------------------------------------------
00008460                            
00008460                            Obj18:					; XREF: Obj_Index
00008460 7000                       		moveq	#0,d0
00008462 1028 0024                  		move.b	$24(a0),d0
00008466 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000846A 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000846E                            ; ===========================================================================
0000846E 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008470 0000                       		dc.w Obj18_Solid-Obj18_Index
00008472 0000                       		dc.w Obj18_Action2-Obj18_Index
00008474 0000                       		dc.w Obj18_Delete-Obj18_Index
00008476 0000                       		dc.w Obj18_Action-Obj18_Index
00008478                            ; ===========================================================================
00008478                            
00008478                            Obj18_Main:				; XREF: Obj18_Index
00008478 5428 0024                  		addq.b	#2,$24(a0)
0000847C 317C 4000 0002             		move.w	#$4000,2(a0)
00008482 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000848A 117C 0020 0019             		move.b	#$20,$19(a0)
00008490 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008496 6600                       		bne.s	Obj18_NotSYZ
00008498 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000084A0 117C 0020 0019             		move.b	#$20,$19(a0)
000084A6                            
000084A6                            Obj18_NotSYZ:
000084A6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000084AC 6600                       		bne.s	Obj18_NotSLZ
000084AE 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000084B6 117C 0020 0019             		move.b	#$20,$19(a0)
000084BC 317C 4000 0002             		move.w	#$4000,2(a0)
000084C2 117C 0003 0028             		move.b	#3,$28(a0)
000084C8                            
000084C8                            Obj18_NotSLZ:
000084C8 117C 0004 0001             		move.b	#4,1(a0)
000084CE 117C 0004 0018             		move.b	#4,$18(a0)
000084D4 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000084DA 3168 000C 0034             		move.w	$C(a0),$34(a0)
000084E0 3168 0008 0032             		move.w	8(a0),$32(a0)
000084E6 317C 0080 0026             		move.w	#$80,$26(a0)
000084EC 7200                       		moveq	#0,d1
000084EE 1028 0028                  		move.b	$28(a0),d0
000084F2 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000084F6 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000084F8 5201                       		addq.b	#1,d1		; use frame #1
000084FA 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008500                            
00008500                            Obj18_SetFrame:
00008500 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008504                            
00008504                            Obj18_Solid:				; XREF: Obj18_Index
00008504 4A28 0038                  		tst.b	$38(a0)
00008508 6700                       		beq.s	loc_7EE0
0000850A 5928 0038                  		subq.b	#4,$38(a0)
0000850E                            
0000850E                            loc_7EE0:
0000850E 7200                       		moveq	#0,d1
00008510 1228 0019                  		move.b	$19(a0),d1
00008514 6100 F56C                  		bsr.w	PlatformObject
00008518                            
00008518                            Obj18_Action:				; XREF: Obj18_Index
00008518 6100 0000                  		bsr.w	Obj18_Move
0000851C 6100 0000                  		bsr.w	Obj18_Nudge
00008520 6100 0000                  		bsr.w	DisplaySprite
00008524 6000 0000                  		bra.w	Obj18_ChkDel
00008528                            ; ===========================================================================
00008528                            
00008528                            Obj18_Action2:				; XREF: Obj18_Index
00008528 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000852E 6700                       		beq.s	loc_7F06
00008530 5828 0038                  		addq.b	#4,$38(a0)
00008534                            
00008534                            loc_7F06:
00008534 7200                       		moveq	#0,d1
00008536 1228 0019                  		move.b	$19(a0),d1
0000853A 6100 F6BA                  		bsr.w	ExitPlatform
0000853E 3F28 0008                  		move.w	8(a0),-(sp)
00008542 6100 0000                  		bsr.w	Obj18_Move
00008546 6100 0000                  		bsr.w	Obj18_Nudge
0000854A 341F                       		move.w	(sp)+,d2
0000854C 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008550 6100 0000                  		bsr.w	DisplaySprite
00008554 6000 0000                  		bra.w	Obj18_ChkDel
00008558                            
00008558 4E75                       		rts
0000855A                            
0000855A                            ; ---------------------------------------------------------------------------
0000855A                            ; Subroutine to	move platform slightly when you	stand on it
0000855A                            ; ---------------------------------------------------------------------------
0000855A                            
0000855A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000855A                            
0000855A                            
0000855A                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000855A 1028 0038                  		move.b	$38(a0),d0
0000855E 6100 A78C                  		bsr.w	CalcSine
00008562 323C 0400                  		move.w	#$400,d1
00008566 C1C1                       		muls.w	d1,d0
00008568 4840                       		swap	d0
0000856A D068 002C                  		add.w	$2C(a0),d0
0000856E 3140 000C                  		move.w	d0,$C(a0)
00008572 4E75                       		rts	
00008574                            ; End of function Obj18_Nudge
00008574                            
00008574                            ; ---------------------------------------------------------------------------
00008574                            ; Subroutine to	move platforms
00008574                            ; ---------------------------------------------------------------------------
00008574                            
00008574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008574                            
00008574                            
00008574                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008574 7000                       		moveq	#0,d0
00008576 1028 0028                  		move.b	$28(a0),d0
0000857A 0240 000F                  		andi.w	#$F,d0
0000857E D040                       		add.w	d0,d0
00008580 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008584 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008588                            ; End of function Obj18_Move
00008588                            
00008588                            ; ===========================================================================
00008588 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000858C 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008590 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008594 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008598 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000859C 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000085A0 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000085A2                            ; ===========================================================================
000085A2                            
000085A2                            Obj18_Type00:
000085A2 4E75                       		rts			; platform 00 doesn't move
000085A4                            ; ===========================================================================
000085A4                            
000085A4                            Obj18_Type05:
000085A4 3028 0032                  		move.w	$32(a0),d0
000085A8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085AC 4401                       		neg.b	d1		; reverse platform-motion
000085AE 0601 0040                  		addi.b	#$40,d1
000085B2 6000                       		bra.s	Obj18_01_Move
000085B4                            ; ===========================================================================
000085B4                            
000085B4                            Obj18_Type01:
000085B4 3028 0032                  		move.w	$32(a0),d0
000085B8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085BC 0401 0040                  		subi.b	#$40,d1
000085C0                            
000085C0                            Obj18_01_Move:
000085C0 4881                       		ext.w	d1
000085C2 D041                       		add.w	d1,d0
000085C4 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000085C8 6000 0000                  		bra.w	Obj18_ChgMotion
000085CC                            ; ===========================================================================
000085CC                            
000085CC                            Obj18_Type0C:
000085CC 3028 0034                  		move.w	$34(a0),d0
000085D0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085D4 4401                       		neg.b	d1		; reverse platform-motion
000085D6 0601 0030                  		addi.b	#$30,d1
000085DA 6000                       		bra.s	Obj18_02_Move
000085DC                            ; ===========================================================================
000085DC                            
000085DC                            Obj18_Type0B:
000085DC 3028 0034                  		move.w	$34(a0),d0
000085E0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085E4 0401 0030                  		subi.b	#$30,d1
000085E8 6000                       		bra.s	Obj18_02_Move
000085EA                            ; ===========================================================================
000085EA                            
000085EA                            Obj18_Type06:
000085EA 3028 0034                  		move.w	$34(a0),d0
000085EE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085F2 4401                       		neg.b	d1		; reverse platform-motion
000085F4 0601 0040                  		addi.b	#$40,d1
000085F8 6000                       		bra.s	Obj18_02_Move
000085FA                            ; ===========================================================================
000085FA                            
000085FA                            Obj18_Type02:
000085FA 3028 0034                  		move.w	$34(a0),d0
000085FE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008602 0401 0040                  		subi.b	#$40,d1
00008606                            
00008606                            Obj18_02_Move:
00008606 4881                       		ext.w	d1
00008608 D041                       		add.w	d1,d0
0000860A 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000860E 6000 0000                  		bra.w	Obj18_ChgMotion
00008612                            ; ===========================================================================
00008612                            
00008612                            Obj18_Type03:
00008612 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008616 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008618 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000861E 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008620 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008626                            
00008626                            Obj18_03_NoMove:
00008626 4E75                       		rts	
00008628                            ; ===========================================================================
00008628                            
00008628                            Obj18_03_Wait:
00008628 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000862C 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000862E 317C 0020 003A             		move.w	#32,$3A(a0)
00008634 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008638 4E75                       		rts	
0000863A                            ; ===========================================================================
0000863A                            
0000863A                            Obj18_Type04:
0000863A 4A68 003A                  		tst.w	$3A(a0)
0000863E 6700                       		beq.s	loc_8048
00008640 5368 003A                  		subq.w	#1,$3A(a0)
00008644 6600                       		bne.s	loc_8048
00008646 0828 0003 0022             		btst	#3,$22(a0)
0000864C 6700                       		beq.s	loc_8042
0000864E 08E9 0001 0022             		bset	#1,$22(a1)
00008654 08A9 0003 0022             		bclr	#3,$22(a1)
0000865A 137C 0002 0024             		move.b	#2,$24(a1)
00008660 08A8 0003 0022             		bclr	#3,$22(a0)
00008666 4228 0025                  		clr.b	$25(a0)
0000866A 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008670                            
00008670                            loc_8042:
00008670 117C 0008 0024             		move.b	#8,$24(a0)
00008676                            
00008676                            loc_8048:
00008676 2628 002C                  		move.l	$2C(a0),d3
0000867A 3028 0012                  		move.w	$12(a0),d0
0000867E 48C0                       		ext.l	d0
00008680 E180                       		asl.l	#8,d0
00008682 D680                       		add.l	d0,d3
00008684 2143 002C                  		move.l	d3,$2C(a0)
00008688 0668 0038 0012             		addi.w	#$38,$12(a0)
0000868E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008692 0640 00E0                  		addi.w	#$E0,d0
00008696 B068 002C                  		cmp.w	$2C(a0),d0
0000869A 6400                       		bcc.s	locret_8074
0000869C 117C 0006 0024             		move.b	#6,$24(a0)
000086A2                            
000086A2                            locret_8074:
000086A2 4E75                       		rts	
000086A4                            ; ===========================================================================
000086A4                            
000086A4                            Obj18_Type07:
000086A4 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000086A8 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000086AA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000086AE 7000                       		moveq	#0,d0
000086B0 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000086B4 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000086B6 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000086BA 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000086BC 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000086C2                            
000086C2                            Obj18_07_NoMove:
000086C2 4E75                       		rts	
000086C4                            ; ===========================================================================
000086C4                            
000086C4                            Obj18_07_Wait:
000086C4 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000086C8 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000086CA 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000086CE 4E75                       		rts	
000086D0                            ; ===========================================================================
000086D0                            
000086D0                            Obj18_Type08:
000086D0 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000086D4 3028 0034                  		move.w	$34(a0),d0
000086D8 0440 0200                  		subi.w	#$200,d0
000086DC B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000086E0 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000086E2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000086E6                            
000086E6                            Obj18_08_NoStop:
000086E6 4E75                       		rts	
000086E8                            ; ===========================================================================
000086E8                            
000086E8                            Obj18_Type0A:
000086E8 3028 0034                  		move.w	$34(a0),d0
000086EC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000086F0 0401 0040                  		subi.b	#$40,d1
000086F4 4881                       		ext.w	d1
000086F6 E241                       		asr.w	#1,d1
000086F8 D041                       		add.w	d1,d0
000086FA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000086FE                            
000086FE                            Obj18_ChgMotion:
000086FE 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008704 4E75                       		rts	
00008706                            ; ===========================================================================
00008706                            
00008706                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008706 3028 0032                  		move.w	$32(a0),d0
0000870A 0240 FF80                  		andi.w	#$FF80,d0
0000870E 3238 F700                  		move.w	($FFFFF700).w,d1
00008712 0441 0080                  		subi.w	#$80,d1
00008716 0241 FF80                  		andi.w	#$FF80,d1
0000871A 9041                       		sub.w	d1,d0
0000871C 0C40 0280                  		cmpi.w	#$280,d0
00008720 6200                       		bhi.s	Obj18_Delete
00008722 4E75                       		rts	
00008724                            ; ===========================================================================
00008724                            
00008724                            Obj18_Delete:				; XREF: Obj18_Index
00008724 6000 0000                  		bra.w	DeleteObject
00008728                            ; ===========================================================================
00008728                            ; ---------------------------------------------------------------------------
00008728                            ; Sprite mappings - unused
00008728                            ; ---------------------------------------------------------------------------
00008728                            Map_obj18x:
00008728                            	include "_maps\obj18x.asm"
00008728                            ; ---------------------------------------------------------------------------
00008728                            ; Sprite mappings - unused
00008728                            ; ---------------------------------------------------------------------------
00008728 0000                       		dc.w byte_80FE-Map_obj18x
0000872A 0000                       		dc.w byte_8109-Map_obj18x
0000872C 02                         byte_80FE:	dc.b 2
0000872D F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008732 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008737 0A                         byte_8109:	dc.b $A
00008738 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000873D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008742 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008747 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000874C 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008751 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008756 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000875B 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008760 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008765 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000876A                            		even
0000876A                            		even
0000876A                            
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            ; Sprite mappings - GHZ	platforms
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            Map_obj18:
0000876A                            	include "_maps\obj18ghz.asm"
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            ; Sprite mappings - GHZ	platforms
0000876A                            ; ---------------------------------------------------------------------------
0000876A 0000                       		dc.w byte_8140-Map_obj18
0000876C 0000                       		dc.w byte_8155-Map_obj18
0000876E 04                         byte_8140:	dc.b 4
0000876F F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008774 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008779 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000877E F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008783 0A                         byte_8155:	dc.b $A
00008784 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008789 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000878E 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008793 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008798 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000879D F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000087A2 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000087A7 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000087AC 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000087B1 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000087B6                            		even
000087B6                            		even
000087B6                            
000087B6                            ; ---------------------------------------------------------------------------
000087B6                            ; Sprite mappings - SYZ	platforms
000087B6                            ; ---------------------------------------------------------------------------
000087B6                            Map_obj18a:
000087B6                            	include "_maps\obj18syz.asm"
000087B6                            ; ---------------------------------------------------------------------------
000087B6                            ; Sprite mappings - SYZ	platforms
000087B6                            ; ---------------------------------------------------------------------------
000087B6 0000                       		dc.w byte_818A-Map_obj18a
000087B8 03                         byte_818A:	dc.b 3
000087B9 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000087BE F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000087C3 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000087C8                            		even
000087C8                            		even
000087C8                            
000087C8                            ; ---------------------------------------------------------------------------
000087C8                            ; Sprite mappings - SLZ	platforms
000087C8                            ; ---------------------------------------------------------------------------
000087C8                            Map_obj18b:
000087C8                            	include "_maps\obj18slz.asm"
000087C8                            ; ---------------------------------------------------------------------------
000087C8                            ; Sprite mappings - SLZ	platforms
000087C8                            ; ---------------------------------------------------------------------------
000087C8 0000                       		dc.w byte_819C-Map_obj18b
000087CA 02                         byte_819C:	dc.b 2
000087CB F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000087D0 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000087D6 00                         		even
000087D6 00                         		even
000087D6                            
000087D6                            ; ===========================================================================
000087D6                            ; ---------------------------------------------------------------------------
000087D6                            ; Object 19 - Pearto bombs
000087D6                            ; ---------------------------------------------------------------------------
000087D6                            Obj19:					; XREF: Obj_Index
000087D6 7000                       		moveq	#0,d0
000087D8 1028 0024                  		move.b	$24(a0),d0
000087DC 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000087E0 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000087E4                            ; ---------------------------------------------------------------------------
000087E4                            
000087E4 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000087EA                            ; ---------------------------------------------------------------------------
000087EA                            
000087EA                            loc_7076:
000087EA 5428 0024                  		addq.b	#2,$24(a0)
000087EE 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000087F6 317C 0480 0002             		move.w	#($9000/$20),2(a0)
000087FC 117C 0004 0001             		move.b	#4,1(a0)
00008802 117C 0003 0019             		move.b	#3,$19(a0)
00008808 117C 0087 0020             		move.b	#$87,$20(a0)
0000880E 117C 0008 0018             		move.b	#8,$18(a0)
00008814 317C 0018 0030             		move.w	#$18,$30(a0)
0000881A                            
0000881A                            loc_70A6:
0000881A 0828 0007 0022             		btst	#7,$22(a0)
00008820 6600                       		bne.s	loc_70C2
00008822 4A68 0030                  		tst.w	$30(a0)
00008826 6600                       		bne.s	loc_70D2
00008828 4EB9 0000 0000             		jsr	ObjHitFloor
0000882E 4A41                       		tst.w	d1
00008830 6A00                       		bpl.s	loc_70D6
00008832 D368 000C                  		add.w	d1,$C(a0)
00008836                            
00008836                            loc_70C2:
00008836 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
0000883A 117C 0000 0024             		move.b	#0,$24(a0)
00008840                            ; ---------------------------------------------------------------------------
00008840                            
00008840                            loc_70D2:
00008840 5368 0030                  		subq.w	#1,$30(a0)
00008844                            
00008844                            loc_70D6:
00008844 6100 0000                  		bsr.w	ObjectFall
00008848 6100 0000                  		bsr.w	DisplaySprite
0000884C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008850 0640 00E0                  		addi.w	#$E0,d0
00008854 B068 000C                  		cmp.w	$C(a0),d0
00008858 6500                       		bcs.s	loc_70EE
0000885A 4E75                       		rts
0000885C                            ; ---------------------------------------------------------------------------
0000885C                            
0000885C                            loc_70EE:
0000885C 6100 0000                  		bsr.w	DeleteObject
00008860 4E75                       		rts
00008862                            		
00008862                            Map_obj19:
00008862                            	include "_maps\obj19.asm"
00008862                            Map_02b4:
00008862 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
00008864 01                         Map_02b4_2: 	dc.b $1
00008865 F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
0000886A                            	even
0000886A                            	even
0000886A                            ; ===========================================================================
0000886A                            ; ---------------------------------------------------------------------------
0000886A                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000886A                            ; ---------------------------------------------------------------------------
0000886A                            Map_obj48:
0000886A                            	include "_maps\obj48.asm"
0000886A                            ; ---------------------------------------------------------------------------
0000886A                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000886A                            ; ---------------------------------------------------------------------------
0000886A 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000886E 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008872 06                         byte_81B2:	dc.b 6
00008873 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008878 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000887D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008882 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008887 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000888C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008891 04                         byte_81D1:	dc.b 4
00008892 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008897 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000889C 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000088A1 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000088A6 04                         byte_81E6:	dc.b 4
000088A7 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000088AC E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000088B1 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000088B6 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000088BB 04                         byte_81FB:	dc.b 4
000088BC E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000088C1 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000088C6 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000088CB 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000088D0                            		even
000088D0                            		even
000088D0                            
000088D0                            ; ===========================================================================
000088D0                            ; ---------------------------------------------------------------------------
000088D0                            ; Object 1A - GHZ collapsing ledge
000088D0                            ; ---------------------------------------------------------------------------
000088D0                            
000088D0                            Obj1A:					; XREF: Obj_Index
000088D0 7000                       		moveq	#0,d0
000088D2 1028 0024                  		move.b	$24(a0),d0
000088D6 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000088DA 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000088DE                            ; ===========================================================================
000088DE 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000088E2 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000088E6 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000088EA                            ; ===========================================================================
000088EA                            
000088EA                            Obj1A_Main:				; XREF: Obj1A_Index
000088EA 5428 0024                  		addq.b	#2,$24(a0)
000088EE 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000088F6 317C 4000 0002             		move.w	#$4000,2(a0)
000088FC 0028 0004 0001             		ori.b	#4,1(a0)
00008902 117C 0004 0018             		move.b	#4,$18(a0)
00008908 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000890E 117C 0064 0019             		move.b	#$64,$19(a0)
00008914 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000891A 117C 0038 0016             		move.b	#$38,$16(a0)
00008920 08E8 0004 0001             		bset	#4,1(a0)
00008926                            
00008926                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008926 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000892A 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000892C 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008930 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008934 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008938                            
00008938                            Obj1A_Slope:
00008938 323C 0030                  		move.w	#$30,d1
0000893C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008942 6100 F212                  		bsr.w	SlopeObject
00008946 6000 0000                  		bra.w	MarkObjGone
0000894A                            ; ===========================================================================
0000894A                            
0000894A                            Obj1A_Touch:				; XREF: Obj1A_Index
0000894A 4A28 0038                  		tst.b	$38(a0)
0000894E 6700 0000                  		beq.w	loc_847A
00008952 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008958 5328 0038                  		subq.b	#1,$38(a0)
0000895C                            
0000895C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000895C                            
0000895C                            
0000895C                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000895C 323C 0030                  		move.w	#$30,d1
00008960 6100 F294                  		bsr.w	ExitPlatform
00008964 323C 0030                  		move.w	#$30,d1
00008968 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000896E 3428 0008                  		move.w	8(a0),d2
00008972 6100 0000                  		bsr.w	SlopeObject2
00008976 6000 0000                  		bra.w	MarkObjGone
0000897A                            ; End of function Obj1A_WalkOff
0000897A                            
0000897A                            ; ===========================================================================
0000897A                            
0000897A                            Obj1A_Display:				; XREF: Obj1A_Index
0000897A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000897E 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008980 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008984 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008988 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000898C 6000 0000                  		bra.w	DisplaySprite
00008990                            ; ===========================================================================
00008990                            
00008990                            loc_82D0:				; XREF: Obj1A_Display
00008990 5328 0038                  		subq.b	#1,$38(a0)
00008994 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008998 43F8 D000                  		lea	($FFFFD000).w,a1
0000899C 0829 0003 0022             		btst	#3,$22(a1)
000089A2 6700                       		beq.s	loc_82FC
000089A4 4A28 0038                  		tst.b	$38(a0)
000089A8 6600                       		bne.s	locret_8308
000089AA 08A9 0003 0022             		bclr	#3,$22(a1)
000089B0 08A9 0005 0022             		bclr	#5,$22(a1)
000089B6 137C 0001 001D             		move.b	#1,$1D(a1)
000089BC                            
000089BC                            loc_82FC:
000089BC 117C 0000 003A             		move.b	#0,$3A(a0)
000089C2 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000089C8                            
000089C8                            locret_8308:
000089C8 4E75                       		rts	
000089CA                            ; ===========================================================================
000089CA                            
000089CA                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000089CA 6100 0000                  		bsr.w	ObjectFall
000089CE 6100 0000                  		bsr.w	DisplaySprite
000089D2 4A28 0001                  		tst.b	1(a0)
000089D6 6A00                       		bpl.s	Obj1A_Delete
000089D8 4E75                       		rts	
000089DA                            ; ===========================================================================
000089DA                            
000089DA                            Obj1A_Delete:				; XREF: Obj1A_Index
000089DA 6100 0000                  		bsr.w	DeleteObject
000089DE 4E75                       		rts	
000089E0                            ; ===========================================================================
000089E0                            ; ---------------------------------------------------------------------------
000089E0                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000089E0                            ; ---------------------------------------------------------------------------
000089E0                            
000089E0                            Obj53:					; XREF: Obj_Index
000089E0 7000                       		moveq	#0,d0
000089E2 1028 0024                  		move.b	$24(a0),d0
000089E6 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000089EA 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000089EE                            ; ===========================================================================
000089EE 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000089F2 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000089F6 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000089FA                            ; ===========================================================================
000089FA                            
000089FA                            Obj53_Main:				; XREF: Obj53_Index
000089FA 5428 0024                  		addq.b	#2,$24(a0)
000089FE 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008A06 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008A0C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A12 6600                       		bne.s	Obj53_NotSLZ
00008A14 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008A1A 5428 001A                  		addq.b	#2,$1A(a0)
00008A1E                            
00008A1E                            Obj53_NotSLZ:
00008A1E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008A24 6600                       		bne.s	Obj53_NotSBZ
00008A26 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008A2C                            
00008A2C                            Obj53_NotSBZ:
00008A2C 0028 0004 0001             		ori.b	#4,1(a0)
00008A32 117C 0004 0018             		move.b	#4,$18(a0)
00008A38 117C 0007 0038             		move.b	#7,$38(a0)
00008A3E 117C 0044 0019             		move.b	#$44,$19(a0)
00008A44                            
00008A44                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008A44 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A48 6700                       		beq.s	Obj53_Solid	; if not, branch
00008A4A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A4E 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008A52 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A56                            
00008A56                            Obj53_Solid:
00008A56 323C 0020                  		move.w	#$20,d1
00008A5A 6100 F026                  		bsr.w	PlatformObject
00008A5E 4A28 0028                  		tst.b	$28(a0)
00008A62 6A00                       		bpl.s	Obj53_MarkAsGone
00008A64 0829 0003 0022             		btst	#3,$22(a1)
00008A6A 6700                       		beq.s	Obj53_MarkAsGone
00008A6C 08A8 0000 0001             		bclr	#0,1(a0)
00008A72 3029 0008                  		move.w	8(a1),d0
00008A76 9068 0008                  		sub.w	8(a0),d0
00008A7A 6400                       		bcc.s	Obj53_MarkAsGone
00008A7C 08E8 0000 0001             		bset	#0,1(a0)
00008A82                            
00008A82                            Obj53_MarkAsGone:
00008A82 6000 0000                  		bra.w	MarkObjGone
00008A86                            ; ===========================================================================
00008A86                            
00008A86                            Obj53_Touch:				; XREF: Obj53_Index
00008A86 4A28 0038                  		tst.b	$38(a0)
00008A8A 6700 0000                  		beq.w	loc_8458
00008A8E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008A94 5328 0038                  		subq.b	#1,$38(a0)
00008A98                            
00008A98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A98                            
00008A98                            
00008A98                            Obj53_WalkOff:				; XREF: Obj53_Index
00008A98 323C 0020                  		move.w	#$20,d1
00008A9C 6100 F158                  		bsr.w	ExitPlatform
00008AA0 3428 0008                  		move.w	8(a0),d2
00008AA4 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008AA8 6000 0000                  		bra.w	MarkObjGone
00008AAC                            ; End of function Obj53_WalkOff
00008AAC                            
00008AAC                            ; ===========================================================================
00008AAC                            
00008AAC                            Obj53_Display:				; XREF: Obj53_Index
00008AAC 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008AB0 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008AB2 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008AB6 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008ABA 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008ABE 6000 0000                  		bra.w	DisplaySprite
00008AC2                            ; ===========================================================================
00008AC2                            
00008AC2                            loc_8402:
00008AC2 5328 0038                  		subq.b	#1,$38(a0)
00008AC6 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008ACA 43F8 D000                  		lea	($FFFFD000).w,a1
00008ACE 0829 0003 0022             		btst	#3,$22(a1)
00008AD4 6700                       		beq.s	loc_842E
00008AD6 4A28 0038                  		tst.b	$38(a0)
00008ADA 6600                       		bne.s	locret_843A
00008ADC 08A9 0003 0022             		bclr	#3,$22(a1)
00008AE2 08A9 0005 0022             		bclr	#5,$22(a1)
00008AE8 137C 0001 001D             		move.b	#1,$1D(a1)
00008AEE                            
00008AEE                            loc_842E:
00008AEE 117C 0000 003A             		move.b	#0,$3A(a0)
00008AF4 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008AFA                            
00008AFA                            locret_843A:
00008AFA 4E75                       		rts	
00008AFC                            ; ===========================================================================
00008AFC                            
00008AFC                            Obj53_TimeZero:				; XREF: Obj53_Display
00008AFC 6100 0000                  		bsr.w	ObjectFall
00008B00 6100 0000                  		bsr.w	DisplaySprite
00008B04 4A28 0001                  		tst.b	1(a0)
00008B08 6A00                       		bpl.s	Obj53_Delete
00008B0A 4E75                       		rts	
00008B0C                            ; ===========================================================================
00008B0C                            
00008B0C                            Obj53_Delete:				; XREF: Obj53_Index
00008B0C 6100 0000                  		bsr.w	DeleteObject
00008B10 4E75                       		rts	
00008B12                            ; ===========================================================================
00008B12                            
00008B12                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008B12 117C 0000 003A             		move.b	#0,$3A(a0)
00008B18                            
00008B18                            loc_8458:				; XREF: Obj53_Touch
00008B18 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008B1E 0828 0000 0028             		btst	#0,$28(a0)
00008B24 6700                       		beq.s	loc_846C
00008B26 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008B2C                            
00008B2C                            loc_846C:
00008B2C 7207                       		moveq	#7,d1
00008B2E 5228 001A                  		addq.b	#1,$1A(a0)
00008B32 6000                       		bra.s	loc_8486
00008B34                            ; ===========================================================================
00008B34                            
00008B34                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008B34 117C 0000 003A             		move.b	#0,$3A(a0)
00008B3A                            
00008B3A                            loc_847A:				; XREF: Obj1A_Touch
00008B3A 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008B40 7218                       		moveq	#$18,d1
00008B42 5428 001A                  		addq.b	#2,$1A(a0)
00008B46                            
00008B46                            loc_8486:				; XREF: Obj53_Collapse
00008B46 7000                       		moveq	#0,d0
00008B48 1028 001A                  		move.b	$1A(a0),d0
00008B4C D040                       		add.w	d0,d0
00008B4E 2668 0004                  		movea.l	4(a0),a3
00008B52 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008B56 524B                       		addq.w	#1,a3
00008B58 08E8 0005 0001             		bset	#5,1(a0)
00008B5E 1810                       		move.b	0(a0),d4
00008B60 1A28 0001                  		move.b	1(a0),d5
00008B64 2248                       		movea.l	a0,a1
00008B66 6000                       		bra.s	loc_84B2
00008B68                            ; ===========================================================================
00008B68                            
00008B68                            loc_84AA:
00008B68 6100 0000                  		bsr.w	SingleObjLoad
00008B6C 6600                       		bne.s	loc_84F2
00008B6E 5A4B                       		addq.w	#5,a3
00008B70                            
00008B70                            loc_84B2:
00008B70 137C 0006 0024             		move.b	#6,$24(a1)
00008B76 1284                       		move.b	d4,0(a1)
00008B78 234B 0004                  		move.l	a3,4(a1)
00008B7C 1345 0001                  		move.b	d5,1(a1)
00008B80 3368 0008 0008             		move.w	8(a0),8(a1)
00008B86 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008B8C 3368 0002 0002             		move.w	2(a0),2(a1)
00008B92 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008B98 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008B9E 135C 0038                  		move.b	(a4)+,$38(a1)
00008BA2 B3C8                       		cmpa.l	a0,a1
00008BA4 6400                       		bcc.s	loc_84EE
00008BA6 6100 0000                  		bsr.w	DisplaySprite2
00008BAA                            
00008BAA                            loc_84EE:
00008BAA 51C9 FFBC                  		dbf	d1,loc_84AA
00008BAE                            
00008BAE                            loc_84F2:
00008BAE 6100 0000                  		bsr.w	DisplaySprite
00008BB2 303C 00B9                  		move.w	#$B9,d0
00008BB6 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008BBC                            ; ===========================================================================
00008BBC                            ; ---------------------------------------------------------------------------
00008BBC                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008BBC                            ; ---------------------------------------------------------------------------
00008BBC 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008BCC 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008BD6 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008BDE 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008BE6                            
00008BE6                            ; ---------------------------------------------------------------------------
00008BE6                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008BE6                            ; ---------------------------------------------------------------------------
00008BE6                            
00008BE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BE6                            
00008BE6                            
00008BE6                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008BE6 43F8 D000                  		lea	($FFFFD000).w,a1
00008BEA 0829 0003 0022             		btst	#3,$22(a1)
00008BF0 6700                       		beq.s	locret_856E
00008BF2 3029 0008                  		move.w	8(a1),d0
00008BF6 9068 0008                  		sub.w	8(a0),d0
00008BFA D041                       		add.w	d1,d0
00008BFC E248                       		lsr.w	#1,d0
00008BFE 0828 0000 0001             		btst	#0,1(a0)
00008C04 6700                       		beq.s	loc_854E
00008C06 4640                       		not.w	d0
00008C08 D041                       		add.w	d1,d0
00008C0A                            
00008C0A                            loc_854E:
00008C0A 7200                       		moveq	#0,d1
00008C0C 1232 0000                  		move.b	(a2,d0.w),d1
00008C10 3028 000C                  		move.w	$C(a0),d0
00008C14 9041                       		sub.w	d1,d0
00008C16 7200                       		moveq	#0,d1
00008C18 1229 0016                  		move.b	$16(a1),d1
00008C1C 9041                       		sub.w	d1,d0
00008C1E 3340 000C                  		move.w	d0,$C(a1)
00008C22 9468 0008                  		sub.w	8(a0),d2
00008C26 9569 0008                  		sub.w	d2,8(a1)
00008C2A                            
00008C2A                            locret_856E:
00008C2A 4E75                       		rts	
00008C2C                            ; End of function SlopeObject2
00008C2C                            
00008C2C                            ; ===========================================================================
00008C2C                            ; ---------------------------------------------------------------------------
00008C2C                            ; Collision data for GHZ collapsing ledge
00008C2C                            ; ---------------------------------------------------------------------------
00008C2C                            Obj1A_SlopeData:
00008C2C                            		incbin	misc\ghzledge.bin
00008C5C                            		even
00008C5C                            
00008C5C                            ; ---------------------------------------------------------------------------
00008C5C                            ; Sprite mappings - GHZ	collapsing ledge
00008C5C                            ; ---------------------------------------------------------------------------
00008C5C                            Map_obj1A:
00008C5C                            	include "_maps\obj1A.asm"
00008C5C                            ; ---------------------------------------------------------------------------
00008C5C                            ; Sprite mappings - GHZ	collapsing ledge
00008C5C                            ; ---------------------------------------------------------------------------
00008C5C 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008C60 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008C64 10                         byte_85A8:	dc.b $10
00008C65 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008C6A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C6F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C74 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C79 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C7E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008C83 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C88 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008C8D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C92 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008C97 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008C9C 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CA1 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CA6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008CAB 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008CB0 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CB5 10                         byte_85F9:	dc.b $10
00008CB6 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008CBB D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008CC0 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008CC5 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008CCA D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008CCF D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008CD4 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008CD9 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008CDE F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CE3 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008CE8 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CED 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CF2 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CF7 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008CFC 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008D01 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D06 19                         byte_864A:	dc.b $19
00008D07 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008D0C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D11 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D16 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D1B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D20 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D25 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D2A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D2F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D34 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008D39 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D3E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D43 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D48 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D4D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D52 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008D57 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D5C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D61 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D66 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D6B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D70 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008D75 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008D7A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008D7F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D84 19                         byte_86C8:	dc.b $19
00008D85 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008D8A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D8F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D94 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D99 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D9E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008DA3 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008DA8 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008DAD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008DB2 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008DB7 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008DBC F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008DC1 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008DC6 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008DCB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008DD0 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008DD5 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008DDA 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008DDF 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008DE4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008DE9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008DEE 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008DF3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008DF8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008DFD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E02                            		even
00008E02                            		even
00008E02                            
00008E02                            ; ---------------------------------------------------------------------------
00008E02                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E02                            ; ---------------------------------------------------------------------------
00008E02                            Map_obj53:
00008E02                            	include "_maps\obj53.asm"
00008E02                            ; ---------------------------------------------------------------------------
00008E02                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E02                            ; ---------------------------------------------------------------------------
00008E02 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008E06 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008E0A 04                         byte_874E:	dc.b 4
00008E0B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008E10 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008E15 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E1A 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008E1F 08                         byte_8763:	dc.b 8
00008E20 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E25 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008E2A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E2F F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008E34 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008E39 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008E3E 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008E43 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008E48 04                         byte_878C:	dc.b 4
00008E49 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008E4E 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008E53 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E58 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008E5D 08                         byte_87A1:	dc.b 8
00008E5E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E63 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008E68 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E6D F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008E72 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008E77 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008E7C 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008E81 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008E86                            		even
00008E86                            		even
00008E86                            
00008E86                            ; ===========================================================================
00008E86                            ; ---------------------------------------------------------------------------
00008E86                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008E86                            ; ---------------------------------------------------------------------------
00008E86                            
00008E86                            Obj1C:					; XREF: Obj_Index
00008E86 7000                       		moveq	#0,d0
00008E88 1028 0024                  		move.b	$24(a0),d0
00008E8C 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008E90 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008E94                            ; ===========================================================================
00008E94 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008E96 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008E98                            ; ===========================================================================
00008E98                            
00008E98                            Obj1C_Main:				; XREF: Obj1C_Index
00008E98 5428 0024                  		addq.b	#2,$24(a0)
00008E9C 7000                       		moveq	#0,d0
00008E9E 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008EA2 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008EA6 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008EAA 2159 0004                  		move.l	(a1)+,4(a0)
00008EAE 3159 0002                  		move.w	(a1)+,2(a0)
00008EB2 0028 0004 0001             		ori.b	#4,1(a0)
00008EB8 1159 001A                  		move.b	(a1)+,$1A(a0)
00008EBC 1159 0019                  		move.b	(a1)+,$19(a0)
00008EC0 1159 0018                  		move.b	(a1)+,$18(a0)
00008EC4 1159 0020                  		move.b	(a1)+,$20(a0)
00008EC8                            
00008EC8                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008EC8 3028 0008                  		move.w	8(a0),d0
00008ECC 0240 FF80                  		andi.w	#$FF80,d0
00008ED0 3238 F700                  		move.w	($FFFFF700).w,d1
00008ED4 0441 0080                  		subi.w	#$80,d1
00008ED8 0241 FF80                  		andi.w	#$FF80,d1
00008EDC 9041                       		sub.w	d1,d0
00008EDE 0C40 0280                  		cmpi.w	#$280,d0
00008EE2 6200 0000                  		bhi.w	DeleteObject
00008EE6 6000 0000                  		bra.w	DisplaySprite
00008EEA                            ; ===========================================================================
00008EEA                            ; ---------------------------------------------------------------------------
00008EEA                            ; Variables for	object $1C are stored in an array
00008EEA                            ; ---------------------------------------------------------------------------
00008EEA 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008EEE 44D8                       		dc.w $44D8		; VRAM setting
00008EF0 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008EF4 0000 0000                  		dc.l Map_obj1C
00008EF8 44D8                       		dc.w $44D8
00008EFA 0008 0200                  		dc.b 0,	8, 2, 0
00008EFE 0000 0000                  		dc.l Map_obj1C
00008F02 44D8                       		dc.w $44D8
00008F04 0008 0200                  		dc.b 0,	8, 2, 0
00008F08 0000 7F6A                  		dc.l Map_obj11
00008F0C 438E                       		dc.w $438E
00008F0E 0110 0100                  		dc.b 1,	$10, 1,	0
00008F12                            ; ---------------------------------------------------------------------------
00008F12                            ; Sprite mappings - SLZ	lava thrower
00008F12                            ; ---------------------------------------------------------------------------
00008F12                            Map_obj1C:
00008F12                            	include "_maps\obj1C.asm"
00008F12                            ; ---------------------------------------------------------------------------
00008F12                            ; Sprite mappings - SLZ	lava thrower
00008F12                            ; ---------------------------------------------------------------------------
00008F12 0000                       		dc.w byte_8858-Map_obj1C
00008F14 01                         byte_8858:	dc.b 1
00008F15 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008F1A                            		even
00008F1A                            		even
00008F1A                            
00008F1A                            ; ===========================================================================
00008F1A                            ; ---------------------------------------------------------------------------
00008F1A                            ; Object 1D - switch that activates when Sonic touches it
00008F1A                            ; (this	is not used anywhere in	the game)
00008F1A                            ; ---------------------------------------------------------------------------
00008F1A                            
00008F1A                            Obj1D:					; XREF: Obj_Index
00008F1A 7000                       		moveq	#0,d0
00008F1C 1028 0024                  		move.b	$24(a0),d0
00008F20 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008F24 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008F28                            ; ===========================================================================
00008F28 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008F2A 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008F2C 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008F2E                            ; ===========================================================================
00008F2E                            
00008F2E                            Obj1D_Main:				; XREF: Obj1D_Index
00008F2E 5428 0024                  		addq.b	#2,$24(a0)
00008F32 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008F3A 317C 4000 0002             		move.w	#$4000,2(a0)
00008F40 117C 0004 0001             		move.b	#4,1(a0)
00008F46 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008F4C 117C 0010 0019             		move.b	#$10,$19(a0)
00008F52 117C 0005 0018             		move.b	#5,$18(a0)
00008F58                            
00008F58                            Obj1D_Action:				; XREF: Obj1D_Index
00008F58 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008F5E 323C 0010                  		move.w	#$10,d1
00008F62 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008F66 6700                       		beq.s	Obj1D_ChkDel
00008F68 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008F6C 7001                       		moveq	#1,d0
00008F6E 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008F72                            
00008F72                            Obj1D_ChkDel:
00008F72 6100 0000                  		bsr.w	DisplaySprite
00008F76 3028 0008                  		move.w	8(a0),d0
00008F7A 0240 FF80                  		andi.w	#$FF80,d0
00008F7E 3238 F700                  		move.w	($FFFFF700).w,d1
00008F82 0441 0080                  		subi.w	#$80,d1
00008F86 0241 FF80                  		andi.w	#$FF80,d1
00008F8A 9041                       		sub.w	d1,d0
00008F8C 0C40 0280                  		cmpi.w	#$280,d0
00008F90 6200 0000                  		bhi.w	Obj1D_Delete
00008F94 4E75                       		rts	
00008F96                            ; ===========================================================================
00008F96                            
00008F96                            Obj1D_Delete:				; XREF: Obj1D_Index
00008F96 6100 0000                  		bsr.w	DeleteObject
00008F9A 4E75                       		rts	
00008F9C                            ; ---------------------------------------------------------------------------
00008F9C                            ; Subroutine to	check if Sonic touches the object
00008F9C                            ; ---------------------------------------------------------------------------
00008F9C                            
00008F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F9C                            
00008F9C                            
00008F9C                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008F9C 43F8 D000                  		lea	($FFFFD000).w,a1
00008FA0 3029 0008                  		move.w	8(a1),d0
00008FA4 9068 0008                  		sub.w	8(a0),d0
00008FA8 D041                       		add.w	d1,d0
00008FAA 6B00                       		bmi.s	loc_8918
00008FAC D241                       		add.w	d1,d1
00008FAE B041                       		cmp.w	d1,d0
00008FB0 6400                       		bcc.s	loc_8918
00008FB2 3429 000C                  		move.w	$C(a1),d2
00008FB6 1229 0016                  		move.b	$16(a1),d1
00008FBA 4881                       		ext.w	d1
00008FBC D242                       		add.w	d2,d1
00008FBE 3028 000C                  		move.w	$C(a0),d0
00008FC2 0440 0010                  		subi.w	#$10,d0
00008FC6 9041                       		sub.w	d1,d0
00008FC8 6200                       		bhi.s	loc_8918
00008FCA 0C40 FFF0                  		cmpi.w	#-$10,d0
00008FCE 6500                       		bcs.s	loc_8918
00008FD0 70FF                       		moveq	#-1,d0
00008FD2 4E75                       		rts	
00008FD4                            ; ===========================================================================
00008FD4                            
00008FD4                            loc_8918:
00008FD4 7000                       		moveq	#0,d0
00008FD6 4E75                       		rts	
00008FD8                            ; End of function Obj1D_ChkTouch
00008FD8                            
00008FD8                            ; ===========================================================================
00008FD8                            ; ---------------------------------------------------------------------------
00008FD8                            ; Sprite mappings - object 1D
00008FD8                            ; ---------------------------------------------------------------------------
00008FD8                            Map_obj1D:
00008FD8                            	include "_maps\obj1D.asm"
00008FD8                            ; ---------------------------------------------------------------------------
00008FD8                            ; Sprite mappings - object 1D
00008FD8                            ; ---------------------------------------------------------------------------
00008FD8 0000                       		dc.w byte_891E-Map_obj1D
00008FDA 04                         byte_891E:	dc.b 4
00008FDB E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008FE0 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008FE5 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008FEA 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008FF0 00                         		even
00008FF0 00                         		even
00008FF0                            
00008FF0                            ; ===========================================================================
00008FF0                            ; ---------------------------------------------------------------------------
00008FF0                            ; Object 2A - doors (SBZ)
00008FF0                            ; ---------------------------------------------------------------------------
00008FF0                            
00008FF0                            Obj2A:					; XREF: Obj_Index
00008FF0 7000                       		moveq	#0,d0
00008FF2 1028 0024                  		move.b	$24(a0),d0
00008FF6 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008FFA 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008FFE                            ; ===========================================================================
00008FFE 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009000 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009002                            ; ===========================================================================
00009002                            
00009002                            Obj2A_Main:				; XREF: Obj2A_Index
00009002 5428 0024                  		addq.b	#2,$24(a0)
00009006 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000900E 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009014 0028 0004 0001             		ori.b	#4,1(a0)
0000901A 117C 0008 0019             		move.b	#8,$19(a0)
00009020 117C 0004 0018             		move.b	#4,$18(a0)
00009026                            
00009026                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009026 323C 0040                  		move.w	#$40,d1
0000902A 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000902E 3038 D008                  		move.w	($FFFFD008).w,d0
00009032 D041                       		add.w	d1,d0
00009034 B068 0008                  		cmp.w	8(a0),d0
00009038 6500                       		bcs.s	Obj2A_Animate
0000903A 9041                       		sub.w	d1,d0
0000903C 9041                       		sub.w	d1,d0
0000903E B068 0008                  		cmp.w	8(a0),d0
00009042 6400                       		bcc.s	Obj2A_Animate
00009044 D041                       		add.w	d1,d0
00009046 B068 0008                  		cmp.w	8(a0),d0
0000904A 6400                       		bcc.s	loc_899A
0000904C 0828 0000 0022             		btst	#0,$22(a0)
00009052 6600                       		bne.s	Obj2A_Animate
00009054 6000                       		bra.s	Obj2A_Open
00009056                            ; ===========================================================================
00009056                            
00009056                            loc_899A:				; XREF: Obj2A_OpenShut
00009056 0828 0000 0022             		btst	#0,$22(a0)
0000905C 6700                       		beq.s	Obj2A_Animate
0000905E                            
0000905E                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000905E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009064                            
00009064                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009064 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000906A 6100 0000                  		bsr.w	AnimateSprite
0000906E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009072 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009074 323C 0011                  		move.w	#$11,d1
00009078 343C 0020                  		move.w	#$20,d2
0000907C 3602                       		move.w	d2,d3
0000907E 5243                       		addq.w	#1,d3
00009080 3828 0008                  		move.w	8(a0),d4
00009084 6100 0000                  		bsr.w	SolidObject
00009088                            
00009088                            Obj2A_MarkAsUsed:
00009088 6000 0000                  		bra.w	MarkObjGone
0000908C                            ; ===========================================================================
0000908C                            Ani_obj2A:
0000908C                            	include "_anim\obj2A.asm"
0000908C                            ; ---------------------------------------------------------------------------
0000908C                            ; Animation script - doors (SBZ)
0000908C                            ; ---------------------------------------------------------------------------
0000908C 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000908E 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009090 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000909C 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000090A8                            		even
000090A8                            		even
000090A8                            
000090A8                            ; ---------------------------------------------------------------------------
000090A8                            ; Sprite mappings - doors (SBZ)
000090A8                            ; ---------------------------------------------------------------------------
000090A8                            Map_obj2A:
000090A8                            	include "_maps\obj2A.asm"
000090A8                            ; ---------------------------------------------------------------------------
000090A8                            ; Sprite mappings - doors (SBZ)
000090A8                            ; ---------------------------------------------------------------------------
000090A8 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000090AC 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000090B0 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000090B4 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000090B8 0000                       		dc.w byte_8A56-Map_obj2A
000090BA 02                         byte_89FE:	dc.b 2
000090BB E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000090C0 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000090C5 02                         byte_8A09:	dc.b 2
000090C6 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000090CB 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000090D0 02                         byte_8A14:	dc.b 2
000090D1 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000090D6 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000090DB 02                         byte_8A1F:	dc.b 2
000090DC D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000090E1 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000090E6 02                         byte_8A2A:	dc.b 2
000090E7 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000090EC 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000090F1 02                         byte_8A35:	dc.b 2
000090F2 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000090F7 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000090FC 02                         byte_8A40:	dc.b 2
000090FD C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009102 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009107 02                         byte_8A4B:	dc.b 2
00009108 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000910D 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009112 02                         byte_8A56:	dc.b 2
00009113 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009118 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000911E 00                         		even
0000911E 00                         		even
0000911E                            
0000911E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000911E                            
0000911E                            
0000911E                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000911E 6100 0000                  		bsr.w	Obj44_SolidWall2
00009122 6700                       		beq.s	loc_8AA8
00009124 6B00 0000                  		bmi.w	loc_8AC4
00009128 4A40                       		tst.w	d0
0000912A 6700 0000                  		beq.w	loc_8A92
0000912E 6B00                       		bmi.s	loc_8A7C
00009130 4A69 0010                  		tst.w	$10(a1)
00009134 6B00                       		bmi.s	loc_8A92
00009136 6000                       		bra.s	loc_8A82
00009138                            ; ===========================================================================
00009138                            
00009138                            loc_8A7C:
00009138 4A69 0010                  		tst.w	$10(a1)
0000913C 6A00                       		bpl.s	loc_8A92
0000913E                            
0000913E                            loc_8A82:
0000913E 9169 0008                  		sub.w	d0,8(a1)
00009142 337C 0000 0014             		move.w	#0,$14(a1)
00009148 337C 0000 0010             		move.w	#0,$10(a1)
0000914E                            
0000914E                            loc_8A92:
0000914E 0829 0001 0022             		btst	#1,$22(a1)
00009154 6600                       		bne.s	loc_8AB6
00009156 08E9 0005 0022             		bset	#5,$22(a1)
0000915C 08E8 0005 0022             		bset	#5,$22(a0)
00009162 4E75                       		rts	
00009164                            ; ===========================================================================
00009164                            
00009164                            loc_8AA8:
00009164 0828 0005 0022             		btst	#5,$22(a0)
0000916A 6700                       		beq.s	locret_8AC2
0000916C 337C 0001 001C             		move.w	#1,$1C(a1)
00009172                            
00009172                            loc_8AB6:
00009172 08A8 0005 0022             		bclr	#5,$22(a0)
00009178 08A9 0005 0022             		bclr	#5,$22(a1)
0000917E                            
0000917E                            locret_8AC2:
0000917E 4E75                       		rts	
00009180                            ; ===========================================================================
00009180                            
00009180                            loc_8AC4:
00009180 4A69 0012                  		tst.w	$12(a1)
00009184 6A00                       		bpl.s	locret_8AD8
00009186 4A43                       		tst.w	d3
00009188 6A00                       		bpl.s	locret_8AD8
0000918A 9769 000C                  		sub.w	d3,$C(a1)
0000918E 337C 0000 0012             		move.w	#0,$12(a1)
00009194                            
00009194                            locret_8AD8:
00009194 4E75                       		rts	
00009196                            ; End of function Obj44_SolidWall
00009196                            
00009196                            
00009196                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009196                            
00009196                            
00009196                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009196 43F8 D000                  		lea	($FFFFD000).w,a1
0000919A 3029 0008                  		move.w	8(a1),d0
0000919E 9068 0008                  		sub.w	8(a0),d0
000091A2 D041                       		add.w	d1,d0
000091A4 6B00                       		bmi.s	loc_8B48
000091A6 3601                       		move.w	d1,d3
000091A8 D643                       		add.w	d3,d3
000091AA B043                       		cmp.w	d3,d0
000091AC 6200                       		bhi.s	loc_8B48
000091AE 1629 0016                  		move.b	$16(a1),d3
000091B2 4883                       		ext.w	d3
000091B4 D443                       		add.w	d3,d2
000091B6 3629 000C                  		move.w	$C(a1),d3
000091BA 9668 000C                  		sub.w	$C(a0),d3
000091BE D642                       		add.w	d2,d3
000091C0 6B00                       		bmi.s	loc_8B48
000091C2 3802                       		move.w	d2,d4
000091C4 D844                       		add.w	d4,d4
000091C6 B644                       		cmp.w	d4,d3
000091C8 6400                       		bcc.s	loc_8B48
000091CA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000091CE 6B00                       		bmi.s	loc_8B48
000091D0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000091D6 6400                       		bcc.s	loc_8B48
000091D8 4A78 FE08                  		tst.w	($FFFFFE08).w
000091DC 6600                       		bne.s	loc_8B48
000091DE 3A00                       		move.w	d0,d5
000091E0 B240                       		cmp.w	d0,d1
000091E2 6400                       		bcc.s	loc_8B30
000091E4 D241                       		add.w	d1,d1
000091E6 9041                       		sub.w	d1,d0
000091E8 3A00                       		move.w	d0,d5
000091EA 4445                       		neg.w	d5
000091EC                            
000091EC                            loc_8B30:
000091EC 3203                       		move.w	d3,d1
000091EE B443                       		cmp.w	d3,d2
000091F0 6400                       		bcc.s	loc_8B3C
000091F2 9644                       		sub.w	d4,d3
000091F4 3203                       		move.w	d3,d1
000091F6 4441                       		neg.w	d1
000091F8                            
000091F8                            loc_8B3C:
000091F8 BA41                       		cmp.w	d1,d5
000091FA 6200                       		bhi.s	loc_8B44
000091FC 7801                       		moveq	#1,d4
000091FE 4E75                       		rts	
00009200                            ; ===========================================================================
00009200                            
00009200                            loc_8B44:
00009200 78FF                       		moveq	#-1,d4
00009202 4E75                       		rts	
00009204                            ; ===========================================================================
00009204                            
00009204                            loc_8B48:
00009204 7800                       		moveq	#0,d4
00009206 4E75                       		rts	
00009208                            ; End of function Obj44_SolidWall2
00009208                            
00009208                            ; ===========================================================================
00009208                            ; ---------------------------------------------------------------------------
00009208                            ; Object 1E - Ball Hog enemy (SBZ)
00009208                            ; ---------------------------------------------------------------------------
00009208                            
00009208                            Obj1E:					; XREF: Obj_Index
00009208 7000                       		moveq	#0,d0
0000920A 1028 0024                  		move.b	$24(a0),d0
0000920E 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009212 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009216                            ; ===========================================================================
00009216 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009218 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000921A                            ; ===========================================================================
0000921A                            
0000921A                            Obj1E_Main:				; XREF: Obj1E_Index
0000921A 117C 0013 0016             		move.b	#$13,$16(a0)
00009220 117C 0008 0017             		move.b	#8,$17(a0)
00009226 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000922E 317C 2302 0002             		move.w	#$2302,2(a0)
00009234 117C 0004 0001             		move.b	#4,1(a0)
0000923A 117C 0004 0018             		move.b	#4,$18(a0)
00009240 117C 0005 0020             		move.b	#5,$20(a0)
00009246 117C 000C 0019             		move.b	#$C,$19(a0)
0000924C 6100 0000                  		bsr.w	ObjectFall
00009250 4EB9 0000 0000             		jsr	ObjHitFloor
00009256 4A41                       		tst.w	d1
00009258 6A00                       		bpl.s	locret_8BAC
0000925A D368 000C                  		add.w	d1,$C(a0)
0000925E 317C 0000 0012             		move.w	#0,$12(a0)
00009264 5428 0024                  		addq.b	#2,$24(a0)
00009268                            
00009268                            locret_8BAC:
00009268 4E75                       		rts	
0000926A                            ; ===========================================================================
0000926A                            
0000926A                            Obj1E_Action:				; XREF: Obj1E_Index
0000926A 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009270 6100 0000                  		bsr.w	AnimateSprite
00009274 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000927A 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000927C 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009280 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009282 6000                       		bra.s	Obj1E_MarkAsGone
00009284                            ; ===========================================================================
00009284                            
00009284                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009284 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009288                            
00009288                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009288 6000 0000                  		bra.w	MarkObjGone
0000928C                            ; ===========================================================================
0000928C                            
0000928C                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000928C 117C 0001 0032             		move.b	#1,$32(a0)
00009292 6100 0000                  		bsr.w	SingleObjLoad
00009296 6600                       		bne.s	loc_8C1A
00009298 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000929C 3368 0008 0008             		move.w	8(a0),8(a1)
000092A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000092A8 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
000092AE 337C 0000 0012             		move.w	#0,$12(a1)
000092B4 70FC                       		moveq	#-4,d0
000092B6 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000092BC 6700                       		beq.s	loc_8C0A	; if not, branch
000092BE 4440                       		neg.w	d0
000092C0 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000092C4                            
000092C4                            loc_8C0A:
000092C4 D169 0008                  		add.w	d0,8(a1)
000092C8 0669 000C 000C             		addi.w	#$C,$C(a1)
000092CE 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000092D4                            
000092D4                            loc_8C1A:
000092D4 60B2                       		bra.s	Obj1E_MarkAsGone
000092D6                            ; ===========================================================================
000092D6                            ; ---------------------------------------------------------------------------
000092D6                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000092D6                            ; ---------------------------------------------------------------------------
000092D6                            
000092D6                            Obj20:					; XREF: Obj_Index
000092D6 7000                       		moveq	#0,d0
000092D8 1028 0024                  		move.b	$24(a0),d0
000092DC 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000092E0 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000092E4                            ; ===========================================================================
000092E4 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000092E6 0000                       		dc.w Obj20_Bounce-Obj20_Index
000092E8                            ; ===========================================================================
000092E8                            
000092E8                            Obj20_Main:				; XREF: Obj20_Index
000092E8 5428 0024                  		addq.b	#2,$24(a0)
000092EC 117C 0007 0016             		move.b	#7,$16(a0)
000092F2 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000092FA 317C 2302 0002             		move.w	#$2302,2(a0)
00009300 117C 0004 0001             		move.b	#4,1(a0)
00009306 117C 0003 0018             		move.b	#3,$18(a0)
0000930C 117C 0087 0020             		move.b	#$87,$20(a0)
00009312 117C 0008 0019             		move.b	#8,$19(a0)
00009318 7000                       		moveq	#0,d0
0000931A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000931E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009322 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009326 117C 0004 001A             		move.b	#4,$1A(a0)
0000932C                            
0000932C                            Obj20_Bounce:				; XREF: Obj20_Index
0000932C 4EB9 0000 0000             		jsr	ObjectFall
00009332 4A68 0012                  		tst.w	$12(a0)
00009336 6B00                       		bmi.s	Obj20_ChkExplode
00009338 4EB9 0000 0000             		jsr	ObjHitFloor
0000933E 4A41                       		tst.w	d1
00009340 6A00                       		bpl.s	Obj20_ChkExplode
00009342 D368 000C                  		add.w	d1,$C(a0)
00009346 317C FD00 0012             		move.w	#-$300,$12(a0)
0000934C 4A03                       		tst.b	d3
0000934E 6700                       		beq.s	Obj20_ChkExplode
00009350 6B00                       		bmi.s	loc_8CA4
00009352 4A68 0010                  		tst.w	$10(a0)
00009356 6A00                       		bpl.s	Obj20_ChkExplode
00009358 4468 0010                  		neg.w	$10(a0)
0000935C 6000                       		bra.s	Obj20_ChkExplode
0000935E                            ; ===========================================================================
0000935E                            
0000935E                            loc_8CA4:				; XREF: Obj20_Bounce
0000935E 4A68 0010                  		tst.w	$10(a0)
00009362 6B00                       		bmi.s	Obj20_ChkExplode
00009364 4468 0010                  		neg.w	$10(a0)
00009368                            
00009368                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009368 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000936C 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000936E 10BC 0024                  		move.b	#$24,0(a0)
00009372 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009376 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000937C 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009380                            ; ===========================================================================
00009380                            
00009380                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009380 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009384 6A00                       		bpl.s	Obj20_Display
00009386 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000938C 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009392                            
00009392                            Obj20_Display:
00009392 6100 0000                  		bsr.w	DisplaySprite
00009396 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000939A 0640 00E0                  		addi.w	#$E0,d0
0000939E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000093A2 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000093A6 4E75                       		rts	
000093A8                            ; ===========================================================================
000093A8                            ; ---------------------------------------------------------------------------
000093A8                            ; Object 24 - explosion	from a destroyed monitor
000093A8                            ; ---------------------------------------------------------------------------
000093A8                            
000093A8                            Obj24:					; XREF: Obj_Index
000093A8 7000                       		moveq	#0,d0
000093AA 1028 0024                  		move.b	$24(a0),d0
000093AE 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000093B2 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000093B6                            ; ===========================================================================
000093B6 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000093B8 0000                       		dc.w Obj24_Animate-Obj24_Index
000093BA                            ; ===========================================================================
000093BA                            
000093BA                            Obj24_Main:				; XREF: Obj24_Index
000093BA 5428 0024                  		addq.b	#2,$24(a0)
000093BE 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000093C6 317C 041C 0002             		move.w	#$41C,2(a0)
000093CC 117C 0004 0001             		move.b	#4,1(a0)
000093D2 117C 0001 0018             		move.b	#1,$18(a0)
000093D8 117C 0000 0020             		move.b	#0,$20(a0)
000093DE 117C 000C 0019             		move.b	#$C,$19(a0)
000093E4 117C 0009 001E             		move.b	#9,$1E(a0)
000093EA 117C 0000 001A             		move.b	#0,$1A(a0)
000093F0 303C 00A5                  		move.w	#$A5,d0
000093F4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play explosion sound
000093FA                            
000093FA                            Obj24_Animate:				; XREF: Obj24_Index
000093FA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000093FE 6A00                       		bpl.s	Obj24_Display
00009400 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009406 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000940A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009410 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009414                            
00009414                            Obj24_Display:
00009414 6000 0000                  		bra.w	DisplaySprite
00009418                            ; ===========================================================================
00009418                            ; ---------------------------------------------------------------------------
00009418                            ; Object 27 - explosion	from a destroyed enemy
00009418                            ; ---------------------------------------------------------------------------
00009418                            
00009418                            Obj27:					; XREF: Obj_Index
00009418 7000                       		moveq	#0,d0
0000941A 1028 0024                  		move.b	$24(a0),d0
0000941E 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009422 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009426                            ; ===========================================================================
00009426 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009428 0000                       		dc.w Obj27_Main-Obj27_Index
0000942A 0000                       		dc.w Obj27_Animate-Obj27_Index
0000942C                            ; ===========================================================================
0000942C                            
0000942C                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000942C 5428 0024                  		addq.b	#2,$24(a0)
00009430 6100 0000                  		bsr.w	SingleObjLoad
00009434 6600                       		bne.s	Obj27_Main
00009436 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000943A 3368 0008 0008             		move.w	8(a0),8(a1)
00009440 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009446 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000944C                            
0000944C                            Obj27_Main:				; XREF: Obj27_Index
0000944C 5428 0024                  		addq.b	#2,$24(a0)
00009450 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009458 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000945E 117C 0004 0001             		move.b	#4,1(a0)
00009464 117C 0001 0018             		move.b	#1,$18(a0)
0000946A 117C 0000 0020             		move.b	#0,$20(a0)
00009470 117C 000C 0019             		move.b	#$C,$19(a0)
00009476                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009476 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
0000947C 117C 0000 001A             		move.b	#0,$1A(a0)
00009482 303C 00C1                  		move.w	#$C1,d0
00009486 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000948C                            
0000948C 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009492 1028 0028                  		move.b	$28(a0),d0
00009496 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
0000949C 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000094A2                            
000094A2                            Obj27_Animate:				; XREF: Obj27_Index
000094A2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000094A6 6A00                       		bpl.s	Obj27_Display
000094A8                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000094A8 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000094AE 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000094B2 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000094B8 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000094BC                            
000094BC                            Obj27_Display:
000094BC 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000094C2 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000094C8 6000 0000                  		bra.w	DisplaySprite
000094CC                            ; ===========================================================================
000094CC                            ; ---------------------------------------------------------------------------
000094CC                            Obj27_ExplosionXYSpd:
000094CC                            		; dc.w	-$350, -$300	; Left
000094CC                            		; dc.w	-$200, -$450	; Near middle (left)
000094CC                            		; dc.w	0, -$500	; Middle
000094CC                            		; dc.w	$200, -$450	; Near middle (right)
000094CC                            		; dc.w	$350, -$300	; Right
000094CC                            
000094CC FEB0 FC00                  		dc.w	-$150, -$400	; Left
000094D0 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000094D4 0000 FA00                  		dc.w	0, -$600	; Middle
000094D8 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000094DC 0150 FC00                  		dc.w	$150, -$400	; Right
000094E0                            
000094E0 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
000094FA                            ; ---------------------------------------------------------------------------
000094FA                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
000094FA                            ; ---------------------------------------------------------------------------
000094FA                            
000094FA                            Obj3F:					; XREF: Obj_Index
000094FA 7000                       		moveq	#0,d0
000094FC 1028 0024                  		move.b	$24(a0),d0
00009500 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009504 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009508                            ; ===========================================================================
00009508 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000950A FF9A                       		dc.w Obj27_Animate-Obj3F_Index
0000950C                            ; ===========================================================================
0000950C                            
0000950C                            Obj3F_Main:				; XREF: Obj3F_Index
0000950C 5428 0024                  		addq.b	#2,$24(a0)
00009510 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009518 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000951E 117C 0004 0001             		move.b	#4,1(a0)
00009524 117C 0001 0018             		move.b	#1,$18(a0)
0000952A 117C 0000 0020             		move.b	#0,$20(a0)
00009530 117C 000C 0019             		move.b	#$C,$19(a0)
00009536 117C 0007 001E             		move.b	#7,$1E(a0)
0000953C 117C 0000 001A             		move.b	#0,$1A(a0)
00009542 303C 00C4                  		move.w	#$C4,d0
00009546 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000954C                            ; ===========================================================================
0000954C                            Ani_obj1E:
0000954C                            	include "_anim\obj1E.asm"
0000954C                            ; ---------------------------------------------------------------------------
0000954C                            ; Animation script - doors (SBZ)
0000954C                            ; ---------------------------------------------------------------------------
0000954C 0000                       		dc.w byte_8E4A-Ani_obj1E
0000954E 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009566 00                         		even
00009566 00                         		even
00009566                            
00009566                            ; ---------------------------------------------------------------------------
00009566                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009566                            ; ---------------------------------------------------------------------------
00009566                            Map_obj1E:
00009566                            	include "_maps\obj1E.asm"
00009566                            Map_a7ad:
00009566 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
00009568 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
0000956A 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
0000956C 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
0000956E 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009570 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
00009572 02                         Map_a7ad_C: 	dc.b $2
00009573 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009578 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
0000957D 02                         Map_a7ad_17: 	dc.b $2
0000957E EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009583 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009588 02                         Map_a7ad_22: 	dc.b $2
00009589 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
0000958E 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009593 02                         Map_a7ad_2D: 	dc.b $2
00009594 E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
00009599 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
0000959E 02                         Map_a7ad_38: 	dc.b $2
0000959F F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
000095A4 E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
000095A9 02                         Map_a7ad_43: 	dc.b $2
000095AA F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
000095AF E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
000095B4                            	even
000095B4                            	even
000095B4                            
000095B4                            ; ---------------------------------------------------------------------------
000095B4                            ; Sprite mappings - explosion
000095B4                            ; ---------------------------------------------------------------------------
000095B4                            Map_obj24:
000095B4                            	include "_maps\obj24.asm"
000095B4                            ; ---------------------------------------------------------------------------
000095B4                            ; Sprite mappings - explosion
000095B4                            ; ---------------------------------------------------------------------------
000095B4 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000095B8 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000095BC 01                         byte_8EAE:	dc.b 1
000095BD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000095C2 01                         byte_8EB4:	dc.b 1
000095C3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000095C8 01                         byte_8EBA:	dc.b 1
000095C9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000095CE 01                         byte_8EC0:	dc.b 1
000095CF F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000095D4                            		even
000095D4                            		even
000095D4                            
000095D4                            ; ---------------------------------------------------------------------------
000095D4                            ; Sprite mappings - explosion
000095D4                            ; ---------------------------------------------------------------------------
000095D4 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000095D8 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000095DC 0000                       		dc.w byte_8EF7-Map_obj27
000095DE 01                         byte_8ED0:	dc.b 1
000095DF F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000095E4 01                         byte_8ED6:	dc.b 1
000095E5 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000095EA 01                         byte_8EDC:	dc.b 1
000095EB F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000095F0 04                         byte_8EE2:	dc.b 4
000095F1 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000095F6 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000095FB 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009600 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009605 04                         byte_8EF7:	dc.b 4
00009606 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000960B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009610 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009615 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000961A                            		even
0000961A                            ; ---------------------------------------------------------------------------
0000961A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000961A                            ; ---------------------------------------------------------------------------
0000961A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000961C 0000                       		dc.w byte_8F16-Map_obj3F
0000961E 0000                       		dc.w byte_8F1C-Map_obj3F
00009620 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009622 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009624 01                         byte_8F16:	dc.b 1
00009625 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000962A 01                         byte_8F1C:	dc.b 1
0000962B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009630                            		even
00009630                            ; ===========================================================================
00009630                            ; ---------------------------------------------------------------------------
00009630                            ; Object 28 - animals
00009630                            ; ---------------------------------------------------------------------------
00009630                            
00009630                            Obj28:					; XREF: Obj_Index
00009630 7000                       		moveq	#0,d0
00009632 1028 0024                  		move.b	$24(a0),d0
00009636 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000963A 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000963E                            ; ===========================================================================
0000963E 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009642 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009646 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000964A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000964E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009652 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009656 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000965A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000965E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009662 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009666 0000                       		dc.w loc_92D6-Obj28_Index
00009668                            
00009668 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009674                            
00009674 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009678 0000 0000                  		dc.l Map_obj28
0000967C FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009680 0000 0000                  		dc.l Map_obj28a		; mappings address
00009684 FE80 FD00                  		dc.w $FE80, $FD00
00009688 0000 0000                  		dc.l Map_obj28
0000968C FEC0 FE80                  		dc.w $FEC0, $FE80
00009690 0000 0000                  		dc.l Map_obj28a
00009694 FE40 FD00                  		dc.w $FE40, $FD00
00009698 0000 0000                  		dc.l Map_obj28b
0000969C FD00 FC00                  		dc.w $FD00, $FC00
000096A0 0000 0000                  		dc.l Map_obj28a
000096A4 FD80 FC80                  		dc.w $FD80, $FC80
000096A8 0000 0000                  		dc.l Map_obj28b
000096AC                            
000096AC FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000096BC FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000096CC FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000096D8                            
000096D8 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000096EC 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009700 0000 0000                  		dc.l Map_obj28b
00009704                            
00009704 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009716 0565 05B3                  		dc.w $565, $5B3
0000971A                            ; ===========================================================================
0000971A                            
0000971A                            Obj28_Ending:				; XREF: Obj28_Index
0000971A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000971E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009722 7000                       		moveq	#0,d0
00009724 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009728 D040                       		add.w	d0,d0		; multiply d0 by 2
0000972A 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000972E 0440 0014                  		subi.w	#$14,d0
00009732 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009738 D040                       		add.w	d0,d0
0000973A 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009740 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009744 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000974A 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009750 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009756 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000975C 117C 000C 0016             		move.b	#$C,$16(a0)
00009762 117C 0004 0001             		move.b	#4,1(a0)
00009768 08E8 0000 0001             		bset	#0,1(a0)
0000976E 117C 0006 0018             		move.b	#6,$18(a0)
00009774 117C 0008 0019             		move.b	#8,$19(a0)
0000977A 117C 0007 001E             		move.b	#7,$1E(a0)
00009780 6000 0000                  		bra.w	DisplaySprite
00009784                            ; ===========================================================================
00009784                            
00009784                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009784 5428 0024                  		addq.b	#2,$24(a0)
00009788 6100 953C                  		bsr.w	RandomNumber
0000978C 0240 0001                  		andi.w	#1,d0
00009790 7200                       		moveq	#0,d1
00009792 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009796 D241                       		add.w	d1,d1
00009798 D240                       		add.w	d0,d1
0000979A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000979E 1031 1000                  		move.b	(a1,d1.w),d0
000097A2 1140 0030                  		move.b	d0,$30(a0)
000097A6 E748                       		lsl.w	#3,d0
000097A8 43FA FECA                  		lea	Obj28_Variables(pc),a1
000097AC D2C0                       		adda.w	d0,a1
000097AE 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000097B2 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000097B6 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000097BA 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000097C0 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000097C6 6700                       		beq.s	loc_90C0	; if yes, branch
000097C8 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000097CE                            
000097CE                            loc_90C0:
000097CE 117C 000C 0016             		move.b	#$C,$16(a0)
000097D4 117C 0004 0001             		move.b	#4,1(a0)
000097DA 08E8 0000 0001             		bset	#0,1(a0)
000097E0 117C 0006 0018             		move.b	#6,$18(a0)
000097E6 117C 0008 0019             		move.b	#8,$19(a0)
000097EC 117C 0007 001E             		move.b	#7,$1E(a0)
000097F2 117C 0002 001A             		move.b	#2,$1A(a0)
000097F8 317C FC00 0012             		move.w	#-$400,$12(a0)
000097FE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009802 6600                       		bne.s	loc_911C
00009804 6100 0000                  		bsr.w	SingleObjLoad
00009808 6600                       		bne.s	Obj28_Display
0000980A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000980E 3368 0008 0008             		move.w	8(a0),8(a1)
00009814 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000981A 3028 003E                  		move.w	$3E(a0),d0
0000981E E248                       		lsr.w	#1,d0
00009820 1340 001A                  		move.b	d0,$1A(a1)
00009824                            
00009824                            Obj28_Display:
00009824 6000 0000                  		bra.w	DisplaySprite
00009828                            ; ===========================================================================
00009828                            
00009828                            loc_911C:
00009828 117C 0012 0024             		move.b	#$12,$24(a0)
0000982E 4268 0010                  		clr.w	$10(a0)
00009832 6000 0000                  		bra.w	DisplaySprite
00009836                            ; ===========================================================================
00009836                            
00009836                            loc_912A:				; XREF: Obj28_Index
00009836 4A28 0001                  		tst.b	1(a0)
0000983A 6A00 0000                  		bpl.w	DeleteObject
0000983E 6100 0000                  		bsr.w	ObjectFall
00009842 4A68 0012                  		tst.w	$12(a0)
00009846 6B00                       		bmi.s	loc_9180
00009848 4EB9 0000 0000             		jsr	ObjHitFloor
0000984E 4A41                       		tst.w	d1
00009850 6A00                       		bpl.s	loc_9180
00009852 D368 000C                  		add.w	d1,$C(a0)
00009856 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000985C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009862 117C 0001 001A             		move.b	#1,$1A(a0)
00009868 1028 0030                  		move.b	$30(a0),d0
0000986C D000                       		add.b	d0,d0
0000986E 5800                       		addq.b	#4,d0
00009870 1140 0024                  		move.b	d0,$24(a0)
00009874 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009878 6700                       		beq.s	loc_9180
0000987A 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009880 6700                       		beq.s	loc_9180
00009882 4468 0010                  		neg.w	$10(a0)
00009886 0868 0000 0001             		bchg	#0,1(a0)
0000988C                            
0000988C                            loc_9180:
0000988C 6000 0000                  		bra.w	DisplaySprite
00009890                            ; ===========================================================================
00009890                            
00009890                            loc_9184:				; XREF: Obj28_Index
00009890 6100 0000                  		bsr.w	ObjectFall
00009894 117C 0001 001A             		move.b	#1,$1A(a0)
0000989A 4A68 0012                  		tst.w	$12(a0)
0000989E 6B00                       		bmi.s	loc_91AE
000098A0 117C 0000 001A             		move.b	#0,$1A(a0)
000098A6 4EB9 0000 0000             		jsr	ObjHitFloor
000098AC 4A41                       		tst.w	d1
000098AE 6A00                       		bpl.s	loc_91AE
000098B0 D368 000C                  		add.w	d1,$C(a0)
000098B4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098BA                            
000098BA                            loc_91AE:
000098BA 4A28 0028                  		tst.b	$28(a0)
000098BE 6600                       		bne.s	loc_9224
000098C0 4A28 0001                  		tst.b	1(a0)
000098C4 6A00 0000                  		bpl.w	DeleteObject
000098C8 6000 0000                  		bra.w	DisplaySprite
000098CC                            ; ===========================================================================
000098CC                            
000098CC                            loc_91C0:				; XREF: Obj28_Index
000098CC 6100 0000                  		bsr.w	SpeedToPos
000098D0 0668 0018 0012             		addi.w	#$18,$12(a0)
000098D6 4A68 0012                  		tst.w	$12(a0)
000098DA 6B00                       		bmi.s	loc_91FC
000098DC 4EB9 0000 0000             		jsr	ObjHitFloor
000098E2 4A41                       		tst.w	d1
000098E4 6A00                       		bpl.s	loc_91FC
000098E6 D368 000C                  		add.w	d1,$C(a0)
000098EA 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098F0 4A28 0028                  		tst.b	$28(a0)
000098F4 6700                       		beq.s	loc_91FC
000098F6 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000098FC 6700                       		beq.s	loc_91FC
000098FE 4468 0010                  		neg.w	$10(a0)
00009902 0868 0000 0001             		bchg	#0,1(a0)
00009908                            
00009908                            loc_91FC:
00009908 5328 001E                  		subq.b	#1,$1E(a0)
0000990C 6A00                       		bpl.s	loc_9212
0000990E 117C 0001 001E             		move.b	#1,$1E(a0)
00009914 5228 001A                  		addq.b	#1,$1A(a0)
00009918 0228 0001 001A             		andi.b	#1,$1A(a0)
0000991E                            
0000991E                            loc_9212:
0000991E 4A28 0028                  		tst.b	$28(a0)
00009922 6600                       		bne.s	loc_9224
00009924 4A28 0001                  		tst.b	1(a0)
00009928 6A00 0000                  		bpl.w	DeleteObject
0000992C 6000 0000                  		bra.w	DisplaySprite
00009930                            ; ===========================================================================
00009930                            
00009930                            loc_9224:				; XREF: Obj28_Index
00009930 3028 0008                  		move.w	8(a0),d0
00009934 9078 D008                  		sub.w	($FFFFD008).w,d0
00009938 6500                       		bcs.s	loc_923C
0000993A 0440 0180                  		subi.w	#$180,d0
0000993E 6A00                       		bpl.s	loc_923C
00009940 4A28 0001                  		tst.b	1(a0)
00009944 6A00 0000                  		bpl.w	DeleteObject
00009948                            
00009948                            loc_923C:
00009948 6000 0000                  		bra.w	DisplaySprite
0000994C                            ; ===========================================================================
0000994C                            
0000994C                            loc_9240:				; XREF: Obj28_Index
0000994C 4A28 0001                  		tst.b	1(a0)
00009950 6A00 0000                  		bpl.w	DeleteObject
00009954 5368 0036                  		subq.w	#1,$36(a0)
00009958 6600 0000                  		bne.w	loc_925C
0000995C 117C 0002 0024             		move.b	#2,$24(a0)
00009962 117C 0003 0018             		move.b	#3,$18(a0)
00009968                            
00009968                            loc_925C:
00009968 6000 0000                  		bra.w	DisplaySprite
0000996C                            ; ===========================================================================
0000996C                            
0000996C                            loc_9260:				; XREF: Obj28_Index
0000996C 6100 0000                  		bsr.w	sub_9404
00009970 6400                       		bcc.s	loc_927C
00009972 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009978 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000997E 117C 000E 0024             		move.b	#$E,$24(a0)
00009984 6000 FF46                  		bra.w	loc_91C0
00009988                            ; ===========================================================================
00009988                            
00009988                            loc_927C:
00009988 6000 FFA6                  		bra.w	loc_9224
0000998C                            ; ===========================================================================
0000998C                            
0000998C                            loc_9280:				; XREF: Obj28_Index
0000998C 6100 0000                  		bsr.w	sub_9404
00009990 6A00                       		bpl.s	loc_92B6
00009992 4268 0010                  		clr.w	$10(a0)
00009996 4268 0032                  		clr.w	$32(a0)
0000999A 6100 0000                  		bsr.w	SpeedToPos
0000999E 0668 0018 0012             		addi.w	#$18,$12(a0)
000099A4 6100 0000                  		bsr.w	loc_93C4
000099A8 6100 0000                  		bsr.w	loc_93EC
000099AC 5328 001E                  		subq.b	#1,$1E(a0)
000099B0 6A00                       		bpl.s	loc_92B6
000099B2 117C 0001 001E             		move.b	#1,$1E(a0)
000099B8 5228 001A                  		addq.b	#1,$1A(a0)
000099BC 0228 0001 001A             		andi.b	#1,$1A(a0)
000099C2                            
000099C2                            loc_92B6:
000099C2 6000 FF6C                  		bra.w	loc_9224
000099C6                            ; ===========================================================================
000099C6                            
000099C6                            loc_92BA:				; XREF: Obj28_Index
000099C6 6100 0000                  		bsr.w	sub_9404
000099CA 6A00                       		bpl.s	loc_9310
000099CC 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099D2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099D8 117C 0004 0024             		move.b	#4,$24(a0)
000099DE 6000 FEB0                  		bra.w	loc_9184
000099E2                            ; ===========================================================================
000099E2                            
000099E2                            loc_92D6:				; XREF: Obj28_Index
000099E2 6100 0000                  		bsr.w	ObjectFall
000099E6 117C 0001 001A             		move.b	#1,$1A(a0)
000099EC 4A68 0012                  		tst.w	$12(a0)
000099F0 6B00                       		bmi.s	loc_9310
000099F2 117C 0000 001A             		move.b	#0,$1A(a0)
000099F8 4EB9 0000 0000             		jsr	ObjHitFloor
000099FE 4A41                       		tst.w	d1
00009A00 6A00                       		bpl.s	loc_9310
00009A02 4628 0029                  		not.b	$29(a0)
00009A06 6600                       		bne.s	loc_9306
00009A08 4468 0010                  		neg.w	$10(a0)
00009A0C 0868 0000 0001             		bchg	#0,1(a0)
00009A12                            
00009A12                            loc_9306:
00009A12 D368 000C                  		add.w	d1,$C(a0)
00009A16 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A1C                            
00009A1C                            loc_9310:
00009A1C 6000 FF12                  		bra.w	loc_9224
00009A20                            ; ===========================================================================
00009A20                            
00009A20                            loc_9314:				; XREF: Obj28_Index
00009A20 6100 0000                  		bsr.w	sub_9404
00009A24 6A00                       		bpl.s	loc_932E
00009A26 4268 0010                  		clr.w	$10(a0)
00009A2A 4268 0032                  		clr.w	$32(a0)
00009A2E 6100 0000                  		bsr.w	ObjectFall
00009A32 6100 0000                  		bsr.w	loc_93C4
00009A36 6100 0000                  		bsr.w	loc_93EC
00009A3A                            
00009A3A                            loc_932E:
00009A3A 6000 FEF4                  		bra.w	loc_9224
00009A3E                            ; ===========================================================================
00009A3E                            
00009A3E                            loc_9332:				; XREF: Obj28_Index
00009A3E 6100 0000                  		bsr.w	sub_9404
00009A42 6A00                       		bpl.s	loc_936C
00009A44 6100 0000                  		bsr.w	ObjectFall
00009A48 117C 0001 001A             		move.b	#1,$1A(a0)
00009A4E 4A68 0012                  		tst.w	$12(a0)
00009A52 6B00                       		bmi.s	loc_936C
00009A54 117C 0000 001A             		move.b	#0,$1A(a0)
00009A5A 4EB9 0000 0000             		jsr	ObjHitFloor
00009A60 4A41                       		tst.w	d1
00009A62 6A00                       		bpl.s	loc_936C
00009A64 4468 0010                  		neg.w	$10(a0)
00009A68 0868 0000 0001             		bchg	#0,1(a0)
00009A6E D368 000C                  		add.w	d1,$C(a0)
00009A72 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A78                            
00009A78                            loc_936C:
00009A78 6000 FEB6                  		bra.w	loc_9224
00009A7C                            ; ===========================================================================
00009A7C                            
00009A7C                            loc_9370:				; XREF: Obj28_Index
00009A7C 6100 0000                  		bsr.w	sub_9404
00009A80 6A00                       		bpl.s	loc_93C0
00009A82 6100 0000                  		bsr.w	SpeedToPos
00009A86 0668 0018 0012             		addi.w	#$18,$12(a0)
00009A8C 4A68 0012                  		tst.w	$12(a0)
00009A90 6B00                       		bmi.s	loc_93AA
00009A92 4EB9 0000 0000             		jsr	ObjHitFloor
00009A98 4A41                       		tst.w	d1
00009A9A 6A00                       		bpl.s	loc_93AA
00009A9C 4628 0029                  		not.b	$29(a0)
00009AA0 6600                       		bne.s	loc_93A0
00009AA2 4468 0010                  		neg.w	$10(a0)
00009AA6 0868 0000 0001             		bchg	#0,1(a0)
00009AAC                            
00009AAC                            loc_93A0:
00009AAC D368 000C                  		add.w	d1,$C(a0)
00009AB0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AB6                            
00009AB6                            loc_93AA:
00009AB6 5328 001E                  		subq.b	#1,$1E(a0)
00009ABA 6A00                       		bpl.s	loc_93C0
00009ABC 117C 0001 001E             		move.b	#1,$1E(a0)
00009AC2 5228 001A                  		addq.b	#1,$1A(a0)
00009AC6 0228 0001 001A             		andi.b	#1,$1A(a0)
00009ACC                            
00009ACC                            loc_93C0:
00009ACC 6000 FE62                  		bra.w	loc_9224
00009AD0                            ; ===========================================================================
00009AD0                            
00009AD0                            loc_93C4:
00009AD0 117C 0001 001A             		move.b	#1,$1A(a0)
00009AD6 4A68 0012                  		tst.w	$12(a0)
00009ADA 6B00                       		bmi.s	locret_93EA
00009ADC 117C 0000 001A             		move.b	#0,$1A(a0)
00009AE2 4EB9 0000 0000             		jsr	ObjHitFloor
00009AE8 4A41                       		tst.w	d1
00009AEA 6A00                       		bpl.s	locret_93EA
00009AEC D368 000C                  		add.w	d1,$C(a0)
00009AF0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AF6                            
00009AF6                            locret_93EA:
00009AF6 4E75                       		rts	
00009AF8                            ; ===========================================================================
00009AF8                            
00009AF8                            loc_93EC:
00009AF8 08E8 0000 0001             		bset	#0,1(a0)
00009AFE 3028 0008                  		move.w	8(a0),d0
00009B02 9078 D008                  		sub.w	($FFFFD008).w,d0
00009B06 6400                       		bcc.s	locret_9402
00009B08 08A8 0000 0001             		bclr	#0,1(a0)
00009B0E                            
00009B0E                            locret_9402:
00009B0E 4E75                       		rts	
00009B10                            
00009B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B10                            
00009B10                            
00009B10                            sub_9404:
00009B10 3038 D008                  		move.w	($FFFFD008).w,d0
00009B14 9068 0008                  		sub.w	8(a0),d0
00009B18 0440 00B8                  		subi.w	#$B8,d0
00009B1C 4E75                       		rts	
00009B1E                            ; End of function sub_9404
00009B1E                            
00009B1E                            ; ===========================================================================
00009B1E                            ; ---------------------------------------------------------------------------
00009B1E                            ; Object 29 - points that appear when you destroy something
00009B1E                            ; ---------------------------------------------------------------------------
00009B1E                            
00009B1E                            Obj29:					; XREF: Obj_Index
00009B1E 7000                       		moveq	#0,d0
00009B20 1028 0024                  		move.b	$24(a0),d0
00009B24 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009B28 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009B2C 6000 0000                  		bra.w	DisplaySprite
00009B30                            ; ===========================================================================
00009B30 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009B32 0000                       		dc.w Obj29_Slower-Obj29_Index
00009B34                            ; ===========================================================================
00009B34                            
00009B34                            Obj29_Main:				; XREF: Obj29_Index
00009B34 5428 0024                  		addq.b	#2,$24(a0)
00009B38 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009B40 317C 2797 0002             		move.w	#$2797,2(a0)
00009B46 117C 0004 0001             		move.b	#4,1(a0)
00009B4C 117C 0001 0018             		move.b	#1,$18(a0)
00009B52 117C 0008 0019             		move.b	#8,$19(a0)
00009B58 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009B5E                            
00009B5E                            Obj29_Slower:				; XREF: Obj29_Index
00009B5E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009B62 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009B66 6100 0000                  		bsr.w	SpeedToPos
00009B6A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009B70 4E75                       		rts	
00009B72                            ; ===========================================================================
00009B72                            ; ---------------------------------------------------------------------------
00009B72                            ; Sprite mappings - animals
00009B72                            ; ---------------------------------------------------------------------------
00009B72                            Map_obj28:
00009B72                            	include "_maps\obj28.asm"
00009B72                            ; ---------------------------------------------------------------------------
00009B72                            ; Sprite mappings - animals
00009B72                            ; ---------------------------------------------------------------------------
00009B72 0000                       		dc.w byte_9472-Map_obj28
00009B74 0000                       		dc.w byte_9478-Map_obj28
00009B76 0000                       		dc.w byte_946C-Map_obj28
00009B78 01                         byte_946C:	dc.b 1
00009B79 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B7E 01                         byte_9472:	dc.b 1
00009B7F F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009B84 01                         byte_9478:	dc.b 1
00009B85 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009B8A                            		even
00009B8A                            		even
00009B8A                            
00009B8A                            Map_obj28a:
00009B8A                            	include "_maps\obj28a.asm"
00009B8A                            ; ---------------------------------------------------------------------------
00009B8A                            ; Sprite mappings - animals
00009B8A                            ; ---------------------------------------------------------------------------
00009B8A 0000                       		dc.w byte_948A-Map_obj28a
00009B8C 0000                       		dc.w byte_9490-Map_obj28a
00009B8E 0000                       		dc.w byte_9484-Map_obj28a
00009B90 01                         byte_9484:	dc.b 1
00009B91 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B96 01                         byte_948A:	dc.b 1
00009B97 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009B9C 01                         byte_9490:	dc.b 1
00009B9D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009BA2                            		even
00009BA2                            		even
00009BA2                            
00009BA2                            Map_obj28b:
00009BA2                            	include "_maps\obj28b.asm"
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2                            ; Sprite mappings - animals
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2 0000                       		dc.w byte_94A2-Map_obj28b
00009BA4 0000                       		dc.w byte_94A8-Map_obj28b
00009BA6 0000                       		dc.w byte_949C-Map_obj28b
00009BA8 01                         byte_949C:	dc.b 1
00009BA9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BAE 01                         byte_94A2:	dc.b 1
00009BAF FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009BB4 01                         byte_94A8:	dc.b 1
00009BB5 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009BBA                            		even
00009BBA                            		even
00009BBA                            
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA                            ; Sprite mappings - points that	appear when you	destroy	something
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA                            Map_obj29:
00009BBA                            	include "_maps\obj29.asm"
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA                            ; Sprite mappings - points that	appear when you	destroy	something
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009BBE 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009BC2 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009BC6 0000                       		dc.w byte_94E5-Map_obj29
00009BC8 01                         byte_94BC:	dc.b 1
00009BC9 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009BCE 01                         byte_94C2:	dc.b 1
00009BCF FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009BD4 01                         byte_94C8:	dc.b 1
00009BD5 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009BDA 01                         byte_94CE:	dc.b 1
00009BDB FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009BE0 01                         byte_94D4:	dc.b 1
00009BE1 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009BE6 02                         byte_94DA:	dc.b 2
00009BE7 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009BEC FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009BF1 02                         byte_94E5:	dc.b 2
00009BF2 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009BF7 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009BFC                            		even
00009BFC                            		even
00009BFC                            
00009BFC                            ; ===========================================================================
00009BFC                            ; ---------------------------------------------------------------------------
00009BFC                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009BFC                            ; ---------------------------------------------------------------------------
00009BFC                            
00009BFC                            Obj1F:					; XREF: Obj_Index
00009BFC 7000                       		moveq	#0,d0
00009BFE 1028 0024                  		move.b	$24(a0),d0
00009C02 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009C06 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009C0A                            ; ===========================================================================
00009C0A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009C0C 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009C0E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009C10 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009C12 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009C14                            ; ===========================================================================
00009C14                            
00009C14                            Obj1F_Main:				; XREF: Obj1F_Index
00009C14 117C 0010 0016             		move.b	#$10,$16(a0)
00009C1A 117C 0008 0017             		move.b	#8,$17(a0)
00009C20 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009C28 317C 0400 0002             		move.w	#$400,2(a0)
00009C2E 117C 0004 0001             		move.b	#4,1(a0)
00009C34 117C 0003 0018             		move.b	#3,$18(a0)
00009C3A 117C 0006 0020             		move.b	#6,$20(a0)
00009C40 117C 0015 0019             		move.b	#$15,$19(a0)
00009C46 6100 0000                  		bsr.w	ObjectFall
00009C4A 4EB9 0000 0000             		jsr	ObjHitFloor
00009C50 4A41                       		tst.w	d1
00009C52 6A00                       		bpl.s	locret_955A
00009C54 D368 000C                  		add.w	d1,$C(a0)
00009C58 1143 0026                  		move.b	d3,$26(a0)
00009C5C 317C 0000 0012             		move.w	#0,$12(a0)
00009C62 5428 0024                  		addq.b	#2,$24(a0)
00009C66                            
00009C66                            locret_955A:
00009C66 4E75                       		rts	
00009C68                            ; ===========================================================================
00009C68                            
00009C68                            Obj1F_Action:				; XREF: Obj1F_Index
00009C68 7000                       		moveq	#0,d0
00009C6A 1028 0025                  		move.b	$25(a0),d0
00009C6E 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009C72 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009C76 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009C7C 6100 0000                  		bsr.w	AnimateSprite
00009C80 6000 0000                  		bra.w	MarkObjGone
00009C84                            ; ===========================================================================
00009C84 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009C86 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009C88                            ; ===========================================================================
00009C88                            
00009C88                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009C88 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009C8C 6A00                       		bpl.s	locret_95B6
00009C8E 4A28 0001                  		tst.b	1(a0)
00009C92 6A00                       		bpl.s	Obj1F_Move
00009C94 0868 0001 0032             		bchg	#1,$32(a0)
00009C9A 6600                       		bne.s	Obj1F_MakeFire
00009C9C                            
00009C9C                            Obj1F_Move:
00009C9C 5428 0025                  		addq.b	#2,$25(a0)
00009CA0 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009CA6 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009CAC 6100 0000                  		bsr.w	Obj1F_SetAni
00009CB0 5600                       		addq.b	#3,d0
00009CB2 1140 001C                  		move.b	d0,$1C(a0)
00009CB6 0868 0000 0022             		bchg	#0,$22(a0)
00009CBC 6600                       		bne.s	locret_95B6
00009CBE 4468 0010                  		neg.w	$10(a0)		; change direction
00009CC2                            
00009CC2                            locret_95B6:
00009CC2 4E75                       		rts	
00009CC4                            ; ===========================================================================
00009CC4                            
00009CC4                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009CC4 317C 003B 0030             		move.w	#$3B,$30(a0)
00009CCA 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009CD0 6100 0000                  		bsr.w	SingleObjLoad
00009CD4 6600                       		bne.s	Obj1F_MakeFire2
00009CD6 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009CDA 137C 0006 0024             		move.b	#6,$24(a1)
00009CE0 3368 0008 0008             		move.w	8(a0),8(a1)
00009CE6 0469 0010 0008             		subi.w	#$10,8(a1)
00009CEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CF2 337C FF00 0010             		move.w	#-$100,$10(a1)
00009CF8                            
00009CF8                            Obj1F_MakeFire2:
00009CF8 6100 0000                  		bsr.w	SingleObjLoad
00009CFC 6600                       		bne.s	locret_9618
00009CFE 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009D02 137C 0006 0024             		move.b	#6,$24(a1)
00009D08 3368 0008 0008             		move.w	8(a0),8(a1)
00009D0E 0669 0010 0008             		addi.w	#$10,8(a1)
00009D14 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D1A 337C 0100 0010             		move.w	#$100,$10(a1)
00009D20                            
00009D20                            locret_9618:
00009D20 4E75                       		rts	
00009D22                            ; ===========================================================================
00009D22                            
00009D22                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009D22 5368 0030                  		subq.w	#1,$30(a0)
00009D26 6B00                       		bmi.s	loc_966E
00009D28 6100 0000                  		bsr.w	SpeedToPos
00009D2C 0868 0000 0032             		bchg	#0,$32(a0)
00009D32 6600                       		bne.s	loc_9654
00009D34 3628 0008                  		move.w	8(a0),d3
00009D38 0643 0010                  		addi.w	#$10,d3
00009D3C 0828 0000 0022             		btst	#0,$22(a0)
00009D42 6700                       		beq.s	loc_9640
00009D44 0443 0020                  		subi.w	#$20,d3
00009D48                            
00009D48                            loc_9640:
00009D48 4EB9 0000 0000             		jsr	ObjHitFloor2
00009D4E 0C41 FFF8                  		cmpi.w	#-8,d1
00009D52 6D00                       		blt.s	loc_966E
00009D54 0C41 000C                  		cmpi.w	#$C,d1
00009D58 6C00                       		bge.s	loc_966E
00009D5A 4E75                       		rts	
00009D5C                            ; ===========================================================================
00009D5C                            
00009D5C                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009D5C 4EB9 0000 0000             		jsr	ObjHitFloor
00009D62 D368 000C                  		add.w	d1,$C(a0)
00009D66 1143 0026                  		move.b	d3,$26(a0)
00009D6A 6100 0000                  		bsr.w	Obj1F_SetAni
00009D6E 5600                       		addq.b	#3,d0
00009D70 1140 001C                  		move.b	d0,$1C(a0)
00009D74 4E75                       		rts	
00009D76                            ; ===========================================================================
00009D76                            
00009D76                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009D76 5528 0025                  		subq.b	#2,$25(a0)
00009D7A 317C 003B 0030             		move.w	#59,$30(a0)
00009D80 317C 0000 0010             		move.w	#0,$10(a0)
00009D86 6100 0000                  		bsr.w	Obj1F_SetAni
00009D8A 1140 001C                  		move.b	d0,$1C(a0)
00009D8E 4E75                       		rts	
00009D90                            ; ---------------------------------------------------------------------------
00009D90                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009D90                            ; ---------------------------------------------------------------------------
00009D90                            
00009D90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D90                            
00009D90                            
00009D90                            Obj1F_SetAni:				; XREF: loc_966E
00009D90 7000                       		moveq	#0,d0
00009D92 1628 0026                  		move.b	$26(a0),d3
00009D96 6B00                       		bmi.s	loc_96A4
00009D98 0C03 0006                  		cmpi.b	#6,d3
00009D9C 6500                       		bcs.s	locret_96A2
00009D9E 7001                       		moveq	#1,d0
00009DA0 0828 0000 0022             		btst	#0,$22(a0)
00009DA6 6600                       		bne.s	locret_96A2
00009DA8 7002                       		moveq	#2,d0
00009DAA                            
00009DAA                            locret_96A2:
00009DAA 4E75                       		rts	
00009DAC                            ; ===========================================================================
00009DAC                            
00009DAC                            loc_96A4:				; XREF: Obj1F_SetAni
00009DAC 0C03 00FA                  		cmpi.b	#-6,d3
00009DB0 6200                       		bhi.s	locret_96B6
00009DB2 7002                       		moveq	#2,d0
00009DB4 0828 0000 0022             		btst	#0,$22(a0)
00009DBA 6600                       		bne.s	locret_96B6
00009DBC 7001                       		moveq	#1,d0
00009DBE                            
00009DBE                            locret_96B6:
00009DBE 4E75                       		rts	
00009DC0                            ; End of function Obj1F_SetAni
00009DC0                            
00009DC0                            ; ===========================================================================
00009DC0                            
00009DC0                            Obj1F_Delete:				; XREF: Obj1F_Index
00009DC0 6100 0000                  		bsr.w	DeleteObject
00009DC4 4E75                       		rts	
00009DC6                            ; ===========================================================================
00009DC6                            ; ---------------------------------------------------------------------------
00009DC6                            ; Sub-object - missile that the	Crabmeat throws
00009DC6                            ; ---------------------------------------------------------------------------
00009DC6                            
00009DC6                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009DC6 5428 0024                  		addq.b	#2,$24(a0)
00009DCA 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009DD2 317C 0400 0002             		move.w	#$400,2(a0)
00009DD8 117C 0004 0001             		move.b	#4,1(a0)
00009DDE 117C 0003 0018             		move.b	#3,$18(a0)
00009DE4 117C 0087 0020             		move.b	#$87,$20(a0)
00009DEA 117C 0008 0019             		move.b	#8,$19(a0)
00009DF0 317C FC00 0012             		move.w	#-$400,$12(a0)
00009DF6 117C 0007 001C             		move.b	#7,$1C(a0)
00009DFC                            
00009DFC                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009DFC 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E02 6100 0000                  		bsr.w	AnimateSprite
00009E06 6100 0000                  		bsr.w	ObjectFall
00009E0A 6100 0000                  		bsr.w	DisplaySprite
00009E0E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E12 0640 00E0                  		addi.w	#$E0,d0
00009E16 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E1A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009E1C 4E75                       		rts	
00009E1E                            ; ===========================================================================
00009E1E                            
00009E1E                            Obj1F_Delete2:
00009E1E 6000 0000                  		bra.w	DeleteObject
00009E22                            ; ===========================================================================
00009E22                            Ani_obj1F:
00009E22                            	include "_anim\obj1F.asm"
00009E22                            ; ---------------------------------------------------------------------------
00009E22                            ; Animation script - Crabmeat enemy
00009E22                            ; ---------------------------------------------------------------------------
00009E22 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009E28 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009E2E 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009E32 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009E36 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009E3A 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009E3E 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009E44 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009E4A 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009E50 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009E54 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009E58                            		even
00009E58                            		even
00009E58                            
00009E58                            ; ---------------------------------------------------------------------------
00009E58                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009E58                            ; ---------------------------------------------------------------------------
00009E58                            Map_obj1F:
00009E58                            	include "_maps\obj1F.asm"
00009E58                            Map_1514:
00009E58 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009E5A 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009E5C 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009E5E 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009E60 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009E62 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009E64 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009E66 03                         Map_1514_E: 	dc.b $3
00009E67 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E6C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E71 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E76 03                         Map_1514_1E: 	dc.b $3
00009E77 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E7C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E81 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E86 03                         Map_1514_2E: 	dc.b $3
00009E87 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E8C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E91 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E96 03                         Map_1514_3E: 	dc.b $3
00009E97 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E9C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EA1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EA6 03                         Map_1514_4E: 	dc.b $3
00009EA7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EAC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EB1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EB6 01                         Map_1514_5E: 	dc.b $1
00009EB7 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009EBC 01                         Map_1514_64: 	dc.b $1
00009EBD F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009EC2                            	even
00009EC2                            	even
00009EC2                            
00009EC2                            ; ===========================================================================
00009EC2                            ; ---------------------------------------------------------------------------
00009EC2                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009EC2                            ; ---------------------------------------------------------------------------
00009EC2                            
00009EC2                            Obj22:					; XREF: Obj_Index
00009EC2 7000                       		moveq	#0,d0
00009EC4 1028 0024                  		move.b	$24(a0),d0
00009EC8 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009ECC 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009ED0                            ; ===========================================================================
00009ED0 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009ED2 0000                       		dc.w Obj22_Action-Obj22_Index
00009ED4 0000                       		dc.w Obj22_Delete-Obj22_Index
00009ED6                            ; ===========================================================================
00009ED6                            
00009ED6                            Obj22_Main:				; XREF: Obj22_Index
00009ED6 5428 0024                  		addq.b	#2,$24(a0)
00009EDA 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009EE2 317C 0444 0002             		move.w	#$444,2(a0)
00009EE8 117C 0004 0001             		move.b	#4,1(a0)
00009EEE 117C 0003 0018             		move.b	#3,$18(a0)
00009EF4 117C 0008 0020             		move.b	#8,$20(a0)
00009EFA 117C 0018 0019             		move.b	#$18,$19(a0)
00009F00                            
00009F00                            Obj22_Action:				; XREF: Obj22_Index
00009F00 7000                       		moveq	#0,d0
00009F02 1028 0025                  		move.b	$25(a0),d0
00009F06 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009F0A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009F0E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009F14 6100 0000                  		bsr.w	AnimateSprite
00009F18 6000 0000                  		bra.w	MarkObjGone
00009F1C                            ; ===========================================================================
00009F1C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009F1E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009F20                            ; ===========================================================================
00009F20                            
00009F20                            Obj22_Move:				; XREF: Obj22_Index2
00009F20 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F24 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009F26 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009F2C 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009F2E 5428 0025                  		addq.b	#2,$25(a0)
00009F32 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009F38 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009F3E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009F44 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F4A 6600                       		bne.s	locret_986C	; if not, branch
00009F4C 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009F50                            
00009F50                            locret_986C:
00009F50 4E75                       		rts	
00009F52                            ; ===========================================================================
00009F52                            
00009F52                            Obj22_Fire:				; XREF: Obj22_Move
00009F52 6100 0000                  		bsr.w	SingleObjLoad
00009F56 6600                       		bne.s	locret_98D0
00009F58 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009F5C 3368 0008 0008             		move.w	8(a0),8(a1)
00009F62 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F68 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009F6E 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009F74 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009F7A 303C 0018                  		move.w	#$18,d0
00009F7E 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F84 6600                       		bne.s	loc_98AA	; if not, branch
00009F86 4440                       		neg.w	d0
00009F88 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009F8C                            
00009F8C                            loc_98AA:
00009F8C D169 0008                  		add.w	d0,8(a1)
00009F90 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009F96 337C 000E 0032             		move.w	#$E,$32(a1)
00009F9C 2348 003C                  		move.l	a0,$3C(a1)
00009FA0 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009FA6 317C 003B 0032             		move.w	#$3B,$32(a0)
00009FAC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009FB2                            
00009FB2                            locret_98D0:
00009FB2 4E75                       		rts	
00009FB4                            ; ===========================================================================
00009FB4                            
00009FB4                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009FB4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009FB8 6B00                       		bmi.s	Obj22_ChgDir
00009FBA 6100 0000                  		bsr.w	SpeedToPos
00009FBE 4A28 0034                  		tst.b	$34(a0)
00009FC2 6600                       		bne.s	locret_992A
00009FC4 3038 D008                  		move.w	($FFFFD008).w,d0
00009FC8 9068 0008                  		sub.w	8(a0),d0
00009FCC 6A00                       		bpl.s	Obj22_SetNrSonic
00009FCE 4440                       		neg.w	d0
00009FD0                            
00009FD0                            Obj22_SetNrSonic:
00009FD0 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009FD4 6400                       		bcc.s	locret_992A	; if not, branch
00009FD6 4A28 0001                  		tst.b	1(a0)
00009FDA 6A00                       		bpl.s	locret_992A
00009FDC 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009FE2 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009FE8 6000                       		bra.s	Obj22_Stop
00009FEA                            ; ===========================================================================
00009FEA                            
00009FEA                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009FEA 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009FF0 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009FF6 317C 003B 0032             		move.w	#59,$32(a0)
00009FFC                            
00009FFC                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009FFC 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A000 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A006 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A00C                            
0000A00C                            locret_992A:
0000A00C 4E75                       		rts	
0000A00E                            ; ===========================================================================
0000A00E                            
0000A00E                            Obj22_Delete:				; XREF: Obj22_Index
0000A00E 6100 0000                  		bsr.w	DeleteObject
0000A012 4E75                       		rts	
0000A014                            ; ===========================================================================
0000A014                            ; ---------------------------------------------------------------------------
0000A014                            ; Object 23 - missile that Buzz	Bomber throws
0000A014                            ; ---------------------------------------------------------------------------
0000A014                            
0000A014                            Obj23:					; XREF: Obj_Index
0000A014 7000                       		moveq	#0,d0
0000A016 1028 0024                  		move.b	$24(a0),d0
0000A01A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A01E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A022                            ; ===========================================================================
0000A022 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A024 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A026 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A028 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A02A 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A02C                            ; ===========================================================================
0000A02C                            
0000A02C                            Obj23_Main:				; XREF: Obj23_Index
0000A02C 5368 0032                  		subq.w	#1,$32(a0)
0000A030 6A00                       		bpl.s	Obj23_ChkCancel
0000A032 5428 0024                  		addq.b	#2,$24(a0)
0000A036 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A03E 317C 2444 0002             		move.w	#$2444,2(a0)
0000A044 117C 0004 0001             		move.b	#4,1(a0)
0000A04A 117C 0003 0018             		move.b	#3,$18(a0)
0000A050 117C 0008 0019             		move.b	#8,$19(a0)
0000A056 0228 0003 0022             		andi.b	#3,$22(a0)
0000A05C 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A060 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A062 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A068 117C 0087 0020             		move.b	#$87,$20(a0)
0000A06E 117C 0001 001C             		move.b	#1,$1C(a0)
0000A074 6000                       		bra.s	Obj23_Animate2
0000A076                            ; ===========================================================================
0000A076                            
0000A076                            Obj23_Animate:				; XREF: Obj23_Index
0000A076 6100                       		bsr.s	Obj23_ChkCancel
0000A078 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A07E 6100 0000                  		bsr.w	AnimateSprite
0000A082 6000 0000                  		bra.w	DisplaySprite
0000A086                            ; ---------------------------------------------------------------------------
0000A086                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A086                            ; destroyed, and if it has, then cancel	the missile
0000A086                            ; ---------------------------------------------------------------------------
0000A086                            
0000A086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A086                            
0000A086                            
0000A086                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A086 2268 003C                  		movea.l	$3C(a0),a1
0000A08A 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A08E 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A090 4E75                       		rts	
0000A092                            ; End of function Obj23_ChkCancel
0000A092                            
0000A092                            ; ===========================================================================
0000A092                            
0000A092                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A092 0828 0007 0022             		btst	#7,$22(a0)
0000A098 6600                       		bne.s	Obj23_Explode
0000A09A 117C 0087 0020             		move.b	#$87,$20(a0)
0000A0A0 117C 0001 001C             		move.b	#1,$1C(a0)
0000A0A6 6100 0000                  		bsr.w	SpeedToPos
0000A0AA 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0B0 6100 0000                  		bsr.w	AnimateSprite
0000A0B4 6100 0000                  		bsr.w	DisplaySprite
0000A0B8 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A0BC 0640 00E0                  		addi.w	#$E0,d0
0000A0C0 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A0C4 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A0C6 4E75                       		rts	
0000A0C8                            ; ===========================================================================
0000A0C8                            
0000A0C8                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A0C8 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A0CC 117C 0000 0024             		move.b	#0,$24(a0)
0000A0D2 6000 F2D4                  		bra.w	Obj24
0000A0D6                            ; ===========================================================================
0000A0D6                            
0000A0D6                            Obj23_Delete:				; XREF: Obj23_Index
0000A0D6 6100 0000                  		bsr.w	DeleteObject
0000A0DA 4E75                       		rts	
0000A0DC                            ; ===========================================================================
0000A0DC                            
0000A0DC                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A0DC 4A28 0001                  		tst.b	1(a0)
0000A0E0 6AF4                       		bpl.s	Obj23_Delete
0000A0E2 6100 0000                  		bsr.w	SpeedToPos
0000A0E6                            
0000A0E6                            Obj23_Animate2:				; XREF: Obj23_Main
0000A0E6 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0EC 6100 0000                  		bsr.w	AnimateSprite
0000A0F0 6100 0000                  		bsr.w	DisplaySprite
0000A0F4 4E75                       		rts	
0000A0F6                            ; ===========================================================================
0000A0F6                            Ani_obj22:
0000A0F6                            	include "_anim\obj22.asm"
0000A0F6                            ; ---------------------------------------------------------------------------
0000A0F6                            ; Animation script - Buzz Bomber enemy
0000A0F6                            ; ---------------------------------------------------------------------------
0000A0F6 0000                       		dc.w byte_9A1E-Ani_obj22
0000A0F8 0000                       		dc.w byte_9A22-Ani_obj22
0000A0FA 0000                       		dc.w byte_9A26-Ani_obj22
0000A0FC 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A100 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A104 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A108                            		even
0000A108                            		even
0000A108                            
0000A108                            Ani_obj23:
0000A108                            	include "_anim\obj23.asm"
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            ; Animation script - missile that Buzz Bomber throws
0000A108                            ; ---------------------------------------------------------------------------
0000A108 0000                       		dc.w byte_9A2E-Ani_obj23
0000A10A 0000                       		dc.w byte_9A32-Ani_obj23
0000A10C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A110 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A114                            		even
0000A114                            		even
0000A114                            
0000A114                            ; ---------------------------------------------------------------------------
0000A114                            ; Sprite mappings - Buzz Bomber	enemy
0000A114                            ; ---------------------------------------------------------------------------
0000A114                            Map_obj22:
0000A114                            	include "_maps\obj22.asm"
0000A114                            Map_e97a:
0000A114 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A116 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A118 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A11A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A11C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A11E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A120 06                         Map_e97a_C: 	dc.b $6
0000A121 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A126 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A12B 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A130 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A135 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A13A F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A13F 06                         Map_e97a_2B: 	dc.b $6
0000A140 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A145 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A14A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A14F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A154 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A159 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A15E 07                         Map_e97a_4A: 	dc.b $7
0000A15F 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A164 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A169 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A16E 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A173 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A178 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A17D F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A182 07                         Map_e97a_6E: 	dc.b $7
0000A183 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A188 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A18D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A192 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A197 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A19C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A1A1 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A1A6 06                         Map_e97a_92: 	dc.b $6
0000A1A7 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1AC 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1B1 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1B6 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1BB F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A1C0 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A1C5 04                         Map_e97a_B1: 	dc.b $4
0000A1C6 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1CB 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1D0 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1D5 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1DA                            	even
0000A1DA                            	even
0000A1DA                            
0000A1DA                            ; ---------------------------------------------------------------------------
0000A1DA                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1DA                            ; ---------------------------------------------------------------------------
0000A1DA                            Map_obj23:
0000A1DA                            	include "_maps\obj23.asm"
0000A1DA                            ; ---------------------------------------------------------------------------
0000A1DA                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1DA                            ; ---------------------------------------------------------------------------
0000A1DA 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A1DE 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A1E2 01                         byte_9B0E:	dc.b 1
0000A1E3 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A1E8 01                         byte_9B14:	dc.b 1
0000A1E9 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A1EE 01                         byte_9B1A:	dc.b 1
0000A1EF F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A1F4 01                         byte_9B20:	dc.b 1
0000A1F5 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A1FA                            		even
0000A1FA                            		even
0000A1FA                            
0000A1FA                            ; ===========================================================================
0000A1FA                            ; ---------------------------------------------------------------------------
0000A1FA                            ; Object 25 - rings
0000A1FA                            ; ---------------------------------------------------------------------------
0000A1FA                            
0000A1FA                            Obj25:					; XREF: Obj_Index
0000A1FA 7000                       		moveq	#0,d0
0000A1FC 1028 0024                  		move.b	$24(a0),d0
0000A200 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A204 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A208                            ; ===========================================================================
0000A208 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A20A 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A20C 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A20E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A210 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A212                            ; ---------------------------------------------------------------------------
0000A212                            ; Distances between rings (format: horizontal, vertical)
0000A212                            ; ---------------------------------------------------------------------------
0000A212 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A214 1800                       		dc.b $18, 0		; horizontal normal
0000A216 2000                       		dc.b $20, 0		; horizontal wide
0000A218 0010                       		dc.b 0,	$10		; vertical tight
0000A21A 0018                       		dc.b 0,	$18		; vertical normal
0000A21C 0020                       		dc.b 0,	$20		; vertical wide
0000A21E 1010                       		dc.b $10, $10		; diagonal
0000A220 1818                       		dc.b $18, $18
0000A222 2020                       		dc.b $20, $20
0000A224 F010                       		dc.b $F0, $10
0000A226 E818                       		dc.b $E8, $18
0000A228 E020                       		dc.b $E0, $20
0000A22A 1008                       		dc.b $10, 8
0000A22C 1810                       		dc.b $18, $10
0000A22E F008                       		dc.b $F0, 8
0000A230 E810                       		dc.b $E8, $10
0000A232                            ; ===========================================================================
0000A232                            
0000A232                            Obj25_Main:				; XREF: Obj25_Index
0000A232 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A236 7000                       		moveq	#0,d0
0000A238 1028 0023                  		move.b	$23(a0),d0
0000A23C 45F2 0002                  		lea	2(a2,d0.w),a2
0000A240 1812                       		move.b	(a2),d4
0000A242 1228 0028                  		move.b	$28(a0),d1
0000A246 1001                       		move.b	d1,d0
0000A248 0241 0007                  		andi.w	#7,d1
0000A24C 0C41 0007                  		cmpi.w	#7,d1
0000A250 6600                       		bne.s	loc_9B80
0000A252 7206                       		moveq	#6,d1
0000A254                            
0000A254                            loc_9B80:
0000A254 4841                       		swap	d1
0000A256 323C 0000                  		move.w	#0,d1
0000A25A E808                       		lsr.b	#4,d0
0000A25C D040                       		add.w	d0,d0
0000A25E 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A262 4885                       		ext.w	d5
0000A264 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A268 4886                       		ext.w	d6
0000A26A 2248                       		movea.l	a0,a1
0000A26C 3428 0008                  		move.w	8(a0),d2
0000A270 3628 000C                  		move.w	$C(a0),d3
0000A274 E20C                       		lsr.b	#1,d4
0000A276 6500                       		bcs.s	loc_9C02
0000A278 0892 0007                  		bclr	#7,(a2)
0000A27C 6000                       		bra.s	loc_9BBA
0000A27E                            ; ===========================================================================
0000A27E                            
0000A27E                            Obj25_MakeRings:
0000A27E 4841                       		swap	d1
0000A280 E20C                       		lsr.b	#1,d4
0000A282 6500                       		bcs.s	loc_9C02
0000A284 0892 0007                  		bclr	#7,(a2)
0000A288 6100 0000                  		bsr.w	SingleObjLoad
0000A28C 6600                       		bne.s	loc_9C0E
0000A28E                            
0000A28E                            loc_9BBA:				; XREF: Obj25_Main
0000A28E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A292 5429 0024                  		addq.b	#2,$24(a1)
0000A296 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A29A 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A2A0 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A2A4 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A2AC 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A2B2 137C 0004 0001             		move.b	#4,1(a1)
0000A2B8 137C 0002 0018             		move.b	#2,$18(a1)
0000A2BE 137C 0047 0020             		move.b	#$47,$20(a1)
0000A2C4 137C 0008 0019             		move.b	#8,$19(a1)
0000A2CA 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A2D0 1341 0034                  		move.b	d1,$34(a1)
0000A2D4                            
0000A2D4                            loc_9C02:
0000A2D4 5241                       		addq.w	#1,d1
0000A2D6 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A2D8 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A2DA 4841                       		swap	d1
0000A2DC 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A2E0                            
0000A2E0                            loc_9C0E:
0000A2E0 0812 0000                  		btst	#0,(a2)
0000A2E4 6600 0000                  		bne.w	DeleteObject
0000A2E8                            
0000A2E8                            Obj25_Animate:				; XREF: Obj25_Index
0000A2E8 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A2EE 6100 0000                  		bsr.w	DisplaySprite
0000A2F2 3028 0032                  		move.w	$32(a0),d0
0000A2F6 0240 FF80                  		andi.w	#$FF80,d0
0000A2FA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2FE 0441 0080                  		subi.w	#$80,d1
0000A302 0241 FF80                  		andi.w	#$FF80,d1
0000A306 9041                       		sub.w	d1,d0
0000A308 0C40 0280                  		cmpi.w	#$280,d0
0000A30C 6200                       		bhi.s	Obj25_Delete
0000A30E 4E75                       		rts	
0000A310                            ; ===========================================================================
0000A310                            
0000A310                            Obj25_Collect:				; XREF: Obj25_Index
0000A310 5428 0024                  		addq.b	#2,$24(a0)
0000A314 117C 0000 0020             		move.b	#0,$20(a0)
0000A31A 117C 0001 0018             		move.b	#1,$18(a0)
0000A320 6100 0000                  		bsr.w	CollectRing
0000A324 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A328 7000                       		moveq	#0,d0
0000A32A 1028 0023                  		move.b	$23(a0),d0
0000A32E 1228 0034                  		move.b	$34(a0),d1
0000A332 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A336                            
0000A336                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A336 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A33C 6100 0000                  		bsr.w	AnimateSprite
0000A340 6000 0000                  		bra.w	DisplaySprite
0000A344                            ; ===========================================================================
0000A344                            
0000A344                            Obj25_Delete:				; XREF: Obj25_Index
0000A344 6000 0000                  		bra.w	DeleteObject
0000A348                            
0000A348                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A348                            
0000A348                            
0000A348                            CollectRing:				; XREF: Obj25_Collect
0000A348 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A34C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A352 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A356 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A35C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A35E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A364 6700                       		beq.s	loc_9CA4
0000A366 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A36C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A36E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A374 6600                       		bne.s	Obj25_PlaySnd
0000A376                            
0000A376                            loc_9CA4:
0000A376 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A37A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A37E 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A382                            
0000A382                            Obj25_PlaySnd:
0000A382 4EF9 0000 15C0             		jmp	(PlaySound_Special).l
0000A388                            ; End of function CollectRing
0000A388                            
0000A388                            ; ===========================================================================
0000A388                            ; ---------------------------------------------------------------------------
0000A388                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A388                            ; ---------------------------------------------------------------------------
0000A388                            
0000A388                            Obj37:					; XREF: Obj_Index
0000A388 7000                       		moveq	#0,d0
0000A38A 1028 0024                  		move.b	$24(a0),d0
0000A38E 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A392 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A396                            ; ===========================================================================
0000A396 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A398 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A39A 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A39C 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A39E 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A3A0                            ; ===========================================================================
0000A3A0                            
0000A3A0                            Obj37_CountRings:			; XREF: Obj37_Index
0000A3A0 2248                       		movea.l	a0,a1
0000A3A2 7A00                       		moveq	#0,d5
0000A3A4 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A3A8 7020                       		moveq	#32,d0
0000A3AA BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A3AC 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A3AE 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A3B0                            
0000A3B0                            loc_9CDE:
0000A3B0 5345                       		subq.w	#1,d5
0000A3B2 383C 0288                  		move.w	#$288,d4
0000A3B6 6000                       		bra.s	Obj37_MakeRings
0000A3B8                            ; ===========================================================================
0000A3B8                            
0000A3B8                            Obj37_Loop:
0000A3B8 6100 0000                  		bsr.w	SingleObjLoad
0000A3BC 6600 0000                  		bne.w	Obj37_ResetCounter
0000A3C0                            
0000A3C0                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A3C0 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A3C4 5429 0024                  		addq.b	#2,$24(a1)
0000A3C8 137C 0008 0016             		move.b	#8,$16(a1)
0000A3CE 137C 0008 0017             		move.b	#8,$17(a1)
0000A3D4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3E0 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A3E8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A3EE 137C 0004 0001             		move.b	#4,1(a1)
0000A3F4 137C 0003 0018             		move.b	#3,$18(a1)
0000A3FA 137C 0047 0020             		move.b	#$47,$20(a1)
0000A400 137C 0008 0019             		move.b	#8,$19(a1)
0000A406 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A40C 4A44                       		tst.w	d4
0000A40E 6B00                       		bmi.s	loc_9D62
0000A410 3004                       		move.w	d4,d0
0000A412 6100 88D8                  		bsr.w	CalcSine
0000A416 3404                       		move.w	d4,d2
0000A418 E04A                       		lsr.w	#8,d2
0000A41A E560                       		asl.w	d2,d0
0000A41C E561                       		asl.w	d2,d1
0000A41E 3400                       		move.w	d0,d2
0000A420 3601                       		move.w	d1,d3
0000A422 0604 0010                  		addi.b	#$10,d4
0000A426 6400                       		bcc.s	loc_9D62
0000A428 0444 0080                  		subi.w	#$80,d4
0000A42C 6400                       		bcc.s	loc_9D62
0000A42E 383C 0288                  		move.w	#$288,d4
0000A432                            
0000A432                            loc_9D62:
0000A432 3342 0010                  		move.w	d2,$10(a1)
0000A436 3343 0012                  		move.w	d3,$12(a1)
0000A43A 4442                       		neg.w	d2
0000A43C 4444                       		neg.w	d4
0000A43E 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A442                            
0000A442                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A442 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A448 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A44E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A454 303C 00C6                  		move.w	#$C6,d0
0000A458 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A45E                            
0000A45E                            Obj37_Bounce:				; XREF: Obj37_Index
0000A45E 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A464 6100 0000                  		bsr.w	SpeedToPos
0000A468 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A46E 6B00                       		bmi.s	Obj37_ChkDel
0000A470 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A474 D007                       		add.b	d7,d0
0000A476 0200 0003                  		andi.b	#3,d0
0000A47A 6600                       		bne.s	Obj37_ChkDel
0000A47C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A482 4A41                       		tst.w	d1
0000A484 6A00                       		bpl.s	Obj37_ChkDel
0000A486 D368 000C                  		add.w	d1,$C(a0)
0000A48A 3028 0012                  		move.w	$12(a0),d0
0000A48E E440                       		asr.w	#2,d0
0000A490 9168 0012                  		sub.w	d0,$12(a0)
0000A494 4468 0012                  		neg.w	$12(a0)
0000A498                            
0000A498                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A498 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A49C 6700                       		beq.s	Obj37_Delete
0000A49E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A4A2 0640 00E0                  		addi.w	#$E0,d0
0000A4A6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A4AA 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A4AC 6000 0000                  		bra.w	DisplaySprite
0000A4B0                            ; ===========================================================================
0000A4B0                            
0000A4B0                            Obj37_Collect:				; XREF: Obj37_Index
0000A4B0 5428 0024                  		addq.b	#2,$24(a0)
0000A4B4 117C 0000 0020             		move.b	#0,$20(a0)
0000A4BA 117C 0001 0018             		move.b	#1,$18(a0)
0000A4C0 6100 FE86                  		bsr.w	CollectRing
0000A4C4                            
0000A4C4                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A4C4 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A4CA 6100 0000                  		bsr.w	AnimateSprite
0000A4CE 6000 0000                  		bra.w	DisplaySprite
0000A4D2                            ; ===========================================================================
0000A4D2                            
0000A4D2                            Obj37_Delete:				; XREF: Obj37_Index
0000A4D2 6000 0000                  		bra.w	DeleteObject
0000A4D6                            ; ===========================================================================
0000A4D6                            ; ---------------------------------------------------------------------------
0000A4D6                            ; Object 4B - giant ring for entry to special stage
0000A4D6                            ; ---------------------------------------------------------------------------
0000A4D6                            
0000A4D6                            Obj4B:					; XREF: Obj_Index
0000A4D6 7000                       		moveq	#0,d0
0000A4D8 1028 0024                  		move.b	$24(a0),d0
0000A4DC 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A4E0 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A4E4                            ; ===========================================================================
0000A4E4 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A4E6 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A4E8 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A4EA 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A4EC                            ; ===========================================================================
0000A4EC                            
0000A4EC                            Obj4B_Main:				; XREF: Obj4B_Index
0000A4EC 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A4F4 317C 2400 0002             		move.w	#$2400,2(a0)
0000A4FA 0028 0004 0001             		ori.b	#4,1(a0)
0000A500 117C 0040 0019             		move.b	#$40,$19(a0)
0000A506 4A28 0001                  		tst.b	1(a0)
0000A50A 6A00                       		bpl.s	Obj4B_Animate
0000A50C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A512 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A516 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A51C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A51E 4E75                       		rts	
0000A520                            ; ===========================================================================
0000A520                            
0000A520                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A520 5428 0024                  		addq.b	#2,$24(a0)
0000A524 117C 0002 0018             		move.b	#2,$18(a0)
0000A52A 117C 0052 0020             		move.b	#$52,$20(a0)
0000A530 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A536                            
0000A536                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A536 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A53C 3028 0008                  		move.w	8(a0),d0
0000A540 0240 FF80                  		andi.w	#$FF80,d0
0000A544 3238 F700                  		move.w	($FFFFF700).w,d1
0000A548 0441 0080                  		subi.w	#$80,d1
0000A54C 0241 FF80                  		andi.w	#$FF80,d1
0000A550 9041                       		sub.w	d1,d0
0000A552 0C40 0280                  		cmpi.w	#$280,d0
0000A556 6200 0000                  		bhi.w	DeleteObject
0000A55A 6000 0000                  		bra.w	DisplaySprite
0000A55E                            ; ===========================================================================
0000A55E                            
0000A55E                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A55E 5528 0024                  		subq.b	#2,$24(a0)
0000A562 117C 0000 0020             		move.b	#0,$20(a0)
0000A568 6100 0000                  		bsr.w	SingleObjLoad
0000A56C 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A570 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A574 3368 0008 0008             		move.w	8(a0),8(a1)
0000A57A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A580 2348 003C                  		move.l	a0,$3C(a1)
0000A584 3038 D008                  		move.w	($FFFFD008).w,d0
0000A588 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A58C 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A58E 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A594                            
0000A594                            Obj4B_PlaySnd:
0000A594 303C 00C3                  		move.w	#$C3,d0
0000A598 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A59E 6096                       		bra.s	Obj4B_Animate
0000A5A0                            ; ===========================================================================
0000A5A0                            
0000A5A0                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A5A0 6000 0000                  		bra.w	DeleteObject
0000A5A4                            ; ===========================================================================
0000A5A4                            ; ---------------------------------------------------------------------------
0000A5A4                            ; Object 7C - flash effect when	you collect the	giant ring
0000A5A4                            ; ---------------------------------------------------------------------------
0000A5A4                            
0000A5A4                            Obj7C:					; XREF: Obj_Index
0000A5A4 7000                       		moveq	#0,d0
0000A5A6 1028 0024                  		move.b	$24(a0),d0
0000A5AA 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A5AE 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A5B2                            ; ===========================================================================
0000A5B2 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A5B4 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A5B6 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A5B8                            ; ===========================================================================
0000A5B8                            
0000A5B8                            Obj7C_Main:				; XREF: Obj7C_Index
0000A5B8 5428 0024                  		addq.b	#2,$24(a0)
0000A5BC 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A5C4 317C 2462 0002             		move.w	#$2462,2(a0)
0000A5CA 0028 0004 0001             		ori.b	#4,1(a0)
0000A5D0 117C 0000 0018             		move.b	#0,$18(a0)
0000A5D6 117C 0020 0019             		move.b	#$20,$19(a0)
0000A5DC 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A5E2                            
0000A5E2                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A5E2 6100                       		bsr.s	Obj7C_Collect
0000A5E4 3028 0008                  		move.w	8(a0),d0
0000A5E8 0240 FF80                  		andi.w	#$FF80,d0
0000A5EC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A5F0 0441 0080                  		subi.w	#$80,d1
0000A5F4 0241 FF80                  		andi.w	#$FF80,d1
0000A5F8 9041                       		sub.w	d1,d0
0000A5FA 0C40 0280                  		cmpi.w	#$280,d0
0000A5FE 6200 0000                  		bhi.w	DeleteObject
0000A602 6000 0000                  		bra.w	DisplaySprite
0000A606                            
0000A606                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A606                            
0000A606                            
0000A606                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A606 5328 001E                  		subq.b	#1,$1E(a0)
0000A60A 6A00                       		bpl.s	locret_9F76
0000A60C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A612 5228 001A                  		addq.b	#1,$1A(a0)
0000A616 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A61C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A61E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A624 6600                       		bne.s	locret_9F76	; if not, branch
0000A626 2268 003C                  		movea.l	$3C(a0),a1
0000A62A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A630 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A636 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A63C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A640 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A644                            
0000A644                            locret_9F76:
0000A644 4E75                       		rts	
0000A646                            ; ===========================================================================
0000A646                            
0000A646                            Obj7C_End:				; XREF: Obj7C_Collect
0000A646 5428 0024                  		addq.b	#2,$24(a0)
0000A64A 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A650 588F                       		addq.l	#4,sp
0000A652 4E75                       		rts	
0000A654                            ; End of function Obj7C_Collect
0000A654                            
0000A654                            ; ===========================================================================
0000A654                            
0000A654                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A654 6000 0000                  		bra.w	DeleteObject
0000A658                            ; ===========================================================================
0000A658                            Ani_obj25:
0000A658                            	include "_anim\obj25.asm"
0000A658                            ; ---------------------------------------------------------------------------
0000A658                            ; Animation script - ring
0000A658                            ; ---------------------------------------------------------------------------
0000A658 0000                       		dc.w byte_9F8C-Ani_obj25
0000A65A 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A660                            		even
0000A660                            		even
0000A660                            
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            ; Sprite mappings - rings
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            Map_obj25:
0000A660                            	include "_maps\obj25.asm"
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            ; Sprite mappings - rings
0000A660                            ; ---------------------------------------------------------------------------
0000A660 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A664 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A668 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A66C 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A670 01                         byte_9FA2:	dc.b 1
0000A671 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A676 01                         byte_9FA8:	dc.b 1
0000A677 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A67C 01                         byte_9FAE:	dc.b 1
0000A67D F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A682 01                         byte_9FB4:	dc.b 1
0000A683 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A688 01                         byte_9FBA:	dc.b 1
0000A689 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A68E 01                         byte_9FC0:	dc.b 1
0000A68F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A694 01                         byte_9FC6:	dc.b 1
0000A695 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A69A 01                         byte_9FCC:	dc.b 1
0000A69B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A6A0                            		even
0000A6A0                            		even
0000A6A0                            
0000A6A0                            ; ---------------------------------------------------------------------------
0000A6A0                            ; Sprite mappings - giant ring
0000A6A0                            ; ---------------------------------------------------------------------------
0000A6A0                            Map_obj4B:
0000A6A0                            	include "_maps\obj4B.asm"
0000A6A0                            ; ---------------------------------------------------------------------------
0000A6A0                            ; Sprite mappings - giant ring
0000A6A0                            ; ---------------------------------------------------------------------------
0000A6A0 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A6A4 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A6A8 0A                         byte_9FDA:	dc.b $A
0000A6A9 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A6AE E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A6B3 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A6B8 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A6BD F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A6C2 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A6C7 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A6CC 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A6D1 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A6D6 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A6DB 08                         byte_A00D:	dc.b 8
0000A6DC E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A6E1 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A6E6 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A6EB F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A6F0 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A6F5 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A6FA 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A6FF 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A704 04                         byte_A036:	dc.b 4
0000A705 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A70A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A70F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A714 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A719 08                         byte_A04B:	dc.b 8
0000A71A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A71F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A724 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A729 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A72E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A733 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A738 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A73D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A742                            		even
0000A742                            		even
0000A742                            
0000A742                            ; ---------------------------------------------------------------------------
0000A742                            ; Sprite mappings - flash effect when you collect the giant ring
0000A742                            ; ---------------------------------------------------------------------------
0000A742                            Map_obj7C:
0000A742                            	include "_maps\obj7C.asm"
0000A742                            ; ---------------------------------------------------------------------------
0000A742                            ; Sprite mappings - flash effect when you collect the giant ring
0000A742                            ; ---------------------------------------------------------------------------
0000A742 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A746 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A74A 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A74E 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A752 02                         byte_A084:	dc.b 2
0000A753 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A758 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A75D 04                         byte_A08F:	dc.b 4
0000A75E E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A763 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A768 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A76D 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A772 04                         byte_A0A4:	dc.b 4
0000A773 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A778 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A77D 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A782 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A787 04                         byte_A0B9:	dc.b 4
0000A788 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A78D E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A792 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A797 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A79C 04                         byte_A0CE:	dc.b 4
0000A79D E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A7A2 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A7A7 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A7AC 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A7B1 04                         byte_A0E3:	dc.b 4
0000A7B2 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A7B7 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A7BC 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A7C1 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A7C6 02                         byte_A0F8:	dc.b 2
0000A7C7 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A7CC 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A7D1 04                         byte_A103:	dc.b 4
0000A7D2 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A7D7 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A7DC 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A7E1 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A7E6                            		even
0000A7E6                            		even
0000A7E6                            
0000A7E6                            ; ===========================================================================
0000A7E6                            ; ---------------------------------------------------------------------------
0000A7E6                            ; Object 26 - monitors
0000A7E6                            ; ---------------------------------------------------------------------------
0000A7E6                            
0000A7E6                            Obj26:					; XREF: Obj_Index
0000A7E6 7000                       		moveq	#0,d0
0000A7E8 1028 0024                  		move.b	$24(a0),d0
0000A7EC 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A7F0 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A7F4                            ; ===========================================================================
0000A7F4 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A7F6 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A7F8 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A7FA 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A7FC 0000                       		dc.w Obj26_Display-Obj26_Index
0000A7FE                            ; ===========================================================================
0000A7FE                            
0000A7FE                            Obj26_Main:				; XREF: Obj26_Index
0000A7FE 5428 0024                  		addq.b	#2,$24(a0)
0000A802 117C 000E 0016             		move.b	#$E,$16(a0)
0000A808 117C 000E 0017             		move.b	#$E,$17(a0)
0000A80E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A816 317C 0680 0002             		move.w	#$680,2(a0)
0000A81C 117C 0004 0001             		move.b	#4,1(a0)
0000A822 117C 0003 0018             		move.b	#3,$18(a0)
0000A828 117C 000F 0019             		move.b	#$F,$19(a0)
0000A82E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A832 7000                       		moveq	#0,d0
0000A834 1028 0023                  		move.b	$23(a0),d0
0000A838 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A83E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A844 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A846 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A84C 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A852 4E75                       		rts	
0000A854                            ; ===========================================================================
0000A854                            
0000A854                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A854 117C 0046 0020             		move.b	#$46,$20(a0)
0000A85A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A860                            
0000A860                            Obj26_Solid:				; XREF: Obj26_Index
0000A860 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A864 6700                       		beq.s	loc_A1EC	; if not, branch
0000A866 5500                       		subq.b	#2,d0
0000A868 6600                       		bne.s	Obj26_Fall
0000A86A 7200                       		moveq	#0,d1
0000A86C 1228 0019                  		move.b	$19(a0),d1
0000A870 0641 000B                  		addi.w	#$B,d1
0000A874 6100 D380                  		bsr.w	ExitPlatform
0000A878 0829 0003 0022             		btst	#3,$22(a1)
0000A87E 6600 0000                  		bne.w	loc_A1BC
0000A882 4228 0025                  		clr.b	$25(a0)
0000A886 6000 0000                  		bra.w	Obj26_Animate
0000A88A                            ; ===========================================================================
0000A88A                            
0000A88A                            loc_A1BC:				; XREF: Obj26_Solid
0000A88A 363C 0010                  		move.w	#$10,d3
0000A88E 3428 0008                  		move.w	8(a0),d2
0000A892 6100 D8C0                  		bsr.w	MvSonicOnPtfm
0000A896 6000 0000                  		bra.w	Obj26_Animate
0000A89A                            ; ===========================================================================
0000A89A                            
0000A89A                            Obj26_Fall:				; XREF: Obj26_Solid
0000A89A 6100 0000                  		bsr.w	ObjectFall
0000A89E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8A4 4A41                       		tst.w	d1
0000A8A6 6A00 0000                  		bpl.w	Obj26_Animate
0000A8AA D368 000C                  		add.w	d1,$C(a0)
0000A8AE 4268 0012                  		clr.w	$12(a0)
0000A8B2 4228 0025                  		clr.b	$25(a0)
0000A8B6 6000 0000                  		bra.w	Obj26_Animate
0000A8BA                            ; ===========================================================================
0000A8BA                            
0000A8BA                            loc_A1EC:				; XREF: Obj26_Solid
0000A8BA 323C 001A                  		move.w	#$1A,d1
0000A8BE 343C 000F                  		move.w	#$F,d2
0000A8C2 6100 0000                  		bsr.w	Obj26_SolidSides
0000A8C6 6700 0000                  		beq.w	loc_A25C
0000A8CA 4A69 0012                  		tst.w	$12(a1)
0000A8CE 6B00                       		bmi.s	loc_A20A
0000A8D0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A8D6 6700                       		beq.s	loc_A25C	; if yes, branch
0000A8D8                            
0000A8D8                            loc_A20A:
0000A8D8 4A41                       		tst.w	d1
0000A8DA 6A00                       		bpl.s	loc_A220
0000A8DC 9769 000C                  		sub.w	d3,$C(a1)
0000A8E0 6100 D202                  		bsr.w	loc_74AE
0000A8E4 117C 0002 0025             		move.b	#2,$25(a0)
0000A8EA 6000 0000                  		bra.w	Obj26_Animate
0000A8EE                            ; ===========================================================================
0000A8EE                            
0000A8EE                            loc_A220:
0000A8EE 4A40                       		tst.w	d0
0000A8F0 6700 0000                  		beq.w	loc_A246
0000A8F4 6B00                       		bmi.s	loc_A230
0000A8F6 4A69 0010                  		tst.w	$10(a1)
0000A8FA 6B00                       		bmi.s	loc_A246
0000A8FC 6000                       		bra.s	loc_A236
0000A8FE                            ; ===========================================================================
0000A8FE                            
0000A8FE                            loc_A230:
0000A8FE 4A69 0010                  		tst.w	$10(a1)
0000A902 6A00                       		bpl.s	loc_A246
0000A904                            
0000A904                            loc_A236:
0000A904 9169 0008                  		sub.w	d0,8(a1)
0000A908 337C 0000 0014             		move.w	#0,$14(a1)
0000A90E 337C 0000 0010             		move.w	#0,$10(a1)
0000A914                            
0000A914                            loc_A246:
0000A914 0829 0001 0022             		btst	#1,$22(a1)
0000A91A 6600                       		bne.s	loc_A26A
0000A91C 08E9 0005 0022             		bset	#5,$22(a1)
0000A922 08E8 0005 0022             		bset	#5,$22(a0)
0000A928 6000                       		bra.s	Obj26_Animate
0000A92A                            ; ===========================================================================
0000A92A                            
0000A92A                            loc_A25C:
0000A92A 0828 0005 0022             		btst	#5,$22(a0)
0000A930 6700                       		beq.s	Obj26_Animate
0000A932 337C 0001 001C             		move.w	#1,$1C(a1)
0000A938                            
0000A938                            loc_A26A:
0000A938 08A8 0005 0022             		bclr	#5,$22(a0)
0000A93E 08A9 0005 0022             		bclr	#5,$22(a1)
0000A944                            
0000A944                            Obj26_Animate:				; XREF: Obj26_Index
0000A944 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A94A 6100 0000                  		bsr.w	AnimateSprite
0000A94E                            
0000A94E                            Obj26_Display:				; XREF: Obj26_Index
0000A94E 6100 0000                  		bsr.w	DisplaySprite
0000A952 3028 0008                  		move.w	8(a0),d0
0000A956 0240 FF80                  		andi.w	#$FF80,d0
0000A95A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A95E 0441 0080                  		subi.w	#$80,d1
0000A962 0241 FF80                  		andi.w	#$FF80,d1
0000A966 9041                       		sub.w	d1,d0
0000A968 0C40 0280                  		cmpi.w	#$280,d0
0000A96C 6200 0000                  		bhi.w	DeleteObject
0000A970 4E75                       		rts	
0000A972                            ; ===========================================================================
0000A972                            
0000A972                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A972 5428 0024                  		addq.b	#2,$24(a0)
0000A976 117C 0000 0020             		move.b	#0,$20(a0)
0000A97C 6100 0000                  		bsr.w	SingleObjLoad
0000A980 6600                       		bne.s	Obj26_Explode
0000A982 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A986 3368 0008 0008             		move.w	8(a0),8(a1)
0000A98C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A992 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A998 7400                       		moveq	#0,d2	; GMZ
0000A99A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A99C                            
0000A99C                            Obj26_Explode:
0000A99C 6100 0000                  		bsr.w	SingleObjLoad
0000A9A0 6600                       		bne.s	Obj26_SetBroken
0000A9A2 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A9A6 5429 0024                  		addq.b	#2,$24(a1)
0000A9AA 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A9AE 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9BA                            
0000A9BA                            Obj26_NextExplosion:
0000A9BA 5802                       		addq.b	#4,d2
0000A9BC 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A9C0                            
0000A9C0                            Obj26_SetBroken:
0000A9C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A9C4 7000                       		moveq	#0,d0
0000A9C6 1028 0023                  		move.b	$23(a0),d0
0000A9CA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A9D0 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A9D6 6000 0000                  		bra.w	DisplaySprite
0000A9DA                            ; ===========================================================================
0000A9DA                            ; ---------------------------------------------------------------------------
0000A9DA                            ; Object 2E - contents of monitors
0000A9DA                            ; ---------------------------------------------------------------------------
0000A9DA                            
0000A9DA                            Obj2E:					; XREF: Obj_Index
0000A9DA 7000                       		moveq	#0,d0
0000A9DC 1028 0024                  		move.b	$24(a0),d0
0000A9E0 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A9E4 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A9E8 6000 0000                  		bra.w	DisplaySprite
0000A9EC                            ; ===========================================================================
0000A9EC 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A9EE 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A9F0 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A9F2                            ; ===========================================================================
0000A9F2                            
0000A9F2                            Obj2E_Main:				; XREF: Obj2E_Index
0000A9F2 5428 0024                  		addq.b	#2,$24(a0)
0000A9F6 317C 0680 0002             		move.w	#$680,2(a0)
0000A9FC 117C 0024 0001             		move.b	#$24,1(a0)
0000AA02 117C 0003 0018             		move.b	#3,$18(a0)
0000AA08 117C 0008 0019             		move.b	#8,$19(a0)
0000AA0E 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AA14 7000                       		moveq	#0,d0
0000AA16 1028 001C                  		move.b	$1C(a0),d0
0000AA1A 5400                       		addq.b	#2,d0
0000AA1C 1140 001A                  		move.b	d0,$1A(a0)
0000AA20 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AA26 D000                       		add.b	d0,d0
0000AA28 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AA2C 5249                       		addq.w	#1,a1
0000AA2E 2149 0004                  		move.l	a1,4(a0)
0000AA32                            
0000AA32                            Obj2E_Move:				; XREF: Obj2E_Index
0000AA32 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AA36 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AA3A 6100 0000                  		bsr.w	SpeedToPos
0000AA3E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AA44 4E75                       		rts	
0000AA46                            ; ===========================================================================
0000AA46                            
0000AA46                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AA46 5428 0024                  		addq.b	#2,$24(a0)
0000AA4A 317C 001D 001E             		move.w	#29,$1E(a0)
0000AA50 1028 001C                  		move.b	$1C(a0),d0
0000AA54 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AA58 6600                       		bne.s	Obj2E_ChkSonic
0000AA5A 4E75                       		rts			; Eggman monitor does nothing
0000AA5C                            ; ===========================================================================
0000AA5C                            
0000AA5C                            Obj2E_ChkSonic:
0000AA5C 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AA60 6600                       		bne.s	Obj2E_ChkShoes
0000AA62                            
0000AA62                            ExtraLife:
0000AA62 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AA66 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AA6A 303C 0088                  		move.w	#$88,d0
0000AA6E 4EF9 0000 15BA             		jmp	(PlaySound).l	; play extra life music
0000AA74                            ; ===========================================================================
0000AA74                            
0000AA74                            Obj2E_ChkShoes:
0000AA74 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AA78 6600                       		bne.s	Obj2E_ChkShield
0000AA7A 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AA80 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AA86 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AA8C 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AA92 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AA98 303C 00E2                  		move.w	#$E2,d0
0000AA9C 4EF9 0000 15BA             		jmp	(PlaySound).l	; Speed	up the music
0000AAA2                            ; ===========================================================================
0000AAA2                            
0000AAA2                            Obj2E_ChkShield:
0000AAA2 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AAA6 6600                       		bne.s	Obj2E_ChkInvinc
0000AAA8 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AAAE 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AAB4 303C 00AF                  		move.w	#$AF,d0
0000AAB8 4EF9 0000 15BA             		jmp	(PlaySound).l	; play shield sound
0000AABE                            ; ===========================================================================
0000AABE                            
0000AABE                            Obj2E_ChkInvinc:
0000AABE 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AAC2 6600                       		bne.s	Obj2E_ChkRings
0000AAC4 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AACA 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AAD0 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AAD6 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AADC 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AAE2 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AAE8 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AAEE 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AAF4 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AAFA 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AB00 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AB04 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AB06 303C 0087                  		move.w	#$87,d0
0000AB0A 4EF9 0000 15BA             		jmp	(PlaySound).l	; play invincibility music
0000AB10                            ; ===========================================================================
0000AB10                            
0000AB10                            Obj2E_NoMusic:
0000AB10 4E75                       		rts	
0000AB12                            ; ===========================================================================
0000AB12                            
0000AB12                            Obj2E_ChkRings:
0000AB12 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AB16 6600                       		bne.s	Obj2E_ChkS
0000AB18 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AB1E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AB24 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AB2A 6500                       		bcs.s	Obj2E_RingSound
0000AB2C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AB32 6700 FF2E                  		beq.w	ExtraLife
0000AB36 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AB3C 6500                       		bcs.s	Obj2E_RingSound
0000AB3E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AB44 6700 FF1C                  		beq.w	ExtraLife
0000AB48                            
0000AB48                            Obj2E_RingSound:
0000AB48 303C 00B5                  		move.w	#$B5,d0
0000AB4C 4EF9 0000 15BA             		jmp	(PlaySound).l	; play ring sound
0000AB52                            ; ===========================================================================
0000AB52                            
0000AB52                            Obj2E_ChkS:
0000AB52 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AB56 6600                       		bne.s	Obj2E_ChkEnd
0000AB58                            		; nop	
0000AB58 7201                       		moveq	#1,d1
0000AB5A B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AB5E                            
0000AB5E                            Obj2E_ChkEnd:
0000AB5E 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AB60                            ; ===========================================================================
0000AB60                            
0000AB60                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AB60 5368 001E                  		subq.w	#1,$1E(a0)
0000AB64 6B00 0000                  		bmi.w	DeleteObject
0000AB68 4E75                       		rts	
0000AB6A                            ; ---------------------------------------------------------------------------
0000AB6A                            ; Subroutine to	make the sides of a monitor solid
0000AB6A                            ; ---------------------------------------------------------------------------
0000AB6A                            
0000AB6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB6A                            
0000AB6A                            
0000AB6A                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AB6A 43F8 D000                  		lea	($FFFFD000).w,a1
0000AB6E 3029 0008                  		move.w	8(a1),d0
0000AB72 9068 0008                  		sub.w	8(a0),d0
0000AB76 D041                       		add.w	d1,d0
0000AB78 6B00                       		bmi.s	loc_A4E6
0000AB7A 3601                       		move.w	d1,d3
0000AB7C D643                       		add.w	d3,d3
0000AB7E B043                       		cmp.w	d3,d0
0000AB80 6200                       		bhi.s	loc_A4E6
0000AB82 1629 0016                  		move.b	$16(a1),d3
0000AB86 4883                       		ext.w	d3
0000AB88 D443                       		add.w	d3,d2
0000AB8A 3629 000C                  		move.w	$C(a1),d3
0000AB8E 9668 000C                  		sub.w	$C(a0),d3
0000AB92 D642                       		add.w	d2,d3
0000AB94 6B00                       		bmi.s	loc_A4E6
0000AB96 D442                       		add.w	d2,d2
0000AB98 B642                       		cmp.w	d2,d3
0000AB9A 6400                       		bcc.s	loc_A4E6
0000AB9C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000ABA0 6B00                       		bmi.s	loc_A4E6
0000ABA2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000ABA8 6400                       		bcc.s	loc_A4E6
0000ABAA 4A78 FE08                  		tst.w	($FFFFFE08).w
0000ABAE 6600                       		bne.s	loc_A4E6
0000ABB0 B240                       		cmp.w	d0,d1
0000ABB2 6400                       		bcc.s	loc_A4DC
0000ABB4 D241                       		add.w	d1,d1
0000ABB6 9041                       		sub.w	d1,d0
0000ABB8                            
0000ABB8                            loc_A4DC:
0000ABB8 0C43 0010                  		cmpi.w	#$10,d3
0000ABBC 6500                       		bcs.s	loc_A4EA
0000ABBE                            
0000ABBE                            loc_A4E2:
0000ABBE 7201                       		moveq	#1,d1
0000ABC0 4E75                       		rts	
0000ABC2                            ; ===========================================================================
0000ABC2                            
0000ABC2                            loc_A4E6:
0000ABC2 7200                       		moveq	#0,d1
0000ABC4 4E75                       		rts	
0000ABC6                            ; ===========================================================================
0000ABC6                            
0000ABC6                            loc_A4EA:
0000ABC6 7200                       		moveq	#0,d1
0000ABC8 1228 0019                  		move.b	$19(a0),d1
0000ABCC 5841                       		addq.w	#4,d1
0000ABCE 3401                       		move.w	d1,d2
0000ABD0 D442                       		add.w	d2,d2
0000ABD2 D269 0008                  		add.w	8(a1),d1
0000ABD6 9268 0008                  		sub.w	8(a0),d1
0000ABDA 6BE2                       		bmi.s	loc_A4E2
0000ABDC B242                       		cmp.w	d2,d1
0000ABDE 64DE                       		bcc.s	loc_A4E2
0000ABE0 72FF                       		moveq	#-1,d1
0000ABE2 4E75                       		rts	
0000ABE4                            ; End of function Obj26_SolidSides
0000ABE4                            
0000ABE4                            ; ===========================================================================
0000ABE4                            Ani_obj26:
0000ABE4                            	include "_anim\obj26.asm"
0000ABE4                            ; ---------------------------------------------------------------------------
0000ABE4                            ; Animation script - monitors
0000ABE4                            ; ---------------------------------------------------------------------------
0000ABE4 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000ABEA 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000ABF0 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000ABF6 0000                       		dc.w byte_A582-Ani_obj26
0000ABF8 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000ABFE 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AC0A 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AC16 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AC22 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AC2E 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AC3A 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AC46 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AC52 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AC5E 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AC66                            		even
0000AC66                            		even
0000AC66                            
0000AC66                            ; ---------------------------------------------------------------------------
0000AC66                            ; Sprite mappings - monitors
0000AC66                            ; ---------------------------------------------------------------------------
0000AC66                            Map_obj26:
0000AC66                            	include "_maps\obj26.asm"
0000AC66                            ; ================================================================================
0000AC66                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AC66                            ; ================================================================================
0000AC66                            
0000AC66                            DATAY1U343IF3L:
0000AC66 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AC6A 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AC6E 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AC72 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AC76 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AC7A 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AC7E 05                         DATAY1U343IF3L_0: dc.b $5
0000AC7F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC84 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC89 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC8E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC93 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC98 06                         DATAY1U343IF3L_1: dc.b $6
0000AC99 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AC9E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACA3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACA8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACAD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACB2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACB7 05                         DATAY1U343IF3L_2: dc.b $5
0000ACB8 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACBD 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACC2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACC7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACCC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACD1 05                         DATAY1U343IF3L_3: dc.b $5
0000ACD2 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACD7 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACDC E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACE1 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACE6 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACEB 06                         DATAY1U343IF3L_4: dc.b $6
0000ACEC F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000ACF1 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACF6 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACFB E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD00 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD05 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD0A 06                         DATAY1U343IF3L_5: dc.b $6
0000AD0B F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AD10 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD15 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD1A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD1F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD24 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD29 06                         DATAY1U343IF3L_6: dc.b $6
0000AD2A F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AD2F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD34 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD39 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD3E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD43 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD48 06                         DATAY1U343IF3L_7: dc.b $6
0000AD49 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AD4E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD53 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD58 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD5D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD62 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD67 06                         DATAY1U343IF3L_8: dc.b $6
0000AD68 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AD6D E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD72 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD77 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD7C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD81 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD86 06                         DATAY1U343IF3L_9: dc.b $6
0000AD87 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AD8C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD91 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD96 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD9B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADA0 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADA5 05                         DATAY1U343IF3L_A: dc.b $5
0000ADA6 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ADAB 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADB0 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADB5 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADBA 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADBF 01                         DATAY1U343IF3L_B: dc.b $1
0000ADC0 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000ADC6 00                         	even
0000ADC6 00                         	even
0000ADC6                            
0000ADC6                            ; ===========================================================================
0000ADC6                            ; ---------------------------------------------------------------------------
0000ADC6                            ; Object 0E - Sonic on the title screen
0000ADC6                            ; ---------------------------------------------------------------------------
0000ADC6                            
0000ADC6                            Obj0E:					; XREF: Obj_Index
0000ADC6 7000                       		moveq	#0,d0
0000ADC8 1028 0024                  		move.b	$24(a0),d0
0000ADCC 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000ADD0 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000ADD4                            ; ===========================================================================
0000ADD4 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000ADD6 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000ADD8 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000ADDA 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000ADDC                            ; ===========================================================================
0000ADDC                            
0000ADDC                            Obj0E_Main:				; XREF: Obj0E_Index
0000ADDC 5428 0024                  		addq.b	#2,$24(a0)
0000ADE0 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ADE6 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ADEC 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000ADF4 317C 2300 0002             		move.w	#$2300,2(a0)
0000ADFA 117C 0001 0018             		move.b	#1,$18(a0)
0000AE00 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AE06 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE0C 6100 0000                  		bsr.w	AnimateSprite
0000AE10                            
0000AE10                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AE10 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AE14 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AE16 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AE1A 6000 0000                  		bra.w	DisplaySprite
0000AE1E                            ; ===========================================================================
0000AE1E                            
0000AE1E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AE1E 4E75                       		rts	
0000AE20                            ; ===========================================================================
0000AE20                            
0000AE20                            Obj0E_Move:				; XREF: Obj0E_Index
0000AE20 5168 000A                  		subq.w	#8,$A(a0)
0000AE24 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AE2A 6600                       		bne.s	Obj0E_Display
0000AE2C 5428 0024                  		addq.b	#2,$24(a0)
0000AE30                            
0000AE30                            Obj0E_Display:
0000AE30 6000 0000                  		bra.w	DisplaySprite
0000AE34                            ; ===========================================================================
0000AE34 4E75                       		rts	
0000AE36                            ; ===========================================================================
0000AE36                            
0000AE36                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AE36 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE3C 6100 0000                  		bsr.w	AnimateSprite
0000AE40 6000 0000                  		bra.w	DisplaySprite
0000AE44                            ; ===========================================================================
0000AE44 4E75                       		rts	
0000AE46                            ; ===========================================================================
0000AE46                            ; ---------------------------------------------------------------------------
0000AE46                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AE46                            ; ---------------------------------------------------------------------------
0000AE46                            
0000AE46                            Obj0F:					; XREF: Obj_Index
0000AE46 7000                       		moveq	#0,d0
0000AE48 1028 0024                  		move.b	$24(a0),d0
0000AE4C 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AE50 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AE54 6000 0000                  		bra.w	DisplaySprite
0000AE58                            ; ===========================================================================
0000AE58 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AE5A 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AE5C 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AE5E                            ; ===========================================================================
0000AE5E                            
0000AE5E                            Obj0F_Main:				; XREF: Obj0F_Index
0000AE5E 5428 0024                  		addq.b	#2,$24(a0)
0000AE62 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AE68 317C 0130 000A             		move.w	#$130,$A(a0)
0000AE6E 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AE76 317C 0200 0002             		move.w	#$200,2(a0)
0000AE7C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AE82 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AE84 5428 0024                  		addq.b	#2,$24(a0)
0000AE88 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AE8E 6600                       		bne.s	locret_A6F8	; if not, branch
0000AE90 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AE96 317C 0170 0008             		move.w	#$170,8(a0)
0000AE9C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AEA2                            
0000AEA2                            locret_A6F8:				; XREF: Obj0F_Index
0000AEA2 4E75                       		rts	
0000AEA4                            ; ===========================================================================
0000AEA4                            
0000AEA4                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AEA4 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AEAA 6000 0000                  		bra.w	AnimateSprite
0000AEAE                            ; ===========================================================================
0000AEAE                            Ani_obj0E:
0000AEAE                            	include "_anim\obj0E.asm"
0000AEAE                            ; ---------------------------------------------------------------------------
0000AEAE                            ; Animation script - Sonic on the title screen
0000AEAE                            ; ---------------------------------------------------------------------------
0000AEAE 0000                       		dc.w byte_A706-Ani_obj0E
0000AEB0 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AEBC                            		even
0000AEBC                            		even
0000AEBC                            
0000AEBC                            Ani_obj0F:
0000AEBC                            	include "_anim\obj0F.asm"
0000AEBC                            ; ---------------------------------------------------------------------------
0000AEBC                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AEBC                            ; ---------------------------------------------------------------------------
0000AEBC 0000                       		dc.w byte_A714-Ani_obj0F
0000AEBE 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AEC2                            		even
0000AEC2                            		even
0000AEC2                            
0000AEC2                            ; ---------------------------------------------------------------------------
0000AEC2                            ; Subroutine to	animate	a sprite using an animation script
0000AEC2                            ; ---------------------------------------------------------------------------
0000AEC2                            
0000AEC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEC2                            
0000AEC2                            
0000AEC2                            AnimateSprite:
0000AEC2 7000                       		moveq	#0,d0
0000AEC4 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AEC8 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AECC 6700                       		beq.s	Anim_Run	; if not, branch
0000AECE 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AED2 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AED8 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AEDE                            
0000AEDE                            Anim_Run:
0000AEDE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AEE2 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AEE4 D040                       		add.w	d0,d0
0000AEE6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AEEA 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AEEE 7200                       		moveq	#0,d1
0000AEF0 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AEF4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AEF8 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AEFA                            
0000AEFA                            Anim_Next:
0000AEFA 1200                       		move.b	d0,d1
0000AEFC 0200 001F                  		andi.b	#$1F,d0
0000AF00 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AF04 1028 0022                  		move.b	$22(a0),d0
0000AF08 E719                       		rol.b	#3,d1
0000AF0A B101                       		eor.b	d0,d1
0000AF0C 0201 0003                  		andi.b	#3,d1
0000AF10 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AF16 8328 0001                  		or.b	d1,1(a0)
0000AF1A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AF1E                            
0000AF1E                            Anim_Wait:
0000AF1E 4E75                       		rts	
0000AF20                            ; ===========================================================================
0000AF20                            
0000AF20                            Anim_End_FF:
0000AF20 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AF22 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AF24 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AF2A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AF2E 60CA                       		bra.s	Anim_Next
0000AF30                            ; ===========================================================================
0000AF30                            
0000AF30                            Anim_End_FE:
0000AF30 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AF32 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AF34 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AF38 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AF3C 9200                       		sub.b	d0,d1
0000AF3E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AF42 60B6                       		bra.s	Anim_Next
0000AF44                            ; ===========================================================================
0000AF44                            
0000AF44                            Anim_End_FD:
0000AF44 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AF46 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AF48 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AF4E                            
0000AF4E                            Anim_End_FC:
0000AF4E 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AF50 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AF52 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AF56                            
0000AF56                            Anim_End_FB:
0000AF56 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AF58 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AF5A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AF60 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AF64                            
0000AF64                            Anim_End_FA:
0000AF64 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AF66 6600                       		bne.s	Anim_End	; if not, branch
0000AF68 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AF6C                            
0000AF6C                            Anim_End:
0000AF6C 4E75                       		rts	
0000AF6E                            ; End of function AnimateSprite
0000AF6E                            
0000AF6E                            ; ===========================================================================
0000AF6E                            ; ---------------------------------------------------------------------------
0000AF6E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF6E                            ; ---------------------------------------------------------------------------
0000AF6E                            Map_obj0F:
0000AF6E                            	include "_maps\obj0F.asm"
0000AF6E                            ; ---------------------------------------------------------------------------
0000AF6E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF6E                            ; ---------------------------------------------------------------------------
0000AF6E 0000                       		dc.w byte_A7CD-Map_obj0F
0000AF70 0000                       		dc.w byte_A7CC-Map_obj0F
0000AF72 0000                       		dc.w byte_A7EB-Map_obj0F
0000AF74 0000                       		dc.w byte_A882-Map_obj0F
0000AF76 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AF77 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AF7C 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AF81 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AF86 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AF8B 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AF90 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AF95 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AF96 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF9B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFA0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFA5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFAA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFAF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFB4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFB9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFBE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFC3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFC8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFCD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFD2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFD7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFDC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFE1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFE6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFEB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFF0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFF5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFFA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFFF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B004 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B009 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B00E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B013 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B018 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B01D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B022 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B027 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B02C 01                         byte_A882:	dc.b 1			; "TM"
0000B02D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B032                            		even
0000B032                            		even
0000B032                            
0000B032                            ; ---------------------------------------------------------------------------
0000B032                            ; Sprite mappings - Sonic on the title screen
0000B032                            ; ---------------------------------------------------------------------------
0000B032                            Map_obj0E:
0000B032                            	include "_maps\obj0E.asm"
0000B032                            ; ================================================================================
0000B032                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B032                            ; ================================================================================
0000B032                            
0000B032                            DATAGKI0HYDQBXP:
0000B032 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B036 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B03A 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B03E 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B042 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B043 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B048 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B04D 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B052 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B057 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B05C 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B061 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B066 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B06B 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B06C 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B071 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B076 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B07B 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B080 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B085 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B08A 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B08F 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B094 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B099 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B09E 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B0A3 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B0A4 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B0A9 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B0AE F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B0B3 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B0B8 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B0BD 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B0C2 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B0C7 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B0CC 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B0D1 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B0D6 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B0DB 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B0DC FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B0E1 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B0E6 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B0EB 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B0F0 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B0F5 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B0FA 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B0FF 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B104 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B109 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B10E 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B10F F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B114 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B119 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B11E 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B123 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B128 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B12D 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B132 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B137 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B13C 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B141 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B146 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B14B 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B150 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B155 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B15A 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B15F 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B160 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B165 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B16A 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B16F 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B174 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B179 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B17E 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B183 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B188 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B18D 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B192 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B197 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B198 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B19D 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B1A2 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B1A7 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B1AC 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B1B1 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B1B6 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B1BB 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B1C0 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B1C5 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B1CA 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B1CF 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B1D4 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B1D9 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B1DE 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B1E3 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B1E4 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B1E9 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B1EE 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B1F3 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B1F8 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B1FD 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B202 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B207 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B20C 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B211 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B216 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B21B 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B220 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B225 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B22A 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B230 00                         	even
0000B230 00                         	even
0000B230                            
0000B230                            ; ===========================================================================
0000B230                            ; ---------------------------------------------------------------------------
0000B230                            ; Object 2B - Chopper enemy (GHZ)
0000B230                            ; ---------------------------------------------------------------------------
0000B230                            
0000B230                            Obj2B:					; XREF: Obj_Index
0000B230 7000                       		moveq	#0,d0
0000B232 1028 0024                  		move.b	$24(a0),d0
0000B236 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B23A 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B23E 6000 0000                  		bra.w	MarkObjGone
0000B242                            ; ===========================================================================
0000B242 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B244 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B246                            ; ===========================================================================
0000B246                            
0000B246                            Obj2B_Main:				; XREF: Obj2B_Index
0000B246 5428 0024                  		addq.b	#2,$24(a0)
0000B24A 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B252 317C 047B 0002             		move.w	#$47B,2(a0)
0000B258 117C 0004 0001             		move.b	#4,1(a0)
0000B25E 117C 0004 0018             		move.b	#4,$18(a0)
0000B264 117C 0009 0020             		move.b	#9,$20(a0)
0000B26A 117C 0010 0019             		move.b	#$10,$19(a0)
0000B270 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B276 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B27C                            
0000B27C                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B27C 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B282 6100 FC3E                  		bsr.w	AnimateSprite
0000B286 6100 0000                  		bsr.w	SpeedToPos
0000B28A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B290 3028 0030                  		move.w	$30(a0),d0
0000B294 B068 000C                  		cmp.w	$C(a0),d0
0000B298 6400                       		bcc.s	Obj2B_ChgAni
0000B29A 3140 000C                  		move.w	d0,$C(a0)
0000B29E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B2A4                            
0000B2A4                            Obj2B_ChgAni:
0000B2A4 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B2AA 0440 00C0                  		subi.w	#$C0,d0
0000B2AE B068 000C                  		cmp.w	$C(a0),d0
0000B2B2 6400                       		bcc.s	locret_ABB6
0000B2B4 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B2BA 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B2BE 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B2C0 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B2C6                            
0000B2C6                            locret_ABB6:
0000B2C6 4E75                       		rts	
0000B2C8                            ; ===========================================================================
0000B2C8                            Ani_obj2B:
0000B2C8                            	include "_anim\obj2B.asm"
0000B2C8                            ; ---------------------------------------------------------------------------
0000B2C8                            ; Animation script - Chopper enemy
0000B2C8                            ; ---------------------------------------------------------------------------
0000B2C8 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B2CA 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B2CC 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B2CE 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B2D2 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B2D6 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B2DA 00                         		even
0000B2DA 00                         		even
0000B2DA                            
0000B2DA                            ; ---------------------------------------------------------------------------
0000B2DA                            ; Sprite mappings - Chopper enemy (GHZ)
0000B2DA                            ; ---------------------------------------------------------------------------
0000B2DA                            Map_obj2B:
0000B2DA                            	include "_maps\obj2B.asm"
0000B2DA                            Map_1ff1:
0000B2DA 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B2DC 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B2DE 02                         Map_1ff1_4: 	dc.b $2
0000B2DF E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B2E4 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2E9 02                         Map_1ff1_F: 	dc.b $2
0000B2EA E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B2EF 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2F4                            	even
0000B2F4                            	even
0000B2F4                            
0000B2F4                            ; ===========================================================================
0000B2F4                            ; ---------------------------------------------------------------------------
0000B2F4                            ; Object 2C - Jaws enemy (LZ)
0000B2F4                            ; ---------------------------------------------------------------------------
0000B2F4                            
0000B2F4                            Obj2C:					; XREF: Obj_Index
0000B2F4 7000                       		moveq	#0,d0
0000B2F6 1028 0024                  		move.b	$24(a0),d0
0000B2FA 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B2FE 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B302                            ; ===========================================================================
0000B302 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B304 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B306                            ; ===========================================================================
0000B306                            
0000B306                            Obj2C_Main:				; XREF: Obj2C_Index
0000B306 5428 0024                  		addq.b	#2,$24(a0)
0000B30A 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B312 317C 2486 0002             		move.w	#$2486,2(a0)
0000B318 0028 0004 0001             		ori.b	#4,1(a0)
0000B31E 117C 000A 0020             		move.b	#$A,$20(a0)
0000B324 117C 0004 0018             		move.b	#4,$18(a0)
0000B32A 117C 0010 0019             		move.b	#$10,$19(a0)
0000B330 7000                       		moveq	#0,d0
0000B332 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B336 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B338 5340                       		subq.w	#1,d0
0000B33A 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B33E 3140 0032                  		move.w	d0,$32(a0)
0000B342 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B348 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B34E 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B350 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B354                            
0000B354                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B354 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B358 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B35A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B360 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B364 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B36A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B370                            
0000B370                            Obj2C_Animate:
0000B370 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B376 6100 FB4A                  		bsr.w	AnimateSprite
0000B37A 6100 0000                  		bsr.w	SpeedToPos
0000B37E 6000 0000                  		bra.w	MarkObjGone
0000B382                            ; ===========================================================================
0000B382                            Ani_obj2C:
0000B382                            	include "_anim\obj2C.asm"
0000B382                            ; ---------------------------------------------------------------------------
0000B382                            ; Animation script - Jaws enemy
0000B382                            ; ---------------------------------------------------------------------------
0000B382 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B384 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B38A                            		even
0000B38A                            		even
0000B38A                            
0000B38A                            ; ---------------------------------------------------------------------------
0000B38A                            ; Sprite mappings - Jaws enemy (LZ)
0000B38A                            ; ---------------------------------------------------------------------------
0000B38A                            Map_obj2C:
0000B38A                            	include "_maps\obj2C.asm"
0000B38A                            ; ---------------------------------------------------------------------------
0000B38A                            ; Sprite mappings - Jaws enemy (LZ)
0000B38A                            ; ---------------------------------------------------------------------------
0000B38A 0000                       		dc.w byte_AC78-Map_obj2C
0000B38C 0000                       		dc.w byte_AC83-Map_obj2C
0000B38E 0000                       		dc.w byte_AC8E-Map_obj2C
0000B390 0000                       		dc.w byte_AC99-Map_obj2C
0000B392 02                         byte_AC78:	dc.b 2
0000B393 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B398 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B39D 02                         byte_AC83:	dc.b 2
0000B39E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3A3 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B3A8 02                         byte_AC8E:	dc.b 2
0000B3A9 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3AE F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B3B3 02                         byte_AC99:	dc.b 2
0000B3B4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3B9 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B3BE                            		even
0000B3BE                            		even
0000B3BE                            
0000B3BE                            ; ===========================================================================
0000B3BE                            ; ---------------------------------------------------------------------------
0000B3BE                            ; Object 2D - Burrobot enemy (LZ)
0000B3BE                            ; ---------------------------------------------------------------------------
0000B3BE                            
0000B3BE                            Obj2D:					; XREF: Obj_Index
0000B3BE 7000                       		moveq	#0,d0
0000B3C0 1028 0024                  		move.b	$24(a0),d0
0000B3C4 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B3C8 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B3CC                            ; ===========================================================================
0000B3CC 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B3CE 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B3D0                            ; ===========================================================================
0000B3D0                            
0000B3D0                            Obj2D_Main:				; XREF: Obj2D_Index
0000B3D0 5428 0024                  		addq.b	#2,$24(a0)
0000B3D4 117C 0013 0016             		move.b	#$13,$16(a0)
0000B3DA 117C 0008 0017             		move.b	#8,$17(a0)
0000B3E0 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B3E8 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B3EE 0028 0004 0001             		ori.b	#4,1(a0)
0000B3F4 117C 0004 0018             		move.b	#4,$18(a0)
0000B3FA 117C 0005 0020             		move.b	#5,$20(a0)
0000B400 117C 000C 0019             		move.b	#$C,$19(a0)
0000B406 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B40A 117C 0002 001C             		move.b	#2,$1C(a0)
0000B410                            
0000B410                            Obj2D_Action:				; XREF: Obj2D_Index
0000B410 7000                       		moveq	#0,d0
0000B412 1028 0025                  		move.b	$25(a0),d0
0000B416 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B41A 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B41E 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B424 6100 FA9C                  		bsr.w	AnimateSprite
0000B428 6000 0000                  		bra.w	MarkObjGone
0000B42C                            ; ===========================================================================
0000B42C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B42E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B430 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B432 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B434                            ; ===========================================================================
0000B434                            
0000B434                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B434 5368 0030                  		subq.w	#1,$30(a0)
0000B438 6A00                       		bpl.s	locret_AD42
0000B43A 5428 0025                  		addq.b	#2,$25(a0)
0000B43E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B444 317C 0080 0010             		move.w	#$80,$10(a0)
0000B44A 117C 0001 001C             		move.b	#1,$1C(a0)
0000B450 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B456 6700                       		beq.s	locret_AD42
0000B458 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B45C                            
0000B45C                            locret_AD42:
0000B45C 4E75                       		rts	
0000B45E                            ; ===========================================================================
0000B45E                            
0000B45E                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B45E 5368 0030                  		subq.w	#1,$30(a0)
0000B462 6B00                       		bmi.s	loc_AD84
0000B464 6100 0000                  		bsr.w	SpeedToPos
0000B468 0868 0000 0032             		bchg	#0,$32(a0)
0000B46E 6600                       		bne.s	loc_AD78
0000B470 3628 0008                  		move.w	8(a0),d3
0000B474 0643 000C                  		addi.w	#$C,d3
0000B478 0828 0000 0022             		btst	#0,$22(a0)
0000B47E 6600                       		bne.s	loc_AD6A
0000B480 0443 0018                  		subi.w	#$18,d3
0000B484                            
0000B484                            loc_AD6A:
0000B484 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B48A 0C41 000C                  		cmpi.w	#$C,d1
0000B48E 6C00                       		bge.s	loc_AD84
0000B490 4E75                       		rts	
0000B492                            ; ===========================================================================
0000B492                            
0000B492                            loc_AD78:				; XREF: Obj2D_Move
0000B492 4EB9 0000 0000             		jsr	ObjHitFloor
0000B498 D368 000C                  		add.w	d1,$C(a0)
0000B49C 4E75                       		rts	
0000B49E                            ; ===========================================================================
0000B49E                            
0000B49E                            loc_AD84:				; XREF: Obj2D_Move
0000B49E 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B4A4 6700                       		beq.s	loc_ADA4
0000B4A6 5528 0025                  		subq.b	#2,$25(a0)
0000B4AA 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B4B0 317C 0000 0010             		move.w	#0,$10(a0)
0000B4B6 117C 0000 001C             		move.b	#0,$1C(a0)
0000B4BC 4E75                       		rts	
0000B4BE                            ; ===========================================================================
0000B4BE                            
0000B4BE                            loc_ADA4:
0000B4BE 5428 0025                  		addq.b	#2,$25(a0)
0000B4C2 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B4C8 117C 0002 001C             		move.b	#2,$1C(a0)
0000B4CE 4E75                       		rts	
0000B4D0                            ; ===========================================================================
0000B4D0                            
0000B4D0                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B4D0 6100 0000                  		bsr.w	SpeedToPos
0000B4D4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B4DA 6B00                       		bmi.s	locret_ADF0
0000B4DC 117C 0003 001C             		move.b	#3,$1C(a0)
0000B4E2 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4E8 4A41                       		tst.w	d1
0000B4EA 6A00                       		bpl.s	locret_ADF0
0000B4EC D368 000C                  		add.w	d1,$C(a0)
0000B4F0 317C 0000 0012             		move.w	#0,$12(a0)
0000B4F6 117C 0001 001C             		move.b	#1,$1C(a0)
0000B4FC 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B502 5528 0025                  		subq.b	#2,$25(a0)
0000B506 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B50A                            
0000B50A                            locret_ADF0:
0000B50A 4E75                       		rts	
0000B50C                            ; ===========================================================================
0000B50C                            
0000B50C                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B50C 343C 0060                  		move.w	#$60,d2
0000B510 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B514 6400                       		bcc.s	locret_AE20
0000B516 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B51A 9068 000C                  		sub.w	$C(a0),d0
0000B51E 6400                       		bcc.s	locret_AE20
0000B520 0C40 FF80                  		cmpi.w	#-$80,d0
0000B524 6500                       		bcs.s	locret_AE20
0000B526 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B52A 6600                       		bne.s	locret_AE20
0000B52C 5528 0025                  		subq.b	#2,$25(a0)
0000B530 3141 0010                  		move.w	d1,$10(a0)
0000B534 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B53A                            
0000B53A                            locret_AE20:
0000B53A 4E75                       		rts	
0000B53C                            
0000B53C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B53C                            
0000B53C                            
0000B53C                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B53C 323C 0080                  		move.w	#$80,d1
0000B540 08E8 0000 0022             		bset	#0,$22(a0)
0000B546 3038 D008                  		move.w	($FFFFD008).w,d0
0000B54A 9068 0008                  		sub.w	8(a0),d0
0000B54E 6400                       		bcc.s	loc_AE40
0000B550 4440                       		neg.w	d0
0000B552 4441                       		neg.w	d1
0000B554 08A8 0000 0022             		bclr	#0,$22(a0)
0000B55A                            
0000B55A                            loc_AE40:
0000B55A B042                       		cmp.w	d2,d0
0000B55C 4E75                       		rts	
0000B55E                            ; End of function Obj2D_ChkSonic2
0000B55E                            
0000B55E                            ; ===========================================================================
0000B55E                            Ani_obj2D:
0000B55E                            	include "_anim\obj2D.asm"
0000B55E                            ; ---------------------------------------------------------------------------
0000B55E                            ; Animation script - Burrobot enemy but craig
0000B55E                            ; ---------------------------------------------------------------------------
0000B55E 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B560 0000                       		dc.w byte_AE50-Ani_obj2D
0000B562 0000                       		dc.w byte_AE54-Ani_obj2D
0000B564 0000                       		dc.w byte_AE58-Ani_obj2D
0000B566 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B569 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B56D 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B57B 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B57E                            		even
0000B57E                            		even
0000B57E                            
0000B57E                            ; ---------------------------------------------------------------------------
0000B57E                            ; Sprite mappings - Burrobot enemy (LZ)
0000B57E                            ; ---------------------------------------------------------------------------
0000B57E                            Map_obj2D:
0000B57E                            	include "_maps\obj2D.asm"
0000B57E                            Map_e3a3:
0000B57E 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B580 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B582 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B584 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B586 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B588 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B58A 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B58C 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B58E 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B590 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B592 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B594 02                         Map_e3a3_16: 	dc.b $2
0000B595 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B59A 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B59F 02                         Map_e3a3_21: 	dc.b $2
0000B5A0 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B5A5 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B5AA 02                         Map_e3a3_2C: 	dc.b $2
0000B5AB EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B5B0 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B5B5 02                         Map_e3a3_37: 	dc.b $2
0000B5B6 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B5BB FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B5C0 02                         Map_e3a3_42: 	dc.b $2
0000B5C1 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B5C6 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B5CB 02                         Map_e3a3_4D: 	dc.b $2
0000B5CC EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B5D1 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B5D6 02                         Map_e3a3_58: 	dc.b $2
0000B5D7 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B5DC FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B5E1 02                         Map_e3a3_63: 	dc.b $2
0000B5E2 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B5E7 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B5EC 02                         Map_e3a3_6E: 	dc.b $2
0000B5ED EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B5F2 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B5F7 02                         Map_e3a3_79: 	dc.b $2
0000B5F8 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B5FD 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B602 02                         Map_e3a3_84: 	dc.b $2
0000B603 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B608 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B60E 00                         	even
0000B60E 00                         	even
0000B60E                            
0000B60E                            ; ===========================================================================
0000B60E                            ; ---------------------------------------------------------------------------
0000B60E                            ; Object 2F - large moving platforms (MZ)
0000B60E                            ; ---------------------------------------------------------------------------
0000B60E                            
0000B60E                            Obj2F:					; XREF: Obj_Index
0000B60E 7000                       		moveq	#0,d0
0000B610 1028 0024                  		move.b	$24(a0),d0
0000B614 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B618 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B61C                            ; ===========================================================================
0000B61C 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B61E 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B620                            
0000B620 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B622 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B624 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B626 0140                       		dc.b 1,	$40
0000B628 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B62A 0220                       		dc.b 2,	$20
0000B62C                            ; ===========================================================================
0000B62C                            
0000B62C                            Obj2F_Main:				; XREF: Obj2F_Index
0000B62C 5428 0024                  		addq.b	#2,$24(a0)
0000B630 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B638 317C C000 0002             		move.w	#$C000,2(a0)
0000B63E 117C 0004 0001             		move.b	#4,1(a0)
0000B644 117C 0005 0018             		move.b	#5,$18(a0)
0000B64A 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B650 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B656 7000                       		moveq	#0,d0
0000B658 1028 0028                  		move.b	$28(a0),d0
0000B65C E448                       		lsr.w	#2,d0
0000B65E 0240 001C                  		andi.w	#$1C,d0
0000B662 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B666 3019                       		move.w	(a1)+,d0
0000B668 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B66C 214A 0030                  		move.l	a2,$30(a0)
0000B670 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B674 1151 0019                  		move.b	(a1),$19(a0)
0000B678 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B67E 117C 0040 0016             		move.b	#$40,$16(a0)
0000B684 08E8 0004 0001             		bset	#4,1(a0)
0000B68A                            
0000B68A                            Obj2F_Action:				; XREF: Obj2F_Index
0000B68A 6100 0000                  		bsr.w	Obj2F_Types
0000B68E 4A28 0025                  		tst.b	$25(a0)
0000B692 6700                       		beq.s	Obj2F_Solid
0000B694 7200                       		moveq	#0,d1
0000B696 1228 0019                  		move.b	$19(a0),d1
0000B69A 0641 000B                  		addi.w	#$B,d1
0000B69E 6100 C556                  		bsr.w	ExitPlatform
0000B6A2 0829 0003 0022             		btst	#3,$22(a1)
0000B6A8 6600 0000                  		bne.w	Obj2F_Slope
0000B6AC 4228 0025                  		clr.b	$25(a0)
0000B6B0 6000                       		bra.s	Obj2F_Display
0000B6B2                            ; ===========================================================================
0000B6B2                            
0000B6B2                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B6B2 7200                       		moveq	#0,d1
0000B6B4 1228 0019                  		move.b	$19(a0),d1
0000B6B8 0641 000B                  		addi.w	#$B,d1
0000B6BC 2468 0030                  		movea.l	$30(a0),a2
0000B6C0 3428 0008                  		move.w	8(a0),d2
0000B6C4 6100 D520                  		bsr.w	SlopeObject2
0000B6C8 6000                       		bra.s	Obj2F_Display
0000B6CA                            ; ===========================================================================
0000B6CA                            
0000B6CA                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B6CA 7200                       		moveq	#0,d1
0000B6CC 1228 0019                  		move.b	$19(a0),d1
0000B6D0 0641 000B                  		addi.w	#$B,d1
0000B6D4 343C 0020                  		move.w	#$20,d2
0000B6D8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B6DE 6600                       		bne.s	loc_AF8E
0000B6E0 343C 0030                  		move.w	#$30,d2
0000B6E4                            
0000B6E4                            loc_AF8E:
0000B6E4 2468 0030                  		movea.l	$30(a0),a2
0000B6E8 6100 0000                  		bsr.w	SolidObject2F
0000B6EC                            
0000B6EC                            Obj2F_Display:				; XREF: Obj2F_Action
0000B6EC 6100 0000                  		bsr.w	DisplaySprite
0000B6F0 6000 0000                  		bra.w	Obj2F_ChkDel
0000B6F4                            
0000B6F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6F4                            
0000B6F4                            
0000B6F4                            Obj2F_Types:				; XREF: Obj2F_Action
0000B6F4 7000                       		moveq	#0,d0
0000B6F6 1028 0028                  		move.b	$28(a0),d0
0000B6FA 0240 0007                  		andi.w	#7,d0
0000B6FE D040                       		add.w	d0,d0
0000B700 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B704 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B708                            ; End of function Obj2F_Types
0000B708                            
0000B708                            ; ===========================================================================
0000B708 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B70A 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B70C 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B70E 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B710 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B712 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B714                            ; ===========================================================================
0000B714                            
0000B714                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B714 4E75                       		rts			; type 00 platform doesn't move
0000B716                            ; ===========================================================================
0000B716                            
0000B716                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B716 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B71A 323C 0020                  		move.w	#$20,d1
0000B71E 6000                       		bra.s	Obj2F_Move
0000B720                            ; ===========================================================================
0000B720                            
0000B720                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B720 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B724 323C 0030                  		move.w	#$30,d1
0000B728 6000                       		bra.s	Obj2F_Move
0000B72A                            ; ===========================================================================
0000B72A                            
0000B72A                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B72A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B72E 323C 0040                  		move.w	#$40,d1
0000B732 6000                       		bra.s	Obj2F_Move
0000B734                            ; ===========================================================================
0000B734                            
0000B734                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B734 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B738 323C 0060                  		move.w	#$60,d1
0000B73C                            
0000B73C                            Obj2F_Move:
0000B73C 0828 0003 0028             		btst	#3,$28(a0)
0000B742 6700                       		beq.s	loc_AFF2
0000B744 4440                       		neg.w	d0
0000B746 D041                       		add.w	d1,d0
0000B748                            
0000B748                            loc_AFF2:
0000B748 3228 002C                  		move.w	$2C(a0),d1
0000B74C 9240                       		sub.w	d0,d1
0000B74E 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B752 4E75                       		rts	
0000B754                            ; ===========================================================================
0000B754                            
0000B754                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B754 1028 0034                  		move.b	$34(a0),d0
0000B758 4A28 0025                  		tst.b	$25(a0)
0000B75C 6600                       		bne.s	loc_B010
0000B75E 5500                       		subq.b	#2,d0
0000B760 6400                       		bcc.s	loc_B01C
0000B762 7000                       		moveq	#0,d0
0000B764 6000                       		bra.s	loc_B01C
0000B766                            ; ===========================================================================
0000B766                            
0000B766                            loc_B010:
0000B766 5800                       		addq.b	#4,d0
0000B768 0C00 0040                  		cmpi.b	#$40,d0
0000B76C 6500                       		bcs.s	loc_B01C
0000B76E 103C 0040                  		move.b	#$40,d0
0000B772                            
0000B772                            loc_B01C:
0000B772 1140 0034                  		move.b	d0,$34(a0)
0000B776 4EB9 0000 2CEC             		jsr	(CalcSine).l
0000B77C E848                       		lsr.w	#4,d0
0000B77E 3200                       		move.w	d0,d1
0000B780 D068 002C                  		add.w	$2C(a0),d0
0000B784 3140 000C                  		move.w	d0,$C(a0)
0000B788 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B78E 6600                       		bne.s	loc_B07A
0000B790 4A28 0035                  		tst.b	$35(a0)
0000B794 6600                       		bne.s	loc_B07A
0000B796 117C 0001 0035             		move.b	#1,$35(a0)
0000B79C 6100 0000                  		bsr.w	SingleObjLoad2
0000B7A0 6600                       		bne.s	loc_B07A
0000B7A2 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B7A6 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7AC 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B7B2 5069 002C                  		addq.w	#8,$2C(a1)
0000B7B6 5769 002C                  		subq.w	#3,$2C(a1)
0000B7BA 0469 0040 0008             		subi.w	#$40,8(a1)
0000B7C0 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B7C6 2348 0038                  		move.l	a0,$38(a1)
0000B7CA 2448                       		movea.l	a0,a2
0000B7CC 6100                       		bsr.s	sub_B09C
0000B7CE                            
0000B7CE                            loc_B07A:
0000B7CE 7400                       		moveq	#0,d2
0000B7D0 45E8 0036                  		lea	$36(a0),a2
0000B7D4 141A                       		move.b	(a2)+,d2
0000B7D6 5302                       		subq.b	#1,d2
0000B7D8 6500                       		bcs.s	locret_B09A
0000B7DA                            
0000B7DA                            loc_B086:
0000B7DA 7000                       		moveq	#0,d0
0000B7DC 101A                       		move.b	(a2)+,d0
0000B7DE ED48                       		lsl.w	#6,d0
0000B7E0 0640 D000                  		addi.w	#-$3000,d0
0000B7E4 3240                       		movea.w	d0,a1
0000B7E6 3341 003C                  		move.w	d1,$3C(a1)
0000B7EA 51CA FFEE                  		dbf	d2,loc_B086
0000B7EE                            
0000B7EE                            locret_B09A:
0000B7EE 4E75                       		rts	
0000B7F0                            
0000B7F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7F0                            
0000B7F0                            
0000B7F0                            sub_B09C:
0000B7F0 45EA 0036                  		lea	$36(a2),a2
0000B7F4 7000                       		moveq	#0,d0
0000B7F6 1012                       		move.b	(a2),d0
0000B7F8 5212                       		addq.b	#1,(a2)
0000B7FA 45F2 0001                  		lea	1(a2,d0.w),a2
0000B7FE 3009                       		move.w	a1,d0
0000B800 0440 D000                  		subi.w	#-$3000,d0
0000B804 EC48                       		lsr.w	#6,d0
0000B806 0240 007F                  		andi.w	#$7F,d0
0000B80A 1480                       		move.b	d0,(a2)
0000B80C 4E75                       		rts	
0000B80E                            ; End of function sub_B09C
0000B80E                            
0000B80E                            ; ===========================================================================
0000B80E                            
0000B80E                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B80E 4A28 0035                  		tst.b	$35(a0)
0000B812 6700                       		beq.s	loc_B0C6
0000B814 4A28 0001                  		tst.b	1(a0)
0000B818 6A00                       		bpl.s	Obj2F_DelFlames
0000B81A                            
0000B81A                            loc_B0C6:
0000B81A 3028 002A                  		move.w	$2A(a0),d0
0000B81E 0240 FF80                  		andi.w	#$FF80,d0
0000B822 3238 F700                  		move.w	($FFFFF700).w,d1
0000B826 0441 0080                  		subi.w	#$80,d1
0000B82A 0241 FF80                  		andi.w	#$FF80,d1
0000B82E 9041                       		sub.w	d1,d0
0000B830 0C40 0280                  		cmpi.w	#$280,d0
0000B834 6200 0000                  		bhi.w	DeleteObject
0000B838 4E75                       		rts	
0000B83A                            ; ===========================================================================
0000B83A                            
0000B83A                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B83A 7400                       		moveq	#0,d2
0000B83C                            
0000B83C                            loc_B0E8:
0000B83C 45E8 0036                  		lea	$36(a0),a2
0000B840 1412                       		move.b	(a2),d2
0000B842 421A                       		clr.b	(a2)+
0000B844 5302                       		subq.b	#1,d2
0000B846 6500                       		bcs.s	locret_B116
0000B848                            
0000B848                            loc_B0F4:
0000B848 7000                       		moveq	#0,d0
0000B84A 1012                       		move.b	(a2),d0
0000B84C 421A                       		clr.b	(a2)+
0000B84E ED48                       		lsl.w	#6,d0
0000B850 0640 D000                  		addi.w	#-$3000,d0
0000B854 3240                       		movea.w	d0,a1
0000B856 6100 0000                  		bsr.w	DeleteObject2
0000B85A 51CA FFEC                  		dbf	d2,loc_B0F4
0000B85E 117C 0000 0035             		move.b	#0,$35(a0)
0000B864 117C 0000 0034             		move.b	#0,$34(a0)
0000B86A                            
0000B86A                            locret_B116:
0000B86A 4E75                       		rts	
0000B86C                            ; ===========================================================================
0000B86C                            ; ---------------------------------------------------------------------------
0000B86C                            ; Collision data for large moving platforms (MZ)
0000B86C                            ; ---------------------------------------------------------------------------
0000B86C                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B8B8                            		even
0000B8B8                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B8E4                            		even
0000B8E4                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B930                            		even
0000B930                            ; ===========================================================================
0000B930                            ; ---------------------------------------------------------------------------
0000B930                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B930                            ; (appears when	you walk on sinking platforms)
0000B930                            ; ---------------------------------------------------------------------------
0000B930                            
0000B930                            Obj35:					; XREF: Obj_Index
0000B930 7000                       		moveq	#0,d0
0000B932 1028 0024                  		move.b	$24(a0),d0
0000B936 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B93A 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B93E                            ; ===========================================================================
0000B93E 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B940 0000                       		dc.w loc_B238-Obj35_Index
0000B942 0000                       		dc.w Obj35_Move-Obj35_Index
0000B944                            ; ===========================================================================
0000B944                            
0000B944                            Obj35_Main:				; XREF: Obj35_Index
0000B944 5428 0024                  		addq.b	#2,$24(a0)
0000B948 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B950 317C 0345 0002             		move.w	#$345,2(a0)
0000B956 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B95C 117C 0004 0001             		move.b	#4,1(a0)
0000B962 117C 0001 0018             		move.b	#1,$18(a0)
0000B968 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B96E 117C 0008 0019             		move.b	#8,$19(a0)
0000B974 303C 00C8                  		move.w	#$C8,d0
0000B978 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000B97E 4A28 0028                  		tst.b	$28(a0)
0000B982 6700                       		beq.s	loc_B238
0000B984 5428 0024                  		addq.b	#2,$24(a0)
0000B988 6000 0000                  		bra.w	Obj35_Move
0000B98C                            ; ===========================================================================
0000B98C                            
0000B98C                            loc_B238:				; XREF: Obj35_Index
0000B98C 2268 0030                  		movea.l	$30(a0),a1
0000B990 3228 0008                  		move.w	8(a0),d1
0000B994 9268 002A                  		sub.w	$2A(a0),d1
0000B998 0641 000C                  		addi.w	#$C,d1
0000B99C 3001                       		move.w	d1,d0
0000B99E E248                       		lsr.w	#1,d0
0000B9A0 1031 0000                  		move.b	(a1,d0.w),d0
0000B9A4 4440                       		neg.w	d0
0000B9A6 D068 002C                  		add.w	$2C(a0),d0
0000B9AA 3400                       		move.w	d0,d2
0000B9AC D068 003C                  		add.w	$3C(a0),d0
0000B9B0 3140 000C                  		move.w	d0,$C(a0)
0000B9B4 0C41 0084                  		cmpi.w	#$84,d1
0000B9B8 6400                       		bcc.s	loc_B2B0
0000B9BA 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B9C2 0C41 0080                  		cmpi.w	#$80,d1
0000B9C6 6400                       		bcc.s	loc_B2B0
0000B9C8 2028 0008                  		move.l	8(a0),d0
0000B9CC 0680 0008 0000             		addi.l	#$80000,d0
0000B9D2 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B9D8 6600                       		bne.s	loc_B2B0
0000B9DA 6100 0000                  		bsr.w	SingleObjLoad2
0000B9DE 6600                       		bne.s	loc_B2B0
0000B9E0 12BC 0035                  		move.b	#$35,0(a1)
0000B9E4 3368 0008 0008             		move.w	8(a0),8(a1)
0000B9EA 3342 002C                  		move.w	d2,$2C(a1)
0000B9EE 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B9F4 137C 0001 0028             		move.b	#1,$28(a1)
0000B9FA 2468 0038                  		movea.l	$38(a0),a2
0000B9FE 6100 FDF0                  		bsr.w	sub_B09C
0000BA02                            
0000BA02                            loc_B2B0:
0000BA02 6000                       		bra.s	Obj35_Animate
0000BA04                            ; ===========================================================================
0000BA04                            
0000BA04                            Obj35_Move:				; XREF: Obj35_Index
0000BA04 3028 002C                  		move.w	$2C(a0),d0
0000BA08 D068 003C                  		add.w	$3C(a0),d0
0000BA0C 3140 000C                  		move.w	d0,$C(a0)
0000BA10                            
0000BA10                            Obj35_Animate:				; XREF: loc_B238
0000BA10 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BA16 6100 F4AA                  		bsr.w	AnimateSprite
0000BA1A 6000 0000                  		bra.w	DisplaySprite
0000BA1E                            ; ===========================================================================
0000BA1E                            Ani_obj35:
0000BA1E                            	include "_anim\obj35.asm"
0000BA1E                            ; ---------------------------------------------------------------------------
0000BA1E                            ; Animation script - fireball that sits on the	floor (MZ)
0000BA1E                            ; ---------------------------------------------------------------------------
0000BA1E 0000                       		dc.w byte_B2CE-Ani_obj35
0000BA20 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BA26                            		even
0000BA26                            		even
0000BA26                            
0000BA26                            ; ---------------------------------------------------------------------------
0000BA26                            ; Sprite mappings - large moving platforms (MZ)
0000BA26                            ; ---------------------------------------------------------------------------
0000BA26                            Map_obj2F:
0000BA26                            	include "_maps\obj2F.asm"
0000BA26                            ; ---------------------------------------------------------------------------
0000BA26                            ; Sprite mappings - large moving platforms (MZ)
0000BA26                            ; ---------------------------------------------------------------------------
0000BA26 0000                       		dc.w byte_B2DA-Map_obj2F
0000BA28 0000                       		dc.w byte_B31C-Map_obj2F
0000BA2A 0000                       		dc.w byte_B34F-Map_obj2F
0000BA2C 0D                         byte_B2DA:	dc.b $D
0000BA2D D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BA32 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BA37 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA3C D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BA41 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BA46 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA4B D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BA50 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BA55 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BA5A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA5F 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BA64 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BA69 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BA6E 0A                         byte_B31C:	dc.b $A
0000BA6F D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BA74 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BA79 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA7E C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BA83 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BA88 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA8D C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BA92 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BA97 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BA9C E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BAA1 06                         byte_B34F:	dc.b 6
0000BAA2 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BAA7 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BAAC 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BAB1 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BAB6 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BABB 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BAC0                            		even
0000BAC0                            		even
0000BAC0                            
0000BAC0                            ; ---------------------------------------------------------------------------
0000BAC0                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BAC0                            ; ---------------------------------------------------------------------------
0000BAC0                            Map_obj14:
0000BAC0                            	include "_maps\obj14.asm"
0000BAC0                            ; --------------------------------------------------------------------------------
0000BAC0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BAC0                            ; --------------------------------------------------------------------------------
0000BAC0                            
0000BAC0                            SME_C6wT7:	
0000BAC0 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BAC4 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BAC8 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BACC 01                         SME_C6wT7_C:	dc.b 1	
0000BACD E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BAD2 01                         SME_C6wT7_12:	dc.b 1	
0000BAD3 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BAD8 02                         SME_C6wT7_18:	dc.b 2	
0000BAD9 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BADE E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BAE3 01                         SME_C6wT7_23:	dc.b 1	
0000BAE4 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAE9 01                         SME_C6wT7_29:	dc.b 1	
0000BAEA F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAEF 01                         SME_C6wT7_2F:	dc.b 1	
0000BAF0 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BAF6 00                         		even
0000BAF6 00                         		even
0000BAF6                            
0000BAF6                            ; ===========================================================================
0000BAF6                            ; ---------------------------------------------------------------------------
0000BAF6                            ; Object 30 - large green glassy blocks	(MZ)
0000BAF6                            ; ---------------------------------------------------------------------------
0000BAF6                            
0000BAF6                            Obj30:					; XREF: Obj_Index
0000BAF6 7000                       		moveq	#0,d0
0000BAF8 1028 0024                  		move.b	$24(a0),d0
0000BAFC 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BB00 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BB04 3028 0008                  		move.w	8(a0),d0
0000BB08 0240 FF80                  		andi.w	#$FF80,d0
0000BB0C 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB10 0441 0080                  		subi.w	#$80,d1
0000BB14 0241 FF80                  		andi.w	#$FF80,d1
0000BB18 9041                       		sub.w	d1,d0
0000BB1A 0C40 0280                  		cmpi.w	#$280,d0
0000BB1E 6200 0000                  		bhi.w	Obj30_Delete
0000BB22 6000 0000                  		bra.w	DisplaySprite
0000BB26                            ; ===========================================================================
0000BB26                            
0000BB26                            Obj30_Delete:
0000BB26 6000 0000                  		bra.w	DeleteObject
0000BB2A                            ; ===========================================================================
0000BB2A 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BB2C 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BB2E 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BB30 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BB32 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BB34                            
0000BB34 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BB37 0400 01                    		dc.b 4,	0, 1
0000BB3A 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BB3D 0800 01                    		dc.b 8,	0, 1
0000BB40                            ; ===========================================================================
0000BB40                            
0000BB40                            Obj30_Main:				; XREF: Obj30_Index
0000BB40 45F9 0000 BB34             		lea	(Obj30_Vars1).l,a2
0000BB46 7201                       		moveq	#1,d1
0000BB48 117C 0048 0016             		move.b	#$48,$16(a0)
0000BB4E 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BB54 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BB56 45F9 0000 BB3A             		lea	(Obj30_Vars2).l,a2
0000BB5C 7201                       		moveq	#1,d1
0000BB5E 117C 0038 0016             		move.b	#$38,$16(a0)
0000BB64                            
0000BB64                            loc_B40C:
0000BB64 2248                       		movea.l	a0,a1
0000BB66 6000                       		bra.s	Obj30_Load	; load main object
0000BB68                            ; ===========================================================================
0000BB68                            
0000BB68                            Obj30_Loop:
0000BB68 6100 0000                  		bsr.w	SingleObjLoad2
0000BB6C 6600                       		bne.s	loc_B480
0000BB6E                            
0000BB6E                            Obj30_Load:				; XREF: Obj30_Main
0000BB6E 135A 0024                  		move.b	(a2)+,$24(a1)
0000BB72 12BC 0030                  		move.b	#$30,0(a1)
0000BB76 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB7C 101A                       		move.b	(a2)+,d0
0000BB7E 4880                       		ext.w	d0
0000BB80 D068 000C                  		add.w	$C(a0),d0
0000BB84 3340 000C                  		move.w	d0,$C(a1)
0000BB88 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BB90 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BB96 137C 0004 0001             		move.b	#4,1(a1)
0000BB9C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BBA2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BBA8 137C 0020 0019             		move.b	#$20,$19(a1)
0000BBAE 137C 0004 0018             		move.b	#4,$18(a1)
0000BBB4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BBB8 2348 003C                  		move.l	a0,$3C(a1)
0000BBBC 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BBC0                            
0000BBC0 137C 0010 0019             		move.b	#$10,$19(a1)
0000BBC6 137C 0003 0018             		move.b	#3,$18(a1)
0000BBCC 5029 0028                  		addq.b	#8,$28(a1)
0000BBD0 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BBD6                            
0000BBD6                            loc_B480:
0000BBD6 317C 0090 0032             		move.w	#$90,$32(a0)
0000BBDC 08E8 0004 0001             		bset	#4,1(a0)
0000BBE2                            
0000BBE2                            Obj30_Block012:				; XREF: Obj30_Index
0000BBE2 6100 0000                  		bsr.w	Obj30_Types
0000BBE6 323C 002B                  		move.w	#$2B,d1
0000BBEA 343C 0048                  		move.w	#$48,d2
0000BBEE 363C 0049                  		move.w	#$49,d3
0000BBF2 3828 0008                  		move.w	8(a0),d4
0000BBF6 6000 0000                  		bra.w	SolidObject
0000BBFA                            ; ===========================================================================
0000BBFA                            
0000BBFA                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BBFA 2268 003C                  		movea.l	$3C(a0),a1
0000BBFE 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC04 6000 0000                  		bra.w	Obj30_Types
0000BC08                            ; ===========================================================================
0000BC08                            
0000BC08                            Obj30_Block34:				; XREF: Obj30_Index
0000BC08 6100 0000                  		bsr.w	Obj30_Types
0000BC0C 323C 002B                  		move.w	#$2B,d1
0000BC10 343C 0038                  		move.w	#$38,d2
0000BC14 363C 0039                  		move.w	#$39,d3
0000BC18 3828 0008                  		move.w	8(a0),d4
0000BC1C 6000 0000                  		bra.w	SolidObject
0000BC20                            ; ===========================================================================
0000BC20                            
0000BC20                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BC20 2268 003C                  		movea.l	$3C(a0),a1
0000BC24 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC2A 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BC30 6000 0002                  		bra.w	*+4
0000BC34                            
0000BC34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC34                            
0000BC34                            
0000BC34                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BC34 7000                       		moveq	#0,d0
0000BC36 1028 0028                  		move.b	$28(a0),d0
0000BC3A 0240 0007                  		andi.w	#7,d0
0000BC3E D040                       		add.w	d0,d0
0000BC40 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BC44 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BC48                            ; End of function Obj30_Types
0000BC48                            
0000BC48                            ; ===========================================================================
0000BC48 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BC4A 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BC4C 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BC4E 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BC50 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BC52                            ; ===========================================================================
0000BC52                            
0000BC52                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BC52 4E75                       		rts	
0000BC54                            ; ===========================================================================
0000BC54                            
0000BC54                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BC54 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC58 323C 0040                  		move.w	#$40,d1
0000BC5C 6000                       		bra.s	loc_B514
0000BC5E                            ; ===========================================================================
0000BC5E                            
0000BC5E                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BC5E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC62 323C 0040                  		move.w	#$40,d1
0000BC66 4440                       		neg.w	d0
0000BC68 D041                       		add.w	d1,d0
0000BC6A                            
0000BC6A                            loc_B514:				; XREF: Obj30_Type01
0000BC6A 0828 0003 0028             		btst	#3,$28(a0)
0000BC70 6700                       		beq.s	loc_B526
0000BC72 4440                       		neg.w	d0
0000BC74 D041                       		add.w	d1,d0
0000BC76 E208                       		lsr.b	#1,d0
0000BC78 0640 0020                  		addi.w	#$20,d0
0000BC7C                            
0000BC7C                            loc_B526:
0000BC7C 6000 0000                  		bra.w	loc_B5EE
0000BC80                            ; ===========================================================================
0000BC80                            
0000BC80                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BC80 0828 0003 0028             		btst	#3,$28(a0)
0000BC86 6700                       		beq.s	loc_B53E
0000BC88 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC8C 0440 0010                  		subi.w	#$10,d0
0000BC90 6000 0000                  		bra.w	loc_B5EE
0000BC94                            ; ===========================================================================
0000BC94                            
0000BC94                            loc_B53E:
0000BC94 0828 0003 0022             		btst	#3,$22(a0)
0000BC9A 6600                       		bne.s	loc_B54E
0000BC9C 08A8 0000 0034             		bclr	#0,$34(a0)
0000BCA2 6000                       		bra.s	loc_B582
0000BCA4                            ; ===========================================================================
0000BCA4                            
0000BCA4                            loc_B54E:
0000BCA4 4A28 0034                  		tst.b	$34(a0)
0000BCA8 6600                       		bne.s	loc_B582
0000BCAA 117C 0001 0034             		move.b	#1,$34(a0)
0000BCB0 08E8 0000 0035             		bset	#0,$35(a0)
0000BCB6 6700                       		beq.s	loc_B582
0000BCB8 08E8 0007 0034             		bset	#7,$34(a0)
0000BCBE 317C 0010 0036             		move.w	#$10,$36(a0)
0000BCC4 117C 000A 0038             		move.b	#$A,$38(a0)
0000BCCA 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BCD0 6600                       		bne.s	loc_B582
0000BCD2 317C 0040 0036             		move.w	#$40,$36(a0)
0000BCD8                            
0000BCD8                            loc_B582:
0000BCD8 4A28 0034                  		tst.b	$34(a0)
0000BCDC 6A00                       		bpl.s	loc_B5AA
0000BCDE 4A28 0038                  		tst.b	$38(a0)
0000BCE2 6700                       		beq.s	loc_B594
0000BCE4 5328 0038                  		subq.b	#1,$38(a0)
0000BCE8 6600                       		bne.s	loc_B5AA
0000BCEA                            
0000BCEA                            loc_B594:
0000BCEA 4A68 0032                  		tst.w	$32(a0)
0000BCEE 6700                       		beq.s	loc_B5A4
0000BCF0 5368 0032                  		subq.w	#1,$32(a0)
0000BCF4 5368 0036                  		subq.w	#1,$36(a0)
0000BCF8 6600                       		bne.s	loc_B5AA
0000BCFA                            
0000BCFA                            loc_B5A4:
0000BCFA 08A8 0007 0034             		bclr	#7,$34(a0)
0000BD00                            
0000BD00                            loc_B5AA:
0000BD00 3028 0032                  		move.w	$32(a0),d0
0000BD04 6000                       		bra.s	loc_B5EE
0000BD06                            ; ===========================================================================
0000BD06                            
0000BD06                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BD06 0828 0003 0028             		btst	#3,$28(a0)
0000BD0C 6700                       		beq.s	Obj30_ChkSwitch
0000BD0E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BD12 0440 0010                  		subi.w	#$10,d0
0000BD16 6000                       		bra.s	loc_B5EE
0000BD18                            ; ===========================================================================
0000BD18                            
0000BD18                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BD18 4A28 0034                  		tst.b	$34(a0)
0000BD1C 6600                       		bne.s	loc_B5E0
0000BD1E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BD22 7000                       		moveq	#0,d0
0000BD24 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BD28 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BD2A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BD2E 6700                       		beq.s	loc_B5EA	; if not, branch
0000BD30 117C 0001 0034             		move.b	#1,$34(a0)
0000BD36                            
0000BD36                            loc_B5E0:
0000BD36 4A68 0032                  		tst.w	$32(a0)
0000BD3A 6700                       		beq.s	loc_B5EA
0000BD3C 5568 0032                  		subq.w	#2,$32(a0)
0000BD40                            
0000BD40                            loc_B5EA:
0000BD40 3028 0032                  		move.w	$32(a0),d0
0000BD44                            
0000BD44                            loc_B5EE:
0000BD44 3228 0030                  		move.w	$30(a0),d1
0000BD48 9240                       		sub.w	d0,d1
0000BD4A 3141 000C                  		move.w	d1,$C(a0)
0000BD4E 4E75                       		rts	
0000BD50                            ; ===========================================================================
0000BD50                            ; ---------------------------------------------------------------------------
0000BD50                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD50                            ; ---------------------------------------------------------------------------
0000BD50                            Map_obj30:
0000BD50                            	include "_maps\obj30.asm"
0000BD50                            ; ---------------------------------------------------------------------------
0000BD50                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD50                            ; ---------------------------------------------------------------------------
0000BD50 0000                       		dc.w byte_B600-Map_obj30
0000BD52 0000                       		dc.w byte_B63D-Map_obj30
0000BD54 0000                       		dc.w byte_B648-Map_obj30
0000BD56 0C                         byte_B600:	dc.b $C
0000BD57 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BD5C B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BD61 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BD66 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BD6B E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BD70 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BD75 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BD7A 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BD7F 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BD84 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BD89 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BD8E 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BD93 02                         byte_B63D:	dc.b 2
0000BD94 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BD99 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BD9E 0A                         byte_B648:	dc.b $A
0000BD9F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BDA4 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BDA9 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BDAE D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BDB3 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BDB8 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BDBD 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BDC2 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BDC7 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BDCC 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BDD2 00                         		even
0000BDD2 00                         		even
0000BDD2                            
0000BDD2                            ; ===========================================================================
0000BDD2                            ; ---------------------------------------------------------------------------
0000BDD2                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BDD2                            ; ---------------------------------------------------------------------------
0000BDD2                            
0000BDD2                            Obj31:					; XREF: Obj_Index
0000BDD2 7000                       		moveq	#0,d0
0000BDD4 1028 0024                  		move.b	$24(a0),d0
0000BDD8 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BDDC 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BDE0                            ; ===========================================================================
0000BDE0 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BDE2 0000                       		dc.w loc_B798-Obj31_Index
0000BDE4 0000                       		dc.w loc_B7FE-Obj31_Index
0000BDE6 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BDE8 0000                       		dc.w loc_B7E2-Obj31_Index
0000BDEA                            
0000BDEA 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BDEC 0100                       		dc.b 1,	0
0000BDEE                            
0000BDEE 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BDF1 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BDF4 08CC 03                    		dc.b 8,	$CC, 3
0000BDF7 06F0 02                    		dc.b 6,	$F0, 2
0000BDFA                            
0000BDFA 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BDFE 5000 7800                  		dc.w $5000, $7800
0000BE02 3800 5800                  		dc.w $3800, $5800
0000BE06 B800                       		dc.w $B800
0000BE08                            ; ===========================================================================
0000BE08                            
0000BE08                            Obj31_Main:				; XREF: Obj31_Index
0000BE08 7000                       		moveq	#0,d0
0000BE0A 1028 0028                  		move.b	$28(a0),d0
0000BE0E 6A00                       		bpl.s	loc_B6CE
0000BE10 0240 007F                  		andi.w	#$7F,d0
0000BE14 D040                       		add.w	d0,d0
0000BE16 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BE1A 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BE1E 101A                       		move.b	(a2)+,d0
0000BE20 1140 0028                  		move.b	d0,$28(a0)
0000BE24                            
0000BE24                            loc_B6CE:
0000BE24 0200 000F                  		andi.b	#$F,d0
0000BE28 D040                       		add.w	d0,d0
0000BE2A 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BE2E 4A40                       		tst.w	d0
0000BE30 6600                       		bne.s	loc_B6E0
0000BE32 3142 0032                  		move.w	d2,$32(a0)
0000BE36                            
0000BE36                            loc_B6E0:
0000BE36 45F9 0000 BDEE             		lea	(Obj31_Var).l,a2
0000BE3C 2248                       		movea.l	a0,a1
0000BE3E 7203                       		moveq	#3,d1
0000BE40 6000                       		bra.s	Obj31_MakeStomper
0000BE42                            ; ===========================================================================
0000BE42                            
0000BE42                            Obj31_Loop:
0000BE42 6100 0000                  		bsr.w	SingleObjLoad2
0000BE46 6600 0000                  		bne.w	Obj31_SetSize
0000BE4A                            
0000BE4A                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BE4A 135A 0024                  		move.b	(a2)+,$24(a1)
0000BE4E 12BC 0031                  		move.b	#$31,0(a1)
0000BE52 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE58 101A                       		move.b	(a2)+,d0
0000BE5A 4880                       		ext.w	d0
0000BE5C D068 000C                  		add.w	$C(a0),d0
0000BE60 3340 000C                  		move.w	d0,$C(a1)
0000BE64 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BE6C 337C 0300 0002             		move.w	#$300,2(a1)
0000BE72 137C 0004 0001             		move.b	#4,1(a1)
0000BE78 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BE7E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BE84 137C 0010 0019             		move.b	#$10,$19(a1)
0000BE8A 3342 0034                  		move.w	d2,$34(a1)
0000BE8E 137C 0004 0018             		move.b	#4,$18(a1)
0000BE94 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BE98 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BE9E 6600                       		bne.s	loc_B76A
0000BEA0 5341                       		subq.w	#1,d1
0000BEA2 1028 0028                  		move.b	$28(a0),d0
0000BEA6 0240 00F0                  		andi.w	#$F0,d0
0000BEAA 0C40 0020                  		cmpi.w	#$20,d0
0000BEAE 679A                       		beq.s	Obj31_MakeStomper
0000BEB0 137C 0038 0019             		move.b	#$38,$19(a1)
0000BEB6 137C 0090 0020             		move.b	#$90,$20(a1)
0000BEBC 5241                       		addq.w	#1,d1
0000BEBE                            
0000BEBE                            loc_B76A:
0000BEBE 2348 003C                  		move.l	a0,$3C(a1)
0000BEC2 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BEC6                            
0000BEC6 137C 0003 0018             		move.b	#3,$18(a1)
0000BECC                            
0000BECC                            Obj31_SetSize:
0000BECC 7000                       		moveq	#0,d0
0000BECE 1028 0028                  		move.b	$28(a0),d0
0000BED2 E648                       		lsr.w	#3,d0
0000BED4 0200 000E                  		andi.b	#$E,d0
0000BED8 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BEDC 115A 0019                  		move.b	(a2)+,$19(a0)
0000BEE0 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BEE4 6000                       		bra.s	loc_B798
0000BEE6                            ; ===========================================================================
0000BEE6 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BEE8 3009                       		dc.b $30, 9
0000BEEA 100A                       		dc.b $10, $A
0000BEEC                            ; ===========================================================================
0000BEEC                            
0000BEEC                            loc_B798:				; XREF: Obj31_Index
0000BEEC 6100 0000                  		bsr.w	Obj31_Types
0000BEF0 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BEF6 7200                       		moveq	#0,d1
0000BEF8 1228 0019                  		move.b	$19(a0),d1
0000BEFC 0641 000B                  		addi.w	#$B,d1
0000BF00 343C 000C                  		move.w	#$C,d2
0000BF04 363C 000D                  		move.w	#$D,d3
0000BF08 3828 0008                  		move.w	8(a0),d4
0000BF0C 6100 0000                  		bsr.w	SolidObject
0000BF10 0828 0003 0022             		btst	#3,$22(a0)
0000BF16 6700                       		beq.s	Obj31_Display
0000BF18 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF1E 6400                       		bcc.s	Obj31_Display
0000BF20 2448                       		movea.l	a0,a2
0000BF22 41F8 D000                  		lea	($FFFFD000).w,a0
0000BF26 4EB9 0000 0000             		jsr	KillSonic
0000BF2C 204A                       		movea.l	a2,a0
0000BF2E                            
0000BF2E                            Obj31_Display:
0000BF2E 6100 0000                  		bsr.w	DisplaySprite
0000BF32 6000 0000                  		bra.w	Obj31_ChkDel
0000BF36                            ; ===========================================================================
0000BF36                            
0000BF36                            loc_B7E2:				; XREF: Obj31_Index
0000BF36 117C 0080 0016             		move.b	#$80,$16(a0)
0000BF3C 08E8 0004 0001             		bset	#4,1(a0)
0000BF42 2268 003C                  		movea.l	$3C(a0),a1
0000BF46 1029 0032                  		move.b	$32(a1),d0
0000BF4A EA08                       		lsr.b	#5,d0
0000BF4C 5600                       		addq.b	#3,d0
0000BF4E 1140 001A                  		move.b	d0,$1A(a0)
0000BF52                            
0000BF52                            loc_B7FE:				; XREF: Obj31_Index
0000BF52 2268 003C                  		movea.l	$3C(a0),a1
0000BF56 7000                       		moveq	#0,d0
0000BF58 1029 0032                  		move.b	$32(a1),d0
0000BF5C D068 0030                  		add.w	$30(a0),d0
0000BF60 3140 000C                  		move.w	d0,$C(a0)
0000BF64                            
0000BF64                            Obj31_Display2:				; XREF: Obj31_Index
0000BF64 6100 0000                  		bsr.w	DisplaySprite
0000BF68                            
0000BF68                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BF68 3028 0008                  		move.w	8(a0),d0
0000BF6C 0240 FF80                  		andi.w	#$FF80,d0
0000BF70 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF74 0441 0080                  		subi.w	#$80,d1
0000BF78 0241 FF80                  		andi.w	#$FF80,d1
0000BF7C 9041                       		sub.w	d1,d0
0000BF7E 0C40 0280                  		cmpi.w	#$280,d0
0000BF82 6200 0000                  		bhi.w	DeleteObject
0000BF86 4E75                       		rts	
0000BF88                            ; ===========================================================================
0000BF88                            
0000BF88                            Obj31_Types:				; XREF: loc_B798
0000BF88 1028 0028                  		move.b	$28(a0),d0
0000BF8C 0240 000F                  		andi.w	#$F,d0
0000BF90 D040                       		add.w	d0,d0
0000BF92 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BF96 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BF9A                            ; ===========================================================================
0000BF9A 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BF9C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF9E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFA0 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFA2 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFA4 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFA6 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFA8                            ; ===========================================================================
0000BFA8                            
0000BFA8                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BFA8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BFAC 7000                       		moveq	#0,d0
0000BFAE 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BFB2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BFB6 6700                       		beq.s	loc_B8A8	; if not, branch
0000BFB8 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BFBC 6A00                       		bpl.s	loc_B872
0000BFBE 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BFC4 6700                       		beq.s	loc_B8A0
0000BFC6                            
0000BFC6                            loc_B872:
0000BFC6 4A68 0032                  		tst.w	$32(a0)
0000BFCA 6700                       		beq.s	loc_B8A0
0000BFCC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BFD0 0200 000F                  		andi.b	#$F,d0
0000BFD4 6600                       		bne.s	loc_B892
0000BFD6 4A28 0001                  		tst.b	1(a0)
0000BFDA 6A00                       		bpl.s	loc_B892
0000BFDC 303C 00C7                  		move.w	#$C7,d0
0000BFE0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BFE6                            
0000BFE6                            loc_B892:
0000BFE6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFEC 6400                       		bcc.s	Obj31_Restart
0000BFEE 317C 0000 0032             		move.w	#0,$32(a0)
0000BFF4                            
0000BFF4                            loc_B8A0:
0000BFF4 317C 0000 0012             		move.w	#0,$12(a0)
0000BFFA 6000                       		bra.s	Obj31_Restart
0000BFFC                            ; ===========================================================================
0000BFFC                            
0000BFFC                            loc_B8A8:				; XREF: Obj31_Type00
0000BFFC 3228 0034                  		move.w	$34(a0),d1
0000C000 B268 0032                  		cmp.w	$32(a0),d1
0000C004 6700                       		beq.s	Obj31_Restart
0000C006 3028 0012                  		move.w	$12(a0),d0
0000C00A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C010 D168 0032                  		add.w	d0,$32(a0)
0000C014 B268 0032                  		cmp.w	$32(a0),d1
0000C018 6200                       		bhi.s	Obj31_Restart
0000C01A 3141 0032                  		move.w	d1,$32(a0)
0000C01E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C024 4A28 0001                  		tst.b	1(a0)
0000C028 6A00                       		bpl.s	Obj31_Restart
0000C02A 303C 00BD                  		move.w	#$BD,d0
0000C02E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C034                            
0000C034                            Obj31_Restart:
0000C034 7000                       		moveq	#0,d0
0000C036 1028 0032                  		move.b	$32(a0),d0
0000C03A D068 0030                  		add.w	$30(a0),d0
0000C03E 3140 000C                  		move.w	d0,$C(a0)
0000C042 4E75                       		rts	
0000C044                            ; ===========================================================================
0000C044                            
0000C044                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C044 4A68 0036                  		tst.w	$36(a0)
0000C048 6700                       		beq.s	loc_B938
0000C04A 4A68 0038                  		tst.w	$38(a0)
0000C04E 6700                       		beq.s	loc_B902
0000C050 5368 0038                  		subq.w	#1,$38(a0)
0000C054 6000                       		bra.s	loc_B97C
0000C056                            ; ===========================================================================
0000C056                            
0000C056                            loc_B902:
0000C056 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C05A 0200 000F                  		andi.b	#$F,d0
0000C05E 6600                       		bne.s	loc_B91C
0000C060 4A28 0001                  		tst.b	1(a0)
0000C064 6A00                       		bpl.s	loc_B91C
0000C066 303C 00C7                  		move.w	#$C7,d0
0000C06A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C070                            
0000C070                            loc_B91C:
0000C070 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C076 6400                       		bcc.s	loc_B97C
0000C078 317C 0000 0032             		move.w	#0,$32(a0)
0000C07E 317C 0000 0012             		move.w	#0,$12(a0)
0000C084 317C 0000 0036             		move.w	#0,$36(a0)
0000C08A 6000                       		bra.s	loc_B97C
0000C08C                            ; ===========================================================================
0000C08C                            
0000C08C                            loc_B938:				; XREF: Obj31_Type01
0000C08C 3228 0034                  		move.w	$34(a0),d1
0000C090 B268 0032                  		cmp.w	$32(a0),d1
0000C094 6700                       		beq.s	loc_B97C
0000C096 3028 0012                  		move.w	$12(a0),d0
0000C09A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C0A0 D168 0032                  		add.w	d0,$32(a0)
0000C0A4 B268 0032                  		cmp.w	$32(a0),d1
0000C0A8 6200                       		bhi.s	loc_B97C
0000C0AA 3141 0032                  		move.w	d1,$32(a0)
0000C0AE 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C0B4 317C 0001 0036             		move.w	#1,$36(a0)
0000C0BA 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C0C0 4A28 0001                  		tst.b	1(a0)
0000C0C4 6A00                       		bpl.s	loc_B97C
0000C0C6 303C 00BD                  		move.w	#$BD,d0
0000C0CA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C0D0                            
0000C0D0                            loc_B97C:
0000C0D0 6000 FF62                  		bra.w	Obj31_Restart
0000C0D4                            ; ===========================================================================
0000C0D4                            
0000C0D4                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C0D4 3038 D008                  		move.w	($FFFFD008).w,d0
0000C0D8 9068 0008                  		sub.w	8(a0),d0
0000C0DC 6400                       		bcc.s	loc_B98C
0000C0DE 4440                       		neg.w	d0
0000C0E0                            
0000C0E0                            loc_B98C:
0000C0E0 0C40 0090                  		cmpi.w	#$90,d0
0000C0E4 6400                       		bcc.s	loc_B996
0000C0E6 5228 0028                  		addq.b	#1,$28(a0)
0000C0EA                            
0000C0EA                            loc_B996:
0000C0EA 6000 FF48                  		bra.w	Obj31_Restart
0000C0EE                            ; ===========================================================================
0000C0EE                            ; ---------------------------------------------------------------------------
0000C0EE                            ; Object 45 - spiked metal block from beta version (MZ)
0000C0EE                            ; ---------------------------------------------------------------------------
0000C0EE                            
0000C0EE                            Obj45:					; XREF: Obj_Index
0000C0EE 7000                       		moveq	#0,d0
0000C0F0 1028 0024                  		move.b	$24(a0),d0
0000C0F4 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C0F8 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C0FC                            ; ===========================================================================
0000C0FC 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C0FE 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C100 0000                       		dc.w loc_BA8E-Obj45_Index
0000C102 0000                       		dc.w Obj45_Display-Obj45_Index
0000C104 0000                       		dc.w loc_BA7A-Obj45_Index
0000C106                            
0000C106 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C109 04E4 01                    		dc.b	4, $E4,	  1
0000C10C 0834 03                    		dc.b	8, $34,	  3
0000C10F 0628 02                    		dc.b	6, $28,	  2
0000C112                            
0000C112 3800                       word_B9BE:	dc.w $3800
0000C114 A000                       		dc.w -$6000
0000C116 5000                       		dc.w $5000
0000C118                            ; ===========================================================================
0000C118                            
0000C118                            Obj45_Main:				; XREF: Obj45_Index
0000C118 7000                       		moveq	#0,d0
0000C11A 1028 0028                  		move.b	$28(a0),d0
0000C11E D040                       		add.w	d0,d0
0000C120 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C124 45F9 0000 C106             		lea	(Obj45_Var).l,a2
0000C12A 2248                       		movea.l	a0,a1
0000C12C 7203                       		moveq	#3,d1
0000C12E 6000                       		bra.s	Obj45_Load
0000C130                            ; ===========================================================================
0000C130                            
0000C130                            Obj45_Loop:
0000C130 6100 0000                  		bsr.w	SingleObjLoad2
0000C134 6600                       		bne.s	loc_BA52
0000C136                            
0000C136                            Obj45_Load:				; XREF: Obj45_Main
0000C136 135A 0024                  		move.b	(a2)+,$24(a1)
0000C13A 12BC 0045                  		move.b	#$45,0(a1)
0000C13E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C144 101A                       		move.b	(a2)+,d0
0000C146 4880                       		ext.w	d0
0000C148 D068 0008                  		add.w	8(a0),d0
0000C14C 3340 0008                  		move.w	d0,8(a1)
0000C150 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C158 337C 0300 0002             		move.w	#$300,2(a1)
0000C15E 137C 0004 0001             		move.b	#4,1(a1)
0000C164 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C16A 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C170 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C176 137C 0020 0019             		move.b	#$20,$19(a1)
0000C17C 3342 0034                  		move.w	d2,$34(a1)
0000C180 137C 0004 0018             		move.b	#4,$18(a1)
0000C186 0C12 0001                  		cmpi.b	#1,(a2)
0000C18A 6600                       		bne.s	loc_BA40
0000C18C 137C 0091 0020             		move.b	#$91,$20(a1)
0000C192                            
0000C192                            loc_BA40:
0000C192 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C196 2348 003C                  		move.l	a0,$3C(a1)
0000C19A 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C19E                            
0000C19E 137C 0003 0018             		move.b	#3,$18(a1)
0000C1A4                            
0000C1A4                            loc_BA52:
0000C1A4 117C 0010 0019             		move.b	#$10,$19(a0)
0000C1AA                            
0000C1AA                            Obj45_Solid:				; XREF: Obj45_Index
0000C1AA 3F28 0008                  		move.w	8(a0),-(sp)
0000C1AE 6100 0000                  		bsr.w	Obj45_Move
0000C1B2 323C 0017                  		move.w	#$17,d1
0000C1B6 343C 0020                  		move.w	#$20,d2
0000C1BA 363C 0020                  		move.w	#$20,d3
0000C1BE 381F                       		move.w	(sp)+,d4
0000C1C0 6100 0000                  		bsr.w	SolidObject
0000C1C4 6100 0000                  		bsr.w	DisplaySprite
0000C1C8 6000 0000                  		bra.w	Obj45_ChkDel
0000C1CC                            ; ===========================================================================
0000C1CC                            
0000C1CC                            loc_BA7A:				; XREF: Obj45_Index
0000C1CC 2268 003C                  		movea.l	$3C(a0),a1
0000C1D0 1029 0032                  		move.b	$32(a1),d0
0000C1D4 0600 0010                  		addi.b	#$10,d0
0000C1D8 EA08                       		lsr.b	#5,d0
0000C1DA 5600                       		addq.b	#3,d0
0000C1DC 1140 001A                  		move.b	d0,$1A(a0)
0000C1E0                            
0000C1E0                            loc_BA8E:				; XREF: Obj45_Index
0000C1E0 2268 003C                  		movea.l	$3C(a0),a1
0000C1E4 7000                       		moveq	#0,d0
0000C1E6 1029 0032                  		move.b	$32(a1),d0
0000C1EA 4440                       		neg.w	d0
0000C1EC D068 0030                  		add.w	$30(a0),d0
0000C1F0 3140 0008                  		move.w	d0,8(a0)
0000C1F4                            
0000C1F4                            Obj45_Display:				; XREF: Obj45_Index
0000C1F4 6100 0000                  		bsr.w	DisplaySprite
0000C1F8                            
0000C1F8                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C1F8 3028 003A                  		move.w	$3A(a0),d0
0000C1FC 0240 FF80                  		andi.w	#$FF80,d0
0000C200 3238 F700                  		move.w	($FFFFF700).w,d1
0000C204 0441 0080                  		subi.w	#$80,d1
0000C208 0241 FF80                  		andi.w	#$FF80,d1
0000C20C 9041                       		sub.w	d1,d0
0000C20E 0C40 0280                  		cmpi.w	#$280,d0
0000C212 6200 0000                  		bhi.w	DeleteObject
0000C216 4E75                       		rts	
0000C218                            
0000C218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C218                            
0000C218                            
0000C218                            Obj45_Move:				; XREF: Obj45_Solid
0000C218 7000                       		moveq	#0,d0
0000C21A 1028 0028                  		move.b	$28(a0),d0
0000C21E D040                       		add.w	d0,d0
0000C220 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C224 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C228                            ; End of function Obj45_Move
0000C228                            
0000C228                            ; ===========================================================================
0000C228 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C22A 0000                       		dc.w loc_BADA-off_BAD6
0000C22C                            ; ===========================================================================
0000C22C                            
0000C22C                            loc_BADA:				; XREF: off_BAD6
0000C22C 4A68 0036                  		tst.w	$36(a0)
0000C230 6700                       		beq.s	loc_BB08
0000C232 4A68 0038                  		tst.w	$38(a0)
0000C236 6700                       		beq.s	loc_BAEC
0000C238 5368 0038                  		subq.w	#1,$38(a0)
0000C23C 6000                       		bra.s	loc_BB3C
0000C23E                            ; ===========================================================================
0000C23E                            
0000C23E                            loc_BAEC:
0000C23E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C244 6400                       		bcc.s	loc_BB3C
0000C246 317C 0000 0032             		move.w	#0,$32(a0)
0000C24C 317C 0000 0010             		move.w	#0,$10(a0)
0000C252 317C 0000 0036             		move.w	#0,$36(a0)
0000C258 6000                       		bra.s	loc_BB3C
0000C25A                            ; ===========================================================================
0000C25A                            
0000C25A                            loc_BB08:				; XREF: loc_BADA
0000C25A 3228 0034                  		move.w	$34(a0),d1
0000C25E B268 0032                  		cmp.w	$32(a0),d1
0000C262 6700                       		beq.s	loc_BB3C
0000C264 3028 0010                  		move.w	$10(a0),d0
0000C268 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C26E D168 0032                  		add.w	d0,$32(a0)
0000C272 B268 0032                  		cmp.w	$32(a0),d1
0000C276 6200                       		bhi.s	loc_BB3C
0000C278 3141 0032                  		move.w	d1,$32(a0)
0000C27C 317C 0000 0010             		move.w	#0,$10(a0)
0000C282 317C 0001 0036             		move.w	#1,$36(a0)
0000C288 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C28E                            
0000C28E                            loc_BB3C:
0000C28E 7000                       		moveq	#0,d0
0000C290 1028 0032                  		move.b	$32(a0),d0
0000C294 4440                       		neg.w	d0
0000C296 D068 0030                  		add.w	$30(a0),d0
0000C29A 3140 0008                  		move.w	d0,8(a0)
0000C29E 4E75                       		rts	
0000C2A0                            ; ===========================================================================
0000C2A0                            ; ---------------------------------------------------------------------------
0000C2A0                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C2A0                            ; ---------------------------------------------------------------------------
0000C2A0                            Map_obj31:
0000C2A0                            	include "_maps\obj31.asm"
0000C2A0                            ; ---------------------------------------------------------------------------
0000C2A0                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C2A0                            ; ---------------------------------------------------------------------------
0000C2A0 0000                       		dc.w byte_BB64-Map_obj31
0000C2A2 0000                       		dc.w byte_BB7E-Map_obj31
0000C2A4 0000                       		dc.w byte_BB98-Map_obj31
0000C2A6 0000                       		dc.w byte_BB9E-Map_obj31
0000C2A8 0000                       		dc.w byte_BBA9-Map_obj31
0000C2AA 0000                       		dc.w byte_BBBE-Map_obj31
0000C2AC 0000                       		dc.w byte_BBDD-Map_obj31
0000C2AE 0000                       		dc.w byte_BC06-Map_obj31
0000C2B0 0000                       		dc.w byte_BC06-Map_obj31
0000C2B2 0000                       		dc.w byte_BC39-Map_obj31
0000C2B4 0000                       		dc.w byte_BC53-Map_obj31
0000C2B6 05                         byte_BB64:	dc.b 5
0000C2B7 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C2BC F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C2C1 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C2C6 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C2CB F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C2D0 05                         byte_BB7E:	dc.b 5
0000C2D1 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C2D6 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C2DB F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C2E0 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C2E5 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C2EA 01                         byte_BB98:	dc.b 1
0000C2EB DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C2F0 02                         byte_BB9E:	dc.b 2
0000C2F1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2F6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2FB 04                         byte_BBA9:	dc.b 4
0000C2FC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C301 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C306 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C30B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C310 06                         byte_BBBE:	dc.b 6
0000C311 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C316 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C31B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C320 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C325 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C32A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C32F 08                         byte_BBDD:	dc.b 8
0000C330 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C335 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C33A C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C33F D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C344 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C349 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C34E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C353 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C358 0A                         byte_BC06:	dc.b $A
0000C359 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C35E 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C363 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C368 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C36D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C372 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C377 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C37C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C381 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C386 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C38B 05                         byte_BC39:	dc.b 5
0000C38C F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C391 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C396 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C39B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C3A0 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C3A5 01                         byte_BC53:	dc.b 1
0000C3A6 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C3AC 00                         		even
0000C3AC 00                         		even
0000C3AC                            
0000C3AC                            ; ---------------------------------------------------------------------------
0000C3AC                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3AC                            ; ---------------------------------------------------------------------------
0000C3AC                            Map_obj45:
0000C3AC                            	include "_maps\obj45.asm"
0000C3AC                            ; ---------------------------------------------------------------------------
0000C3AC                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3AC                            ; ---------------------------------------------------------------------------
0000C3AC 0000                       		dc.w byte_BC6C-Map_obj45
0000C3AE 0000                       		dc.w byte_BC7C-Map_obj45
0000C3B0 0000                       		dc.w byte_BC8C-Map_obj45
0000C3B2 0000                       		dc.w byte_BC92-Map_obj45
0000C3B4 0000                       		dc.w byte_BC9D-Map_obj45
0000C3B6 0000                       		dc.w byte_BCB2-Map_obj45
0000C3B8 0000                       		dc.w byte_BCD1-Map_obj45
0000C3BA 0000                       		dc.w byte_BCFA-Map_obj45
0000C3BC 0000                       		dc.w byte_BCFA-Map_obj45
0000C3BE 03                         byte_BC6C:	dc.b 3
0000C3BF E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C3C4 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C3C9 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C3CE 03                         byte_BC7C:	dc.b 3
0000C3CF E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C3D4 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C3D9 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C3DE 01                         byte_BC8C:	dc.b 1
0000C3DF F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C3E4 02                         byte_BC92:	dc.b 2
0000C3E5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3EA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3EF 04                         byte_BC9D:	dc.b 4
0000C3F0 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3F5 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3FA F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3FF F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C404 06                         byte_BCB2:	dc.b 6
0000C405 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C40A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C40F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C414 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C419 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C41E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C423 08                         byte_BCD1:	dc.b 8
0000C424 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C429 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C42E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C433 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C438 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C43D F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C442 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C447 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C44C 08                         byte_BCFA:	dc.b 8
0000C44D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C452 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C457 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C45C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C461 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C466 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C46B F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C470 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C475 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C47A F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C480 00                         		even
0000C480 00                         		even
0000C480                            
0000C480                            ; ===========================================================================
0000C480                            ; ---------------------------------------------------------------------------
0000C480                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C480                            ; ---------------------------------------------------------------------------
0000C480                            
0000C480                            Obj32:					; XREF: Obj_Index
0000C480 7000                       		moveq	#0,d0
0000C482 1028 0024                  		move.b	$24(a0),d0
0000C486 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C48A 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C48E                            ; ===========================================================================
0000C48E 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C490 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C492                            ; ===========================================================================
0000C492                            
0000C492                            Obj32_Main:				; XREF: Obj32_Index
0000C492 5428 0024                  		addq.b	#2,$24(a0)
0000C496 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C49E 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C4A4 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C4AA 6700                       		beq.s	loc_BD60
0000C4AC 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C4B2                            
0000C4B2                            loc_BD60:
0000C4B2 117C 0004 0001             		move.b	#4,1(a0)
0000C4B8 117C 0010 0019             		move.b	#$10,$19(a0)
0000C4BE 117C 0004 0018             		move.b	#4,$18(a0)
0000C4C4 5668 000C                  		addq.w	#3,$C(a0)
0000C4C8                            
0000C4C8                            Obj32_Pressed:				; XREF: Obj32_Index
0000C4C8 4A28 0001                  		tst.b	1(a0)
0000C4CC 6A00                       		bpl.s	Obj32_Display
0000C4CE 323C 001B                  		move.w	#$1B,d1
0000C4D2 343C 0005                  		move.w	#5,d2
0000C4D6 363C 0005                  		move.w	#5,d3
0000C4DA 3828 0008                  		move.w	8(a0),d4
0000C4DE 6100 0000                  		bsr.w	SolidObject
0000C4E2 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C4E8 1028 0028                  		move.b	$28(a0),d0
0000C4EC 0240 000F                  		andi.w	#$F,d0
0000C4F0 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C4F4 47F3 0000                  		lea	(a3,d0.w),a3
0000C4F8 7600                       		moveq	#0,d3
0000C4FA 0828 0006 0028             		btst	#6,$28(a0)
0000C500 6700                       		beq.s	loc_BDB2
0000C502 7607                       		moveq	#7,d3
0000C504                            
0000C504                            loc_BDB2:
0000C504 4A28 0028                  		tst.b	$28(a0)
0000C508 6A00                       		bpl.s	loc_BDBE
0000C50A 6100 0000                  		bsr.w	Obj32_MZBlock
0000C50E 6600                       		bne.s	loc_BDC8
0000C510                            
0000C510                            loc_BDBE:
0000C510 4A28 0025                  		tst.b	$25(a0)
0000C514 6600                       		bne.s	loc_BDC8
0000C516 0793                       		bclr	d3,(a3)
0000C518 6000                       		bra.s	loc_BDDE
0000C51A                            ; ===========================================================================
0000C51A                            
0000C51A                            loc_BDC8:
0000C51A 4A13                       		tst.b	(a3)
0000C51C 6600                       		bne.s	loc_BDD6
0000C51E 303C 00CD                  		move.w	#$CD,d0
0000C522 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play switch sound
0000C528                            
0000C528                            loc_BDD6:
0000C528 07D3                       		bset	d3,(a3)
0000C52A 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C530                            
0000C530                            loc_BDDE:
0000C530 0828 0005 0028             		btst	#5,$28(a0)
0000C536 6700                       		beq.s	Obj32_Display
0000C538 5328 001E                  		subq.b	#1,$1E(a0)
0000C53C 6A00                       		bpl.s	Obj32_Display
0000C53E 117C 0007 001E             		move.b	#7,$1E(a0)
0000C544 0868 0001 001A             		bchg	#1,$1A(a0)
0000C54A                            
0000C54A                            Obj32_Display:
0000C54A 6100 0000                  		bsr.w	DisplaySprite
0000C54E 3028 0008                  		move.w	8(a0),d0
0000C552 0240 FF80                  		andi.w	#$FF80,d0
0000C556 3238 F700                  		move.w	($FFFFF700).w,d1
0000C55A 0441 0080                  		subi.w	#$80,d1
0000C55E 0241 FF80                  		andi.w	#$FF80,d1
0000C562 9041                       		sub.w	d1,d0
0000C564 0C40 0280                  		cmpi.w	#$280,d0
0000C568 6200 0000                  		bhi.w	Obj32_Delete
0000C56C 4E75                       		rts	
0000C56E                            ; ===========================================================================
0000C56E                            
0000C56E                            Obj32_Delete:
0000C56E 6100 0000                  		bsr.w	DeleteObject
0000C572 4E75                       		rts	
0000C574                            
0000C574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C574                            
0000C574                            
0000C574                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C574 3F03                       		move.w	d3,-(sp)
0000C576 3428 0008                  		move.w	8(a0),d2
0000C57A 3628 000C                  		move.w	$C(a0),d3
0000C57E 0442 0010                  		subi.w	#$10,d2
0000C582 5143                       		subq.w	#8,d3
0000C584 383C 0020                  		move.w	#$20,d4
0000C588 3A3C 0010                  		move.w	#$10,d5
0000C58C 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C590 3C3C 005F                  		move.w	#$5F,d6
0000C594                            
0000C594                            Obj32_MZLoop:
0000C594 4A29 0001                  		tst.b	1(a1)
0000C598 6A00                       		bpl.s	loc_BE4E
0000C59A 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C59E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C5A0                            
0000C5A0                            loc_BE4E:
0000C5A0 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C5A4 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C5A8                            
0000C5A8 361F                       		move.w	(sp)+,d3
0000C5AA 7000                       		moveq	#0,d0
0000C5AC                            
0000C5AC                            locret_BE5A:
0000C5AC 4E75                       		rts	
0000C5AE                            ; ===========================================================================
0000C5AE 1010                       Obj32_MZData:	dc.b $10, $10
0000C5B0                            ; ===========================================================================
0000C5B0                            
0000C5B0                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C5B0 7001                       		moveq	#1,d0
0000C5B2 0240 003F                  		andi.w	#$3F,d0
0000C5B6 D040                       		add.w	d0,d0
0000C5B8 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C5BC 121A                       		move.b	(a2)+,d1
0000C5BE 4881                       		ext.w	d1
0000C5C0 3029 0008                  		move.w	8(a1),d0
0000C5C4 9041                       		sub.w	d1,d0
0000C5C6 9042                       		sub.w	d2,d0
0000C5C8 6400                       		bcc.s	loc_BE80
0000C5CA D241                       		add.w	d1,d1
0000C5CC D041                       		add.w	d1,d0
0000C5CE 6500                       		bcs.s	loc_BE84
0000C5D0 60CE                       		bra.s	loc_BE4E
0000C5D2                            ; ===========================================================================
0000C5D2                            
0000C5D2                            loc_BE80:
0000C5D2 B044                       		cmp.w	d4,d0
0000C5D4 62CA                       		bhi.s	loc_BE4E
0000C5D6                            
0000C5D6                            loc_BE84:
0000C5D6 121A                       		move.b	(a2)+,d1
0000C5D8 4881                       		ext.w	d1
0000C5DA 3029 000C                  		move.w	$C(a1),d0
0000C5DE 9041                       		sub.w	d1,d0
0000C5E0 9043                       		sub.w	d3,d0
0000C5E2 6400                       		bcc.s	loc_BE9A
0000C5E4 D241                       		add.w	d1,d1
0000C5E6 D041                       		add.w	d1,d0
0000C5E8 6500                       		bcs.s	loc_BE9E
0000C5EA 60B4                       		bra.s	loc_BE4E
0000C5EC                            ; ===========================================================================
0000C5EC                            
0000C5EC                            loc_BE9A:
0000C5EC B045                       		cmp.w	d5,d0
0000C5EE 62B0                       		bhi.s	loc_BE4E
0000C5F0                            
0000C5F0                            loc_BE9E:
0000C5F0 361F                       		move.w	(sp)+,d3
0000C5F2 7001                       		moveq	#1,d0
0000C5F4 4E75                       		rts	
0000C5F6                            ; End of function Obj32_MZBlock
0000C5F6                            
0000C5F6                            ; ===========================================================================
0000C5F6                            ; ---------------------------------------------------------------------------
0000C5F6                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C5F6                            ; ---------------------------------------------------------------------------
0000C5F6                            Map_obj32:
0000C5F6                            	include "_maps\obj32.asm"
0000C5F6                            ; ---------------------------------------------------------------------------
0000C5F6                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C5F6                            ; ---------------------------------------------------------------------------
0000C5F6 0000                       		dc.w byte_BEAC-Map_obj32
0000C5F8 0000                       		dc.w byte_BEB7-Map_obj32
0000C5FA 0000                       		dc.w byte_BEC2-Map_obj32
0000C5FC 0000                       		dc.w byte_BEB7-Map_obj32
0000C5FE 02                         byte_BEAC:	dc.b 2
0000C5FF F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C604 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C609 02                         byte_BEB7:	dc.b 2
0000C60A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C60F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C614 02                         byte_BEC2:	dc.b 2
0000C615 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C61A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C61F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C624                            		even
0000C624                            		even
0000C624                            
0000C624                            ; ===========================================================================
0000C624                            ; ---------------------------------------------------------------------------
0000C624                            ; Object 33 - pushable blocks (MZ, LZ)
0000C624                            ; ---------------------------------------------------------------------------
0000C624                            
0000C624                            Obj33:					; XREF: Obj_Index
0000C624 7000                       		moveq	#0,d0
0000C626 1028 0024                  		move.b	$24(a0),d0
0000C62A 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C62E 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C632                            ; ===========================================================================
0000C632 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C634 0000                       		dc.w loc_BF6E-Obj33_Index
0000C636 0000                       		dc.w loc_C02C-Obj33_Index
0000C638                            
0000C638 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C63A 4001                       		dc.b $40, 1
0000C63C                            ; ===========================================================================
0000C63C                            
0000C63C                            Obj33_Main:				; XREF: Obj33_Index
0000C63C 5428 0024                  		addq.b	#2,$24(a0)
0000C640 117C 000F 0016             		move.b	#$F,$16(a0)
0000C646 117C 000F 0017             		move.b	#$F,$17(a0)
0000C64C 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C654 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C65A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C660 6600                       		bne.s	loc_BF16
0000C662 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C668                            
0000C668                            loc_BF16:
0000C668 117C 0004 0001             		move.b	#4,1(a0)
0000C66E 117C 0003 0018             		move.b	#3,$18(a0)
0000C674 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C67A 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C680 7000                       		moveq	#0,d0
0000C682 1028 0028                  		move.b	$28(a0),d0
0000C686 D040                       		add.w	d0,d0
0000C688 0240 000E                  		andi.w	#$E,d0
0000C68C 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C690 115A 0019                  		move.b	(a2)+,$19(a0)
0000C694 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C698 4A28 0028                  		tst.b	$28(a0)
0000C69C 6700                       		beq.s	Obj33_ChkGone
0000C69E 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C6A4                            
0000C6A4                            Obj33_ChkGone:
0000C6A4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C6A8 7000                       		moveq	#0,d0
0000C6AA 1028 0023                  		move.b	$23(a0),d0
0000C6AE 6700                       		beq.s	loc_BF6E
0000C6B0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C6B6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C6BC 6600 0000                  		bne.w	DeleteObject
0000C6C0                            
0000C6C0                            loc_BF6E:				; XREF: Obj33_Index
0000C6C0 4A28 0032                  		tst.b	$32(a0)
0000C6C4 6600 0000                  		bne.w	loc_C046
0000C6C8 7200                       		moveq	#0,d1
0000C6CA 1228 0019                  		move.b	$19(a0),d1
0000C6CE 0641 000B                  		addi.w	#$B,d1
0000C6D2 343C 0010                  		move.w	#$10,d2
0000C6D6 363C 0011                  		move.w	#$11,d3
0000C6DA 3828 0008                  		move.w	8(a0),d4
0000C6DE 6100 0000                  		bsr.w	loc_C186
0000C6E2 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C6E8 6600                       		bne.s	loc_BFC6	; if not, branch
0000C6EA 08A8 0007 0028             		bclr	#7,$28(a0)
0000C6F0 3028 0008                  		move.w	8(a0),d0
0000C6F4 0C40 0A20                  		cmpi.w	#$A20,d0
0000C6F8 6500                       		bcs.s	loc_BFC6
0000C6FA 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C6FE 6400                       		bcc.s	loc_BFC6
0000C700 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C704 0440 001C                  		subi.w	#$1C,d0
0000C708 3140 000C                  		move.w	d0,$C(a0)
0000C70C 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C712 08E8 0007 0028             		bset	#7,$28(a0)
0000C718                            
0000C718                            loc_BFC6:
0000C718 3028 0008                  		move.w	8(a0),d0
0000C71C 0240 FF80                  		andi.w	#$FF80,d0
0000C720 3238 F700                  		move.w	($FFFFF700).w,d1
0000C724 0441 0080                  		subi.w	#$80,d1
0000C728 0241 FF80                  		andi.w	#$FF80,d1
0000C72C 9041                       		sub.w	d1,d0
0000C72E 0C40 0280                  		cmpi.w	#$280,d0
0000C732 6200                       		bhi.s	loc_BFE6
0000C734 6000 0000                  		bra.w	DisplaySprite
0000C738                            ; ===========================================================================
0000C738                            
0000C738                            loc_BFE6:
0000C738 3028 0034                  		move.w	$34(a0),d0
0000C73C 0240 FF80                  		andi.w	#$FF80,d0
0000C740 3238 F700                  		move.w	($FFFFF700).w,d1
0000C744 0441 0080                  		subi.w	#$80,d1
0000C748 0241 FF80                  		andi.w	#$FF80,d1
0000C74C 9041                       		sub.w	d1,d0
0000C74E 0C40 0280                  		cmpi.w	#$280,d0
0000C752 6200                       		bhi.s	loc_C016
0000C754 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C75A 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C760 117C 0004 0024             		move.b	#4,$24(a0)
0000C766 6000                       		bra.s	loc_C02C
0000C768                            ; ===========================================================================
0000C768                            
0000C768                            loc_C016:
0000C768 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C76C 7000                       		moveq	#0,d0
0000C76E 1028 0023                  		move.b	$23(a0),d0
0000C772 6700                       		beq.s	loc_C028
0000C774 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C77A                            
0000C77A                            loc_C028:
0000C77A 6000 0000                  		bra.w	DeleteObject
0000C77E                            ; ===========================================================================
0000C77E                            
0000C77E                            loc_C02C:				; XREF: Obj33_Index
0000C77E 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C782 6700                       		beq.s	locret_C044
0000C784 117C 0002 0024             		move.b	#2,$24(a0)
0000C78A 4228 0032                  		clr.b	$32(a0)
0000C78E 4268 0010                  		clr.w	$10(a0)
0000C792 4268 0012                  		clr.w	$12(a0)
0000C796                            
0000C796                            locret_C044:
0000C796 4E75                       		rts	
0000C798                            ; ===========================================================================
0000C798                            
0000C798                            loc_C046:				; XREF: loc_BF6E
0000C798 3F28 0008                  		move.w	8(a0),-(sp)
0000C79C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C7A2 6400                       		bcc.s	loc_C056
0000C7A4 6100 0000                  		bsr.w	SpeedToPos
0000C7A8                            
0000C7A8                            loc_C056:
0000C7A8 0828 0001 0022             		btst	#1,$22(a0)
0000C7AE 6700                       		beq.s	loc_C0A0
0000C7B0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7B6 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7BC 4A41                       		tst.w	d1
0000C7BE 6A00 0000                  		bpl.w	loc_C09E
0000C7C2 D368 000C                  		add.w	d1,$C(a0)
0000C7C6 4268 0012                  		clr.w	$12(a0)
0000C7CA 08A8 0001 0022             		bclr	#1,$22(a0)
0000C7D0 3011                       		move.w	(a1),d0
0000C7D2 0240 03FF                  		andi.w	#$3FF,d0
0000C7D6 0C40 016A                  		cmpi.w	#$16A,d0
0000C7DA 6500                       		bcs.s	loc_C09E
0000C7DC 3028 0030                  		move.w	$30(a0),d0
0000C7E0 E640                       		asr.w	#3,d0
0000C7E2 3140 0010                  		move.w	d0,$10(a0)
0000C7E6 117C 0001 0032             		move.b	#1,$32(a0)
0000C7EC 4268 000E                  		clr.w	$E(a0)
0000C7F0                            
0000C7F0                            loc_C09E:
0000C7F0 6000                       		bra.s	loc_C0E6
0000C7F2                            ; ===========================================================================
0000C7F2                            
0000C7F2                            loc_C0A0:
0000C7F2 4A68 0010                  		tst.w	$10(a0)
0000C7F6 6700 0000                  		beq.w	loc_C0D6
0000C7FA 6B00                       		bmi.s	loc_C0BC
0000C7FC 7600                       		moveq	#0,d3
0000C7FE 1628 0019                  		move.b	$19(a0),d3
0000C802 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C808 4A41                       		tst.w	d1		; has block touched a wall?
0000C80A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C80C 6000                       		bra.s	loc_C0E6
0000C80E                            ; ===========================================================================
0000C80E                            
0000C80E                            loc_C0BC:
0000C80E 7600                       		moveq	#0,d3
0000C810 1628 0019                  		move.b	$19(a0),d3
0000C814 4643                       		not.w	d3
0000C816 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C81C 4A41                       		tst.w	d1		; has block touched a wall?
0000C81E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C820 6000                       		bra.s	loc_C0E6
0000C822                            ; ===========================================================================
0000C822                            
0000C822                            Obj33_StopPush:
0000C822 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C826 6000                       		bra.s	loc_C0E6
0000C828                            ; ===========================================================================
0000C828                            
0000C828                            loc_C0D6:
0000C828 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C830 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C836 6400                       		bcc.s	loc_C104
0000C838                            
0000C838                            loc_C0E6:
0000C838 7200                       		moveq	#0,d1
0000C83A 1228 0019                  		move.b	$19(a0),d1
0000C83E 0641 000B                  		addi.w	#$B,d1
0000C842 343C 0010                  		move.w	#$10,d2
0000C846 363C 0011                  		move.w	#$11,d3
0000C84A 381F                       		move.w	(sp)+,d4
0000C84C 6100 0000                  		bsr.w	loc_C186
0000C850 6100                       		bsr.s	Obj33_ChkLava
0000C852 6000 FEC4                  		bra.w	loc_BFC6
0000C856                            ; ===========================================================================
0000C856                            
0000C856                            loc_C104:
0000C856 381F                       		move.w	(sp)+,d4
0000C858 43F8 D000                  		lea	($FFFFD000).w,a1
0000C85C 08A9 0003 0022             		bclr	#3,$22(a1)
0000C862 08A8 0003 0022             		bclr	#3,$22(a0)
0000C868 6000 FECE                  		bra.w	loc_BFE6
0000C86C                            ; ===========================================================================
0000C86C                            
0000C86C                            Obj33_ChkLava:
0000C86C 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C872 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C874 343C FFE0                  		move.w	#-$20,d2
0000C878 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C87E 6700                       		beq.s	Obj33_LoadLava
0000C880 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C886 6700                       		beq.s	Obj33_LoadLava
0000C888 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C88E 6700                       		beq.s	Obj33_LoadLava
0000C890 4E75                       		rts	
0000C892                            ; ===========================================================================
0000C892                            
0000C892                            Obj33_ChkLava2:
0000C892 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C898 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C89A 343C 0020                  		move.w	#$20,d2
0000C89E 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C8A4 6700                       		beq.s	Obj33_LoadLava
0000C8A6 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C8AC 6700                       		beq.s	Obj33_LoadLava
0000C8AE                            
0000C8AE                            Obj33_NoLava:
0000C8AE 4E75                       		rts	
0000C8B0                            ; ===========================================================================
0000C8B0                            
0000C8B0                            Obj33_LoadLava:
0000C8B0 6100 0000                  		bsr.w	SingleObjLoad
0000C8B4 6600                       		bne.s	locret_C184
0000C8B6 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C8BA 3368 0008 0008             		move.w	8(a0),8(a1)
0000C8C0 D569 0008                  		add.w	d2,8(a1)
0000C8C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C8CA 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C8D0 2348 003C                  		move.l	a0,$3C(a1)
0000C8D4                            
0000C8D4                            locret_C184:
0000C8D4 4E75                       		rts	
0000C8D6                            ; ===========================================================================
0000C8D6                            
0000C8D6                            loc_C186:				; XREF: loc_BF6E
0000C8D6 1028 0025                  		move.b	$25(a0),d0
0000C8DA 6700 0000                  		beq.w	loc_C218
0000C8DE 5500                       		subq.b	#2,d0
0000C8E0 6600                       		bne.s	loc_C1AA
0000C8E2 6100 B312                  		bsr.w	ExitPlatform
0000C8E6 0829 0003 0022             		btst	#3,$22(a1)
0000C8EC 6600                       		bne.s	loc_C1A4
0000C8EE 4228 0025                  		clr.b	$25(a0)
0000C8F2 4E75                       		rts	
0000C8F4                            ; ===========================================================================
0000C8F4                            
0000C8F4                            loc_C1A4:
0000C8F4 3404                       		move.w	d4,d2
0000C8F6 6000 B85C                  		bra.w	MvSonicOnPtfm
0000C8FA                            ; ===========================================================================
0000C8FA                            
0000C8FA                            loc_C1AA:
0000C8FA 5500                       		subq.b	#2,d0
0000C8FC 6600                       		bne.s	loc_C1F2
0000C8FE 6100 0000                  		bsr.w	SpeedToPos
0000C902 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C908 4EB9 0000 0000             		jsr	ObjHitFloor
0000C90E 4A41                       		tst.w	d1
0000C910 6A00 0000                  		bpl.w	locret_C1F0
0000C914 D368 000C                  		add.w	d1,$C(a0)
0000C918 4268 0012                  		clr.w	$12(a0)
0000C91C 4228 0025                  		clr.b	$25(a0)
0000C920 3011                       		move.w	(a1),d0
0000C922 0240 03FF                  		andi.w	#$3FF,d0
0000C926 0C40 016A                  		cmpi.w	#$16A,d0
0000C92A 6500                       		bcs.s	locret_C1F0
0000C92C 3028 0030                  		move.w	$30(a0),d0
0000C930 E640                       		asr.w	#3,d0
0000C932 3140 0010                  		move.w	d0,$10(a0)
0000C936 117C 0001 0032             		move.b	#1,$32(a0)
0000C93C 4268 000E                  		clr.w	$E(a0)
0000C940                            
0000C940                            locret_C1F0:
0000C940 4E75                       		rts	
0000C942                            ; ===========================================================================
0000C942                            
0000C942                            loc_C1F2:
0000C942 6100 0000                  		bsr.w	SpeedToPos
0000C946 3028 0008                  		move.w	8(a0),d0
0000C94A 0240 000C                  		andi.w	#$C,d0
0000C94E 6600 0000                  		bne.w	locret_C2E4
0000C952 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C958 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C95E 4268 0010                  		clr.w	$10(a0)
0000C962 5528 0025                  		subq.b	#2,$25(a0)
0000C966 4E75                       		rts	
0000C968                            ; ===========================================================================
0000C968                            
0000C968                            loc_C218:
0000C968 6100 0000                  		bsr.w	loc_FAC8
0000C96C 4A44                       		tst.w	d4
0000C96E 6700 0000                  		beq.w	locret_C2E4
0000C972 6B00 0000                  		bmi.w	locret_C2E4
0000C976 4A28 0032                  		tst.b	$32(a0)
0000C97A 6700                       		beq.s	loc_C230
0000C97C 6000 0000                  		bra.w	locret_C2E4
0000C980                            ; ===========================================================================
0000C980                            
0000C980                            loc_C230:
0000C980 4A40                       		tst.w	d0
0000C982 6700 0000                  		beq.w	locret_C2E4
0000C986 6B00                       		bmi.s	loc_C268
0000C988 0829 0000 0022             		btst	#0,$22(a1)
0000C98E 6600 0000                  		bne.w	locret_C2E4
0000C992 3F00                       		move.w	d0,-(sp)
0000C994 7600                       		moveq	#0,d3
0000C996 1628 0019                  		move.b	$19(a0),d3
0000C99A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C9A0 301F                       		move.w	(sp)+,d0
0000C9A2 4A41                       		tst.w	d1
0000C9A4 6B00 0000                  		bmi.w	locret_C2E4
0000C9A8 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C9B0 7001                       		moveq	#1,d0
0000C9B2 323C 0040                  		move.w	#$40,d1
0000C9B6 6000                       		bra.s	loc_C294
0000C9B8                            ; ===========================================================================
0000C9B8                            
0000C9B8                            loc_C268:
0000C9B8 0829 0000 0022             		btst	#0,$22(a1)
0000C9BE 6700                       		beq.s	locret_C2E4
0000C9C0 3F00                       		move.w	d0,-(sp)
0000C9C2 7600                       		moveq	#0,d3
0000C9C4 1628 0019                  		move.b	$19(a0),d3
0000C9C8 4643                       		not.w	d3
0000C9CA 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9D0 301F                       		move.w	(sp)+,d0
0000C9D2 4A41                       		tst.w	d1
0000C9D4 6B00                       		bmi.s	locret_C2E4
0000C9D6 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C9DE 70FF                       		moveq	#-1,d0
0000C9E0 323C FFC0                  		move.w	#-$40,d1
0000C9E4                            
0000C9E4                            loc_C294:
0000C9E4 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9E8 D169 0008                  		add.w	d0,8(a1)
0000C9EC 3341 0014                  		move.w	d1,$14(a1)
0000C9F0 337C 0000 0010             		move.w	#0,$10(a1)
0000C9F6 3F00                       		move.w	d0,-(sp)
0000C9F8 303C 00A7                  		move.w	#$A7,d0
0000C9FC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CA02 301F                       		move.w	(sp)+,d0
0000CA04 4A28 0028                  		tst.b	$28(a0)
0000CA08 6B00                       		bmi.s	locret_C2E4
0000CA0A 3F00                       		move.w	d0,-(sp)
0000CA0C 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA12 301F                       		move.w	(sp)+,d0
0000CA14 0C41 0004                  		cmpi.w	#4,d1
0000CA18 6F00                       		ble.s	loc_C2E0
0000CA1A 317C 0400 0010             		move.w	#$400,$10(a0)
0000CA20 4A40                       		tst.w	d0
0000CA22 6A00                       		bpl.s	loc_C2D8
0000CA24 4468 0010                  		neg.w	$10(a0)
0000CA28                            
0000CA28                            loc_C2D8:
0000CA28 117C 0006 0025             		move.b	#6,$25(a0)
0000CA2E 6000                       		bra.s	locret_C2E4
0000CA30                            ; ===========================================================================
0000CA30                            
0000CA30                            loc_C2E0:
0000CA30 D368 000C                  		add.w	d1,$C(a0)
0000CA34                            
0000CA34                            locret_C2E4:
0000CA34 4E75                       		rts	
0000CA36                            ; ===========================================================================
0000CA36                            ; ---------------------------------------------------------------------------
0000CA36                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA36                            ; ---------------------------------------------------------------------------
0000CA36                            Map_obj33:
0000CA36                            	include "_maps\obj33.asm"
0000CA36                            ; ---------------------------------------------------------------------------
0000CA36                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA36                            ; ---------------------------------------------------------------------------
0000CA36 0000                       		dc.w byte_C2EA-Map_obj33
0000CA38 0000                       		dc.w byte_C2F0-Map_obj33
0000CA3A 01                         byte_C2EA:	dc.b 1
0000CA3B F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CA40 04                         byte_C2F0:	dc.b 4
0000CA41 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CA46 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CA4B F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CA50 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CA56 00                         		even
0000CA56 00                         		even
0000CA56                            
0000CA56                            ; ===========================================================================
0000CA56                            ; ---------------------------------------------------------------------------
0000CA56                            ; Object 34 - zone title cards
0000CA56                            ; ---------------------------------------------------------------------------
0000CA56                            
0000CA56                            Obj34:					; XREF: Obj_Index
0000CA56 7000                       		moveq	#0,d0
0000CA58 1028 0024                  		move.b	$24(a0),d0
0000CA5C 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CA60 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CA64                            ; ===========================================================================
0000CA64 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CA66 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CA68 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA6A 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA6C                            ; ===========================================================================
0000CA6C                            
0000CA6C                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CA6C 2248                       		movea.l	a0,a1
0000CA6E 7000                       		moveq	#0,d0
0000CA70 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CA74 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CA7A 6600                       		bne.s	Obj34_CheckFZ
0000CA7C 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CA7E                            
0000CA7E                            Obj34_CheckFZ:
0000CA7E 3400                       		move.w	d0,d2
0000CA80 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CA86 6600                       		bne.s	Obj34_LoadConfig
0000CA88 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CA8A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CA8C                            
0000CA8C                            Obj34_LoadConfig:
0000CA8C 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CA92 E948                       		lsl.w	#4,d0
0000CA94 D6C0                       		adda.w	d0,a3
0000CA96 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CA9C 7203                       		moveq	#3,d1
0000CA9E                            
0000CA9E                            Obj34_Loop:
0000CA9E 12BC 0034                  		move.b	#$34,0(a1)
0000CAA2 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CAA6 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CAAA 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CAAE 335A 000A                  		move.w	(a2)+,$A(a1)
0000CAB2 135A 0024                  		move.b	(a2)+,$24(a1)
0000CAB6 101A                       		move.b	(a2)+,d0
0000CAB8 6600                       		bne.s	Obj34_ActNumber
0000CABA 1002                       		move.b	d2,d0
0000CABC                            
0000CABC                            Obj34_ActNumber:
0000CABC 0C00 0007                  		cmpi.b	#7,d0
0000CAC0 6600                       		bne.s	Obj34_MakeSprite
0000CAC2 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CAC6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CACC 6600                       		bne.s	Obj34_MakeSprite
0000CACE 5300                       		subq.b	#1,d0
0000CAD0                            
0000CAD0                            Obj34_MakeSprite:
0000CAD0 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CAD4 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CADC 337C 8580 0002             		move.w	#$8580,2(a1)
0000CAE2 137C 0078 0019             		move.b	#$78,$19(a1)
0000CAE8 137C 0000 0001             		move.b	#0,1(a1)
0000CAEE 137C 0000 0018             		move.b	#0,$18(a1)
0000CAF4 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CAFA 43E9 0040                  		lea	$40(a1),a1	; next object
0000CAFE 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CB02                            
0000CB02                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CB02 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB04 3028 0030                  		move.w	$30(a0),d0
0000CB08 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CB0C 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CB0E 6C00                       		bge.s	Obj34_Move
0000CB10 4441                       		neg.w	d1
0000CB12                            
0000CB12                            Obj34_Move:
0000CB12 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB16                            
0000CB16                            loc_C3C8:
0000CB16 3028 0008                  		move.w	8(a0),d0
0000CB1A 6B00                       		bmi.s	locret_C3D8
0000CB1C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB20 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CB22 6000 0000                  		bra.w	DisplaySprite
0000CB26                            ; ===========================================================================
0000CB26                            
0000CB26                            locret_C3D8:
0000CB26 4E75                       		rts	
0000CB28                            ; ===========================================================================
0000CB28                            
0000CB28                            Obj34_Wait:				; XREF: Obj34_Index
0000CB28 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CB2C 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CB2E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CB32 6000 0000                  		bra.w	DisplaySprite
0000CB36                            ; ===========================================================================
0000CB36                            
0000CB36                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CB36 4A28 0001                  		tst.b	1(a0)
0000CB3A 6A00                       		bpl.s	Obj34_ChangeArt
0000CB3C 7220                       		moveq	#$20,d1
0000CB3E 3028 0032                  		move.w	$32(a0),d0
0000CB42 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CB46 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CB48 6C00                       		bge.s	Obj34_Move2
0000CB4A 4441                       		neg.w	d1
0000CB4C                            
0000CB4C                            Obj34_Move2:
0000CB4C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB50 3028 0008                  		move.w	8(a0),d0
0000CB54 6B00                       		bmi.s	locret_C412
0000CB56 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB5A 6400                       		bcc.s	locret_C412	; if yes, branch
0000CB5C 6000 0000                  		bra.w	DisplaySprite
0000CB60                            ; ===========================================================================
0000CB60                            
0000CB60                            locret_C412:
0000CB60 4E75                       		rts	
0000CB62                            ; ===========================================================================
0000CB62                            
0000CB62                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CB62 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CB68 6600                       		bne.s	Obj34_Delete
0000CB6A 7002                       		moveq	#2,d0
0000CB6C 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000CB72 7000                       		moveq	#0,d0
0000CB74 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB78 0640 0015                  		addi.w	#$15,d0
0000CB7C 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns
0000CB82                            
0000CB82                            Obj34_Delete:
0000CB82 6000 0000                  		bra.w	DeleteObject
0000CB86                            ; ===========================================================================
0000CB86 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CB88 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CB8A 00E4                       		dc.w $E4
0000CB8C 0206                       		dc.b 2,	6
0000CB8E 00EA                       		dc.w $EA
0000CB90 0207                       		dc.b 2,	7
0000CB92 00E0                       		dc.w $E0
0000CB94 020A                       		dc.b 2,	$A
0000CB96                            ; ---------------------------------------------------------------------------
0000CB96                            ; Title	card configuration data
0000CB96                            ; Format:
0000CB96                            ; 4 bytes per item (YYYY XXXX)
0000CB96                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CB96                            ; ---------------------------------------------------------------------------
0000CB96 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CBA6 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CBB6 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CBC6 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CBD6 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CBE6 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CBF6 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CC06                            ; ===========================================================================
0000CC06                            ; ---------------------------------------------------------------------------
0000CC06                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CC06                            ; ---------------------------------------------------------------------------
0000CC06                            
0000CC06                            Obj39:					; XREF: Obj_Index
0000CC06 7000                       		moveq	#0,d0
0000CC08 1028 0024                  		move.b	$24(a0),d0
0000CC0C 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CC10 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CC14                            ; ===========================================================================
0000CC14 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CC16 0000                       		dc.w loc_C50C-Obj39_Index
0000CC18 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CC1A                            ; ===========================================================================
0000CC1A                            
0000CC1A                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CC1A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC1E 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CC20 4E75                       		rts	
0000CC22                            ; ===========================================================================
0000CC22                            
0000CC22                            Obj39_Main:
0000CC22 5428 0024                  		addq.b	#2,$24(a0)
0000CC26 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CC2C 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CC32 6700                       		beq.s	loc_C4EC	; if not, branch
0000CC34 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CC3A                            
0000CC3A                            loc_C4EC:
0000CC3A 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CC40 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CC48 317C 855E 0002             		move.w	#$855E,2(a0)
0000CC4E 117C 0000 0001             		move.b	#0,1(a0)
0000CC54 117C 0000 0018             		move.b	#0,$18(a0)
0000CC5A                            
0000CC5A                            loc_C50C:				; XREF: Obj39_Index
0000CC5A 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC5C 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CC62 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CC64 6500                       		bcs.s	Obj39_Move
0000CC66 4441                       		neg.w	d1
0000CC68                            
0000CC68                            Obj39_Move:
0000CC68 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC6C 6000 0000                  		bra.w	DisplaySprite
0000CC70                            ; ===========================================================================
0000CC70                            
0000CC70                            Obj39_SetWait:				; XREF: Obj39_Main
0000CC70 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CC76 5428 0024                  		addq.b	#2,$24(a0)
0000CC7A 4E75                       		rts	
0000CC7C                            ; ===========================================================================
0000CC7C                            
0000CC7C                            Obj39_Wait:				; XREF: Obj39_Index
0000CC7C 1038 F605                  		move.b	($FFFFF605).w,d0
0000CC80 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CC84 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CC86 0828 0000 001A             		btst	#0,$1A(a0)
0000CC8C 6600                       		bne.s	Obj39_Display
0000CC8E 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CC92 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CC94 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CC98 6000 0000                  		bra.w	DisplaySprite
0000CC9C                            ; ===========================================================================
0000CC9C                            
0000CC9C                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CC9C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CCA0 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CCA2 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CCA8 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CCAC 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CCAE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CCB4 6000                       		bra.s	Obj39_Display
0000CCB6                            ; ===========================================================================
0000CCB6                            
0000CCB6                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CCB6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CCBC                            
0000CCBC                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CCBC 6000 0000                  		bra.w	DisplaySprite
0000CCC0                            ; ===========================================================================
0000CCC0                            ; ---------------------------------------------------------------------------
0000CCC0                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CCC0                            ; ---------------------------------------------------------------------------
0000CCC0                            
0000CCC0                            Obj3A:					; XREF: Obj_Index
0000CCC0 7000                       		moveq	#0,d0
0000CCC2 1028 0024                  		move.b	$24(a0),d0
0000CCC6 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CCCA 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CCCE                            ; ===========================================================================
0000CCCE 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CCD0 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CCD2 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCD4 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CCD6 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCD8 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CCDA 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCDC 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CCDE 0000                       		dc.w loc_C766-Obj3A_Index
0000CCE0                            ; ===========================================================================
0000CCE0                            
0000CCE0                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CCE0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CCE4 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CCE6 4E75                       		rts	
0000CCE8                            ; ===========================================================================
0000CCE8                            
0000CCE8                            Obj3A_Main:
0000CCE8 2248                       		movea.l	a0,a1
0000CCEA 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CCF0 7206                       		moveq	#6,d1
0000CCF2                            
0000CCF2                            Obj3A_Loop:
0000CCF2 12BC 003A                  		move.b	#$3A,0(a1)
0000CCF6 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CCFA 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CCFE 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CD02 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD06 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD0A 101A                       		move.b	(a2)+,d0
0000CD0C 0C00 0006                  		cmpi.b	#6,d0
0000CD10 6600                       		bne.s	loc_C5CA
0000CD12 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CD16                            
0000CD16                            loc_C5CA:
0000CD16 1340 001A                  		move.b	d0,$1A(a1)
0000CD1A 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CD22 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD28 137C 0000 0001             		move.b	#0,1(a1)
0000CD2E 43E9 0040                  		lea	$40(a1),a1
0000CD32 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CD36                            
0000CD36                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CD36 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD38 3028 0030                  		move.w	$30(a0),d0
0000CD3C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD40 6700                       		beq.s	loc_C61A	; if yes, branch
0000CD42 6C00                       		bge.s	Obj3A_Move
0000CD44 4441                       		neg.w	d1
0000CD46                            
0000CD46                            Obj3A_Move:
0000CD46 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD4A                            
0000CD4A                            loc_C5FE:				; XREF: loc_C61A
0000CD4A 3028 0008                  		move.w	8(a0),d0
0000CD4E 6B00                       		bmi.s	locret_C60E
0000CD50 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD54 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CD56 6000 0000                  		bra.w	DisplaySprite
0000CD5A                            ; ===========================================================================
0000CD5A                            
0000CD5A                            locret_C60E:
0000CD5A 4E75                       		rts	
0000CD5C                            ; ===========================================================================
0000CD5C                            
0000CD5C                            loc_C610:				; XREF: loc_C61A
0000CD5C 117C 000E 0024             		move.b	#$E,$24(a0)
0000CD62 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CD66                            ; ===========================================================================
0000CD66                            
0000CD66                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CD66 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CD6C 67EE                       		beq.s	loc_C610
0000CD6E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CD74 66D4                       		bne.s	loc_C5FE
0000CD76 5428 0024                  		addq.b	#2,$24(a0)
0000CD7A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD80                            
0000CD80                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CD80 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD84 6600                       		bne.s	Obj3A_Display
0000CD86 5428 0024                  		addq.b	#2,$24(a0)
0000CD8A                            
0000CD8A                            Obj3A_Display:
0000CD8A 6000 0000                  		bra.w	DisplaySprite
0000CD8E                            ; ===========================================================================
0000CD8E                            
0000CD8E                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CD8E 6100 0000                  		bsr.w	DisplaySprite
0000CD92 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CD98 7000                       		moveq	#0,d0
0000CD9A 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CD9E 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CDA0 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDA4 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CDAA                            
0000CDAA                            Obj3A_RingBonus:
0000CDAA 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CDAE 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CDB0 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDB4 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDBA                            
0000CDBA                            Obj3A_ChkBonus:
0000CDBA 4A40                       		tst.w	d0		; is there any bonus?
0000CDBC 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CDBE 303C 00C5                  		move.w	#$C5,d0
0000CDC2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CDC8 5428 0024                  		addq.b	#2,$24(a0)
0000CDCC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CDD2 6600                       		bne.s	Obj3A_SetDelay
0000CDD4 5828 0024                  		addq.b	#4,$24(a0)
0000CDD8                            
0000CDD8                            Obj3A_SetDelay:
0000CDD8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDDE                            
0000CDDE                            locret_C692:
0000CDDE 4E75                       		rts	
0000CDE0                            ; ===========================================================================
0000CDE0                            
0000CDE0                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CDE0 4EB9 0000 0000             		jsr	AddPoints
0000CDE6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDEA 0200 0003                  		andi.b	#3,d0
0000CDEE 66EE                       		bne.s	locret_C692
0000CDF0 303C 00CD                  		move.w	#$CD,d0
0000CDF4 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CDFA                            ; ===========================================================================
0000CDFA                            
0000CDFA                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CDFA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CDFE 0240 0007                  		andi.w	#7,d0
0000CE02 E748                       		lsl.w	#3,d0
0000CE04 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CE08 0241 0003                  		andi.w	#3,d1
0000CE0C D241                       		add.w	d1,d1
0000CE0E D041                       		add.w	d1,d0
0000CE10 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CE14 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CE18 4A40                       		tst.w	d0
0000CE1A 6600                       		bne.s	Obj3A_ChkSS
0000CE1C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CE22 6000                       		bra.s	Obj3A_Display2
0000CE24                            ; ===========================================================================
0000CE24                            
0000CE24                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CE24 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CE28 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CE2C 6700                       		beq.s	loc_C6EA	; if not, branch
0000CE2E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CE34 6000                       		bra.s	Obj3A_Display2
0000CE36                            ; ===========================================================================
0000CE36                            
0000CE36                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CE36 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE3C                            
0000CE3C                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CE3C 6000 0000                  		bra.w	DisplaySprite
0000CE40                            ; ===========================================================================
0000CE40                            ; ---------------------------------------------------------------------------
0000CE40                            ; Level	order array
0000CE40                            ; ---------------------------------------------------------------------------
0000CE40                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CE70                            		even
0000CE70                            ; ===========================================================================
0000CE70                            
0000CE70                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CE70 7220                       		moveq	#$20,d1		; set horizontal speed
0000CE72 3028 0032                  		move.w	$32(a0),d0
0000CE76 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CE7A 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CE7C 6C00                       		bge.s	Obj3A_Move2
0000CE7E 4441                       		neg.w	d1
0000CE80                            
0000CE80                            Obj3A_Move2:
0000CE80 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE84 3028 0008                  		move.w	8(a0),d0
0000CE88 6B00                       		bmi.s	locret_C748
0000CE8A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CE8E 6400                       		bcc.s	locret_C748	; if yes, branch
0000CE90 6000 0000                  		bra.w	DisplaySprite
0000CE94                            ; ===========================================================================
0000CE94                            
0000CE94                            locret_C748:
0000CE94 4E75                       		rts	
0000CE96                            ; ===========================================================================
0000CE96                            
0000CE96                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CE96 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CE9C 6600 0000                  		bne.w	DeleteObject
0000CEA0 5428 0024                  		addq.b	#2,$24(a0)
0000CEA4 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CEA8 303C 008D                  		move.w	#$8D,d0
0000CEAC 4EF9 0000 15BA             		jmp	(PlaySound).l	; play FZ music
0000CEB2                            ; ===========================================================================
0000CEB2                            
0000CEB2                            loc_C766:				; XREF: Obj3A_Index
0000CEB2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CEB6 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CEBC 6700 0000                  		beq.w	DeleteObject
0000CEC0 4E75                       		rts	
0000CEC2                            ; ===========================================================================
0000CEC2 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CEC8 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CECA FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CED0 0201                       		dc.b 2,	1
0000CED2 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CED8 0206                       		dc.b 2,	6
0000CEDA 0520 0120 00EC             		dc.w $520, $120, $EC
0000CEE0 0202                       		dc.b 2,	2
0000CEE2 0540 0120 00FC             		dc.w $540, $120, $FC
0000CEE8 0203                       		dc.b 2,	3
0000CEEA 0560 0120 010C             		dc.w $560, $120, $10C
0000CEF0 0204                       		dc.b 2,	4
0000CEF2 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CEF8 0205                       		dc.b 2,	5
0000CEFA                            ; ===========================================================================
0000CEFA                            ; ---------------------------------------------------------------------------
0000CEFA                            ; Object 7E - special stage results screen
0000CEFA                            ; ---------------------------------------------------------------------------
0000CEFA                            
0000CEFA                            Obj7E:					; XREF: Obj_Index
0000CEFA 7000                       		moveq	#0,d0
0000CEFC 1028 0024                  		move.b	$24(a0),d0
0000CF00 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CF04 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CF08                            ; ===========================================================================
0000CF08 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CF0A 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CF0C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF0E 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CF10 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF12 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF14 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF16 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CF18 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF1A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF1C 0000                       		dc.w loc_C91A-Obj7E_Index
0000CF1E                            ; ===========================================================================
0000CF1E                            
0000CF1E                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CF1E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CF22 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CF24 4E75                       		rts	
0000CF26                            ; ===========================================================================
0000CF26                            
0000CF26                            Obj7E_Main:
0000CF26 2248                       		movea.l	a0,a1
0000CF28 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CF2E 7203                       		moveq	#3,d1
0000CF30 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CF36 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CF38 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CF3A                            
0000CF3A                            Obj7E_Loop:
0000CF3A 12BC 007E                  		move.b	#$7E,0(a1)
0000CF3E 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CF42 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF46 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF4A 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF4E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CF52 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CF5A 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF60 137C 0000 0001             		move.b	#0,1(a1)
0000CF66 43E9 0040                  		lea	$40(a1),a1
0000CF6A 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CF6E                            
0000CF6E 7007                       		moveq	#7,d0
0000CF70 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CF74 6700                       		beq.s	loc_C842
0000CF76 7000                       		moveq	#0,d0
0000CF78 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CF7C 6600                       		bne.s	loc_C842	; if not, branch
0000CF7E 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CF80 317C 0018 0008             		move.w	#$18,8(a0)
0000CF86 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CF8C                            
0000CF8C                            loc_C842:
0000CF8C 1140 001A                  		move.b	d0,$1A(a0)
0000CF90                            
0000CF90                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CF90 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF92 3028 0030                  		move.w	$30(a0),d0
0000CF96 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CF9A 6700                       		beq.s	loc_C86C	; if yes, branch
0000CF9C 6C00                       		bge.s	Obj7E_Move
0000CF9E 4441                       		neg.w	d1
0000CFA0                            
0000CFA0                            Obj7E_Move:
0000CFA0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CFA4                            
0000CFA4                            loc_C85A:				; XREF: loc_C86C
0000CFA4 3028 0008                  		move.w	8(a0),d0
0000CFA8 6B00                       		bmi.s	locret_C86A
0000CFAA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CFAE 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CFB0 6000 0000                  		bra.w	DisplaySprite
0000CFB4                            ; ===========================================================================
0000CFB4                            
0000CFB4                            locret_C86A:
0000CFB4 4E75                       		rts	
0000CFB6                            ; ===========================================================================
0000CFB6                            
0000CFB6                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CFB6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CFBC 66E6                       		bne.s	loc_C85A
0000CFBE 5428 0024                  		addq.b	#2,$24(a0)
0000CFC2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFC8 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CFCE                            
0000CFCE                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CFCE 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CFD2 6600                       		bne.s	Obj7E_Display
0000CFD4 5428 0024                  		addq.b	#2,$24(a0)
0000CFD8                            
0000CFD8                            Obj7E_Display:
0000CFD8 6000 0000                  		bra.w	DisplaySprite
0000CFDC                            ; ===========================================================================
0000CFDC                            
0000CFDC                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CFDC 6100 0000                  		bsr.w	DisplaySprite
0000CFE0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CFE6 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CFEA 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CFEC 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CFF2 700A                       		moveq	#10,d0		; add 10 to score
0000CFF4 4EB9 0000 0000             		jsr	AddPoints
0000CFFA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFFE 0200 0003                  		andi.b	#3,d0
0000D002 6600                       		bne.s	locret_C8EA
0000D004 303C 00CD                  		move.w	#$CD,d0
0000D008 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D00E                            ; ===========================================================================
0000D00E                            
0000D00E                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D00E 303C 00C5                  		move.w	#$C5,d0
0000D012 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D018 5428 0024                  		addq.b	#2,$24(a0)
0000D01C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D022 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D028 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D02A 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D030 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D034                            
0000D034                            locret_C8EA:
0000D034 4E75                       		rts	
0000D036                            ; ===========================================================================
0000D036                            
0000D036                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D036 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D03C 6000 0000                  		bra.w	DisplaySprite
0000D040                            ; ===========================================================================
0000D040                            
0000D040                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D040 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D046 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D04C 303C 00BF                  		move.w	#$BF,d0
0000D050 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play continues music
0000D056 5428 0024                  		addq.b	#2,$24(a0)
0000D05A 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D060 6000 0000                  		bra.w	DisplaySprite
0000D064                            ; ===========================================================================
0000D064                            
0000D064                            loc_C91A:				; XREF: Obj7E_Index
0000D064 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D068 0200 000F                  		andi.b	#$F,d0
0000D06C 6600                       		bne.s	Obj7E_Display2
0000D06E 0868 0000 001A             		bchg	#0,$1A(a0)
0000D074                            
0000D074                            Obj7E_Display2:
0000D074 6000 0000                  		bra.w	DisplaySprite
0000D078                            ; ===========================================================================
0000D078 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D07E 0200                       		dc.b 2,	0		; rountine number, frame number
0000D080 0320 0120 0118             		dc.w $320, $120, $118
0000D086 0201                       		dc.b 2,	1
0000D088 0360 0120 0128             		dc.w $360, $120, $128
0000D08E 0202                       		dc.b 2,	2
0000D090 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D096 0203                       		dc.b 2,	3
0000D098 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D09E 0206                       		dc.b 2,	6
0000D0A0                            ; ===========================================================================
0000D0A0                            ; ---------------------------------------------------------------------------
0000D0A0                            ; Object 7F - chaos emeralds from the special stage results screen
0000D0A0                            ; ---------------------------------------------------------------------------
0000D0A0                            
0000D0A0                            Obj7F:					; XREF: Obj_Index
0000D0A0 7000                       		moveq	#0,d0
0000D0A2 1028 0024                  		move.b	$24(a0),d0
0000D0A6 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D0AA 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D0AE                            ; ===========================================================================
0000D0AE 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D0B0 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D0B2                            
0000D0B2                            ; ---------------------------------------------------------------------------
0000D0B2                            ; X-axis positions for chaos emeralds
0000D0B2                            ; ---------------------------------------------------------------------------
0000D0B2 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D0BE                            ; ===========================================================================
0000D0BE                            
0000D0BE                            Obj7F_Main:				; XREF: Obj7F_Index
0000D0BE 2248                       		movea.l	a0,a1
0000D0C0 45F9 0000 D0B2             		lea	(Obj7F_PosData).l,a2
0000D0C6 7400                       		moveq	#0,d2
0000D0C8 7200                       		moveq	#0,d1
0000D0CA 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D0CE 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D0D0 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D0D4                            
0000D0D4                            Obj7F_Loop:
0000D0D4 12BC 007F                  		move.b	#$7F,0(a1)
0000D0D8 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D0DC 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D0E2 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D0E6 1633 2000                  		move.b	(a3,d2.w),d3
0000D0EA 1343 001A                  		move.b	d3,$1A(a1)
0000D0EE 1343 001C                  		move.b	d3,$1C(a1)
0000D0F2 5202                       		addq.b	#1,d2
0000D0F4 5429 0024                  		addq.b	#2,$24(a1)
0000D0F8 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D100 337C 8541 0002             		move.w	#$8541,2(a1)
0000D106 137C 0000 0001             		move.b	#0,1(a1)
0000D10C 43E9 0040                  		lea	$40(a1),a1	; next object
0000D110 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D114                            
0000D114                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D114 1028 001A                  		move.b	$1A(a0),d0
0000D118 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D11E 0C00 0006                  		cmpi.b	#6,d0
0000D122 6600                       		bne.s	Obj7F_Display
0000D124 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D12A                            
0000D12A                            Obj7F_Display:
0000D12A 6000 0000                  		bra.w	DisplaySprite
0000D12E                            ; ===========================================================================
0000D12E                            ; ---------------------------------------------------------------------------
0000D12E                            ; Sprite mappings - zone title cards
0000D12E                            ; ---------------------------------------------------------------------------
0000D12E 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D130 0000                       		dc.w byte_CA2C-Map_obj34
0000D132 0000                       		dc.w byte_CA5A-Map_obj34
0000D134 0000                       		dc.w byte_CA7A-Map_obj34
0000D136 0000                       		dc.w byte_CAA8-Map_obj34
0000D138 0000                       		dc.w byte_CADC-Map_obj34
0000D13A 0000                       		dc.w byte_CB10-Map_obj34
0000D13C 0000                       		dc.w byte_CB26-Map_obj34
0000D13E 0000                       		dc.w byte_CB31-Map_obj34
0000D140 0000                       		dc.w byte_CB3C-Map_obj34
0000D142 0000                       		dc.w byte_CB47-Map_obj34
0000D144 0000                       		dc.w byte_CB8A-Map_obj34
0000D146 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000D147 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000D14C F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000D151 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000D156 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000D15B F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000D160 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000D165 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000D16A F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000D16F F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000D174 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000D179 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000D17E F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000D183 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000D184 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000D189 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000D18E F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000D193 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000D198 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000D19D F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000D1A2 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D1A7 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000D1AC F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000D1B1 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000D1B6 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000D1BB F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000D1C0 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000D1C5 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000D1CA F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000D1CF F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000D1D4 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000D1D9 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000D1DE F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000D1E3 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000D1E8 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000D1ED F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000D1F2 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000D1F3 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000D1F8 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000D1FD F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D202 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D207 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D20C 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D20D F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D212 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D217 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D21C F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D221 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D226 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D22B F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D230 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D235 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D23A F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D23F F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D244 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D249 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D24E F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D253 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D258 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D25D F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D262 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D263 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D268 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D26D F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D272 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D277 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D27C F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D281 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D286 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D28B F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D290 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D295 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D29A F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D29F F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D2A4 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D2A9 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D2AE F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D2B3 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D2B8 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D2BD F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D2C2 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D2C7 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D2CC 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D2CD F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D2D2 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D2D7 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D2DC F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D2E1 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D2E6 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D2EB F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D2F0 04                         byte_CB10:	dc.b 4			; ZONE
0000D2F1 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D2F6 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D2FB F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D300 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D305 00                         		dc.b 0
0000D306 02                         byte_CB26:	dc.b 2			; ACT 1
0000D307 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D30C F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D311 02                         byte_CB31:	dc.b 2			; ACT 2
0000D312 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D317 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D31C 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D31D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D322 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D327 0D                         byte_CB47:	dc.b $D			; Oval
0000D328 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D32D E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D332 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D337 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D33C 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D341 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D346 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D34B FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D350 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D355 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D35A FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D35F 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D364 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D369 00                         		dc.b 0
0000D36A 05                         byte_CB8A:	dc.b 5			; FINAL
0000D36B F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D370 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D375 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D37A F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D37F F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D384                            		even
0000D384                            ; ---------------------------------------------------------------------------
0000D384                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D384                            ; ---------------------------------------------------------------------------
0000D384                            Map_obj39:
0000D384                            	include "_maps\obj39.asm"
0000D384                            ; ---------------------------------------------------------------------------
0000D384                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D384                            ; ---------------------------------------------------------------------------
0000D384 0000                       		dc.w byte_CBAC-Map_obj39
0000D386 0000                       		dc.w byte_CBB7-Map_obj39
0000D388 0000                       		dc.w byte_CBC2-Map_obj39
0000D38A 0000                       		dc.w byte_CBCD-Map_obj39
0000D38C 02                         byte_CBAC:	dc.b 2
0000D38D F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D392 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D397 02                         byte_CBB7:	dc.b 2
0000D398 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D39D F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D3A2 02                         byte_CBC2:	dc.b 2
0000D3A3 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D3A8 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D3AD 02                         byte_CBCD:	dc.b 2
0000D3AE F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D3B3 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D3B8                            		even
0000D3B8                            		even
0000D3B8                            
0000D3B8                            ; ---------------------------------------------------------------------------
0000D3B8                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D3B8                            ; ---------------------------------------------------------------------------
0000D3B8 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D3BA 0000                       		dc.w byte_CC13-Map_obj3A
0000D3BC 0000                       		dc.w byte_CC32-Map_obj3A
0000D3BE 0000                       		dc.w byte_CC51-Map_obj3A
0000D3C0 0000                       		dc.w byte_CC75-Map_obj3A
0000D3C2 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D3C4 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D3C6 FF59                       		dc.w byte_CB31-Map_obj3A
0000D3C8 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D3CA 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D3CB F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D3D0 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D3D5 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D3DA F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D3DF F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D3E4 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D3E9 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D3EE F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D3F3 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D3F8 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D3FD F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D402 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D407 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D40C F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D411 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D416 06                         byte_CC13:	dc.b 6			; PASSED
0000D417 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D41C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D421 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D426 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D42B F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D430 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D435 06                         byte_CC32:	dc.b 6			; SCORE
0000D436 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D43B F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D440 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D445 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D44A F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D44F FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D454 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D455 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D45A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D45F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D464 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D469 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D46E F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D473 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D478 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D479 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D47E F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D483 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D488 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D48D FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D492 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D497 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D49C                            		even
0000D49C                            ; ---------------------------------------------------------------------------
0000D49C                            ; Sprite mappings - special stage results screen
0000D49C                            ; ---------------------------------------------------------------------------
0000D49C 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D49E 0000                       		dc.w byte_CCEE-Map_obj7E
0000D4A0 0000                       		dc.w byte_CD0D-Map_obj7E
0000D4A2 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D4A4 0000                       		dc.w byte_CD31-Map_obj7E
0000D4A6 0000                       		dc.w byte_CD46-Map_obj7E
0000D4A8 0000                       		dc.w byte_CD5B-Map_obj7E
0000D4AA 0000                       		dc.w byte_CD6B-Map_obj7E
0000D4AC 0000                       		dc.w byte_CDA8-Map_obj7E
0000D4AE 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D4AF F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D4B4 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D4B9 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D4BE F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D4C3 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D4C8 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D4CD F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D4D2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D4D7 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D4DC F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D4E1 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D4E6 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D4EB F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D4F0 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D4F1 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D4F6 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D4FB F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D500 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D505 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D50A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D50F 07                         byte_CD0D:	dc.b 7
0000D510 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D515 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D51A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D51F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D524 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D529 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D52E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D533 04                         byte_CD31:	dc.b 4
0000D534 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D539 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D53E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D543 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D548 04                         byte_CD46:	dc.b 4
0000D549 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D54E F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D553 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D558 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D55D 03                         byte_CD5B:	dc.b 3
0000D55E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D563 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D568 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D56D 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D56E F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D573 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D578 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D57D F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D582 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D587 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D58C F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D591 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D596 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D59B F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D5A0 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D5A5 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D5AA 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D5AB F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D5B0 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D5B5 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D5BA F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D5BF F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D5C4 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D5C9 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D5CE F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D5D3 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D5D8 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D5DD F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D5E2 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D5E7 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D5EC F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D5F1 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D5F6                            		even
0000D5F6                            ; ---------------------------------------------------------------------------
0000D5F6                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D5F6                            ; ---------------------------------------------------------------------------
0000D5F6                            Map_obj7F:
0000D5F6                            	include "_maps\obj7F.asm"
0000D5F6                            ; ---------------------------------------------------------------------------
0000D5F6                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D5F6                            ; ---------------------------------------------------------------------------
0000D5F6 0000                       		dc.w byte_CE02-Map_obj7F
0000D5F8 0000                       		dc.w byte_CE08-Map_obj7F
0000D5FA 0000                       		dc.w byte_CE0E-Map_obj7F
0000D5FC 0000                       		dc.w byte_CE14-Map_obj7F
0000D5FE 0000                       		dc.w byte_CE1A-Map_obj7F
0000D600 0000                       		dc.w byte_CE20-Map_obj7F
0000D602 0000                       		dc.w byte_CE26-Map_obj7F
0000D604 01                         byte_CE02:	dc.b 1
0000D605 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D60A 01                         byte_CE08:	dc.b 1
0000D60B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D610 01                         byte_CE0E:	dc.b 1
0000D611 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D616 01                         byte_CE14:	dc.b 1
0000D617 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D61C 01                         byte_CE1A:	dc.b 1
0000D61D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D622 01                         byte_CE20:	dc.b 1
0000D623 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D628 00                         byte_CE26:	dc.b 0			; Blank frame
0000D62A 00                         		even
0000D62A 00                         		even
0000D62A                            
0000D62A                            ; ===========================================================================
0000D62A                            ; ---------------------------------------------------------------------------
0000D62A                            ; Object 36 - spikes
0000D62A                            ; ---------------------------------------------------------------------------
0000D62A                            
0000D62A                            Obj36:					; XREF: Obj_Index
0000D62A 7000                       		moveq	#0,d0
0000D62C 1028 0024                  		move.b	$24(a0),d0
0000D630 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D634 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D638                            ; ===========================================================================
0000D638 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D63A 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D63C                            
0000D63C 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D63E 0110                       		dc.b 1,	$10
0000D640 0204                       		dc.b 2,	4
0000D642 031C                       		dc.b 3,	$1C
0000D644 0440                       		dc.b 4,	$40
0000D646 0510                       		dc.b 5,	$10
0000D648                            ; ===========================================================================
0000D648                            
0000D648                            Obj36_Main:				; XREF: Obj36_Index
0000D648 5428 0024                  		addq.b	#2,$24(a0)
0000D64C 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D654 317C 051B 0002             		move.w	#$51B,2(a0)
0000D65A 0028 0004 0001             		ori.b	#4,1(a0)
0000D660 117C 0004 0018             		move.b	#4,$18(a0)
0000D666 1028 0028                  		move.b	$28(a0),d0
0000D66A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D670 0240 00F0                  		andi.w	#$F0,d0
0000D674 43F9 0000 D63C             		lea	(Obj36_Var).l,a1
0000D67A E648                       		lsr.w	#3,d0
0000D67C D2C0                       		adda.w	d0,a1
0000D67E 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D682 1159 0019                  		move.b	(a1)+,$19(a0)
0000D686 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D68C 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D692                            
0000D692                            Obj36_Solid:				; XREF: Obj36_Index
0000D692 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D696 343C 0004                  		move.w	#4,d2
0000D69A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D6A0 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D6A2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D6A8 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D6AA 343C 0014                  		move.w	#$14,d2
0000D6AE                            
0000D6AE                            ; Spikes types $1x and $5x face	sideways
0000D6AE                            
0000D6AE                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D6AE 323C 001B                  		move.w	#$1B,d1
0000D6B2 3602                       		move.w	d2,d3
0000D6B4 5243                       		addq.w	#1,d3
0000D6B6 3828 0008                  		move.w	8(a0),d4
0000D6BA 6100 0000                  		bsr.w	SolidObject
0000D6BE 0828 0003 0022             		btst	#3,$22(a0)
0000D6C4 6600                       		bne.s	Obj36_Display
0000D6C6 0C44 0001                  		cmpi.w	#1,d4
0000D6CA 6700                       		beq.s	Obj36_Hurt
0000D6CC 6000                       		bra.s	Obj36_Display
0000D6CE                            ; ===========================================================================
0000D6CE                            
0000D6CE                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D6CE                            
0000D6CE                            Obj36_Upright:				; XREF: Obj36_Solid
0000D6CE 7200                       		moveq	#0,d1
0000D6D0 1228 0019                  		move.b	$19(a0),d1
0000D6D4 0641 000B                  		addi.w	#$B,d1
0000D6D8 343C 0010                  		move.w	#$10,d2
0000D6DC 363C 0011                  		move.w	#$11,d3
0000D6E0 3828 0008                  		move.w	8(a0),d4
0000D6E4 6100 0000                  		bsr.w	SolidObject
0000D6E8 0828 0003 0022             		btst	#3,$22(a0)
0000D6EE 6600                       		bne.s	Obj36_Hurt
0000D6F0 4A44                       		tst.w	d4
0000D6F2 6A00                       		bpl.s	Obj36_Display
0000D6F4                            
0000D6F4                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D6F4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D6F8 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D6FA 2F08                       		move.l	a0,-(sp)
0000D6FC 2448                       		movea.l	a0,a2
0000D6FE 41F8 D000                  		lea	($FFFFD000).w,a0
0000D702 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D708 6400                       		bcc.s	loc_CF20
0000D70A 2628 000C                  		move.l	$C(a0),d3
0000D70E 3028 0012                  		move.w	$12(a0),d0
0000D712 48C0                       		ext.l	d0
0000D714 E180                       		asl.l	#8,d0
0000D716 9680                       		sub.l	d0,d3
0000D718 2143 000C                  		move.l	d3,$C(a0)
0000D71C 4EB9 0000 0000             		jsr	HurtSonic
0000D722                            
0000D722                            loc_CF20:
0000D722 205F                       		movea.l	(sp)+,a0
0000D724                            
0000D724                            Obj36_Display:
0000D724 6100 0000                  		bsr.w	DisplaySprite
0000D728 3028 0030                  		move.w	$30(a0),d0
0000D72C 0240 FF80                  		andi.w	#$FF80,d0
0000D730 3238 F700                  		move.w	($FFFFF700).w,d1
0000D734 0441 0080                  		subi.w	#$80,d1
0000D738 0241 FF80                  		andi.w	#$FF80,d1
0000D73C 9041                       		sub.w	d1,d0
0000D73E 0C40 0280                  		cmpi.w	#$280,d0
0000D742 6200 0000                  		bhi.w	DeleteObject
0000D746 4E75                       		rts	
0000D748                            ; ===========================================================================
0000D748                            
0000D748                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D748 7000                       		moveq	#0,d0
0000D74A 1028 0028                  		move.b	$28(a0),d0
0000D74E D040                       		add.w	d0,d0
0000D750 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D754 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D758                            ; ===========================================================================
0000D758 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D75A 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D75C 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D75E                            ; ===========================================================================
0000D75E                            
0000D75E                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D75E 4E75                       		rts			; don't move the object
0000D760                            ; ===========================================================================
0000D760                            
0000D760                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D760 6100 0000                  		bsr.w	Obj36_Wait
0000D764 7000                       		moveq	#0,d0
0000D766 1028 0034                  		move.b	$34(a0),d0
0000D76A D068 0032                  		add.w	$32(a0),d0
0000D76E 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D772 4E75                       		rts	
0000D774                            ; ===========================================================================
0000D774                            
0000D774                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D774 6100 0000                  		bsr.w	Obj36_Wait
0000D778 7000                       		moveq	#0,d0
0000D77A 1028 0034                  		move.b	$34(a0),d0
0000D77E D068 0030                  		add.w	$30(a0),d0
0000D782 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D786 4E75                       		rts	
0000D788                            ; ===========================================================================
0000D788                            
0000D788                            Obj36_Wait:
0000D788 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D78C 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D78E 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D792 6600                       		bne.s	locret_CFE6
0000D794 4A28 0001                  		tst.b	1(a0)
0000D798 6A00                       		bpl.s	locret_CFE6
0000D79A 303C 00B6                  		move.w	#$B6,d0
0000D79E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D7A4 6000                       		bra.s	locret_CFE6
0000D7A6                            ; ===========================================================================
0000D7A6                            
0000D7A6                            loc_CFA4:
0000D7A6 4A68 0036                  		tst.w	$36(a0)
0000D7AA 6700                       		beq.s	loc_CFC6
0000D7AC 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D7B2 6400                       		bcc.s	locret_CFE6
0000D7B4 317C 0000 0034             		move.w	#0,$34(a0)
0000D7BA 317C 0000 0036             		move.w	#0,$36(a0)
0000D7C0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D7C6 6000                       		bra.s	locret_CFE6
0000D7C8                            ; ===========================================================================
0000D7C8                            
0000D7C8                            loc_CFC6:
0000D7C8 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D7CE 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D7D4 6500                       		bcs.s	locret_CFE6
0000D7D6 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D7DC 317C 0001 0036             		move.w	#1,$36(a0)
0000D7E2 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D7E8                            
0000D7E8                            locret_CFE6:
0000D7E8 4E75                       		rts	
0000D7EA                            ; ===========================================================================
0000D7EA                            ; ---------------------------------------------------------------------------
0000D7EA                            ; Sprite mappings - spikes
0000D7EA                            ; ---------------------------------------------------------------------------
0000D7EA                            Map_obj36:
0000D7EA                            	include "_maps\obj36.asm"
0000D7EA                            Map_obj36_inner:
0000D7EA 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D7EC 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D7EE 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D7F0 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D7F2 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D7F4 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D7F6 03                         Map_obj36_inner_C: 	dc.b $3
0000D7F7 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D7FC F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D801 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D806 03                         Map_obj36_inner_1C: 	dc.b $3
0000D807 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D80C FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D811 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000D816 01                         Map_obj36_inner_2C: 	dc.b $1
0000D817 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D81C 03                         Map_obj36_inner_32: 	dc.b $3
0000D81D F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000D822 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D827 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000D82C 06                         Map_obj36_inner_42: 	dc.b $6
0000D82D F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000D832 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000D837 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000D83C F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000D841 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000D846 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000D84B 01                         Map_obj36_inner_61: 	dc.b $1
0000D84C FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D852 00                         	even
0000D852 00                         	even
0000D852                            
0000D852                            ; ===========================================================================
0000D852                            ; ---------------------------------------------------------------------------
0000D852                            ; Object 3B - purple rock (GHZ)
0000D852                            ; ---------------------------------------------------------------------------
0000D852                            
0000D852                            Obj3B:					; XREF: Obj_Index
0000D852 7000                       		moveq	#0,d0
0000D854 1028 0024                  		move.b	$24(a0),d0
0000D858 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D85C 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D860                            ; ===========================================================================
0000D860 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D862 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D864                            ; ===========================================================================
0000D864                            
0000D864                            Obj3B_Main:				; XREF: Obj3B_Index
0000D864 5428 0024                  		addq.b	#2,$24(a0)
0000D868 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D870 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D876 117C 0004 0001             		move.b	#4,1(a0)
0000D87C 117C 0013 0019             		move.b	#$13,$19(a0)
0000D882 117C 0004 0018             		move.b	#4,$18(a0)
0000D888                            
0000D888                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D888 323C 001B                  		move.w	#$1B,d1
0000D88C 343C 0010                  		move.w	#$10,d2
0000D890 363C 0010                  		move.w	#$10,d3
0000D894 3828 0008                  		move.w	8(a0),d4
0000D898 6100 0000                  		bsr.w	SolidObject
0000D89C 6100 0000                  		bsr.w	DisplaySprite
0000D8A0 3028 0008                  		move.w	8(a0),d0
0000D8A4 0240 FF80                  		andi.w	#$FF80,d0
0000D8A8 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8AC 0441 0080                  		subi.w	#$80,d1
0000D8B0 0241 FF80                  		andi.w	#$FF80,d1
0000D8B4 9041                       		sub.w	d1,d0
0000D8B6 0C40 0280                  		cmpi.w	#$280,d0
0000D8BA 6200 0000                  		bhi.w	DeleteObject
0000D8BE 4E75                       		rts	
0000D8C0                            ; ===========================================================================
0000D8C0                            ; ---------------------------------------------------------------------------
0000D8C0                            ; Object 49 - waterfall	sound effect (GHZ)
0000D8C0                            ; ---------------------------------------------------------------------------
0000D8C0                            
0000D8C0                            Obj49:					; XREF: Obj_Index
0000D8C0 7000                       		moveq	#0,d0
0000D8C2 1028 0024                  		move.b	$24(a0),d0
0000D8C6 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D8CA 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D8CE                            ; ===========================================================================
0000D8CE 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D8D0 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D8D2                            ; ===========================================================================
0000D8D2                            
0000D8D2                            Obj49_Main:				; XREF: Obj49_Index
0000D8D2 5428 0024                  		addq.b	#2,$24(a0)
0000D8D6 117C 0004 0001             		move.b	#4,1(a0)
0000D8DC                            
0000D8DC                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D8DC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D8E0 0200 003F                  		andi.b	#$3F,d0
0000D8E4 6600                       		bne.s	Obj49_ChkDel
0000D8E6 303C 00D0                  		move.w	#$D0,d0
0000D8EA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D8F0                            
0000D8F0                            Obj49_ChkDel:
0000D8F0 3028 0008                  		move.w	8(a0),d0
0000D8F4 0240 FF80                  		andi.w	#$FF80,d0
0000D8F8 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8FC 0441 0080                  		subi.w	#$80,d1
0000D900 0241 FF80                  		andi.w	#$FF80,d1
0000D904 9041                       		sub.w	d1,d0
0000D906 0C40 0280                  		cmpi.w	#$280,d0
0000D90A 6200 0000                  		bhi.w	DeleteObject
0000D90E 4E75                       		rts	
0000D910                            ; ===========================================================================
0000D910                            ; ---------------------------------------------------------------------------
0000D910                            ; Sprite mappings - purple rock	(GHZ)
0000D910                            ; ---------------------------------------------------------------------------
0000D910                            Map_obj3B:
0000D910                            	include "_maps\obj3B.asm"
0000D910                            ; ---------------------------------------------------------------------------
0000D910                            ; Sprite mappings - purple rock	(GHZ)
0000D910                            ; ---------------------------------------------------------------------------
0000D910 0000                       		dc.w byte_D110-Map_obj3B
0000D912 02                         byte_D110:	dc.b 2
0000D913 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D918 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D91E 00                         		even
0000D91E 00                         		even
0000D91E                            
0000D91E                            ; ===========================================================================
0000D91E                            ; ---------------------------------------------------------------------------
0000D91E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D91E                            ; ---------------------------------------------------------------------------
0000D91E                            
0000D91E                            Obj3C:					; XREF: Obj_Index
0000D91E 7000                       		moveq	#0,d0
0000D920 1028 0024                  		move.b	$24(a0),d0
0000D924 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D928 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D92C 6000 0000                  		bra.w	MarkObjGone
0000D930                            ; ===========================================================================
0000D930 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D932 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D934 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D936                            ; ===========================================================================
0000D936                            
0000D936                            Obj3C_Main:				; XREF: Obj3C_Index
0000D936 5428 0024                  		addq.b	#2,$24(a0)
0000D93A 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D942 317C 450F 0002             		move.w	#$450F,2(a0)
0000D948 117C 0004 0001             		move.b	#4,1(a0)
0000D94E 117C 0010 0019             		move.b	#$10,$19(a0)
0000D954 117C 0004 0018             		move.b	#4,$18(a0)
0000D95A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D960                            
0000D960                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D960 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D966 323C 001B                  		move.w	#$1B,d1
0000D96A 343C 0020                  		move.w	#$20,d2
0000D96E 363C 0020                  		move.w	#$20,d3
0000D972 3828 0008                  		move.w	8(a0),d4
0000D976 6100 0000                  		bsr.w	SolidObject
0000D97A 0828 0005 0022             		btst	#5,$22(a0)
0000D980 6600                       		bne.s	Obj3C_ChkRoll
0000D982                            
0000D982                            locret_D180:
0000D982 4E75                       		rts	
0000D984                            ; ===========================================================================
0000D984                            
0000D984                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D984 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D98A 66F6                       		bne.s	locret_D180	; if not, branch
0000D98C 3028 0030                  		move.w	$30(a0),d0
0000D990 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D992 4440                       		neg.w	d0
0000D994                            
0000D994                            Obj3C_ChkSpeed:
0000D994 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D998 65E8                       		bcs.s	locret_D180	; if not, branch
0000D99A 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D9A0 5869 0008                  		addq.w	#4,8(a1)
0000D9A4 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D9AA 3028 0008                  		move.w	8(a0),d0
0000D9AE B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D9B2 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D9B4 5169 0008                  		subq.w	#8,8(a1)
0000D9B8 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D9BE                            
0000D9BE                            Obj3C_Smash:
0000D9BE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D9C4 08A8 0005 0022             		bclr	#5,$22(a0)
0000D9CA 08A9 0005 0022             		bclr	#5,$22(a1)
0000D9D0 7207                       		moveq	#7,d1		; load 8 fragments
0000D9D2 343C 0070                  		move.w	#$70,d2
0000D9D6 6100                       		bsr.s	SmashObject
0000D9D8                            
0000D9D8                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D9D8 6100 0000                  		bsr.w	SpeedToPos
0000D9DC 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D9E2 6100 0000                  		bsr.w	DisplaySprite
0000D9E6 4A28 0001                  		tst.b	1(a0)
0000D9EA 6A00 0000                  		bpl.w	DeleteObject
0000D9EE 4E75                       		rts	
0000D9F0                            
0000D9F0                            ; ---------------------------------------------------------------------------
0000D9F0                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D9F0                            ; ---------------------------------------------------------------------------
0000D9F0                            
0000D9F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9F0                            
0000D9F0                            
0000D9F0                            SmashObject:				; XREF: Obj3C_Smash
0000D9F0 7000                       		moveq	#0,d0
0000D9F2 1028 001A                  		move.b	$1A(a0),d0
0000D9F6 D040                       		add.w	d0,d0
0000D9F8 2668 0004                  		movea.l	4(a0),a3
0000D9FC D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DA00 524B                       		addq.w	#1,a3
0000DA02 08E8 0005 0001             		bset	#5,1(a0)
0000DA08 1810                       		move.b	0(a0),d4
0000DA0A 1A28 0001                  		move.b	1(a0),d5
0000DA0E 2248                       		movea.l	a0,a1
0000DA10 6000                       		bra.s	Smash_LoadFrag
0000DA12                            ; ===========================================================================
0000DA12                            
0000DA12                            Smash_Loop:
0000DA12 6100 0000                  		bsr.w	SingleObjLoad
0000DA16 6600                       		bne.s	Smash_PlaySnd
0000DA18 5A4B                       		addq.w	#5,a3
0000DA1A                            
0000DA1A                            Smash_LoadFrag:				; XREF: SmashObject
0000DA1A 137C 0004 0024             		move.b	#4,$24(a1)
0000DA20 1284                       		move.b	d4,0(a1)
0000DA22 234B 0004                  		move.l	a3,4(a1)
0000DA26 1345 0001                  		move.b	d5,1(a1)
0000DA2A 3368 0008 0008             		move.w	8(a0),8(a1)
0000DA30 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DA36 3368 0002 0002             		move.w	2(a0),2(a1)
0000DA3C 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DA42 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DA48 335C 0010                  		move.w	(a4)+,$10(a1)
0000DA4C 335C 0012                  		move.w	(a4)+,$12(a1)
0000DA50 B3C8                       		cmpa.l	a0,a1
0000DA52 6400                       		bcc.s	loc_D268
0000DA54 2F08                       		move.l	a0,-(sp)
0000DA56 2049                       		movea.l	a1,a0
0000DA58 6100 0000                  		bsr.w	SpeedToPos
0000DA5C D568 0012                  		add.w	d2,$12(a0)
0000DA60 205F                       		movea.l	(sp)+,a0
0000DA62 6100 0000                  		bsr.w	DisplaySprite2
0000DA66                            
0000DA66                            loc_D268:
0000DA66 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DA6A                            
0000DA6A                            Smash_PlaySnd:
0000DA6A 303C 00CB                  		move.w	#$CB,d0
0000DA6E 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DA74                            ; End of function SmashObject
0000DA74                            
0000DA74                            ; ===========================================================================
0000DA74                            ; Smashed block	fragment speeds
0000DA74                            ;
0000DA74 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DA78 0600 FF00                  		dc.w $600, $FF00
0000DA7C 0600 0100                  		dc.w $600, $100
0000DA80 0400 0500                  		dc.w $400, $500
0000DA84 0600 FA00                  		dc.w $600, $FA00
0000DA88 0800 FE00                  		dc.w $800, $FE00
0000DA8C 0800 0200                  		dc.w $800, $200
0000DA90 0600 0600                  		dc.w $600, $600
0000DA94                            
0000DA94 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DA98 F800 FE00                  		dc.w $F800, $FE00
0000DA9C F800 0200                  		dc.w $F800, $200
0000DAA0 FA00 0600                  		dc.w $FA00, $600
0000DAA4 FC00 FB00                  		dc.w $FC00, $FB00
0000DAA8 FA00 FF00                  		dc.w $FA00, $FF00
0000DAAC FA00 0100                  		dc.w $FA00, $100
0000DAB0 FC00 0500                  		dc.w $FC00, $500
0000DAB4                            ; ---------------------------------------------------------------------------
0000DAB4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DAB4                            ; ---------------------------------------------------------------------------
0000DAB4                            Map_obj3C:
0000DAB4                            	include "_maps\obj3C.asm"
0000DAB4                            ; ---------------------------------------------------------------------------
0000DAB4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DAB4                            ; ---------------------------------------------------------------------------
0000DAB4 0000                       		dc.w byte_D2BC-Map_obj3C
0000DAB6 0000                       		dc.w byte_D2E5-Map_obj3C
0000DAB8 0000                       		dc.w byte_D30E-Map_obj3C
0000DABA 08                         byte_D2BC:	dc.b 8
0000DABB E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DAC0 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DAC5 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DACA 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DACF E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DAD4 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DAD9 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DADE 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DAE3 08                         byte_D2E5:	dc.b 8
0000DAE4 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DAE9 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DAEE 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DAF3 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DAF8 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DAFD F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DB02 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DB07 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DB0C 08                         byte_D30E:	dc.b 8
0000DB0D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB12 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB17 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB1C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB21 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DB26 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DB2B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DB30 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DB36 00                         		even
0000DB36 00                         		even
0000DB36                            
0000DB36                            ; ---------------------------------------------------------------------------
0000DB36                            ; Object code loading subroutine
0000DB36                            ; ---------------------------------------------------------------------------
0000DB36                            
0000DB36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB36                            
0000DB36                            
0000DB36                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DB36 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DB3A 7E7F                       		moveq	#$7F,d7
0000DB3C 7000                       		moveq	#0,d0
0000DB3E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DB44 6400                       		bcc.s	loc_D362
0000DB46                            
0000DB46                            loc_D348:
0000DB46 1010                       		move.b	(a0),d0		; load object number from RAM
0000DB48 6700                       		beq.s	loc_D358
0000DB4A D040                       		add.w	d0,d0
0000DB4C D040                       		add.w	d0,d0
0000DB4E 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DB52 4E91                       		jsr	(a1)		; run the object's code
0000DB54 7000                       		moveq	#0,d0
0000DB56                            
0000DB56                            loc_D358:
0000DB56 41E8 0040                  		lea	$40(a0),a0	; next object
0000DB5A 51CF FFEA                  		dbf	d7,loc_D348
0000DB5E 4E75                       		rts	
0000DB60                            ; ===========================================================================
0000DB60                            
0000DB60                            loc_D362:
0000DB60 7E1F                       		moveq	#$1F,d7
0000DB62 61E2                       		bsr.s	loc_D348
0000DB64 7E5F                       		moveq	#$5F,d7
0000DB66                            
0000DB66                            loc_D368:
0000DB66 7000                       		moveq	#0,d0
0000DB68 1010                       		move.b	(a0),d0
0000DB6A 6700                       		beq.s	loc_D378
0000DB6C 4A28 0001                  		tst.b	1(a0)
0000DB70 6A00                       		bpl.s	loc_D378
0000DB72 6100 0000                  		bsr.w	DisplaySprite
0000DB76                            
0000DB76                            loc_D378:
0000DB76 41E8 0040                  		lea	$40(a0),a0
0000DB7A                            
0000DB7A                            loc_D37C:
0000DB7A 51CF FFEA                  		dbf	d7,loc_D368
0000DB7E 4E75                       		rts	
0000DB80                            ; End of function ObjectsLoad
0000DB80                            
0000DB80                            ; ===========================================================================
0000DB80                            ; ---------------------------------------------------------------------------
0000DB80                            ; Object pointers
0000DB80                            ; ---------------------------------------------------------------------------
0000DB80                            Obj_Index:
0000DB80                            	include "_inc\Object pointers.asm"
0000DB80                            ; ---------------------------------------------------------------------------
0000DB80                            ; Object pointers
0000DB80                            ; ---------------------------------------------------------------------------
0000DB80 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DB90 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DBA0 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DBB0 0000 0000 0000 ADC6 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DBC0 0000 7962 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DBD0 0000 7F88 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DBE0 0000 87D6 0000 88D0 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DBF0 0000 8F1A 0000 9208 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DC00 0000 0000 0000 9EC2 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DC10 0000 A1FA 0000 A7E6 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DC20 0000 9B1E 0000 8FF0 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DC30 0000 B3BE 0000 A9DA 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DC40 0000 BDD2 0000 C480 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DC50 0000 B930 0000 D62A 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DC60 0000 CC06 0000 CCC0 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DC70 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DC80 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DC90 0000 C0EE 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DCA0 0000 D8C0 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DCB0 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DCC0 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DCD0 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DCE0 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DCF0 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DD00 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DD10 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DD20 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DD30 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DD40 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DD50 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DD60 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DD70 0000 0000 0000 CEFA 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DD80 0000 546E 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DD90 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DDA0 0000 5B28 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDA0 0000 5B28 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDB0                            
0000DDB0                            ; ---------------------------------------------------------------------------
0000DDB0                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DDB0                            ; ---------------------------------------------------------------------------
0000DDB0                            
0000DDB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDB0                            
0000DDB0                            
0000DDB0                            ObjectFall:
0000DDB0 2428 0008                  		move.l	8(a0),d2
0000DDB4 2628 000C                  		move.l	$C(a0),d3
0000DDB8 3028 0010                  		move.w	$10(a0),d0
0000DDBC 48C0                       		ext.l	d0
0000DDBE E180                       		asl.l	#8,d0
0000DDC0 D480                       		add.l	d0,d2
0000DDC2 3028 0012                  		move.w	$12(a0),d0
0000DDC6 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DDCC 48C0                       		ext.l	d0
0000DDCE E180                       		asl.l	#8,d0
0000DDD0 D680                       		add.l	d0,d3
0000DDD2 2142 0008                  		move.l	d2,8(a0)
0000DDD6 2143 000C                  		move.l	d3,$C(a0)
0000DDDA 4E75                       		rts	
0000DDDC                            ; End of function ObjectFall
0000DDDC                            
0000DDDC                            ; ---------------------------------------------------------------------------
0000DDDC                            ; Subroutine translating object	speed to update	object position
0000DDDC                            ; ---------------------------------------------------------------------------
0000DDDC                            
0000DDDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDDC                            
0000DDDC                            
0000DDDC                            SpeedToPos:
0000DDDC 2428 0008                  		move.l	8(a0),d2
0000DDE0 2628 000C                  		move.l	$C(a0),d3
0000DDE4 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DDE8 48C0                       		ext.l	d0
0000DDEA E180                       		asl.l	#8,d0		; multiply speed by $100
0000DDEC D480                       		add.l	d0,d2		; add to x-axis	position
0000DDEE 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DDF2 48C0                       		ext.l	d0
0000DDF4 E180                       		asl.l	#8,d0		; multiply by $100
0000DDF6 D680                       		add.l	d0,d3		; add to y-axis	position
0000DDF8 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DDFC 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DE00 4E75                       		rts	
0000DE02                            ; End of function SpeedToPos
0000DE02                            
0000DE02                            ; ---------------------------------------------------------------------------
0000DE02                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DE02                            ; ---------------------------------------------------------------------------
0000DE02                            
0000DE02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE02                            
0000DE02                            
0000DE02                            DisplaySprite:
0000DE02 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DE06 3028 0018                  		move.w	$18(a0),d0
0000DE0A E248                       		lsr.w	#1,d0
0000DE0C 0240 0380                  		andi.w	#$380,d0
0000DE10 D2C0                       		adda.w	d0,a1
0000DE12 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DE16 6400                       		bcc.s	locret_D620
0000DE18 5451                       		addq.w	#2,(a1)
0000DE1A D2D1                       		adda.w	(a1),a1
0000DE1C 3288                       		move.w	a0,(a1)
0000DE1E                            
0000DE1E                            locret_D620:
0000DE1E 4E75                       		rts	
0000DE20                            ; End of function DisplaySprite
0000DE20                            
0000DE20                            ; ---------------------------------------------------------------------------
0000DE20                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DE20                            ; ---------------------------------------------------------------------------
0000DE20                            
0000DE20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE20                            
0000DE20                            
0000DE20                            DisplaySprite2:
0000DE20 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DE24 3029 0018                  		move.w	$18(a1),d0
0000DE28 E248                       		lsr.w	#1,d0
0000DE2A 0240 0380                  		andi.w	#$380,d0
0000DE2E D4C0                       		adda.w	d0,a2
0000DE30 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DE34 6400                       		bcc.s	locret_D63E
0000DE36 5452                       		addq.w	#2,(a2)
0000DE38 D4D2                       		adda.w	(a2),a2
0000DE3A 3489                       		move.w	a1,(a2)
0000DE3C                            
0000DE3C                            locret_D63E:
0000DE3C 4E75                       		rts	
0000DE3E                            ; End of function DisplaySprite2
0000DE3E                            
0000DE3E                            ; ---------------------------------------------------------------------------
0000DE3E                            ; Subroutine to	delete an object
0000DE3E                            ; ---------------------------------------------------------------------------
0000DE3E                            
0000DE3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE3E                            
0000DE3E                            
0000DE3E                            DeleteObject:
0000DE3E 2248                       		movea.l	a0,a1
0000DE40                            
0000DE40                            DeleteObject2:
0000DE40 7200                       		moveq	#0,d1
0000DE42 700F                       		moveq	#$F,d0
0000DE44                            
0000DE44                            loc_D646:
0000DE44 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DE46 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DE4A 4E75                       		rts	
0000DE4C                            ; End of function DeleteObject
0000DE4C                            
0000DE4C                            ; ===========================================================================
0000DE4C 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DE50 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DE54 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DE58 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DE5C                            ; ---------------------------------------------------------------------------
0000DE5C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DE5C                            ; ---------------------------------------------------------------------------
0000DE5C                            
0000DE5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE5C                            
0000DE5C                            
0000DE5C                            BuildSprites:				; XREF: TitleScreen; et al
0000DE5C 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DE60 7A00                       		moveq	#0,d5
0000DE62 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DE66 7E07                       		moveq	#7,d7
0000DE68                            
0000DE68                            loc_D66A:
0000DE68 4A54                       		tst.w	(a4)
0000DE6A 6700 0000                  		beq.w	loc_D72E
0000DE6E 7C02                       		moveq	#2,d6
0000DE70                            
0000DE70                            loc_D672:
0000DE70 3074 6000                  		movea.w	(a4,d6.w),a0
0000DE74 4A10                       		tst.b	(a0)
0000DE76 6700 0000                  		beq.w	loc_D726
0000DE7A 08A8 0007 0001             		bclr	#7,1(a0)
0000DE80 1028 0001                  		move.b	1(a0),d0
0000DE84 1800                       		move.b	d0,d4
0000DE86 0240 000C                  		andi.w	#$C,d0
0000DE8A 6700                       		beq.s	loc_D6DE
0000DE8C 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DE90 7000                       		moveq	#0,d0
0000DE92 1028 0019                  		move.b	$19(a0),d0
0000DE96 3628 0008                  		move.w	8(a0),d3
0000DE9A 9651                       		sub.w	(a1),d3
0000DE9C 3203                       		move.w	d3,d1
0000DE9E D240                       		add.w	d0,d1
0000DEA0 6B00 0000                  		bmi.w	loc_D726
0000DEA4 3203                       		move.w	d3,d1
0000DEA6 9240                       		sub.w	d0,d1
0000DEA8 0C41 0140                  		cmpi.w	#$140,d1
0000DEAC 6C00                       		bge.s	loc_D726
0000DEAE 0643 0080                  		addi.w	#$80,d3
0000DEB2 0804 0004                  		btst	#4,d4
0000DEB6 6700                       		beq.s	loc_D6E8
0000DEB8 7000                       		moveq	#0,d0
0000DEBA 1028 0016                  		move.b	$16(a0),d0
0000DEBE 3428 000C                  		move.w	$C(a0),d2
0000DEC2 9469 0004                  		sub.w	4(a1),d2
0000DEC6 3202                       		move.w	d2,d1
0000DEC8 D240                       		add.w	d0,d1
0000DECA 6B00                       		bmi.s	loc_D726
0000DECC 3202                       		move.w	d2,d1
0000DECE 9240                       		sub.w	d0,d1
0000DED0 0C41 00E0                  		cmpi.w	#$E0,d1
0000DED4 6C00                       		bge.s	loc_D726
0000DED6 0642 0080                  		addi.w	#$80,d2
0000DEDA 6000                       		bra.s	loc_D700
0000DEDC                            ; ===========================================================================
0000DEDC                            
0000DEDC                            loc_D6DE:
0000DEDC 3428 000A                  		move.w	$A(a0),d2
0000DEE0 3628 0008                  		move.w	8(a0),d3
0000DEE4 6000                       		bra.s	loc_D700
0000DEE6                            ; ===========================================================================
0000DEE6                            
0000DEE6                            loc_D6E8:
0000DEE6 3428 000C                  		move.w	$C(a0),d2
0000DEEA 9469 0004                  		sub.w	4(a1),d2
0000DEEE 0642 0080                  		addi.w	#$80,d2
0000DEF2 0C42 0060                  		cmpi.w	#$60,d2
0000DEF6 6500                       		bcs.s	loc_D726
0000DEF8 0C42 0180                  		cmpi.w	#$180,d2
0000DEFC 6400                       		bcc.s	loc_D726
0000DEFE                            
0000DEFE                            loc_D700:
0000DEFE 2268 0004                  		movea.l	4(a0),a1
0000DF02 7200                       		moveq	#0,d1
0000DF04 0804 0005                  		btst	#5,d4
0000DF08 6600                       		bne.s	loc_D71C
0000DF0A 1228 001A                  		move.b	$1A(a0),d1
0000DF0E D201                       		add.b	d1,d1
0000DF10 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DF14 1219                       		move.b	(a1)+,d1
0000DF16 5301                       		subq.b	#1,d1
0000DF18 6B00                       		bmi.s	loc_D720
0000DF1A                            
0000DF1A                            loc_D71C:
0000DF1A 6100 0000                  		bsr.w	sub_D750
0000DF1E                            
0000DF1E                            loc_D720:
0000DF1E 08E8 0007 0001             		bset	#7,1(a0)
0000DF24                            
0000DF24                            loc_D726:
0000DF24 5446                       		addq.w	#2,d6
0000DF26 5554                       		subq.w	#2,(a4)
0000DF28 6600 FF46                  		bne.w	loc_D672
0000DF2C                            
0000DF2C                            loc_D72E:
0000DF2C 49EC 0080                  		lea	$80(a4),a4
0000DF30 51CF FF36                  		dbf	d7,loc_D66A
0000DF34 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DF38 0C05 0050                  		cmpi.b	#$50,d5
0000DF3C 6700                       		beq.s	loc_D748
0000DF3E 24BC 0000 0000             		move.l	#0,(a2)
0000DF44 4E75                       		rts	
0000DF46                            ; ===========================================================================
0000DF46                            
0000DF46                            loc_D748:
0000DF46 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DF4C 4E75                       		rts	
0000DF4E                            ; End of function BuildSprites
0000DF4E                            
0000DF4E                            
0000DF4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF4E                            
0000DF4E                            
0000DF4E                            sub_D750:				; XREF: BuildSprites
0000DF4E 3668 0002                  		movea.w	2(a0),a3
0000DF52 0804 0000                  		btst	#0,d4
0000DF56 6600                       		bne.s	loc_D796
0000DF58 0804 0001                  		btst	#1,d4
0000DF5C 6600 0000                  		bne.w	loc_D7E4
0000DF60                            ; End of function sub_D750
0000DF60                            
0000DF60                            
0000DF60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF60                            
0000DF60                            
0000DF60                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DF60 0C05 0050                  		cmpi.b	#$50,d5
0000DF64 6700                       		beq.s	locret_D794
0000DF66 1019                       		move.b	(a1)+,d0
0000DF68 4880                       		ext.w	d0
0000DF6A D042                       		add.w	d2,d0
0000DF6C 34C0                       		move.w	d0,(a2)+
0000DF6E 14D9                       		move.b	(a1)+,(a2)+
0000DF70 5205                       		addq.b	#1,d5
0000DF72 14C5                       		move.b	d5,(a2)+
0000DF74 1019                       		move.b	(a1)+,d0
0000DF76 E148                       		lsl.w	#8,d0
0000DF78 1019                       		move.b	(a1)+,d0
0000DF7A D04B                       		add.w	a3,d0
0000DF7C 34C0                       		move.w	d0,(a2)+
0000DF7E 1019                       		move.b	(a1)+,d0
0000DF80 4880                       		ext.w	d0
0000DF82 D043                       		add.w	d3,d0
0000DF84 0240 01FF                  		andi.w	#$1FF,d0
0000DF88 6600                       		bne.s	loc_D78E
0000DF8A 5240                       		addq.w	#1,d0
0000DF8C                            
0000DF8C                            loc_D78E:
0000DF8C 34C0                       		move.w	d0,(a2)+
0000DF8E 51C9 FFD0                  		dbf	d1,sub_D762
0000DF92                            
0000DF92                            locret_D794:
0000DF92 4E75                       		rts	
0000DF94                            ; End of function sub_D762
0000DF94                            
0000DF94                            ; ===========================================================================
0000DF94                            
0000DF94                            loc_D796:
0000DF94 0804 0001                  		btst	#1,d4
0000DF98 6600 0000                  		bne.w	loc_D82A
0000DF9C                            
0000DF9C                            loc_D79E:
0000DF9C 0C05 0050                  		cmpi.b	#$50,d5
0000DFA0 6700                       		beq.s	locret_D7E2
0000DFA2 1019                       		move.b	(a1)+,d0
0000DFA4 4880                       		ext.w	d0
0000DFA6 D042                       		add.w	d2,d0
0000DFA8 34C0                       		move.w	d0,(a2)+
0000DFAA 1819                       		move.b	(a1)+,d4
0000DFAC 14C4                       		move.b	d4,(a2)+
0000DFAE 5205                       		addq.b	#1,d5
0000DFB0 14C5                       		move.b	d5,(a2)+
0000DFB2 1019                       		move.b	(a1)+,d0
0000DFB4 E148                       		lsl.w	#8,d0
0000DFB6 1019                       		move.b	(a1)+,d0
0000DFB8 D04B                       		add.w	a3,d0
0000DFBA 0A40 0800                  		eori.w	#$800,d0
0000DFBE 34C0                       		move.w	d0,(a2)+
0000DFC0 1019                       		move.b	(a1)+,d0
0000DFC2 4880                       		ext.w	d0
0000DFC4 4440                       		neg.w	d0
0000DFC6 D804                       		add.b	d4,d4
0000DFC8 0244 0018                  		andi.w	#$18,d4
0000DFCC 5044                       		addq.w	#8,d4
0000DFCE 9044                       		sub.w	d4,d0
0000DFD0 D043                       		add.w	d3,d0
0000DFD2 0240 01FF                  		andi.w	#$1FF,d0
0000DFD6 6600                       		bne.s	loc_D7DC
0000DFD8 5240                       		addq.w	#1,d0
0000DFDA                            
0000DFDA                            loc_D7DC:
0000DFDA 34C0                       		move.w	d0,(a2)+
0000DFDC 51C9 FFBE                  		dbf	d1,loc_D79E
0000DFE0                            
0000DFE0                            locret_D7E2:
0000DFE0 4E75                       		rts	
0000DFE2                            ; ===========================================================================
0000DFE2                            
0000DFE2                            loc_D7E4:				; XREF: sub_D750
0000DFE2 0C05 0050                  		cmpi.b	#$50,d5
0000DFE6 6700                       		beq.s	locret_D828
0000DFE8 1019                       		move.b	(a1)+,d0
0000DFEA 1811                       		move.b	(a1),d4
0000DFEC 4880                       		ext.w	d0
0000DFEE 4440                       		neg.w	d0
0000DFF0 E70C                       		lsl.b	#3,d4
0000DFF2 0244 0018                  		andi.w	#$18,d4
0000DFF6 5044                       		addq.w	#8,d4
0000DFF8 9044                       		sub.w	d4,d0
0000DFFA D042                       		add.w	d2,d0
0000DFFC 34C0                       		move.w	d0,(a2)+
0000DFFE 14D9                       		move.b	(a1)+,(a2)+
0000E000 5205                       		addq.b	#1,d5
0000E002 14C5                       		move.b	d5,(a2)+
0000E004 1019                       		move.b	(a1)+,d0
0000E006 E148                       		lsl.w	#8,d0
0000E008 1019                       		move.b	(a1)+,d0
0000E00A D04B                       		add.w	a3,d0
0000E00C 0A40 1000                  		eori.w	#$1000,d0
0000E010 34C0                       		move.w	d0,(a2)+
0000E012 1019                       		move.b	(a1)+,d0
0000E014 4880                       		ext.w	d0
0000E016 D043                       		add.w	d3,d0
0000E018 0240 01FF                  		andi.w	#$1FF,d0
0000E01C 6600                       		bne.s	loc_D822
0000E01E 5240                       		addq.w	#1,d0
0000E020                            
0000E020                            loc_D822:
0000E020 34C0                       		move.w	d0,(a2)+
0000E022 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E026                            
0000E026                            locret_D828:
0000E026 4E75                       		rts	
0000E028                            ; ===========================================================================
0000E028                            
0000E028                            loc_D82A:
0000E028 0C05 0050                  		cmpi.b	#$50,d5
0000E02C 6700                       		beq.s	locret_D87C
0000E02E 1019                       		move.b	(a1)+,d0
0000E030 1811                       		move.b	(a1),d4
0000E032 4880                       		ext.w	d0
0000E034 4440                       		neg.w	d0
0000E036 E70C                       		lsl.b	#3,d4
0000E038 0244 0018                  		andi.w	#$18,d4
0000E03C 5044                       		addq.w	#8,d4
0000E03E 9044                       		sub.w	d4,d0
0000E040 D042                       		add.w	d2,d0
0000E042 34C0                       		move.w	d0,(a2)+
0000E044 1819                       		move.b	(a1)+,d4
0000E046 14C4                       		move.b	d4,(a2)+
0000E048 5205                       		addq.b	#1,d5
0000E04A 14C5                       		move.b	d5,(a2)+
0000E04C 1019                       		move.b	(a1)+,d0
0000E04E E148                       		lsl.w	#8,d0
0000E050 1019                       		move.b	(a1)+,d0
0000E052 D04B                       		add.w	a3,d0
0000E054 0A40 1800                  		eori.w	#$1800,d0
0000E058 34C0                       		move.w	d0,(a2)+
0000E05A 1019                       		move.b	(a1)+,d0
0000E05C 4880                       		ext.w	d0
0000E05E 4440                       		neg.w	d0
0000E060 D804                       		add.b	d4,d4
0000E062 0244 0018                  		andi.w	#$18,d4
0000E066 5044                       		addq.w	#8,d4
0000E068 9044                       		sub.w	d4,d0
0000E06A D043                       		add.w	d3,d0
0000E06C 0240 01FF                  		andi.w	#$1FF,d0
0000E070 6600                       		bne.s	loc_D876
0000E072 5240                       		addq.w	#1,d0
0000E074                            
0000E074                            loc_D876:
0000E074 34C0                       		move.w	d0,(a2)+
0000E076 51C9 FFB0                  		dbf	d1,loc_D82A
0000E07A                            
0000E07A                            locret_D87C:
0000E07A 4E75                       		rts	
0000E07C                            ; ---------------------------------------------------------------------------
0000E07C                            ; Subroutine to	check if an object is on the screen
0000E07C                            ; ---------------------------------------------------------------------------
0000E07C                            
0000E07C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E07C                            
0000E07C                            
0000E07C                            ChkObjOnScreen:
0000E07C 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E080 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E084 6B00                       		bmi.s	NotOnScreen
0000E086 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E08A 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E08C                            
0000E08C 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E090 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E094 6B00                       		bmi.s	NotOnScreen
0000E096 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E09A 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E09C                            
0000E09C 7000                       		moveq	#0,d0		; set flag to 0
0000E09E 4E75                       		rts	
0000E0A0                            ; ===========================================================================
0000E0A0                            
0000E0A0                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E0A0 7001                       		moveq	#1,d0		; set flag to 1
0000E0A2 4E75                       		rts	
0000E0A4                            ; End of function ChkObjOnScreen
0000E0A4                            
0000E0A4                            
0000E0A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0A4                            
0000E0A4                            
0000E0A4                            ChkObjOnScreen2:
0000E0A4 7200                       		moveq	#0,d1
0000E0A6 1228 0019                  		move.b	$19(a0),d1
0000E0AA 3028 0008                  		move.w	8(a0),d0
0000E0AE 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E0B2 D041                       		add.w	d1,d0
0000E0B4 6B00                       		bmi.s	NotOnScreen2
0000E0B6 D241                       		add.w	d1,d1
0000E0B8 9041                       		sub.w	d1,d0
0000E0BA 0C40 0140                  		cmpi.w	#320,d0
0000E0BE 6C00                       		bge.s	NotOnScreen2
0000E0C0                            
0000E0C0 3228 000C                  		move.w	$C(a0),d1
0000E0C4 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E0C8 6B00                       		bmi.s	NotOnScreen2
0000E0CA 0C41 00E0                  		cmpi.w	#224,d1
0000E0CE 6C00                       		bge.s	NotOnScreen2
0000E0D0                            
0000E0D0 7000                       		moveq	#0,d0
0000E0D2 4E75                       		rts	
0000E0D4                            ; ===========================================================================
0000E0D4                            
0000E0D4                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E0D4 7001                       		moveq	#1,d0
0000E0D6 4E75                       		rts	
0000E0D8                            ; End of function ChkObjOnScreen2
0000E0D8                            
0000E0D8                            ; ---------------------------------------------------------------------------
0000E0D8                            ; Subroutine to	load a level's objects
0000E0D8                            ; ---------------------------------------------------------------------------
0000E0D8                            
0000E0D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0D8                            
0000E0D8                            
0000E0D8                            ObjPosLoad:				; XREF: Level; et al
0000E0D8 7000                       		moveq	#0,d0
0000E0DA 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E0DE 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E0E2 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E0E6                            ; End of function ObjPosLoad
0000E0E6                            
0000E0E6                            ; ===========================================================================
0000E0E6 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E0E8 0000                       		dc.w OPL_Next-OPL_Index
0000E0EA                            ; ===========================================================================
0000E0EA                            
0000E0EA                            OPL_Main:				; XREF: OPL_Index
0000E0EA 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E0EE 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E0F2 ED08                       		lsl.b	#6,d0
0000E0F4 E848                       		lsr.w	#4,d0
0000E0F6 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E0FC 2248                       		movea.l	a0,a1
0000E0FE D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E102 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E106 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E10A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E10E 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E112 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E116 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E11A 34FC 0101                  		move.w	#$101,(a2)+
0000E11E 303C 005E                  		move.w	#$5E,d0
0000E122                            
0000E122                            OPL_ClrList:
0000E122 429A                       		clr.l	(a2)+
0000E124 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E128                            
0000E128 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E12C 7400                       		moveq	#0,d2
0000E12E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E132 0446 0080                  		subi.w	#$80,d6
0000E136 6400                       		bcc.s	loc_D93C
0000E138 7C00                       		moveq	#0,d6
0000E13A                            
0000E13A                            loc_D93C:
0000E13A 0246 FF80                  		andi.w	#$FF80,d6
0000E13E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E142                            
0000E142                            loc_D944:
0000E142 BC50                       		cmp.w	(a0),d6
0000E144 6300                       		bls.s	loc_D956
0000E146 4A28 0004                  		tst.b	4(a0)
0000E14A 6A00                       		bpl.s	loc_D952
0000E14C 1412                       		move.b	(a2),d2
0000E14E 5212                       		addq.b	#1,(a2)
0000E150                            
0000E150                            loc_D952:
0000E150 5C48                       		addq.w	#6,a0
0000E152 60EE                       		bra.s	loc_D944
0000E154                            ; ===========================================================================
0000E154                            
0000E154                            loc_D956:
0000E154 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E158 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E15C 0446 0080                  		subi.w	#$80,d6
0000E160 6500                       		bcs.s	loc_D976
0000E162                            
0000E162                            loc_D964:
0000E162 BC50                       		cmp.w	(a0),d6
0000E164 6300                       		bls.s	loc_D976
0000E166 4A28 0004                  		tst.b	4(a0)
0000E16A 6A00                       		bpl.s	loc_D972
0000E16C 522A 0001                  		addq.b	#1,1(a2)
0000E170                            
0000E170                            loc_D972:
0000E170 5C48                       		addq.w	#6,a0
0000E172 60EE                       		bra.s	loc_D964
0000E174                            ; ===========================================================================
0000E174                            
0000E174                            loc_D976:
0000E174 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E178 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E17E                            
0000E17E                            OPL_Next:				; XREF: OPL_Index
0000E17E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E182 7400                       		moveq	#0,d2
0000E184 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E188 0246 FF80                  		andi.w	#$FF80,d6
0000E18C BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E190 6700 0000                  		beq.w	locret_DA3A
0000E194 6C00                       		bge.s	loc_D9F6
0000E196 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E19A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E19E 0446 0080                  		subi.w	#$80,d6
0000E1A2 6500                       		bcs.s	loc_D9D2
0000E1A4                            
0000E1A4                            loc_D9A6:
0000E1A4 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E1A8 6C00                       		bge.s	loc_D9D2
0000E1AA 5D48                       		subq.w	#6,a0
0000E1AC 4A28 0004                  		tst.b	4(a0)
0000E1B0 6A00                       		bpl.s	loc_D9BC
0000E1B2 532A 0001                  		subq.b	#1,1(a2)
0000E1B6 142A 0001                  		move.b	1(a2),d2
0000E1BA                            
0000E1BA                            loc_D9BC:
0000E1BA 6100 0000                  		bsr.w	loc_DA3C
0000E1BE 6600                       		bne.s	loc_D9C6
0000E1C0 5D48                       		subq.w	#6,a0
0000E1C2 60E0                       		bra.s	loc_D9A6
0000E1C4                            ; ===========================================================================
0000E1C4                            
0000E1C4                            loc_D9C6:
0000E1C4 4A28 0004                  		tst.b	4(a0)
0000E1C8 6A00                       		bpl.s	loc_D9D0
0000E1CA 522A 0001                  		addq.b	#1,1(a2)
0000E1CE                            
0000E1CE                            loc_D9D0:
0000E1CE 5C48                       		addq.w	#6,a0
0000E1D0                            
0000E1D0                            loc_D9D2:
0000E1D0 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E1D4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E1D8 0646 0300                  		addi.w	#$300,d6
0000E1DC                            
0000E1DC                            loc_D9DE:
0000E1DC BC68 FFFA                  		cmp.w	-6(a0),d6
0000E1E0 6E00                       		bgt.s	loc_D9F0
0000E1E2 4A28 FFFE                  		tst.b	-2(a0)
0000E1E6 6A00                       		bpl.s	loc_D9EC
0000E1E8 5312                       		subq.b	#1,(a2)
0000E1EA                            
0000E1EA                            loc_D9EC:
0000E1EA 5D48                       		subq.w	#6,a0
0000E1EC 60EE                       		bra.s	loc_D9DE
0000E1EE                            ; ===========================================================================
0000E1EE                            
0000E1EE                            loc_D9F0:
0000E1EE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1F2 4E75                       		rts	
0000E1F4                            ; ===========================================================================
0000E1F4                            
0000E1F4                            loc_D9F6:
0000E1F4 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E1F8 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E1FC 0646 0280                  		addi.w	#$280,d6
0000E200                            
0000E200                            loc_DA02:
0000E200 BC50                       		cmp.w	(a0),d6
0000E202 6300                       		bls.s	loc_DA16
0000E204 4A28 0004                  		tst.b	4(a0)
0000E208 6A00                       		bpl.s	loc_DA10
0000E20A 1412                       		move.b	(a2),d2
0000E20C 5212                       		addq.b	#1,(a2)
0000E20E                            
0000E20E                            loc_DA10:
0000E20E 6100 0000                  		bsr.w	loc_DA3C
0000E212 67EC                       		beq.s	loc_DA02
0000E214                            
0000E214                            loc_DA16:
0000E214 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E218 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E21C 0446 0300                  		subi.w	#$300,d6
0000E220 6500                       		bcs.s	loc_DA36
0000E222                            
0000E222                            loc_DA24:
0000E222 BC50                       		cmp.w	(a0),d6
0000E224 6300                       		bls.s	loc_DA36
0000E226 4A28 0004                  		tst.b	4(a0)
0000E22A 6A00                       		bpl.s	loc_DA32
0000E22C 522A 0001                  		addq.b	#1,1(a2)
0000E230                            
0000E230                            loc_DA32:
0000E230 5C48                       		addq.w	#6,a0
0000E232 60EE                       		bra.s	loc_DA24
0000E234                            ; ===========================================================================
0000E234                            
0000E234                            loc_DA36:
0000E234 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E238                            
0000E238                            locret_DA3A:
0000E238 4E75                       		rts	
0000E23A                            ; ===========================================================================
0000E23A                            
0000E23A                            loc_DA3C:
0000E23A 4A28 0004                  		tst.b	4(a0)
0000E23E 6A00                       		bpl.s	OPL_MakeItem
0000E240 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E246 6700                       		beq.s	OPL_MakeItem
0000E248 5C48                       		addq.w	#6,a0
0000E24A 7000                       		moveq	#0,d0
0000E24C 4E75                       		rts	
0000E24E                            ; ===========================================================================
0000E24E                            
0000E24E                            OPL_MakeItem:
0000E24E 6100 0000                  		bsr.w	SingleObjLoad
0000E252 6600                       		bne.s	locret_DA8A
0000E254 3358 0008                  		move.w	(a0)+,8(a1)
0000E258 3018                       		move.w	(a0)+,d0
0000E25A 3200                       		move.w	d0,d1
0000E25C 0240 0FFF                  		andi.w	#$FFF,d0
0000E260 3340 000C                  		move.w	d0,$C(a1)
0000E264 E559                       		rol.w	#2,d1
0000E266 0201 0003                  		andi.b	#3,d1
0000E26A 1341 0001                  		move.b	d1,1(a1)
0000E26E 1341 0022                  		move.b	d1,$22(a1)
0000E272 1018                       		move.b	(a0)+,d0
0000E274 6A00                       		bpl.s	loc_DA80
0000E276 0200 007F                  		andi.b	#$7F,d0
0000E27A 1342 0023                  		move.b	d2,$23(a1)
0000E27E                            
0000E27E                            loc_DA80:
0000E27E 1280                       		move.b	d0,0(a1)
0000E280 1358 0028                  		move.b	(a0)+,$28(a1)
0000E284 7000                       		moveq	#0,d0
0000E286                            
0000E286                            locret_DA8A:
0000E286 4E75                       		rts	
0000E288                            ; ---------------------------------------------------------------------------
0000E288                            ; Single object	loading	subroutine
0000E288                            ; ---------------------------------------------------------------------------
0000E288                            
0000E288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E288                            
0000E288                            
0000E288                            SingleObjLoad:
0000E288 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E28C 303C 005F                  		move.w	#$5F,d0
0000E290                            
0000E290                            loc_DA94:
0000E290 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E292 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E294 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E298 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E29C                            
0000E29C                            locret_DAA0:
0000E29C 4E75                       		rts	
0000E29E                            ; End of function SingleObjLoad
0000E29E                            
0000E29E                            
0000E29E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E29E                            
0000E29E                            
0000E29E                            SingleObjLoad2:
0000E29E 2248                       		movea.l	a0,a1
0000E2A0 303C F000                  		move.w	#-$1000,d0
0000E2A4 9048                       		sub.w	a0,d0
0000E2A6 EC48                       		lsr.w	#6,d0
0000E2A8 5340                       		subq.w	#1,d0
0000E2AA 6500                       		bcs.s	locret_DABC
0000E2AC                            
0000E2AC                            loc_DAB0:
0000E2AC 4A11                       		tst.b	(a1)
0000E2AE 6700                       		beq.s	locret_DABC
0000E2B0 43E9 0040                  		lea	$40(a1),a1
0000E2B4 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E2B8                            
0000E2B8                            locret_DABC:
0000E2B8 4E75                       		rts	
0000E2BA                            ; End of function SingleObjLoad2
0000E2BA                            
0000E2BA                            ; ===========================================================================
0000E2BA                            ; ---------------------------------------------------------------------------
0000E2BA                            ; Object 41 - springs
0000E2BA                            ; ---------------------------------------------------------------------------
0000E2BA                            
0000E2BA                            Obj41:					; XREF: Obj_Index
0000E2BA 7000                       		moveq	#0,d0
0000E2BC 1028 0024                  		move.b	$24(a0),d0
0000E2C0 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E2C4 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E2C8 6100 FB38                  		bsr.w	DisplaySprite
0000E2CC 3028 0008                  		move.w	8(a0),d0
0000E2D0 0240 FF80                  		andi.w	#$FF80,d0
0000E2D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E2D8 0441 0080                  		subi.w	#$80,d1
0000E2DC 0241 FF80                  		andi.w	#$FF80,d1
0000E2E0 9041                       		sub.w	d1,d0
0000E2E2 0C40 0280                  		cmpi.w	#$280,d0
0000E2E6 6200 FB56                  		bhi.w	DeleteObject
0000E2EA 4E75                       		rts	
0000E2EC                            ; ===========================================================================
0000E2EC 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E2EE 0000                       		dc.w Obj41_Up-Obj41_Index
0000E2F0 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E2F2 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E2F4 0000                       		dc.w Obj41_LR-Obj41_Index
0000E2F6 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E2F8 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E2FA 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E2FC 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E2FE 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E300                            
0000E300 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E302 F600                       		dc.w -$A00		; power	of yellow spring
0000E304                            ; ===========================================================================
0000E304                            
0000E304                            Obj41_Main:				; XREF: Obj41_Index
0000E304 5428 0024                  		addq.b	#2,$24(a0)
0000E308 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E310 317C 0523 0002             		move.w	#$523,2(a0)
0000E316 0028 0004 0001             		ori.b	#4,1(a0)
0000E31C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E322 117C 0004 0018             		move.b	#4,$18(a0)
0000E328 1028 0028                  		move.b	$28(a0),d0
0000E32C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E330 6700                       		beq.s	loc_DB54	; if not, branch
0000E332 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E338 117C 0001 001C             		move.b	#1,$1C(a0)
0000E33E 117C 0003 001A             		move.b	#3,$1A(a0)
0000E344 317C 0533 0002             		move.w	#$533,2(a0)
0000E34A 117C 0008 0019             		move.b	#8,$19(a0)
0000E350                            
0000E350                            loc_DB54:
0000E350 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E354 6700                       		beq.s	loc_DB66	; if not, branch
0000E356 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E35C 08E8 0001 0022             		bset	#1,$22(a0)
0000E362                            
0000E362                            loc_DB66:
0000E362 0800 0001                  		btst	#1,d0
0000E366 6700                       		beq.s	loc_DB72
0000E368 08E8 0005 0002             		bset	#5,2(a0)
0000E36E                            
0000E36E                            loc_DB72:
0000E36E 0240 000F                  		andi.w	#$F,d0
0000E372 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E378 4E75                       		rts	
0000E37A                            ; ===========================================================================
0000E37A                            
0000E37A                            Obj41_Up:				; XREF: Obj41_Index
0000E37A 323C 001B                  		move.w	#$1B,d1
0000E37E 343C 0008                  		move.w	#8,d2
0000E382 363C 0010                  		move.w	#$10,d3
0000E386 3828 0008                  		move.w	8(a0),d4
0000E38A 6100 0000                  		bsr.w	SolidObject
0000E38E 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E392 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E394 4E75                       		rts	
0000E396                            ; ===========================================================================
0000E396                            
0000E396                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E396 5428 0024                  		addq.b	#2,$24(a0)
0000E39A 5069 000C                  		addq.w	#8,$C(a1)
0000E39E 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E3A4 08E9 0001 0022             		bset	#1,$22(a1)
0000E3AA 08A9 0003 0022             		bclr	#3,$22(a1)
0000E3B0 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E3B6 137C 0002 0024             		move.b	#2,$24(a1)
0000E3BC 08A8 0003 0022             		bclr	#3,$22(a0)
0000E3C2 4228 0025                  		clr.b	$25(a0)
0000E3C6 303C 00CC                  		move.w	#$CC,d0
0000E3CA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E3D0                            
0000E3D0                            Obj41_AniUp:				; XREF: Obj41_Index
0000E3D0 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E3D6 6000 CAEA                  		bra.w	AnimateSprite
0000E3DA                            ; ===========================================================================
0000E3DA                            
0000E3DA                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E3DA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E3E0 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E3E4 4E75                       		rts	
0000E3E6                            ; ===========================================================================
0000E3E6                            
0000E3E6                            Obj41_LR:				; XREF: Obj41_Index
0000E3E6 323C 0013                  		move.w	#$13,d1
0000E3EA 343C 000E                  		move.w	#$E,d2
0000E3EE 363C 000F                  		move.w	#$F,d3
0000E3F2 3828 0008                  		move.w	8(a0),d4
0000E3F6 6100 0000                  		bsr.w	SolidObject
0000E3FA 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E400 6600                       		bne.s	loc_DC0C
0000E402 117C 0008 0024             		move.b	#8,$24(a0)
0000E408                            
0000E408                            loc_DC0C:
0000E408 0828 0005 0022             		btst	#5,$22(a0)
0000E40E 6600                       		bne.s	Obj41_BounceLR
0000E410 4E75                       		rts	
0000E412                            ; ===========================================================================
0000E412                            
0000E412                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E412 5428 0024                  		addq.b	#2,$24(a0)
0000E416 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E41C 5069 0008                  		addq.w	#8,8(a1)
0000E420 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E426 6600                       		bne.s	loc_DC36	; if yes, branch
0000E428 0469 0010 0008             		subi.w	#$10,8(a1)
0000E42E 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E432                            
0000E432                            loc_DC36:
0000E432 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E438 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E43E 0869 0000 0022             		bchg	#0,$22(a1)
0000E444 0829 0002 0022             		btst	#2,$22(a1)
0000E44A 6600                       		bne.s	loc_DC56
0000E44C 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E452                            
0000E452                            loc_DC56:
0000E452 08A8 0005 0022             		bclr	#5,$22(a0)
0000E458 08A9 0005 0022             		bclr	#5,$22(a1)
0000E45E 303C 00CC                  		move.w	#$CC,d0
0000E462 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E468                            
0000E468                            Obj41_AniLR:				; XREF: Obj41_Index
0000E468 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E46E 6000 CA52                  		bra.w	AnimateSprite
0000E472                            ; ===========================================================================
0000E472                            
0000E472                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E472 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E478 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E47C 4E75                       		rts	
0000E47E                            ; ===========================================================================
0000E47E                            
0000E47E                            Obj41_Dwn:				; XREF: Obj41_Index
0000E47E 323C 001B                  		move.w	#$1B,d1
0000E482 343C 0008                  		move.w	#8,d2
0000E486 363C 0010                  		move.w	#$10,d3
0000E48A 3828 0008                  		move.w	8(a0),d4
0000E48E 6100 0000                  		bsr.w	SolidObject
0000E492 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E498 6600                       		bne.s	loc_DCA4
0000E49A 117C 000E 0024             		move.b	#$E,$24(a0)
0000E4A0                            
0000E4A0                            loc_DCA4:
0000E4A0 4A28 0025                  		tst.b	$25(a0)
0000E4A4 6600                       		bne.s	locret_DCAE
0000E4A6 4A44                       		tst.w	d4
0000E4A8 6B00                       		bmi.s	Obj41_BounceDwn
0000E4AA                            
0000E4AA                            locret_DCAE:
0000E4AA 4E75                       		rts	
0000E4AC                            ; ===========================================================================
0000E4AC                            
0000E4AC                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E4AC 5428 0024                  		addq.b	#2,$24(a0)
0000E4B0 5169 000C                  		subq.w	#8,$C(a1)
0000E4B4 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E4BA 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E4BE 08E9 0001 0022             		bset	#1,$22(a1)
0000E4C4 08A9 0003 0022             		bclr	#3,$22(a1)
0000E4CA 137C 0002 0024             		move.b	#2,$24(a1)
0000E4D0 08A8 0003 0022             		bclr	#3,$22(a0)
0000E4D6 4228 0025                  		clr.b	$25(a0)
0000E4DA 303C 00CC                  		move.w	#$CC,d0
0000E4DE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E4E4                            
0000E4E4                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E4E4 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E4EA 6000 C9D6                  		bra.w	AnimateSprite
0000E4EE                            ; ===========================================================================
0000E4EE                            
0000E4EE                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E4EE 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E4F4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E4F8 4E75                       		rts	
0000E4FA                            ; ===========================================================================
0000E4FA                            Ani_obj41:
0000E4FA                            	include "_anim\obj41.asm"
0000E4FA                            ; ---------------------------------------------------------------------------
0000E4FA                            ; Animation script - springs
0000E4FA                            ; ---------------------------------------------------------------------------
0000E4FA 0000                       		dc.w byte_DD02-Ani_obj41
0000E4FC 0000                       		dc.w byte_DD0E-Ani_obj41
0000E4FE 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E50A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E516                            		even
0000E516                            		even
0000E516                            
0000E516                            ; ---------------------------------------------------------------------------
0000E516                            ; Sprite mappings - springs
0000E516                            ; ---------------------------------------------------------------------------
0000E516                            Map_obj41:
0000E516                            	include "_maps\obj41.asm"
0000E516                            ; ---------------------------------------------------------------------------
0000E516                            ; Sprite mappings - springs
0000E516                            ; ---------------------------------------------------------------------------
0000E516 0000                       		dc.w byte_DD26-Map_obj41
0000E518 0000                       		dc.w byte_DD31-Map_obj41
0000E51A 0000                       		dc.w byte_DD37-Map_obj41
0000E51C 0000                       		dc.w byte_DD47-Map_obj41
0000E51E 0000                       		dc.w byte_DD4D-Map_obj41
0000E520 0000                       		dc.w byte_DD53-Map_obj41
0000E522 02                         byte_DD26:	dc.b 2
0000E523 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E528 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E52D 01                         byte_DD31:	dc.b 1
0000E52E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E533 03                         byte_DD37:	dc.b 3
0000E534 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E539 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E53E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E543 01                         byte_DD47:	dc.b 1
0000E544 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E549 01                         byte_DD4D:	dc.b 1
0000E54A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E54F 04                         byte_DD53:	dc.b 4
0000E550 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E555 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E55A F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E55F 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E564                            		even
0000E564                            		even
0000E564                            
0000E564                            ; ===========================================================================
0000E564                            ; ---------------------------------------------------------------------------
0000E564                            ; Object 42 - Newtron enemy (GHZ)
0000E564                            ; ---------------------------------------------------------------------------
0000E564                            
0000E564                            Obj42:					; XREF: Obj_Index
0000E564 7000                       		moveq	#0,d0
0000E566 1028 0024                  		move.b	$24(a0),d0
0000E56A 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E56E 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E572                            ; ===========================================================================
0000E572 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E574 0000                       		dc.w Obj42_Action-Obj42_Index
0000E576 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E578                            ; ===========================================================================
0000E578                            
0000E578                            Obj42_Main:				; XREF: Obj42_Index
0000E578 5428 0024                  		addq.b	#2,$24(a0)
0000E57C 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E584 317C 049B 0002             		move.w	#$49B,2(a0)
0000E58A 117C 0004 0001             		move.b	#4,1(a0)
0000E590 117C 0004 0018             		move.b	#4,$18(a0)
0000E596 117C 0014 0019             		move.b	#$14,$19(a0)
0000E59C 117C 0010 0016             		move.b	#$10,$16(a0)
0000E5A2 117C 0008 0017             		move.b	#8,$17(a0)
0000E5A8                            
0000E5A8                            Obj42_Action:				; XREF: Obj42_Index
0000E5A8 7000                       		moveq	#0,d0
0000E5AA 1028 0025                  		move.b	$25(a0),d0
0000E5AE 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E5B2 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E5B6 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E5BC 6100 C904                  		bsr.w	AnimateSprite
0000E5C0 6000 0000                  		bra.w	MarkObjGone
0000E5C4                            ; ===========================================================================
0000E5C4 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E5C6 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E5C8 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E5CA 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E5CC 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E5CE                            ; ===========================================================================
0000E5CE                            
0000E5CE                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E5CE 08E8 0000 0022             		bset	#0,$22(a0)
0000E5D4 3038 D008                  		move.w	($FFFFD008).w,d0
0000E5D8 9068 0008                  		sub.w	8(a0),d0
0000E5DC 6400                       		bcc.s	loc_DDEA
0000E5DE 4440                       		neg.w	d0
0000E5E0 08A8 0000 0022             		bclr	#0,$22(a0)
0000E5E6                            
0000E5E6                            loc_DDEA:
0000E5E6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E5EA 6400                       		bcc.s	locret_DE12	; if not, branch
0000E5EC 5428 0025                  		addq.b	#2,$25(a0)
0000E5F0 117C 0001 001C             		move.b	#1,$1C(a0)
0000E5F6 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E5FA 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E5FC 317C 249B 0002             		move.w	#$249B,2(a0)
0000E602 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E608 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E60E                            
0000E60E                            locret_DE12:
0000E60E 4E75                       		rts	
0000E610                            ; ===========================================================================
0000E610                            
0000E610                            Obj42_Type00:				; XREF: Obj42_Index2
0000E610 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E616 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E618 08E8 0000 0022             		bset	#0,$22(a0)
0000E61E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E622 9068 0008                  		sub.w	8(a0),d0
0000E626 6400                       		bcc.s	locret_DE32
0000E628 08A8 0000 0022             		bclr	#0,$22(a0)
0000E62E                            
0000E62E                            locret_DE32:
0000E62E 4E75                       		rts	
0000E630                            ; ===========================================================================
0000E630                            
0000E630                            Obj42_Fall:				; XREF: Obj42_Type00
0000E630 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E636 6600                       		bne.s	loc_DE42
0000E638 117C 000C 0020             		move.b	#$C,$20(a0)
0000E63E                            
0000E63E                            loc_DE42:
0000E63E 6100 F770                  		bsr.w	ObjectFall
0000E642 6100 0000                  		bsr.w	ObjHitFloor
0000E646 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E648 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E64A D368 000C                  		add.w	d1,$C(a0)
0000E64E 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E654 5428 0025                  		addq.b	#2,$25(a0)
0000E658 117C 0002 001C             		move.b	#2,$1C(a0)
0000E65E 0828 0005 0002             		btst	#5,2(a0)
0000E664 6700                       		beq.s	Obj42_Move
0000E666 5228 001C                  		addq.b	#1,$1C(a0)
0000E66A                            
0000E66A                            Obj42_Move:
0000E66A 117C 000D 0020             		move.b	#$D,$20(a0)
0000E670 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E676 0828 0000 0022             		btst	#0,$22(a0)
0000E67C 6600                       		bne.s	locret_DE86
0000E67E 4468 0010                  		neg.w	$10(a0)
0000E682                            
0000E682                            locret_DE86:
0000E682 4E75                       		rts	
0000E684                            ; ===========================================================================
0000E684                            
0000E684                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E684 6100 F756                  		bsr.w	SpeedToPos
0000E688 6100 0000                  		bsr.w	ObjHitFloor
0000E68C 0C41 FFF8                  		cmpi.w	#-8,d1
0000E690 6D00                       		blt.s	loc_DEA2
0000E692 0C41 000C                  		cmpi.w	#$C,d1
0000E696 6C00                       		bge.s	loc_DEA2
0000E698 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E69C 4E75                       		rts	
0000E69E                            ; ===========================================================================
0000E69E                            
0000E69E                            loc_DEA2:
0000E69E 5428 0025                  		addq.b	#2,$25(a0)
0000E6A2 4E75                       		rts	
0000E6A4                            ; ===========================================================================
0000E6A4                            
0000E6A4                            Obj42_Speed:				; XREF: Obj42_Index2
0000E6A4 6100 F736                  		bsr.w	SpeedToPos
0000E6A8 4E75                       		rts	
0000E6AA                            ; ===========================================================================
0000E6AA                            
0000E6AA                            Obj42_Type01:				; XREF: Obj42_Index2
0000E6AA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E6B0 6600                       		bne.s	Obj42_FireMissile
0000E6B2 117C 000C 0020             		move.b	#$C,$20(a0)
0000E6B8                            
0000E6B8                            Obj42_FireMissile:
0000E6B8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E6BE 6600                       		bne.s	locret_DF14
0000E6C0 4A28 0032                  		tst.b	$32(a0)
0000E6C4 6600                       		bne.s	locret_DF14
0000E6C6 117C 0001 0032             		move.b	#1,$32(a0)
0000E6CC 6100 FBBA                  		bsr.w	SingleObjLoad
0000E6D0 6600                       		bne.s	locret_DF14
0000E6D2 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E6D6 3368 0008 0008             		move.w	8(a0),8(a1)
0000E6DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E6E2 5169 000C                  		subq.w	#8,$C(a1)
0000E6E6 337C 0200 0010             		move.w	#$200,$10(a1)
0000E6EC 303C 0014                  		move.w	#$14,d0
0000E6F0 0828 0000 0022             		btst	#0,$22(a0)
0000E6F6 6600                       		bne.s	loc_DF04
0000E6F8 4440                       		neg.w	d0
0000E6FA 4469 0010                  		neg.w	$10(a1)
0000E6FE                            
0000E6FE                            loc_DF04:
0000E6FE D169 0008                  		add.w	d0,8(a1)
0000E702 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E708 137C 0001 0028             		move.b	#1,$28(a1)
0000E70E                            
0000E70E                            locret_DF14:
0000E70E 4E75                       		rts	
0000E710                            ; ===========================================================================
0000E710                            
0000E710                            Obj42_Delete:				; XREF: Obj42_Index
0000E710 6000 F72C                  		bra.w	DeleteObject
0000E714                            ; ===========================================================================
0000E714                            Ani_obj42:
0000E714                            	include "_anim\obj42.asm"
0000E714                            ; ---------------------------------------------------------------------------
0000E714                            ; Animation script - Newtron enemy
0000E714                            ; ---------------------------------------------------------------------------
0000E714 0000                       		dc.w byte_DF24-Ani_obj42
0000E716 0000                       		dc.w byte_DF28-Ani_obj42
0000E718 0000                       		dc.w byte_DF30-Ani_obj42
0000E71A 0000                       		dc.w byte_DF34-Ani_obj42
0000E71C 0000                       		dc.w byte_DF38-Ani_obj42
0000E71E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E722 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E72A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E72E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E732 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E73C                            		even
0000E73C                            		even
0000E73C                            
0000E73C                            ; ---------------------------------------------------------------------------
0000E73C                            ; Sprite mappings - Newtron enemy (GHZ)
0000E73C                            ; ---------------------------------------------------------------------------
0000E73C                            Map_obj42:
0000E73C                            	include "_maps\obj42.asm"
0000E73C                            ; ---------------------------------------------------------------------------
0000E73C                            ; Sprite mappings - Newtron enemy (GHZ)
0000E73C                            ; ---------------------------------------------------------------------------
0000E73C 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E740 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E744 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E748 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E74C 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E750 0000                       		dc.w byte_DFF8-Map_obj42
0000E752 03                         byte_DF58:	dc.b 3
0000E753 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E758 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E75D FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E762 03                         byte_DF68:	dc.b 3
0000E763 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E768 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E76D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E772 03                         byte_DF78:	dc.b 3
0000E773 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E778 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E77D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E782 04                         byte_DF88:	dc.b 4
0000E783 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E788 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E78D FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E792 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E797 03                         byte_DF9D:	dc.b 3
0000E798 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E79D FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E7A2 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E7A7 02                         byte_DFAD:	dc.b 2
0000E7A8 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7AD F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7B2 03                         byte_DFB8:	dc.b 3
0000E7B3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7B8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7BD FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E7C2 03                         byte_DFC8:	dc.b 3
0000E7C3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7C8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7CD FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E7D2 03                         byte_DFD8:	dc.b 3
0000E7D3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7D8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7DD FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E7E2 03                         byte_DFE8:	dc.b 3
0000E7E3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7E8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7ED FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E7F2 00                         byte_DFF8:	dc.b 0
0000E7F4 00                         		even
0000E7F4 00                         		even
0000E7F4                            
0000E7F4                            ; ===========================================================================
0000E7F4                            ; ---------------------------------------------------------------------------
0000E7F4                            ; Object 43 - Roller enemy (SYZ)
0000E7F4                            ; ---------------------------------------------------------------------------
0000E7F4                            
0000E7F4                            Obj43:					; XREF: Obj_Index
0000E7F4 7000                       		moveq	#0,d0
0000E7F6 1028 0024                  		move.b	$24(a0),d0
0000E7FA 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E7FE 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E802                            ; ===========================================================================
0000E802 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E804 0000                       		dc.w Obj43_Action-Obj43_Index
0000E806                            ; ===========================================================================
0000E806                            
0000E806                            Obj43_Main:				; XREF: Obj43_Index
0000E806 117C 000E 0016             		move.b	#$E,$16(a0)
0000E80C 117C 0008 0017             		move.b	#8,$17(a0)
0000E812 6100 F59C                  		bsr.w	ObjectFall
0000E816 6100 0000                  		bsr.w	ObjHitFloor
0000E81A 4A41                       		tst.w	d1
0000E81C 6A00                       		bpl.s	locret_E052
0000E81E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E822 317C 0000 0012             		move.w	#0,$12(a0)
0000E828 5428 0024                  		addq.b	#2,$24(a0)
0000E82C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E834 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E83A 117C 0004 0001             		move.b	#4,1(a0)
0000E840 117C 0004 0018             		move.b	#4,$18(a0)
0000E846 117C 0010 0019             		move.b	#$10,$19(a0)
0000E84C                            
0000E84C                            locret_E052:
0000E84C 4E75                       		rts	
0000E84E                            ; ===========================================================================
0000E84E                            
0000E84E                            Obj43_Action:				; XREF: Obj43_Index
0000E84E 7000                       		moveq	#0,d0
0000E850 1028 0025                  		move.b	$25(a0),d0
0000E854 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E858 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E85C 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E862 6100 C65E                  		bsr.w	AnimateSprite
0000E866 3028 0008                  		move.w	8(a0),d0
0000E86A 0240 FF80                  		andi.w	#$FF80,d0
0000E86E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E872 0441 0080                  		subi.w	#$80,d1
0000E876 0241 FF80                  		andi.w	#$FF80,d1
0000E87A 9041                       		sub.w	d1,d0
0000E87C 0C40 0280                  		cmpi.w	#$280,d0
0000E880 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E884 6000 F57C                  		bra.w	DisplaySprite
0000E888                            ; ===========================================================================
0000E888                            
0000E888                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E888 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E88C 7000                       		moveq	#0,d0
0000E88E 1028 0023                  		move.b	$23(a0),d0
0000E892 6700                       		beq.s	Obj43_Delete
0000E894 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E89A                            
0000E89A                            Obj43_Delete:
0000E89A 6000 F5A2                  		bra.w	DeleteObject
0000E89E                            ; ===========================================================================
0000E89E 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E8A0 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E8A2 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E8A4 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E8A6                            ; ===========================================================================
0000E8A6                            
0000E8A6                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E8A6 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8AA 0440 0100                  		subi.w	#$100,d0
0000E8AE 6500                       		bcs.s	loc_E0D2
0000E8B0 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E8B4 6500                       		bcs.s	loc_E0D2
0000E8B6 5828 0025                  		addq.b	#4,$25(a0)
0000E8BA 117C 0002 001C             		move.b	#2,$1C(a0)
0000E8C0 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E8C6 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E8CC                            
0000E8CC                            loc_E0D2:
0000E8CC 588F                       		addq.l	#4,sp
0000E8CE 4E75                       		rts	
0000E8D0                            ; ===========================================================================
0000E8D0                            
0000E8D0                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E8D0 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E8D6 6700                       		beq.s	loc_E0F8
0000E8D8 5368 0030                  		subq.w	#1,$30(a0)
0000E8DC 6A00                       		bpl.s	locret_E0F6
0000E8DE 117C 0001 001C             		move.b	#1,$1C(a0)
0000E8E4 317C 0700 0010             		move.w	#$700,$10(a0)
0000E8EA 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E8F0                            
0000E8F0                            locret_E0F6:
0000E8F0 4E75                       		rts	
0000E8F2                            ; ===========================================================================
0000E8F2                            
0000E8F2                            loc_E0F8:
0000E8F2 5428 0025                  		addq.b	#2,$25(a0)
0000E8F6 4E75                       		rts	
0000E8F8                            ; ===========================================================================
0000E8F8                            
0000E8F8                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E8F8 6100 0000                  		bsr.w	Obj43_Stop
0000E8FC 6100 F4DE                  		bsr.w	SpeedToPos
0000E900 6100 0000                  		bsr.w	ObjHitFloor
0000E904 0C41 FFF8                  		cmpi.w	#-8,d1
0000E908 6D00                       		blt.s	Obj43_Jump
0000E90A 0C41 000C                  		cmpi.w	#$C,d1
0000E90E 6C00                       		bge.s	Obj43_Jump
0000E910 D368 000C                  		add.w	d1,$C(a0)
0000E914 4E75                       		rts	
0000E916                            ; ===========================================================================
0000E916                            
0000E916                            Obj43_Jump:
0000E916 5428 0025                  		addq.b	#2,$25(a0)
0000E91A 08E8 0000 0032             		bset	#0,$32(a0)
0000E920 6700                       		beq.s	locret_E12E
0000E922 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E928                            
0000E928                            locret_E12E:
0000E928 4E75                       		rts	
0000E92A                            ; ===========================================================================
0000E92A                            
0000E92A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E92A 6100 F484                  		bsr.w	ObjectFall
0000E92E 4A68 0012                  		tst.w	$12(a0)
0000E932 6B00                       		bmi.s	locret_E150
0000E934 6100 0000                  		bsr.w	ObjHitFloor
0000E938 4A41                       		tst.w	d1
0000E93A 6A00                       		bpl.s	locret_E150
0000E93C D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E940 5528 0025                  		subq.b	#2,$25(a0)
0000E944 317C 0000 0012             		move.w	#0,$12(a0)
0000E94A                            
0000E94A                            locret_E150:
0000E94A 4E75                       		rts	
0000E94C                            
0000E94C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E94C                            
0000E94C                            
0000E94C                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E94C 4A28 0032                  		tst.b	$32(a0)
0000E950 6B00                       		bmi.s	locret_E188
0000E952 3038 D008                  		move.w	($FFFFD008).w,d0
0000E956 0440 0030                  		subi.w	#$30,d0
0000E95A 9068 0008                  		sub.w	8(a0),d0
0000E95E 6400                       		bcc.s	locret_E188
0000E960 117C 0000 001C             		move.b	#0,$1C(a0)
0000E966 117C 000E 0020             		move.b	#$E,$20(a0)
0000E96C 4268 0010                  		clr.w	$10(a0)
0000E970 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E976 117C 0002 0025             		move.b	#2,$25(a0)
0000E97C 08E8 0007 0032             		bset	#7,$32(a0)
0000E982                            
0000E982                            locret_E188:
0000E982 4E75                       		rts	
0000E984                            ; End of function Obj43_Stop
0000E984                            
0000E984                            ; ===========================================================================
0000E984                            Ani_obj43:
0000E984                            	include "_anim\obj43.asm"
0000E984                            ; ---------------------------------------------------------------------------
0000E984                            ; Animation script - Roller enemy
0000E984                            ; ---------------------------------------------------------------------------
0000E984 0000                       		dc.w byte_E190-Ani_obj43
0000E986 0000                       		dc.w byte_E196-Ani_obj43
0000E988 0000                       		dc.w byte_E19C-Ani_obj43
0000E98A 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E990 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E996 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E99C 00                         		even
0000E99C 00                         		even
0000E99C                            
0000E99C                            ; ---------------------------------------------------------------------------
0000E99C                            ; Sprite mappings - Roller enemy (SYZ)
0000E99C                            ; ---------------------------------------------------------------------------
0000E99C                            Map_obj43:
0000E99C                            	include "_maps\obj43.asm"
0000E99C                            Map_61da:
0000E99C 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E99E 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E9A0 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E9A2 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E9A4 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E9A6 02                         Map_61da_A: 	dc.b $2
0000E9A7 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E9AC F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E9B1 02                         Map_61da_15: 	dc.b $2
0000E9B2 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E9B7 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E9BC 01                         Map_61da_20: 	dc.b $1
0000E9BD F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E9C2 01                         Map_61da_26: 	dc.b $1
0000E9C3 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E9C8 01                         Map_61da_2C: 	dc.b $1
0000E9C9 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E9CE                            	even
0000E9CE                            	even
0000E9CE                            
0000E9CE                            ; ===========================================================================
0000E9CE                            ; ---------------------------------------------------------------------------
0000E9CE                            ; Object 44 - walls (GHZ)
0000E9CE                            ; ---------------------------------------------------------------------------
0000E9CE                            
0000E9CE                            Obj44:					; XREF: Obj_Index
0000E9CE 7000                       		moveq	#0,d0
0000E9D0 1028 0024                  		move.b	$24(a0),d0
0000E9D4 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E9D8 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E9DC                            ; ===========================================================================
0000E9DC 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E9DE 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E9E0 0000                       		dc.w Obj44_Display-Obj44_Index
0000E9E2                            ; ===========================================================================
0000E9E2                            
0000E9E2                            Obj44_Main:				; XREF: Obj44_Index
0000E9E2 5428 0024                  		addq.b	#2,$24(a0)
0000E9E6 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E9EE 317C 434C 0002             		move.w	#$434C,2(a0)
0000E9F4 0028 0004 0001             		ori.b	#4,1(a0)
0000E9FA 117C 0008 0019             		move.b	#8,$19(a0)
0000EA00 117C 0006 0018             		move.b	#6,$18(a0)
0000EA06 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EA0C 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EA12 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EA14 5428 0024                  		addq.b	#2,$24(a0)
0000EA18 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EA1A                            ; ===========================================================================
0000EA1A                            
0000EA1A                            Obj44_Solid:				; XREF: Obj44_Index
0000EA1A 323C 0013                  		move.w	#$13,d1
0000EA1E 343C 0028                  		move.w	#$28,d2
0000EA22 6100 A6FA                  		bsr.w	Obj44_SolidWall
0000EA26                            
0000EA26                            Obj44_Display:				; XREF: Obj44_Index
0000EA26 6100 F3DA                  		bsr.w	DisplaySprite
0000EA2A 3028 0008                  		move.w	8(a0),d0
0000EA2E 0240 FF80                  		andi.w	#$FF80,d0
0000EA32 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA36 0441 0080                  		subi.w	#$80,d1
0000EA3A 0241 FF80                  		andi.w	#$FF80,d1
0000EA3E 9041                       		sub.w	d1,d0
0000EA40 0C40 0280                  		cmpi.w	#$280,d0
0000EA44 6200 F3F8                  		bhi.w	DeleteObject
0000EA48 4E75                       		rts	
0000EA4A                            ; ===========================================================================
0000EA4A                            ; ---------------------------------------------------------------------------
0000EA4A                            ; Sprite mappings - walls (GHZ)
0000EA4A                            ; ---------------------------------------------------------------------------
0000EA4A                            Map_obj44:
0000EA4A                            	include "_maps\obj44.asm"
0000EA4A                            ; ---------------------------------------------------------------------------
0000EA4A                            ; Sprite mappings - walls (GHZ)
0000EA4A                            ; ---------------------------------------------------------------------------
0000EA4A 0000                       		dc.w byte_E256-Map_obj44
0000EA4C 0000                       		dc.w byte_E26B-Map_obj44
0000EA4E 0000                       		dc.w byte_E280-Map_obj44
0000EA50 04                         byte_E256:	dc.b 4
0000EA51 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EA56 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EA5B 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EA60 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EA65 04                         byte_E26B:	dc.b 4
0000EA66 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EA6B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EA70 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EA75 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EA7A 04                         byte_E280:	dc.b 4
0000EA7B E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EA80 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EA85 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EA8A 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EA90 00                         		even
0000EA90 00                         		even
0000EA90                            
0000EA90                            ; ===========================================================================
0000EA90                            ; ---------------------------------------------------------------------------
0000EA90                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EA90                            ; ---------------------------------------------------------------------------
0000EA90                            
0000EA90                            Obj13:					; XREF: Obj_Index
0000EA90 7000                       		moveq	#0,d0
0000EA92 1028 0024                  		move.b	$24(a0),d0
0000EA96 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EA9A 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EA9E 6000 0000                  		bra.w	Obj14_ChkDel
0000EAA2                            ; ===========================================================================
0000EAA2 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EAA4 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EAA6                            ; ---------------------------------------------------------------------------
0000EAA6                            ;
0000EAA6                            ; Lava ball production rates
0000EAA6                            ;
0000EAA6 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EAAC                            ; ===========================================================================
0000EAAC                            
0000EAAC                            Obj13_Main:				; XREF: Obj13_Index
0000EAAC 5428 0024                  		addq.b	#2,$24(a0)
0000EAB0 1028 0028                  		move.b	$28(a0),d0
0000EAB4 E848                       		lsr.w	#4,d0
0000EAB6 0240 000F                  		andi.w	#$F,d0
0000EABA 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EAC0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EAC6 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EACC                            
0000EACC                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EACC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EAD0 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EAD2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EAD8 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EADC 6600                       		bne.s	locret_E302
0000EADE 6100 F7A8                  		bsr.w	SingleObjLoad
0000EAE2 6600                       		bne.s	locret_E302
0000EAE4 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EAE8 3368 0008 0008             		move.w	8(a0),8(a1)
0000EAEE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EAF4 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EAFA                            
0000EAFA                            locret_E302:
0000EAFA 4E75                       		rts	
0000EAFC                            ; ===========================================================================
0000EAFC                            ; ---------------------------------------------------------------------------
0000EAFC                            ; Object 14 - lava balls (MZ, SLZ)
0000EAFC                            ; ---------------------------------------------------------------------------
0000EAFC                            
0000EAFC                            Obj14:					; XREF: Obj_Index
0000EAFC 7000                       		moveq	#0,d0
0000EAFE 1028 0024                  		move.b	$24(a0),d0
0000EB02 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EB06 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EB0A 6000 F2F6                  		bra.w	DisplaySprite
0000EB0E                            ; ===========================================================================
0000EB0E 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EB10 0000                       		dc.w Obj14_Action-Obj14_Index
0000EB12 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EB14                            
0000EB14 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EB1E 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EB26                            ; ===========================================================================
0000EB26                            
0000EB26                            Obj14_Main:				; XREF: Obj14_Index
0000EB26 5428 0024                  		addq.b	#2,$24(a0)
0000EB2A 117C 0008 0016             		move.b	#8,$16(a0)
0000EB30 117C 0008 0017             		move.b	#8,$17(a0)
0000EB36 217C 0000 BAC0 0004        		move.l	#Map_obj14,4(a0)
0000EB3E 317C 0345 0002             		move.w	#$345,2(a0)
0000EB44 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EB4A 6600                       		bne.s	loc_E35A
0000EB4C 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EB52                            
0000EB52                            loc_E35A:
0000EB52 117C 0004 0001             		move.b	#4,1(a0)
0000EB58 117C 0003 0018             		move.b	#3,$18(a0)
0000EB5E 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EB64 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EB6A 4A28 0029                  		tst.b	$29(a0)
0000EB6E 6700                       		beq.s	Obj14_SetSpeed
0000EB70 5428 0018                  		addq.b	#2,$18(a0)
0000EB74                            
0000EB74                            Obj14_SetSpeed:
0000EB74 7000                       		moveq	#0,d0
0000EB76 1028 0028                  		move.b	$28(a0),d0
0000EB7A D040                       		add.w	d0,d0
0000EB7C 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EB82 117C 0008 0019             		move.b	#8,$19(a0)
0000EB88 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EB8E 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EB90 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB96 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EB9C 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EBA2 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EBA8                            
0000EBA8                            Obj14_PlaySnd:
0000EBA8 303C 00AE                  		move.w	#$AE,d0
0000EBAC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EBB2                            
0000EBB2                            Obj14_Action:				; XREF: Obj14_Index
0000EBB2 7000                       		moveq	#0,d0
0000EBB4 1028 0028                  		move.b	$28(a0),d0
0000EBB8 D040                       		add.w	d0,d0
0000EBBA 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EBBE 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EBC2 6100 F218                  		bsr.w	SpeedToPos
0000EBC6 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EBCC 6100 C2F4                  		bsr.w	AnimateSprite
0000EBD0                            
0000EBD0                            Obj14_ChkDel:				; XREF: Obj13
0000EBD0 3028 0008                  		move.w	8(a0),d0
0000EBD4 0240 FF80                  		andi.w	#$FF80,d0
0000EBD8 3238 F700                  		move.w	($FFFFF700).w,d1
0000EBDC 0441 0080                  		subi.w	#$80,d1
0000EBE0 0241 FF80                  		andi.w	#$FF80,d1
0000EBE4 9041                       		sub.w	d1,d0
0000EBE6 0C40 0280                  		cmpi.w	#$280,d0
0000EBEA 6200 F252                  		bhi.w	DeleteObject
0000EBEE 4E75                       		rts	
0000EBF0                            ; ===========================================================================
0000EBF0 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EBF4 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EBF8 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EBFC 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EC00 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EC02                            ; ===========================================================================
0000EC02                            ; lavaball types 00-03 fly up and fall back down
0000EC02                            
0000EC02                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EC02 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EC08 3028 0030                  		move.w	$30(a0),d0
0000EC0C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EC10 6400                       		bcc.s	loc_E41E	; if not, branch
0000EC12 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EC16                            
0000EC16                            loc_E41E:
0000EC16 08A8 0001 0022             		bclr	#1,$22(a0)
0000EC1C 4A68 0012                  		tst.w	$12(a0)
0000EC20 6A00                       		bpl.s	locret_E430
0000EC22 08E8 0001 0022             		bset	#1,$22(a0)
0000EC28                            
0000EC28                            locret_E430:
0000EC28 4E75                       		rts	
0000EC2A                            ; ===========================================================================
0000EC2A                            ; lavaball type	04 flies up until it hits the ceiling
0000EC2A                            
0000EC2A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EC2A 08E8 0001 0022             		bset	#1,$22(a0)
0000EC30 6100 0000                  		bsr.w	ObjHitCeiling
0000EC34 4A41                       		tst.w	d1
0000EC36 6A00                       		bpl.s	locret_E452
0000EC38 117C 0008 0028             		move.b	#8,$28(a0)
0000EC3E 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC44 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EC4A                            
0000EC4A                            locret_E452:
0000EC4A 4E75                       		rts	
0000EC4C                            ; ===========================================================================
0000EC4C                            ; lavaball type	05 falls down until it hits the	floor
0000EC4C                            
0000EC4C                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EC4C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EC52 6100 0000                  		bsr.w	ObjHitFloor
0000EC56 4A41                       		tst.w	d1
0000EC58 6A00                       		bpl.s	locret_E474
0000EC5A 117C 0008 0028             		move.b	#8,$28(a0)
0000EC60 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC66 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EC6C                            
0000EC6C                            locret_E474:
0000EC6C 4E75                       		rts	
0000EC6E                            ; ===========================================================================
0000EC6E                            ; lavaball types 06-07 move sideways
0000EC6E                            
0000EC6E                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EC6E 08E8 0000 0022             		bset	#0,$22(a0)
0000EC74 76F8                       		moveq	#-8,d3
0000EC76 6100 0000                  		bsr.w	ObjHitWallLeft
0000EC7A 4A41                       		tst.w	d1
0000EC7C 6A00                       		bpl.s	locret_E498
0000EC7E 117C 0008 0028             		move.b	#8,$28(a0)
0000EC84 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC8A 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC90                            
0000EC90                            locret_E498:
0000EC90 4E75                       		rts	
0000EC92                            ; ===========================================================================
0000EC92                            
0000EC92                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EC92 08A8 0000 0022             		bclr	#0,$22(a0)
0000EC98 7608                       		moveq	#8,d3
0000EC9A 6100 0000                  		bsr.w	ObjHitWallRight
0000EC9E 4A41                       		tst.w	d1
0000ECA0 6A00                       		bpl.s	locret_E4BC
0000ECA2 117C 0008 0028             		move.b	#8,$28(a0)
0000ECA8 117C 0003 001C             		move.b	#3,$1C(a0)
0000ECAE 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ECB4                            
0000ECB4                            locret_E4BC:
0000ECB4 4E75                       		rts	
0000ECB6                            ; ===========================================================================
0000ECB6                            
0000ECB6                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000ECB6 4E75                       		rts	
0000ECB8                            ; ===========================================================================
0000ECB8                            
0000ECB8                            Obj14_Delete:				; XREF: Obj14_Index
0000ECB8 6000 F184                  		bra.w	DeleteObject
0000ECBC                            ; ===========================================================================
0000ECBC                            Ani_obj14:
0000ECBC                            	include "_anim\obj14.asm"
0000ECBC                            ; ---------------------------------------------------------------------------
0000ECBC                            ; Animation script - lava balls
0000ECBC                            ; ---------------------------------------------------------------------------
0000ECBC 0000                       		dc.w byte_E4CC-Ani_obj14
0000ECBE 0000                       		dc.w byte_E4D2-Ani_obj14
0000ECC0 0000                       		dc.w byte_E4D6-Ani_obj14
0000ECC2 0000                       		dc.w byte_E4DC-Ani_obj14
0000ECC4 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000ECCA 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000ECCE 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000ECD4 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000ECD8                            		even
0000ECD8                            		even
0000ECD8                            
0000ECD8                            ; ===========================================================================
0000ECD8                            ; ---------------------------------------------------------------------------
0000ECD8                            ; Object 6D - flame thrower (SBZ)
0000ECD8                            ; ---------------------------------------------------------------------------
0000ECD8                            
0000ECD8                            Obj6D:					; XREF: Obj_Index
0000ECD8 7000                       		moveq	#0,d0
0000ECDA 1028 0024                  		move.b	$24(a0),d0
0000ECDE 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000ECE2 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000ECE6                            ; ===========================================================================
0000ECE6 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000ECE8 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000ECEA                            ; ===========================================================================
0000ECEA                            
0000ECEA                            Obj6D_Main:				; XREF: Obj6D_Index
0000ECEA 5428 0024                  		addq.b	#2,$24(a0)
0000ECEE 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000ECF6 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000ECFC 0028 0004 0001             		ori.b	#4,1(a0)
0000ED02 117C 0001 0018             		move.b	#1,$18(a0)
0000ED08 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED0E 117C 000C 0019             		move.b	#$C,$19(a0)
0000ED14 1028 0028                  		move.b	$28(a0),d0
0000ED18 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000ED1C D040                       		add.w	d0,d0		; multiply by 2
0000ED1E 3140 0030                  		move.w	d0,$30(a0)
0000ED22 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000ED26 1028 0028                  		move.b	$28(a0),d0
0000ED2A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000ED2E EB48                       		lsl.w	#5,d0		; multiply by $20
0000ED30 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000ED34 117C 000A 0036             		move.b	#$A,$36(a0)
0000ED3A 0828 0001 0022             		btst	#1,$22(a0)
0000ED40 6700                       		beq.s	Obj6D_Action
0000ED42 117C 0002 001C             		move.b	#2,$1C(a0)
0000ED48 117C 0015 0036             		move.b	#$15,$36(a0)
0000ED4E                            
0000ED4E                            Obj6D_Action:				; XREF: Obj6D_Index
0000ED4E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000ED52 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000ED54 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000ED5A 0868 0000 001C             		bchg	#0,$1C(a0)
0000ED60 6700                       		beq.s	loc_E57A
0000ED62 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000ED68 303C 00B3                  		move.w	#$B3,d0
0000ED6C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000ED72                            
0000ED72                            loc_E57A:
0000ED72 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000ED78 6100 C148                  		bsr.w	AnimateSprite
0000ED7C 117C 0000 0020             		move.b	#0,$20(a0)
0000ED82 1028 0036                  		move.b	$36(a0),d0
0000ED86 B028 001A                  		cmp.b	$1A(a0),d0
0000ED8A 6600                       		bne.s	Obj6D_ChkDel
0000ED8C 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000ED92                            
0000ED92                            Obj6D_ChkDel:
0000ED92 3028 0008                  		move.w	8(a0),d0
0000ED96 0240 FF80                  		andi.w	#$FF80,d0
0000ED9A 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED9E 0441 0080                  		subi.w	#$80,d1
0000EDA2 0241 FF80                  		andi.w	#$FF80,d1
0000EDA6 9041                       		sub.w	d1,d0
0000EDA8 0C40 0280                  		cmpi.w	#$280,d0
0000EDAC 6200 F090                  		bhi.w	DeleteObject
0000EDB0 6000 F050                  		bra.w	DisplaySprite
0000EDB4                            ; ===========================================================================
0000EDB4                            Ani_obj6D:
0000EDB4                            	include "_anim\obj6D.asm"
0000EDB4                            ; ---------------------------------------------------------------------------
0000EDB4                            ; Animation script - flamethrower (SBZ)
0000EDB4                            ; ---------------------------------------------------------------------------
0000EDB4 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EDB6 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EDB8 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EDBA 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EDBC 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EDCA 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EDD4 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EDE2 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EDEC                            		even
0000EDEC                            		even
0000EDEC                            
0000EDEC                            ; ---------------------------------------------------------------------------
0000EDEC                            ; Sprite mappings - flame thrower (SBZ)
0000EDEC                            ; ---------------------------------------------------------------------------
0000EDEC                            Map_obj6D:
0000EDEC                            	include "_maps\obj6D.asm"
0000EDEC                            ; ---------------------------------------------------------------------------
0000EDEC                            ; Sprite mappings - flame thrower (SBZ)
0000EDEC                            ; ---------------------------------------------------------------------------
0000EDEC 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EDF0 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EDF4 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EDF8 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EDFC 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EE00 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EE04 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EE08 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EE0C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EE10 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EE14 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EE18 01                         byte_E620:	dc.b 1
0000EE19 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE1E 02                         byte_E626:	dc.b 2
0000EE1F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE24 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE29 02                         byte_E631:	dc.b 2
0000EE2A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE2F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE34 03                         byte_E63C:	dc.b 3
0000EE35 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE3A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE3F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE44 03                         byte_E64C:	dc.b 3
0000EE45 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE4A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE4F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE54 04                         byte_E65C:	dc.b 4
0000EE55 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE5A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE5F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE64 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE69 04                         byte_E671:	dc.b 4
0000EE6A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE6F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE74 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE79 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE7E 05                         byte_E686:	dc.b 5
0000EE7F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EE84 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE89 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE8E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE93 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE98 05                         byte_E6A0:	dc.b 5
0000EE99 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE9E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EEA3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEA8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEAD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEB2 06                         byte_E6BA:	dc.b 6
0000EEB3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EEB8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EEBD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEC2 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EEC7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EECC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EED1 06                         byte_E6D9:	dc.b 6
0000EED2 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EED7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EEDC 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EEE1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEE6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEEB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEF0 01                         byte_E6F8:	dc.b 1
0000EEF1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEF6 02                         byte_E6FE:	dc.b 2
0000EEF7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEFC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF01 02                         byte_E709:	dc.b 2
0000EF02 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF07 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF0C 03                         byte_E714:	dc.b 3
0000EF0D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF12 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF17 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF1C 03                         byte_E724:	dc.b 3
0000EF1D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF22 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF27 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF2C 04                         byte_E734:	dc.b 4
0000EF2D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF32 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF37 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF3C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF41 04                         byte_E749:	dc.b 4
0000EF42 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF47 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF4C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF51 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF56 05                         byte_E75E:	dc.b 5
0000EF57 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EF5C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF61 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF66 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF6B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF70 05                         byte_E778:	dc.b 5
0000EF71 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF76 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF7B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF80 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF85 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF8A 06                         byte_E792:	dc.b 6
0000EF8B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EF90 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EF95 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF9A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EF9F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFA4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFA9 06                         byte_E7B1:	dc.b 6
0000EFAA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EFAF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EFB4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EFB9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFBE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFC3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFC8                            		even
0000EFC8                            		even
0000EFC8                            
0000EFC8                            ; ===========================================================================
0000EFC8                            ; ---------------------------------------------------------------------------
0000EFC8                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EFC8                            ; ---------------------------------------------------------------------------
0000EFC8                            
0000EFC8                            Obj46:					; XREF: Obj_Index
0000EFC8 7000                       		moveq	#0,d0
0000EFCA 1028 0024                  		move.b	$24(a0),d0
0000EFCE 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EFD2 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EFD6                            ; ===========================================================================
0000EFD6 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EFD8 0000                       		dc.w Obj46_Action-Obj46_Index
0000EFDA                            ; ===========================================================================
0000EFDA                            
0000EFDA                            Obj46_Main:				; XREF: Obj46_Index
0000EFDA 5428 0024                  		addq.b	#2,$24(a0)
0000EFDE 117C 000F 0016             		move.b	#$F,$16(a0)
0000EFE4 117C 000F 0017             		move.b	#$F,$17(a0)
0000EFEA 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EFF2 317C 4000 0002             		move.w	#$4000,2(a0)
0000EFF8 117C 0004 0001             		move.b	#4,1(a0)
0000EFFE 117C 0003 0018             		move.b	#3,$18(a0)
0000F004 117C 0010 0019             		move.b	#$10,$19(a0)
0000F00A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F010 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F016                            
0000F016                            Obj46_Action:				; XREF: Obj46_Index
0000F016 4A28 0001                  		tst.b	1(a0)
0000F01A 6A00                       		bpl.s	Obj46_ChkDel
0000F01C 7000                       		moveq	#0,d0
0000F01E 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F022 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F026 D040                       		add.w	d0,d0
0000F028 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F02C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F030 323C 001B                  		move.w	#$1B,d1
0000F034 343C 0010                  		move.w	#$10,d2
0000F038 363C 0011                  		move.w	#$11,d3
0000F03C 3828 0008                  		move.w	8(a0),d4
0000F040 6100 0000                  		bsr.w	SolidObject
0000F044                            
0000F044                            Obj46_ChkDel:
0000F044 6100 EDBC                  		bsr.w	DisplaySprite
0000F048 3028 0008                  		move.w	8(a0),d0
0000F04C 0240 FF80                  		andi.w	#$FF80,d0
0000F050 3238 F700                  		move.w	($FFFFF700).w,d1
0000F054 0441 0080                  		subi.w	#$80,d1
0000F058 0241 FF80                  		andi.w	#$FF80,d1
0000F05C 9041                       		sub.w	d1,d0
0000F05E 0C40 0280                  		cmpi.w	#$280,d0
0000F062 6200 EDDA                  		bhi.w	DeleteObject
0000F066 4E75                       		rts	
0000F068                            ; ===========================================================================
0000F068 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F06A 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F06C 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F06E 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F070 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F072                            ; ===========================================================================
0000F072                            
0000F072                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F072 4E75                       		rts	
0000F074                            ; ===========================================================================
0000F074                            
0000F074                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F074 3038 D008                  		move.w	($FFFFD008).w,d0
0000F078 9068 0008                  		sub.w	8(a0),d0
0000F07C 6400                       		bcc.s	loc_E888
0000F07E 4440                       		neg.w	d0
0000F080                            
0000F080                            loc_E888:
0000F080 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F084 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F086 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F08C                            
0000F08C                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F08C 7000                       		moveq	#0,d0
0000F08E 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F092 0828 0003 0028             		btst	#3,$28(a0)
0000F098 6700                       		beq.s	loc_E8A8
0000F09A 4440                       		neg.w	d0
0000F09C 0640 0010                  		addi.w	#$10,d0
0000F0A0                            
0000F0A0                            loc_E8A8:
0000F0A0 3228 0030                  		move.w	$30(a0),d1
0000F0A4 9240                       		sub.w	d0,d1
0000F0A6 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F0AA 4E75                       		rts	
0000F0AC                            ; ===========================================================================
0000F0AC                            
0000F0AC                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F0AC 6100 ED2E                  		bsr.w	SpeedToPos
0000F0B0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F0B6 6100 0000                  		bsr.w	ObjHitFloor
0000F0BA 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F0BC 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F0C0 D368 000C                  		add.w	d1,$C(a0)
0000F0C4 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F0C8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F0CE 117C 0004 0028             		move.b	#4,$28(a0)
0000F0D4 3011                       		move.w	(a1),d0
0000F0D6 0240 03FF                  		andi.w	#$3FF,d0
0000F0DA 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F0DE 6400                       		bcc.s	locret_E8EE
0000F0E0 117C 0000 0028             		move.b	#0,$28(a0)
0000F0E6                            
0000F0E6                            locret_E8EE:
0000F0E6 4E75                       		rts	
0000F0E8                            ; ===========================================================================
0000F0E8                            
0000F0E8                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F0E8 7000                       		moveq	#0,d0
0000F0EA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F0EE E648                       		lsr.w	#3,d0
0000F0F0 3228 0030                  		move.w	$30(a0),d1
0000F0F4 9240                       		sub.w	d0,d1
0000F0F6 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F0FA 4E75                       		rts	
0000F0FC                            ; ===========================================================================
0000F0FC                            ; ---------------------------------------------------------------------------
0000F0FC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F0FC                            ; ---------------------------------------------------------------------------
0000F0FC                            Map_obj46:
0000F0FC                            	include "_maps\obj46.asm"
0000F0FC                            ; ---------------------------------------------------------------------------
0000F0FC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F0FC                            ; ---------------------------------------------------------------------------
0000F0FC 0000                       		dc.w byte_E906-Map_obj46
0000F0FE 01                         byte_E906:	dc.b 1
0000F0FF F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F104                            		even
0000F104                            		even
0000F104                            
0000F104                            ; ===========================================================================
0000F104                            ; ---------------------------------------------------------------------------
0000F104                            ; Object 12 - lamp (SYZ)
0000F104                            ; ---------------------------------------------------------------------------
0000F104                            
0000F104                            Obj12:					; XREF: Obj_Index
0000F104 7000                       		moveq	#0,d0
0000F106 1028 0024                  		move.b	$24(a0),d0
0000F10A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F10E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F112                            ; ===========================================================================
0000F112 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F114 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F116                            ; ===========================================================================
0000F116                            
0000F116                            Obj12_Main:				; XREF: Obj12_Index
0000F116 5428 0024                  		addq.b	#2,$24(a0)
0000F11A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F122 317C 0000 0002             		move.w	#0,2(a0)
0000F128 117C 0004 0001             		move.b	#4,1(a0)
0000F12E 117C 0010 0019             		move.b	#$10,$19(a0)
0000F134 117C 0006 0018             		move.b	#6,$18(a0)
0000F13A                            
0000F13A                            Obj12_Animate:				; XREF: Obj12_Index
0000F13A 5328 001E                  		subq.b	#1,$1E(a0)
0000F13E 6A00                       		bpl.s	Obj12_ChkDel
0000F140 117C 0007 001E             		move.b	#7,$1E(a0)
0000F146 5228 001A                  		addq.b	#1,$1A(a0)
0000F14A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F150 6500                       		bcs.s	Obj12_ChkDel
0000F152 117C 0000 001A             		move.b	#0,$1A(a0)
0000F158                            
0000F158                            Obj12_ChkDel:
0000F158 3028 0008                  		move.w	8(a0),d0
0000F15C 0240 FF80                  		andi.w	#$FF80,d0
0000F160 3238 F700                  		move.w	($FFFFF700).w,d1
0000F164 0441 0080                  		subi.w	#$80,d1
0000F168 0241 FF80                  		andi.w	#$FF80,d1
0000F16C 9041                       		sub.w	d1,d0
0000F16E 0C40 0280                  		cmpi.w	#$280,d0
0000F172 6200 ECCA                  		bhi.w	DeleteObject
0000F176 6000 EC8A                  		bra.w	DisplaySprite
0000F17A                            ; ===========================================================================
0000F17A                            ; ---------------------------------------------------------------------------
0000F17A                            ; Sprite mappings - lamp (SYZ)
0000F17A                            ; ---------------------------------------------------------------------------
0000F17A                            Map_obj12:
0000F17A                            	include "_maps\obj12.asm"
0000F17A                            ; ---------------------------------------------------------------------------
0000F17A                            ; Sprite mappings - lamp (SYZ)
0000F17A                            ; ---------------------------------------------------------------------------
0000F17A 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F17E 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F182 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F186 02                         byte_E98E:	dc.b 2
0000F187 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F18C 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F191 02                         byte_E999:	dc.b 2
0000F192 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F197 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F19C 02                         byte_E9A4:	dc.b 2
0000F19D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F1A2 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F1A7 02                         byte_E9AF:	dc.b 2
0000F1A8 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F1AD 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F1B2 02                         byte_E9BA:	dc.b 2
0000F1B3 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F1B8 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F1BD 02                         byte_E9C5:	dc.b 2
0000F1BE F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F1C3 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F1C8                            		even
0000F1C8                            		even
0000F1C8                            
0000F1C8                            ; ===========================================================================
0000F1C8                            ; ---------------------------------------------------------------------------
0000F1C8                            ; Object 47 - pinball bumper (SYZ)
0000F1C8                            ; ---------------------------------------------------------------------------
0000F1C8                            
0000F1C8                            Obj47:					; XREF: Obj_Index
0000F1C8 7000                       		moveq	#0,d0
0000F1CA 1028 0024                  		move.b	$24(a0),d0
0000F1CE 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F1D2 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F1D6                            ; ===========================================================================
0000F1D6 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F1D8 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F1DA                            ; ===========================================================================
0000F1DA                            
0000F1DA                            Obj47_Main:				; XREF: Obj47_Index
0000F1DA 5428 0024                  		addq.b	#2,$24(a0)
0000F1DE 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F1E6 317C 0380 0002             		move.w	#$380,2(a0)
0000F1EC 117C 0004 0001             		move.b	#4,1(a0)
0000F1F2 117C 0010 0019             		move.b	#$10,$19(a0)
0000F1F8 117C 0001 0018             		move.b	#1,$18(a0)
0000F1FE 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F204                            
0000F204                            Obj47_Hit:				; XREF: Obj47_Index
0000F204 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F208 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F20C 4228 0021                  		clr.b	$21(a0)
0000F210 43F8 D000                  		lea	($FFFFD000).w,a1
0000F214 3228 0008                  		move.w	8(a0),d1
0000F218 3428 000C                  		move.w	$C(a0),d2
0000F21C 9269 0008                  		sub.w	8(a1),d1
0000F220 9469 000C                  		sub.w	$C(a1),d2
0000F224 4EB9 0000 2FBA             		jsr	(CalcAngle).l
0000F22A 4EB9 0000 2CEC             		jsr	(CalcSine).l
0000F230 C3FC F900                  		muls.w	#-$700,d1
0000F234 E081                       		asr.l	#8,d1
0000F236 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F23A C1FC F900                  		muls.w	#-$700,d0
0000F23E E080                       		asr.l	#8,d0
0000F240 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F244 08E9 0001 0022             		bset	#1,$22(a1)
0000F24A 08A9 0004 0022             		bclr	#4,$22(a1)
0000F250 08A9 0005 0022             		bclr	#5,$22(a1)
0000F256 4229 003C                  		clr.b	$3C(a1)
0000F25A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F260 303C 00B4                  		move.w	#$B4,d0
0000F264 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F26A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F26E 7000                       		moveq	#0,d0
0000F270 1028 0023                  		move.b	$23(a0),d0
0000F274 6700                       		beq.s	Obj47_Score
0000F276 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F27C 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F27E 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F282                            
0000F282                            Obj47_Score:
0000F282 7001                       		moveq	#1,d0
0000F284 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F28A 6100 EFFC                  		bsr.w	SingleObjLoad
0000F28E 6600                       		bne.s	Obj47_Display
0000F290 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F294 3368 0008 0008             		move.w	8(a0),8(a1)
0000F29A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F2A0 137C 0004 001A             		move.b	#4,$1A(a1)
0000F2A6                            
0000F2A6                            Obj47_Display:
0000F2A6 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F2AC 6100 BC14                  		bsr.w	AnimateSprite
0000F2B0 3028 0008                  		move.w	8(a0),d0
0000F2B4 0240 FF80                  		andi.w	#$FF80,d0
0000F2B8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2BC 0441 0080                  		subi.w	#$80,d1
0000F2C0 0241 FF80                  		andi.w	#$FF80,d1
0000F2C4 9041                       		sub.w	d1,d0
0000F2C6 0C40 0280                  		cmpi.w	#$280,d0
0000F2CA 6200                       		bhi.s	Obj47_ChkHit
0000F2CC 6000 EB34                  		bra.w	DisplaySprite
0000F2D0                            ; ===========================================================================
0000F2D0                            
0000F2D0                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F2D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2D4 7000                       		moveq	#0,d0
0000F2D6 1028 0023                  		move.b	$23(a0),d0
0000F2DA 6700                       		beq.s	Obj47_Delete
0000F2DC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F2E2                            
0000F2E2                            Obj47_Delete:
0000F2E2 6000 EB5A                  		bra.w	DeleteObject
0000F2E6                            ; ===========================================================================
0000F2E6                            Ani_obj47:
0000F2E6                            	include "_anim\obj47.asm"
0000F2E6                            ; ---------------------------------------------------------------------------
0000F2E6                            ; Animation script - flamethrower (SBZ)
0000F2E6                            ; ---------------------------------------------------------------------------
0000F2E6 0000                       		dc.w byte_EAF4-Ani_obj47
0000F2E8 0000                       		dc.w byte_EAF8-Ani_obj47
0000F2EA 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F2EE 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F2F6                            		even
0000F2F6                            		even
0000F2F6                            
0000F2F6                            ; ---------------------------------------------------------------------------
0000F2F6                            ; Sprite mappings - pinball bumper (SYZ)
0000F2F6                            ; ---------------------------------------------------------------------------
0000F2F6                            Map_obj47:
0000F2F6                            	include "_maps\obj47.asm"
0000F2F6                            ; ---------------------------------------------------------------------------
0000F2F6                            ; Sprite mappings - pinball bumper (SYZ)
0000F2F6                            ; ---------------------------------------------------------------------------
0000F2F6 0000                       		dc.w byte_EB06-Map_obj47
0000F2F8 0000                       		dc.w byte_EB11-Map_obj47
0000F2FA 0000                       		dc.w byte_EB1C-Map_obj47
0000F2FC 02                         byte_EB06:	dc.b 2
0000F2FD F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F302 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F307 02                         byte_EB11:	dc.b 2
0000F308 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F30D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F312 02                         byte_EB1C:	dc.b 2
0000F313 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F318 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F31E 00                         		even
0000F31E 00                         		even
0000F31E                            
0000F31E                            ; ===========================================================================
0000F31E                            ; ---------------------------------------------------------------------------
0000F31E                            ; Object 0D - signpost at the end of a level
0000F31E                            ; ---------------------------------------------------------------------------
0000F31E                            
0000F31E                            Obj0D:					; XREF: Obj_Index
0000F31E 7000                       		moveq	#0,d0
0000F320 1028 0024                  		move.b	$24(a0),d0
0000F324 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F328 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F32C 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F332 6100 BB8E                  		bsr.w	AnimateSprite
0000F336 6100 EACA                  		bsr.w	DisplaySprite
0000F33A 3028 0008                  		move.w	8(a0),d0
0000F33E 0240 FF80                  		andi.w	#$FF80,d0
0000F342 3238 F700                  		move.w	($FFFFF700).w,d1
0000F346 0441 0080                  		subi.w	#$80,d1
0000F34A 0241 FF80                  		andi.w	#$FF80,d1
0000F34E 9041                       		sub.w	d1,d0
0000F350 0C40 0280                  		cmpi.w	#$280,d0
0000F354 6200 EAE8                  		bhi.w	DeleteObject
0000F358 4E75                       		rts	
0000F35A                            ; ===========================================================================
0000F35A 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F35C 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F35E 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F360 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F362 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F364                            ; ===========================================================================
0000F364                            
0000F364                            Obj0D_Main:				; XREF: Obj0D_Index
0000F364 5428 0024                  		addq.b	#2,$24(a0)
0000F368 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F370 317C 0680 0002             		move.w	#$680,2(a0)
0000F376 117C 0004 0001             		move.b	#4,1(a0)
0000F37C 117C 0018 0019             		move.b	#$18,$19(a0)
0000F382 117C 0004 0018             		move.b	#4,$18(a0)
0000F388                            
0000F388                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F388 3038 D008                  		move.w	($FFFFD008).w,d0
0000F38C 9068 0008                  		sub.w	8(a0),d0
0000F390 6500                       		bcs.s	locret_EBBA
0000F392 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F396 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F398 303C 00CF                  		move.w	#$CF,d0
0000F39C 4EB9 0000 15BA             		jsr	(PlaySound).l	; play signpost	sound
0000F3A2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F3A6 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F3AC 5428 0024                  		addq.b	#2,$24(a0)
0000F3B0                            
0000F3B0                            locret_EBBA:
0000F3B0 4E75                       		rts	
0000F3B2                            ; ===========================================================================
0000F3B2                            
0000F3B2                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F3B2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F3B6 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F3B8 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F3BE 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F3C2 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F3C8 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F3CA 5428 0024                  		addq.b	#2,$24(a0)
0000F3CE                            
0000F3CE                            Obj0D_Sparkle:
0000F3CE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F3D2 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F3D4 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F3DA 7000                       		moveq	#0,d0
0000F3DC 1028 0034                  		move.b	$34(a0),d0
0000F3E0 5428 0034                  		addq.b	#2,$34(a0)
0000F3E4 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F3EA 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F3EE 6100 EE98                  		bsr.w	SingleObjLoad
0000F3F2 6600                       		bne.s	locret_EC42
0000F3F4 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F3F8 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F3FE 101A                       		move.b	(a2)+,d0
0000F400 4880                       		ext.w	d0
0000F402 D068 0008                  		add.w	8(a0),d0
0000F406 3340 0008                  		move.w	d0,8(a1)
0000F40A 101A                       		move.b	(a2)+,d0
0000F40C 4880                       		ext.w	d0
0000F40E D068 000C                  		add.w	$C(a0),d0
0000F412 3340 000C                  		move.w	d0,$C(a1)
0000F416 237C 0000 A660 0004        		move.l	#Map_obj25,4(a1)
0000F41E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F424 137C 0004 0001             		move.b	#4,1(a1)
0000F42A 137C 0002 0018             		move.b	#2,$18(a1)
0000F430 137C 0008 0019             		move.b	#8,$19(a1)
0000F436                            
0000F436                            locret_EC42:
0000F436 4E75                       		rts	
0000F438                            ; ===========================================================================
0000F438 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F43A 0808                       		dc.b	8,   8
0000F43C F000                       		dc.b -$10,   0
0000F43E 18F8                       		dc.b  $18,  -8
0000F440 00F8                       		dc.b	0,  -8
0000F442 1000                       		dc.b  $10,   0
0000F444 E808                       		dc.b -$18,   8
0000F446 1810                       		dc.b  $18, $10
0000F448                            ; ===========================================================================
0000F448                            
0000F448                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F448 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F44C 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F450 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F456 6600                       		bne.s	loc_EC70
0000F458 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F45E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F464 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F466 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F46C 6000                       		bra.s	loc_EC70
0000F46E                            
0000F46E                            Obj0D_MoveLeft:
0000F46E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F474                            
0000F474                            loc_EC70:
0000F474 4A38 D000                  		tst.b	($FFFFD000).w
0000F478 6700                       		beq.s	loc_EC86
0000F47A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F47E 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F482 0641 0128                  		addi.w	#$128,d1
0000F486 B041                       		cmp.w	d1,d0
0000F488 6500                       		bcs.s	locret_ECEE
0000F48A                            
0000F48A                            loc_EC86:
0000F48A 5428 0024                  		addq.b	#2,$24(a0)
0000F48E                            
0000F48E                            ; ---------------------------------------------------------------------------
0000F48E                            ; Subroutine to	set up bonuses at the end of an	act
0000F48E                            ; ---------------------------------------------------------------------------
0000F48E                            
0000F48E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F48E                            
0000F48E                            
0000F48E                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F48E 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F492 6600                       		bne.s	locret_ECEE
0000F494 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F49A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F49E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F4A2 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F4A8 7010                       		moveq	#$10,d0
0000F4AA 4EB9 0000 17D6             		jsr	(LoadPLC2).l	; load title card patterns
0000F4B0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F4B6 7000                       		moveq	#0,d0
0000F4B8 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F4BC C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F4C0 7200                       		moveq	#0,d1
0000F4C2 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F4C6 D041                       		add.w	d1,d0		; add up your time
0000F4C8 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F4CC 7214                       		moveq	#$14,d1
0000F4CE B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F4D0 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F4D2 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F4D4                            
0000F4D4                            loc_ECD0:
0000F4D4 D040                       		add.w	d0,d0
0000F4D6 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F4DC 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F4E0 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F4E4 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F4E8 303C 008E                  		move.w	#$8E,d0
0000F4EC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F4F2                            
0000F4F2                            locret_ECEE:
0000F4F2 4E75                       		rts	
0000F4F4                            ; End of function GotThroughAct
0000F4F4                            
0000F4F4                            ; ===========================================================================
0000F4F4 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F508 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F51E                            ; ===========================================================================
0000F51E                            
0000F51E                            locret_ED1A:				; XREF: Obj0D_Index
0000F51E 4E75                       		rts	
0000F520                            ; ===========================================================================
0000F520                            Ani_obj0D:
0000F520                            	include "_anim\obj0D.asm"
0000F520                            ; ---------------------------------------------------------------------------
0000F520                            ; Animation script - signpost
0000F520                            ; ---------------------------------------------------------------------------
0000F520 0000                       		dc.w byte_ED24-Ani_obj0D
0000F522 0000                       		dc.w byte_ED28-Ani_obj0D
0000F524 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F526 0000                       		dc.w byte_ED34-Ani_obj0D
0000F528 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F52C 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F532 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F538 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F53C 00                         		even
0000F53C 00                         		even
0000F53C                            
0000F53C                            ; ---------------------------------------------------------------------------
0000F53C                            ; Sprite mappings - signpost
0000F53C                            ; ---------------------------------------------------------------------------
0000F53C                            Map_obj0D:
0000F53C                            	include "_maps\obj0D.asm"
0000F53C                            ; ---------------------------------------------------------------------------
0000F53C                            ; Sprite mappings - signpost
0000F53C                            ; ---------------------------------------------------------------------------
0000F53C 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F540 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F544 0000                       		dc.w byte_ED73-Map_obj0D
0000F546 03                         byte_ED42:	dc.b 3
0000F547 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F54C F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F551 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F556 02                         byte_ED52:	dc.b 2
0000F557 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F55C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F561 02                         byte_ED5D:	dc.b 2
0000F562 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F567 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F56C 02                         byte_ED68:	dc.b 2
0000F56D F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F572 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F577 03                         byte_ED73:	dc.b 3
0000F578 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F57D F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F582 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F588 00                         		even
0000F588 00                         		even
0000F588                            
0000F588                            ; ===========================================================================
0000F588                            ; ---------------------------------------------------------------------------
0000F588                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F588                            ; ---------------------------------------------------------------------------
0000F588                            
0000F588                            Obj4C:					; XREF: Obj_Index
0000F588 7000                       		moveq	#0,d0
0000F58A 1028 0024                  		move.b	$24(a0),d0
0000F58E 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F592 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F596 6000 0000                  		bra.w	Obj4D_ChkDel
0000F59A                            ; ===========================================================================
0000F59A 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F59C 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F59E 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F5A0 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F5A2 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F5A4 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F5A6                            ; ===========================================================================
0000F5A6                            
0000F5A6                            Obj4C_Main:				; XREF: Obj4C_Index
0000F5A6 5428 0024                  		addq.b	#2,$24(a0)
0000F5AA 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F5B2 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F5B8 117C 0004 0001             		move.b	#4,1(a0)
0000F5BE 117C 0001 0018             		move.b	#1,$18(a0)
0000F5C4 117C 0038 0019             		move.b	#$38,$19(a0)
0000F5CA 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F5D0                            
0000F5D0                            loc_EDCC:				; XREF: Obj4C_Index
0000F5D0 5368 0032                  		subq.w	#1,$32(a0)
0000F5D4 6A00                       		bpl.s	locret_EDF0
0000F5D6 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F5DC 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F5E0 3228 000C                  		move.w	$C(a0),d1
0000F5E4 B041                       		cmp.w	d1,d0
0000F5E6 6400                       		bcc.s	locret_EDF0
0000F5E8 0441 0170                  		subi.w	#$170,d1
0000F5EC B041                       		cmp.w	d1,d0
0000F5EE 6500                       		bcs.s	locret_EDF0
0000F5F0 5428 0024                  		addq.b	#2,$24(a0)
0000F5F4                            
0000F5F4                            locret_EDF0:
0000F5F4 4E75                       		rts	
0000F5F6                            ; ===========================================================================
0000F5F6                            
0000F5F6                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F5F6 5428 0024                  		addq.b	#2,$24(a0)
0000F5FA 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F5FE 6600                       		bne.s	loc_EE18
0000F600 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F604 3368 0008 0008             		move.w	8(a0),8(a1)
0000F60A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F610 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F616 2348 003C                  		move.l	a0,$3C(a1)
0000F61A                            
0000F61A                            loc_EE18:
0000F61A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F620 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F624 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F626 117C 0004 001C             		move.b	#4,$1C(a0)
0000F62C 6000                       		bra.s	Obj4C_Display
0000F62E                            ; ===========================================================================
0000F62E                            
0000F62E                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F62E 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F632 08E9 0001 0022             		bset	#1,$22(a1)
0000F638 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F63E 6000                       		bra.s	Obj4C_Display
0000F640                            ; ===========================================================================
0000F640                            
0000F640                            loc_EE3E:				; XREF: Obj4C_Index
0000F640 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F644 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F646 5428 0024                  		addq.b	#2,$24(a0)
0000F64A 4E75                       		rts	
0000F64C                            ; ===========================================================================
0000F64C                            
0000F64C                            Obj4C_Display:				; XREF: Obj4C_Index
0000F64C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F652 6100 B86E                  		bsr.w	AnimateSprite
0000F656 6100 E7AA                  		bsr.w	DisplaySprite
0000F65A 4E75                       		rts	
0000F65C                            ; ===========================================================================
0000F65C                            
0000F65C                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F65C 117C 0000 001C             		move.b	#0,$1C(a0)
0000F662 117C 0002 0024             		move.b	#2,$24(a0)
0000F668 4A28 0028                  		tst.b	$28(a0)
0000F66C 6700 E7D0                  		beq.w	DeleteObject
0000F670 4E75                       		rts	
0000F672                            ; ===========================================================================
0000F672                            ; ---------------------------------------------------------------------------
0000F672                            ; Object 4D - lava geyser / lavafall (MZ)
0000F672                            ; ---------------------------------------------------------------------------
0000F672                            
0000F672                            Obj4D:					; XREF: Obj_Index
0000F672 7000                       		moveq	#0,d0
0000F674 1028 0024                  		move.b	$24(a0),d0
0000F678 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F67C 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F680 6000 E780                  		bra.w	DisplaySprite
0000F684                            ; ===========================================================================
0000F684 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F686 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F688 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F68A 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F68C                            
0000F68C FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F690                            ; ===========================================================================
0000F690                            
0000F690                            Obj4D_Main:				; XREF: Obj4D_Index
0000F690 5428 0024                  		addq.b	#2,$24(a0)
0000F694 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F69A 4A28 0028                  		tst.b	$28(a0)
0000F69E 6700                       		beq.s	loc_EEA4
0000F6A0 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F6A6                            
0000F6A6                            loc_EEA4:
0000F6A6 7000                       		moveq	#0,d0
0000F6A8 1028 0028                  		move.b	$28(a0),d0
0000F6AC D040                       		add.w	d0,d0
0000F6AE 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F6B4 2248                       		movea.l	a0,a1
0000F6B6 7201                       		moveq	#1,d1
0000F6B8 6100                       		bsr.s	Obj4D_MakeLava
0000F6BA 6000                       		bra.s	loc_EF10
0000F6BC                            ; ===========================================================================
0000F6BC                            
0000F6BC                            Obj4D_Loop:
0000F6BC 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F6C0 6600                       		bne.s	loc_EF0A
0000F6C2                            
0000F6C2                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F6C2 12BC 004D                  		move.b	#$4D,0(a1)
0000F6C6 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F6CE 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F6D4 137C 0004 0001             		move.b	#4,1(a1)
0000F6DA 137C 0020 0019             		move.b	#$20,$19(a1)
0000F6E0 3368 0008 0008             		move.w	8(a0),8(a1)
0000F6E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F6EC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F6F2 137C 0001 0018             		move.b	#1,$18(a1)
0000F6F8 137C 0005 001C             		move.b	#5,$1C(a1)
0000F6FE 4A28 0028                  		tst.b	$28(a0)
0000F702 6700                       		beq.s	loc_EF0A
0000F704 137C 0002 001C             		move.b	#2,$1C(a1)
0000F70A                            
0000F70A                            loc_EF0A:
0000F70A 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F70E 4E75                       		rts	
0000F710                            ; ===========================================================================
0000F710                            
0000F710                            loc_EF10:				; XREF: Obj4D_Main
0000F710 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F716 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F71C 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F722 137C 0093 0020             		move.b	#$93,$20(a1)
0000F728 137C 0080 0016             		move.b	#$80,$16(a1)
0000F72E 08E9 0004 0001             		bset	#4,1(a1)
0000F734 5829 0024                  		addq.b	#4,$24(a1)
0000F738 2348 003C                  		move.l	a0,$3C(a1)
0000F73C 4A28 0028                  		tst.b	$28(a0)
0000F740 6700                       		beq.s	Obj4D_PlaySnd
0000F742 7200                       		moveq	#0,d1
0000F744 6100 FF76                  		bsr.w	Obj4D_Loop
0000F748 5429 0024                  		addq.b	#2,$24(a1)
0000F74C 08E9 0004 0002             		bset	#4,2(a1)
0000F752 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F758 137C 0000 0018             		move.b	#0,$18(a1)
0000F75E 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F764 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F76A 117C 0000 0028             		move.b	#0,$28(a0)
0000F770                            
0000F770                            Obj4D_PlaySnd:
0000F770 303C 00C8                  		move.w	#$C8,d0
0000F774 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000F77A                            
0000F77A                            Obj4D_Action:				; XREF: Obj4D_Index
0000F77A 7000                       		moveq	#0,d0
0000F77C 1028 0028                  		move.b	$28(a0),d0
0000F780 D040                       		add.w	d0,d0
0000F782 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F786 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F78A 6100 E650                  		bsr.w	SpeedToPos
0000F78E 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F794 6100 B72C                  		bsr.w	AnimateSprite
0000F798                            
0000F798                            Obj4D_ChkDel:				; XREF: Obj4C
0000F798 3028 0008                  		move.w	8(a0),d0
0000F79C 0240 FF80                  		andi.w	#$FF80,d0
0000F7A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7A4 0441 0080                  		subi.w	#$80,d1
0000F7A8 0241 FF80                  		andi.w	#$FF80,d1
0000F7AC 9041                       		sub.w	d1,d0
0000F7AE 0C40 0280                  		cmpi.w	#$280,d0
0000F7B2 6200 E68A                  		bhi.w	DeleteObject
0000F7B6 4E75                       		rts	
0000F7B8                            ; ===========================================================================
0000F7B8 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F7BA 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F7BC                            ; ===========================================================================
0000F7BC                            
0000F7BC                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F7BC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F7C2 3028 0030                  		move.w	$30(a0),d0
0000F7C6 B068 000C                  		cmp.w	$C(a0),d0
0000F7CA 6400                       		bcc.s	locret_EFDA
0000F7CC 5828 0024                  		addq.b	#4,$24(a0)
0000F7D0 2268 003C                  		movea.l	$3C(a0),a1
0000F7D4 137C 0003 001C             		move.b	#3,$1C(a1)
0000F7DA                            
0000F7DA                            locret_EFDA:
0000F7DA 4E75                       		rts	
0000F7DC                            ; ===========================================================================
0000F7DC                            
0000F7DC                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F7DC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F7E2 3028 0030                  		move.w	$30(a0),d0
0000F7E6 B068 000C                  		cmp.w	$C(a0),d0
0000F7EA 6400                       		bcc.s	locret_EFFA
0000F7EC 5828 0024                  		addq.b	#4,$24(a0)
0000F7F0 2268 003C                  		movea.l	$3C(a0),a1
0000F7F4 137C 0001 001C             		move.b	#1,$1C(a1)
0000F7FA                            
0000F7FA                            locret_EFFA:
0000F7FA 4E75                       		rts	
0000F7FC                            ; ===========================================================================
0000F7FC                            
0000F7FC                            loc_EFFC:				; XREF: Obj4D_Index
0000F7FC 2268 003C                  		movea.l	$3C(a0),a1
0000F800 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F806 6700 0000                  		beq.w	Obj4D_Delete
0000F80A 3029 000C                  		move.w	$C(a1),d0
0000F80E 0640 0060                  		addi.w	#$60,d0
0000F812 3140 000C                  		move.w	d0,$C(a0)
0000F816 9068 0030                  		sub.w	$30(a0),d0
0000F81A 4440                       		neg.w	d0
0000F81C 7208                       		moveq	#8,d1
0000F81E 0C40 0040                  		cmpi.w	#$40,d0
0000F822 6C00                       		bge.s	loc_F026
0000F824 720B                       		moveq	#$B,d1
0000F826                            
0000F826                            loc_F026:
0000F826 0C40 0080                  		cmpi.w	#$80,d0
0000F82A 6F00                       		ble.s	loc_F02E
0000F82C 720E                       		moveq	#$E,d1
0000F82E                            
0000F82E                            loc_F02E:
0000F82E 5328 001E                  		subq.b	#1,$1E(a0)
0000F832 6A00                       		bpl.s	loc_F04C
0000F834 117C 0007 001E             		move.b	#7,$1E(a0)
0000F83A 5228 001B                  		addq.b	#1,$1B(a0)
0000F83E 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F844 6500                       		bcs.s	loc_F04C
0000F846 117C 0000 001B             		move.b	#0,$1B(a0)
0000F84C                            
0000F84C                            loc_F04C:
0000F84C 1028 001B                  		move.b	$1B(a0),d0
0000F850 D001                       		add.b	d1,d0
0000F852 1140 001A                  		move.b	d0,$1A(a0)
0000F856 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F85A                            ; ===========================================================================
0000F85A                            
0000F85A                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F85A 6000 E5E2                  		bra.w	DeleteObject
0000F85E                            ; ===========================================================================
0000F85E                            ; ---------------------------------------------------------------------------
0000F85E                            ; Object 4E - advancing	wall of	lava (MZ)
0000F85E                            ; ---------------------------------------------------------------------------
0000F85E                            
0000F85E                            Obj4E:					; XREF: Obj_Index
0000F85E 7000                       		moveq	#0,d0
0000F860 1028 0024                  		move.b	$24(a0),d0
0000F864 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F868 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F86C                            ; ===========================================================================
0000F86C 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F86E 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F870 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F872 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F874 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F876                            ; ===========================================================================
0000F876                            
0000F876                            Obj4E_Main:				; XREF: Obj4E_Index
0000F876 5828 0024                  		addq.b	#4,$24(a0)
0000F87A 2248                       		movea.l	a0,a1
0000F87C 7201                       		moveq	#1,d1
0000F87E 6000                       		bra.s	Obj4E_Main2
0000F880                            ; ===========================================================================
0000F880                            
0000F880                            Obj4E_Loop:
0000F880 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F884 6600                       		bne.s	loc_F0C8
0000F886                            
0000F886                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F886 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F88A 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F892 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F898 137C 0004 0001             		move.b	#4,1(a1)
0000F89E 137C 0050 0019             		move.b	#$50,$19(a1)
0000F8A4 3368 0008 0008             		move.w	8(a0),8(a1)
0000F8AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F8B0 137C 0001 0018             		move.b	#1,$18(a1)
0000F8B6 137C 0000 001C             		move.b	#0,$1C(a1)
0000F8BC 137C 0094 0020             		move.b	#$94,$20(a1)
0000F8C2 2348 003C                  		move.l	a0,$3C(a1)
0000F8C6                            
0000F8C6                            loc_F0C8:
0000F8C6 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F8CA                            
0000F8CA 5C29 0024                  		addq.b	#6,$24(a1)
0000F8CE 137C 0004 001A             		move.b	#4,$1A(a1)
0000F8D4                            
0000F8D4                            Obj4E_Action:				; XREF: Obj4E_Index
0000F8D4 3038 D008                  		move.w	($FFFFD008).w,d0
0000F8D8 9068 0008                  		sub.w	8(a0),d0
0000F8DC 6400                       		bcc.s	Obj4E_ChkSonic
0000F8DE 4440                       		neg.w	d0
0000F8E0                            
0000F8E0                            Obj4E_ChkSonic:
0000F8E0 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F8E4 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F8E6 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F8EA 9068 000C                  		sub.w	$C(a0),d0
0000F8EE 6400                       		bcc.s	loc_F0F4
0000F8F0 4440                       		neg.w	d0
0000F8F2                            
0000F8F2                            loc_F0F4:
0000F8F2 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F8F6 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F8F8 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F8FE 6000                       		bra.s	Obj4E_Solid
0000F900                            ; ===========================================================================
0000F900                            
0000F900                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F900 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F904 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F906 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F90C 5528 0024                  		subq.b	#2,$24(a0)
0000F910                            
0000F910                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F910 323C 002B                  		move.w	#$2B,d1
0000F914 343C 0018                  		move.w	#$18,d2
0000F918 3602                       		move.w	d2,d3
0000F91A 5243                       		addq.w	#1,d3
0000F91C 3828 0008                  		move.w	8(a0),d4
0000F920 1028 0024                  		move.b	$24(a0),d0
0000F924 3F00                       		move.w	d0,-(sp)
0000F926 6100 0000                  		bsr.w	SolidObject
0000F92A 301F                       		move.w	(sp)+,d0
0000F92C 1140 0024                  		move.b	d0,$24(a0)
0000F930 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F936 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F938 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F93C 4228 0036                  		clr.b	$36(a0)
0000F940                            
0000F940                            Obj4E_Animate:
0000F940 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F946 6100 B57A                  		bsr.w	AnimateSprite
0000F94A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F950 6400                       		bcc.s	Obj4E_ChkDel
0000F952 6100 E488                  		bsr.w	SpeedToPos
0000F956                            
0000F956                            Obj4E_ChkDel:
0000F956 6100 E4AA                  		bsr.w	DisplaySprite
0000F95A 4A28 0036                  		tst.b	$36(a0)
0000F95E 6600                       		bne.s	locret_F17E
0000F960 3028 0008                  		move.w	8(a0),d0
0000F964 0240 FF80                  		andi.w	#$FF80,d0
0000F968 3238 F700                  		move.w	($FFFFF700).w,d1
0000F96C 0441 0080                  		subi.w	#$80,d1
0000F970 0241 FF80                  		andi.w	#$FF80,d1
0000F974 9041                       		sub.w	d1,d0
0000F976 0C40 0280                  		cmpi.w	#$280,d0
0000F97A 6200                       		bhi.s	Obj4E_ChkGone
0000F97C                            
0000F97C                            locret_F17E:
0000F97C 4E75                       		rts	
0000F97E                            ; ===========================================================================
0000F97E                            
0000F97E                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F97E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F982 7000                       		moveq	#0,d0
0000F984 1028 0023                  		move.b	$23(a0),d0
0000F988 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F98E 117C 0008 0024             		move.b	#8,$24(a0)
0000F994 4E75                       		rts	
0000F996                            ; ===========================================================================
0000F996                            
0000F996                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F996 2268 003C                  		movea.l	$3C(a0),a1
0000F99A 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F9A0 6700                       		beq.s	Obj4E_Delete
0000F9A2 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F9A8 0468 0080 0008             		subi.w	#$80,8(a0)
0000F9AE 6000 E452                  		bra.w	DisplaySprite
0000F9B2                            ; ===========================================================================
0000F9B2                            
0000F9B2                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F9B2 6000 E48A                  		bra.w	DeleteObject
0000F9B6                            ; ===========================================================================
0000F9B6                            ; ---------------------------------------------------------------------------
0000F9B6                            ; Object 54 - invisible	lava tag (MZ)
0000F9B6                            ; ---------------------------------------------------------------------------
0000F9B6                            
0000F9B6                            Obj54:					; XREF: Obj_Index
0000F9B6 7000                       		moveq	#0,d0
0000F9B8 1028 0024                  		move.b	$24(a0),d0
0000F9BC 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F9C0 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F9C4                            ; ===========================================================================
0000F9C4 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F9C6 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F9C8                            
0000F9C8 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F9CC                            ; ===========================================================================
0000F9CC                            
0000F9CC                            Obj54_Main:				; XREF: Obj54_Index
0000F9CC 5428 0024                  		addq.b	#2,$24(a0)
0000F9D0 7000                       		moveq	#0,d0
0000F9D2 1028 0028                  		move.b	$28(a0),d0
0000F9D6 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F9DC 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F9E4 117C 0084 0001             		move.b	#$84,1(a0)
0000F9EA                            
0000F9EA                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F9EA 3028 0008                  		move.w	8(a0),d0
0000F9EE 0240 FF80                  		andi.w	#$FF80,d0
0000F9F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9F6 0441 0080                  		subi.w	#$80,d1
0000F9FA 0241 FF80                  		andi.w	#$FF80,d1
0000F9FE 9041                       		sub.w	d1,d0
0000FA00 6B00 E43C                  		bmi.w	DeleteObject
0000FA04 0C40 0280                  		cmpi.w	#$280,d0
0000FA08 6200 E434                  		bhi.w	DeleteObject
0000FA0C 4E75                       		rts	
0000FA0E                            ; ===========================================================================
0000FA0E                            ; ---------------------------------------------------------------------------
0000FA0E                            ; Sprite mappings - invisible lava tag (MZ)
0000FA0E                            ; ---------------------------------------------------------------------------
0000FA0E                            Map_obj54:
0000FA0E                            	include "_maps\obj54.asm"
0000FA0E                            ; ---------------------------------------------------------------------------
0000FA0E                            ; Sprite mappings - invisible lava tag (MZ)
0000FA0E                            ; ---------------------------------------------------------------------------
0000FA0E 0000                       		dc.w byte_F212-Map_obj54
0000FA10 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FA12 00                         		even
0000FA12 00                         		even
0000FA12                            
0000FA12                            Ani_obj4C:
0000FA12                            	include "_anim\obj4C.asm"
0000FA12                            ; ---------------------------------------------------------------------------
0000FA12                            ; Animation script - geyser of lava (MZ)
0000FA12                            ; ---------------------------------------------------------------------------
0000FA12 0000                       		dc.w byte_F220-Ani_obj4C
0000FA14 0000                       		dc.w byte_F22A-Ani_obj4C
0000FA16 0000                       		dc.w byte_F22E-Ani_obj4C
0000FA18 0000                       		dc.w byte_F232-Ani_obj4C
0000FA1A 0000                       		dc.w byte_F23A-Ani_obj4C
0000FA1C 0000                       		dc.w byte_F23E-Ani_obj4C
0000FA1E 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FA28 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FA2C 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FA30 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FA38 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FA3C 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FA40                            		even
0000FA40                            		even
0000FA40                            
0000FA40                            Ani_obj4E:
0000FA40                            	include "_anim\obj4E.asm"
0000FA40                            ; ---------------------------------------------------------------------------
0000FA40                            ; Animation script - advancing wall of lava (MZ)
0000FA40                            ; ---------------------------------------------------------------------------
0000FA40 0000                       		dc.w byte_F244-Ani_obj4E
0000FA42 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FA48                            		even
0000FA48                            		even
0000FA48                            
0000FA48                            ; ---------------------------------------------------------------------------
0000FA48                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FA48                            ; ---------------------------------------------------------------------------
0000FA48                            Map_obj4C:
0000FA48                            	include "_maps\obj4C.asm"
0000FA48                            ; ---------------------------------------------------------------------------
0000FA48                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FA48                            ; ---------------------------------------------------------------------------
0000FA48 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FA4C 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FA50 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FA54 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FA58 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FA5C 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FA60 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FA64 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FA68 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FA6C 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FA70 02                         byte_F272:	dc.b 2
0000FA71 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FA76 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FA7B 02                         byte_F27D:	dc.b 2
0000FA7C EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FA81 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FA86 04                         byte_F288:	dc.b 4
0000FA87 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA8C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA91 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA96 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA9B 04                         byte_F29D:	dc.b 4
0000FA9C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FAA1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FAA6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FAAB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FAB0 06                         byte_F2B2:	dc.b 6
0000FAB1 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FAB6 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FABB F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FAC0 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FAC5 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FACA E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FACF 06                         byte_F2D1:	dc.b 6
0000FAD0 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FAD5 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FADA F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FADF EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FAE4 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FAE9 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FAEE 02                         byte_F2F0:	dc.b 2
0000FAEF E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FAF4 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FAF9 02                         byte_F2FB:	dc.b 2
0000FAFA E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FAFF E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FB04 0A                         byte_F306:	dc.b $A
0000FB05 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB0A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB0F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB14 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB19 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB1E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB23 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FB28 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FB2D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FB32 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FB37 0A                         byte_F339:	dc.b $A
0000FB38 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB3D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB42 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB47 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB4C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB51 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB56 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FB5B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FB60 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FB65 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FB6A 0A                         byte_F36C:	dc.b $A
0000FB6B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB70 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB75 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB7A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB7F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB84 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB89 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FB8E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FB93 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FB98 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FB9D 06                         byte_F39F:	dc.b 6
0000FB9E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FBA3 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FBA8 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FBAD B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FBB2 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FBB7 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FBBC 06                         byte_F3BE:	dc.b 6
0000FBBD 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FBC2 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBC7 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBCC B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBD1 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBD6 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBDB 06                         byte_F3DD:	dc.b 6
0000FBDC 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FBE1 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FBE6 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FBEB B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FBF0 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FBF5 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FBFA 10                         byte_F3FC:	dc.b $10
0000FBFB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FC00 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FC05 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FC0A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FC0F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FC14 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FC19 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FC1E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FC23 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FC28 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FC2D 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FC32 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FC37 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FC3C 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FC41 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FC46 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FC4B 10                         byte_F44D:	dc.b $10
0000FC4C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FC51 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FC56 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FC5B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FC60 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FC65 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FC6A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FC6F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FC74 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FC79 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FC7E 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FC83 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FC88 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FC8D 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FC92 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FC97 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FC9C 10                         byte_F49E:	dc.b $10
0000FC9D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FCA2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FCA7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FCAC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FCB1 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FCB6 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FCBB F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FCC0 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FCC5 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FCCA 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FCCF 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FCD4 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FCD9 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FCDE 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FCE3 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FCE8 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FCED 06                         byte_F4EF:	dc.b 6
0000FCEE E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FCF3 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FCF8 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FCFD E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FD02 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FD07 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FD0C 06                         byte_F50E:	dc.b 6
0000FD0D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FD12 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FD17 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FD1C E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FD21 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FD26 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FD2B 00                         byte_F52D:	dc.b 0
0000FD2C                            		even
0000FD2C                            		even
0000FD2C                            
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C                            Map_obj4E:
0000FD2C                            	include "_maps\obj4E.asm"
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C 0000                       		dc.w byte_F538-Map_obj4E
0000FD2E 0000                       		dc.w byte_F566-Map_obj4E
0000FD30 0000                       		dc.w byte_F594-Map_obj4E
0000FD32 0000                       		dc.w byte_F5C2-Map_obj4E
0000FD34 0000                       		dc.w byte_F5F0-Map_obj4E
0000FD36 09                         byte_F538:	dc.b 9
0000FD37 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FD3C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD41 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD46 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD4B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD50 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD55 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD5A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD5F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD64 09                         byte_F566:	dc.b 9
0000FD65 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FD6A 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FD6F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD74 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD79 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD7E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD83 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD88 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD8D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD92 09                         byte_F594:	dc.b 9
0000FD93 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FD98 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD9D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDA2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDA7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDAC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDB1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDB6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDBB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDC0 09                         byte_F5C2:	dc.b 9
0000FDC1 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FDC6 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FDCB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDD0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDD5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDDA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDDF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDE4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDE9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDEE 08                         byte_F5F0:	dc.b 8
0000FDEF E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FDF4 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDF9 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDFE 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE03 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE08 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE0D E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE12 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE18 00                         		even
0000FE18 00                         		even
0000FE18                            
0000FE18                            ; ===========================================================================
0000FE18                            ; ---------------------------------------------------------------------------
0000FE18                            ; Object 40 - Moto Bug enemy (GHZ)
0000FE18                            ; ---------------------------------------------------------------------------
0000FE18                            
0000FE18                            Obj40:					; XREF: Obj_Index
0000FE18 7000                       		moveq	#0,d0
0000FE1A 1028 0024                  		move.b	$24(a0),d0
0000FE1E 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FE22 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FE26                            ; ===========================================================================
0000FE26 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FE28 0000                       		dc.w Obj40_Action-Obj40_Index
0000FE2A 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FE2C 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FE2E                            ; ===========================================================================
0000FE2E                            
0000FE2E                            Obj40_Main:				; XREF: Obj40_Index
0000FE2E 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FE36 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FE3C 117C 0004 0001             		move.b	#4,1(a0)
0000FE42 117C 0004 0018             		move.b	#4,$18(a0)
0000FE48 117C 0014 0019             		move.b	#$14,$19(a0)
0000FE4E 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FE52 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FE54 117C 000E 0016             		move.b	#$E,$16(a0)
0000FE5A 117C 0008 0017             		move.b	#8,$17(a0)
0000FE60 117C 000C 0020             		move.b	#$C,$20(a0)
0000FE66 6100 DF48                  		bsr.w	ObjectFall
0000FE6A 4EB9 0000 0000             		jsr	ObjHitFloor
0000FE70 4A41                       		tst.w	d1
0000FE72 6A00                       		bpl.s	locret_F68A
0000FE74 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE78 317C 0000 0012             		move.w	#0,$12(a0)
0000FE7E 5428 0024                  		addq.b	#2,$24(a0)
0000FE82 0868 0000 0022             		bchg	#0,$22(a0)
0000FE88                            
0000FE88                            locret_F68A:
0000FE88 4E75                       		rts	
0000FE8A                            ; ===========================================================================
0000FE8A                            
0000FE8A                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FE8A 5828 0024                  		addq.b	#4,$24(a0)
0000FE8E 6000 0000                  		bra.w	Obj40_Animate
0000FE92                            ; ===========================================================================
0000FE92                            
0000FE92                            Obj40_Action:				; XREF: Obj40_Index
0000FE92 7000                       		moveq	#0,d0
0000FE94 1028 0025                  		move.b	$25(a0),d0
0000FE98 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FE9C 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FEA0 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FEA6 6100 B01A                  		bsr.w	AnimateSprite
0000FEAA                            
0000FEAA                            ; ---------------------------------------------------------------------------
0000FEAA                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FEAA                            ; ---------------------------------------------------------------------------
0000FEAA                            
0000FEAA                            MarkObjGone:
0000FEAA 3028 0008                  		move.w	8(a0),d0
0000FEAE 0240 FF80                  		andi.w	#$FF80,d0
0000FEB2 3238 F700                  		move.w	($FFFFF700).w,d1
0000FEB6 0441 0080                  		subi.w	#$80,d1
0000FEBA 0241 FF80                  		andi.w	#$FF80,d1
0000FEBE 9041                       		sub.w	d1,d0
0000FEC0 0C40 0280                  		cmpi.w	#$280,d0
0000FEC4 6200 0000                  		bhi.w	Mark_ChkGone
0000FEC8 6000 DF38                  		bra.w	DisplaySprite
0000FECC                            ; ===========================================================================
0000FECC                            
0000FECC                            Mark_ChkGone:
0000FECC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FED0 7000                       		moveq	#0,d0
0000FED2 1028 0023                  		move.b	$23(a0),d0
0000FED6 6700                       		beq.s	Mark_Delete
0000FED8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FEDE                            
0000FEDE                            Mark_Delete:
0000FEDE 6000 DF5E                  		bra.w	DeleteObject
0000FEE2                            
0000FEE2                            ; ===========================================================================
0000FEE2 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FEE4 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FEE6                            ; ===========================================================================
0000FEE6                            
0000FEE6                            Obj40_Move:				; XREF: Obj40_Index2
0000FEE6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FEEA 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FEEC 5428 0025                  		addq.b	#2,$25(a0)
0000FEF0 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FEF6 117C 0001 001C             		move.b	#1,$1C(a0)
0000FEFC 0868 0000 0022             		bchg	#0,$22(a0)
0000FF02 6600                       		bne.s	locret_F70A
0000FF04 4468 0010                  		neg.w	$10(a0)		; change direction
0000FF08                            
0000FF08                            locret_F70A:
0000FF08 4E75                       		rts	
0000FF0A                            ; ===========================================================================
0000FF0A                            
0000FF0A                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FF0A 6100 DED0                  		bsr.w	SpeedToPos
0000FF0E 4EB9 0000 0000             		jsr	ObjHitFloor
0000FF14 0C41 FFF8                  		cmpi.w	#-8,d1
0000FF18 6D00                       		blt.s	Obj40_Pause
0000FF1A 0C41 000C                  		cmpi.w	#$C,d1
0000FF1E 6C00                       		bge.s	Obj40_Pause
0000FF20 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FF24 5328 0033                  		subq.b	#1,$33(a0)
0000FF28 6A00                       		bpl.s	locret_F756
0000FF2A 117C 000F 0033             		move.b	#$F,$33(a0)
0000FF30 6100 E356                  		bsr.w	SingleObjLoad
0000FF34 6600                       		bne.s	locret_F756
0000FF36 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FF3A 3368 0008 0008             		move.w	8(a0),8(a1)
0000FF40 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FF46 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FF4C 137C 0002 001C             		move.b	#2,$1C(a1)
0000FF52                            
0000FF52                            locret_F756:
0000FF52 4E75                       		rts	
0000FF54                            ; ===========================================================================
0000FF54                            
0000FF54                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FF54 5528 0025                  		subq.b	#2,$25(a0)
0000FF58 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FF5E 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FF64 117C 0000 001C             		move.b	#0,$1C(a0)
0000FF6A 4E75                       		rts	
0000FF6C                            ; ===========================================================================
0000FF6C                            
0000FF6C                            Obj40_Animate:				; XREF: Obj40_Index
0000FF6C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FF72 6100 AF4E                  		bsr.w	AnimateSprite
0000FF76 6000 DE8A                  		bra.w	DisplaySprite
0000FF7A                            ; ===========================================================================
0000FF7A                            
0000FF7A                            Obj40_Delete:				; XREF: Obj40_Index
0000FF7A 6000 DEC2                  		bra.w	DeleteObject
0000FF7E                            ; ===========================================================================
0000FF7E                            Ani_obj40:
0000FF7E                            	include "_anim\obj40.asm"
0000FF7E                            ; ---------------------------------------------------------------------------
0000FF7E                            ; Animation script - Motobug enemy
0000FF7E                            ; ---------------------------------------------------------------------------
0000FF7E 0000                       		dc.w byte_F788-Ani_obj40
0000FF80 0000                       		dc.w byte_F78C-Ani_obj40
0000FF82 0000                       		dc.w byte_F792-Ani_obj40
0000FF84 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FF88 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FF8E 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FF9C                            		even
0000FF9C                            		even
0000FF9C                            
0000FF9C                            ; ---------------------------------------------------------------------------
0000FF9C                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FF9C                            ; ---------------------------------------------------------------------------
0000FF9C                            Map_obj40:
0000FF9C                            	include "_maps\obj40.asm"
0000FF9C                            Map_cedc:
0000FF9C 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FF9E 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FFA0 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FFA2 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FFA4 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FFA6 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FFA8 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FFAA 04                         Map_cedc_E: 	dc.b $4
0000FFAB F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FFB0 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FFB5 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FFBA 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FFBF 04                         Map_cedc_23: 	dc.b $4
0000FFC0 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FFC5 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FFCA F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FFCF 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FFD4 05                         Map_cedc_38: 	dc.b $5
0000FFD5 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FFDA 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FFDF F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FFE4 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FFE9 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FFEE 01                         Map_cedc_52: 	dc.b $1
0000FFEF FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FFF4 01                         Map_cedc_58: 	dc.b $1
0000FFF5 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FFFA 01                         Map_cedc_5E: 	dc.b $1
0000FFFB FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
00010000 00                         Map_cedc_64: 	dc.b $0
00010002 00                         	even
00010002 00                         	even
00010002                            
00010002                            ; ===========================================================================
00010002                            ; ---------------------------------------------------------------------------
00010002                            ; Object 4F - blank
00010002                            ; ---------------------------------------------------------------------------
00010002                            
00010002                            Obj4F:					; XREF: Obj_Index
00010002 4E75                       		rts	
00010004                            
00010004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010004                            
00010004                            
00010004                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010004 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010008 D047                       		add.w	d7,d0
0001000A 0240 0003                  		andi.w	#3,d0
0001000E 6600                       		bne.s	loc_F836
00010010 7600                       		moveq	#0,d3
00010012 1628 0019                  		move.b	$19(a0),d3
00010016 4A68 0010                  		tst.w	$10(a0)
0001001A 6B00                       		bmi.s	loc_F82C
0001001C 6100 0000                  		bsr.w	ObjHitWallRight
00010020 4A41                       		tst.w	d1
00010022 6A00                       		bpl.s	loc_F836
00010024                            
00010024                            loc_F828:
00010024 7001                       		moveq	#1,d0
00010026 4E75                       		rts	
00010028                            ; ===========================================================================
00010028                            
00010028                            loc_F82C:
00010028 4643                       		not.w	d3
0001002A 6100 0000                  		bsr.w	ObjHitWallLeft
0001002E 4A41                       		tst.w	d1
00010030 6BF2                       		bmi.s	loc_F828
00010032                            
00010032                            loc_F836:
00010032 7000                       		moveq	#0,d0
00010034 4E75                       		rts	
00010036                            ; End of function Obj50_ChkWall
00010036                            
00010036                            ; ===========================================================================
00010036                            ; ---------------------------------------------------------------------------
00010036                            ; Object 50 - Yadrin enemy (SYZ)
00010036                            ; ---------------------------------------------------------------------------
00010036                            
00010036                            Obj50:					; XREF: Obj_Index
00010036 7000                       		moveq	#0,d0
00010038 1028 0024                  		move.b	$24(a0),d0
0001003C 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010040 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010044                            ; ===========================================================================
00010044 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010046 0000                       		dc.w Obj50_Action-Obj50_Index
00010048                            ; ===========================================================================
00010048                            
00010048                            Obj50_Main:				; XREF: Obj50_Index
00010048 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010050 317C 247B 0002             		move.w	#$247B,2(a0)
00010056 117C 0004 0001             		move.b	#4,1(a0)
0001005C 117C 0004 0018             		move.b	#4,$18(a0)
00010062 117C 0014 0019             		move.b	#$14,$19(a0)
00010068 117C 0011 0016             		move.b	#$11,$16(a0)
0001006E 117C 0008 0017             		move.b	#8,$17(a0)
00010074 117C 00CC 0020             		move.b	#$CC,$20(a0)
0001007A 6100 DD34                  		bsr.w	ObjectFall
0001007E 6100 0000                  		bsr.w	ObjHitFloor
00010082 4A41                       		tst.w	d1
00010084 6A00                       		bpl.s	locret_F89E
00010086 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001008A 317C 0000 0012             		move.w	#0,$12(a0)
00010090 5428 0024                  		addq.b	#2,$24(a0)
00010094 0868 0000 0022             		bchg	#0,$22(a0)
0001009A                            
0001009A                            locret_F89E:
0001009A 4E75                       		rts	
0001009C                            ; ===========================================================================
0001009C                            
0001009C                            Obj50_Action:				; XREF: Obj50_Index
0001009C 7000                       		moveq	#0,d0
0001009E 1028 0025                  		move.b	$25(a0),d0
000100A2 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000100A6 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000100AA 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000100B0 6100 AE10                  		bsr.w	AnimateSprite
000100B4 6000 FDF4                  		bra.w	MarkObjGone
000100B8                            ; ===========================================================================
000100B8 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000100BA 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000100BC                            ; ===========================================================================
000100BC                            
000100BC                            Obj50_Move:				; XREF: Obj50_Index2
000100BC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000100C0 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000100C2 5428 0025                  		addq.b	#2,$25(a0)
000100C6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000100CC 117C 0001 001C             		move.b	#1,$1C(a0)
000100D2 0868 0000 0022             		bchg	#0,$22(a0)
000100D8 6600                       		bne.s	locret_F8E2
000100DA 4468 0010                  		neg.w	$10(a0)		; change direction
000100DE                            
000100DE                            locret_F8E2:
000100DE 4E75                       		rts	
000100E0                            ; ===========================================================================
000100E0                            
000100E0                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000100E0 6100 DCFA                  		bsr.w	SpeedToPos
000100E4 6100 0000                  		bsr.w	ObjHitFloor
000100E8 0C41 FFF8                  		cmpi.w	#-8,d1
000100EC 6D00                       		blt.s	Obj50_Pause
000100EE 0C41 000C                  		cmpi.w	#$C,d1
000100F2 6C00                       		bge.s	Obj50_Pause
000100F4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000100F8 6100 FF0A                  		bsr.w	Obj50_ChkWall
000100FC 6600                       		bne.s	Obj50_Pause
000100FE 4E75                       		rts	
00010100                            ; ===========================================================================
00010100                            
00010100                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010100 5528 0025                  		subq.b	#2,$25(a0)
00010104 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001010A 317C 0000 0010             		move.w	#0,$10(a0)
00010110 117C 0000 001C             		move.b	#0,$1C(a0)
00010116 4E75                       		rts	
00010118                            ; ===========================================================================
00010118                            Ani_obj50:
00010118                            	include "_anim\obj50.asm"
00010118                            ; ---------------------------------------------------------------------------
00010118                            ; Animation script - Yadrin enemy
00010118                            ; ---------------------------------------------------------------------------
00010118 0000                       		dc.w byte_F920-Ani_obj50
0001011A 0000                       		dc.w byte_F924-Ani_obj50
0001011C 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010120 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0001012A                            		even
0001012A                            		even
0001012A                            
0001012A                            ; ---------------------------------------------------------------------------
0001012A                            ; Sprite mappings - Yadrin enemy (SYZ)
0001012A                            ; ---------------------------------------------------------------------------
0001012A                            Map_obj50:
0001012A                            	include "_maps\obj50.asm"
0001012A                            Map_ff24:
0001012A 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
0001012C 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0001012E 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010130 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010132 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010134 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010136 05                         Map_ff24_C: 	dc.b $5
00010137 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001013C FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010141 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010146 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001014B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010150 05                         Map_ff24_26: 	dc.b $5
00010151 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010156 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001015B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010160 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010165 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001016A 05                         Map_ff24_40: 	dc.b $5
0001016B F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010170 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010175 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001017A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001017F 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010184 05                         Map_ff24_5A: 	dc.b $5
00010185 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001018A FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001018F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010194 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010199 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001019E 05                         Map_ff24_74: 	dc.b $5
0001019F F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000101A4 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000101A9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101AE F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101B3 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000101B8 05                         Map_ff24_8E: 	dc.b $5
000101B9 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000101BE 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000101C3 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101C8 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101CD 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000101D2                            	even
000101D2                            	even
000101D2                            
000101D2                            ; ---------------------------------------------------------------------------
000101D2                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000101D2                            ;
000101D2                            ; variables:
000101D2                            ; d1 = width
000101D2                            ; d2 = height /	2 (when	jumping)
000101D2                            ; d3 = height /	2 (when	walking)
000101D2                            ; d4 = x-axis position
000101D2                            ; ---------------------------------------------------------------------------
000101D2                            
000101D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000101D2                            
000101D2                            
000101D2                            SolidObject:
000101D2 4A28 0025                  		tst.b	$25(a0)
000101D6 6700 0000                  		beq.w	loc_FAC8
000101DA 3401                       		move.w	d1,d2
000101DC D442                       		add.w	d2,d2
000101DE 43F8 D000                  		lea	($FFFFD000).w,a1
000101E2 0829 0001 0022             		btst	#1,$22(a1)
000101E8 6600                       		bne.s	loc_F9FE
000101EA 3029 0008                  		move.w	8(a1),d0
000101EE 9068 0008                  		sub.w	8(a0),d0
000101F2 D041                       		add.w	d1,d0
000101F4 6B00                       		bmi.s	loc_F9FE
000101F6 B042                       		cmp.w	d2,d0
000101F8 6500                       		bcs.s	loc_FA12
000101FA                            
000101FA                            loc_F9FE:
000101FA 08A9 0003 0022             		bclr	#3,$22(a1)
00010200 08A8 0003 0022             		bclr	#3,$22(a0)
00010206 4228 0025                  		clr.b	$25(a0)
0001020A 7800                       		moveq	#0,d4
0001020C 4E75                       		rts	
0001020E                            ; ===========================================================================
0001020E                            
0001020E                            loc_FA12:
0001020E 3404                       		move.w	d4,d2
00010210                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
00010210 7800                       		moveq	#0,d4
00010212 4E75                       		rts	
00010214                            ; ===========================================================================
00010214                            
00010214                            SolidObject71:				; XREF: Obj71_Solid
00010214 4A28 0025                  		tst.b	$25(a0)
00010218 6700 0000                  		beq.w	loc_FAD0
0001021C 3401                       		move.w	d1,d2
0001021E D442                       		add.w	d2,d2
00010220 43F8 D000                  		lea	($FFFFD000).w,a1
00010224 0829 0001 0022             		btst	#1,$22(a1)
0001022A 6600                       		bne.s	loc_FA44
0001022C 3029 0008                  		move.w	8(a1),d0
00010230 9068 0008                  		sub.w	8(a0),d0
00010234 D041                       		add.w	d1,d0
00010236 6B00                       		bmi.s	loc_FA44
00010238 B042                       		cmp.w	d2,d0
0001023A 6500                       		bcs.s	loc_FA58
0001023C                            
0001023C                            loc_FA44:
0001023C 08A9 0003 0022             		bclr	#3,$22(a1)
00010242 08A8 0003 0022             		bclr	#3,$22(a0)
00010248 4228 0025                  		clr.b	$25(a0)
0001024C 7800                       		moveq	#0,d4
0001024E 4E75                       		rts	
00010250                            ; ===========================================================================
00010250                            
00010250                            loc_FA58:
00010250 3404                       		move.w	d4,d2
00010252                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010252 7800                       		moveq	#0,d4
00010254 4E75                       		rts	
00010256                            ; ===========================================================================
00010256                            
00010256                            SolidObject2F:				; XREF: Obj2F_Solid
00010256 43F8 D000                  		lea	($FFFFD000).w,a1
0001025A 4A28 0001                  		tst.b	1(a0)
0001025E 6A00 0000                  		bpl.w	loc_FB92
00010262 3029 0008                  		move.w	8(a1),d0
00010266 9068 0008                  		sub.w	8(a0),d0
0001026A D041                       		add.w	d1,d0
0001026C 6B00 0000                  		bmi.w	loc_FB92
00010270 3601                       		move.w	d1,d3
00010272 D643                       		add.w	d3,d3
00010274 B043                       		cmp.w	d3,d0
00010276 6200 0000                  		bhi.w	loc_FB92
0001027A 3A00                       		move.w	d0,d5
0001027C 0828 0000 0001             		btst	#0,1(a0)
00010282 6700                       		beq.s	loc_FA94
00010284 4645                       		not.w	d5
00010286 DA43                       		add.w	d3,d5
00010288                            
00010288                            loc_FA94:
00010288 E24D                       		lsr.w	#1,d5
0001028A 7600                       		moveq	#0,d3
0001028C 1632 5000                  		move.b	(a2,d5.w),d3
00010290 9612                       		sub.b	(a2),d3
00010292 3A28 000C                  		move.w	$C(a0),d5
00010296 9A43                       		sub.w	d3,d5
00010298 1629 0016                  		move.b	$16(a1),d3
0001029C 4883                       		ext.w	d3
0001029E D443                       		add.w	d3,d2
000102A0 3629 000C                  		move.w	$C(a1),d3
000102A4 9645                       		sub.w	d5,d3
000102A6 5843                       		addq.w	#4,d3
000102A8 D642                       		add.w	d2,d3
000102AA 6B00 0000                  		bmi.w	loc_FB92
000102AE 3802                       		move.w	d2,d4
000102B0 D844                       		add.w	d4,d4
000102B2 B644                       		cmp.w	d4,d3
000102B4 6400 0000                  		bcc.w	loc_FB92
000102B8 6000 0000                  		bra.w	loc_FB0E
000102BC                            ; ===========================================================================
000102BC                            
000102BC                            loc_FAC8:
000102BC 4A28 0001                  		tst.b	1(a0)
000102C0 6A00 0000                  		bpl.w	loc_FB92
000102C4                            
000102C4                            loc_FAD0:
000102C4 43F8 D000                  		lea	($FFFFD000).w,a1
000102C8 3029 0008                  		move.w	8(a1),d0
000102CC 9068 0008                  		sub.w	8(a0),d0
000102D0 D041                       		add.w	d1,d0
000102D2 6B00 0000                  		bmi.w	loc_FB92
000102D6 3601                       		move.w	d1,d3
000102D8 D643                       		add.w	d3,d3
000102DA B043                       		cmp.w	d3,d0
000102DC 6200 0000                  		bhi.w	loc_FB92
000102E0 1629 0016                  		move.b	$16(a1),d3
000102E4 4883                       		ext.w	d3
000102E6 D443                       		add.w	d3,d2
000102E8 3629 000C                  		move.w	$C(a1),d3
000102EC 9668 000C                  		sub.w	$C(a0),d3
000102F0 5843                       		addq.w	#4,d3
000102F2 D642                       		add.w	d2,d3
000102F4 6B00 0000                  		bmi.w	loc_FB92
000102F8 3802                       		move.w	d2,d4
000102FA D844                       		add.w	d4,d4
000102FC B644                       		cmp.w	d4,d3
000102FE 6400 0000                  		bcc.w	loc_FB92
00010302                            
00010302                            loc_FB0E:
00010302 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010306 6B00 0000                  		bmi.w	loc_FB92
0001030A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010310 6400 0000                  		bcc.w	loc_FB92
00010314 4A78 FE08                  		tst.w	($FFFFFE08).w
00010318 6600 0000                  		bne.w	loc_FBAC
0001031C 3A00                       		move.w	d0,d5
0001031E B240                       		cmp.w	d0,d1
00010320 6400                       		bcc.s	loc_FB36
00010322 D241                       		add.w	d1,d1
00010324 9041                       		sub.w	d1,d0
00010326 3A00                       		move.w	d0,d5
00010328 4445                       		neg.w	d5
0001032A                            
0001032A                            loc_FB36:
0001032A 3203                       		move.w	d3,d1
0001032C B443                       		cmp.w	d3,d2
0001032E 6400                       		bcc.s	loc_FB44
00010330 5943                       		subq.w	#4,d3
00010332 9644                       		sub.w	d4,d3
00010334 3203                       		move.w	d3,d1
00010336 4441                       		neg.w	d1
00010338                            
00010338                            loc_FB44:
00010338 BA41                       		cmp.w	d1,d5
0001033A 6200 0000                  		bhi.w	loc_FBB0
0001033E 0C41 0004                  		cmpi.w	#4,d1
00010342 6300                       		bls.s	loc_FB8C
00010344 4A40                       		tst.w	d0
00010346 6700                       		beq.s	loc_FB70
00010348 6B00                       		bmi.s	loc_FB5E
0001034A 4A69 0010                  		tst.w	$10(a1)
0001034E 6B00                       		bmi.s	loc_FB70
00010350 6000                       		bra.s	loc_FB64
00010352                            ; ===========================================================================
00010352                            
00010352                            loc_FB5E:
00010352 4A69 0010                  		tst.w	$10(a1)
00010356 6A00                       		bpl.s	loc_FB70
00010358                            
00010358                            loc_FB64:
00010358 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0001035E 337C 0000 0010             		move.w	#0,$10(a1)
00010364                            
00010364                            loc_FB70:
00010364 9169 0008                  		sub.w	d0,8(a1)
00010368 0829 0001 0022             		btst	#1,$22(a1)
0001036E 6600                       		bne.s	loc_FB8C
00010370 08E9 0005 0022             		bset	#5,$22(a1)
00010376 08E8 0005 0022             		bset	#5,$22(a0)
0001037C 7801                       		moveq	#1,d4
0001037E 4E75                       		rts	
00010380                            ; ===========================================================================
00010380                            
00010380                            loc_FB8C:
00010380 6100                       		bsr.s	loc_FBA0
00010382 7801                       		moveq	#1,d4
00010384 4E75                       		rts	
00010386                            ; ===========================================================================
00010386                            
00010386                            loc_FB92:
00010386 0828 0005 0022             		btst	#5,$22(a0)
0001038C 6700                       		beq.s	loc_FBAC
0001038E 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010394                            
00010394                            loc_FBA0:
00010394 08A8 0005 0022             		bclr	#5,$22(a0)
0001039A 08A9 0005 0022             		bclr	#5,$22(a1)
000103A0                            
000103A0                            loc_FBAC:
000103A0 7800                       		moveq	#0,d4
000103A2 4E75                       		rts	
000103A4                            ; ===========================================================================
000103A4                            
000103A4                            loc_FBB0:
000103A4 4A43                       		tst.w	d3
000103A6 6B00                       		bmi.s	loc_FBBC
000103A8 0C43 0010                  		cmpi.w	#$10,d3
000103AC 6500                       		bcs.s	loc_FBEE
000103AE 60D6                       		bra.s	loc_FB92
000103B0                            ; ===========================================================================
000103B0                            
000103B0                            loc_FBBC:
000103B0 4A69 0012                  		tst.w	$12(a1)
000103B4 6700                       		beq.s	loc_FBD6
000103B6 6A00                       		bpl.s	loc_FBD2
000103B8 4A43                       		tst.w	d3
000103BA 6A00                       		bpl.s	loc_FBD2
000103BC 9769 000C                  		sub.w	d3,$C(a1)
000103C0 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000103C6                            
000103C6                            loc_FBD2:
000103C6 78FF                       		moveq	#-1,d4
000103C8 4E75                       		rts	
000103CA                            ; ===========================================================================
000103CA                            
000103CA                            loc_FBD6:
000103CA 0829 0001 0022             		btst	#1,$22(a1)
000103D0 66F4                       		bne.s	loc_FBD2
000103D2 2F08                       		move.l	a0,-(sp)
000103D4 2049                       		movea.l	a1,a0
000103D6 4EB9 0000 0000             		jsr	KillSonic
000103DC 205F                       		movea.l	(sp)+,a0
000103DE 78FF                       		moveq	#-1,d4
000103E0 4E75                       		rts	
000103E2                            ; ===========================================================================
000103E2                            
000103E2                            loc_FBEE:
000103E2 5943                       		subq.w	#4,d3
000103E4 7200                       		moveq	#0,d1
000103E6 1228 0019                  		move.b	$19(a0),d1
000103EA 3401                       		move.w	d1,d2
000103EC D442                       		add.w	d2,d2
000103EE D269 0008                  		add.w	8(a1),d1
000103F2 9268 0008                  		sub.w	8(a0),d1
000103F6 6B00                       		bmi.s	loc_FC28
000103F8 B242                       		cmp.w	d2,d1
000103FA 6400                       		bcc.s	loc_FC28
000103FC 4A69 0012                  		tst.w	$12(a1)
00010400 6B00                       		bmi.s	loc_FC28
00010402 9769 000C                  		sub.w	d3,$C(a1)
00010406 5369 000C                  		subq.w	#1,$C(a1)
0001040A 6100                       		bsr.s	sub_FC2C
0001040C 117C 0002 0025             		move.b	#2,$25(a0)
00010412 08E8 0003 0022             		bset	#3,$22(a0)
00010418 78FF                       		moveq	#-1,d4
0001041A 4E75                       		rts	
0001041C                            ; ===========================================================================
0001041C                            
0001041C                            loc_FC28:
0001041C 7800                       		moveq	#0,d4
0001041E 4E75                       		rts	
00010420                            ; End of function SolidObject
00010420                            
00010420                            
00010420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010420                            
00010420                            
00010420                            sub_FC2C:				; XREF: SolidObject
00010420 0829 0003 0022             		btst	#3,$22(a1)
00010426 6700                       		beq.s	loc_FC4E
00010428 7000                       		moveq	#0,d0
0001042A 1029 003D                  		move.b	$3D(a1),d0
0001042E ED48                       		lsl.w	#6,d0
00010430 0680 00FF D000             		addi.l	#$FFD000,d0
00010436 2440                       		movea.l	d0,a2
00010438 08AA 0003 0022             		bclr	#3,$22(a2)
0001043E 422A 0025                  		clr.b	$25(a2)
00010442                            
00010442                            loc_FC4E:
00010442 3008                       		move.w	a0,d0
00010444 0440 D000                  		subi.w	#-$3000,d0
00010448 EC48                       		lsr.w	#6,d0
0001044A 0240 007F                  		andi.w	#$7F,d0
0001044E 1340 003D                  		move.b	d0,$3D(a1)
00010452 137C 0000 0026             		move.b	#0,$26(a1)
00010458 337C 0000 0012             		move.w	#0,$12(a1)
0001045E 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010464 0829 0001 0022             		btst	#1,$22(a1)
0001046A 6700                       		beq.s	loc_FC84
0001046C 2F08                       		move.l	a0,-(sp)
0001046E 2049                       		movea.l	a1,a0
00010470 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010476 205F                       		movea.l	(sp)+,a0
00010478                            
00010478                            loc_FC84:
00010478 08E9 0003 0022             		bset	#3,$22(a1)
0001047E 08E8 0003 0022             		bset	#3,$22(a0)
00010484 4E75                       		rts	
00010486                            ; End of function sub_FC2C
00010486                            
00010486                            ; ===========================================================================
00010486                            ; ---------------------------------------------------------------------------
00010486                            ; Object 51 - smashable	green block (MZ)
00010486                            ; ---------------------------------------------------------------------------
00010486                            
00010486                            Obj51:					; XREF: Obj_Index
00010486 7000                       		moveq	#0,d0
00010488 1028 0024                  		move.b	$24(a0),d0
0001048C 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010490 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010494 6000 FA14                  		bra.w	MarkObjGone
00010498                            ; ===========================================================================
00010498 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0001049A 0000                       		dc.w Obj51_Solid-Obj51_Index
0001049C 0000                       		dc.w Obj51_Display-Obj51_Index
0001049E                            ; ===========================================================================
0001049E                            
0001049E                            Obj51_Main:				; XREF: Obj51_Index
0001049E 5428 0024                  		addq.b	#2,$24(a0)
000104A2 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000104AA 317C 42B8 0002             		move.w	#$42B8,2(a0)
000104B0 117C 0004 0001             		move.b	#4,1(a0)
000104B6 117C 0010 0019             		move.b	#$10,$19(a0)
000104BC 117C 0004 0018             		move.b	#4,$18(a0)
000104C2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000104C8                            
000104C8                            Obj51_Solid:				; XREF: Obj51_Index
000104C8 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000104CE 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000104D4 323C 001B                  		move.w	#$1B,d1
000104D8 343C 0010                  		move.w	#$10,d2
000104DC 363C 0011                  		move.w	#$11,d3
000104E0 3828 0008                  		move.w	8(a0),d4
000104E4 6100 FCEC                  		bsr.w	SolidObject
000104E8 0828 0003 0022             		btst	#3,$22(a0)
000104EE 6600                       		bne.s	Obj51_Smash
000104F0                            
000104F0                            locret_FCFC:
000104F0 4E75                       		rts	
000104F2                            ; ===========================================================================
000104F2                            
000104F2                            Obj51_Smash:				; XREF: Obj51_Solid
000104F2 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000104F8 66F6                       		bne.s	locret_FCFC	; if not, branch
000104FA 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010500 08E9 0002 0022             		bset	#2,$22(a1)
00010506 137C 000E 0016             		move.b	#$E,$16(a1)
0001050C 137C 0007 0017             		move.b	#7,$17(a1)
00010512 137C 0002 001C             		move.b	#2,$1C(a1)
00010518 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001051E 08E9 0001 0022             		bset	#1,$22(a1)
00010524 08A9 0003 0022             		bclr	#3,$22(a1)
0001052A 137C 0002 0024             		move.b	#2,$24(a1)
00010530 08A8 0003 0022             		bclr	#3,$22(a0)
00010536 4228 0025                  		clr.b	$25(a0)
0001053A 117C 0001 001A             		move.b	#1,$1A(a0)
00010540 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010546 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010548 343C 0038                  		move.w	#$38,d2
0001054C 6100 D4A2                  		bsr.w	SmashObject
00010550 6100 DD36                  		bsr.w	SingleObjLoad
00010554 6600                       		bne.s	Obj51_Display
00010556 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0001055A 3368 0008 0008             		move.w	8(a0),8(a1)
00010560 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010566 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0001056A 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001056E 0C42 0006                  		cmpi.w	#6,d2
00010572 6500                       		bcs.s	Obj51_Bonus
00010574 7406                       		moveq	#6,d2
00010576                            
00010576                            Obj51_Bonus:
00010576 7000                       		moveq	#0,d0
00010578 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0001057C 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010582 6500                       		bcs.s	loc_FD98	; if not, branch
00010584 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010588 740A                       		moveq	#10,d2
0001058A                            
0001058A                            loc_FD98:
0001058A 4EB9 0000 0000             		jsr	AddPoints
00010590 E24A                       		lsr.w	#1,d2
00010592 1342 001A                  		move.b	d2,$1A(a1)
00010596                            
00010596                            Obj51_Display:				; XREF: Obj51_Index
00010596 6100 D844                  		bsr.w	SpeedToPos
0001059A 0668 0038 0012             		addi.w	#$38,$12(a0)
000105A0 6100 D860                  		bsr.w	DisplaySprite
000105A4 4A28 0001                  		tst.b	1(a0)
000105A8 6A00 D894                  		bpl.w	DeleteObject
000105AC 4E75                       		rts	
000105AE                            ; ===========================================================================
000105AE FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000105B2 FF00 FF00                  		dc.w $FF00, $FF00
000105B6 0200 FE00                  		dc.w $200, $FE00
000105BA 0100 FF00                  		dc.w $100, $FF00
000105BE                            
000105BE 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000105C6                            ; ---------------------------------------------------------------------------
000105C6                            ; Sprite mappings - smashable green block (MZ)
000105C6                            ; ---------------------------------------------------------------------------
000105C6                            Map_obj51:
000105C6                            	include "_maps\obj51.asm"
000105C6                            ; ---------------------------------------------------------------------------
000105C6                            ; Sprite mappings - smashable green block (MZ)
000105C6                            ; ---------------------------------------------------------------------------
000105C6 0000                       		dc.w byte_FDD8-Map_obj51
000105C8 0000                       		dc.w byte_FDE3-Map_obj51
000105CA 02                         byte_FDD8:	dc.b 2
000105CB F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000105D0 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000105D5 04                         byte_FDE3:	dc.b 4
000105D6 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000105DB 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000105E0 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000105E5 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000105EA                            		even
000105EA                            		even
000105EA                            
000105EA                            ; ===========================================================================
000105EA                            ; ---------------------------------------------------------------------------
000105EA                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000105EA                            ; ---------------------------------------------------------------------------
000105EA                            
000105EA                            Obj52:					; XREF: Obj_Index
000105EA 7000                       		moveq	#0,d0
000105EC 1028 0024                  		move.b	$24(a0),d0
000105F0 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000105F4 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000105F8                            ; ===========================================================================
000105F8 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000105FA 0000                       		dc.w Obj52_Platform-Obj52_Index
000105FC 0000                       		dc.w Obj52_StandOn-Obj52_Index
000105FE                            
000105FE 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010600 2001                       		dc.b $20, 1
00010602 2002                       		dc.b $20, 2
00010604 4003                       		dc.b $40, 3
00010606 3004                       		dc.b $30, 4
00010608                            ; ===========================================================================
00010608                            
00010608                            Obj52_Main:				; XREF: Obj52_Index
00010608 5428 0024                  		addq.b	#2,$24(a0)
0001060C 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010614 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001061A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010620 6600                       		bne.s	loc_FE44
00010622 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0001062A 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010630 117C 0007 0016             		move.b	#7,$16(a0)
00010636                            
00010636                            loc_FE44:
00010636 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001063C 6600                       		bne.s	loc_FE60
0001063E 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010644 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0001064A 6700                       		beq.s	loc_FE60	; if yes, branch
0001064C 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010652                            
00010652                            loc_FE60:
00010652 117C 0004 0001             		move.b	#4,1(a0)
00010658 7000                       		moveq	#0,d0
0001065A 1028 0028                  		move.b	$28(a0),d0
0001065E E648                       		lsr.w	#3,d0
00010660 0240 001E                  		andi.w	#$1E,d0
00010664 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010668 115A 0019                  		move.b	(a2)+,$19(a0)
0001066C 115A 001A                  		move.b	(a2)+,$1A(a0)
00010670 117C 0004 0018             		move.b	#4,$18(a0)
00010676 3168 0008 0030             		move.w	8(a0),$30(a0)
0001067C 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010682 0228 000F 0028             		andi.b	#$F,$28(a0)
00010688                            
00010688                            Obj52_Platform:				; XREF: Obj52_Index
00010688 6100 0000                  		bsr.w	Obj52_Move
0001068C 7200                       		moveq	#0,d1
0001068E 1228 0019                  		move.b	$19(a0),d1
00010692 4EB9 0000 7A82             		jsr	(PlatformObject).l
00010698 6000                       		bra.s	Obj52_ChkDel
0001069A                            ; ===========================================================================
0001069A                            
0001069A                            Obj52_StandOn:				; XREF: Obj52_Index
0001069A 7200                       		moveq	#0,d1
0001069C 1228 0019                  		move.b	$19(a0),d1
000106A0 4EB9 0000 7BF6             		jsr	(ExitPlatform).l
000106A6 3F28 0008                  		move.w	8(a0),-(sp)
000106AA 6100 0000                  		bsr.w	Obj52_Move
000106AE 341F                       		move.w	(sp)+,d2
000106B0 4EB9 0000 8160             		jsr	(MvSonicOnPtfm2).l
000106B6                            
000106B6                            Obj52_ChkDel:				; XREF: Obj52_Platform
000106B6 3028 0030                  		move.w	$30(a0),d0
000106BA 0240 FF80                  		andi.w	#$FF80,d0
000106BE 3238 F700                  		move.w	($FFFFF700).w,d1
000106C2 0441 0080                  		subi.w	#$80,d1
000106C6 0241 FF80                  		andi.w	#$FF80,d1
000106CA 9041                       		sub.w	d1,d0
000106CC 0C40 0280                  		cmpi.w	#$280,d0
000106D0 6200 D76C                  		bhi.w	DeleteObject
000106D4 6000 D72C                  		bra.w	DisplaySprite
000106D8                            ; ===========================================================================
000106D8                            
000106D8                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000106D8 7000                       		moveq	#0,d0
000106DA 1028 0028                  		move.b	$28(a0),d0
000106DE 0240 000F                  		andi.w	#$F,d0
000106E2 D040                       		add.w	d0,d0
000106E4 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000106E8 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000106EC                            ; ===========================================================================
000106EC 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000106F0 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000106F4 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000106F8 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000106FC 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010700 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010702                            ; ===========================================================================
00010702                            
00010702                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010702 4E75                       		rts	
00010704                            ; ===========================================================================
00010704                            
00010704                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010704 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010708 323C 0060                  		move.w	#$60,d1
0001070C 0828 0000 0022             		btst	#0,$22(a0)
00010712 6700                       		beq.s	loc_FF26
00010714 4440                       		neg.w	d0
00010716 D041                       		add.w	d1,d0
00010718                            
00010718                            loc_FF26:
00010718 3228 0030                  		move.w	$30(a0),d1
0001071C 9240                       		sub.w	d0,d1
0001071E 3141 0008                  		move.w	d1,8(a0)
00010722 4E75                       		rts	
00010724                            ; ===========================================================================
00010724                            
00010724                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010724 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001072A 6600                       		bne.s	Obj52_02_Wait
0001072C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010730                            
00010730                            Obj52_02_Wait:
00010730 4E75                       		rts	
00010732                            ; ===========================================================================
00010732                            
00010732                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010732 7600                       		moveq	#0,d3
00010734 1628 0019                  		move.b	$19(a0),d3
00010738 6100 0000                  		bsr.w	ObjHitWallRight
0001073C 4A41                       		tst.w	d1		; has the platform hit a wall?
0001073E 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010740 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010744 3168 0008 0030             		move.w	8(a0),$30(a0)
0001074A 4E75                       		rts	
0001074C                            ; ===========================================================================
0001074C                            
0001074C                            Obj52_03_End:
0001074C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010750 4E75                       		rts	
00010752                            ; ===========================================================================
00010752                            
00010752                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010752 7600                       		moveq	#0,d3
00010754 1628 0019                  		move.b	$19(a0),d3
00010758 6100 0000                  		bsr.w	ObjHitWallRight
0001075C 4A41                       		tst.w	d1		; has the platform hit a wall?
0001075E 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010760 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010764 3168 0008 0030             		move.w	8(a0),$30(a0)
0001076A 4E75                       		rts	
0001076C                            ; ===========================================================================
0001076C                            
0001076C                            Obj52_05_End:
0001076C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010770 4E75                       		rts	
00010772                            ; ===========================================================================
00010772                            
00010772                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010772 6100 D668                  		bsr.w	SpeedToPos
00010776 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
0001077C 6100 0000                  		bsr.w	ObjHitFloor
00010780 4A41                       		tst.w	d1		; has platform hit the floor?
00010782 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010786 D368 000C                  		add.w	d1,$C(a0)
0001078A 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0001078E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010792                            
00010792                            locret_FFA0:
00010792 4E75                       		rts	
00010794                            ; ===========================================================================
00010794                            
00010794                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010794 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010798 6700                       		beq.s	Obj52_07_ChkDel
0001079A 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001079E                            
0001079E                            Obj52_07_ChkDel:
0001079E 588F                       		addq.l	#4,sp
000107A0 3028 0030                  		move.w	$30(a0),d0
000107A4 0240 FF80                  		andi.w	#$FF80,d0
000107A8 3238 F700                  		move.w	($FFFFF700).w,d1
000107AC 0441 0080                  		subi.w	#$80,d1
000107B0 0241 FF80                  		andi.w	#$FF80,d1
000107B4 9041                       		sub.w	d1,d0
000107B6 0C40 0280                  		cmpi.w	#$280,d0
000107BA 6200 D682                  		bhi.w	DeleteObject
000107BE 4E75                       		rts	
000107C0                            ; ===========================================================================
000107C0                            
000107C0                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000107C0 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000107C4 323C 0080                  		move.w	#$80,d1
000107C8 0828 0000 0022             		btst	#0,$22(a0)
000107CE 6700                       		beq.s	loc_FFE2
000107D0 4440                       		neg.w	d0
000107D2 D041                       		add.w	d1,d0
000107D4                            
000107D4                            loc_FFE2:
000107D4 3228 0032                  		move.w	$32(a0),d1
000107D8 9240                       		sub.w	d0,d1
000107DA 3141 000C                  		move.w	d1,$C(a0)
000107DE 4E75                       		rts	
000107E0                            ; ===========================================================================
000107E0                            
000107E0                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000107E0 7600                       		moveq	#0,d3
000107E2 1628 0019                  		move.b	$19(a0),d3
000107E6 D643                       		add.w	d3,d3
000107E8 7208                       		moveq	#8,d1
000107EA 0828 0000 0022             		btst	#0,$22(a0)
000107F0 6700                       		beq.s	loc_10004
000107F2 4441                       		neg.w	d1
000107F4 4443                       		neg.w	d3
000107F6                            
000107F6                            loc_10004:
000107F6 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000107FA 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000107FC 3028 0008                  		move.w	8(a0),d0
00010800 9068 0030                  		sub.w	$30(a0),d0
00010804 B043                       		cmp.w	d3,d0
00010806 6700                       		beq.s	Obj52_0A_Wait
00010808 D368 0008                  		add.w	d1,8(a0)	; move platform
0001080C 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010812 4E75                       		rts	
00010814                            ; ===========================================================================
00010814                            
00010814                            Obj52_0A_Wait:
00010814 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010818 6600                       		bne.s	locret_1002E	; if time remains, branch
0001081A 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010820                            
00010820                            locret_1002E:
00010820 4E75                       		rts	
00010822                            ; ===========================================================================
00010822                            
00010822                            Obj52_0A_Back:
00010822 3028 0008                  		move.w	8(a0),d0
00010826 9068 0030                  		sub.w	$30(a0),d0
0001082A 6700                       		beq.s	Obj52_0A_Reset
0001082C 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010830 4E75                       		rts	
00010832                            ; ===========================================================================
00010832                            
00010832                            Obj52_0A_Reset:
00010832 4268 0036                  		clr.w	$36(a0)
00010836 5328 0028                  		subq.b	#1,$28(a0)
0001083A 4E75                       		rts	
0001083C                            ; ===========================================================================
0001083C                            ; ---------------------------------------------------------------------------
0001083C                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001083C                            ; ---------------------------------------------------------------------------
0001083C                            Map_obj52:
0001083C                            	include "_maps\obj52mz.asm"
0001083C                            ; ---------------------------------------------------------------------------
0001083C                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001083C                            ; ---------------------------------------------------------------------------
0001083C 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010840 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010844 0000                       		dc.w byte_1008F-Map_obj52
00010846 01                         byte_10054:	dc.b 1
00010847 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001084C 02                         byte_1005A:	dc.b 2
0001084D F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010852 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010857 04                         byte_10065:	dc.b 4
00010858 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001085D 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010862 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010867 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0001086C 04                         byte_1007A:	dc.b 4
0001086D F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010872 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010877 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001087C F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010881 03                         byte_1008F:	dc.b 3
00010882 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010887 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001088C F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010892 00                         		even
00010892 00                         		even
00010892                            
00010892                            ; ---------------------------------------------------------------------------
00010892                            ; Sprite mappings - moving block (LZ)
00010892                            ; ---------------------------------------------------------------------------
00010892                            Map_obj52a:
00010892                            	include "_maps\obj52lz.asm"
00010892                            ; ---------------------------------------------------------------------------
00010892                            ; Sprite mappings - moving block (LZ)
00010892                            ; ---------------------------------------------------------------------------
00010892 0000                       		dc.w byte_100A2-Map_obj52a
00010894 01                         byte_100A2:	dc.b 1
00010895 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001089A                            		even
0001089A                            		even
0001089A                            
0001089A                            ; ===========================================================================
0001089A                            ; ---------------------------------------------------------------------------
0001089A                            ; Object 55 - Basaran enemy (MZ)
0001089A                            ; ---------------------------------------------------------------------------
0001089A                            
0001089A                            Obj55:					; XREF: Obj_Index
0001089A 7000                       		moveq	#0,d0
0001089C 1028 0024                  		move.b	$24(a0),d0
000108A0 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000108A4 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000108A8                            ; ===========================================================================
000108A8 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000108AA 0000                       		dc.w Obj55_Action-Obj55_Index
000108AC                            ; ===========================================================================
000108AC                            
000108AC                            Obj55_Main:				; XREF: Obj55_Index
000108AC 5428 0024                  		addq.b	#2,$24(a0)
000108B0 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000108B8 317C 84B8 0002             		move.w	#$84B8,2(a0)
000108BE 117C 0004 0001             		move.b	#4,1(a0)
000108C4 117C 000C 0016             		move.b	#$C,$16(a0)
000108CA 117C 0002 0018             		move.b	#2,$18(a0)
000108D0 117C 000B 0020             		move.b	#$B,$20(a0)
000108D6 117C 0010 0019             		move.b	#$10,$19(a0)
000108DC                            
000108DC                            Obj55_Action:				; XREF: Obj55_Index
000108DC 7000                       		moveq	#0,d0
000108DE 1028 0025                  		move.b	$25(a0),d0
000108E2 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000108E6 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000108EA 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000108F0 6100 A5D0                  		bsr.w	AnimateSprite
000108F4 6000 F5B4                  		bra.w	MarkObjGone
000108F8                            ; ===========================================================================
000108F8 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000108FA 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000108FC 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000108FE 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010900                            ; ===========================================================================
00010900                            
00010900                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010900 343C 0080                  		move.w	#$80,d2
00010904 6100 0000                  		bsr.w	Obj55_ChkSonic
00010908 6400                       		bcc.s	Obj55_NoDrop
0001090A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001090E 3140 0036                  		move.w	d0,$36(a0)
00010912 9068 000C                  		sub.w	$C(a0),d0
00010916 6500                       		bcs.s	Obj55_NoDrop
00010918 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0001091C 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
0001091E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010922 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010924 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010928 D007                       		add.b	d7,d0
0001092A 0200 0007                  		andi.b	#7,d0
0001092E 6600                       		bne.s	Obj55_NoDrop
00010930 117C 0001 001C             		move.b	#1,$1C(a0)
00010936 5428 0025                  		addq.b	#2,$25(a0)
0001093A                            
0001093A                            Obj55_NoDrop:
0001093A 4E75                       		rts	
0001093C                            ; ===========================================================================
0001093C                            
0001093C                            Obj55_DropFly:				; XREF: Obj55_Index2
0001093C 6100 D49E                  		bsr.w	SpeedToPos
00010940 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010946 343C 0080                  		move.w	#$80,d2
0001094A 6100 0000                  		bsr.w	Obj55_ChkSonic
0001094E 3028 0036                  		move.w	$36(a0),d0
00010952 9068 000C                  		sub.w	$C(a0),d0
00010956 6500                       		bcs.s	Obj55_ChkDel
00010958 0C40 0010                  		cmpi.w	#$10,d0
0001095C 6400                       		bcc.s	locret_10180
0001095E 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010962 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010968 117C 0002 001C             		move.b	#2,$1C(a0)
0001096E 5428 0025                  		addq.b	#2,$25(a0)
00010972                            
00010972                            locret_10180:
00010972 4E75                       		rts	
00010974                            ; ===========================================================================
00010974                            
00010974                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010974 4A28 0001                  		tst.b	1(a0)
00010978 6A00 D4C4                  		bpl.w	DeleteObject
0001097C 4E75                       		rts	
0001097E                            ; ===========================================================================
0001097E                            
0001097E                            Obj55_PlaySnd:				; XREF: Obj55_Index2
0001097E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010982 0200 000F                  		andi.b	#$F,d0
00010986 6600                       		bne.s	loc_101A0
00010988 303C 00C0                  		move.w	#$C0,d0
0001098C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flapping sound
00010992                            
00010992                            loc_101A0:
00010992 6100 D448                  		bsr.w	SpeedToPos
00010996 3038 D008                  		move.w	($FFFFD008).w,d0
0001099A 9068 0008                  		sub.w	8(a0),d0
0001099E 6400                       		bcc.s	loc_101B0
000109A0 4440                       		neg.w	d0
000109A2                            
000109A2                            loc_101B0:
000109A2 0C40 0080                  		cmpi.w	#$80,d0
000109A6 6500                       		bcs.s	locret_101C6
000109A8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000109AC D007                       		add.b	d7,d0
000109AE 0200 0007                  		andi.b	#7,d0
000109B2 6600                       		bne.s	locret_101C6
000109B4 5428 0025                  		addq.b	#2,$25(a0)
000109B8                            
000109B8                            locret_101C6:
000109B8 4E75                       		rts	
000109BA                            ; ===========================================================================
000109BA                            
000109BA                            Obj55_FlyUp:				; XREF: Obj55_Index2
000109BA 6100 D420                  		bsr.w	SpeedToPos
000109BE 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
000109C4 6100 0000                  		bsr.w	ObjHitCeiling
000109C8 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000109CA 6A00                       		bpl.s	locret_101F4	; if not, branch
000109CC 9368 000C                  		sub.w	d1,$C(a0)
000109D0 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000109D6 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
000109DA 4268 0012                  		clr.w	$12(a0)
000109DE 4228 001C                  		clr.b	$1C(a0)
000109E2 4228 0025                  		clr.b	$25(a0)
000109E6                            
000109E6                            locret_101F4:
000109E6 4E75                       		rts	
000109E8                            ; ===========================================================================
000109E8                            
000109E8                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000109E8 323C 0100                  		move.w	#$100,d1
000109EC 08E8 0000 0022             		bset	#0,$22(a0)
000109F2 3038 D008                  		move.w	($FFFFD008).w,d0
000109F6 9068 0008                  		sub.w	8(a0),d0
000109FA 6400                       		bcc.s	loc_10214
000109FC 4440                       		neg.w	d0
000109FE 4441                       		neg.w	d1
00010A00 08A8 0000 0022             		bclr	#0,$22(a0)
00010A06                            
00010A06                            loc_10214:
00010A06 B042                       		cmp.w	d2,d0
00010A08 4E75                       		rts	
00010A0A                            ; ===========================================================================
00010A0A 6100 D3D0                  		bsr.w	SpeedToPos
00010A0E 6100 D3F2                  		bsr.w	DisplaySprite
00010A12 4A28 0001                  		tst.b	1(a0)
00010A16 6A00 D426                  		bpl.w	DeleteObject
00010A1A 4E75                       		rts	
00010A1C                            ; ===========================================================================
00010A1C                            Ani_obj55:
00010A1C                            	include "_anim\obj55.asm"
00010A1C                            ; ---------------------------------------------------------------------------
00010A1C                            ; Animation script - Basaran enemy
00010A1C                            ; ---------------------------------------------------------------------------
00010A1C 0000                       		dc.w byte_10230-Ani_obj55
00010A1E 0000                       		dc.w byte_10234-Ani_obj55
00010A20 0000                       		dc.w byte_10238-Ani_obj55
00010A22 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010A26 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010A2A 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010A30                            		even
00010A30                            		even
00010A30                            
00010A30                            ; ---------------------------------------------------------------------------
00010A30                            ; Sprite mappings - Basaran enemy (MZ)
00010A30                            ; ---------------------------------------------------------------------------
00010A30                            Map_obj55:
00010A30                            	include "_maps\obj55.asm"
00010A30                            ; ---------------------------------------------------------------------------
00010A30                            ; Sprite mappings - Basaran enemy (MZ)
00010A30                            ; ---------------------------------------------------------------------------
00010A30 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010A34 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010A38 01                         byte_10246:	dc.b 1
00010A39 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010A3E 03                         byte_1024C:	dc.b 3
00010A3F F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010A44 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010A49 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010A4E 04                         byte_1025C:	dc.b 4
00010A4F F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010A54 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010A59 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010A5E 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010A63 04                         byte_10271:	dc.b 4
00010A64 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010A69 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010A6E 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010A73 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010A78                            		even
00010A78                            		even
00010A78                            
00010A78                            ; ===========================================================================
00010A78                            ; ---------------------------------------------------------------------------
00010A78                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010A78                            ; ---------------------------------------------------------------------------
00010A78                            
00010A78                            Obj56:					; XREF: Obj_Index
00010A78 7000                       		moveq	#0,d0
00010A7A 1028 0024                  		move.b	$24(a0),d0
00010A7E 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010A82 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010A86                            ; ===========================================================================
00010A86 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010A88 0000                       		dc.w Obj56_Action-Obj56_Index
00010A8A                            
00010A8A 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010A8C 2020                       		dc.b  $20, $20
00010A8E 1020                       		dc.b  $10, $20
00010A90 201A                       		dc.b  $20, $1A
00010A92 1027                       		dc.b  $10, $27
00010A94 1010                       		dc.b  $10, $10
00010A96 0820                       		dc.b	8, $20
00010A98 4010                       		dc.b  $40, $10
00010A9A                            ; ===========================================================================
00010A9A                            
00010A9A                            Obj56_Main:				; XREF: Obj56_Index
00010A9A 5428 0024                  		addq.b	#2,$24(a0)
00010A9E 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010AA6 317C 4000 0002             		move.w	#$4000,2(a0)
00010AAC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010AB2 6600                       		bne.s	loc_102C8
00010AB4 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010ABA                            
00010ABA                            loc_102C8:
00010ABA 117C 0004 0001             		move.b	#4,1(a0)
00010AC0 117C 0003 0018             		move.b	#3,$18(a0)
00010AC6 7000                       		moveq	#0,d0
00010AC8 1028 0028                  		move.b	$28(a0),d0
00010ACC E648                       		lsr.w	#3,d0
00010ACE 0240 000E                  		andi.w	#$E,d0
00010AD2 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010AD6 115A 0019                  		move.b	(a2)+,$19(a0)
00010ADA 1152 0016                  		move.b	(a2),$16(a0)
00010ADE E248                       		lsr.w	#1,d0
00010AE0 1140 001A                  		move.b	d0,$1A(a0)
00010AE4 3168 0008 0034             		move.w	8(a0),$34(a0)
00010AEA 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010AF0 7000                       		moveq	#0,d0
00010AF2 1012                       		move.b	(a2),d0
00010AF4 D040                       		add.w	d0,d0
00010AF6 3140 003A                  		move.w	d0,$3A(a0)
00010AFA 7000                       		moveq	#0,d0
00010AFC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010B02 6700                       		beq.s	loc_10332
00010B04 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010B08 0240 000F                  		andi.w	#$F,d0
00010B0C 5140                       		subq.w	#8,d0
00010B0E 6500                       		bcs.s	loc_10332
00010B10 E548                       		lsl.w	#2,d0
00010B12 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010B16 45F2 0000                  		lea	(a2,d0.w),a2
00010B1A 4A52                       		tst.w	(a2)
00010B1C 6A00                       		bpl.s	loc_10332
00010B1E 0868 0000 0022             		bchg	#0,$22(a0)
00010B24                            
00010B24                            loc_10332:
00010B24 1028 0028                  		move.b	$28(a0),d0
00010B28 6A00                       		bpl.s	Obj56_Action
00010B2A 0200 000F                  		andi.b	#$F,d0
00010B2E 1140 003C                  		move.b	d0,$3C(a0)
00010B32 117C 0005 0028             		move.b	#5,$28(a0)
00010B38 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010B3E 6600                       		bne.s	Obj56_ChkGone
00010B40 117C 000C 0028             		move.b	#$C,$28(a0)
00010B46 317C 0080 003A             		move.w	#$80,$3A(a0)
00010B4C                            
00010B4C                            Obj56_ChkGone:
00010B4C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B50 7000                       		moveq	#0,d0
00010B52 1028 0023                  		move.b	$23(a0),d0
00010B56 6700                       		beq.s	Obj56_Action
00010B58 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010B5E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010B64 6700                       		beq.s	Obj56_Action
00010B66 5228 0028                  		addq.b	#1,$28(a0)
00010B6A 4268 003A                  		clr.w	$3A(a0)
00010B6E                            
00010B6E                            Obj56_Action:				; XREF: Obj56_Index
00010B6E 3F28 0008                  		move.w	8(a0),-(sp)
00010B72 7000                       		moveq	#0,d0
00010B74 1028 0028                  		move.b	$28(a0),d0	; get object type
00010B78 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010B7C D040                       		add.w	d0,d0
00010B7E 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010B82 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010B86 381F                       		move.w	(sp)+,d4
00010B88 4A28 0001                  		tst.b	1(a0)
00010B8C 6A00                       		bpl.s	Obj56_ChkDel
00010B8E 7200                       		moveq	#0,d1
00010B90 1228 0019                  		move.b	$19(a0),d1
00010B94 0641 000B                  		addi.w	#$B,d1
00010B98 7400                       		moveq	#0,d2
00010B9A 1428 0016                  		move.b	$16(a0),d2
00010B9E 3602                       		move.w	d2,d3
00010BA0 5243                       		addq.w	#1,d3
00010BA2 6100 F62E                  		bsr.w	SolidObject
00010BA6                            
00010BA6                            Obj56_ChkDel:
00010BA6 3028 0034                  		move.w	$34(a0),d0
00010BAA 0240 FF80                  		andi.w	#$FF80,d0
00010BAE 3238 F700                  		move.w	($FFFFF700).w,d1
00010BB2 0441 0080                  		subi.w	#$80,d1
00010BB6 0241 FF80                  		andi.w	#$FF80,d1
00010BBA 9041                       		sub.w	d1,d0
00010BBC 0C40 0280                  		cmpi.w	#$280,d0
00010BC0 6200 D27C                  		bhi.w	DeleteObject
00010BC4 6000 D23C                  		bra.w	DisplaySprite
00010BC8                            ; ===========================================================================
00010BC8 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010BCC 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010BD0 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010BD4 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010BD8 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010BDC 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010BE0 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010BE4                            ; ===========================================================================
00010BE4                            
00010BE4                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010BE4 4E75                       		rts	
00010BE6                            ; ===========================================================================
00010BE6                            
00010BE6                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010BE6 323C 0040                  		move.w	#$40,d1
00010BEA 7000                       		moveq	#0,d0
00010BEC 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010BF0 6000                       		bra.s	Obj56_Move_LR
00010BF2                            ; ===========================================================================
00010BF2                            
00010BF2                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010BF2 323C 0080                  		move.w	#$80,d1
00010BF6 7000                       		moveq	#0,d0
00010BF8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010BFC                            
00010BFC                            Obj56_Move_LR:
00010BFC 0828 0000 0022             		btst	#0,$22(a0)
00010C02 6700                       		beq.s	loc_10416
00010C04 4440                       		neg.w	d0
00010C06 D041                       		add.w	d1,d0
00010C08                            
00010C08                            loc_10416:
00010C08 3228 0034                  		move.w	$34(a0),d1
00010C0C 9240                       		sub.w	d0,d1
00010C0E 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010C12 4E75                       		rts	
00010C14                            ; ===========================================================================
00010C14                            
00010C14                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010C14 323C 0040                  		move.w	#$40,d1
00010C18 7000                       		moveq	#0,d0
00010C1A 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010C1E 6000                       		bra.s	Obj56_Move_UD
00010C20                            ; ===========================================================================
00010C20                            
00010C20                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010C20 323C 0080                  		move.w	#$80,d1
00010C24 7000                       		moveq	#0,d0
00010C26 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C2A                            
00010C2A                            Obj56_Move_UD:
00010C2A 0828 0000 0022             		btst	#0,$22(a0)
00010C30 6700                       		beq.s	loc_10444
00010C32 4440                       		neg.w	d0
00010C34 D041                       		add.w	d1,d0
00010C36                            
00010C36                            loc_10444:
00010C36 3228 0030                  		move.w	$30(a0),d1
00010C3A 9240                       		sub.w	d0,d1
00010C3C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010C40 4E75                       		rts	
00010C42                            ; ===========================================================================
00010C42                            
00010C42                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010C42 4A28 0038                  		tst.b	$38(a0)
00010C46 6600                       		bne.s	loc_104A4
00010C48 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010C4E 6600                       		bne.s	loc_1047A	; if not, branch
00010C50 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010C56 6600                       		bne.s	loc_1047A
00010C58 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010C5C 3038 D008                  		move.w	($FFFFD008).w,d0
00010C60 B068 0008                  		cmp.w	8(a0),d0
00010C64 6400                       		bcc.s	loc_1047A
00010C66 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010C6C                            
00010C6C                            loc_1047A:
00010C6C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010C70 7000                       		moveq	#0,d0
00010C72 1028 003C                  		move.b	$3C(a0),d0
00010C76 0832 0000 0000             		btst	#0,(a2,d0.w)
00010C7C 6700                       		beq.s	loc_104AE
00010C7E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010C84 6600                       		bne.s	loc_1049E	; if not, branch
00010C86 0C00 0003                  		cmpi.b	#3,d0
00010C8A 6600                       		bne.s	loc_1049E
00010C8C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010C90                            
00010C90                            loc_1049E:
00010C90 117C 0001 0038             		move.b	#1,$38(a0)
00010C96                            
00010C96                            loc_104A4:
00010C96 4A68 003A                  		tst.w	$3A(a0)
00010C9A 6700                       		beq.s	loc_104C8
00010C9C 5568 003A                  		subq.w	#2,$3A(a0)
00010CA0                            
00010CA0                            loc_104AE:
00010CA0 3028 003A                  		move.w	$3A(a0),d0
00010CA4 0828 0000 0022             		btst	#0,$22(a0)
00010CAA 6700                       		beq.s	loc_104BC
00010CAC 4440                       		neg.w	d0
00010CAE                            
00010CAE                            loc_104BC:
00010CAE 3228 0030                  		move.w	$30(a0),d1
00010CB2 D240                       		add.w	d0,d1
00010CB4 3141 000C                  		move.w	d1,$C(a0)
00010CB8 4E75                       		rts	
00010CBA                            ; ===========================================================================
00010CBA                            
00010CBA                            loc_104C8:
00010CBA 5228 0028                  		addq.b	#1,$28(a0)
00010CBE 4228 0038                  		clr.b	$38(a0)
00010CC2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010CC6 7000                       		moveq	#0,d0
00010CC8 1028 0023                  		move.b	$23(a0),d0
00010CCC 67D2                       		beq.s	loc_104AE
00010CCE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010CD4 60CA                       		bra.s	loc_104AE
00010CD6                            ; ===========================================================================
00010CD6                            
00010CD6                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010CD6 4A28 0038                  		tst.b	$38(a0)
00010CDA 6600                       		bne.s	loc_10500
00010CDC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CE0 7000                       		moveq	#0,d0
00010CE2 1028 003C                  		move.b	$3C(a0),d0
00010CE6 4A32 0000                  		tst.b	(a2,d0.w)
00010CEA 6A00                       		bpl.s	loc_10512
00010CEC 117C 0001 0038             		move.b	#1,$38(a0)
00010CF2                            
00010CF2                            loc_10500:
00010CF2 7000                       		moveq	#0,d0
00010CF4 1028 0016                  		move.b	$16(a0),d0
00010CF8 D040                       		add.w	d0,d0
00010CFA B068 003A                  		cmp.w	$3A(a0),d0
00010CFE 6700                       		beq.s	loc_1052C
00010D00 5468 003A                  		addq.w	#2,$3A(a0)
00010D04                            
00010D04                            loc_10512:
00010D04 3028 003A                  		move.w	$3A(a0),d0
00010D08 0828 0000 0022             		btst	#0,$22(a0)
00010D0E 6700                       		beq.s	loc_10520
00010D10 4440                       		neg.w	d0
00010D12                            
00010D12                            loc_10520:
00010D12 3228 0030                  		move.w	$30(a0),d1
00010D16 D240                       		add.w	d0,d1
00010D18 3141 000C                  		move.w	d1,$C(a0)
00010D1C 4E75                       		rts	
00010D1E                            ; ===========================================================================
00010D1E                            
00010D1E                            loc_1052C:
00010D1E 5328 0028                  		subq.b	#1,$28(a0)
00010D22 4228 0038                  		clr.b	$38(a0)
00010D26 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D2A 7000                       		moveq	#0,d0
00010D2C 1028 0023                  		move.b	$23(a0),d0
00010D30 67D2                       		beq.s	loc_10512
00010D32 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010D38 60CA                       		bra.s	loc_10512
00010D3A                            ; ===========================================================================
00010D3A                            
00010D3A                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010D3A 4A28 0038                  		tst.b	$38(a0)
00010D3E 6600                       		bne.s	loc_1055E
00010D40 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010D44 6700                       		beq.s	locret_10578
00010D46 117C 0001 0038             		move.b	#1,$38(a0)
00010D4C 4268 003A                  		clr.w	$3A(a0)
00010D50                            
00010D50                            loc_1055E:
00010D50 5268 0008                  		addq.w	#1,8(a0)
00010D54 3168 0008 0034             		move.w	8(a0),$34(a0)
00010D5A 5268 003A                  		addq.w	#1,$3A(a0)
00010D5E 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010D64 6600                       		bne.s	locret_10578
00010D66 4228 0028                  		clr.b	$28(a0)
00010D6A                            
00010D6A                            locret_10578:
00010D6A 4E75                       		rts	
00010D6C                            ; ===========================================================================
00010D6C                            
00010D6C                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010D6C 4A28 0038                  		tst.b	$38(a0)
00010D70 6600                       		bne.s	loc_10598
00010D72 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D76 7000                       		moveq	#0,d0
00010D78 1028 003C                  		move.b	$3C(a0),d0
00010D7C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010D82 6700                       		beq.s	loc_105A2
00010D84 117C 0001 0038             		move.b	#1,$38(a0)
00010D8A                            
00010D8A                            loc_10598:
00010D8A 4A68 003A                  		tst.w	$3A(a0)
00010D8E 6700                       		beq.s	loc_105C0
00010D90 5568 003A                  		subq.w	#2,$3A(a0)
00010D94                            
00010D94                            loc_105A2:
00010D94 3028 003A                  		move.w	$3A(a0),d0
00010D98 0828 0000 0022             		btst	#0,$22(a0)
00010D9E 6700                       		beq.s	loc_105B4
00010DA0 4440                       		neg.w	d0
00010DA2 0640 0080                  		addi.w	#$80,d0
00010DA6                            
00010DA6                            loc_105B4:
00010DA6 3228 0034                  		move.w	$34(a0),d1
00010DAA D240                       		add.w	d0,d1
00010DAC 3141 0008                  		move.w	d1,8(a0)
00010DB0 4E75                       		rts	
00010DB2                            ; ===========================================================================
00010DB2                            
00010DB2                            loc_105C0:
00010DB2 5228 0028                  		addq.b	#1,$28(a0)
00010DB6 4228 0038                  		clr.b	$38(a0)
00010DBA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010DBE 7000                       		moveq	#0,d0
00010DC0 1028 0023                  		move.b	$23(a0),d0
00010DC4 67CE                       		beq.s	loc_105A2
00010DC6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010DCC 60C6                       		bra.s	loc_105A2
00010DCE                            ; ===========================================================================
00010DCE                            
00010DCE                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010DCE 4A28 0038                  		tst.b	$38(a0)
00010DD2 6600                       		bne.s	loc_105F8
00010DD4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010DD8 7000                       		moveq	#0,d0
00010DDA 1028 003C                  		move.b	$3C(a0),d0
00010DDE 4A32 0000                  		tst.b	(a2,d0.w)
00010DE2 6A00                       		bpl.s	loc_10606
00010DE4 117C 0001 0038             		move.b	#1,$38(a0)
00010DEA                            
00010DEA                            loc_105F8:
00010DEA 303C 0080                  		move.w	#$80,d0
00010DEE B068 003A                  		cmp.w	$3A(a0),d0
00010DF2 6700                       		beq.s	loc_10624
00010DF4 5468 003A                  		addq.w	#2,$3A(a0)
00010DF8                            
00010DF8                            loc_10606:
00010DF8 3028 003A                  		move.w	$3A(a0),d0
00010DFC 0828 0000 0022             		btst	#0,$22(a0)
00010E02 6700                       		beq.s	loc_10618
00010E04 4440                       		neg.w	d0
00010E06 0640 0080                  		addi.w	#$80,d0
00010E0A                            
00010E0A                            loc_10618:
00010E0A 3228 0034                  		move.w	$34(a0),d1
00010E0E D240                       		add.w	d0,d1
00010E10 3141 0008                  		move.w	d1,8(a0)
00010E14 4E75                       		rts	
00010E16                            ; ===========================================================================
00010E16                            
00010E16                            loc_10624:
00010E16 5328 0028                  		subq.b	#1,$28(a0)
00010E1A 4228 0038                  		clr.b	$38(a0)
00010E1E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E22 7000                       		moveq	#0,d0
00010E24 1028 0023                  		move.b	$23(a0),d0
00010E28 67CE                       		beq.s	loc_10606
00010E2A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010E30 60C6                       		bra.s	loc_10606
00010E32                            ; ===========================================================================
00010E32                            
00010E32                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010E32 323C 0010                  		move.w	#$10,d1
00010E36 7000                       		moveq	#0,d0
00010E38 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010E3C E248                       		lsr.w	#1,d0
00010E3E 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010E42 6000                       		bra.s	Obj56_Move_Sqr
00010E44                            ; ===========================================================================
00010E44                            
00010E44                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010E44 323C 0030                  		move.w	#$30,d1
00010E48 7000                       		moveq	#0,d0
00010E4A 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010E4E 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010E52 6000                       		bra.s	Obj56_Move_Sqr
00010E54                            ; ===========================================================================
00010E54                            
00010E54                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010E54 323C 0050                  		move.w	#$50,d1
00010E58 7000                       		moveq	#0,d0
00010E5A 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010E5E 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010E62 6000                       		bra.s	Obj56_Move_Sqr
00010E64                            ; ===========================================================================
00010E64                            
00010E64                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010E64 323C 0070                  		move.w	#$70,d1
00010E68 7000                       		moveq	#0,d0
00010E6A 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010E6E 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010E72                            
00010E72                            Obj56_Move_Sqr:
00010E72 4A43                       		tst.w	d3
00010E74 6600                       		bne.s	loc_1068E
00010E76 5228 0022                  		addq.b	#1,$22(a0)
00010E7A 0228 0003 0022             		andi.b	#3,$22(a0)
00010E80                            
00010E80                            loc_1068E:
00010E80 1428 0022                  		move.b	$22(a0),d2
00010E84 0202 0003                  		andi.b	#3,d2
00010E88 6600                       		bne.s	loc_106AE
00010E8A 9041                       		sub.w	d1,d0
00010E8C D068 0034                  		add.w	$34(a0),d0
00010E90 3140 0008                  		move.w	d0,8(a0)
00010E94 4441                       		neg.w	d1
00010E96 D268 0030                  		add.w	$30(a0),d1
00010E9A 3141 000C                  		move.w	d1,$C(a0)
00010E9E 4E75                       		rts	
00010EA0                            ; ===========================================================================
00010EA0                            
00010EA0                            loc_106AE:
00010EA0 5302                       		subq.b	#1,d2
00010EA2 6600                       		bne.s	loc_106CC
00010EA4 5341                       		subq.w	#1,d1
00010EA6 9041                       		sub.w	d1,d0
00010EA8 4440                       		neg.w	d0
00010EAA D068 0030                  		add.w	$30(a0),d0
00010EAE 3140 000C                  		move.w	d0,$C(a0)
00010EB2 5241                       		addq.w	#1,d1
00010EB4 D268 0034                  		add.w	$34(a0),d1
00010EB8 3141 0008                  		move.w	d1,8(a0)
00010EBC 4E75                       		rts	
00010EBE                            ; ===========================================================================
00010EBE                            
00010EBE                            loc_106CC:
00010EBE 5302                       		subq.b	#1,d2
00010EC0 6600                       		bne.s	loc_106EA
00010EC2 5341                       		subq.w	#1,d1
00010EC4 9041                       		sub.w	d1,d0
00010EC6 4440                       		neg.w	d0
00010EC8 D068 0034                  		add.w	$34(a0),d0
00010ECC 3140 0008                  		move.w	d0,8(a0)
00010ED0 5241                       		addq.w	#1,d1
00010ED2 D268 0030                  		add.w	$30(a0),d1
00010ED6 3141 000C                  		move.w	d1,$C(a0)
00010EDA 4E75                       		rts	
00010EDC                            ; ===========================================================================
00010EDC                            
00010EDC                            loc_106EA:
00010EDC 9041                       		sub.w	d1,d0
00010EDE D068 0030                  		add.w	$30(a0),d0
00010EE2 3140 000C                  		move.w	d0,$C(a0)
00010EE6 4441                       		neg.w	d1
00010EE8 D268 0034                  		add.w	$34(a0),d1
00010EEC 3141 0008                  		move.w	d1,8(a0)
00010EF0 4E75                       		rts	
00010EF2                            ; ===========================================================================
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2                            Map_obj56:
00010EF2                            	include "_maps\obj56.asm"
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010EF6 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010EFA 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010EFE 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010F02 01                         byte_10710:	dc.b 1
00010F03 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010F08 04                         byte_10716:	dc.b 4
00010F09 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010F0E E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010F13 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010F18 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010F1D 02                         byte_1072B:	dc.b 2
00010F1E E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010F23 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010F28 04                         byte_10736:	dc.b 4
00010F29 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010F2E E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010F33 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010F38 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010F3D 03                         byte_1074B:	dc.b 3
00010F3E D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010F43 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010F48 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010F4D 01                         byte_1075B:	dc.b 1
00010F4E F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010F53 02                         byte_10761:	dc.b 2
00010F54 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010F59 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010F5E 04                         byte_1076C:	dc.b 4
00010F5F F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010F64 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010F69 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010F6E F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010F74 00                         		even
00010F74 00                         		even
00010F74                            
00010F74                            ; ===========================================================================
00010F74                            ; ---------------------------------------------------------------------------
00010F74                            ; Object 57 - spiked balls (SYZ, LZ)
00010F74                            ; ---------------------------------------------------------------------------
00010F74                            
00010F74                            Obj57:					; XREF: Obj_Index
00010F74 7000                       		moveq	#0,d0
00010F76 1028 0024                  		move.b	$24(a0),d0
00010F7A 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010F7E 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010F82                            ; ===========================================================================
00010F82 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010F84 0000                       		dc.w Obj57_Move-Obj57_Index
00010F86 0000                       		dc.w Obj57_Display-Obj57_Index
00010F88                            ; ===========================================================================
00010F88                            
00010F88                            Obj57_Main:				; XREF: Obj57_Index
00010F88 5428 0024                  		addq.b	#2,$24(a0)
00010F8C 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010F94 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010F9A 117C 0004 0001             		move.b	#4,1(a0)
00010FA0 117C 0004 0018             		move.b	#4,$18(a0)
00010FA6 117C 0008 0019             		move.b	#8,$19(a0)
00010FAC 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010FB2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010FB8 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010FBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010FC4 6600                       		bne.s	loc_107E8
00010FC6 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010FCC 317C 0310 0002             		move.w	#$310,2(a0)
00010FD2 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010FDA                            
00010FDA                            loc_107E8:
00010FDA 1228 0028                  		move.b	$28(a0),d1	; get object type
00010FDE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010FE2 4881                       		ext.w	d1
00010FE4 E741                       		asl.w	#3,d1		; multiply by 8
00010FE6 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010FEA 1028 0022                  		move.b	$22(a0),d0
00010FEE E418                       		ror.b	#2,d0
00010FF0 0200 00C0                  		andi.b	#-$40,d0
00010FF4 1140 0026                  		move.b	d0,$26(a0)
00010FF8 45E8 0029                  		lea	$29(a0),a2
00010FFC 1228 0028                  		move.b	$28(a0),d1	; get object type
00011000 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011004 14FC 0000                  		move.b	#0,(a2)+
00011008 3601                       		move.w	d1,d3
0001100A E94B                       		lsl.w	#4,d3
0001100C 1143 003C                  		move.b	d3,$3C(a0)
00011010 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011012 6500                       		bcs.s	loc_10894
00011014 0828 0003 0028             		btst	#3,$28(a0)
0001101A 6700                       		beq.s	Obj57_MakeChain
0001101C 5341                       		subq.w	#1,d1
0001101E 6500                       		bcs.s	loc_10894
00011020                            
00011020                            Obj57_MakeChain:
00011020 6100 D266                  		bsr.w	SingleObjLoad
00011024 6600                       		bne.s	loc_10894
00011026 5228 0029                  		addq.b	#1,$29(a0)
0001102A 3A09                       		move.w	a1,d5
0001102C 0445 D000                  		subi.w	#-$3000,d5
00011030 EC4D                       		lsr.w	#6,d5
00011032 0245 007F                  		andi.w	#$7F,d5
00011036 14C5                       		move.b	d5,(a2)+
00011038 137C 0004 0024             		move.b	#4,$24(a1)
0001103E 1290                       		move.b	0(a0),0(a1)
00011040 2368 0004 0004             		move.l	4(a0),4(a1)
00011046 3368 0002 0002             		move.w	2(a0),2(a1)
0001104C 1368 0001 0001             		move.b	1(a0),1(a1)
00011052 1368 0018 0018             		move.b	$18(a0),$18(a1)
00011058 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001105E 1368 0020 0020             		move.b	$20(a0),$20(a1)
00011064 0403 0010                  		subi.b	#$10,d3
00011068 1343 003C                  		move.b	d3,$3C(a1)
0001106C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00011072 6600                       		bne.s	loc_10890
00011074 4A03                       		tst.b	d3
00011076 6600                       		bne.s	loc_10890
00011078 137C 0002 001A             		move.b	#2,$1A(a1)
0001107E                            
0001107E                            loc_10890:
0001107E 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011082                            
00011082                            loc_10894:
00011082 3A08                       		move.w	a0,d5
00011084 0445 D000                  		subi.w	#-$3000,d5
00011088 EC4D                       		lsr.w	#6,d5
0001108A 0245 007F                  		andi.w	#$7F,d5
0001108E 14C5                       		move.b	d5,(a2)+
00011090 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011096 6600                       		bne.s	Obj57_Move
00011098 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001109E 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000110A4                            
000110A4                            Obj57_Move:				; XREF: Obj57_Index
000110A4 6100 0000                  		bsr.w	Obj57_MoveSub
000110A8 6000 0000                  		bra.w	Obj57_ChkDel
000110AC                            ; ===========================================================================
000110AC                            
000110AC                            Obj57_MoveSub:				; XREF: Obj57_Move
000110AC 3028 003E                  		move.w	$3E(a0),d0
000110B0 D168 0026                  		add.w	d0,$26(a0)
000110B4 1028 0026                  		move.b	$26(a0),d0
000110B8 4EB9 0000 2CEC             		jsr	(CalcSine).l
000110BE 3428 0038                  		move.w	$38(a0),d2
000110C2 3628 003A                  		move.w	$3A(a0),d3
000110C6 45E8 0029                  		lea	$29(a0),a2
000110CA 7C00                       		moveq	#0,d6
000110CC 1C1A                       		move.b	(a2)+,d6
000110CE                            
000110CE                            Obj57_MoveLoop:
000110CE 7800                       		moveq	#0,d4
000110D0 181A                       		move.b	(a2)+,d4
000110D2 ED4C                       		lsl.w	#6,d4
000110D4 0684 00FF D000             		addi.l	#$FFD000,d4
000110DA 2244                       		movea.l	d4,a1
000110DC 7800                       		moveq	#0,d4
000110DE 1829 003C                  		move.b	$3C(a1),d4
000110E2 2A04                       		move.l	d4,d5
000110E4 C9C0                       		muls.w	d0,d4
000110E6 E084                       		asr.l	#8,d4
000110E8 CBC1                       		muls.w	d1,d5
000110EA E085                       		asr.l	#8,d5
000110EC D842                       		add.w	d2,d4
000110EE DA43                       		add.w	d3,d5
000110F0 3344 000C                  		move.w	d4,$C(a1)
000110F4 3345 0008                  		move.w	d5,8(a1)
000110F8 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000110FC 4E75                       		rts	
000110FE                            ; ===========================================================================
000110FE                            
000110FE                            Obj57_ChkDel:				; XREF: Obj57_Move
000110FE 3028 003A                  		move.w	$3A(a0),d0
00011102 0240 FF80                  		andi.w	#$FF80,d0
00011106 3238 F700                  		move.w	($FFFFF700).w,d1
0001110A 0441 0080                  		subi.w	#$80,d1
0001110E 0241 FF80                  		andi.w	#$FF80,d1
00011112 9041                       		sub.w	d1,d0
00011114 0C40 0280                  		cmpi.w	#$280,d0
00011118 6200 0000                  		bhi.w	Obj57_Delete
0001111C 6000 CCE4                  		bra.w	DisplaySprite
00011120                            ; ===========================================================================
00011120                            
00011120                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011120 7400                       		moveq	#0,d2
00011122 45E8 0029                  		lea	$29(a0),a2
00011126 141A                       		move.b	(a2)+,d2
00011128                            
00011128                            Obj57_DelLoop:
00011128 7000                       		moveq	#0,d0
0001112A 101A                       		move.b	(a2)+,d0
0001112C ED48                       		lsl.w	#6,d0
0001112E 0680 00FF D000             		addi.l	#$FFD000,d0
00011134 2240                       		movea.l	d0,a1
00011136 6100 CD08                  		bsr.w	DeleteObject2
0001113A 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001113E                            
0001113E 4E75                       		rts	
00011140                            ; ===========================================================================
00011140                            
00011140                            Obj57_Display:				; XREF: Obj57_Index
00011140 6000 CCC0                  		bra.w	DisplaySprite
00011144                            ; ===========================================================================
00011144                            ; ---------------------------------------------------------------------------
00011144                            ; Sprite mappings - chain of spiked balls (SYZ)
00011144                            ; ---------------------------------------------------------------------------
00011144                            Map_obj57:
00011144                            	include "_maps\obj57syz.asm"
00011144                            ; ---------------------------------------------------------------------------
00011144                            ; Sprite mappings - chain of spiked balls (SYZ)
00011144                            ; ---------------------------------------------------------------------------
00011144 0000                       		dc.w byte_10958-Map_obj57
00011146 01                         byte_10958:	dc.b 1
00011147 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001114C                            		even
0001114C                            		even
0001114C                            
0001114C                            ; ---------------------------------------------------------------------------
0001114C                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001114C                            ; ---------------------------------------------------------------------------
0001114C                            Map_obj57a:
0001114C                            	include "_maps\obj57lz.asm"
0001114C                            ; ---------------------------------------------------------------------------
0001114C                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001114C                            ; ---------------------------------------------------------------------------
0001114C 0000                       		dc.w byte_10964-Map_obj57a
0001114E 0000                       		dc.w byte_1096A-Map_obj57a
00011150 0000                       		dc.w byte_10970-Map_obj57a
00011152 01                         byte_10964:	dc.b 1
00011153 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011158 01                         byte_1096A:	dc.b 1
00011159 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001115E 01                         byte_10970:	dc.b 1
0001115F F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011164                            		even
00011164                            		even
00011164                            
00011164                            ; ===========================================================================
00011164                            ; ---------------------------------------------------------------------------
00011164                            ; Object 58 - giant spiked balls (SYZ)
00011164                            ; ---------------------------------------------------------------------------
00011164                            
00011164                            Obj58:					; XREF: Obj_Index
00011164 7000                       		moveq	#0,d0
00011166 1028 0024                  		move.b	$24(a0),d0
0001116A 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001116E 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011172                            ; ===========================================================================
00011172 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00011174 0000                       		dc.w Obj58_Move-Obj58_Index
00011176                            ; ===========================================================================
00011176                            
00011176                            Obj58_Main:				; XREF: Obj58_Index
00011176 5428 0024                  		addq.b	#2,$24(a0)
0001117A 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011182 317C 0396 0002             		move.w	#$396,2(a0)
00011188 117C 0004 0001             		move.b	#4,1(a0)
0001118E 117C 0004 0018             		move.b	#4,$18(a0)
00011194 117C 0018 0019             		move.b	#$18,$19(a0)
0001119A 3168 0008 003A             		move.w	8(a0),$3A(a0)
000111A0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000111A6 117C 0086 0020             		move.b	#$86,$20(a0)
000111AC 1228 0028                  		move.b	$28(a0),d1	; get object type
000111B0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000111B4 4881                       		ext.w	d1
000111B6 E741                       		asl.w	#3,d1		; multiply by 8
000111B8 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000111BC 1028 0022                  		move.b	$22(a0),d0
000111C0 E418                       		ror.b	#2,d0
000111C2 0200 00C0                  		andi.b	#$C0,d0
000111C6 1140 0026                  		move.b	d0,$26(a0)
000111CA 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000111D0                            
000111D0                            Obj58_Move:				; XREF: Obj58_Index
000111D0 7000                       		moveq	#0,d0
000111D2 1028 0028                  		move.b	$28(a0),d0	; get object type
000111D6 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000111DA D040                       		add.w	d0,d0
000111DC 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000111E0 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000111E4 3028 003A                  		move.w	$3A(a0),d0
000111E8 0240 FF80                  		andi.w	#$FF80,d0
000111EC 3238 F700                  		move.w	($FFFFF700).w,d1
000111F0 0441 0080                  		subi.w	#$80,d1
000111F4 0241 FF80                  		andi.w	#$FF80,d1
000111F8 9041                       		sub.w	d1,d0
000111FA 0C40 0280                  		cmpi.w	#$280,d0
000111FE 6200 CC3E                  		bhi.w	DeleteObject
00011202 6000 CBFE                  		bra.w	DisplaySprite
00011206                            ; ===========================================================================
00011206 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011208 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001120A 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001120C 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001120E                            ; ===========================================================================
0001120E                            
0001120E                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001120E 4E75                       		rts	
00011210                            ; ===========================================================================
00011210                            
00011210                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011210 323C 0060                  		move.w	#$60,d1
00011214 7000                       		moveq	#0,d0
00011216 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001121A 0828 0000 0022             		btst	#0,$22(a0)
00011220 6700                       		beq.s	loc_10A38
00011222 4440                       		neg.w	d0
00011224 D041                       		add.w	d1,d0
00011226                            
00011226                            loc_10A38:
00011226 3228 003A                  		move.w	$3A(a0),d1
0001122A 9240                       		sub.w	d0,d1
0001122C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011230 4E75                       		rts	
00011232                            ; ===========================================================================
00011232                            
00011232                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011232 323C 0060                  		move.w	#$60,d1
00011236 7000                       		moveq	#0,d0
00011238 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001123C 0828 0000 0022             		btst	#0,$22(a0)
00011242 6700                       		beq.s	loc_10A5C
00011244 4440                       		neg.w	d0
00011246 0640 0080                  		addi.w	#$80,d0
0001124A                            
0001124A                            loc_10A5C:
0001124A 3228 0038                  		move.w	$38(a0),d1
0001124E 9240                       		sub.w	d0,d1
00011250 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011254 4E75                       		rts	
00011256                            ; ===========================================================================
00011256                            
00011256                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011256 3028 003E                  		move.w	$3E(a0),d0
0001125A D168 0026                  		add.w	d0,$26(a0)
0001125E 1028 0026                  		move.b	$26(a0),d0
00011262 4EB9 0000 2CEC             		jsr	(CalcSine).l
00011268 3428 0038                  		move.w	$38(a0),d2
0001126C 3628 003A                  		move.w	$3A(a0),d3
00011270 7800                       		moveq	#0,d4
00011272 1828 003C                  		move.b	$3C(a0),d4
00011276 2A04                       		move.l	d4,d5
00011278 C9C0                       		muls.w	d0,d4
0001127A E084                       		asr.l	#8,d4
0001127C CBC1                       		muls.w	d1,d5
0001127E E085                       		asr.l	#8,d5
00011280 D842                       		add.w	d2,d4
00011282 DA43                       		add.w	d3,d5
00011284 3144 000C                  		move.w	d4,$C(a0)
00011288 3145 0008                  		move.w	d5,8(a0)
0001128C 4E75                       		rts	
0001128E                            ; ===========================================================================
0001128E                            ; ---------------------------------------------------------------------------
0001128E                            ; Sprite mappings - SBZ	spiked ball on a chain
0001128E                            ; ---------------------------------------------------------------------------
0001128E                            Map_obj15b:
0001128E                            	include "_maps\obj15sbz.asm"
0001128E                            ; ---------------------------------------------------------------------------
0001128E                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001128E                            ; ---------------------------------------------------------------------------
0001128E 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011292 0000                       		dc.w byte_10AC6-Map_obj15b
00011294 05                         byte_10AA6:	dc.b 5
00011295 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0001129A F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001129F F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000112A4 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000112A9 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000112AE 01                         byte_10AC0:	dc.b 1
000112AF F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000112B4 02                         byte_10AC6:	dc.b 2
000112B5 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000112BA E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000112C0 00                         		even
000112C0 00                         		even
000112C0                            
000112C0                            ; ===========================================================================
000112C0                            ; ---------------------------------------------------------------------------
000112C0                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000112C0                            ; ---------------------------------------------------------------------------
000112C0                            
000112C0                            Obj59:					; XREF: Obj_Index
000112C0 7000                       		moveq	#0,d0
000112C2 1028 0024                  		move.b	$24(a0),d0
000112C6 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000112CA 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000112CE 3028 0032                  		move.w	$32(a0),d0
000112D2 0240 FF80                  		andi.w	#$FF80,d0
000112D6 3238 F700                  		move.w	($FFFFF700).w,d1
000112DA 0441 0080                  		subi.w	#$80,d1
000112DE 0241 FF80                  		andi.w	#$FF80,d1
000112E2 9041                       		sub.w	d1,d0
000112E4 0C40 0280                  		cmpi.w	#$280,d0
000112E8 6200 CB54                  		bhi.w	DeleteObject
000112EC 6000 CB14                  		bra.w	DisplaySprite
000112F0                            ; ===========================================================================
000112F0 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000112F2 0000                       		dc.w Obj59_Platform-Obj59_Index
000112F4 0000                       		dc.w Obj59_Action-Obj59_Index
000112F6 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000112F8                            
000112F8 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000112FA                            
000112FA 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000112FC 2001                       		dc.b $20, 1
000112FE 3401                       		dc.b $34, 1
00011300 1003                       		dc.b $10, 3
00011302 2003                       		dc.b $20, 3
00011304 3403                       		dc.b $34, 3
00011306 1401                       		dc.b $14, 1
00011308 2401                       		dc.b $24, 1
0001130A 2C01                       		dc.b $2C, 1
0001130C 1403                       		dc.b $14, 3
0001130E 2403                       		dc.b $24, 3
00011310 2C03                       		dc.b $2C, 3
00011312 2005                       		dc.b $20, 5
00011314 2007                       		dc.b $20, 7
00011316 3009                       		dc.b $30, 9
00011318                            ; ===========================================================================
00011318                            
00011318                            Obj59_Main:				; XREF: Obj59_Index
00011318 5428 0024                  		addq.b	#2,$24(a0)
0001131C 7000                       		moveq	#0,d0
0001131E 1028 0028                  		move.b	$28(a0),d0
00011322 6A00                       		bpl.s	Obj59_Main2
00011324 5828 0024                  		addq.b	#4,$24(a0)
00011328 0240 007F                  		andi.w	#$7F,d0
0001132C C0FC 0006                  		mulu.w	#6,d0
00011330 3140 003C                  		move.w	d0,$3C(a0)
00011334 3140 003E                  		move.w	d0,$3E(a0)
00011338 588F                       		addq.l	#4,sp
0001133A 4E75                       		rts	
0001133C                            ; ===========================================================================
0001133C                            
0001133C                            Obj59_Main2:
0001133C E648                       		lsr.w	#3,d0
0001133E 0240 001E                  		andi.w	#$1E,d0
00011342 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011346 115A 0019                  		move.b	(a2)+,$19(a0)
0001134A 115A 001A                  		move.b	(a2)+,$1A(a0)
0001134E 7000                       		moveq	#0,d0
00011350 1028 0028                  		move.b	$28(a0),d0
00011354 D040                       		add.w	d0,d0
00011356 0240 001E                  		andi.w	#$1E,d0
0001135A 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001135E 101A                       		move.b	(a2)+,d0
00011360 E548                       		lsl.w	#2,d0
00011362 3140 003C                  		move.w	d0,$3C(a0)
00011366 115A 0028                  		move.b	(a2)+,$28(a0)
0001136A 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011372 317C 4000 0002             		move.w	#$4000,2(a0)
00011378 117C 0004 0001             		move.b	#4,1(a0)
0001137E 117C 0004 0018             		move.b	#4,$18(a0)
00011384 3168 0008 0032             		move.w	8(a0),$32(a0)
0001138A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011390                            
00011390                            Obj59_Platform:				; XREF: Obj59_Index
00011390 7200                       		moveq	#0,d1
00011392 1228 0019                  		move.b	$19(a0),d1
00011396 4EB9 0000 7A82             		jsr	(PlatformObject).l
0001139C 6000 0000                  		bra.w	Obj59_Types
000113A0                            ; ===========================================================================
000113A0                            
000113A0                            Obj59_Action:				; XREF: Obj59_Index
000113A0 7200                       		moveq	#0,d1
000113A2 1228 0019                  		move.b	$19(a0),d1
000113A6 4EB9 0000 7BF6             		jsr	(ExitPlatform).l
000113AC 3F28 0008                  		move.w	8(a0),-(sp)
000113B0 6100 0000                  		bsr.w	Obj59_Types
000113B4 341F                       		move.w	(sp)+,d2
000113B6 4A10                       		tst.b	0(a0)
000113B8 6700                       		beq.s	locret_10BD4
000113BA 4EF9 0000 8160             		jmp	(MvSonicOnPtfm2).l
000113C0                            ; ===========================================================================
000113C0                            
000113C0                            locret_10BD4:
000113C0 4E75                       		rts	
000113C2                            ; ===========================================================================
000113C2                            
000113C2                            Obj59_Types:
000113C2 7000                       		moveq	#0,d0
000113C4 1028 0028                  		move.b	$28(a0),d0
000113C8 0240 000F                  		andi.w	#$F,d0
000113CC D040                       		add.w	d0,d0
000113CE 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000113D2 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000113D6                            ; ===========================================================================
000113D6 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113DA 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113DE 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113E2 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113E6 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000113EA                            ; ===========================================================================
000113EA                            
000113EA                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000113EA 4E75                       		rts	
000113EC                            ; ===========================================================================
000113EC                            
000113EC                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000113EC 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000113F2 6600                       		bne.s	locret_10C0C
000113F4 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000113F8                            
000113F8                            locret_10C0C:
000113F8 4E75                       		rts	
000113FA                            ; ===========================================================================
000113FA                            
000113FA                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000113FA 6100 0000                  		bsr.w	Obj59_Move
000113FE 3028 0034                  		move.w	$34(a0),d0
00011402 4440                       		neg.w	d0
00011404 D068 0030                  		add.w	$30(a0),d0
00011408 3140 000C                  		move.w	d0,$C(a0)
0001140C 4E75                       		rts	
0001140E                            ; ===========================================================================
0001140E                            
0001140E                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001140E 6100 0000                  		bsr.w	Obj59_Move
00011412 3028 0034                  		move.w	$34(a0),d0
00011416 D068 0030                  		add.w	$30(a0),d0
0001141A 3140 000C                  		move.w	d0,$C(a0)
0001141E 4E75                       		rts	
00011420                            ; ===========================================================================
00011420                            
00011420                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011420 6100 0000                  		bsr.w	Obj59_Move
00011424 3028 0034                  		move.w	$34(a0),d0
00011428 E240                       		asr.w	#1,d0
0001142A 4440                       		neg.w	d0
0001142C D068 0030                  		add.w	$30(a0),d0
00011430 3140 000C                  		move.w	d0,$C(a0)
00011434 3028 0034                  		move.w	$34(a0),d0
00011438 D068 0032                  		add.w	$32(a0),d0
0001143C 3140 0008                  		move.w	d0,8(a0)
00011440 4E75                       		rts	
00011442                            ; ===========================================================================
00011442                            
00011442                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011442 6100 0000                  		bsr.w	Obj59_Move
00011446 3028 0034                  		move.w	$34(a0),d0
0001144A E240                       		asr.w	#1,d0
0001144C D068 0030                  		add.w	$30(a0),d0
00011450 3140 000C                  		move.w	d0,$C(a0)
00011454 3028 0034                  		move.w	$34(a0),d0
00011458 4440                       		neg.w	d0
0001145A D068 0032                  		add.w	$32(a0),d0
0001145E 3140 0008                  		move.w	d0,8(a0)
00011462 4E75                       		rts	
00011464                            ; ===========================================================================
00011464                            
00011464                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011464 6100 0000                  		bsr.w	Obj59_Move
00011468 3028 0034                  		move.w	$34(a0),d0
0001146C 4440                       		neg.w	d0
0001146E D068 0030                  		add.w	$30(a0),d0
00011472 3140 000C                  		move.w	d0,$C(a0)
00011476 4A28 0028                  		tst.b	$28(a0)
0001147A 6700 0000                  		beq.w	loc_10C94
0001147E 4E75                       		rts	
00011480                            ; ===========================================================================
00011480                            
00011480                            loc_10C94:
00011480 0828 0003 0022             		btst	#3,$22(a0)
00011486 6700                       		beq.s	Obj59_Delete
00011488 08E9 0001 0022             		bset	#1,$22(a1)
0001148E 08A9 0003 0022             		bclr	#3,$22(a1)
00011494 137C 0002 0024             		move.b	#2,$24(a1)
0001149A                            
0001149A                            Obj59_Delete:
0001149A 6000 C9A2                  		bra.w	DeleteObject
0001149E                            
0001149E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001149E                            
0001149E                            
0001149E                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001149E 3028 0038                  		move.w	$38(a0),d0
000114A2 4A28 003A                  		tst.b	$3A(a0)
000114A6 6600                       		bne.s	loc_10CC8
000114A8 0C40 0800                  		cmpi.w	#$800,d0
000114AC 6400                       		bcc.s	loc_10CD0
000114AE 0640 0010                  		addi.w	#$10,d0
000114B2 6000                       		bra.s	loc_10CD0
000114B4                            ; ===========================================================================
000114B4                            
000114B4                            loc_10CC8:
000114B4 4A40                       		tst.w	d0
000114B6 6700                       		beq.s	loc_10CD0
000114B8 0440 0010                  		subi.w	#$10,d0
000114BC                            
000114BC                            loc_10CD0:
000114BC 3140 0038                  		move.w	d0,$38(a0)
000114C0 48C0                       		ext.l	d0
000114C2 E180                       		asl.l	#8,d0
000114C4 D0A8 0034                  		add.l	$34(a0),d0
000114C8 2140 0034                  		move.l	d0,$34(a0)
000114CC 4840                       		swap	d0
000114CE 3428 003C                  		move.w	$3C(a0),d2
000114D2 B042                       		cmp.w	d2,d0
000114D4 6300                       		bls.s	loc_10CF0
000114D6 117C 0001 003A             		move.b	#1,$3A(a0)
000114DC                            
000114DC                            loc_10CF0:
000114DC D442                       		add.w	d2,d2
000114DE B042                       		cmp.w	d2,d0
000114E0 6600                       		bne.s	locret_10CFA
000114E2 4228 0028                  		clr.b	$28(a0)
000114E6                            
000114E6                            locret_10CFA:
000114E6 4E75                       		rts	
000114E8                            ; End of function Obj59_Move
000114E8                            
000114E8                            ; ===========================================================================
000114E8                            
000114E8                            Obj59_MakeMulti:			; XREF: Obj59_Index
000114E8 5368 003C                  		subq.w	#1,$3C(a0)
000114EC 6600                       		bne.s	Obj59_ChkDel
000114EE 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000114F4 6100 CD92                  		bsr.w	SingleObjLoad
000114F8 6600                       		bne.s	Obj59_ChkDel
000114FA 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000114FE 3368 0008 0008             		move.w	8(a0),8(a1)
00011504 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001150A 137C 000E 0028             		move.b	#$E,$28(a1)
00011510                            
00011510                            Obj59_ChkDel:
00011510 588F                       		addq.l	#4,sp
00011512 3028 0008                  		move.w	8(a0),d0
00011516 0240 FF80                  		andi.w	#$FF80,d0
0001151A 3238 F700                  		move.w	($FFFFF700).w,d1
0001151E 0441 0080                  		subi.w	#$80,d1
00011522 0241 FF80                  		andi.w	#$FF80,d1
00011526 9041                       		sub.w	d1,d0
00011528 0C40 0280                  		cmpi.w	#$280,d0
0001152C 6200 C910                  		bhi.w	DeleteObject
00011530 4E75                       		rts	
00011532                            ; ===========================================================================
00011532                            ; ---------------------------------------------------------------------------
00011532                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011532                            ; ---------------------------------------------------------------------------
00011532                            Map_obj59:
00011532                            	include "_maps\obj59.asm"
00011532                            ; ---------------------------------------------------------------------------
00011532                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011532                            ; ---------------------------------------------------------------------------
00011532 0000                       		dc.w byte_10D4A-Map_obj59
00011534 03                         byte_10D4A:	dc.b 3
00011535 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001153A F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001153F F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011544                            		even
00011544                            		even
00011544                            
00011544                            ; ===========================================================================
00011544                            ; ---------------------------------------------------------------------------
00011544                            ; Object 5A - platforms	moving in circles (SLZ)
00011544                            ; ---------------------------------------------------------------------------
00011544                            
00011544                            Obj5A:					; XREF: Obj_Index
00011544 7000                       		moveq	#0,d0
00011546 1028 0024                  		move.b	$24(a0),d0
0001154A 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001154E 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011552 3028 0032                  		move.w	$32(a0),d0
00011556 0240 FF80                  		andi.w	#$FF80,d0
0001155A 3238 F700                  		move.w	($FFFFF700).w,d1
0001155E 0441 0080                  		subi.w	#$80,d1
00011562 0241 FF80                  		andi.w	#$FF80,d1
00011566 9041                       		sub.w	d1,d0
00011568 0C40 0280                  		cmpi.w	#$280,d0
0001156C 6200 C8D0                  		bhi.w	DeleteObject
00011570 6000 C890                  		bra.w	DisplaySprite
00011574                            ; ===========================================================================
00011574 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011576 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011578 0000                       		dc.w Obj5A_Action-Obj5A_Index
0001157A                            ; ===========================================================================
0001157A                            
0001157A                            Obj5A_Main:				; XREF: Obj5A_Index
0001157A 5428 0024                  		addq.b	#2,$24(a0)
0001157E 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011586 317C 4000 0002             		move.w	#$4000,2(a0)
0001158C 117C 0004 0001             		move.b	#4,1(a0)
00011592 117C 0004 0018             		move.b	#4,$18(a0)
00011598 117C 0018 0019             		move.b	#$18,$19(a0)
0001159E 3168 0008 0032             		move.w	8(a0),$32(a0)
000115A4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000115AA                            
000115AA                            Obj5A_Platform:				; XREF: Obj5A_Index
000115AA 7200                       		moveq	#0,d1
000115AC 1228 0019                  		move.b	$19(a0),d1
000115B0 4EB9 0000 7A82             		jsr	(PlatformObject).l
000115B6 6000 0000                  		bra.w	Obj5A_Types
000115BA                            ; ===========================================================================
000115BA                            
000115BA                            Obj5A_Action:				; XREF: Obj5A_Index
000115BA 7200                       		moveq	#0,d1
000115BC 1228 0019                  		move.b	$19(a0),d1
000115C0 4EB9 0000 7BF6             		jsr	(ExitPlatform).l
000115C6 3F28 0008                  		move.w	8(a0),-(sp)
000115CA 6100 0000                  		bsr.w	Obj5A_Types
000115CE 341F                       		move.w	(sp)+,d2
000115D0 4EF9 0000 8160             		jmp	(MvSonicOnPtfm2).l
000115D6                            ; ===========================================================================
000115D6                            
000115D6                            Obj5A_Types:
000115D6 7000                       		moveq	#0,d0
000115D8 1028 0028                  		move.b	$28(a0),d0
000115DC 0240 000C                  		andi.w	#$C,d0
000115E0 E248                       		lsr.w	#1,d0
000115E2 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000115E6 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000115EA                            ; ===========================================================================
000115EA 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000115EC 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000115EE                            ; ===========================================================================
000115EE                            
000115EE                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000115EE 1238 FE80                  		move.b	($FFFFFE80).w,d1
000115F2 0401 0050                  		subi.b	#$50,d1
000115F6 4881                       		ext.w	d1
000115F8 1438 FE84                  		move.b	($FFFFFE84).w,d2
000115FC 0402 0050                  		subi.b	#$50,d2
00011600 4882                       		ext.w	d2
00011602 0828 0000 0028             		btst	#0,$28(a0)
00011608 6700                       		beq.s	loc_10E24
0001160A 4441                       		neg.w	d1
0001160C 4442                       		neg.w	d2
0001160E                            
0001160E                            loc_10E24:
0001160E 0828 0001 0028             		btst	#1,$28(a0)
00011614 6700                       		beq.s	loc_10E30
00011616 4441                       		neg.w	d1
00011618 C342                       		exg	d1,d2
0001161A                            
0001161A                            loc_10E30:
0001161A D268 0032                  		add.w	$32(a0),d1
0001161E 3141 0008                  		move.w	d1,8(a0)
00011622 D468 0030                  		add.w	$30(a0),d2
00011626 3142 000C                  		move.w	d2,$C(a0)
0001162A 4E75                       		rts	
0001162C                            ; ===========================================================================
0001162C                            
0001162C                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001162C 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011630 0401 0050                  		subi.b	#$50,d1
00011634 4881                       		ext.w	d1
00011636 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001163A 0402 0050                  		subi.b	#$50,d2
0001163E 4882                       		ext.w	d2
00011640 0828 0000 0028             		btst	#0,$28(a0)
00011646 6700                       		beq.s	loc_10E62
00011648 4441                       		neg.w	d1
0001164A 4442                       		neg.w	d2
0001164C                            
0001164C                            loc_10E62:
0001164C 0828 0001 0028             		btst	#1,$28(a0)
00011652 6700                       		beq.s	loc_10E6E
00011654 4441                       		neg.w	d1
00011656 C342                       		exg	d1,d2
00011658                            
00011658                            loc_10E6E:
00011658 4441                       		neg.w	d1
0001165A D268 0032                  		add.w	$32(a0),d1
0001165E 3141 0008                  		move.w	d1,8(a0)
00011662 D468 0030                  		add.w	$30(a0),d2
00011666 3142 000C                  		move.w	d2,$C(a0)
0001166A 4E75                       		rts	
0001166C                            ; ===========================================================================
0001166C                            ; ---------------------------------------------------------------------------
0001166C                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001166C                            ; ---------------------------------------------------------------------------
0001166C                            Map_obj5A:
0001166C                            	include "_maps\obj5A.asm"
0001166C                            ; ---------------------------------------------------------------------------
0001166C                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001166C                            ; ---------------------------------------------------------------------------
0001166C 0000                       		dc.w byte_10E84-Map_obj5A
0001166E 02                         byte_10E84:	dc.b 2
0001166F F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011674 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001167A 00                         		even
0001167A 00                         		even
0001167A                            
0001167A                            ; ===========================================================================
0001167A                            ; ---------------------------------------------------------------------------
0001167A                            ; Object 5B - blocks that form a staircase (SLZ)
0001167A                            ; ---------------------------------------------------------------------------
0001167A                            
0001167A                            Obj5B:					; XREF: Obj_Index
0001167A 7000                       		moveq	#0,d0
0001167C 1028 0024                  		move.b	$24(a0),d0
00011680 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011684 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011688 3028 0030                  		move.w	$30(a0),d0
0001168C 0240 FF80                  		andi.w	#$FF80,d0
00011690 3238 F700                  		move.w	($FFFFF700).w,d1
00011694 0441 0080                  		subi.w	#$80,d1
00011698 0241 FF80                  		andi.w	#$FF80,d1
0001169C 9041                       		sub.w	d1,d0
0001169E 0C40 0280                  		cmpi.w	#$280,d0
000116A2 6200 C79A                  		bhi.w	DeleteObject
000116A6 6000 C75A                  		bra.w	DisplaySprite
000116AA                            ; ===========================================================================
000116AA 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000116AC 0000                       		dc.w Obj5B_Move-Obj5B_Index
000116AE 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000116B0                            ; ===========================================================================
000116B0                            
000116B0                            Obj5B_Main:				; XREF: Obj5B_Index
000116B0 5428 0024                  		addq.b	#2,$24(a0)
000116B4 7638                       		moveq	#$38,d3
000116B6 7801                       		moveq	#1,d4
000116B8 0828 0000 0022             		btst	#0,$22(a0)
000116BE 6700                       		beq.s	loc_10EDA
000116C0 763B                       		moveq	#$3B,d3
000116C2 78FF                       		moveq	#-1,d4
000116C4                            
000116C4                            loc_10EDA:
000116C4 3428 0008                  		move.w	8(a0),d2
000116C8 2248                       		movea.l	a0,a1
000116CA 7203                       		moveq	#3,d1
000116CC 6000                       		bra.s	Obj5B_MakeBlocks
000116CE                            ; ===========================================================================
000116CE                            
000116CE                            Obj5B_Loop:
000116CE 6100 CBCE                  		bsr.w	SingleObjLoad2
000116D2 6600 0000                  		bne.w	Obj5B_Move
000116D6 137C 0004 0024             		move.b	#4,$24(a1)
000116DC                            
000116DC                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000116DC 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000116E0 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000116E8 337C 4000 0002             		move.w	#$4000,2(a1)
000116EE 137C 0004 0001             		move.b	#4,1(a1)
000116F4 137C 0003 0018             		move.b	#3,$18(a1)
000116FA 137C 0010 0019             		move.b	#$10,$19(a1)
00011700 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011706 3342 0008                  		move.w	d2,8(a1)
0001170A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011710 3368 0008 0030             		move.w	8(a0),$30(a1)
00011716 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001171C 0642 0020                  		addi.w	#$20,d2
00011720 1343 0037                  		move.b	d3,$37(a1)
00011724 2348 003C                  		move.l	a0,$3C(a1)
00011728 D604                       		add.b	d4,d3
0001172A 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001172E                            
0001172E                            Obj5B_Move:				; XREF: Obj5B_Index
0001172E 7000                       		moveq	#0,d0
00011730 1028 0028                  		move.b	$28(a0),d0
00011734 0240 0007                  		andi.w	#7,d0
00011738 D040                       		add.w	d0,d0
0001173A 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001173E 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011742                            
00011742                            Obj5B_Solid:				; XREF: Obj5B_Index
00011742 2468 003C                  		movea.l	$3C(a0),a2
00011746 7000                       		moveq	#0,d0
00011748 1028 0037                  		move.b	$37(a0),d0
0001174C 1032 0000                  		move.b	(a2,d0.w),d0
00011750 D068 0032                  		add.w	$32(a0),d0
00011754 3140 000C                  		move.w	d0,$C(a0)
00011758 7200                       		moveq	#0,d1
0001175A 1228 0019                  		move.b	$19(a0),d1
0001175E 0641 000B                  		addi.w	#$B,d1
00011762 343C 0010                  		move.w	#$10,d2
00011766 363C 0011                  		move.w	#$11,d3
0001176A 3828 0008                  		move.w	8(a0),d4
0001176E 6100 EA62                  		bsr.w	SolidObject
00011772 4A04                       		tst.b	d4
00011774 6A00                       		bpl.s	loc_10F92
00011776 1544 0036                  		move.b	d4,$36(a2)
0001177A                            
0001177A                            loc_10F92:
0001177A 0828 0003 0022             		btst	#3,$22(a0)
00011780 6700                       		beq.s	locret_10FA0
00011782 157C 0001 0036             		move.b	#1,$36(a2)
00011788                            
00011788                            locret_10FA0:
00011788 4E75                       		rts	
0001178A                            ; ===========================================================================
0001178A 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0001178C 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001178E 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011790 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011792                            ; ===========================================================================
00011792                            
00011792                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011792 4A68 0034                  		tst.w	$34(a0)
00011796 6600                       		bne.s	loc_10FC0
00011798 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001179E 6600                       		bne.s	locret_10FBE
000117A0 317C 001E 0034             		move.w	#$1E,$34(a0)
000117A6                            
000117A6                            locret_10FBE:
000117A6 4E75                       		rts	
000117A8                            ; ===========================================================================
000117A8                            
000117A8                            loc_10FC0:
000117A8 5368 0034                  		subq.w	#1,$34(a0)
000117AC 66F8                       		bne.s	locret_10FBE
000117AE 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000117B2 4E75                       		rts	
000117B4                            ; ===========================================================================
000117B4                            
000117B4                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000117B4 4A68 0034                  		tst.w	$34(a0)
000117B8 6600                       		bne.s	loc_10FE0
000117BA 4A28 0036                  		tst.b	$36(a0)
000117BE 6A00                       		bpl.s	locret_10FDE
000117C0 317C 003C 0034             		move.w	#$3C,$34(a0)
000117C6                            
000117C6                            locret_10FDE:
000117C6 4E75                       		rts	
000117C8                            ; ===========================================================================
000117C8                            
000117C8                            loc_10FE0:
000117C8 5368 0034                  		subq.w	#1,$34(a0)
000117CC 6600                       		bne.s	loc_10FEC
000117CE 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000117D2 4E75                       		rts	
000117D4                            ; ===========================================================================
000117D4                            
000117D4                            loc_10FEC:
000117D4 43E8 0038                  		lea	$38(a0),a1
000117D8 3028 0034                  		move.w	$34(a0),d0
000117DC E408                       		lsr.b	#2,d0
000117DE 0200 0001                  		andi.b	#1,d0
000117E2 12C0                       		move.b	d0,(a1)+
000117E4 0A00 0001                  		eori.b	#1,d0
000117E8 12C0                       		move.b	d0,(a1)+
000117EA 0A00 0001                  		eori.b	#1,d0
000117EE 12C0                       		move.b	d0,(a1)+
000117F0 0A00 0001                  		eori.b	#1,d0
000117F4 12C0                       		move.b	d0,(a1)+
000117F6 4E75                       		rts	
000117F8                            ; ===========================================================================
000117F8                            
000117F8                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000117F8 43E8 0038                  		lea	$38(a0),a1
000117FC 0C11 0080                  		cmpi.b	#$80,(a1)
00011800 6700                       		beq.s	locret_11038
00011802 5211                       		addq.b	#1,(a1)
00011804 7200                       		moveq	#0,d1
00011806 1219                       		move.b	(a1)+,d1
00011808 4841                       		swap	d1
0001180A E289                       		lsr.l	#1,d1
0001180C 2401                       		move.l	d1,d2
0001180E E289                       		lsr.l	#1,d1
00011810 2601                       		move.l	d1,d3
00011812 D682                       		add.l	d2,d3
00011814 4841                       		swap	d1
00011816 4842                       		swap	d2
00011818 4843                       		swap	d3
0001181A 12C3                       		move.b	d3,(a1)+
0001181C 12C2                       		move.b	d2,(a1)+
0001181E 12C1                       		move.b	d1,(a1)+
00011820                            
00011820                            locret_11038:
00011820 4E75                       		rts	
00011822 4E75                       		rts	
00011824                            ; ===========================================================================
00011824                            ; ---------------------------------------------------------------------------
00011824                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011824                            ; ---------------------------------------------------------------------------
00011824                            Map_obj5B:
00011824                            	include "_maps\obj5B.asm"
00011824                            ; ---------------------------------------------------------------------------
00011824                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011824                            ; ---------------------------------------------------------------------------
00011824 0000                       		dc.w byte_1103E-Map_obj5B
00011826 01                         byte_1103E:	dc.b 1
00011827 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001182C                            		even
0001182C                            		even
0001182C                            
0001182C                            ; ===========================================================================
0001182C                            ; ---------------------------------------------------------------------------
0001182C                            ; Object 5C - metal girders in foreground (SLZ)
0001182C                            ; ---------------------------------------------------------------------------
0001182C                            
0001182C                            Obj5C:					; XREF: Obj_Index
0001182C 7000                       		moveq	#0,d0
0001182E 1028 0024                  		move.b	$24(a0),d0
00011832 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011836 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0001183A                            ; ===========================================================================
0001183A 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0001183C 0000                       		dc.w Obj5C_Display-Obj5C_Index
0001183E                            ; ===========================================================================
0001183E                            
0001183E                            Obj5C_Main:				; XREF: Obj5C_Index
0001183E 5428 0024                  		addq.b	#2,$24(a0)
00011842 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
0001184A 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011850 117C 0010 0019             		move.b	#$10,$19(a0)
00011856                            
00011856                            Obj5C_Display:				; XREF: Obj5C_Index
00011856 2238 F700                  		move.l	($FFFFF700).w,d1
0001185A D281                       		add.l	d1,d1
0001185C 4841                       		swap	d1
0001185E 4441                       		neg.w	d1
00011860 3141 0008                  		move.w	d1,8(a0)
00011864 2238 F704                  		move.l	($FFFFF704).w,d1
00011868 D281                       		add.l	d1,d1
0001186A 4841                       		swap	d1
0001186C 0241 003F                  		andi.w	#$3F,d1
00011870 4441                       		neg.w	d1
00011872 0641 0100                  		addi.w	#$100,d1
00011876 3141 000A                  		move.w	d1,$A(a0)
0001187A 6000 C586                  		bra.w	DisplaySprite
0001187E                            ; ===========================================================================
0001187E                            ; ---------------------------------------------------------------------------
0001187E                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001187E                            ; ---------------------------------------------------------------------------
0001187E                            Map_obj5C:
0001187E                            	include "_maps\obj5C.asm"
0001187E                            ; ---------------------------------------------------------------------------
0001187E                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001187E                            ; ---------------------------------------------------------------------------
0001187E 0000                       		dc.w byte_11098-Map_obj5C
00011880 09                         byte_11098:	dc.b 9
00011881 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011886 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001188B C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011890 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011895 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001189A 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001189F 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000118A4 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000118A9 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000118AE                            		even
000118AE                            		even
000118AE                            
000118AE                            ; ===========================================================================
000118AE                            ; ---------------------------------------------------------------------------
000118AE                            ; Object 1B - water surface (LZ)
000118AE                            ; ---------------------------------------------------------------------------
000118AE                            
000118AE                            Obj1B:					; XREF: Obj_Index
000118AE 7000                       		moveq	#0,d0
000118B0 1028 0024                  		move.b	$24(a0),d0
000118B4 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000118B8 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000118BC                            ; ===========================================================================
000118BC 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000118BE 0000                       		dc.w Obj1B_Action-Obj1B_Index
000118C0                            ; ===========================================================================
000118C0                            
000118C0                            Obj1B_Main:				; XREF: Obj1B_Index
000118C0 5428 0024                  		addq.b	#2,$24(a0)
000118C4 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
000118CC 317C C300 0002             		move.w	#$C300,2(a0)
000118D2 117C 0004 0001             		move.b	#4,1(a0)
000118D8 117C 0080 0019             		move.b	#$80,$19(a0)
000118DE 3168 0008 0030             		move.w	8(a0),$30(a0)
000118E4                            
000118E4                            Obj1B_Action:				; XREF: Obj1B_Index
000118E4 3238 F700                  		move.w	($FFFFF700).w,d1
000118E8 0241 FFE0                  		andi.w	#$FFE0,d1
000118EC D268 0030                  		add.w	$30(a0),d1
000118F0 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000118F6 6700                       		beq.s	loc_11114
000118F8 0641 0020                  		addi.w	#$20,d1
000118FC                            
000118FC                            loc_11114:
000118FC 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011900 3238 F646                  		move.w	($FFFFF646).w,d1
00011904 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011908 4A28 0032                  		tst.b	$32(a0)
0001190C 6600                       		bne.s	Obj1B_Animate
0001190E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011914 6700                       		beq.s	loc_1114A	; if not, branch
00011916 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0001191A 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011920 6000                       		bra.s	Obj1B_Display
00011922                            ; ===========================================================================
00011922                            
00011922                            Obj1B_Animate:				; XREF: loc_11114
00011922 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011926 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011928 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001192E 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011932                            
00011932                            loc_1114A:				; XREF: loc_11114
00011932 5328 001E                  		subq.b	#1,$1E(a0)
00011936 6A00                       		bpl.s	Obj1B_Display
00011938 117C 0007 001E             		move.b	#7,$1E(a0)
0001193E 5228 001A                  		addq.b	#1,$1A(a0)
00011942 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011948 6500                       		bcs.s	Obj1B_Display
0001194A 117C 0000 001A             		move.b	#0,$1A(a0)
00011950                            
00011950                            Obj1B_Display:
00011950 6000 C4B0                  		bra.w	DisplaySprite
00011954                            ; ===========================================================================
00011954                            ; ---------------------------------------------------------------------------
00011954                            ; Sprite mappings - water surface (LZ)
00011954                            ; ---------------------------------------------------------------------------
00011954                            Map_obj1B:
00011954                            	include "_maps\obj1B.asm"
00011954                            ; ---------------------------------------------------------------------------
00011954                            ; Sprite mappings - water surface (LZ)
00011954                            ; ---------------------------------------------------------------------------
00011954 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011958 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
0001195C 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011960 03                         byte_11178:	dc.b 3
00011961 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011966 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001196B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011970 03                         byte_11188:	dc.b 3
00011971 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011976 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001197B FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011980 03                         byte_11198:	dc.b 3
00011981 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011986 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001198B FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011990 06                         byte_111A8:	dc.b 6
00011991 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011996 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001199B FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000119A0 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000119A5 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000119AA FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000119AF 06                         byte_111C7:	dc.b 6
000119B0 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000119B5 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
000119BA FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000119BF FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
000119C4 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000119C9 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
000119CE 06                         byte_111E6:	dc.b 6
000119CF FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000119D4 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
000119D9 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000119DE FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000119E3 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000119E8 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000119EE 00                         		even
000119EE 00                         		even
000119EE                            
000119EE                            ; ===========================================================================
000119EE                            ; ---------------------------------------------------------------------------
000119EE                            ; Object 0B - pole that	breaks (LZ)
000119EE                            ; ---------------------------------------------------------------------------
000119EE                            
000119EE                            Obj0B:					; XREF: Obj_Index
000119EE 7000                       		moveq	#0,d0
000119F0 1028 0024                  		move.b	$24(a0),d0
000119F4 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000119F8 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000119FC                            ; ===========================================================================
000119FC 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000119FE 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011A00 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011A02                            ; ===========================================================================
00011A02                            
00011A02                            Obj0B_Main:				; XREF: Obj0B_Index
00011A02 5428 0024                  		addq.b	#2,$24(a0)
00011A06 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011A0E 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011A14 117C 0004 0001             		move.b	#4,1(a0)
00011A1A 117C 0008 0019             		move.b	#8,$19(a0)
00011A20 117C 0004 0018             		move.b	#4,$18(a0)
00011A26 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011A2C 7000                       		moveq	#0,d0
00011A2E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011A32 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011A36 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011A3A                            
00011A3A                            Obj0B_Action:				; XREF: Obj0B_Index
00011A3A 4A28 0032                  		tst.b	$32(a0)
00011A3E 6700                       		beq.s	Obj0B_Grab
00011A40 4A68 0030                  		tst.w	$30(a0)
00011A44 6700                       		beq.s	Obj0B_MoveUp
00011A46 5368 0030                  		subq.w	#1,$30(a0)
00011A4A 6600                       		bne.s	Obj0B_MoveUp
00011A4C 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011A52 6000                       		bra.s	Obj0B_Release
00011A54                            ; ===========================================================================
00011A54                            
00011A54                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011A54 43F8 D000                  		lea	($FFFFD000).w,a1
00011A58 3028 000C                  		move.w	$C(a0),d0
00011A5C 0440 0018                  		subi.w	#$18,d0
00011A60 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011A66 6700                       		beq.s	Obj0B_MoveDown
00011A68 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011A6C B069 000C                  		cmp.w	$C(a1),d0
00011A70 6500                       		bcs.s	Obj0B_MoveDown
00011A72 3340 000C                  		move.w	d0,$C(a1)
00011A76                            
00011A76                            Obj0B_MoveDown:
00011A76 0640 0024                  		addi.w	#$24,d0
00011A7A 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011A80 6700                       		beq.s	Obj0B_LetGo
00011A82 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011A86 B069 000C                  		cmp.w	$C(a1),d0
00011A8A 6400                       		bcc.s	Obj0B_LetGo
00011A8C 3340 000C                  		move.w	d0,$C(a1)
00011A90                            
00011A90                            Obj0B_LetGo:
00011A90 1038 F603                  		move.b	($FFFFF603).w,d0
00011A94 0240 0070                  		andi.w	#$70,d0
00011A98 6700                       		beq.s	Obj0B_Display
00011A9A                            
00011A9A                            Obj0B_Release:				; XREF: Obj0B_Action
00011A9A 4228 0020                  		clr.b	$20(a0)
00011A9E 5428 0024                  		addq.b	#2,$24(a0)
00011AA2 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011AA6 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011AAA 4228 0032                  		clr.b	$32(a0)
00011AAE 6000                       		bra.s	Obj0B_Display
00011AB0                            ; ===========================================================================
00011AB0                            
00011AB0                            Obj0B_Grab:				; XREF: Obj0B_Action
00011AB0 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011AB4 6700                       		beq.s	Obj0B_Display	; if not, branch
00011AB6 43F8 D000                  		lea	($FFFFD000).w,a1
00011ABA 3028 0008                  		move.w	8(a0),d0
00011ABE 0640 0014                  		addi.w	#$14,d0
00011AC2 B069 0008                  		cmp.w	8(a1),d0
00011AC6 6400                       		bcc.s	Obj0B_Display
00011AC8 4228 0021                  		clr.b	$21(a0)
00011ACC 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011AD2 6400                       		bcc.s	Obj0B_Display
00011AD4 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011AD8 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011ADC 3028 0008                  		move.w	8(a0),d0
00011AE0 0640 0014                  		addi.w	#$14,d0
00011AE4 3340 0008                  		move.w	d0,8(a1)
00011AE8 08A9 0000 0022             		bclr	#0,$22(a1)
00011AEE 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011AF4 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011AFA 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011B00 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011B06                            
00011B06                            Obj0B_Display:				; XREF: Obj0B_Index
00011B06 6000 E3A2                  		bra.w	MarkObjGone
00011B0A                            ; ===========================================================================
00011B0A                            ; ---------------------------------------------------------------------------
00011B0A                            ; Sprite mappings - pole that breaks (LZ)
00011B0A                            ; ---------------------------------------------------------------------------
00011B0A                            Map_obj0B:
00011B0A                            	include "_maps\obj0B.asm"
00011B0A                            ; ---------------------------------------------------------------------------
00011B0A                            ; Sprite mappings - pole that breaks (LZ)
00011B0A                            ; ---------------------------------------------------------------------------
00011B0A 0000                       		dc.w byte_11326-Map_obj0B
00011B0C 0000                       		dc.w byte_11331-Map_obj0B
00011B0E 02                         byte_11326:	dc.b 2			; normal pole
00011B0F E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011B14 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011B19 04                         byte_11331:	dc.b 4			; broken pole
00011B1A E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011B1F F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011B24 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011B29 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011B2E                            		even
00011B2E                            		even
00011B2E                            
00011B2E                            ; ===========================================================================
00011B2E                            ; ---------------------------------------------------------------------------
00011B2E                            ; Object 0C - flapping door (LZ)
00011B2E                            ; ---------------------------------------------------------------------------
00011B2E                            
00011B2E                            Obj0C:					; XREF: Obj_Index
00011B2E 7000                       		moveq	#0,d0
00011B30 1028 0024                  		move.b	$24(a0),d0
00011B34 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011B38 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011B3C                            ; ===========================================================================
00011B3C 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011B3E 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011B40                            ; ===========================================================================
00011B40                            
00011B40                            Obj0C_Main:				; XREF: Obj0C_Index
00011B40 5428 0024                  		addq.b	#2,$24(a0)
00011B44 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011B4C 317C 4328 0002             		move.w	#$4328,2(a0)
00011B52 0028 0004 0001             		ori.b	#4,1(a0)
00011B58 117C 0028 0019             		move.b	#$28,$19(a0)
00011B5E 7000                       		moveq	#0,d0
00011B60 1028 0028                  		move.b	$28(a0),d0	; get object type
00011B64 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011B68 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011B6C                            
00011B6C                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011B6C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B70 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011B72 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011B78 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011B7E 4A28 0001                  		tst.b	1(a0)
00011B82 6A00                       		bpl.s	Obj0C_Solid
00011B84 303C 00BB                  		move.w	#$BB,d0
00011B88 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00011B8E                            
00011B8E                            Obj0C_Solid:
00011B8E 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011B94 6100 932C                  		bsr.w	AnimateSprite
00011B98 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011B9C 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011BA0 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011BA2 3038 D008                  		move.w	($FFFFD008).w,d0
00011BA6 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011BAA 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011BAC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011BB2 323C 0013                  		move.w	#$13,d1
00011BB6 343C 0020                  		move.w	#$20,d2
00011BBA 3602                       		move.w	d2,d3
00011BBC 5243                       		addq.w	#1,d3
00011BBE 3828 0008                  		move.w	8(a0),d4
00011BC2 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011BC6                            
00011BC6                            Obj0C_Display:
00011BC6 6000 E2E2                  		bra.w	MarkObjGone
00011BCA                            ; ===========================================================================
00011BCA                            Ani_obj0C:
00011BCA                            	include "_anim\obj0C.asm"
00011BCA                            ; ---------------------------------------------------------------------------
00011BCA                            ; Animation script - flapping door (LZ)
00011BCA                            ; ---------------------------------------------------------------------------
00011BCA 0000                       		dc.w byte_113E6-Ani_obj0C
00011BCC 0000                       		dc.w byte_113EC-Ani_obj0C
00011BCE 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011BD4 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011BDA                            		even
00011BDA                            		even
00011BDA                            
00011BDA                            ; ---------------------------------------------------------------------------
00011BDA                            ; Sprite mappings - flapping door (LZ)
00011BDA                            ; ---------------------------------------------------------------------------
00011BDA                            Map_obj0C:
00011BDA                            	include "_maps\obj0C.asm"
00011BDA                            ; ---------------------------------------------------------------------------
00011BDA                            ; Sprite mappings - flapping door (LZ)
00011BDA                            ; ---------------------------------------------------------------------------
00011BDA 0000                       		dc.w byte_113F8-Map_obj0C
00011BDC 0000                       		dc.w byte_11403-Map_obj0C
00011BDE 0000                       		dc.w byte_1140E-Map_obj0C
00011BE0 02                         byte_113F8:	dc.b 2
00011BE1 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011BE6 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011BEB 02                         byte_11403:	dc.b 2
00011BEC DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011BF1 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011BF6 02                         byte_1140E:	dc.b 2
00011BF7 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011BFC 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011C02 00                         		even
00011C02 00                         		even
00011C02                            
00011C02                            ; ===========================================================================
00011C02                            ; ---------------------------------------------------------------------------
00011C02                            ; Object 71 - invisible	solid blocks
00011C02                            ; ---------------------------------------------------------------------------
00011C02                            
00011C02                            Obj71:					; XREF: Obj_Index
00011C02 7000                       		moveq	#0,d0
00011C04 1028 0024                  		move.b	$24(a0),d0
00011C08 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011C0C 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011C10                            ; ===========================================================================
00011C10 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011C12 0000                       		dc.w Obj71_Solid-Obj71_Index
00011C14                            ; ===========================================================================
00011C14                            
00011C14                            Obj71_Main:				; XREF: Obj71_Index
00011C14 5428 0024                  		addq.b	#2,$24(a0)
00011C18 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011C20 317C 8680 0002             		move.w	#$8680,2(a0)
00011C26 0028 0004 0001             		ori.b	#4,1(a0)
00011C2C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C30 1200                       		move.b	d0,d1
00011C32 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011C36 0640 0010                  		addi.w	#$10,d0
00011C3A E248                       		lsr.w	#1,d0
00011C3C 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011C40 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011C44 5241                       		addq.w	#1,d1
00011C46 E749                       		lsl.w	#3,d1
00011C48 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011C4C                            
00011C4C                            Obj71_Solid:				; XREF: Obj71_Index
00011C4C 6100 C42E                  		bsr.w	ChkObjOnScreen
00011C50 6600                       		bne.s	Obj71_ChkDel
00011C52 7200                       		moveq	#0,d1
00011C54 1228 0019                  		move.b	$19(a0),d1
00011C58 0641 000B                  		addi.w	#$B,d1
00011C5C 7400                       		moveq	#0,d2
00011C5E 1428 0016                  		move.b	$16(a0),d2
00011C62 3602                       		move.w	d2,d3
00011C64 5243                       		addq.w	#1,d3
00011C66 3828 0008                  		move.w	8(a0),d4
00011C6A 6100 E5A8                  		bsr.w	SolidObject71
00011C6E                            
00011C6E                            Obj71_ChkDel:
00011C6E 3028 0008                  		move.w	8(a0),d0
00011C72 0240 FF80                  		andi.w	#$FF80,d0
00011C76 3238 F700                  		move.w	($FFFFF700).w,d1
00011C7A 0441 0080                  		subi.w	#$80,d1
00011C7E 0241 FF80                  		andi.w	#$FF80,d1
00011C82 9041                       		sub.w	d1,d0
00011C84 0C40 0280                  		cmpi.w	#$280,d0
00011C88 6200                       		bhi.s	Obj71_Delete
00011C8A 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011C8E 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011C90 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011C94                            ; ===========================================================================
00011C94                            
00011C94                            Obj71_NoDisplay:
00011C94 4E75                       		rts	
00011C96                            ; ===========================================================================
00011C96                            
00011C96                            Obj71_Delete:
00011C96 4EFA C1A6                  		jmp	DeleteObject
00011C9A                            ; ===========================================================================
00011C9A                            ; ---------------------------------------------------------------------------
00011C9A                            ; Sprite mappings - invisible solid blocks
00011C9A                            ; ---------------------------------------------------------------------------
00011C9A                            Map_obj71:
00011C9A                            	include "_maps\obj71.asm"
00011C9A                            ; ---------------------------------------------------------------------------
00011C9A                            ; Sprite mappings - invisible solid blocks
00011C9A                            ; ---------------------------------------------------------------------------
00011C9A 0000                       		dc.w byte_114BC-Map_obj71
00011C9C 0000                       		dc.w byte_114D1-Map_obj71
00011C9E 0000                       		dc.w byte_114E6-Map_obj71
00011CA0 04                         byte_114BC:	dc.b 4
00011CA1 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011CA6 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011CAB 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011CB0 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011CB5 04                         byte_114D1:	dc.b 4
00011CB6 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011CBB E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011CC0 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011CC5 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011CCA 04                         byte_114E6:	dc.b 4
00011CCB E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011CD0 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011CD5 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011CDA 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011CE0 00                         		even
00011CE0 00                         		even
00011CE0                            
00011CE0                            ; ===========================================================================
00011CE0                            ; ---------------------------------------------------------------------------
00011CE0                            ; Object 5D - fans (SLZ)
00011CE0                            ; ---------------------------------------------------------------------------
00011CE0                            
00011CE0                            Obj5D:					; XREF: Obj_Index
00011CE0 7000                       		moveq	#0,d0
00011CE2 1028 0024                  		move.b	$24(a0),d0
00011CE6 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011CEA 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011CEE                            ; ===========================================================================
00011CEE 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011CF0 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011CF2                            ; ===========================================================================
00011CF2                            
00011CF2                            Obj5D_Main:				; XREF: Obj5D_Index
00011CF2 5428 0024                  		addq.b	#2,$24(a0)
00011CF6 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011CFE 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011D04 0028 0004 0001             		ori.b	#4,1(a0)
00011D0A 117C 0010 0019             		move.b	#$10,$19(a0)
00011D10 117C 0004 0018             		move.b	#4,$18(a0)
00011D16                            
00011D16                            Obj5D_Delay:				; XREF: Obj5D_Index
00011D16 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011D1C 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011D1E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011D22 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011D24 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011D2A 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011D30 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011D32 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011D38                            
00011D38                            Obj5D_Blow:
00011D38 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011D3C 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011D40 43F8 D000                  		lea	($FFFFD000).w,a1
00011D44 3029 0008                  		move.w	8(a1),d0
00011D48 9068 0008                  		sub.w	8(a0),d0
00011D4C 0828 0000 0022             		btst	#0,$22(a0)
00011D52 6600                       		bne.s	Obj5D_ChkSonic
00011D54 4440                       		neg.w	d0
00011D56                            
00011D56                            Obj5D_ChkSonic:
00011D56 0640 0050                  		addi.w	#$50,d0
00011D5A 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011D5E 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011D60 3229 000C                  		move.w	$C(a1),d1
00011D64 0641 0060                  		addi.w	#$60,d1
00011D68 9268 000C                  		sub.w	$C(a0),d1
00011D6C 6500                       		bcs.s	Obj5D_Animate
00011D6E 0C41 0070                  		cmpi.w	#$70,d1
00011D72 6400                       		bcc.s	Obj5D_Animate
00011D74 0440 0050                  		subi.w	#$50,d0
00011D78 6400                       		bcc.s	loc_1159A
00011D7A 4640                       		not.w	d0
00011D7C D040                       		add.w	d0,d0
00011D7E                            
00011D7E                            loc_1159A:
00011D7E 0640 0060                  		addi.w	#$60,d0
00011D82 0828 0000 0022             		btst	#0,$22(a0)
00011D88 6600                       		bne.s	loc_115A8
00011D8A 4440                       		neg.w	d0
00011D8C                            
00011D8C                            loc_115A8:
00011D8C 4400                       		neg.b	d0
00011D8E E840                       		asr.w	#4,d0
00011D90 0828 0000 0028             		btst	#0,$28(a0)
00011D96 6700                       		beq.s	Obj5D_MoveSonic
00011D98 4440                       		neg.w	d0
00011D9A                            
00011D9A                            Obj5D_MoveSonic:
00011D9A D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011D9E                            
00011D9E                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011D9E 5328 001E                  		subq.b	#1,$1E(a0)
00011DA2 6A00                       		bpl.s	Obj5D_ChkDel
00011DA4 117C 0000 001E             		move.b	#0,$1E(a0)
00011DAA 5228 001B                  		addq.b	#1,$1B(a0)
00011DAE 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011DB4 6500                       		bcs.s	loc_115D8
00011DB6 117C 0000 001B             		move.b	#0,$1B(a0)
00011DBC                            
00011DBC                            loc_115D8:
00011DBC 7000                       		moveq	#0,d0
00011DBE 0828 0000 0028             		btst	#0,$28(a0)
00011DC4 6700                       		beq.s	loc_115E4
00011DC6 7002                       		moveq	#2,d0
00011DC8                            
00011DC8                            loc_115E4:
00011DC8 D028 001B                  		add.b	$1B(a0),d0
00011DCC 1140 001A                  		move.b	d0,$1A(a0)
00011DD0                            
00011DD0                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011DD0 6100 C030                  		bsr.w	DisplaySprite
00011DD4 3028 0008                  		move.w	8(a0),d0
00011DD8 0240 FF80                  		andi.w	#$FF80,d0
00011DDC 3238 F700                  		move.w	($FFFFF700).w,d1
00011DE0 0441 0080                  		subi.w	#$80,d1
00011DE4 0241 FF80                  		andi.w	#$FF80,d1
00011DE8 9041                       		sub.w	d1,d0
00011DEA 0C40 0280                  		cmpi.w	#$280,d0
00011DEE 6200 C04E                  		bhi.w	DeleteObject
00011DF2 4E75                       		rts	
00011DF4                            ; ===========================================================================
00011DF4                            ; ---------------------------------------------------------------------------
00011DF4                            ; Sprite mappings - fans (SLZ)
00011DF4                            ; ---------------------------------------------------------------------------
00011DF4                            Map_obj5D:
00011DF4                            	include "_maps\obj5D.asm"
00011DF4                            ; ---------------------------------------------------------------------------
00011DF4                            ; Sprite mappings - fans (SLZ)
00011DF4                            ; ---------------------------------------------------------------------------
00011DF4 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011DF8 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011DFC 0000                       		dc.w byte_1161A-Map_obj5D
00011DFE 02                         byte_1161A:	dc.b 2
00011DFF F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011E04 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011E09 02                         byte_11625:	dc.b 2
00011E0A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011E0F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011E14 02                         byte_11630:	dc.b 2
00011E15 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011E1A 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011E20 00                         		even
00011E20 00                         		even
00011E20                            
00011E20                            ; ===========================================================================
00011E20                            ; ---------------------------------------------------------------------------
00011E20                            ; Object 5E - seesaws (SLZ)
00011E20                            ; ---------------------------------------------------------------------------
00011E20                            
00011E20                            Obj5E:					; XREF: Obj_Index
00011E20 7000                       		moveq	#0,d0
00011E22 1028 0024                  		move.b	$24(a0),d0
00011E26 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011E2A 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011E2E 3028 0030                  		move.w	$30(a0),d0
00011E32 0240 FF80                  		andi.w	#$FF80,d0
00011E36 3238 F700                  		move.w	($FFFFF700).w,d1
00011E3A 0441 0080                  		subi.w	#$80,d1
00011E3E 0241 FF80                  		andi.w	#$FF80,d1
00011E42 9041                       		sub.w	d1,d0
00011E44 6B00 BFF8                  		bmi.w	DeleteObject
00011E48 0C40 0280                  		cmpi.w	#$280,d0
00011E4C 6200 BFF0                  		bhi.w	DeleteObject
00011E50 6000 BFB0                  		bra.w	DisplaySprite
00011E54                            ; ===========================================================================
00011E54 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011E56 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011E58 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011E5A 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011E5C 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011E5E 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011E60                            ; ===========================================================================
00011E60                            
00011E60                            Obj5E_Main:				; XREF: Obj5E_Index
00011E60 5428 0024                  		addq.b	#2,$24(a0)
00011E64 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011E6C 317C 0374 0002             		move.w	#$374,2(a0)
00011E72 0028 0004 0001             		ori.b	#4,1(a0)
00011E78 117C 0004 0018             		move.b	#4,$18(a0)
00011E7E 117C 0030 0019             		move.b	#$30,$19(a0)
00011E84 3168 0008 0030             		move.w	8(a0),$30(a0)
00011E8A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011E8E 6600                       		bne.s	loc_116D2	; if not, branch
00011E90 6100 C40C                  		bsr.w	SingleObjLoad2
00011E94 6600                       		bne.s	loc_116D2
00011E96 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011E9A 5C29 0024                  		addq.b	#6,$24(a1)
00011E9E 3368 0008 0008             		move.w	8(a0),8(a1)
00011EA4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011EAA 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011EB0 2348 003C                  		move.l	a0,$3C(a1)
00011EB4                            
00011EB4                            loc_116D2:
00011EB4 0828 0000 0022             		btst	#0,$22(a0)
00011EBA 6700                       		beq.s	loc_116E0
00011EBC 117C 0002 001A             		move.b	#2,$1A(a0)
00011EC2                            
00011EC2                            loc_116E0:
00011EC2 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011EC8                            
00011EC8                            Obj5E_Slope:				; XREF: Obj5E_Index
00011EC8 1228 003A                  		move.b	$3A(a0),d1
00011ECC 6100 0000                  		bsr.w	loc_11766
00011ED0 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011ED6 0828 0000 001A             		btst	#0,$1A(a0)
00011EDC 6700                       		beq.s	loc_11702
00011EDE 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011EE4                            
00011EE4                            loc_11702:
00011EE4 43F8 D000                  		lea	($FFFFD000).w,a1
00011EE8 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011EEE 323C 0030                  		move.w	#$30,d1
00011EF2 4EB9 0000 7B56             		jsr	(SlopeObject).l
00011EF8 4E75                       		rts	
00011EFA                            ; ===========================================================================
00011EFA                            
00011EFA                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011EFA 6100 0000                  		bsr.w	loc_1174A
00011EFE 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011F04 0828 0000 001A             		btst	#0,$1A(a0)
00011F0A 6700                       		beq.s	loc_11730
00011F0C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011F12                            
00011F12                            loc_11730:
00011F12 323C 0030                  		move.w	#$30,d1
00011F16 4EB9 0000 7BF6             		jsr	(ExitPlatform).l
00011F1C 323C 0030                  		move.w	#$30,d1
00011F20 3428 0008                  		move.w	8(a0),d2
00011F24 4EB9 0000 8BE6             		jsr	SlopeObject2
00011F2A 4E75                       		rts	
00011F2C                            ; ===========================================================================
00011F2C                            
00011F2C                            loc_1174A:				; XREF: Obj5E_Slope2
00011F2C 7202                       		moveq	#2,d1
00011F2E 43F8 D000                  		lea	($FFFFD000).w,a1
00011F32 3028 0008                  		move.w	8(a0),d0
00011F36 9069 0008                  		sub.w	8(a1),d0
00011F3A 6400                       		bcc.s	loc_1175E
00011F3C 4440                       		neg.w	d0
00011F3E 7200                       		moveq	#0,d1
00011F40                            
00011F40                            loc_1175E:
00011F40 0C40 0008                  		cmpi.w	#8,d0
00011F44 6400                       		bcc.s	loc_11766
00011F46 7201                       		moveq	#1,d1
00011F48                            
00011F48                            loc_11766:
00011F48 1028 001A                  		move.b	$1A(a0),d0
00011F4C B001                       		cmp.b	d1,d0
00011F4E 6700                       		beq.s	locret_11790
00011F50 6400                       		bcc.s	loc_11772
00011F52 5400                       		addq.b	#2,d0
00011F54                            
00011F54                            loc_11772:
00011F54 5300                       		subq.b	#1,d0
00011F56 1140 001A                  		move.b	d0,$1A(a0)
00011F5A 1141 003A                  		move.b	d1,$3A(a0)
00011F5E 08A8 0000 0001             		bclr	#0,1(a0)
00011F64 0828 0001 001A             		btst	#1,$1A(a0)
00011F6A 6700                       		beq.s	locret_11790
00011F6C 08E8 0000 0001             		bset	#0,1(a0)
00011F72                            
00011F72                            locret_11790:
00011F72 4E75                       		rts	
00011F74                            ; ===========================================================================
00011F74                            
00011F74                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011F74 5428 0024                  		addq.b	#2,$24(a0)
00011F78 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011F80 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011F86 0028 0004 0001             		ori.b	#4,1(a0)
00011F8C 117C 0004 0018             		move.b	#4,$18(a0)
00011F92 117C 008B 0020             		move.b	#$8B,$20(a0)
00011F98 117C 000C 0019             		move.b	#$C,$19(a0)
00011F9E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011FA4 0668 0028 0008             		addi.w	#$28,8(a0)
00011FAA 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011FB0 117C 0001 001A             		move.b	#1,$1A(a0)
00011FB6 0828 0000 0022             		btst	#0,$22(a0)
00011FBC 6700                       		beq.s	Obj5E_MoveSpike
00011FBE 0468 0050 0008             		subi.w	#$50,8(a0)
00011FC4 117C 0002 003A             		move.b	#2,$3A(a0)
00011FCA                            
00011FCA                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011FCA 2268 003C                  		movea.l	$3C(a0),a1
00011FCE 7000                       		moveq	#0,d0
00011FD0 1028 003A                  		move.b	$3A(a0),d0
00011FD4 9029 003A                  		sub.b	$3A(a1),d0
00011FD8 6700                       		beq.s	loc_1183E
00011FDA 6400                       		bcc.s	loc_117FC
00011FDC 4400                       		neg.b	d0
00011FDE                            
00011FDE                            loc_117FC:
00011FDE 323C F7E8                  		move.w	#-$818,d1
00011FE2 343C FEEC                  		move.w	#-$114,d2
00011FE6 0C00 0001                  		cmpi.b	#1,d0
00011FEA 6700                       		beq.s	loc_11822
00011FEC 323C F510                  		move.w	#-$AF0,d1
00011FF0 343C FF34                  		move.w	#-$CC,d2
00011FF4 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011FFA 6D00                       		blt.s	loc_11822
00011FFC 323C F200                  		move.w	#-$E00,d1
00012000 343C FF60                  		move.w	#-$A0,d2
00012004                            
00012004                            loc_11822:
00012004 3141 0012                  		move.w	d1,$12(a0)
00012008 3142 0010                  		move.w	d2,$10(a0)
0001200C 3028 0008                  		move.w	8(a0),d0
00012010 9068 0030                  		sub.w	$30(a0),d0
00012014 6400                       		bcc.s	loc_11838
00012016 4468 0010                  		neg.w	$10(a0)
0001201A                            
0001201A                            loc_11838:
0001201A 5428 0024                  		addq.b	#2,$24(a0)
0001201E 6000                       		bra.s	Obj5E_SpikeFall
00012020                            ; ===========================================================================
00012020                            
00012020                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012020 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012026 7000                       		moveq	#0,d0
00012028 1029 001A                  		move.b	$1A(a1),d0
0001202C 343C 0028                  		move.w	#$28,d2
00012030 3228 0008                  		move.w	8(a0),d1
00012034 9268 0030                  		sub.w	$30(a0),d1
00012038 6400                       		bcc.s	loc_1185C
0001203A 4442                       		neg.w	d2
0001203C 5440                       		addq.w	#2,d0
0001203E                            
0001203E                            loc_1185C:
0001203E D040                       		add.w	d0,d0
00012040 3228 0034                  		move.w	$34(a0),d1
00012044 D272 0000                  		add.w	(a2,d0.w),d1
00012048 3141 000C                  		move.w	d1,$C(a0)
0001204C D468 0030                  		add.w	$30(a0),d2
00012050 3142 0008                  		move.w	d2,8(a0)
00012054 4268 000E                  		clr.w	$E(a0)
00012058 4268 000A                  		clr.w	$A(a0)
0001205C 4E75                       		rts	
0001205E                            ; ===========================================================================
0001205E                            
0001205E                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001205E 4A68 0012                  		tst.w	$12(a0)
00012062 6A00                       		bpl.s	loc_1189A
00012064 6100 BD4A                  		bsr.w	ObjectFall
00012068 3028 0034                  		move.w	$34(a0),d0
0001206C 0440 002F                  		subi.w	#$2F,d0
00012070 B068 000C                  		cmp.w	$C(a0),d0
00012074 6E00                       		bgt.s	locret_11898
00012076 6100 BD38                  		bsr.w	ObjectFall
0001207A                            
0001207A                            locret_11898:
0001207A 4E75                       		rts	
0001207C                            ; ===========================================================================
0001207C                            
0001207C                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001207C 6100 BD32                  		bsr.w	ObjectFall
00012080 2268 003C                  		movea.l	$3C(a0),a1
00012084 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001208A 7000                       		moveq	#0,d0
0001208C 1029 001A                  		move.b	$1A(a1),d0
00012090 3228 0008                  		move.w	8(a0),d1
00012094 9268 0030                  		sub.w	$30(a0),d1
00012098 6400                       		bcc.s	loc_118BA
0001209A 5440                       		addq.w	#2,d0
0001209C                            
0001209C                            loc_118BA:
0001209C D040                       		add.w	d0,d0
0001209E 3228 0034                  		move.w	$34(a0),d1
000120A2 D272 0000                  		add.w	(a2,d0.w),d1
000120A6 B268 000C                  		cmp.w	$C(a0),d1
000120AA 6E00                       		bgt.s	locret_11938
000120AC 2268 003C                  		movea.l	$3C(a0),a1
000120B0 7202                       		moveq	#2,d1
000120B2 4A68 0010                  		tst.w	$10(a0)
000120B6 6B00                       		bmi.s	Obj5E_Spring
000120B8 7200                       		moveq	#0,d1
000120BA                            
000120BA                            Obj5E_Spring:
000120BA 1341 003A                  		move.b	d1,$3A(a1)
000120BE 1141 003A                  		move.b	d1,$3A(a0)
000120C2 B229 001A                  		cmp.b	$1A(a1),d1
000120C6 6700                       		beq.s	loc_1192C
000120C8 08A9 0003 0022             		bclr	#3,$22(a1)
000120CE 6700                       		beq.s	loc_1192C
000120D0 4229 0025                  		clr.b	$25(a1)
000120D4 137C 0002 0024             		move.b	#2,$24(a1)
000120DA 45F8 D000                  		lea	($FFFFD000).w,a2
000120DE 3568 0012 0012             		move.w	$12(a0),$12(a2)
000120E4 446A 0012                  		neg.w	$12(a2)
000120E8 08EA 0001 0022             		bset	#1,$22(a2)
000120EE 08AA 0003 0022             		bclr	#3,$22(a2)
000120F4 422A 003C                  		clr.b	$3C(a2)
000120F8 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000120FE 157C 0002 0024             		move.b	#2,$24(a2)
00012104 303C 00CC                  		move.w	#$CC,d0
00012108 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0001210E                            
0001210E                            loc_1192C:
0001210E 4268 0010                  		clr.w	$10(a0)
00012112 4268 0012                  		clr.w	$12(a0)
00012116 5528 0024                  		subq.b	#2,$24(a0)
0001211A                            
0001211A                            locret_11938:
0001211A 4E75                       		rts	
0001211C                            ; ===========================================================================
0001211C FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012126                            
00012126                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012156                            		even
00012156                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012186                            		even
00012186                            ; ---------------------------------------------------------------------------
00012186                            ; Sprite mappings - seesaws (SLZ)
00012186                            ; ---------------------------------------------------------------------------
00012186                            Map_obj5E:
00012186                            	include "_maps\obj5E.asm"
00012186                            ; ---------------------------------------------------------------------------
00012186                            ; Sprite mappings - seesaws (SLZ)
00012186                            ; ---------------------------------------------------------------------------
00012186 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001218A 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001218E 07                         byte_119AC:	dc.b 7
0001218F D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012194 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012199 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001219E EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000121A3 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000121A8 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000121AD FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000121B2 04                         byte_119D0:	dc.b 4
000121B3 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000121B8 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000121BD E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000121C2 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000121C8 00                         		even
000121C8 00                         		even
000121C8                            
000121C8                            ; ---------------------------------------------------------------------------
000121C8                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000121C8                            ; ---------------------------------------------------------------------------
000121C8                            Map_obj5Ea:
000121C8                            	include "_maps\obj5Eballs.asm"
000121C8                            ; ---------------------------------------------------------------------------
000121C8                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000121C8                            ; ---------------------------------------------------------------------------
000121C8 0000                       		dc.w byte_119EA-Map_obj5Ea
000121CA 0000                       		dc.w byte_119F0-Map_obj5Ea
000121CC 01                         byte_119EA:	dc.b 1
000121CD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000121D2 01                         byte_119F0:	dc.b 1
000121D3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000121D8                            		even
000121D8                            		even
000121D8                            
000121D8                            ; ===========================================================================
000121D8                            ; ---------------------------------------------------------------------------
000121D8                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000121D8                            ; ---------------------------------------------------------------------------
000121D8                            
000121D8                            Obj5F:					; XREF: Obj_Index
000121D8 7000                       		moveq	#0,d0
000121DA 1028 0024                  		move.b	$24(a0),d0
000121DE 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000121E2 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000121E6                            ; ===========================================================================
000121E6 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000121E8 0000                       		dc.w Obj5F_Action-Obj5F_Index
000121EA 0000                       		dc.w Obj5F_Display-Obj5F_Index
000121EC 0000                       		dc.w Obj5F_End-Obj5F_Index
000121EE                            ; ===========================================================================
000121EE                            
000121EE                            Obj5F_Main:				; XREF: Obj5F_Index
000121EE 5428 0024                  		addq.b	#2,$24(a0)
000121F2 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000121FA 317C 0400 0002             		move.w	#$400,2(a0)
00012200 0028 0004 0001             		ori.b	#4,1(a0)
00012206 117C 0003 0018             		move.b	#3,$18(a0)
0001220C 117C 000C 0019             		move.b	#$C,$19(a0)
00012212 1028 0028                  		move.b	$28(a0),d0
00012216 6700                       		beq.s	loc_11A3C
00012218 1140 0024                  		move.b	d0,$24(a0)
0001221C 4E75                       		rts	
0001221E                            ; ===========================================================================
0001221E                            
0001221E                            loc_11A3C:
0001221E 117C 009A 0020             		move.b	#$9A,$20(a0)
00012224 0868 0000 0022             		bchg	#0,$22(a0)
0001222A                            
0001222A                            Obj5F_Action:				; XREF: Obj5F_Index
0001222A 7000                       		moveq	#0,d0
0001222C 1028 0025                  		move.b	$25(a0),d0
00012230 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012234 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012238 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001223E 6100 8C82                  		bsr.w	AnimateSprite
00012242 6000 DC66                  		bra.w	MarkObjGone
00012246                            ; ===========================================================================
00012246 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012248 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
0001224A 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001224C                            ; ===========================================================================
0001224C                            
0001224C                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001224C 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012250 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012254 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012256 5428 0025                  		addq.b	#2,$25(a0)
0001225A 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012260 317C 0010 0010             		move.w	#$10,$10(a0)
00012266 117C 0001 001C             		move.b	#1,$1C(a0)
0001226C 0868 0000 0022             		bchg	#0,$22(a0)
00012272 6700                       		beq.s	locret_11A96
00012274 4468 0010                  		neg.w	$10(a0)		; change direction
00012278                            
00012278                            locret_11A96:
00012278 4E75                       		rts	
0001227A                            ; ===========================================================================
0001227A                            
0001227A                            Obj5F_Wait:				; XREF: Obj5F_Index2
0001227A 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001227E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012282 6B00                       		bmi.s	loc_11AA8
00012284 6100 BB56                  		bsr.w	SpeedToPos
00012288 4E75                       		rts	
0001228A                            ; ===========================================================================
0001228A                            
0001228A                            loc_11AA8:
0001228A 5528 0025                  		subq.b	#2,$25(a0)
0001228E 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012294 4268 0010                  		clr.w	$10(a0)		; stop walking
00012298 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001229E 4E75                       		rts	
000122A0                            ; ===========================================================================
000122A0                            
000122A0                            Obj5F_Explode:				; XREF: Obj5F_Index2
000122A0 5368 0030                  		subq.w	#1,$30(a0)
000122A4 6A00                       		bpl.s	locret_11AD0
000122A6 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000122AA 117C 0000 0024             		move.b	#0,$24(a0)
000122B0                            
000122B0                            locret_11AD0:
000122B0 4E75                       		rts	
000122B2                            ; ===========================================================================
000122B2                            
000122B2                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000122B2 3038 D008                  		move.w	($FFFFD008).w,d0
000122B6 9068 0008                  		sub.w	8(a0),d0
000122BA 6400                       		bcc.s	loc_11ADE
000122BC 4440                       		neg.w	d0
000122BE                            
000122BE                            loc_11ADE:
000122BE 0C40 0060                  		cmpi.w	#$60,d0
000122C2 6400                       		bcc.s	locret_11B5E
000122C4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000122C8 9068 000C                  		sub.w	$C(a0),d0
000122CC 6400                       		bcc.s	Obj5F_MakeFuse
000122CE 4440                       		neg.w	d0
000122D0                            
000122D0                            Obj5F_MakeFuse:
000122D0 0C40 0060                  		cmpi.w	#$60,d0
000122D4 6400                       		bcc.s	locret_11B5E
000122D6 4A78 FE08                  		tst.w	($FFFFFE08).w
000122DA 6600                       		bne.s	locret_11B5E
000122DC 117C 0004 0025             		move.b	#4,$25(a0)
000122E2 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000122E8 4268 0010                  		clr.w	$10(a0)
000122EC 117C 0002 001C             		move.b	#2,$1C(a0)
000122F2 6100 BFAA                  		bsr.w	SingleObjLoad2
000122F6 6600                       		bne.s	locret_11B5E
000122F8 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000122FC 3368 0008 0008             		move.w	8(a0),8(a1)
00012302 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012308 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001230E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012314 137C 0004 0028             		move.b	#4,$28(a1)
0001231A 137C 0003 001C             		move.b	#3,$1C(a1)
00012320 337C 0010 0012             		move.w	#$10,$12(a1)
00012326 0828 0001 0022             		btst	#1,$22(a0)
0001232C 6700                       		beq.s	loc_11B54
0001232E 4469 0012                  		neg.w	$12(a1)
00012332                            
00012332                            loc_11B54:
00012332 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012338 2348 003C                  		move.l	a0,$3C(a1)
0001233C                            
0001233C                            locret_11B5E:
0001233C 4E75                       		rts	
0001233E                            ; ===========================================================================
0001233E                            
0001233E                            Obj5F_Display:				; XREF: Obj5F_Index
0001233E 6100                       		bsr.s	loc_11B70
00012340 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012346 6100 8B7A                  		bsr.w	AnimateSprite
0001234A 6000 DB5E                  		bra.w	MarkObjGone
0001234E                            ; ===========================================================================
0001234E                            
0001234E                            loc_11B70:
0001234E 5368 0030                  		subq.w	#1,$30(a0)
00012352 6B00                       		bmi.s	loc_11B7C
00012354 6100 BA86                  		bsr.w	SpeedToPos
00012358 4E75                       		rts	
0001235A                            ; ===========================================================================
0001235A                            
0001235A                            loc_11B7C:
0001235A 4268 0030                  		clr.w	$30(a0)
0001235E 4228 0024                  		clr.b	$24(a0)
00012362 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012368 7203                       		moveq	#3,d1
0001236A 2248                       		movea.l	a0,a1
0001236C 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012372 6000                       		bra.s	Obj5F_MakeShrap
00012374                            ; ===========================================================================
00012374                            
00012374                            Obj5F_Loop:
00012374 6100 BF28                  		bsr.w	SingleObjLoad2
00012378 6600                       		bne.s	loc_11BCE
0001237A                            
0001237A                            Obj5F_MakeShrap:			; XREF: loc_11B7C
0001237A 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001237E 3368 0008 0008             		move.w	8(a0),8(a1)
00012384 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001238A 137C 0006 0028             		move.b	#6,$28(a1)
00012390 137C 0004 001C             		move.b	#4,$1C(a1)
00012396 335A 0010                  		move.w	(a2)+,$10(a1)
0001239A 335A 0012                  		move.w	(a2)+,$12(a1)
0001239E 137C 0098 0020             		move.b	#$98,$20(a1)
000123A4 08E9 0007 0001             		bset	#7,1(a1)
000123AA                            
000123AA                            loc_11BCE:
000123AA 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000123AE                            
000123AE 117C 0006 0024             		move.b	#6,$24(a0)
000123B4                            
000123B4                            Obj5F_End:				; XREF: Obj5F_Index
000123B4 6100 BA26                  		bsr.w	SpeedToPos
000123B8 0668 0018 0012             		addi.w	#$18,$12(a0)
000123BE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000123C4 6100 8AFC                  		bsr.w	AnimateSprite
000123C8 4A28 0001                  		tst.b	1(a0)
000123CC 6A00 BA70                  		bpl.w	DeleteObject
000123D0 6000 BA30                  		bra.w	DisplaySprite
000123D4                            ; ===========================================================================
000123D4 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000123E4                            
000123E4                            Ani_obj5F:
000123E4                            	include "_anim\obj5F.asm"
000123E4                            ; ---------------------------------------------------------------------------
000123E4                            ; Animation script - Bomb enemy
000123E4                            ; ---------------------------------------------------------------------------
000123E4 0000                       		dc.w byte_11C12-Ani_obj5F
000123E6 0000                       		dc.w byte_11C16-Ani_obj5F
000123E8 0000                       		dc.w byte_11C1C-Ani_obj5F
000123EA 0000                       		dc.w byte_11C20-Ani_obj5F
000123EC 0000                       		dc.w byte_11C24-Ani_obj5F
000123EE 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000123F2 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000123F8 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000123FC 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012400 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012404                            		even
00012404                            		even
00012404                            
00012404                            ; ---------------------------------------------------------------------------
00012404                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012404                            ; ---------------------------------------------------------------------------
00012404                            Map_obj5F:
00012404                            	include "_maps\obj5F.asm"
00012404                            ; ---------------------------------------------------------------------------
00012404                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012404                            ; ---------------------------------------------------------------------------
00012404 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012408 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001240C 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012410 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012414 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012418 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001241C 03                         byte_11C40:	dc.b 3
0001241D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012422 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012427 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001242C 03                         byte_11C50:	dc.b 3
0001242D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012432 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012437 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001243C 03                         byte_11C60:	dc.b 3
0001243D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012442 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012447 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001244C 03                         byte_11C70:	dc.b 3
0001244D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012452 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012457 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001245C 03                         byte_11C80:	dc.b 3
0001245D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012462 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012467 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001246C 03                         byte_11C90:	dc.b 3
0001246D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012472 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012477 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001247C 02                         byte_11CA0:	dc.b 2
0001247D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012482 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012487 02                         byte_11CAB:	dc.b 2
00012488 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001248D 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012492 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012493 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012498 01                         byte_11CBC:	dc.b 1			; fuse
00012499 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001249E 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001249F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000124A4 01                         byte_11CC8:	dc.b 1			; fireball
000124A5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000124AA                            		even
000124AA                            		even
000124AA                            
000124AA                            ; ===========================================================================
000124AA                            ; ---------------------------------------------------------------------------
000124AA                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000124AA                            ; ---------------------------------------------------------------------------
000124AA                            
000124AA                            Obj60:					; XREF: Obj_Index
000124AA 7000                       		moveq	#0,d0
000124AC 1028 0024                  		move.b	$24(a0),d0
000124B0 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000124B4 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000124B8                            ; ===========================================================================
000124B8 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000124BA 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000124BC 0000                       		dc.w Obj60_Display-Obj60_Index
000124BE 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000124C0 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000124C2                            ; ===========================================================================
000124C2                            
000124C2                            Obj60_Main:				; XREF: Obj60_Index
000124C2 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000124CA 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000124D0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000124D6 6700                       		beq.s	loc_11D02
000124D8 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000124DE                            
000124DE                            loc_11D02:
000124DE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000124E4 6600                       		bne.s	loc_11D10
000124E6 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000124EC                            
000124EC                            loc_11D10:
000124EC 0028 0004 0001             		ori.b	#4,1(a0)
000124F2 117C 0004 0018             		move.b	#4,$18(a0)
000124F8 117C 000B 0020             		move.b	#$B,$20(a0)
000124FE 117C 000C 0019             		move.b	#$C,$19(a0)
00012504 7400                       		moveq	#0,d2
00012506 45E8 0037                  		lea	$37(a0),a2
0001250A 264A                       		movea.l	a2,a3
0001250C 524A                       		addq.w	#1,a2
0001250E 7203                       		moveq	#3,d1
00012510                            
00012510                            Obj60_MakeOrbs:
00012510 6100 BD8C                  		bsr.w	SingleObjLoad2
00012514 6600                       		bne.s	loc_11D90
00012516 5213                       		addq.b	#1,(a3)
00012518 3A09                       		move.w	a1,d5
0001251A 0445 D000                  		subi.w	#-$3000,d5
0001251E EC4D                       		lsr.w	#6,d5
00012520 0245 007F                  		andi.w	#$7F,d5
00012524 14C5                       		move.b	d5,(a2)+
00012526 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012528 137C 0006 0024             		move.b	#6,$24(a1)
0001252E 2368 0004 0004             		move.l	4(a0),4(a1)
00012534 3368 0002 0002             		move.w	2(a0),2(a1)
0001253A 0029 0004 0001             		ori.b	#4,1(a1)
00012540 137C 0004 0018             		move.b	#4,$18(a1)
00012546 137C 0008 0019             		move.b	#8,$19(a1)
0001254C 137C 0003 001A             		move.b	#3,$1A(a1)
00012552 137C 0098 0020             		move.b	#$98,$20(a1)
00012558 1342 0026                  		move.b	d2,$26(a1)
0001255C 0602 0040                  		addi.b	#$40,d2
00012560 2348 003C                  		move.l	a0,$3C(a1)
00012564 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012568                            
00012568                            loc_11D90:
00012568 7001                       		moveq	#1,d0
0001256A 0828 0000 0022             		btst	#0,$22(a0)
00012570 6700                       		beq.s	Obj60_Move
00012572 4440                       		neg.w	d0
00012574                            
00012574                            Obj60_Move:
00012574 1140 0036                  		move.b	d0,$36(a0)
00012578 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001257E 5428 0024                  		addq.b	#2,$24(a0)
00012582 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012588 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001258E 6700                       		beq.s	locret_11DBC	; if not, branch
00012590 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012594                            
00012594                            locret_11DBC:
00012594 4E75                       		rts	
00012596                            ; ===========================================================================
00012596                            
00012596                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012596 3038 D008                  		move.w	($FFFFD008).w,d0
0001259A 9068 0008                  		sub.w	8(a0),d0
0001259E 6400                       		bcc.s	loc_11DCA
000125A0 4440                       		neg.w	d0
000125A2                            
000125A2                            loc_11DCA:
000125A2 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000125A6 6400                       		bcc.s	Obj60_Animate	; if not, branch
000125A8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000125AC 9068 000C                  		sub.w	$C(a0),d0
000125B0 6400                       		bcc.s	loc_11DDC
000125B2 4440                       		neg.w	d0
000125B4                            
000125B4                            loc_11DDC:
000125B4 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000125B8 6400                       		bcc.s	Obj60_Animate	; if not, branch
000125BA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000125BE 6600                       		bne.s	Obj60_Animate	; if yes, branch
000125C0 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000125C6                            
000125C6                            Obj60_Animate:
000125C6 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000125CC 6100 88F4                  		bsr.w	AnimateSprite
000125D0 6000 0000                  		bra.w	Obj60_ChkDel
000125D4                            ; ===========================================================================
000125D4                            
000125D4                            Obj60_Display:				; XREF: Obj60_Index
000125D4 6100 B806                  		bsr.w	SpeedToPos
000125D8                            
000125D8                            Obj60_ChkDel:				; XREF: Obj60_Animate
000125D8 3028 0008                  		move.w	8(a0),d0
000125DC 0240 FF80                  		andi.w	#$FF80,d0
000125E0 3238 F700                  		move.w	($FFFFF700).w,d1
000125E4 0441 0080                  		subi.w	#$80,d1
000125E8 0241 FF80                  		andi.w	#$FF80,d1
000125EC 9041                       		sub.w	d1,d0
000125EE 0C40 0280                  		cmpi.w	#$280,d0
000125F2 6200 0000                  		bhi.w	Obj60_ChkGone
000125F6 6000 B80A                  		bra.w	DisplaySprite
000125FA                            ; ===========================================================================
000125FA                            
000125FA                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000125FA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000125FE 7000                       		moveq	#0,d0
00012600 1028 0023                  		move.b	$23(a0),d0
00012604 6700                       		beq.s	loc_11E34
00012606 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001260C                            
0001260C                            loc_11E34:
0001260C 45E8 0037                  		lea	$37(a0),a2
00012610 7400                       		moveq	#0,d2
00012612 141A                       		move.b	(a2)+,d2
00012614 5342                       		subq.w	#1,d2
00012616 6500                       		bcs.s	Obj60_Delete
00012618                            
00012618                            loc_11E40:
00012618 7000                       		moveq	#0,d0
0001261A 101A                       		move.b	(a2)+,d0
0001261C ED48                       		lsl.w	#6,d0
0001261E 0680 00FF D000             		addi.l	#$FFD000,d0
00012624 2240                       		movea.l	d0,a1
00012626 6100 B818                  		bsr.w	DeleteObject2
0001262A 51CA FFEC                  		dbf	d2,loc_11E40
0001262E                            
0001262E                            Obj60_Delete:
0001262E 6000 B80E                  		bra.w	DeleteObject
00012632                            ; ===========================================================================
00012632                            
00012632                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012632 2268 003C                  		movea.l	$3C(a0),a1
00012636 0C11 0060                  		cmpi.b	#$60,0(a1)
0001263A 6600 B802                  		bne.w	DeleteObject
0001263E 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012644 6600                       		bne.s	Obj60_Circle
00012646 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001264C 6600                       		bne.s	Obj60_Circle
0001264E 5428 0024                  		addq.b	#2,$24(a0)
00012652 5329 0037                  		subq.b	#1,$37(a1)
00012656 6600                       		bne.s	Obj60_FireOrb
00012658 5429 0024                  		addq.b	#2,$24(a1)
0001265C                            
0001265C                            Obj60_FireOrb:
0001265C 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012662 0829 0000 0022             		btst	#0,$22(a1)
00012668 6700                       		beq.s	Obj60_Display2
0001266A 4468 0010                  		neg.w	$10(a0)
0001266E                            
0001266E                            Obj60_Display2:
0001266E 6000 B792                  		bra.w	DisplaySprite
00012672                            ; ===========================================================================
00012672                            
00012672                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012672 1028 0026                  		move.b	$26(a0),d0
00012676 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001267C E841                       		asr.w	#4,d1
0001267E D269 0008                  		add.w	8(a1),d1
00012682 3141 0008                  		move.w	d1,8(a0)
00012686 E840                       		asr.w	#4,d0
00012688 D069 000C                  		add.w	$C(a1),d0
0001268C 3140 000C                  		move.w	d0,$C(a0)
00012690 1029 0036                  		move.b	$36(a1),d0
00012694 D128 0026                  		add.b	d0,$26(a0)
00012698 6000 B768                  		bra.w	DisplaySprite
0001269C                            ; ===========================================================================
0001269C                            
0001269C                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001269C 6100 B73E                  		bsr.w	SpeedToPos
000126A0 4A28 0001                  		tst.b	1(a0)
000126A4 6A00 B798                  		bpl.w	DeleteObject
000126A8 6000 B758                  		bra.w	DisplaySprite
000126AC                            ; ===========================================================================
000126AC                            Ani_obj60:
000126AC                            	include "_anim\obj60.asm"
000126AC                            ; ---------------------------------------------------------------------------
000126AC                            ; Animation script - Orbinaut enemy
000126AC                            ; ---------------------------------------------------------------------------
000126AC 0000                       		dc.w byte_11EDA-Ani_obj60
000126AE 0000                       		dc.w byte_11EDE-Ani_obj60
000126B0 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000126B4 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000126BA                            		even
000126BA                            		even
000126BA                            
000126BA                            ; ---------------------------------------------------------------------------
000126BA                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000126BA                            ; ---------------------------------------------------------------------------
000126BA                            Map_obj60:
000126BA                            	include "_maps\obj60.asm"
000126BA                            ; ---------------------------------------------------------------------------
000126BA                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000126BA                            ; ---------------------------------------------------------------------------
000126BA 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000126BE 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000126C2 01                         byte_11EEC:	dc.b 1
000126C3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000126C8 01                         byte_11EF2:	dc.b 1
000126C9 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000126CE 01                         byte_11EF8:	dc.b 1
000126CF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000126D4 01                         byte_11EFE:	dc.b 1
000126D5 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000126DA                            		even
000126DA                            		even
000126DA                            
000126DA                            ; ===========================================================================
000126DA                            ; ---------------------------------------------------------------------------
000126DA                            ; Object 16 - harpoon (LZ)
000126DA                            ; ---------------------------------------------------------------------------
000126DA                            
000126DA                            Obj16:					; XREF: Obj_Index
000126DA 7000                       		moveq	#0,d0
000126DC 1028 0024                  		move.b	$24(a0),d0
000126E0 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000126E4 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000126E8                            ; ===========================================================================
000126E8 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000126EA 0000                       		dc.w Obj16_Move-Obj16_Index
000126EC 0000                       		dc.w Obj16_Wait-Obj16_Index
000126EE                            ; ===========================================================================
000126EE                            
000126EE                            Obj16_Main:				; XREF: Obj16_Index
000126EE 5428 0024                  		addq.b	#2,$24(a0)
000126F2 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000126FA 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012700 0028 0004 0001             		ori.b	#4,1(a0)
00012706 117C 0004 0018             		move.b	#4,$18(a0)
0001270C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012712 117C 0014 0019             		move.b	#$14,$19(a0)
00012718 317C 003C 0030             		move.w	#60,$30(a0)
0001271E                            
0001271E                            Obj16_Move:				; XREF: Obj16_Index
0001271E 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012724 6100 879C                  		bsr.w	AnimateSprite
00012728 7000                       		moveq	#0,d0
0001272A 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001272E 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012734 6000 D774                  		bra.w	MarkObjGone
00012738                            ; ===========================================================================
00012738 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001273E                            ; ===========================================================================
0001273E                            
0001273E                            Obj16_Wait:				; XREF: Obj16_Index
0001273E 5368 0030                  		subq.w	#1,$30(a0)
00012742 6A00                       		bpl.s	Obj16_ChkDel
00012744 317C 003C 0030             		move.w	#60,$30(a0)
0001274A 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001274E 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012754                            
00012754                            Obj16_ChkDel:
00012754 6000 D754                  		bra.w	MarkObjGone
00012758                            ; ===========================================================================
00012758                            Ani_obj16:
00012758                            	include "_anim\obj16.asm"
00012758                            ; ---------------------------------------------------------------------------
00012758                            ; Animation script - harpoon (LZ)
00012758                            ; ---------------------------------------------------------------------------
00012758 0000                       		dc.w byte_11F8A-Ani_obj16
0001275A 0000                       		dc.w byte_11F8E-Ani_obj16
0001275C 0000                       		dc.w byte_11F92-Ani_obj16
0001275E 0000                       		dc.w byte_11F96-Ani_obj16
00012760 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012764 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012768 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
0001276C 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012770                            		even
00012770                            		even
00012770                            
00012770                            ; ---------------------------------------------------------------------------
00012770                            ; Sprite mappings - harpoon (LZ)
00012770                            ; ---------------------------------------------------------------------------
00012770                            Map_obj16:
00012770                            	include "_maps\obj16.asm"
00012770                            ; ---------------------------------------------------------------------------
00012770                            ; Sprite mappings - harpoon (LZ)
00012770                            ; ---------------------------------------------------------------------------
00012770 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012774 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012778 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
0001277C 01                         byte_11FA6:	dc.b 1
0001277D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012782 01                         byte_11FAC:	dc.b 1
00012783 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012788 02                         byte_11FB2:	dc.b 2
00012789 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001278E FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012793 01                         byte_11FBD:	dc.b 1
00012794 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012799 01                         byte_11FC3:	dc.b 1
0001279A E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001279F 02                         byte_11FC9:	dc.b 2
000127A0 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000127A5 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000127AA                            		even
000127AA                            		even
000127AA                            
000127AA                            ; ===========================================================================
000127AA                            ; ---------------------------------------------------------------------------
000127AA                            ; Object 61 - blocks (LZ)
000127AA                            ; ---------------------------------------------------------------------------
000127AA                            
000127AA                            Obj61:					; XREF: Obj_Index
000127AA 7000                       		moveq	#0,d0
000127AC 1028 0024                  		move.b	$24(a0),d0
000127B0 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000127B4 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000127B8                            ; ===========================================================================
000127B8 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000127BA 0000                       		dc.w Obj61_Action-Obj61_Index
000127BC                            
000127BC 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000127BE 200C                       		dc.b $20, $C
000127C0 1010                       		dc.b $10, $10
000127C2 1010                       		dc.b $10, $10
000127C4                            ; ===========================================================================
000127C4                            
000127C4                            Obj61_Main:				; XREF: Obj61_Index
000127C4 5428 0024                  		addq.b	#2,$24(a0)
000127C8 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000127D0 317C 43E6 0002             		move.w	#$43E6,2(a0)
000127D6 117C 0004 0001             		move.b	#4,1(a0)
000127DC 117C 0003 0018             		move.b	#3,$18(a0)
000127E2 7000                       		moveq	#0,d0
000127E4 1028 0028                  		move.b	$28(a0),d0
000127E8 E648                       		lsr.w	#3,d0
000127EA 0240 000E                  		andi.w	#$E,d0
000127EE 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000127F2 115A 0019                  		move.b	(a2)+,$19(a0)
000127F6 1152 0016                  		move.b	(a2),$16(a0)
000127FA E248                       		lsr.w	#1,d0
000127FC 1140 001A                  		move.b	d0,$1A(a0)
00012800 3168 0008 0034             		move.w	8(a0),$34(a0)
00012806 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001280C 1028 0028                  		move.b	$28(a0),d0
00012810 0200 000F                  		andi.b	#$F,d0
00012814 6700                       		beq.s	Obj61_Action
00012816 0C00 0007                  		cmpi.b	#7,d0
0001281A 6700                       		beq.s	Obj61_Action
0001281C 117C 0001 0038             		move.b	#1,$38(a0)
00012822                            
00012822                            Obj61_Action:				; XREF: Obj61_Index
00012822 3F28 0008                  		move.w	8(a0),-(sp)
00012826 7000                       		moveq	#0,d0
00012828 1028 0028                  		move.b	$28(a0),d0
0001282C 0240 000F                  		andi.w	#$F,d0
00012830 D040                       		add.w	d0,d0
00012832 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012836 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
0001283A 381F                       		move.w	(sp)+,d4
0001283C 4A28 0001                  		tst.b	1(a0)
00012840 6A00                       		bpl.s	Obj61_ChkDel
00012842 7200                       		moveq	#0,d1
00012844 1228 0019                  		move.b	$19(a0),d1
00012848 0641 000B                  		addi.w	#$B,d1
0001284C 7400                       		moveq	#0,d2
0001284E 1428 0016                  		move.b	$16(a0),d2
00012852 3602                       		move.w	d2,d3
00012854 5243                       		addq.w	#1,d3
00012856 6100 D97A                  		bsr.w	SolidObject
0001285A 1144 003F                  		move.b	d4,$3F(a0)
0001285E 6100 0000                  		bsr.w	loc_12180
00012862                            
00012862                            Obj61_ChkDel:
00012862 3028 0034                  		move.w	$34(a0),d0
00012866 0240 FF80                  		andi.w	#$FF80,d0
0001286A 3238 F700                  		move.w	($FFFFF700).w,d1
0001286E 0441 0080                  		subi.w	#$80,d1
00012872 0241 FF80                  		andi.w	#$FF80,d1
00012876 9041                       		sub.w	d1,d0
00012878 0C40 0280                  		cmpi.w	#$280,d0
0001287C 6200 B5C0                  		bhi.w	DeleteObject
00012880 6000 B580                  		bra.w	DisplaySprite
00012884                            ; ===========================================================================
00012884 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012888 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001288C 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012890 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012894                            ; ===========================================================================
00012894                            
00012894                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012894 4E75                       		rts	
00012896                            ; ===========================================================================
00012896                            
00012896                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012896 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001289A 6600                       		bne.s	loc_120D6	; if yes, branch
0001289C 0828 0003 0022             		btst	#3,$22(a0)
000128A2 6700                       		beq.s	locret_120D4
000128A4 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
000128AA                            
000128AA                            locret_120D4:
000128AA 4E75                       		rts	
000128AC                            ; ===========================================================================
000128AC                            
000128AC                            loc_120D6:
000128AC 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000128B0 66F8                       		bne.s	locret_120D4	; if time remains, branch
000128B2 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000128B6 4228 0038                  		clr.b	$38(a0)
000128BA 4E75                       		rts	
000128BC                            ; ===========================================================================
000128BC                            
000128BC                            Obj61_Type02:				; XREF: Obj61_TypeIndex
000128BC 6100 B51E                  		bsr.w	SpeedToPos
000128C0 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
000128C4 6100 0000                  		bsr.w	ObjHitFloor
000128C8 4A41                       		tst.w	d1
000128CA 6A00 0000                  		bpl.w	locret_12106
000128CE 5241                       		addq.w	#1,d1
000128D0 D368 000C                  		add.w	d1,$C(a0)
000128D4 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
000128D8 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000128DC                            
000128DC                            locret_12106:
000128DC 4E75                       		rts	
000128DE                            ; ===========================================================================
000128DE                            
000128DE                            Obj61_Type04:				; XREF: Obj61_TypeIndex
000128DE 6100 B4FC                  		bsr.w	SpeedToPos
000128E2 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000128E6 6100 0000                  		bsr.w	ObjHitCeiling
000128EA 4A41                       		tst.w	d1
000128EC 6A00 0000                  		bpl.w	locret_12126
000128F0 9368 000C                  		sub.w	d1,$C(a0)
000128F4 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000128F8 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000128FC                            
000128FC                            locret_12126:
000128FC 4E75                       		rts	
000128FE                            ; ===========================================================================
000128FE                            
000128FE                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000128FE 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012904 6600                       		bne.s	locret_12138	; if not, branch
00012906 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001290A 4228 0038                  		clr.b	$38(a0)
0001290E                            
0001290E                            locret_12138:
0001290E 4E75                       		rts	
00012910                            ; ===========================================================================
00012910                            
00012910                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012910 3038 F646                  		move.w	($FFFFF646).w,d0
00012914 9068 000C                  		sub.w	$C(a0),d0
00012918 6700                       		beq.s	locret_1217E
0001291A 6400                       		bcc.s	loc_12162
0001291C 0C40 FFFE                  		cmpi.w	#-2,d0
00012920 6C00                       		bge.s	loc_1214E
00012922 70FE                       		moveq	#-2,d0
00012924                            
00012924                            loc_1214E:
00012924 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012928 6100 0000                  		bsr.w	ObjHitCeiling
0001292C 4A41                       		tst.w	d1
0001292E 6A00 0000                  		bpl.w	locret_12160
00012932 9368 000C                  		sub.w	d1,$C(a0)
00012936                            
00012936                            locret_12160:
00012936 4E75                       		rts	
00012938                            ; ===========================================================================
00012938                            
00012938                            loc_12162:				; XREF: Obj61_Type07
00012938 0C40 0002                  		cmpi.w	#2,d0
0001293C 6F00                       		ble.s	loc_1216A
0001293E 7002                       		moveq	#2,d0
00012940                            
00012940                            loc_1216A:
00012940 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012944 6100 0000                  		bsr.w	ObjHitFloor
00012948 4A41                       		tst.w	d1
0001294A 6A00 0000                  		bpl.w	locret_1217E
0001294E 5241                       		addq.w	#1,d1
00012950 D368 000C                  		add.w	d1,$C(a0)
00012954                            
00012954                            locret_1217E:
00012954 4E75                       		rts	
00012956                            ; ===========================================================================
00012956                            
00012956                            loc_12180:				; XREF: Obj61_Action
00012956 4A28 0038                  		tst.b	$38(a0)
0001295A 6700                       		beq.s	locret_121C0
0001295C 0828 0003 0022             		btst	#3,$22(a0)
00012962 6600                       		bne.s	loc_1219A
00012964 4A28 003E                  		tst.b	$3E(a0)
00012968 6700                       		beq.s	locret_121C0
0001296A 5928 003E                  		subq.b	#4,$3E(a0)
0001296E 6000                       		bra.s	loc_121A6
00012970                            ; ===========================================================================
00012970                            
00012970                            loc_1219A:
00012970 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012976 6700                       		beq.s	locret_121C0
00012978 5828 003E                  		addq.b	#4,$3E(a0)
0001297C                            
0001297C                            loc_121A6:
0001297C 1028 003E                  		move.b	$3E(a0),d0
00012980 4EB9 0000 2CEC             		jsr	(CalcSine).l
00012986 323C 0400                  		move.w	#$400,d1
0001298A C1C1                       		muls.w	d1,d0
0001298C 4840                       		swap	d0
0001298E D068 0030                  		add.w	$30(a0),d0
00012992 3140 000C                  		move.w	d0,$C(a0)
00012996                            
00012996                            locret_121C0:
00012996 4E75                       		rts	
00012998                            ; ===========================================================================
00012998                            ; ---------------------------------------------------------------------------
00012998                            ; Sprite mappings - blocks (LZ)
00012998                            ; ---------------------------------------------------------------------------
00012998                            Map_obj61:
00012998                            	include "_maps\obj61.asm"
00012998                            ; ---------------------------------------------------------------------------
00012998                            ; Sprite mappings - blocks (LZ)
00012998                            ; ---------------------------------------------------------------------------
00012998 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001299C 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000129A0 01                         byte_121CA:	dc.b 1
000129A1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000129A6 02                         byte_121D0:	dc.b 2
000129A7 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000129AC F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000129B1 01                         byte_121DB:	dc.b 1
000129B2 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000129B7 01                         byte_121E1:	dc.b 1
000129B8 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
000129BE 00                         		even
000129BE 00                         		even
000129BE                            
000129BE                            ; ===========================================================================
000129BE                            ; ---------------------------------------------------------------------------
000129BE                            ; Object 62 - gargoyle head (LZ)
000129BE                            ; ---------------------------------------------------------------------------
000129BE                            
000129BE                            Obj62:					; XREF: Obj_Index
000129BE 7000                       		moveq	#0,d0
000129C0 1028 0024                  		move.b	$24(a0),d0
000129C4 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
000129C8 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
000129CC 6000 D4DC                  		bra.w	MarkObjGone
000129D0                            ; ===========================================================================
000129D0 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
000129D2 0000                       		dc.w Obj62_MakeFire-Obj62_Index
000129D4 0000                       		dc.w Obj62_FireBall-Obj62_Index
000129D6 0000                       		dc.w Obj62_AniFire-Obj62_Index
000129D8                            
000129D8 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000129E0                            ; ===========================================================================
000129E0                            
000129E0                            Obj62_Main:				; XREF: Obj62_Index
000129E0 5428 0024                  		addq.b	#2,$24(a0)
000129E4 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000129EC 317C 42E9 0002             		move.w	#$42E9,2(a0)
000129F2 0028 0004 0001             		ori.b	#4,1(a0)
000129F8 117C 0003 0018             		move.b	#3,$18(a0)
000129FE 117C 0010 0019             		move.b	#$10,$19(a0)
00012A04 1028 0028                  		move.b	$28(a0),d0	; get object type
00012A08 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012A0C 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012A12 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012A18 0228 000F 0028             		andi.b	#$F,$28(a0)
00012A1E                            
00012A1E                            Obj62_MakeFire:				; XREF: Obj62_Index
00012A1E 5328 001E                  		subq.b	#1,$1E(a0)
00012A22 6600                       		bne.s	Obj62_NoFire
00012A24 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012A2A 6100 B650                  		bsr.w	ChkObjOnScreen
00012A2E 6600                       		bne.s	Obj62_NoFire
00012A30 6100 B856                  		bsr.w	SingleObjLoad
00012A34 6600                       		bne.s	Obj62_NoFire
00012A36 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012A3A 5829 0024                  		addq.b	#4,$24(a1)
00012A3E 3368 0008 0008             		move.w	8(a0),8(a1)
00012A44 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012A4A 1368 0001 0001             		move.b	1(a0),1(a1)
00012A50 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012A56                            
00012A56                            Obj62_NoFire:
00012A56 4E75                       		rts	
00012A58                            ; ===========================================================================
00012A58                            
00012A58                            Obj62_FireBall:				; XREF: Obj62_Index
00012A58 5428 0024                  		addq.b	#2,$24(a0)
00012A5C 117C 0008 0016             		move.b	#8,$16(a0)
00012A62 117C 0008 0017             		move.b	#8,$17(a0)
00012A68 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012A70 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012A76 0028 0004 0001             		ori.b	#4,1(a0)
00012A7C 117C 0004 0018             		move.b	#4,$18(a0)
00012A82 117C 0098 0020             		move.b	#$98,$20(a0)
00012A88 117C 0008 0019             		move.b	#8,$19(a0)
00012A8E 117C 0002 001A             		move.b	#2,$1A(a0)
00012A94 5068 000C                  		addq.w	#8,$C(a0)
00012A98 317C 0200 0010             		move.w	#$200,$10(a0)
00012A9E 0828 0000 0022             		btst	#0,$22(a0)
00012AA4 6600                       		bne.s	Obj62_Sound
00012AA6 4468 0010                  		neg.w	$10(a0)
00012AAA                            
00012AAA                            Obj62_Sound:
00012AAA 303C 00AE                  		move.w	#$AE,d0
00012AAE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012AB4                            
00012AB4                            Obj62_AniFire:				; XREF: Obj62_Index
00012AB4 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012AB8 0200 0007                  		andi.b	#7,d0
00012ABC 6600                       		bne.s	Obj62_StopFire
00012ABE 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012AC4                            
00012AC4                            Obj62_StopFire:
00012AC4 6100 B316                  		bsr.w	SpeedToPos
00012AC8 0828 0000 0022             		btst	#0,$22(a0)
00012ACE 6600                       		bne.s	Obj62_StopFire2
00012AD0 76F8                       		moveq	#-8,d3
00012AD2 6100 0000                  		bsr.w	ObjHitWallLeft
00012AD6 4A41                       		tst.w	d1
00012AD8 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012ADC 4E75                       		rts	
00012ADE                            ; ===========================================================================
00012ADE                            
00012ADE                            Obj62_StopFire2:
00012ADE 7608                       		moveq	#8,d3
00012AE0 6100 0000                  		bsr.w	ObjHitWallRight
00012AE4 4A41                       		tst.w	d1
00012AE6 6B00 B356                  		bmi.w	DeleteObject
00012AEA 4E75                       		rts	
00012AEC                            ; ===========================================================================
00012AEC                            ; ---------------------------------------------------------------------------
00012AEC                            ; Sprite mappings - gargoyle head (LZ)
00012AEC                            ; ---------------------------------------------------------------------------
00012AEC                            Map_obj62:
00012AEC                            	include "_maps\obj62.asm"
00012AEC                            ; ---------------------------------------------------------------------------
00012AEC                            ; Sprite mappings - gargoyle head (LZ)
00012AEC                            ; ---------------------------------------------------------------------------
00012AEC 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012AF0 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012AF4 03                         byte_12320:	dc.b 3
00012AF5 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012AFA F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012AFF 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012B04 01                         byte_12330:	dc.b 1
00012B05 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012B0A 01                         byte_12336:	dc.b 1
00012B0B FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012B10                            		even
00012B10                            		even
00012B10                            
00012B10                            ; ===========================================================================
00012B10                            ; ---------------------------------------------------------------------------
00012B10                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012B10                            ; ---------------------------------------------------------------------------
00012B10                            
00012B10                            Obj63:					; XREF: Obj_Index
00012B10 7000                       		moveq	#0,d0
00012B12 1028 0024                  		move.b	$24(a0),d0
00012B16 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012B1A 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012B1E 3028 0030                  		move.w	$30(a0),d0
00012B22 0240 FF80                  		andi.w	#$FF80,d0
00012B26 3238 F700                  		move.w	($FFFFF700).w,d1
00012B2A 0441 0080                  		subi.w	#$80,d1
00012B2E 0241 FF80                  		andi.w	#$FF80,d1
00012B32 9041                       		sub.w	d1,d0
00012B34 0C40 0280                  		cmpi.w	#$280,d0
00012B38 6200                       		bhi.s	loc_1236A
00012B3A                            
00012B3A                            Obj63_Display:				; XREF: loc_1236A
00012B3A 6000 B2C6                  		bra.w	DisplaySprite
00012B3E                            ; ===========================================================================
00012B3E                            
00012B3E                            loc_1236A:				; XREF: Obj63
00012B3E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012B44 6600                       		bne.s	loc_12378
00012B46 0C40 FF80                  		cmpi.w	#-$80,d0
00012B4A 64EE                       		bcc.s	Obj63_Display
00012B4C                            
00012B4C                            loc_12378:
00012B4C 1028 002F                  		move.b	$2F(a0),d0
00012B50 6A00 B2EC                  		bpl.w	DeleteObject
00012B54 0240 007F                  		andi.w	#$7F,d0
00012B58 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012B5C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012B62 6000 B2DA                  		bra.w	DeleteObject
00012B66                            ; ===========================================================================
00012B66 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012B68 0000                       		dc.w loc_124B2-Obj63_Index
00012B6A 0000                       		dc.w loc_124C2-Obj63_Index
00012B6C 0000                       		dc.w loc_124DE-Obj63_Index
00012B6E                            ; ===========================================================================
00012B6E                            
00012B6E                            Obj63_Main:				; XREF: Obj63_Index
00012B6E 1028 0028                  		move.b	$28(a0),d0
00012B72 6B00 0000                  		bmi.w	loc_12460
00012B76 5428 0024                  		addq.b	#2,$24(a0)
00012B7A 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012B82 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012B88 0028 0004 0001             		ori.b	#4,1(a0)
00012B8E 117C 0010 0019             		move.b	#$10,$19(a0)
00012B94 117C 0004 0018             		move.b	#4,$18(a0)
00012B9A 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012BA0 6600                       		bne.s	loc_123E2
00012BA2 5828 0024                  		addq.b	#4,$24(a0)
00012BA6 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012BAC 117C 0001 0018             		move.b	#1,$18(a0)
00012BB2 6000 0000                  		bra.w	loc_124DE
00012BB6                            ; ===========================================================================
00012BB6                            
00012BB6                            loc_123E2:
00012BB6 117C 0004 001A             		move.b	#4,$1A(a0)
00012BBC 7000                       		moveq	#0,d0
00012BBE 1028 0028                  		move.b	$28(a0),d0
00012BC2 3200                       		move.w	d0,d1
00012BC4 E648                       		lsr.w	#3,d0
00012BC6 0240 001E                  		andi.w	#$1E,d0
00012BCA 45FA 0000                  		lea	Obj63_Data(pc),a2
00012BCE D4F2 0000                  		adda.w	(a2,d0.w),a2
00012BD2 315A 0038                  		move.w	(a2)+,$38(a0)
00012BD6 315A 0030                  		move.w	(a2)+,$30(a0)
00012BDA 214A 003C                  		move.l	a2,$3C(a0)
00012BDE 0241 000F                  		andi.w	#$F,d1
00012BE2 E549                       		lsl.w	#2,d1
00012BE4 1141 0038                  		move.b	d1,$38(a0)
00012BE8 117C 0004 003A             		move.b	#4,$3A(a0)
00012BEE 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012BF2 6700                       		beq.s	loc_1244C
00012BF4 117C 0001 003B             		move.b	#1,$3B(a0)
00012BFA 4428 003A                  		neg.b	$3A(a0)
00012BFE 7200                       		moveq	#0,d1
00012C00 1228 0038                  		move.b	$38(a0),d1
00012C04 D228 003A                  		add.b	$3A(a0),d1
00012C08 B228 0039                  		cmp.b	$39(a0),d1
00012C0C 6500                       		bcs.s	loc_12448
00012C0E 1001                       		move.b	d1,d0
00012C10 7200                       		moveq	#0,d1
00012C12 4A00                       		tst.b	d0
00012C14 6A00                       		bpl.s	loc_12448
00012C16 1228 0039                  		move.b	$39(a0),d1
00012C1A 5901                       		subq.b	#4,d1
00012C1C                            
00012C1C                            loc_12448:
00012C1C 1141 0038                  		move.b	d1,$38(a0)
00012C20                            
00012C20                            loc_1244C:
00012C20 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012C26 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012C2C 6100 0000                  		bsr.w	Obj63_ChangeDir
00012C30 6000 0000                  		bra.w	loc_124B2
00012C34                            ; ===========================================================================
00012C34                            
00012C34                            loc_12460:				; XREF: Obj63_Main
00012C34 1140 002F                  		move.b	d0,$2F(a0)
00012C38 0240 007F                  		andi.w	#$7F,d0
00012C3C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012C40 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012C46 6600 B1F6                  		bne.w	DeleteObject
00012C4A D040                       		add.w	d0,d0
00012C4C 0240 001E                  		andi.w	#$1E,d0
00012C50 0640 0070                  		addi.w	#$70,d0
00012C54 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012C5A D4F2 0000                  		adda.w	(a2,d0.w),a2
00012C5E 321A                       		move.w	(a2)+,d1
00012C60 2248                       		movea.l	a0,a1
00012C62 6000                       		bra.s	Obj63_MakePtfms
00012C64                            ; ===========================================================================
00012C64                            
00012C64                            Obj63_Loop:
00012C64 6100 B622                  		bsr.w	SingleObjLoad
00012C68 6600                       		bne.s	loc_124AA
00012C6A                            
00012C6A                            Obj63_MakePtfms:			; XREF: loc_12460
00012C6A 12BC 0063                  		move.b	#$63,0(a1)
00012C6E 335A 0008                  		move.w	(a2)+,8(a1)
00012C72 335A 000C                  		move.w	(a2)+,$C(a1)
00012C76 301A                       		move.w	(a2)+,d0
00012C78 1340 0028                  		move.b	d0,$28(a1)
00012C7C                            
00012C7C                            loc_124AA:
00012C7C 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012C80                            
00012C80 588F                       		addq.l	#4,sp
00012C82 4E75                       		rts	
00012C84                            ; ===========================================================================
00012C84                            
00012C84                            loc_124B2:				; XREF: Obj63_Index
00012C84 7200                       		moveq	#0,d1
00012C86 1228 0019                  		move.b	$19(a0),d1
00012C8A 4EB9 0000 7A82             		jsr	(PlatformObject).l
00012C90 6000 0000                  		bra.w	sub_12502
00012C94                            ; ===========================================================================
00012C94                            
00012C94                            loc_124C2:				; XREF: Obj63_Index
00012C94 7200                       		moveq	#0,d1
00012C96 1228 0019                  		move.b	$19(a0),d1
00012C9A 4EB9 0000 7BF6             		jsr	(ExitPlatform).l
00012CA0 3F28 0008                  		move.w	8(a0),-(sp)
00012CA4 6100 0000                  		bsr.w	sub_12502
00012CA8 341F                       		move.w	(sp)+,d2
00012CAA 4EF9 0000 8160             		jmp	(MvSonicOnPtfm2).l
00012CB0                            ; ===========================================================================
00012CB0                            
00012CB0                            loc_124DE:				; XREF: Obj63_Index
00012CB0 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012CB4 0240 0003                  		andi.w	#3,d0
00012CB8 6600                       		bne.s	loc_124FC
00012CBA 7201                       		moveq	#1,d1
00012CBC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012CC0 6700                       		beq.s	loc_124F2
00012CC2 4401                       		neg.b	d1
00012CC4                            
00012CC4                            loc_124F2:
00012CC4 D328 001A                  		add.b	d1,$1A(a0)
00012CC8 0228 0003 001A             		andi.b	#3,$1A(a0)
00012CCE                            
00012CCE                            loc_124FC:
00012CCE 588F                       		addq.l	#4,sp
00012CD0 6000 D1D8                  		bra.w	MarkObjGone
00012CD4                            
00012CD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CD4                            
00012CD4                            
00012CD4                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012CD4 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012CD8 6700                       		beq.s	loc_12520
00012CDA 4A28 003B                  		tst.b	$3B(a0)
00012CDE 6600                       		bne.s	loc_12520
00012CE0 117C 0001 003B             		move.b	#1,$3B(a0)
00012CE6 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012CEC 4428 003A                  		neg.b	$3A(a0)
00012CF0 6000                       		bra.s	loc_12534
00012CF2                            ; ===========================================================================
00012CF2                            
00012CF2                            loc_12520:
00012CF2 3028 0008                  		move.w	8(a0),d0
00012CF6 B068 0034                  		cmp.w	$34(a0),d0
00012CFA 6600                       		bne.s	loc_1256A
00012CFC 3028 000C                  		move.w	$C(a0),d0
00012D00 B068 0036                  		cmp.w	$36(a0),d0
00012D04 6600                       		bne.s	loc_1256A
00012D06                            
00012D06                            loc_12534:
00012D06 7200                       		moveq	#0,d1
00012D08 1228 0038                  		move.b	$38(a0),d1
00012D0C D228 003A                  		add.b	$3A(a0),d1
00012D10 B228 0039                  		cmp.b	$39(a0),d1
00012D14 6500                       		bcs.s	loc_12552
00012D16 1001                       		move.b	d1,d0
00012D18 7200                       		moveq	#0,d1
00012D1A 4A00                       		tst.b	d0
00012D1C 6A00                       		bpl.s	loc_12552
00012D1E 1228 0039                  		move.b	$39(a0),d1
00012D22 5901                       		subq.b	#4,d1
00012D24                            
00012D24                            loc_12552:
00012D24 1141 0038                  		move.b	d1,$38(a0)
00012D28 2268 003C                  		movea.l	$3C(a0),a1
00012D2C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012D32 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012D38 6100 0000                  		bsr.w	Obj63_ChangeDir
00012D3C                            
00012D3C                            loc_1256A:
00012D3C 6100 B09E                  		bsr.w	SpeedToPos
00012D40 4E75                       		rts	
00012D42                            ; End of function sub_12502
00012D42                            
00012D42                            
00012D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012D42                            
00012D42                            
00012D42                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012D42 7000                       		moveq	#0,d0
00012D44 343C FF00                  		move.w	#-$100,d2
00012D48 3028 0008                  		move.w	8(a0),d0
00012D4C 9068 0034                  		sub.w	$34(a0),d0
00012D50 6400                       		bcc.s	loc_12584
00012D52 4440                       		neg.w	d0
00012D54 4442                       		neg.w	d2
00012D56                            
00012D56                            loc_12584:
00012D56 7200                       		moveq	#0,d1
00012D58 363C FF00                  		move.w	#-$100,d3
00012D5C 3228 000C                  		move.w	$C(a0),d1
00012D60 9268 0036                  		sub.w	$36(a0),d1
00012D64 6400                       		bcc.s	loc_12598
00012D66 4441                       		neg.w	d1
00012D68 4443                       		neg.w	d3
00012D6A                            
00012D6A                            loc_12598:
00012D6A B240                       		cmp.w	d0,d1
00012D6C 6500                       		bcs.s	loc_125C2
00012D6E 3028 0008                  		move.w	8(a0),d0
00012D72 9068 0034                  		sub.w	$34(a0),d0
00012D76 6700                       		beq.s	loc_125AE
00012D78 48C0                       		ext.l	d0
00012D7A E180                       		asl.l	#8,d0
00012D7C 81C1                       		divs.w	d1,d0
00012D7E 4440                       		neg.w	d0
00012D80                            
00012D80                            loc_125AE:
00012D80 3140 0010                  		move.w	d0,$10(a0)
00012D84 3143 0012                  		move.w	d3,$12(a0)
00012D88 4840                       		swap	d0
00012D8A 3140 000A                  		move.w	d0,$A(a0)
00012D8E 4268 000E                  		clr.w	$E(a0)
00012D92 4E75                       		rts	
00012D94                            ; ===========================================================================
00012D94                            
00012D94                            loc_125C2:				; XREF: Obj63_ChangeDir
00012D94 3228 000C                  		move.w	$C(a0),d1
00012D98 9268 0036                  		sub.w	$36(a0),d1
00012D9C 6700                       		beq.s	loc_125D4
00012D9E 48C1                       		ext.l	d1
00012DA0 E181                       		asl.l	#8,d1
00012DA2 83C0                       		divs.w	d0,d1
00012DA4 4441                       		neg.w	d1
00012DA6                            
00012DA6                            loc_125D4:
00012DA6 3141 0012                  		move.w	d1,$12(a0)
00012DAA 3142 0010                  		move.w	d2,$10(a0)
00012DAE 4841                       		swap	d1
00012DB0 3141 000E                  		move.w	d1,$E(a0)
00012DB4 4268 000A                  		clr.w	$A(a0)
00012DB8 4E75                       		rts	
00012DBA                            ; End of function Obj63_ChangeDir
00012DBA                            
00012DBA                            ; ===========================================================================
00012DBA 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012DBC 0000                       		dc.w word_12610-Obj63_Data
00012DBE 0000                       		dc.w word_12628-Obj63_Data
00012DC0 0000                       		dc.w word_1263C-Obj63_Data
00012DC2 0000                       		dc.w word_12650-Obj63_Data
00012DC4 0000                       		dc.w word_12668-Obj63_Data
00012DC6 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012DD6 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012DE2 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012DF2 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012DFA 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012E0E 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012E22 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012E3A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012E4E                            
00012E4E                            ; ---------------------------------------------------------------------------
00012E4E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012E4E                            ; ---------------------------------------------------------------------------
00012E4E                            Map_obj63:
00012E4E                            	include "_maps\obj63.asm"
00012E4E                            ; ---------------------------------------------------------------------------
00012E4E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012E4E                            ; ---------------------------------------------------------------------------
00012E4E 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012E52 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012E56 0000                       		dc.w byte_1269E-Map_obj63
00012E58 01                         byte_12686:	dc.b 1
00012E59 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012E5E 01                         byte_1268C:	dc.b 1
00012E5F F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012E64 01                         byte_12692:	dc.b 1
00012E65 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012E6A 01                         byte_12698:	dc.b 1
00012E6B F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012E70 01                         byte_1269E:	dc.b 1
00012E71 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012E76                            		even
00012E76                            		even
00012E76                            
00012E76                            ; ===========================================================================
00012E76                            ; ---------------------------------------------------------------------------
00012E76                            ; Object 64 - bubbles (LZ)
00012E76                            ; ---------------------------------------------------------------------------
00012E76                            
00012E76                            Obj64:					; XREF: Obj_Index
00012E76 7000                       		moveq	#0,d0
00012E78 1028 0024                  		move.b	$24(a0),d0
00012E7C 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012E80 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012E84                            ; ===========================================================================
00012E84 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012E86 0000                       		dc.w Obj64_Animate-Obj64_Index
00012E88 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012E8A 0000                       		dc.w Obj64_Display2-Obj64_Index
00012E8C 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012E8E 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012E90                            ; ===========================================================================
00012E90                            
00012E90                            Obj64_Main:				; XREF: Obj64_Index
00012E90 5428 0024                  		addq.b	#2,$24(a0)
00012E94 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012E9C 317C 8348 0002             		move.w	#$8348,2(a0)
00012EA2 117C 0084 0001             		move.b	#$84,1(a0)
00012EA8 117C 0010 0019             		move.b	#$10,$19(a0)
00012EAE 117C 0001 0018             		move.b	#1,$18(a0)
00012EB4 1028 0028                  		move.b	$28(a0),d0	; get object type
00012EB8 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012EBA 5028 0024                  		addq.b	#8,$24(a0)
00012EBE 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012EC2 1140 0032                  		move.b	d0,$32(a0)
00012EC6 1140 0033                  		move.b	d0,$33(a0)
00012ECA 117C 0006 001C             		move.b	#6,$1C(a0)
00012ED0 6000 0000                  		bra.w	Obj64_BblMaker
00012ED4                            ; ===========================================================================
00012ED4                            
00012ED4                            Obj64_Bubble:				; XREF: Obj64_Main
00012ED4 1140 001C                  		move.b	d0,$1C(a0)
00012ED8 3168 0008 0030             		move.w	8(a0),$30(a0)
00012EDE 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012EE4 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00012EEA 1140 0026                  		move.b	d0,$26(a0)
00012EEE                            
00012EEE                            Obj64_Animate:				; XREF: Obj64_Index
00012EEE 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012EF4 4EB9 0000 AEC2             		jsr	AnimateSprite
00012EFA 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012F00 6600                       		bne.s	Obj64_ChkWater
00012F02 117C 0001 002E             		move.b	#1,$2E(a0)
00012F08                            
00012F08                            Obj64_ChkWater:				; XREF: Obj64_Index
00012F08 3038 F646                  		move.w	($FFFFF646).w,d0
00012F0C B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012F10 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012F12                            
00012F12                            Obj64_Burst:				; XREF: Obj64_Wobble
00012F12 117C 0006 0024             		move.b	#6,$24(a0)
00012F18 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012F1C 6000 0000                  		bra.w	Obj64_Display2
00012F20                            ; ===========================================================================
00012F20                            
00012F20                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012F20 1028 0026                  		move.b	$26(a0),d0
00012F24 5228 0026                  		addq.b	#1,$26(a0)
00012F28 0240 007F                  		andi.w	#$7F,d0
00012F2C 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012F32 1031 0000                  		move.b	(a1,d0.w),d0
00012F36 4880                       		ext.w	d0
00012F38 D068 0030                  		add.w	$30(a0),d0
00012F3C 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012F40 4A28 002E                  		tst.b	$2E(a0)
00012F44 6700                       		beq.s	Obj64_Display
00012F46 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012F4A 6700                       		beq.s	Obj64_Display	; if not, branch
00012F4C                            
00012F4C 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012F50 303C 00AD                  		move.w	#$AD,d0
00012F54 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012F5A 43F8 D000                  		lea	($FFFFD000).w,a1
00012F5E 4269 0010                  		clr.w	$10(a1)
00012F62 4269 0012                  		clr.w	$12(a1)
00012F66 4269 0014                  		clr.w	$14(a1)
00012F6A 137C 0015 001C             		move.b	#$15,$1C(a1)
00012F70 337C 0023 003E             		move.w	#$23,$3E(a1)
00012F76 137C 0000 003C             		move.b	#0,$3C(a1)
00012F7C 08A9 0005 0022             		bclr	#5,$22(a1)
00012F82 08A9 0004 0022             		bclr	#4,$22(a1)
00012F88 0829 0002 0022             		btst	#2,$22(a1)
00012F8E 6700 FF82                  		beq.w	Obj64_Burst
00012F92 08A9 0002 0022             		bclr	#2,$22(a1)
00012F98 137C 0013 0016             		move.b	#$13,$16(a1)
00012F9E 137C 0009 0017             		move.b	#9,$17(a1)
00012FA4 5B69 000C                  		subq.w	#5,$C(a1)
00012FA8 6000 FF68                  		bra.w	Obj64_Burst
00012FAC                            ; ===========================================================================
00012FAC                            
00012FAC                            Obj64_Display:				; XREF: Obj64_Wobble
00012FAC 6100 AE2E                  		bsr.w	SpeedToPos
00012FB0 4A28 0001                  		tst.b	1(a0)
00012FB4 6A00                       		bpl.s	Obj64_Delete
00012FB6 4EFA AE4A                  		jmp	DisplaySprite
00012FBA                            ; ===========================================================================
00012FBA                            
00012FBA                            Obj64_Delete:
00012FBA 4EFA AE82                  		jmp	DeleteObject
00012FBE                            ; ===========================================================================
00012FBE                            
00012FBE                            Obj64_Display2:				; XREF: Obj64_Index
00012FBE 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012FC4 4EB9 0000 AEC2             		jsr	AnimateSprite
00012FCA 4A28 0001                  		tst.b	1(a0)
00012FCE 6A00                       		bpl.s	Obj64_Delete2
00012FD0 4EFA AE30                  		jmp	DisplaySprite
00012FD4                            ; ===========================================================================
00012FD4                            
00012FD4                            Obj64_Delete2:
00012FD4 4EFA AE68                  		jmp	DeleteObject
00012FD8                            ; ===========================================================================
00012FD8                            
00012FD8                            Obj64_Delete3:				; XREF: Obj64_Index
00012FD8 6000 AE64                  		bra.w	DeleteObject
00012FDC                            ; ===========================================================================
00012FDC                            
00012FDC                            Obj64_BblMaker:				; XREF: Obj64_Index
00012FDC 4A68 0036                  		tst.w	$36(a0)
00012FE0 6600                       		bne.s	loc_12874
00012FE2 3038 F646                  		move.w	($FFFFF646).w,d0
00012FE6 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012FEA 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012FEE 4A28 0001                  		tst.b	1(a0)
00012FF2 6A00 0000                  		bpl.w	Obj64_ChkDel
00012FF6 5368 0038                  		subq.w	#1,$38(a0)
00012FFA 6A00 0000                  		bpl.w	loc_12914
00012FFE 317C 0001 0036             		move.w	#1,$36(a0)
00013004                            
00013004                            loc_1283A:
00013004 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001300A 3200                       		move.w	d0,d1
0001300C 0240 0007                  		andi.w	#7,d0
00013010 0C40 0006                  		cmpi.w	#6,d0
00013014 64EE                       		bcc.s	loc_1283A
00013016                            
00013016 1140 0034                  		move.b	d0,$34(a0)
0001301A 0241 000C                  		andi.w	#$C,d1
0001301E 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013024 D2C1                       		adda.w	d1,a1
00013026 2149 003C                  		move.l	a1,$3C(a0)
0001302A 5328 0032                  		subq.b	#1,$32(a0)
0001302E 6A00                       		bpl.s	loc_12872
00013030 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013036 08E8 0007 0036             		bset	#7,$36(a0)
0001303C                            
0001303C                            loc_12872:
0001303C 6000                       		bra.s	loc_1287C
0001303E                            ; ===========================================================================
0001303E                            
0001303E                            loc_12874:				; XREF: Obj64_BblMaker
0001303E 5368 0038                  		subq.w	#1,$38(a0)
00013042 6A00 0000                  		bpl.w	loc_12914
00013046                            
00013046                            loc_1287C:
00013046 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001304C 0240 001F                  		andi.w	#$1F,d0
00013050 3140 0038                  		move.w	d0,$38(a0)
00013054 6100 B232                  		bsr.w	SingleObjLoad
00013058 6600                       		bne.s	loc_128F8
0001305A 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001305E 3368 0008 0008             		move.w	8(a0),8(a1)
00013064 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001306A 0240 000F                  		andi.w	#$F,d0
0001306E 5140                       		subq.w	#8,d0
00013070 D169 0008                  		add.w	d0,8(a1)
00013074 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001307A 7000                       		moveq	#0,d0
0001307C 1028 0034                  		move.b	$34(a0),d0
00013080 2468 003C                  		movea.l	$3C(a0),a2
00013084 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
0001308A 0828 0007 0036             		btst	#7,$36(a0)
00013090 6700                       		beq.s	loc_128F8
00013092 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00013098 0240 0003                  		andi.w	#3,d0
0001309C 6600                       		bne.s	loc_128E4
0001309E 08E8 0006 0036             		bset	#6,$36(a0)
000130A4 6600                       		bne.s	loc_128F8
000130A6 137C 0002 0028             		move.b	#2,$28(a1)
000130AC                            
000130AC                            loc_128E4:
000130AC 4A28 0034                  		tst.b	$34(a0)
000130B0 6600                       		bne.s	loc_128F8
000130B2 08E8 0006 0036             		bset	#6,$36(a0)
000130B8 6600                       		bne.s	loc_128F8
000130BA 137C 0002 0028             		move.b	#2,$28(a1)
000130C0                            
000130C0                            loc_128F8:
000130C0 5328 0034                  		subq.b	#1,$34(a0)
000130C4 6A00                       		bpl.s	loc_12914
000130C6 4EB9 0000 2CC6             		jsr	(RandomNumber).l
000130CC 0240 007F                  		andi.w	#$7F,d0
000130D0 0640 0080                  		addi.w	#$80,d0
000130D4 D168 0038                  		add.w	d0,$38(a0)
000130D8 4268 0036                  		clr.w	$36(a0)
000130DC                            
000130DC                            loc_12914:
000130DC 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000130E2 4EB9 0000 AEC2             		jsr	AnimateSprite
000130E8                            
000130E8                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000130E8 3028 0008                  		move.w	8(a0),d0
000130EC 0240 FF80                  		andi.w	#$FF80,d0
000130F0 3238 F700                  		move.w	($FFFFF700).w,d1
000130F4 0441 0080                  		subi.w	#$80,d1
000130F8 0241 FF80                  		andi.w	#$FF80,d1
000130FC 9041                       		sub.w	d1,d0
000130FE 0C40 0280                  		cmpi.w	#$280,d0
00013102 6200 AD3A                  		bhi.w	DeleteObject
00013106 3038 F646                  		move.w	($FFFFF646).w,d0
0001310A B068 000C                  		cmp.w	$C(a0),d0
0001310E 6500 ACF2                  		bcs.w	DisplaySprite
00013112 4E75                       		rts	
00013114                            ; ===========================================================================
00013114                            ; bubble production sequence
00013114                            
00013114                            ; 0 = small bubble, 1 =	large bubble
00013114                            
00013114 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013126                            
00013126                            ; ===========================================================================
00013126                            
00013126                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013126 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001312A 6B00                       		bmi.s	loc_12998
0001312C 43F8 D000                  		lea	($FFFFD000).w,a1
00013130 3029 0008                  		move.w	8(a1),d0
00013134 3228 0008                  		move.w	8(a0),d1
00013138 0441 0010                  		subi.w	#$10,d1
0001313C B240                       		cmp.w	d0,d1
0001313E 6400                       		bcc.s	loc_12998
00013140 0641 0020                  		addi.w	#$20,d1
00013144 B240                       		cmp.w	d0,d1
00013146 6500                       		bcs.s	loc_12998
00013148 3029 000C                  		move.w	$C(a1),d0
0001314C 3228 000C                  		move.w	$C(a0),d1
00013150 B240                       		cmp.w	d0,d1
00013152 6400                       		bcc.s	loc_12998
00013154 0641 0010                  		addi.w	#$10,d1
00013158 B240                       		cmp.w	d0,d1
0001315A 6500                       		bcs.s	loc_12998
0001315C 7001                       		moveq	#1,d0
0001315E 4E75                       		rts	
00013160                            ; ===========================================================================
00013160                            
00013160                            loc_12998:
00013160 7000                       		moveq	#0,d0
00013162 4E75                       		rts	
00013164                            ; ===========================================================================
00013164                            Ani_obj64:
00013164                            	include "_anim\obj64.asm"
00013164                            ; ---------------------------------------------------------------------------
00013164                            ; Animation script - bubbles (LZ)
00013164                            ; ---------------------------------------------------------------------------
00013164 0000                       		dc.w byte_129AA-Ani_obj64
00013166 0000                       		dc.w byte_129B0-Ani_obj64
00013168 0000                       		dc.w byte_129B6-Ani_obj64
0001316A 0000                       		dc.w byte_129BE-Ani_obj64
0001316C 0000                       		dc.w byte_129BE-Ani_obj64
0001316E 0000                       		dc.w byte_129C0-Ani_obj64
00013170 0000                       		dc.w byte_129C6-Ani_obj64
00013172 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013178 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001317E 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013186 04FC                       byte_129BE:	dc.b 4,	$FC
00013188 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001318E 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013194 00                         		even
00013194 00                         		even
00013194                            
00013194                            ; ---------------------------------------------------------------------------
00013194                            ; Sprite mappings - bubbles (LZ)
00013194                            ; ---------------------------------------------------------------------------
00013194                            Map_obj64:
00013194                            	include "_maps\obj64.asm"
00013194                            ; ---------------------------------------------------------------------------
00013194                            ; Sprite mappings - bubbles (LZ)
00013194                            ; ---------------------------------------------------------------------------
00013194 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013198 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
0001319C 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000131A0 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000131A4 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000131A8 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000131AC 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000131B0 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000131B4 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000131B8 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000131BC 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000131C0 0000                       		dc.w byte_12A9C-Map_obj64
000131C2 01                         byte_129FA:	dc.b 1
000131C3 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000131C8 01                         byte_12A00:	dc.b 1
000131C9 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000131CE 01                         byte_12A06:	dc.b 1
000131CF FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000131D4 01                         byte_12A0C:	dc.b 1
000131D5 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000131DA 01                         byte_12A12:	dc.b 1
000131DB F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000131E0 01                         byte_12A18:	dc.b 1
000131E1 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000131E6 01                         byte_12A1E:	dc.b 1
000131E7 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000131EC 04                         byte_12A24:	dc.b 4
000131ED F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000131F2 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000131F7 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000131FC 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013201 04                         byte_12A39:	dc.b 4
00013202 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013207 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001320C 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013211 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013216 01                         byte_12A4E:	dc.b 1
00013217 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001321C 01                         byte_12A54:	dc.b 1
0001321D F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013222 01                         byte_12A5A:	dc.b 1
00013223 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013228 01                         byte_12A60:	dc.b 1
00013229 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001322E 01                         byte_12A66:	dc.b 1
0001322F F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013234 01                         byte_12A6C:	dc.b 1
00013235 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
0001323A 01                         byte_12A72:	dc.b 1
0001323B F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013240 01                         byte_12A78:	dc.b 1
00013241 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013246 01                         byte_12A7E:	dc.b 1
00013247 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
0001324C 01                         byte_12A84:	dc.b 1
0001324D F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013252 01                         byte_12A8A:	dc.b 1
00013253 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013258 01                         byte_12A90:	dc.b 1
00013259 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001325E 01                         byte_12A96:	dc.b 1
0001325F F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013264 00                         byte_12A9C:	dc.b 0
00013266 00                         		even
00013266 00                         		even
00013266                            
00013266                            ; ===========================================================================
00013266                            ; ---------------------------------------------------------------------------
00013266                            ; Object 65 - waterfalls (LZ)
00013266                            ; ---------------------------------------------------------------------------
00013266                            
00013266                            Obj65:					; XREF: Obj_Index
00013266 7000                       		moveq	#0,d0
00013268 1028 0024                  		move.b	$24(a0),d0
0001326C 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013270 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013274                            ; ===========================================================================
00013274 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013276 0000                       		dc.w Obj65_Animate-Obj65_Index
00013278 0000                       		dc.w Obj65_ChkDel-Obj65_Index
0001327A 0000                       		dc.w Obj65_FixHeight-Obj65_Index
0001327C 0000                       		dc.w loc_12B36-Obj65_Index
0001327E                            ; ===========================================================================
0001327E                            
0001327E                            Obj65_Main:				; XREF: Obj65_Index
0001327E 5828 0024                  		addq.b	#4,$24(a0)
00013282 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
0001328A 317C 4259 0002             		move.w	#$4259,2(a0)
00013290 0028 0004 0001             		ori.b	#4,1(a0)
00013296 117C 0018 0019             		move.b	#$18,$19(a0)
0001329C 117C 0001 0018             		move.b	#1,$18(a0)
000132A2 1028 0028                  		move.b	$28(a0),d0	; get object type
000132A6 6A00                       		bpl.s	loc_12AE6
000132A8 08E8 0007 0002             		bset	#7,2(a0)
000132AE                            
000132AE                            loc_12AE6:
000132AE 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000132B2 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000132B6 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000132BA 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000132BC 4228 0018                  		clr.b	$18(a0)
000132C0 5528 0024                  		subq.b	#2,$24(a0)
000132C4 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000132CA 6700                       		beq.s	loc_12B0A	; if not, branch
000132CC 117C 0006 0024             		move.b	#6,$24(a0)
000132D2                            
000132D2                            loc_12B0A:
000132D2 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000132D8 6700                       		beq.s	Obj65_Animate	; if not, branch
000132DA 117C 0008 0024             		move.b	#8,$24(a0)
000132E0                            
000132E0                            Obj65_Animate:				; XREF: Obj65_Index
000132E0 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000132E6 4EB9 0000 AEC2             		jsr	AnimateSprite
000132EC                            
000132EC                            Obj65_ChkDel:				; XREF: Obj65_Index
000132EC 6000 CBBC                  		bra.w	MarkObjGone
000132F0                            ; ===========================================================================
000132F0                            
000132F0                            Obj65_FixHeight:			; XREF: Obj65_Index
000132F0 3038 F646                  		move.w	($FFFFF646).w,d0
000132F4 0440 0010                  		subi.w	#$10,d0
000132F8 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000132FC 60E2                       		bra.s	Obj65_Animate
000132FE                            ; ===========================================================================
000132FE                            
000132FE                            loc_12B36:				; XREF: Obj65_Index
000132FE 08A8 0007 0002             		bclr	#7,2(a0)
00013304 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001330A 6600                       		bne.s	Obj65_Animate2
0001330C 08E8 0007 0002             		bset	#7,2(a0)
00013312                            
00013312                            Obj65_Animate2:
00013312 60CC                       		bra.s	Obj65_Animate
00013314                            ; ===========================================================================
00013314                            Ani_obj65:
00013314                            	include "_anim\obj65.asm"
00013314                            ; ---------------------------------------------------------------------------
00013314                            ; Animation script - waterfall (LZ)
00013314                            ; ---------------------------------------------------------------------------
00013314 0000                       		dc.w byte_12B4E-Ani_obj65
00013316 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001331C 00                         		even
0001331C 00                         		even
0001331C                            
0001331C                            ; ---------------------------------------------------------------------------
0001331C                            ; Sprite mappings - waterfalls (LZ)
0001331C                            ; ---------------------------------------------------------------------------
0001331C                            Map_obj65:
0001331C                            	include "_maps\obj65.asm"
0001331C                            ; ---------------------------------------------------------------------------
0001331C                            ; Sprite mappings - waterfalls (LZ)
0001331C                            ; ---------------------------------------------------------------------------
0001331C 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013320 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013324 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013328 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001332C 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013330 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013334 01                         byte_12B6C:	dc.b 1
00013335 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001333A 02                         byte_12B72:	dc.b 2
0001333B F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013340 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013345 02                         byte_12B7D:	dc.b 2
00013346 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001334B 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013350 01                         byte_12B88:	dc.b 1
00013351 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013356 02                         byte_12B8E:	dc.b 2
00013357 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001335C 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013361 01                         byte_12B99:	dc.b 1
00013362 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013367 01                         byte_12B9F:	dc.b 1
00013368 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
0001336D 01                         byte_12BA5:	dc.b 1
0001336E F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013373 02                         byte_12BAB:	dc.b 2
00013374 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013379 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001337E 02                         byte_12BB6:	dc.b 2
0001337F F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013384 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013389 02                         byte_12BC1:	dc.b 2
0001338A F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001338F F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013394 02                         byte_12BCC:	dc.b 2
00013395 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001339A F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000133A0 00                         		even
000133A0 00                         		even
000133A0                            
000133A0                            ; ===========================================================================
000133A0                            ; ---------------------------------------------------------------------------
000133A0                            ; Object 01 - Sonic
000133A0                            ; ---------------------------------------------------------------------------
000133A0                            
000133A0                            Obj01:					; XREF: Obj_Index
000133A0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000133A4 6700                       		beq.s	Obj01_Normal	; if not, branch
000133A6 4EF9 0000 0000             		jmp	DebugMode
000133AC                            ; ===========================================================================
000133AC                            
000133AC                            Obj01_Normal:
000133AC 7000                       		moveq	#0,d0
000133AE 1028 0024                  		move.b	$24(a0),d0
000133B2 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000133B6 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000133BA                            ; ===========================================================================
000133BA 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000133BC 0000                       		dc.w Obj01_Control-Obj01_Index
000133BE 0000                       		dc.w Obj01_Hurt-Obj01_Index
000133C0 0000                       		dc.w Obj01_Death-Obj01_Index
000133C2 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000133C4                            ; ===========================================================================
000133C4                            
000133C4                            Player_Maps:
000133C4 0000 0000                  	dc.l	Map_Sonic
000133C8 0000 0000                  	dc.l	Map_Sonic ; gronic
000133CC 0000 0000                  	dc.l	Map_Sonic ; anakama
000133D0                            	; insert player mapping here
000133D0                            	
000133D0                            Obj01_Main:				; XREF: Obj01_Index
000133D0 5428 0024                  		addq.b	#2,$24(a0)
000133D4 117C 0013 0016             		move.b	#$13,$16(a0)
000133DA 117C 0009 0017             		move.b	#9,$17(a0)
000133E0                            		
000133E0 7000                       		moveq	#0,d0
000133E2 1038 FFE8                  		move.b	(v_character),d0
000133E6 E548                       		lsl.w	#2,d0
000133E8 43FA FFDA                  		lea 	Player_Maps(pc),a1
000133EC 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000133F2                            		
000133F2 317C 0780 0002             		move.w	#$780,2(a0)
000133F8 117C 0002 0018             		move.b	#2,$18(a0)
000133FE 117C 0018 0019             		move.b	#$18,$19(a0)
00013404 117C 0004 0001             		move.b	#4,1(a0)
0001340A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013410 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013416 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001341C                            
0001341C                            Obj01_Control:				; XREF: Obj01_Index
0001341C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013420 6700                       		beq.s	loc_12C58	; if not, branch
00013422 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013428 6700                       		beq.s	loc_12C58	; if not, branch
0001342A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013430 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013434 4E75                       		rts	
00013436                            ; ===========================================================================
00013436                            
00013436                            loc_12C58:
00013436 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001343A 6600                       		bne.s	loc_12C64	; if yes, branch
0001343C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013442                            
00013442                            loc_12C64:
00013442 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013448 6600                       		bne.s	loc_12C7E	; if yes, branch
0001344A 7000                       		moveq	#0,d0
0001344C 1028 0022                  		move.b	$22(a0),d0
00013450 0240 0006                  		andi.w	#6,d0
00013454 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013458 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
0001345C                            
0001345C                            loc_12C7E:
0001345C 6100                       		bsr.s	Sonic_Display
0001345E 6100 0000                  		bsr.w	Sonic_RecordPos
00013462 6100 0000                  		bsr.w	Sonic_Water
00013466 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
0001346C 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013472 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013476 6700                       		beq.s	loc_12CA6
00013478 4A28 001C                  		tst.b	$1C(a0)
0001347C 6600                       		bne.s	loc_12CA6
0001347E 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013484                            
00013484                            loc_12CA6:
00013484 6100 0000                  		bsr.w	Sonic_Animate
00013488 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001348C 6B00                       		bmi.s	loc_12CB6
0001348E 4EB9 0000 0000             		jsr	TouchResponse
00013494                            
00013494                            loc_12CB6:
00013494 6100 0000                  		bsr.w	Sonic_Loops
00013498 6100 0000                  		bsr.w	LoadSonicDynPLC
0001349C 4E75                       		rts	
0001349E                            ; ===========================================================================
0001349E 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000134A0 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000134A2 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000134A4 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000134A6                            ; ---------------------------------------------------------------------------
000134A6                            ; Music	to play	after invincibility wears off
000134A6                            ; ---------------------------------------------------------------------------
000134A6                            ; ===========================================================================
000134A6                            
000134A6                            Sonic_Display:				; XREF: loc_12C7E
000134A6 3028 0030                  		move.w	$30(a0),d0
000134AA 6700                       		beq.s	Obj01_Display
000134AC 5368 0030                  		subq.w	#1,$30(a0)
000134B0 E648                       		lsr.w	#3,d0
000134B2 6400                       		bcc.s	Obj01_ChkInvin
000134B4                            
000134B4                            Obj01_Display:
000134B4 4EBA A94C                  		jsr	DisplaySprite
000134B8                            
000134B8                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000134B8                             
000134B8                            Obj01_ChkInvin:
000134B8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000134BC 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000134C0 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000134C4 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000134C8 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000134CC 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000134D0 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000134D4 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000134D8 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000134DE 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000134E2 7000                       		moveq	#0,d0
000134E4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000134E8                             
000134E8 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000134EE 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000134F0 43F9 0000 3C72             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000134F6 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000134F8                             
000134F8                            Obj01_GetBgm2:
000134F8 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000134FE 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013500 43F9 0000 3C7A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013506 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013508                             
00013508                            Obj01_GetBgm3:
00013508 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001350E 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013510 43F9 0000 3C80             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013516 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013518                             
00013518                            Obj01_GetBgm4:
00013518 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001351E 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013520 43F9 0000 3C86             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013526                             
00013526                            Obj01_PlayMusic:
00013526 1031 0000                  		move.b	(a1,d0.w),d0
0001352A 4EB9 0000 15BA             		jsr	(PlaySound).l	; play normal music
00013530                             
00013530                            ; NineKode ends here.
00013530                            
00013530                            Obj01_RmvInvin:
00013530 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013536                            
00013536                            Obj01_ChkShoes:
00013536 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001353A 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001353C 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013540 6700                       		beq.s	Obj01_ExitChk
00013542 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013546 6600                       		bne.s	Obj01_ExitChk
00013548 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001354E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013554 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001355A 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013560 303C 00E3                  		move.w	#$E3,d0
00013564 4EF9 0000 15BA             		jmp	(PlaySound).l	; run music at normal speed
0001356A                            ; ===========================================================================
0001356A                            
0001356A                            Obj01_ExitChk:
0001356A 4E75                       		rts	
0001356C                            
0001356C                            ; ---------------------------------------------------------------------------
0001356C                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001356C                            ; ---------------------------------------------------------------------------
0001356C                            
0001356C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001356C                            
0001356C                            
0001356C                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001356C 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013570 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013574 43F1 0000                  		lea	(a1,d0.w),a1
00013578 32E8 0008                  		move.w	8(a0),(a1)+
0001357C 32E8 000C                  		move.w	$C(a0),(a1)+
00013580 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013584 4E75                       		rts	
00013586                            ; End of function Sonic_RecordPos
00013586                            
00013586                            ; ---------------------------------------------------------------------------
00013586                            ; Subroutine for Sonic when he's underwater
00013586                            ; ---------------------------------------------------------------------------
00013586                            
00013586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013586                            
00013586                            
00013586                            Sonic_Water:				; XREF: loc_12C7E
00013586 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001358C 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001358E                            
0001358E                            locret_12D80:
0001358E 4E75                       		rts	
00013590                            ; ===========================================================================
00013590                            
00013590                            Obj01_InWater:
00013590 3038 F646                  		move.w	($FFFFF646).w,d0
00013594 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013598 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001359A 08E8 0006 0022             		bset	#6,$22(a0)
000135A0 66EC                       		bne.s	locret_12D80
000135A2 6100 0000                  		bsr.w	ResumeMusic
000135A6 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000135AC 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000135B2 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000135B8 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000135BE 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000135C4 E0E8 0010                  		asr	$10(a0)
000135C8 E0E8 0012                  		asr	$12(a0)
000135CC E0E8 0012                  		asr	$12(a0)
000135D0 67BC                       		beq.s	locret_12D80
000135D2 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000135D8 303C 00AA                  		move.w	#$AA,d0
000135DC 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
000135E2                            ; ===========================================================================
000135E2                            
000135E2                            Obj01_OutWater:
000135E2 08A8 0006 0022             		bclr	#6,$22(a0)
000135E8 67A4                       		beq.s	locret_12D80
000135EA 6100 0000                  		bsr.w	ResumeMusic
000135EE 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000135F4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000135FA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013600 E1E8 0012                  		asl	$12(a0)
00013604 6700 FF88                  		beq.w	locret_12D80
00013608 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001360E 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013614 6E00                       		bgt.s	loc_12E0E
00013616 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001361C                            
0001361C                            loc_12E0E:
0001361C 303C 00AA                  		move.w	#$AA,d0
00013620 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
00013626                            ; End of function Sonic_Water
00013626                            
00013626                            ; ===========================================================================
00013626                            ; ---------------------------------------------------------------------------
00013626                            ; Modes	for controlling	Sonic
00013626                            ; ---------------------------------------------------------------------------
00013626                            
00013626                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013626 6100 0000                  		bsr.w	Sonic_Jump
0001362A 6100 0000                  		bsr.w	Sonic_SlopeResist
0001362E 6100 0000                  		bsr.w	Sonic_Move
00013632 6100 0000                  		bsr.w	Sonic_Roll
00013636 6100 0000                  		bsr.w	Sonic_LevelBound
0001363A 4EBA A7A0                  		jsr	SpeedToPos
0001363E 6100 0000                  		bsr.w	Sonic_AnglePos
00013642 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013646 4E75                       		rts	
00013648                            ; ===========================================================================
00013648                            
00013648                            Obj01_MdJump:				; XREF: Obj01_Modes
00013648 6100 0000                  		bsr.w	Sonic_JumpHeight
0001364C 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013650 6100 0000                  		bsr.w	Sonic_LevelBound
00013654 4EBA A75A                  		jsr	ObjectFall
00013658 0828 0006 0022             		btst	#6,$22(a0)
0001365E 6700                       		beq.s	loc_12E5C
00013660 0468 0028 0012             		subi.w	#$28,$12(a0)
00013666                            
00013666                            loc_12E5C:
00013666 6100 0000                  		bsr.w	Sonic_JumpAngle
0001366A 6100 0000                  		bsr.w	Sonic_Floor
0001366E 4E75                       		rts	
00013670                            ; ===========================================================================
00013670                            
00013670                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013670 6100 0000                  		bsr.w	Sonic_Jump
00013674 6100 0000                  		bsr.w	Sonic_RollRepel
00013678 6100 0000                  		bsr.w	Sonic_RollSpeed
0001367C 6100 0000                  		bsr.w	Sonic_LevelBound
00013680 4EBA A75A                  		jsr	SpeedToPos
00013684 6100 0000                  		bsr.w	Sonic_AnglePos
00013688 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001368C 4E75                       		rts	
0001368E                            ; ===========================================================================
0001368E                            
0001368E                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001368E 6100 0000                  		bsr.w	Sonic_JumpHeight
00013692 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013696 6100 0000                  		bsr.w	Sonic_LevelBound
0001369A 6100 0000                  		bsr.w	Sonic_AirUnroll
0001369E 4EBA A710                  		jsr	ObjectFall
000136A2 0828 0006 0022             		btst	#6,$22(a0)
000136A8 6700                       		beq.s	loc_12EA6
000136AA 0468 0028 0012             		subi.w	#$28,$12(a0)
000136B0                            
000136B0                            loc_12EA6:
000136B0 6100 0000                  		bsr.w	Sonic_JumpAngle
000136B4 6100 0000                  		bsr.w	Sonic_Floor
000136B8 4E75                       		rts	
000136BA                            ; ---------------------------------------------------------------------------
000136BA                            ; Subroutine to	make Sonic walk/run
000136BA                            ; ---------------------------------------------------------------------------
000136BA                            
000136BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136BA                            
000136BA                            
000136BA                            Sonic_Move:				; XREF: Obj01_MdNormal
000136BA 3C38 F760                  		move.w	($FFFFF760).w,d6
000136BE 3A38 F762                  		move.w	($FFFFF762).w,d5
000136C2 3838 F764                  		move.w	($FFFFF764).w,d4
000136C6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000136CA 6600 0000                  		bne.w	loc_12FEE
000136CE 4A68 003E                  		tst.w	$3E(a0)
000136D2 6600 0000                  		bne.w	Obj01_ResetScr
000136D6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000136DC 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000136DE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136E4 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000136E6 6100 0000                  		bsr.w	Sonic_MoveLeft
000136EA                            
000136EA                            Obj01_NotLeft:
000136EA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000136F0 6700                       		beq.s	Obj01_NotRight	; if not, branch
000136F2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136F8 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000136FA 6100 0000                  		bsr.w	Sonic_MoveLeft
000136FE 6000                       		bra.s	Obj01_NotRight
00013700                            
00013700                            Obj01_MoveRight:
00013700 6100 0000                  		bsr.w	Sonic_MoveRight
00013704                            
00013704                            Obj01_NotRight:
00013704 1028 0026                  		move.b	$26(a0),d0
00013708 0600 0020                  		addi.b	#$20,d0
0001370C 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013710 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013714 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013718 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001371C 08A8 0005 0022             		bclr	#5,$22(a0)
00013722 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013728 0828 0003 0022             		btst	#3,$22(a0)
0001372E 6700                       		beq.s	Sonic_Balance
00013730 7000                       		moveq	#0,d0
00013732 1028 003D                  		move.b	$3D(a0),d0
00013736 ED48                       		lsl.w	#6,d0
00013738 43F8 D000                  		lea	($FFFFD000).w,a1
0001373C 43F1 0000                  		lea	(a1,d0.w),a1
00013740 4A29 0022                  		tst.b	$22(a1)
00013744 6B00                       		bmi.s	Sonic_LookUp
00013746 7200                       		moveq	#0,d1
00013748 1229 0019                  		move.b	$19(a1),d1
0001374C 3401                       		move.w	d1,d2
0001374E D442                       		add.w	d2,d2
00013750 5942                       		subq.w	#4,d2
00013752 D268 0008                  		add.w	8(a0),d1
00013756 9269 0008                  		sub.w	8(a1),d1
0001375A 0C41 0004                  		cmpi.w	#4,d1
0001375E 6D00                       		blt.s	loc_12F6A
00013760 B242                       		cmp.w	d2,d1
00013762 6C00                       		bge.s	loc_12F5A
00013764 6000                       		bra.s	Sonic_LookUp
00013766                            ; ===========================================================================
00013766                            
00013766                            Sonic_Balance:
00013766 4EB9 0000 0000             		jsr	ObjHitFloor
0001376C 0C41 000C                  		cmpi.w	#$C,d1
00013770 6D00                       		blt.s	Sonic_LookUp
00013772 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013778 6600                       		bne.s	loc_12F62
0001377A                            
0001377A                            loc_12F5A:
0001377A 08A8 0000 0022             		bclr	#0,$22(a0)
00013780 6000                       		bra.s	loc_12F70
00013782                            ; ===========================================================================
00013782                            
00013782                            loc_12F62:
00013782 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013788 6600                       		bne.s	Sonic_LookUp
0001378A                            
0001378A                            loc_12F6A:
0001378A 08E8 0000 0022             		bset	#0,$22(a0)
00013790                            
00013790                            loc_12F70:
00013790 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013796 6000                       		bra.s	Obj01_ResetScr
00013798                            ; ===========================================================================
00013798                            
00013798                            Sonic_LookUp:
00013798 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001379E 6700                       		beq.s	Sonic_Duck	; if not, branch
000137A0 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000137A6 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000137AC 6700                       		beq.s	loc_12FC2
000137AE 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000137B2 6000                       		bra.s	loc_12FC2
000137B4                            ; ===========================================================================
000137B4                            
000137B4                            Sonic_Duck:
000137B4 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000137BA 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000137BC 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000137C2 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000137C8 6700                       		beq.s	loc_12FC2
000137CA 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000137CE 6000                       		bra.s	loc_12FC2
000137D0                            ; ===========================================================================
000137D0                            
000137D0                            Obj01_ResetScr:
000137D0 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000137D6 6700                       		beq.s	loc_12FC2	; if yes, branch
000137D8 6400                       		bcc.s	loc_12FBE
000137DA 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000137DE                            
000137DE                            loc_12FBE:
000137DE 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000137E2                            
000137E2                            loc_12FC2:
000137E2 1038 F602                  		move.b	($FFFFF602).w,d0
000137E6 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000137EA 6600                       		bne.s	loc_12FEE	; if yes, branch
000137EC 3028 0014                  		move.w	$14(a0),d0
000137F0 6700                       		beq.s	loc_12FEE
000137F2 6B00                       		bmi.s	loc_12FE2
000137F4 9045                       		sub.w	d5,d0
000137F6 6400                       		bcc.s	loc_12FDC
000137F8 303C 0000                  		move.w	#0,d0
000137FC                            
000137FC                            loc_12FDC:
000137FC 3140 0014                  		move.w	d0,$14(a0)
00013800 6000                       		bra.s	loc_12FEE
00013802                            ; ===========================================================================
00013802                            
00013802                            loc_12FE2:
00013802 D045                       		add.w	d5,d0
00013804 6400                       		bcc.s	loc_12FEA
00013806 303C 0000                  		move.w	#0,d0
0001380A                            
0001380A                            loc_12FEA:
0001380A 3140 0014                  		move.w	d0,$14(a0)
0001380E                            
0001380E                            loc_12FEE:
0001380E 1028 0026                  		move.b	$26(a0),d0
00013812 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013818 C3E8 0014                  		muls.w	$14(a0),d1
0001381C E081                       		asr.l	#8,d1
0001381E 3141 0010                  		move.w	d1,$10(a0)
00013822 C1E8 0014                  		muls.w	$14(a0),d0
00013826 E080                       		asr.l	#8,d0
00013828 3140 0012                  		move.w	d0,$12(a0)
0001382C                            
0001382C                            loc_1300C:
0001382C 1028 0026                  		move.b	$26(a0),d0
00013830 0600 0040                  		addi.b	#$40,d0
00013834 6B00                       		bmi.s	locret_1307C
00013836 123C 0040                  		move.b	#$40,d1
0001383A 4A68 0014                  		tst.w	$14(a0)
0001383E 6700                       		beq.s	locret_1307C
00013840 6B00                       		bmi.s	loc_13024
00013842 4441                       		neg.w	d1
00013844                            
00013844                            loc_13024:
00013844 1028 0026                  		move.b	$26(a0),d0
00013848 D001                       		add.b	d1,d0
0001384A 3F00                       		move.w	d0,-(sp)
0001384C 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013850 301F                       		move.w	(sp)+,d0
00013852 4A41                       		tst.w	d1
00013854 6A00                       		bpl.s	locret_1307C
00013856 E141                       		asl.w	#8,d1
00013858 0600 0020                  		addi.b	#$20,d0
0001385C 0200 00C0                  		andi.b	#$C0,d0
00013860 6700                       		beq.s	loc_13078
00013862 0C00 0040                  		cmpi.b	#$40,d0
00013866 6700                       		beq.s	loc_13066
00013868 0C00 0080                  		cmpi.b	#$80,d0
0001386C 6700                       		beq.s	loc_13060
0001386E D368 0010                  		add.w	d1,$10(a0)
00013872 08E8 0005 0022             		bset	#5,$22(a0)
00013878 317C 0000 0014             		move.w	#0,$14(a0)
0001387E 4E75                       		rts	
00013880                            ; ===========================================================================
00013880                            
00013880                            loc_13060:
00013880 9368 0012                  		sub.w	d1,$12(a0)
00013884 4E75                       		rts	
00013886                            ; ===========================================================================
00013886                            
00013886                            loc_13066:
00013886 9368 0010                  		sub.w	d1,$10(a0)
0001388A 08E8 0005 0022             		bset	#5,$22(a0)
00013890 317C 0000 0014             		move.w	#0,$14(a0)
00013896 4E75                       		rts	
00013898                            ; ===========================================================================
00013898                            
00013898                            loc_13078:
00013898 D368 0012                  		add.w	d1,$12(a0)
0001389C                            
0001389C                            locret_1307C:
0001389C 4E75                       		rts	
0001389E                            ; End of function Sonic_Move
0001389E                            
0001389E                            
0001389E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001389E                            
0001389E                            
0001389E                            Sonic_MoveLeft:				; XREF: Sonic_Move
0001389E 3028 0014                  		move.w	$14(a0),d0
000138A2 6700                       		beq.s	loc_13086
000138A4 6A00                       		bpl.s	loc_130B2
000138A6                            
000138A6                            loc_13086:
000138A6 08E8 0000 0022             		bset	#0,$22(a0)
000138AC 6600                       		bne.s	loc_1309A
000138AE 08A8 0005 0022             		bclr	#5,$22(a0)
000138B4 117C 0001 001D             		move.b	#1,$1D(a0)
000138BA                            
000138BA                            loc_1309A:
000138BA 9045                       		sub.w	d5,d0
000138BC 3206                       		move.w	d6,d1
000138BE 4441                       		neg.w	d1
000138C0 B041                       		cmp.w	d1,d0
000138C2 6E00                       		bgt.s	loc_130A6
000138C4 3001                       		move.w	d1,d0
000138C6                            
000138C6                            loc_130A6:
000138C6 3140 0014                  		move.w	d0,$14(a0)
000138CA 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000138D0 4E75                       		rts	
000138D2                            ; ===========================================================================
000138D2                            
000138D2                            loc_130B2:				; XREF: Sonic_MoveLeft
000138D2 9044                       		sub.w	d4,d0
000138D4 6400                       		bcc.s	loc_130BA
000138D6 303C FF80                  		move.w	#-$80,d0
000138DA                            
000138DA                            loc_130BA:
000138DA 3140 0014                  		move.w	d0,$14(a0)
000138DE 1028 0026                  		move.b	$26(a0),d0
000138E2 0600 0020                  		addi.b	#$20,d0
000138E6 0200 00C0                  		andi.b	#$C0,d0
000138EA 6600                       		bne.s	locret_130E8
000138EC 0C40 0400                  		cmpi.w	#$400,d0
000138F0 6D00                       		blt.s	locret_130E8
000138F2 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000138F8 08A8 0000 0022             		bclr	#0,$22(a0)
000138FE 303C 00A4                  		move.w	#$A4,d0
00013902 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013908                            
00013908                            locret_130E8:
00013908 4E75                       		rts	
0001390A                            ; End of function Sonic_MoveLeft
0001390A                            
0001390A                            
0001390A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001390A                            
0001390A                            
0001390A                            Sonic_MoveRight:			; XREF: Sonic_Move
0001390A 3028 0014                  		move.w	$14(a0),d0
0001390E 6B00                       		bmi.s	loc_13118
00013910 08A8 0000 0022             		bclr	#0,$22(a0)
00013916 6700                       		beq.s	loc_13104
00013918 08A8 0005 0022             		bclr	#5,$22(a0)
0001391E 117C 0001 001D             		move.b	#1,$1D(a0)
00013924                            
00013924                            loc_13104:
00013924 D045                       		add.w	d5,d0
00013926 B046                       		cmp.w	d6,d0
00013928 6D00                       		blt.s	loc_1310C
0001392A 3006                       		move.w	d6,d0
0001392C                            
0001392C                            loc_1310C:
0001392C 3140 0014                  		move.w	d0,$14(a0)
00013930 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013936 4E75                       		rts	
00013938                            ; ===========================================================================
00013938                            
00013938                            loc_13118:				; XREF: Sonic_MoveRight
00013938 D044                       		add.w	d4,d0
0001393A 6400                       		bcc.s	loc_13120
0001393C 303C 0080                  		move.w	#$80,d0
00013940                            
00013940                            loc_13120:
00013940 3140 0014                  		move.w	d0,$14(a0)
00013944 1028 0026                  		move.b	$26(a0),d0
00013948 0600 0020                  		addi.b	#$20,d0
0001394C 0200 00C0                  		andi.b	#$C0,d0
00013950 6600                       		bne.s	locret_1314E
00013952 0C40 FC00                  		cmpi.w	#-$400,d0
00013956 6E00                       		bgt.s	locret_1314E
00013958 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001395E 08E8 0000 0022             		bset	#0,$22(a0)
00013964 303C 00A4                  		move.w	#$A4,d0
00013968 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
0001396E                            
0001396E                            locret_1314E:
0001396E 4E75                       		rts	
00013970                            ; End of function Sonic_MoveRight
00013970                            
00013970                            ; ---------------------------------------------------------------------------
00013970                            ; Subroutine to	change Sonic's speed as he rolls
00013970                            ; ---------------------------------------------------------------------------
00013970                            
00013970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013970                            
00013970                            
00013970                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013970 3C38 F760                  		move.w	($FFFFF760).w,d6
00013974 E346                       		asl.w	#1,d6
00013976 3A38 F762                  		move.w	($FFFFF762).w,d5
0001397A E245                       		asr.w	#1,d5
0001397C 3838 F764                  		move.w	($FFFFF764).w,d4
00013980 E444                       		asr.w	#2,d4
00013982 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013986 6600 0000                  		bne.w	loc_131CC
0001398A 4A68 003E                  		tst.w	$3E(a0)
0001398E 6600                       		bne.s	loc_13188
00013990 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013996 6700                       		beq.s	loc_1317C	; if not, branch
00013998 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001399E 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000139A0 6100 0000                  		bsr.w	Sonic_RollLeft
000139A4                            
000139A4                            loc_1317C:
000139A4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000139AA 6700                       		beq.s	loc_13188	; if not, branch
000139AC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000139B2 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
000139B4 6100 0000                  		bsr.w	Sonic_RollLeft
000139B8 6000                       		bra.s	loc_13188
000139BA                            
000139BA                            SonicRS_RollRight:
000139BA 6100 0000                  		bsr.w	Sonic_RollRight
000139BE                            
000139BE                            loc_13188:
000139BE 3028 0014                  		move.w	$14(a0),d0
000139C2 6700                       		beq.s	loc_131AA
000139C4 6B00                       		bmi.s	loc_1319E
000139C6 9045                       		sub.w	d5,d0
000139C8 6400                       		bcc.s	loc_13198
000139CA 303C 0000                  		move.w	#0,d0
000139CE                            
000139CE                            loc_13198:
000139CE 3140 0014                  		move.w	d0,$14(a0)
000139D2 6000                       		bra.s	loc_131AA
000139D4                            ; ===========================================================================
000139D4                            
000139D4                            loc_1319E:				; XREF: Sonic_RollSpeed
000139D4 D045                       		add.w	d5,d0
000139D6 6400                       		bcc.s	loc_131A6
000139D8 303C 0000                  		move.w	#0,d0
000139DC                            
000139DC                            loc_131A6:
000139DC 3140 0014                  		move.w	d0,$14(a0)
000139E0                            
000139E0                            loc_131AA:
000139E0 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000139E4 6600                       		bne.s	loc_131CC	; if yes, branch
000139E6 08A8 0002 0022             		bclr	#2,$22(a0)
000139EC 117C 0013 0016             		move.b	#$13,$16(a0)
000139F2 117C 0009 0017             		move.b	#9,$17(a0)
000139F8 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000139FE 5B68 000C                  		subq.w	#5,$C(a0)
00013A02                            
00013A02                            loc_131CC:
00013A02 1028 0026                  		move.b	$26(a0),d0
00013A06 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013A0C C1E8 0014                  		muls.w	$14(a0),d0
00013A10 E080                       		asr.l	#8,d0
00013A12 3140 0012                  		move.w	d0,$12(a0)
00013A16 C3E8 0014                  		muls.w	$14(a0),d1
00013A1A E081                       		asr.l	#8,d1
00013A1C 0C41 1000                  		cmpi.w	#$1000,d1
00013A20 6F00                       		ble.s	loc_131F0
00013A22 323C 1000                  		move.w	#$1000,d1
00013A26                            
00013A26                            loc_131F0:
00013A26 0C41 F000                  		cmpi.w	#-$1000,d1
00013A2A 6C00                       		bge.s	loc_131FA
00013A2C 323C F000                  		move.w	#-$1000,d1
00013A30                            
00013A30                            loc_131FA:
00013A30 3141 0010                  		move.w	d1,$10(a0)
00013A34 6000 FDF6                  		bra.w	loc_1300C
00013A38                            ; End of function Sonic_RollSpeed
00013A38                            
00013A38                            
00013A38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A38                            
00013A38                            
00013A38                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013A38 3028 0014                  		move.w	$14(a0),d0
00013A3C 6700                       		beq.s	loc_1320A
00013A3E 6A00                       		bpl.s	loc_13218
00013A40                            
00013A40                            loc_1320A:
00013A40 08E8 0000 0022             		bset	#0,$22(a0)
00013A46 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A4C 4E75                       		rts	
00013A4E                            ; ===========================================================================
00013A4E                            
00013A4E                            loc_13218:
00013A4E 9044                       		sub.w	d4,d0
00013A50 6400                       		bcc.s	loc_13220
00013A52 303C FF80                  		move.w	#-$80,d0
00013A56                            
00013A56                            loc_13220:
00013A56 3140 0014                  		move.w	d0,$14(a0)
00013A5A 4E75                       		rts	
00013A5C                            ; End of function Sonic_RollLeft
00013A5C                            
00013A5C                            
00013A5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A5C                            
00013A5C                            
00013A5C                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013A5C 3028 0014                  		move.w	$14(a0),d0
00013A60 6B00                       		bmi.s	loc_1323A
00013A62 08A8 0000 0022             		bclr	#0,$22(a0)
00013A68 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A6E 4E75                       		rts	
00013A70                            ; ===========================================================================
00013A70                            
00013A70                            loc_1323A:
00013A70 D044                       		add.w	d4,d0
00013A72 6400                       		bcc.s	loc_13242
00013A74 303C 0080                  		move.w	#$80,d0
00013A78                            
00013A78                            loc_13242:
00013A78 3140 0014                  		move.w	d0,$14(a0)
00013A7C 4E75                       		rts	
00013A7E                            ; End of function Sonic_RollRight
00013A7E                            
00013A7E                            Sonic_AirUnroll:
00013A7E                            		
00013A7E 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013A82 6600                       		bne.s	@timer
00013A84 1038 F605                  		move.b	($FFFFF605).w,d0
00013A88 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013A8C 6700                       		beq.s	@end	; if not, branch
00013A8E 08A8 0002 0022             		bclr	#2,$22(a0)
00013A94 117C 0013 0016             		move.b	#$13,$16(a0)
00013A9A 117C 0009 0017             		move.b	#9,$17(a0)
00013AA0 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013AA6 303C 00A5                  		move.w	#$A5,d0
00013AAA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play fart sound
00013AB0 2028 0010                  		move.l	$10(a0),d0
00013AB4 D080                       		add.l	d0,d0
00013AB6 2140 0010                  		move.l	d0,$10(a0)
00013ABA 5B68 000C                  		subq.w	#5,$C(a0)
00013ABE                            	@end:
00013ABE 4E75                       		rts
00013AC0                            	@timer:
00013AC0 5328 003A                  		subq.b	#1,$3A(a0)
00013AC4 4E75                       		rts
00013AC6                            
00013AC6                            ; ---------------------------------------------------------------------------
00013AC6                            ; Subroutine to	change Sonic's direction while jumping
00013AC6                            ; ---------------------------------------------------------------------------
00013AC6                            
00013AC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AC6                            
00013AC6                            
00013AC6                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013AC6 3C38 F760                  		move.w	($FFFFF760).w,d6
00013ACA 3A38 F762                  		move.w	($FFFFF762).w,d5
00013ACE E345                       		asl.w	#1,d5
00013AD0 0828 0004 0022             		btst	#4,$22(a0)
00013AD6 6600                       		bne.s	Obj01_ResetScr2
00013AD8 3028 0010                  		move.w	$10(a0),d0
00013ADC 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013AE2 6700                       		beq.s	loc_13278	; if not, branch
00013AE4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013AEA 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013AEC 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013AF0 6E00                       		bgt.s	loc_13278
00013AF2 3001                       		move.w	d1,d0
00013AF4                            
00013AF4                            loc_13278:
00013AF4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013AFA 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013AFC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B02 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013B04 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013B08 6E00                       		bgt.s	Obj01_JumpMove
00013B0A 3001                       		move.w	d1,d0
00013B0C 6000                       		bra.s	Obj01_JumpMove
00013B0E                            
00013B0E                            SonicCJD_JumpLeft:
00013B0E 08E8 0000 0022             		bset	#0,$22(a0)
00013B14 9045                       		sub.w	d5,d0
00013B16 3206                       		move.w	d6,d1
00013B18 4441                       		neg.w	d1
00013B1A B041                       		cmp.w	d1,d0
00013B1C                            		; bgt.s	loc_13278
00013B1C                            		; move.w	d1,d0
00013B1C 4E75                       		rts
00013B1E                            
00013B1E                            SonicCJD_JumpRight:
00013B1E 08A8 0000 0022             		bclr	#0,$22(a0)
00013B24 D045                       		add.w	d5,d0
00013B26 B046                       		cmp.w	d6,d0
00013B28 6D00                       		blt.s	Obj01_JumpMove
00013B2A 3006                       		move.w	d6,d0
00013B2C                            
00013B2C                            Obj01_JumpMove:
00013B2C 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013B30                            
00013B30                            Obj01_ResetScr2:
00013B30 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013B36 6700                       		beq.s	loc_132A4	; if yes, branch
00013B38 6400                       		bcc.s	loc_132A0
00013B3A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013B3E                            
00013B3E                            loc_132A0:
00013B3E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013B42                            
00013B42                            loc_132A4:
00013B42 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013B48 6500                       		bcs.s	locret_132D2	; if yes, branch
00013B4A 3028 0010                  		move.w	$10(a0),d0
00013B4E 3200                       		move.w	d0,d1
00013B50 EA41                       		asr.w	#5,d1
00013B52 6700                       		beq.s	locret_132D2
00013B54 6B00                       		bmi.s	loc_132C6
00013B56 9041                       		sub.w	d1,d0
00013B58 6400                       		bcc.s	loc_132C0
00013B5A 303C 0000                  		move.w	#0,d0
00013B5E                            
00013B5E                            loc_132C0:
00013B5E 3140 0010                  		move.w	d0,$10(a0)
00013B62 4E75                       		rts	
00013B64                            ; ===========================================================================
00013B64                            
00013B64                            loc_132C6:
00013B64 9041                       		sub.w	d1,d0
00013B66 6500                       		bcs.s	loc_132CE
00013B68 303C 0000                  		move.w	#0,d0
00013B6C                            
00013B6C                            loc_132CE:
00013B6C 3140 0010                  		move.w	d0,$10(a0)
00013B70                            
00013B70                            locret_132D2:
00013B70 4E75                       		rts	
00013B72                            ; End of function Sonic_ChgJumpDir
00013B72                            
00013B72                            ; ===========================================================================
00013B72                            ; ---------------------------------------------------------------------------
00013B72                            ; Unused subroutine to squash Sonic
00013B72                            ; ---------------------------------------------------------------------------
00013B72 1028 0026                  		move.b	$26(a0),d0
00013B76 0600 0020                  		addi.b	#$20,d0
00013B7A 0200 00C0                  		andi.b	#$C0,d0
00013B7E 6600                       		bne.s	locret_13302
00013B80 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013B84 4A41                       		tst.w	d1
00013B86 6A00                       		bpl.s	locret_13302
00013B88 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013B8E 317C 0000 0010             		move.w	#0,$10(a0)
00013B94 317C 0000 0012             		move.w	#0,$12(a0)
00013B9A 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013BA0                            
00013BA0                            locret_13302:
00013BA0 4E75                       		rts	
00013BA2                            ; ---------------------------------------------------------------------------
00013BA2                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013BA2                            ; ---------------------------------------------------------------------------
00013BA2                            
00013BA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BA2                            
00013BA2                            
00013BA2                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013BA2 2228 0008                  		move.l	8(a0),d1
00013BA6 3028 0010                  		move.w	$10(a0),d0
00013BAA 48C0                       		ext.l	d0
00013BAC E180                       		asl.l	#8,d0
00013BAE D280                       		add.l	d0,d1
00013BB0 4841                       		swap	d1
00013BB2 3038 F728                  		move.w	($FFFFF728).w,d0
00013BB6 0640 0010                  		addi.w	#$10,d0
00013BBA B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013BBC 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013BBE 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013BC2 0640 0128                  		addi.w	#$128,d0
00013BC6 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013BCA 6600                       		bne.s	loc_13332
00013BCC 0640 0040                  		addi.w	#$40,d0
00013BD0                            
00013BD0                            loc_13332:
00013BD0 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013BD2 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013BD4                            
00013BD4                            loc_13336:
00013BD4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013BD8 0640 00E0                  		addi.w	#$E0,d0
00013BDC B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013BE0 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013BE2 4E75                       		rts	
00013BE4                            ; ===========================================================================
00013BE4                            
00013BE4                            Boundary_Bottom:
00013BE4 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013BEA 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013BEE 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013BF4 6500 0000                  		bcs.w	KillSonic
00013BF8 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013BFC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013C02 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013C08 4E75                       		rts	
00013C0A                            ; ===========================================================================
00013C0A                            
00013C0A                            Boundary_Sides:
00013C0A 3140 0008                  		move.w	d0,8(a0)
00013C0E 317C 0000 000A             		move.w	#0,$A(a0)
00013C14 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013C1A 317C 0000 0014             		move.w	#0,$14(a0)
00013C20 60B2                       		bra.s	loc_13336
00013C22                            ; End of function Sonic_LevelBound
00013C22                            
00013C22                            ; ---------------------------------------------------------------------------
00013C22                            ; Subroutine allowing Sonic to roll when he's moving
00013C22                            ; ---------------------------------------------------------------------------
00013C22                            
00013C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C22                            
00013C22                            
00013C22                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013C22 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013C26 6600                       		bne.s	Obj01_NoRoll
00013C28 3028 0014                  		move.w	$14(a0),d0
00013C2C 6A00                       		bpl.s	loc_13392
00013C2E 4440                       		neg.w	d0
00013C30                            
00013C30                            loc_13392:
00013C30 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013C34 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013C36 1038 F602                  		move.b	($FFFFF602).w,d0
00013C3A 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013C3E 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013C40 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013C46 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013C48                            
00013C48                            Obj01_NoRoll:
00013C48 4E75                       		rts	
00013C4A                            ; ===========================================================================
00013C4A                            
00013C4A                            Obj01_ChkRoll:
00013C4A 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013C50 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013C52 4E75                       		rts	
00013C54                            ; ===========================================================================
00013C54                            
00013C54                            Obj01_DoRoll:
00013C54 08E8 0002 0022             		bset	#2,$22(a0)
00013C5A 117C 000E 0016             		move.b	#$E,$16(a0)
00013C60 117C 0007 0017             		move.b	#7,$17(a0)
00013C66 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C6C 5A68 000C                  		addq.w	#5,$C(a0)
00013C70 303C 00BE                  		move.w	#$BE,d0
00013C74 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rolling sound
00013C7A 4A68 0014                  		tst.w	$14(a0)
00013C7E 6600                       		bne.s	locret_133E8
00013C80 317C 0200 0014             		move.w	#$200,$14(a0)
00013C86                            
00013C86                            locret_133E8:
00013C86 4E75                       		rts	
00013C88                            ; End of function Sonic_Roll
00013C88                            
00013C88                            ; ---------------------------------------------------------------------------
00013C88                            ; Subroutine allowing Sonic to jump
00013C88                            ; ---------------------------------------------------------------------------
00013C88                            
00013C88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C88                            
00013C88                            
00013C88                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013C88 1038 F603                  		move.b	($FFFFF603).w,d0
00013C8C 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013C90 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013C94 7000                       		moveq	#0,d0
00013C96 1028 0026                  		move.b	$26(a0),d0
00013C9A 0600 0080                  		addi.b	#$80,d0
00013C9E 6100 0000                  		bsr.w	sub_14D48
00013CA2 0C41 0006                  		cmpi.w	#6,d1
00013CA6 6D00 0000                  		blt.w	locret_1348E
00013CAA 343C 0680                  		move.w	#$680,d2
00013CAE 0828 0006 0022             		btst	#6,$22(a0)
00013CB4 6700                       		beq.s	loc_1341C
00013CB6 343C 0380                  		move.w	#$380,d2
00013CBA                            
00013CBA                            loc_1341C:
00013CBA 7000                       		moveq	#0,d0
00013CBC 1028 0026                  		move.b	$26(a0),d0
00013CC0 0400 0040                  		subi.b	#$40,d0
00013CC4 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013CCA C3C2                       		muls.w	d2,d1
00013CCC E081                       		asr.l	#8,d1
00013CCE D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013CD2 C1C2                       		muls.w	d2,d0
00013CD4 E080                       		asr.l	#8,d0
00013CD6 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013CDA 08E8 0001 0022             		bset	#1,$22(a0)
00013CE0 08A8 0005 0022             		bclr	#5,$22(a0)
00013CE6 588F                       		addq.l	#4,sp
00013CE8 117C 0001 003C             		move.b	#1,$3C(a0)
00013CEE 4228 0038                  		clr.b	$38(a0)
00013CF2 303C 00A0                  		move.w	#$A0,d0
00013CF6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
00013CFC 117C 0013 0016             		move.b	#$13,$16(a0)
00013D02 117C 0009 0017             		move.b	#9,$17(a0)
00013D08 0828 0002 0022             		btst	#2,$22(a0)
00013D0E 6600                       		bne.s	loc_13490
00013D10 117C 000E 0016             		move.b	#$E,$16(a0)
00013D16 117C 0007 0017             		move.b	#7,$17(a0)
00013D1C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013D22 08E8 0002 0022             		bset	#2,$22(a0)
00013D28 5A68 000C                  		addq.w	#5,$C(a0)
00013D2C 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013D32                            
00013D32                            locret_1348E:
00013D32 4E75                       		rts	
00013D34                            ; ===========================================================================
00013D34                            
00013D34                            loc_13490:
00013D34 08E8 0004 0022             		bset	#4,$22(a0)
00013D3A 4E75                       		rts	
00013D3C                            ; End of function Sonic_Jump
00013D3C                            
00013D3C                            
00013D3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D3C                            
00013D3C                            
00013D3C                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D3C 4A28 003C                  		tst.b	$3C(a0)
00013D40 6700                       		beq.s	loc_134C4
00013D42 323C FC00                  		move.w	#-$400,d1
00013D46 0828 0006 0022             		btst	#6,$22(a0)
00013D4C 6700                       		beq.s	loc_134AE
00013D4E 323C FE00                  		move.w	#-$200,d1
00013D52                            
00013D52                            loc_134AE:
00013D52 B268 0012                  		cmp.w	$12(a0),d1
00013D56 6F00                       		ble.s	locret_134C2
00013D58 1038 F602                  		move.b	($FFFFF602).w,d0
00013D5C 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013D60 6600                       		bne.s	locret_134C2	; if yes, branch
00013D62 3141 0012                  		move.w	d1,$12(a0)
00013D66                            
00013D66                            locret_134C2:
00013D66 4E75                       		rts	
00013D68                            ; ===========================================================================
00013D68                            
00013D68                            loc_134C4:
00013D68 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013D6E 6C00                       		bge.s	locret_134D2
00013D70 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013D76                            
00013D76                            locret_134D2:
00013D76 4E75                       		rts	
00013D78                            ; End of function Sonic_JumpHeight
00013D78                            
00013D78                            ; ---------------------------------------------------------------------------
00013D78                            ; Subroutine to	slow Sonic walking up a	slope
00013D78                            ; ---------------------------------------------------------------------------
00013D78                            
00013D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D78                            
00013D78                            
00013D78                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013D78 1028 0026                  		move.b	$26(a0),d0
00013D7C 0600 0060                  		addi.b	#$60,d0
00013D80 0C00 00C0                  		cmpi.b	#$C0,d0
00013D84 6400                       		bcc.s	locret_13508
00013D86 1028 0026                  		move.b	$26(a0),d0
00013D8A 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013D90 C1FC 0020                  		muls.w	#$20,d0
00013D94 E080                       		asr.l	#8,d0
00013D96 4A68 0014                  		tst.w	$14(a0)
00013D9A 6700                       		beq.s	locret_13508
00013D9C 6B00                       		bmi.s	loc_13504
00013D9E 4A40                       		tst.w	d0
00013DA0 6700                       		beq.s	locret_13502
00013DA2 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013DA6                            
00013DA6                            locret_13502:
00013DA6 4E75                       		rts	
00013DA8                            ; ===========================================================================
00013DA8                            
00013DA8                            loc_13504:
00013DA8 D168 0014                  		add.w	d0,$14(a0)
00013DAC                            
00013DAC                            locret_13508:
00013DAC 4E75                       		rts	
00013DAE                            ; End of function Sonic_SlopeResist
00013DAE                            
00013DAE                            ; ---------------------------------------------------------------------------
00013DAE                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013DAE                            ; ---------------------------------------------------------------------------
00013DAE                            
00013DAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DAE                            
00013DAE                            
00013DAE                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013DAE 1028 0026                  		move.b	$26(a0),d0
00013DB2 0600 0060                  		addi.b	#$60,d0
00013DB6 0C00 00C0                  		cmpi.b	#-$40,d0
00013DBA 6400                       		bcc.s	locret_13544
00013DBC 1028 0026                  		move.b	$26(a0),d0
00013DC0 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013DC6 C1FC 0050                  		muls.w	#$50,d0
00013DCA E080                       		asr.l	#8,d0
00013DCC 4A68 0014                  		tst.w	$14(a0)
00013DD0 6B00                       		bmi.s	loc_1353A
00013DD2 4A40                       		tst.w	d0
00013DD4 6A00                       		bpl.s	loc_13534
00013DD6 E480                       		asr.l	#2,d0
00013DD8                            
00013DD8                            loc_13534:
00013DD8 D168 0014                  		add.w	d0,$14(a0)
00013DDC 4E75                       		rts	
00013DDE                            ; ===========================================================================
00013DDE                            
00013DDE                            loc_1353A:
00013DDE 4A40                       		tst.w	d0
00013DE0 6B00                       		bmi.s	loc_13540
00013DE2 E480                       		asr.l	#2,d0
00013DE4                            
00013DE4                            loc_13540:
00013DE4 D168 0014                  		add.w	d0,$14(a0)
00013DE8                            
00013DE8                            locret_13544:
00013DE8 4E75                       		rts	
00013DEA                            ; End of function Sonic_RollRepel
00013DEA                            
00013DEA                            ; ---------------------------------------------------------------------------
00013DEA                            ; Subroutine to	push Sonic down	a slope
00013DEA                            ; ---------------------------------------------------------------------------
00013DEA                            
00013DEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DEA                            
00013DEA                            
00013DEA                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013DEA 4E71                       		nop	
00013DEC 4A28 0038                  		tst.b	$38(a0)
00013DF0 6600                       		bne.s	locret_13580
00013DF2 4A68 003E                  		tst.w	$3E(a0)
00013DF6 6600                       		bne.s	loc_13582
00013DF8 1028 0026                  		move.b	$26(a0),d0
00013DFC 0600 0020                  		addi.b	#$20,d0
00013E00 0200 00C0                  		andi.b	#$C0,d0
00013E04 6700                       		beq.s	locret_13580
00013E06 3028 0014                  		move.w	$14(a0),d0
00013E0A 6A00                       		bpl.s	loc_1356A
00013E0C 4440                       		neg.w	d0
00013E0E                            
00013E0E                            loc_1356A:
00013E0E 0C40 0280                  		cmpi.w	#$280,d0
00013E12 6400                       		bcc.s	locret_13580
00013E14 4268 0014                  		clr.w	$14(a0)
00013E18 08E8 0001 0022             		bset	#1,$22(a0)
00013E1E 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013E24                            
00013E24                            locret_13580:
00013E24 4E75                       		rts	
00013E26                            ; ===========================================================================
00013E26                            
00013E26                            loc_13582:
00013E26 5368 003E                  		subq.w	#1,$3E(a0)
00013E2A 4E75                       		rts	
00013E2C                            ; End of function Sonic_SlopeRepel
00013E2C                            
00013E2C                            ; ---------------------------------------------------------------------------
00013E2C                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013E2C                            ; ---------------------------------------------------------------------------
00013E2C                            
00013E2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E2C                            
00013E2C                            
00013E2C                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013E2C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013E30 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013E32 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013E34                            
00013E34 5400                       		addq.b	#2,d0		; increase angle
00013E36 6400                       		bcc.s	loc_13596
00013E38 7000                       		moveq	#0,d0
00013E3A                            
00013E3A                            loc_13596:
00013E3A 6000                       		bra.s	loc_1359E
00013E3C                            ; ===========================================================================
00013E3C                            
00013E3C                            loc_13598:
00013E3C 5500                       		subq.b	#2,d0		; decrease angle
00013E3E 6400                       		bcc.s	loc_1359E
00013E40 7000                       		moveq	#0,d0
00013E42                            
00013E42                            loc_1359E:
00013E42 1140 0026                  		move.b	d0,$26(a0)
00013E46                            
00013E46                            locret_135A2:
00013E46 4E75                       		rts	
00013E48                            ; End of function Sonic_JumpAngle
00013E48                            
00013E48                            ; ---------------------------------------------------------------------------
00013E48                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013E48                            ; ---------------------------------------------------------------------------
00013E48                            
00013E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E48                            
00013E48                            
00013E48                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013E48 3228 0010                  		move.w	$10(a0),d1
00013E4C 3428 0012                  		move.w	$12(a0),d2
00013E50 4EB9 0000 2FBA             		jsr	(CalcAngle).l
00013E56 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013E5A 0400 0020                  		subi.b	#$20,d0
00013E5E 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013E62 0200 00C0                  		andi.b	#$C0,d0
00013E66 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013E6A 0C00 0040                  		cmpi.b	#$40,d0
00013E6E 6700 0000                  		beq.w	loc_13680
00013E72 0C00 0080                  		cmpi.b	#$80,d0
00013E76 6700 0000                  		beq.w	loc_136E2
00013E7A 0C00 00C0                  		cmpi.b	#-$40,d0
00013E7E 6700 0000                  		beq.w	loc_1373E
00013E82 6100 0000                  		bsr.w	Sonic_HitWall
00013E86 4A41                       		tst.w	d1
00013E88 6A00                       		bpl.s	loc_135F0
00013E8A 9368 0008                  		sub.w	d1,8(a0)
00013E8E 317C 0000 0010             		move.w	#0,$10(a0)
00013E94                            
00013E94                            loc_135F0:
00013E94 6100 0000                  		bsr.w	sub_14EB4
00013E98 4A41                       		tst.w	d1
00013E9A 6A00                       		bpl.s	loc_13602
00013E9C D368 0008                  		add.w	d1,8(a0)
00013EA0 317C 0000 0010             		move.w	#0,$10(a0)
00013EA6                            
00013EA6                            loc_13602:
00013EA6 6100 0000                  		bsr.w	Sonic_HitFloor
00013EAA 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013EAE 4A41                       		tst.w	d1
00013EB0 6A00                       		bpl.s	locret_1367E
00013EB2 1428 0012                  		move.b	$12(a0),d2
00013EB6 5002                       		addq.b	#8,d2
00013EB8 4402                       		neg.b	d2
00013EBA B202                       		cmp.b	d2,d1
00013EBC 6C00                       		bge.s	loc_1361E
00013EBE B002                       		cmp.b	d2,d0
00013EC0 6D00                       		blt.s	locret_1367E
00013EC2                            
00013EC2                            loc_1361E:
00013EC2 D368 000C                  		add.w	d1,$C(a0)
00013EC6 1143 0026                  		move.b	d3,$26(a0)
00013ECA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013ECE 117C 0000 001C             		move.b	#0,$1C(a0)
00013ED4 1003                       		move.b	d3,d0
00013ED6 0600 0020                  		addi.b	#$20,d0
00013EDA 0200 0040                  		andi.b	#$40,d0
00013EDE 6600                       		bne.s	loc_1365C
00013EE0 1003                       		move.b	d3,d0
00013EE2 0600 0010                  		addi.b	#$10,d0
00013EE6 0200 0020                  		andi.b	#$20,d0
00013EEA 6700                       		beq.s	loc_1364E
00013EEC E0E8 0012                  		asr	$12(a0)
00013EF0 6000                       		bra.s	loc_13670
00013EF2                            ; ===========================================================================
00013EF2                            
00013EF2                            loc_1364E:
00013EF2 317C 0000 0012             		move.w	#0,$12(a0)
00013EF8 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013EFE 4E75                       		rts	
00013F00                            ; ===========================================================================
00013F00                            
00013F00                            loc_1365C:
00013F00 317C 0000 0010             		move.w	#0,$10(a0)
00013F06 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013F0C 6F00                       		ble.s	loc_13670
00013F0E 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013F14                            
00013F14                            loc_13670:
00013F14 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F1A 4A03                       		tst.b	d3
00013F1C 6A00                       		bpl.s	locret_1367E
00013F1E 4468 0014                  		neg.w	$14(a0)
00013F22                            
00013F22                            locret_1367E:
00013F22 4E75                       		rts	
00013F24                            ; ===========================================================================
00013F24                            
00013F24                            loc_13680:
00013F24 6100 0000                  		bsr.w	Sonic_HitWall
00013F28 4A41                       		tst.w	d1
00013F2A 6A00                       		bpl.s	loc_1369A
00013F2C 9368 0008                  		sub.w	d1,8(a0)
00013F30 317C 0000 0010             		move.w	#0,$10(a0)
00013F36 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F3C 4E75                       		rts	
00013F3E                            ; ===========================================================================
00013F3E                            
00013F3E                            loc_1369A:
00013F3E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F42 4A41                       		tst.w	d1
00013F44 6A00                       		bpl.s	loc_136B4
00013F46 9368 000C                  		sub.w	d1,$C(a0)
00013F4A 4A68 0012                  		tst.w	$12(a0)
00013F4E 6A00                       		bpl.s	locret_136B2
00013F50 317C 0000 0012             		move.w	#0,$12(a0)
00013F56                            
00013F56                            locret_136B2:
00013F56 4E75                       		rts	
00013F58                            ; ===========================================================================
00013F58                            
00013F58                            loc_136B4:
00013F58 4A68 0012                  		tst.w	$12(a0)
00013F5C 6B00                       		bmi.s	locret_136E0
00013F5E 6100 0000                  		bsr.w	Sonic_HitFloor
00013F62 4A41                       		tst.w	d1
00013F64 6A00                       		bpl.s	locret_136E0
00013F66 D368 000C                  		add.w	d1,$C(a0)
00013F6A 1143 0026                  		move.b	d3,$26(a0)
00013F6E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F72 117C 0000 001C             		move.b	#0,$1C(a0)
00013F78 317C 0000 0012             		move.w	#0,$12(a0)
00013F7E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F84                            
00013F84                            locret_136E0:
00013F84 4E75                       		rts	
00013F86                            ; ===========================================================================
00013F86                            
00013F86                            loc_136E2:
00013F86 6100 0000                  		bsr.w	Sonic_HitWall
00013F8A 4A41                       		tst.w	d1
00013F8C 6A00                       		bpl.s	loc_136F4
00013F8E 9368 0008                  		sub.w	d1,8(a0)
00013F92 317C 0000 0010             		move.w	#0,$10(a0)
00013F98                            
00013F98                            loc_136F4:
00013F98 6100 0000                  		bsr.w	sub_14EB4
00013F9C 4A41                       		tst.w	d1
00013F9E 6A00                       		bpl.s	loc_13706
00013FA0 D368 0008                  		add.w	d1,8(a0)
00013FA4 317C 0000 0010             		move.w	#0,$10(a0)
00013FAA                            
00013FAA                            loc_13706:
00013FAA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FAE 4A41                       		tst.w	d1
00013FB0 6A00                       		bpl.s	locret_1373C
00013FB2 9368 000C                  		sub.w	d1,$C(a0)
00013FB6 1003                       		move.b	d3,d0
00013FB8 0600 0020                  		addi.b	#$20,d0
00013FBC 0200 0040                  		andi.b	#$40,d0
00013FC0 6600                       		bne.s	loc_13726
00013FC2 317C 0000 0012             		move.w	#0,$12(a0)
00013FC8 4E75                       		rts	
00013FCA                            ; ===========================================================================
00013FCA                            
00013FCA                            loc_13726:
00013FCA 1143 0026                  		move.b	d3,$26(a0)
00013FCE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013FD2 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FD8 4A03                       		tst.b	d3
00013FDA 6A00                       		bpl.s	locret_1373C
00013FDC 4468 0014                  		neg.w	$14(a0)
00013FE0                            
00013FE0                            locret_1373C:
00013FE0 4E75                       		rts	
00013FE2                            ; ===========================================================================
00013FE2                            
00013FE2                            loc_1373E:
00013FE2 6100 0000                  		bsr.w	sub_14EB4
00013FE6 4A41                       		tst.w	d1
00013FE8 6A00                       		bpl.s	loc_13758
00013FEA D368 0008                  		add.w	d1,8(a0)
00013FEE 317C 0000 0010             		move.w	#0,$10(a0)
00013FF4 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FFA 4E75                       		rts	
00013FFC                            ; ===========================================================================
00013FFC                            
00013FFC                            loc_13758:
00013FFC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014000 4A41                       		tst.w	d1
00014002 6A00                       		bpl.s	loc_13772
00014004 9368 000C                  		sub.w	d1,$C(a0)
00014008 4A68 0012                  		tst.w	$12(a0)
0001400C 6A00                       		bpl.s	locret_13770
0001400E 317C 0000 0012             		move.w	#0,$12(a0)
00014014                            
00014014                            locret_13770:
00014014 4E75                       		rts	
00014016                            ; ===========================================================================
00014016                            
00014016                            loc_13772:
00014016 4A68 0012                  		tst.w	$12(a0)
0001401A 6B00                       		bmi.s	locret_1379E
0001401C 6100 0000                  		bsr.w	Sonic_HitFloor
00014020 4A41                       		tst.w	d1
00014022 6A00                       		bpl.s	locret_1379E
00014024 D368 000C                  		add.w	d1,$C(a0)
00014028 1143 0026                  		move.b	d3,$26(a0)
0001402C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014030 117C 0000 001C             		move.b	#0,$1C(a0)
00014036 317C 0000 0012             		move.w	#0,$12(a0)
0001403C 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014042                            
00014042                            locret_1379E:
00014042 4E75                       		rts	
00014044                            ; End of function Sonic_Floor
00014044                            
00014044                            ; ---------------------------------------------------------------------------
00014044                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00014044                            ; ---------------------------------------------------------------------------
00014044                            
00014044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014044                            
00014044                            
00014044                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00014044 0828 0004 0022             		btst	#4,$22(a0)
0001404A 6700                       		beq.s	loc_137AE
0001404C 4E71                       		nop	
0001404E 4E71                       		nop	
00014050 4E71                       		nop	
00014052                            
00014052                            loc_137AE:
00014052 08A8 0005 0022             		bclr	#5,$22(a0)
00014058 08A8 0001 0022             		bclr	#1,$22(a0)
0001405E 08A8 0004 0022             		bclr	#4,$22(a0)
00014064 0828 0002 0022             		btst	#2,$22(a0)
0001406A 6700                       		beq.s	loc_137E4
0001406C 08A8 0002 0022             		bclr	#2,$22(a0)
00014072 117C 0013 0016             		move.b	#$13,$16(a0)
00014078 117C 0009 0017             		move.b	#9,$17(a0)
0001407E 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00014084 5B68 000C                  		subq.w	#5,$C(a0)
00014088                            
00014088                            loc_137E4:
00014088 117C 0000 003C             		move.b	#0,$3C(a0)
0001408E 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00014094 4E75                       		rts	
00014096                            ; End of function Sonic_ResetOnFloor
00014096                            
00014096                            ; ===========================================================================
00014096                            ; ---------------------------------------------------------------------------
00014096                            ; Sonic	when he	gets hurt
00014096                            ; ---------------------------------------------------------------------------
00014096                            
00014096                            Obj01_Hurt:				; XREF: Obj01_Index
00014096 4EBA 9D44                  		jsr	SpeedToPos
0001409A 0668 0030 0012             		addi.w	#$30,$12(a0)
000140A0 0828 0006 0022             		btst	#6,$22(a0)
000140A6 6700                       		beq.s	loc_1380C
000140A8 0468 0020 0012             		subi.w	#$20,$12(a0)
000140AE                            
000140AE                            loc_1380C:
000140AE 6100 0000                  		bsr.w	Sonic_HurtStop
000140B2 6100 FAEE                  		bsr.w	Sonic_LevelBound
000140B6 6100 F4B4                  		bsr.w	Sonic_RecordPos
000140BA 6100 0000                  		bsr.w	Sonic_Animate
000140BE 6100 0000                  		bsr.w	LoadSonicDynPLC
000140C2 4EFA 9D3E                  		jmp	DisplaySprite
000140C6                            
000140C6                            ; ---------------------------------------------------------------------------
000140C6                            ; Subroutine to	stop Sonic falling after he's been hurt
000140C6                            ; ---------------------------------------------------------------------------
000140C6                            
000140C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140C6                            
000140C6                            
000140C6                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000140C6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000140CA 0640 00E0                  		addi.w	#$E0,d0
000140CE B068 000C                  		cmp.w	$C(a0),d0
000140D2 6500 0000                  		bcs.w	KillSonic
000140D6 6100 FD70                  		bsr.w	Sonic_Floor
000140DA 0828 0001 0022             		btst	#1,$22(a0)
000140E0 6600                       		bne.s	locret_13860
000140E2 7000                       		moveq	#0,d0
000140E4 3140 0012                  		move.w	d0,$12(a0)
000140E8 3140 0010                  		move.w	d0,$10(a0)
000140EC 3140 0014                  		move.w	d0,$14(a0)
000140F0 117C 0000 001C             		move.b	#0,$1C(a0)
000140F6 5528 0024                  		subq.b	#2,$24(a0)
000140FA 317C 0078 0030             		move.w	#$78,$30(a0)
00014100                            
00014100                            locret_13860:
00014100 4E75                       		rts	
00014102                            ; End of function Sonic_HurtStop
00014102                            
00014102                            ; ===========================================================================
00014102                            ; ---------------------------------------------------------------------------
00014102                            ; Sonic	when he	dies
00014102                            ; ---------------------------------------------------------------------------
00014102                            
00014102                            Obj01_Death:				; XREF: Obj01_Index
00014102 6100 0000                  		bsr.w	GameOver
00014106 4EBA 9CA8                  		jsr	ObjectFall
0001410A 6100 F460                  		bsr.w	Sonic_RecordPos
0001410E 6100 0000                  		bsr.w	Sonic_Animate
00014112 6100 0000                  		bsr.w	LoadSonicDynPLC
00014116 4EFA 9CEA                  		jmp	DisplaySprite
0001411A                            
0001411A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001411A                            
0001411A                            
0001411A                            GameOver:				; XREF: Obj01_Death
0001411A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001411E 0640 0100                  		addi.w	#$100,d0
00014122 B068 000C                  		cmp.w	$C(a0),d0
00014126 6400 0000                  		bcc.w	locret_13900
0001412A 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014130 5428 0024                  		addq.b	#2,$24(a0)
00014134 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014138 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
0001413C 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014140 6600                       		bne.s	loc_138D4
00014142 317C 0000 003A             		move.w	#0,$3A(a0)
00014148 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
0001414E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014154 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
0001415A 4238 FE1A                  		clr.b	($FFFFFE1A).w
0001415E                            
0001415E                            loc_138C2:
0001415E 303C 008F                  		move.w	#$8F,d0
00014162 4EB9 0000 15BA             		jsr	(PlaySound).l	; play game over music
00014168 7003                       		moveq	#3,d0
0001416A 4EF9 0000 17A4             		jmp	(LoadPLC).l	; load game over patterns
00014170                            ; ===========================================================================
00014170                            
00014170                            loc_138D4:
00014170 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014176 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
0001417A 6700                       		beq.s	locret_13900	; if not, branch
0001417C 317C 0000 003A             		move.w	#0,$3A(a0)
00014182 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014188 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001418E 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014194 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001419A 60C2                       		bra.s	loc_138C2
0001419C                            ; ===========================================================================
0001419C                            
0001419C                            locret_13900:
0001419C 4E75                       		rts	
0001419E                            ; End of function GameOver
0001419E                            
0001419E                            ; ===========================================================================
0001419E                            ; ---------------------------------------------------------------------------
0001419E                            ; Sonic	when the level is restarted
0001419E                            ; ---------------------------------------------------------------------------
0001419E                            
0001419E                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001419E 4A68 003A                  		tst.w	$3A(a0)
000141A2 6700                       		beq.s	locret_13914
000141A4 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000141A8 6600                       		bne.s	locret_13914
000141AA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000141B0                            
000141B0                            locret_13914:
000141B0 4E75                       		rts	
000141B2                            
000141B2                            ; ---------------------------------------------------------------------------
000141B2                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000141B2                            ; ---------------------------------------------------------------------------
000141B2                            
000141B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141B2                            
000141B2                            
000141B2                            Sonic_Loops:				; XREF: Obj01_Control
000141B2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
000141B8 6700                       		beq.s	loc_13926	; if yes, branch
000141BA 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
000141BE 6600 0000                  		bne.w	locret_139C2	; if not, branch
000141C2                            
000141C2                            loc_13926:
000141C2 3028 000C                  		move.w	$C(a0),d0
000141C6 E248                       		lsr.w	#1,d0
000141C8 0240 0380                  		andi.w	#$380,d0
000141CC 1228 0008                  		move.b	8(a0),d1
000141D0 0241 007F                  		andi.w	#$7F,d1
000141D4 D041                       		add.w	d1,d0
000141D6 43F8 A400                  		lea	($FFFFA400).w,a1
000141DA 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000141DE B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000141E2 6700 FA66                  		beq.w	Obj01_ChkRoll
000141E6 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000141EA 6700 FA5E                  		beq.w	Obj01_ChkRoll
000141EE B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000141F2 6700                       		beq.s	loc_13976
000141F4 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000141F8 6700                       		beq.s	loc_13966
000141FA 08A8 0006 0001             		bclr	#6,1(a0)
00014200 4E75                       		rts	
00014202                            ; ===========================================================================
00014202                            
00014202                            loc_13966:
00014202 0828 0001 0022             		btst	#1,$22(a0)
00014208 6700                       		beq.s	loc_13976
0001420A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014210 4E75                       		rts	
00014212                            ; ===========================================================================
00014212                            
00014212                            loc_13976:
00014212 3428 0008                  		move.w	8(a0),d2
00014216 0C02 002C                  		cmpi.b	#$2C,d2
0001421A 6400                       		bcc.s	loc_13988
0001421C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014222 4E75                       		rts	
00014224                            ; ===========================================================================
00014224                            
00014224                            loc_13988:
00014224 0C02 00E0                  		cmpi.b	#-$20,d2
00014228 6500                       		bcs.s	loc_13996
0001422A 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014230 4E75                       		rts	
00014232                            ; ===========================================================================
00014232                            
00014232                            loc_13996:
00014232 0828 0006 0001             		btst	#6,1(a0)
00014238 6600                       		bne.s	loc_139B2
0001423A 1228 0026                  		move.b	$26(a0),d1
0001423E 6700                       		beq.s	locret_139C2
00014240 0C01 0080                  		cmpi.b	#-$80,d1
00014244 6200                       		bhi.s	locret_139C2
00014246 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001424C 4E75                       		rts	
0001424E                            ; ===========================================================================
0001424E                            
0001424E                            loc_139B2:
0001424E 1228 0026                  		move.b	$26(a0),d1
00014252 0C01 0080                  		cmpi.b	#-$80,d1
00014256 6300                       		bls.s	locret_139C2
00014258 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001425E                            
0001425E                            locret_139C2:
0001425E 4E75                       		rts	
00014260                            ; End of function Sonic_Loops
00014260                            
00014260                            ; ---------------------------------------------------------------------------
00014260                            ; Subroutine to	animate	Sonic's sprites
00014260                            ; ---------------------------------------------------------------------------
00014260                            
00014260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014260                            
00014260                            Player_Anim:
00014260 0000 0000                  	dc.l	SonicAniData
00014264 0000 0000                  	dc.l	SonicAniData ; gronic
00014268 0000 0000                  	dc.l	SonicAniData ; anakama
0001426C                            	; Insert more animation data for other characters here
0001426C                            	
0001426C                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001426C 7000                       			moveq	#0,d0
0001426E 1038 FFE8                  		move.b	(v_character),d0
00014272 E548                       		lsl.w	#2,d0
00014274 43FA FFEA                  		lea 	Player_Anim(pc),a1
00014278                            		
00014278 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
0001427C                            	
0001427C 7000                       		moveq	#0,d0
0001427E 1028 001C                  		move.b	$1C(a0),d0
00014282 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014286 6700                       		beq.s	SAnim_Do	; if not, branch
00014288 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0001428C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014292 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014298                            
00014298                            SAnim_Do:
00014298 D040                       		add.w	d0,d0
0001429A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001429E 1011                       		move.b	(a1),d0
000142A0 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000142A2 1228 0022                  		move.b	$22(a0),d1
000142A6 0201 0001                  		andi.b	#1,d1
000142AA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000142B0 8328 0001                  		or.b	d1,1(a0)
000142B4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000142B8 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000142BA 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000142BE                            
000142BE                            SAnim_Do2:
000142BE 7200                       		moveq	#0,d1
000142C0 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000142C4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000142C8 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000142CA                            
000142CA                            SAnim_Next:
000142CA 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000142CE 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000142D2                            
000142D2                            SAnim_Delay:
000142D2 4E75                       		rts	
000142D4                            ; ===========================================================================
000142D4                            
000142D4                            SAnim_End_FF:
000142D4 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000142D6 6600                       		bne.s	SAnim_End_FE	; if not, branch
000142D8 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000142DE 1029 0001                  		move.b	1(a1),d0	; read sprite number
000142E2 60E6                       		bra.s	SAnim_Next
000142E4                            ; ===========================================================================
000142E4                            
000142E4                            SAnim_End_FE:
000142E4 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000142E6 6600                       		bne.s	SAnim_End_FD	; if not, branch
000142E8 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000142EC 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000142F0 9200                       		sub.b	d0,d1
000142F2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000142F6 60D2                       		bra.s	SAnim_Next
000142F8                            ; ===========================================================================
000142F8                            
000142F8                            SAnim_End_FD:
000142F8 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000142FA 6600                       		bne.s	SAnim_End	; if not, branch
000142FC 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014302                            
00014302                            SAnim_End:
00014302 4E75                       		rts	
00014304                            ; ===========================================================================
00014304                            
00014304                            SAnim_WalkRun:				; XREF: SAnim_Do
00014304 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014308 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
0001430A 5200                       		addq.b	#1,d0		; is animation walking/running?
0001430C 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014310 7200                       		moveq	#0,d1
00014312 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014316 1428 0022                  		move.b	$22(a0),d2
0001431A 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001431E 6600                       		bne.s	loc_13A70	; if yes, branch
00014320 4600                       		not.b	d0		; reverse angle
00014322                            
00014322                            loc_13A70:
00014322 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014326 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014328 7203                       		moveq	#3,d1
0001432A                            
0001432A                            loc_13A78:
0001432A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014330 B302                       		eor.b	d1,d2
00014332 8528 0001                  		or.b	d2,1(a0)
00014336 0828 0005 0022             		btst	#5,$22(a0)
0001433C 6600 0000                  		bne.w	SAnim_Push
00014340 E808                       		lsr.b	#4,d0		; divide angle by $10
00014342 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014346 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001434A 6A00                       		bpl.s	loc_13A9C
0001434C 4442                       		neg.w	d2
0001434E                            
0001434E                            loc_13A9C:
0001434E 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014354 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014358 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001435A 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014360 1200                       		move.b	d0,d1
00014362 E209                       		lsr.b	#1,d1
00014364 D001                       		add.b	d1,d0
00014366                            
00014366                            loc_13AB4:
00014366 D000                       		add.b	d0,d0
00014368 1600                       		move.b	d0,d3
0001436A 4442                       		neg.w	d2
0001436C 0642 0800                  		addi.w	#$800,d2
00014370 6A00                       		bpl.s	loc_13AC2
00014372 7400                       		moveq	#0,d2
00014374                            
00014374                            loc_13AC2:
00014374 E04A                       		lsr.w	#8,d2
00014376 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001437A 6100 FF42                  		bsr.w	SAnim_Do2
0001437E D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014382 4E75                       		rts	
00014384                            ; ===========================================================================
00014384                            
00014384                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014384 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014386 6600                       		bne.s	SAnim_Push	; if not, branch
00014388 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001438C 6A00                       		bpl.s	loc_13ADE
0001438E 4442                       		neg.w	d2
00014390                            
00014390                            loc_13ADE:
00014390 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014396 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001439A 6400                       		bcc.s	loc_13AF0	; if yes, branch
0001439C 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000143A2                            
000143A2                            loc_13AF0:
000143A2 4442                       		neg.w	d2
000143A4 0642 0400                  		addi.w	#$400,d2
000143A8 6A00                       		bpl.s	loc_13AFA
000143AA 7400                       		moveq	#0,d2
000143AC                            
000143AC                            loc_13AFA:
000143AC E04A                       		lsr.w	#8,d2
000143AE 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000143B2 1228 0022                  		move.b	$22(a0),d1
000143B6 0201 0001                  		andi.b	#1,d1
000143BA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000143C0 8328 0001                  		or.b	d1,1(a0)
000143C4 6000 FEF8                  		bra.w	SAnim_Do2
000143C8                            ; ===========================================================================
000143C8                            
000143C8                            SAnim_Push:				; XREF: SAnim_RollJump
000143C8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000143CC 6B00                       		bmi.s	loc_13B1E
000143CE 4442                       		neg.w	d2
000143D0                            
000143D0                            loc_13B1E:
000143D0 0642 0800                  		addi.w	#$800,d2
000143D4 6A00                       		bpl.s	loc_13B26
000143D6 7400                       		moveq	#0,d2
000143D8                            
000143D8                            loc_13B26:
000143D8 EC4A                       		lsr.w	#6,d2
000143DA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000143DE 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000143E4 1228 0022                  		move.b	$22(a0),d1
000143E8 0201 0001                  		andi.b	#1,d1
000143EC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000143F2 8328 0001                  		or.b	d1,1(a0)
000143F6 6000 FEC6                  		bra.w	SAnim_Do2
000143FA                            ; End of function Sonic_Animate
000143FA                            
000143FA                            ; ===========================================================================
000143FA                            SonicAniData:
000143FA                            	include "_anim\Sonic.asm"
000143FA                            ; ---------------------------------------------------------------------------
000143FA                            ; Animation script - Sonic
000143FA                            ; ---------------------------------------------------------------------------
000143FA 0000                       		dc.w SonAni_Walk-SonicAniData
000143FC 0000                       		dc.w SonAni_Run-SonicAniData
000143FE 0000                       		dc.w SonAni_Roll-SonicAniData
00014400 0000                       		dc.w SonAni_Roll2-SonicAniData
00014402 0000                       		dc.w SonAni_Push-SonicAniData
00014404 0000                       		dc.w SonAni_Wait-SonicAniData
00014406 0000                       		dc.w SonAni_Balance-SonicAniData
00014408 0000                       		dc.w SonAni_LookUp-SonicAniData
0001440A 0000                       		dc.w SonAni_Duck-SonicAniData
0001440C 0000                       		dc.w SonAni_Warp1-SonicAniData
0001440E 0000                       		dc.w SonAni_Warp2-SonicAniData
00014410 0000                       		dc.w SonAni_Warp3-SonicAniData
00014412 0000                       		dc.w SonAni_Warp4-SonicAniData
00014414 0000                       		dc.w SonAni_Stop-SonicAniData
00014416 0000                       		dc.w SonAni_Float1-SonicAniData
00014418 0000                       		dc.w SonAni_Float2-SonicAniData
0001441A 0000                       		dc.w SonAni_Spring-SonicAniData
0001441C 0000                       		dc.w SonAni_LZHang-SonicAniData
0001441E 0000                       		dc.w SonAni_Leap1-SonicAniData
00014420 0000                       		dc.w SonAni_Leap2-SonicAniData
00014422 0000                       		dc.w SonAni_Surf-SonicAniData
00014424 0000                       		dc.w SonAni_Bubble-SonicAniData
00014426 0000                       		dc.w SonAni_Death1-SonicAniData
00014428 0000                       		dc.w SonAni_Drown-SonicAniData
0001442A 0000                       		dc.w SonAni_Death2-SonicAniData
0001442C 0000                       		dc.w SonAni_Shrink-SonicAniData
0001442E 0000                       		dc.w SonAni_Hurt-SonicAniData
00014430 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014432 0000                       		dc.w SonAni_Blank-SonicAniData
00014434 0000                       		dc.w SonAni_Float3-SonicAniData
00014436 0000                       		dc.w SonAni_Float4-SonicAniData
00014438 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014442 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001444A FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014452 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001445A FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014462 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014478 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
0001447C 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014480 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014484 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014488 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
0001448C 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014490 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014494 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014498 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001449C 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000144A4 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000144A8 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000144AC 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000144B2 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000144B8 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000144BC 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000144C4 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000144C8 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000144CC 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000144D0 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000144DA 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000144DE 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000144E2 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000144E6 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000144EE 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000144F2                            		even
000144F2                            		even
000144F2                            
000144F2                            ; ---------------------------------------------------------------------------
000144F2                            ; Sonic	pattern	loading	subroutine
000144F2                            ; ---------------------------------------------------------------------------
000144F2                            
000144F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144F2                            Player_DPLC:
000144F2 0000 0000                  	dc.l	SonicDynPLC
000144F6 0000 0000                  	dc.l	SonicDynPLC ; gronic
000144FA 0000 0000                  	dc.l	SonicDynPLC ; anakama
000144FE                            	; add pointers for player dplc here
000144FE                            Player_Art:
000144FE 0000 0000                  	dc.l	Art_Sonic
00014502 0000 0000                  	dc.l	Art_Sonic ; gronic
00014506 0000 0000                  	dc.l	Art_Sonic ; anakama
0001450A                            	; add pointers for player art here
0001450A                            
0001450A                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001450A 7000                       		moveq	#0,d0
0001450C 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014510 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014514 6700                       		beq.s	locret_13C96
00014516 11C0 F766                  		move.b	d0,($FFFFF766).w
0001451A                            		
0001451A 323C 0000                  		move.w	#0,d1
0001451E 1238 FFE8                  		move.b	(v_character),d1
00014522 E549                       		lsl.w	#2,d1
00014524 45FA FFCC                  		lea 	Player_DPLC(pc),a2
00014528                            
00014528 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
0001452C                            		
0001452C D040                       		add.w	d0,d0
0001452E D4F2 0000                  		adda.w	(a2,d0.w),a2
00014532 7200                       		moveq	#0,d1
00014534 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014536 5301                       		subq.b	#1,d1
00014538 6B00                       		bmi.s	locret_13C96
0001453A 47F8 C800                  		lea	($FFFFC800).w,a3
0001453E 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014544                            
00014544                            SPLC_ReadEntry:
00014544 303C 0000                  		move.w	#0,d0
00014548 1038 FFE8                  		move.b	(v_character),d0
0001454C E548                       		lsl.w	#2,d0
0001454E 43FA FFAE                  		lea 	Player_Art(pc),a1
00014552                            
00014552 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014556                            
00014556 7400                       		moveq	#0,d2
00014558 141A                       		move.b	(a2)+,d2
0001455A 3002                       		move.w	d2,d0
0001455C E808                       		lsr.b	#4,d0
0001455E E14A                       		lsl.w	#8,d2
00014560 141A                       		move.b	(a2)+,d2
00014562 EB4A                       		lsl.w	#5,d2
00014564 D3C2                       		adda.l	d2,a1
00014566                            
00014566                            SPLC_LoadTile:
00014566 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
0001456A 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
0001456E 47EB 0020                  		lea	$20(a3),a3	; next tile
00014572 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014576                            
00014576 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
0001457A                            
0001457A                            locret_13C96:
0001457A 4E75                       		rts	
0001457C                            ; End of function LoadSonicDynPLC
0001457C                            
0001457C                            ; ===========================================================================
0001457C                            ; ---------------------------------------------------------------------------
0001457C                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001457C                            ; ---------------------------------------------------------------------------
0001457C                            
0001457C                            Obj0A:					; XREF: Obj_Index
0001457C 7000                       		moveq	#0,d0
0001457E 1028 0024                  		move.b	$24(a0),d0
00014582 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014586 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
0001458A                            ; ===========================================================================
0001458A 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001458E 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014592 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014596 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
0001459A 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001459C                            ; ===========================================================================
0001459C                            
0001459C                            Obj0A_Main:				; XREF: Obj0A_Index
0001459C 5428 0024                  		addq.b	#2,$24(a0)
000145A0 217C 0001 3194 0004        		move.l	#Map_obj64,4(a0)
000145A8 317C 8348 0002             		move.w	#$8348,2(a0)
000145AE 117C 0084 0001             		move.b	#$84,1(a0)
000145B4 117C 0010 0019             		move.b	#$10,$19(a0)
000145BA 117C 0001 0018             		move.b	#1,$18(a0)
000145C0 1028 0028                  		move.b	$28(a0),d0
000145C4 6A00                       		bpl.s	loc_13D00
000145C6 5028 0024                  		addq.b	#8,$24(a0)
000145CA 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000145D2 317C 0440 0002             		move.w	#$440,2(a0)
000145D8 0240 007F                  		andi.w	#$7F,d0
000145DC 1140 0033                  		move.b	d0,$33(a0)
000145E0 6000 0000                  		bra.w	Obj0A_Countdown
000145E4                            ; ===========================================================================
000145E4                            
000145E4                            loc_13D00:
000145E4 1140 001C                  		move.b	d0,$1C(a0)
000145E8 3168 0008 0030             		move.w	8(a0),$30(a0)
000145EE 317C FF78 0012             		move.w	#-$88,$12(a0)
000145F4                            
000145F4                            Obj0A_Animate:				; XREF: Obj0A_Index
000145F4 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000145FA 4EB9 0000 AEC2             		jsr	AnimateSprite
00014600                            
00014600                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014600 3038 F646                  		move.w	($FFFFF646).w,d0
00014604 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014608 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001460A 117C 0006 0024             		move.b	#6,$24(a0)
00014610 5E28 001C                  		addq.b	#7,$1C(a0)
00014614 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
0001461A 6700                       		beq.s	Obj0A_Display
0001461C 6000                       		bra.s	Obj0A_Display
0001461E                            ; ===========================================================================
0001461E                            
0001461E                            Obj0A_Wobble:
0001461E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014622 6700                       		beq.s	loc_13D44
00014624 5868 0030                  		addq.w	#4,$30(a0)
00014628                            
00014628                            loc_13D44:
00014628 1028 0026                  		move.b	$26(a0),d0
0001462C 5228 0026                  		addq.b	#1,$26(a0)
00014630 0240 007F                  		andi.w	#$7F,d0
00014634 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001463A 1031 0000                  		move.b	(a1,d0.w),d0
0001463E 4880                       		ext.w	d0
00014640 D068 0030                  		add.w	$30(a0),d0
00014644 3140 0008                  		move.w	d0,8(a0)
00014648 6100                       		bsr.s	Obj0A_ShowNumber
0001464A 4EBA 9790                  		jsr	SpeedToPos
0001464E 4A28 0001                  		tst.b	1(a0)
00014652 6A00                       		bpl.s	Obj0A_Delete
00014654 4EFA 97AC                  		jmp	DisplaySprite
00014658                            ; ===========================================================================
00014658                            
00014658                            Obj0A_Delete:
00014658 4EFA 97E4                  		jmp	DeleteObject
0001465C                            ; ===========================================================================
0001465C                            
0001465C                            Obj0A_Display:				; XREF: Obj0A_Index
0001465C 6100                       		bsr.s	Obj0A_ShowNumber
0001465E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014664 4EB9 0000 AEC2             		jsr	AnimateSprite
0001466A 4EFA 9796                  		jmp	DisplaySprite
0001466E                            ; ===========================================================================
0001466E                            
0001466E                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001466E 4EFA 97CE                  		jmp	DeleteObject
00014672                            ; ===========================================================================
00014672                            
00014672                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014672 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014678 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001467A 5368 0038                  		subq.w	#1,$38(a0)
0001467E 6600                       		bne.s	Obj0A_Display2
00014680 117C 000E 0024             		move.b	#$E,$24(a0)
00014686 5E28 001C                  		addq.b	#7,$1C(a0)
0001468A 60D0                       		bra.s	Obj0A_Display
0001468C                            ; ===========================================================================
0001468C                            
0001468C                            Obj0A_Display2:
0001468C 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014692 4EB9 0000 AEC2             		jsr	AnimateSprite
00014698 4A28 0001                  		tst.b	1(a0)
0001469C 6A00                       		bpl.s	Obj0A_Delete3
0001469E 4EFA 9762                  		jmp	DisplaySprite
000146A2                            ; ===========================================================================
000146A2                            
000146A2                            Obj0A_Delete3:
000146A2 4EFA 979A                  		jmp	DeleteObject
000146A6                            ; ===========================================================================
000146A6                            
000146A6                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000146A6 4A68 0038                  		tst.w	$38(a0)
000146AA 6700                       		beq.s	locret_13E1A
000146AC 5368 0038                  		subq.w	#1,$38(a0)
000146B0 6600                       		bne.s	locret_13E1A
000146B2 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000146B8 6400                       		bcc.s	locret_13E1A
000146BA 317C 000F 0038             		move.w	#$F,$38(a0)
000146C0 4268 0012                  		clr.w	$12(a0)
000146C4 117C 0080 0001             		move.b	#$80,1(a0)
000146CA 3028 0008                  		move.w	8(a0),d0
000146CE 9078 F700                  		sub.w	($FFFFF700).w,d0
000146D2 0640 0080                  		addi.w	#$80,d0
000146D6 3140 0008                  		move.w	d0,8(a0)
000146DA 3028 000C                  		move.w	$C(a0),d0
000146DE 9078 F704                  		sub.w	($FFFFF704).w,d0
000146E2 0640 0080                  		addi.w	#$80,d0
000146E6 3140 000A                  		move.w	d0,$A(a0)
000146EA 117C 000C 0024             		move.b	#$C,$24(a0)
000146F0                            
000146F0                            locret_13E1A:
000146F0 4E75                       		rts	
000146F2                            ; ===========================================================================
000146F2                            Obj0A_WobbleData:
000146F2 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014703 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014714 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014725 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014735 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014742 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001474F FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001475C FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014769 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014772                            ; ===========================================================================
00014772                            
00014772                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014772 4A68 002C                  		tst.w	$2C(a0)
00014776 6600 0000                  		bne.w	loc_13F86
0001477A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014780 6400 0000                  		bcc.w	locret_1408C
00014784 0838 0006 D022             		btst	#6,($FFFFD022).w
0001478A 6700 0000                  		beq.w	locret_1408C
0001478E 5368 0038                  		subq.w	#1,$38(a0)
00014792 6A00 0000                  		bpl.w	loc_13FAC
00014796 317C 003B 0038             		move.w	#59,$38(a0)
0001479C 317C 0001 0036             		move.w	#1,$36(a0)
000147A2 4EB9 0000 2CC6             		jsr	(RandomNumber).l
000147A8 0240 0001                  		andi.w	#1,d0
000147AC 1140 0034                  		move.b	d0,$34(a0)
000147B0 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000147B4 0C40 0019                  		cmpi.w	#$19,d0
000147B8 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000147BA 0C40 0014                  		cmpi.w	#$14,d0
000147BE 6700                       		beq.s	Obj0A_WarnSound
000147C0 0C40 000F                  		cmpi.w	#$F,d0
000147C4 6700                       		beq.s	Obj0A_WarnSound
000147C6 0C40 000C                  		cmpi.w	#$C,d0
000147CA 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000147CC 6600                       		bne.s	loc_13F02
000147CE 303C 0092                  		move.w	#$92,d0
000147D2 4EB9 0000 15BA             		jsr	(PlaySound).l	; play countdown music
000147D8                            
000147D8                            loc_13F02:
000147D8 5328 0032                  		subq.b	#1,$32(a0)
000147DC 6A00                       		bpl.s	Obj0A_ReduceAir
000147DE 1168 0033 0032             		move.b	$33(a0),$32(a0)
000147E4 08E8 0007 0036             		bset	#7,$36(a0)
000147EA 6000                       		bra.s	Obj0A_ReduceAir
000147EC                            ; ===========================================================================
000147EC                            
000147EC                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000147EC 303C 00C2                  		move.w	#$C2,d0
000147F0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000147F6                            
000147F6                            Obj0A_ReduceAir:
000147F6 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000147FA 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000147FE 6100 0000                  		bsr.w	ResumeMusic
00014802 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014808 303C 00B2                  		move.w	#$B2,d0
0001480C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play drowning sound
00014812 117C 000A 0034             		move.b	#$A,$34(a0)
00014818 317C 0001 0036             		move.w	#1,$36(a0)
0001481E 317C 0078 002C             		move.w	#$78,$2C(a0)
00014824 2F08                       		move.l	a0,-(sp)
00014826 41F8 D000                  		lea	($FFFFD000).w,a0
0001482A 6100 F818                  		bsr.w	Sonic_ResetOnFloor
0001482E 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014834 08E8 0001 0022             		bset	#1,$22(a0)
0001483A 08E8 0007 0002             		bset	#7,2(a0)
00014840 317C 0000 0012             		move.w	#0,$12(a0)
00014846 317C 0000 0010             		move.w	#0,$10(a0)
0001484C 317C 0000 0014             		move.w	#0,$14(a0)
00014852 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014858 205F                       		movea.l	(sp)+,a0
0001485A 4E75                       		rts	
0001485C                            ; ===========================================================================
0001485C                            
0001485C                            loc_13F86:
0001485C 5368 002C                  		subq.w	#1,$2C(a0)
00014860 6600                       		bne.s	loc_13F94
00014862 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014868 4E75                       		rts	
0001486A                            ; ===========================================================================
0001486A                            
0001486A                            loc_13F94:
0001486A 2F08                       		move.l	a0,-(sp)
0001486C 41F8 D000                  		lea	($FFFFD000).w,a0
00014870 4EBA 956A                  		jsr	SpeedToPos
00014874 0668 0010 0012             		addi.w	#$10,$12(a0)
0001487A 205F                       		movea.l	(sp)+,a0
0001487C 6000                       		bra.s	loc_13FAC
0001487E                            ; ===========================================================================
0001487E                            
0001487E                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001487E 6000                       		bra.s	Obj0A_MakeItem
00014880                            ; ===========================================================================
00014880                            
00014880                            loc_13FAC:
00014880 4A68 0036                  		tst.w	$36(a0)
00014884 6700 0000                  		beq.w	locret_1408C
00014888 5368 003A                  		subq.w	#1,$3A(a0)
0001488C 6A00 0000                  		bpl.w	locret_1408C
00014890                            
00014890                            Obj0A_MakeItem:
00014890 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00014896 0240 000F                  		andi.w	#$F,d0
0001489A 3140 003A                  		move.w	d0,$3A(a0)
0001489E 4EBA 99E8                  		jsr	SingleObjLoad
000148A2 6600 0000                  		bne.w	locret_1408C
000148A6 12BC 000A                  		move.b	#$A,0(a1)	; load object
000148AA 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
000148B0 7006                       		moveq	#6,d0
000148B2 0838 0000 D022             		btst	#0,($FFFFD022).w
000148B8 6700                       		beq.s	loc_13FF2
000148BA 4440                       		neg.w	d0
000148BC 137C 0040 0026             		move.b	#$40,$26(a1)
000148C2                            
000148C2                            loc_13FF2:
000148C2 D169 0008                  		add.w	d0,8(a1)
000148C6 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000148CC 137C 0006 0028             		move.b	#6,$28(a1)
000148D2 4A68 002C                  		tst.w	$2C(a0)
000148D6 6700 0000                  		beq.w	loc_1403E
000148DA 0268 0007 003A             		andi.w	#7,$3A(a0)
000148E0 0668 0000 003A             		addi.w	#0,$3A(a0)
000148E6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000148EA 0440 000C                  		subi.w	#$C,d0
000148EE 3340 000C                  		move.w	d0,$C(a1)
000148F2 4EB9 0000 2CC6             		jsr	(RandomNumber).l
000148F8 1340 0026                  		move.b	d0,$26(a1)
000148FC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014900 0200 0003                  		andi.b	#3,d0
00014904 6600                       		bne.s	loc_14082
00014906 137C 000E 0028             		move.b	#$E,$28(a1)
0001490C 6000                       		bra.s	loc_14082
0001490E                            ; ===========================================================================
0001490E                            
0001490E                            loc_1403E:
0001490E 0828 0007 0036             		btst	#7,$36(a0)
00014914 6700                       		beq.s	loc_14082
00014916 3438 FE14                  		move.w	($FFFFFE14).w,d2
0001491A E24A                       		lsr.w	#1,d2
0001491C 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00014922 0240 0003                  		andi.w	#3,d0
00014926 6600                       		bne.s	loc_1406A
00014928 08E8 0006 0036             		bset	#6,$36(a0)
0001492E 6600                       		bne.s	loc_14082
00014930 1342 0028                  		move.b	d2,$28(a1)
00014934 337C 001C 0038             		move.w	#$1C,$38(a1)
0001493A                            
0001493A                            loc_1406A:
0001493A 4A28 0034                  		tst.b	$34(a0)
0001493E 6600                       		bne.s	loc_14082
00014940 08E8 0006 0036             		bset	#6,$36(a0)
00014946 6600                       		bne.s	loc_14082
00014948 1342 0028                  		move.b	d2,$28(a1)
0001494C 337C 001C 0038             		move.w	#$1C,$38(a1)
00014952                            
00014952                            loc_14082:
00014952 5328 0034                  		subq.b	#1,$34(a0)
00014956 6A00                       		bpl.s	locret_1408C
00014958 4268 0036                  		clr.w	$36(a0)
0001495C                            
0001495C                            locret_1408C:
0001495C 4E75                       		rts	
0001495E                            
0001495E                            ; ---------------------------------------------------------------------------
0001495E                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001495E                            ; ---------------------------------------------------------------------------
0001495E                            
0001495E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001495E                            
0001495E                            
0001495E                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001495E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014964                             
00014964                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014964                             
00014964 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014968                             
00014968 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001496E 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014970 43F9 0000 3C72             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014976 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014978                             
00014978                            Air_GetBgm2:
00014978 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001497E 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014980 43F9 0000 3C7A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014986 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014988                             
00014988                            Air_GetBgm3:
00014988 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001498E 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014990 43F9 0000 3C80             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014996 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014998                             
00014998                            Air_GetBgm4:
00014998 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001499E 6600                       		bne.s	Air_PlayMusic	; if not, branch
000149A0 43F9 0000 3C86             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000149A6                             
000149A6                            Air_PlayMusic:
000149A6 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
000149AA                             
000149AA                            loc_140A6:
000149AA 4EB9 0000 15BA             		jsr	(PlaySound).l
000149B0                             
000149B0                            ; NineKode ends here
000149B0                            
000149B0                            loc_140AC:
000149B0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000149B6 4238 D372                  		clr.b	($FFFFD372).w
000149BA 4E75                       		rts	
000149BC                            ; End of function ResumeMusic
000149BC                            
000149BC                            ; ===========================================================================
000149BC                            Ani_obj0A:
000149BC                            	include "_anim\obj0A.asm"
000149BC                            ; ---------------------------------------------------------------------------
000149BC                            ; Animation script - countdown numbers and bubbles (LZ)
000149BC                            ; ---------------------------------------------------------------------------
000149BC 0000                       		dc.w byte_140D6-Ani_obj0A
000149BE 0000                       		dc.w byte_140E0-Ani_obj0A
000149C0 0000                       		dc.w byte_140EA-Ani_obj0A
000149C2 0000                       		dc.w byte_140F4-Ani_obj0A
000149C4 0000                       		dc.w byte_140FE-Ani_obj0A
000149C6 0000                       		dc.w byte_14108-Ani_obj0A
000149C8 0000                       		dc.w byte_14112-Ani_obj0A
000149CA 0000                       		dc.w byte_14118-Ani_obj0A
000149CC 0000                       		dc.w byte_14120-Ani_obj0A
000149CE 0000                       		dc.w byte_14128-Ani_obj0A
000149D0 0000                       		dc.w byte_14130-Ani_obj0A
000149D2 0000                       		dc.w byte_14138-Ani_obj0A
000149D4 0000                       		dc.w byte_14140-Ani_obj0A
000149D6 0000                       		dc.w byte_14148-Ani_obj0A
000149D8 0000                       		dc.w byte_1414A-Ani_obj0A
000149DA 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000149E4 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000149EE 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000149F8 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014A02 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014A0C 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014A16 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014A1C 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014A24 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014A2C 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014A34 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014A3C 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014A44 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014A4C 0EFC                       byte_14148:	dc.b $E, $FC
00014A4E 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014A54                            		even
00014A54                            		even
00014A54                            
00014A54                            ; ---------------------------------------------------------------------------
00014A54                            ; Sprite mappings - drowning countdown numbers (LZ)
00014A54                            ; ---------------------------------------------------------------------------
00014A54                            Map_obj0A:
00014A54                            	include "_maps\obj0A.asm"
00014A54                            ; ---------------------------------------------------------------------------
00014A54                            ; Sprite mappings - drowning countdown numbers (LZ)
00014A54                            ; ---------------------------------------------------------------------------
00014A54 0000                       		dc.w byte_14152-Map_obj0A
00014A56 01                         byte_14152:	dc.b 1
00014A57 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014A5C                            		even
00014A5C                            		even
00014A5C                            
00014A5C                            ; ===========================================================================
00014A5C                            ; ---------------------------------------------------------------------------
00014A5C                            ; Object 38 - shield and invincibility stars
00014A5C                            ; ---------------------------------------------------------------------------
00014A5C                            
00014A5C                            Obj38:					; XREF: Obj_Index
00014A5C 7000                       		moveq	#0,d0
00014A5E 1028 0024                  		move.b	$24(a0),d0
00014A62 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014A66 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014A6A                            ; ===========================================================================
00014A6A 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014A6C 0000                       		dc.w Obj38_Shield-Obj38_Index
00014A6E 0000                       		dc.w Obj38_Stars-Obj38_Index
00014A70                            ; ===========================================================================
00014A70                            
00014A70                            Obj38_Main:				; XREF: Obj38_Index
00014A70 5428 0024                  		addq.b	#2,$24(a0)
00014A74 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014A7C 117C 0004 0001             		move.b	#4,1(a0)
00014A82 117C 0001 0018             		move.b	#1,$18(a0)
00014A88 117C 0010 0019             		move.b	#$10,$19(a0)
00014A8E 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014A92 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014A94 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014A9A 4E75                       		rts	
00014A9C                            ; ===========================================================================
00014A9C                            
00014A9C                            Obj38_DoStars:
00014A9C 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014AA0 317C 055C 0002             		move.w	#$55C,2(a0)
00014AA6 4E75                       		rts	
00014AA8                            ; ===========================================================================
00014AA8                            
00014AA8                            Obj38_Shield:				; XREF: Obj38_Index
00014AA8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014AAC 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014AAE 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014AB2 6700                       		beq.s	Obj38_Delete	; if not, branch
00014AB4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014ABA 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014AC0 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014AC6 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014ACC 4EB9 0000 AEC2             		jsr	AnimateSprite
00014AD2 4EFA 932E                  		jmp	DisplaySprite
00014AD6                            ; ===========================================================================
00014AD6                            
00014AD6                            Obj38_RmvShield:
00014AD6 4E75                       		rts	
00014AD8                            ; ===========================================================================
00014AD8                            
00014AD8                            Obj38_Delete:
00014AD8 4EFA 9364                  		jmp	DeleteObject
00014ADC                            ; ===========================================================================
00014ADC                            
00014ADC                            Obj38_Stars:				; XREF: Obj38_Index
00014ADC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014AE0 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014AE2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014AE6 1228 001C                  		move.b	$1C(a0),d1
00014AEA 5301                       		subq.b	#1,d1
00014AEC 6000                       		bra.s	Obj38_StarTrail
00014AEE                            ; ===========================================================================
00014AEE E909                       		lsl.b	#4,d1
00014AF0 5801                       		addq.b	#4,d1
00014AF2 9001                       		sub.b	d1,d0
00014AF4 1228 0030                  		move.b	$30(a0),d1
00014AF8 9001                       		sub.b	d1,d0
00014AFA 5801                       		addq.b	#4,d1
00014AFC 0201 000F                  		andi.b	#$F,d1
00014B00 1141 0030                  		move.b	d1,$30(a0)
00014B04 6000                       		bra.s	Obj38_StarTrail2a
00014B06                            ; ===========================================================================
00014B06                            
00014B06                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014B06 E709                       		lsl.b	#3,d1
00014B08 1401                       		move.b	d1,d2
00014B0A D201                       		add.b	d1,d1
00014B0C D202                       		add.b	d2,d1
00014B0E 5801                       		addq.b	#4,d1
00014B10 9001                       		sub.b	d1,d0
00014B12 1228 0030                  		move.b	$30(a0),d1
00014B16 9001                       		sub.b	d1,d0
00014B18 5801                       		addq.b	#4,d1
00014B1A 0C01 0018                  		cmpi.b	#$18,d1
00014B1E 6500                       		bcs.s	Obj38_StarTrail2
00014B20 7200                       		moveq	#0,d1
00014B22                            
00014B22                            Obj38_StarTrail2:
00014B22 1141 0030                  		move.b	d1,$30(a0)
00014B26                            
00014B26                            Obj38_StarTrail2a:
00014B26 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014B2A 43F1 0000                  		lea	(a1,d0.w),a1
00014B2E 3159 0008                  		move.w	(a1)+,8(a0)
00014B32 3159 000C                  		move.w	(a1)+,$C(a0)
00014B36 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B3C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014B42 4EB9 0000 AEC2             		jsr	AnimateSprite
00014B48 4EFA 92B8                  		jmp	DisplaySprite
00014B4C                            ; ===========================================================================
00014B4C                            
00014B4C                            Obj38_Delete2:				; XREF: Obj38_Stars
00014B4C 4EFA 92F0                  		jmp	DeleteObject
00014B50                            ; ===========================================================================
00014B50                            ; ---------------------------------------------------------------------------
00014B50                            ; Object 4A - special stage entry from beta
00014B50                            ; ---------------------------------------------------------------------------
00014B50                            
00014B50                            Obj4A:					; XREF: Obj_Index
00014B50 7000                       		moveq	#0,d0
00014B52 1028 0024                  		move.b	$24(a0),d0
00014B56 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014B5A 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014B5E                            ; ===========================================================================
00014B5E 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014B60 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014B62 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014B64                            ; ===========================================================================
00014B64                            
00014B64                            Obj4A_Main:				; XREF: Obj4A_Index
00014B64 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014B68 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014B6A 4E75                       		rts	
00014B6C                            ; ===========================================================================
00014B6C                            
00014B6C                            Obj4A_Main2:
00014B6C 5428 0024                  		addq.b	#2,$24(a0)
00014B70 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014B78 117C 0004 0001             		move.b	#4,1(a0)
00014B7E 117C 0001 0018             		move.b	#1,$18(a0)
00014B84 117C 0038 0019             		move.b	#$38,$19(a0)
00014B8A 317C 0541 0002             		move.w	#$541,2(a0)
00014B90 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014B96                            
00014B96                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014B96 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014B9C 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014BA2 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014BA8 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014BAE 4EB9 0000 AEC2             		jsr	AnimateSprite
00014BB4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014BBA 6600                       		bne.s	Obj4A_Display
00014BBC 4A38 D000                  		tst.b	($FFFFD000).w
00014BC0 6700                       		beq.s	Obj4A_Display
00014BC2 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014BC8 303C 00A8                  		move.w	#$A8,d0
00014BCC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014BD2                            
00014BD2                            Obj4A_Display:
00014BD2 4EFA 922E                  		jmp	DisplaySprite
00014BD6                            ; ===========================================================================
00014BD6                            
00014BD6                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014BD6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014BDA 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014BDC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014BE2 4EFA 925A                  		jmp	DeleteObject
00014BE6                            ; ===========================================================================
00014BE6                            
00014BE6                            Obj4A_Wait:
00014BE6 4E75                       		rts	
00014BE8                            ; ===========================================================================
00014BE8                            ; ---------------------------------------------------------------------------
00014BE8                            ; Object 08 - water splash (LZ)
00014BE8                            ; ---------------------------------------------------------------------------
00014BE8                            
00014BE8                            Obj08:					; XREF: Obj_Index
00014BE8 7000                       		moveq	#0,d0
00014BEA 1028 0024                  		move.b	$24(a0),d0
00014BEE 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014BF2 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014BF6                            ; ===========================================================================
00014BF6 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014BF8 0000                       		dc.w Obj08_Display-Obj08_Index
00014BFA 0000                       		dc.w Obj08_Delete-Obj08_Index
00014BFC                            ; ===========================================================================
00014BFC                            
00014BFC                            Obj08_Main:				; XREF: Obj08_Index
00014BFC 5428 0024                  		addq.b	#2,$24(a0)
00014C00 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014C08 0028 0004 0001             		ori.b	#4,1(a0)
00014C0E 117C 0001 0018             		move.b	#1,$18(a0)
00014C14 117C 0010 0019             		move.b	#$10,$19(a0)
00014C1A 317C 4259 0002             		move.w	#$4259,2(a0)
00014C20 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014C26                            
00014C26                            Obj08_Display:				; XREF: Obj08_Index
00014C26 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014C2C 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014C32 4EB9 0000 AEC2             		jsr	AnimateSprite
00014C38 4EFA 91C8                  		jmp	DisplaySprite
00014C3C                            ; ===========================================================================
00014C3C                            
00014C3C                            Obj08_Delete:				; XREF: Obj08_Index
00014C3C 4EFA 9200                  		jmp	DeleteObject	; delete when animation	is complete
00014C40                            ; ===========================================================================
00014C40                            Ani_obj38:
00014C40                            	include "_anim\obj38.asm"
00014C40                            ; ---------------------------------------------------------------------------
00014C40                            ; Animation script - shield and invincibility stars
00014C40                            ; ---------------------------------------------------------------------------
00014C40 0000                       		dc.w byte_14356-Ani_obj38
00014C42 0000                       		dc.w byte_1435E-Ani_obj38
00014C44 0000                       		dc.w byte_14364-Ani_obj38
00014C46 0000                       		dc.w byte_1437E-Ani_obj38
00014C48 0000                       		dc.w byte_14398-Ani_obj38
00014C4A 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014C52 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014C58 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014C69 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014C72 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014C83 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014C8C 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014C9D 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014CA6                            		even
00014CA6                            		even
00014CA6                            
00014CA6                            ; ---------------------------------------------------------------------------
00014CA6                            ; Sprite mappings - shield and invincibility stars
00014CA6                            ; ---------------------------------------------------------------------------
00014CA6                            Map_obj38:
00014CA6                            	include "_maps\obj38.asm"
00014CA6                            ; ---------------------------------------------------------------------------
00014CA6                            ; Sprite mappings - shield and invincibility stars
00014CA6                            ; ---------------------------------------------------------------------------
00014CA6 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014CAA 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014CAE 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014CB2 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014CB6 04                         byte_143C2:	dc.b 4
00014CB7 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014CBC E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014CC1 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014CC6 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014CCB 04                         byte_143D7:	dc.b 4
00014CCC E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014CD1 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014CD6 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014CDB 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014CE0 04                         byte_143EC:	dc.b 4
00014CE1 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014CE6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014CEB 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014CF0 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014CF5 04                         byte_14401:	dc.b 4
00014CF6 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014CFB E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014D00 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014D05 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014D0A 04                         byte_14416:	dc.b 4
00014D0B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014D10 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014D15 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014D1A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014D1F 04                         byte_1442B:	dc.b 4
00014D20 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014D25 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014D2A 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014D2F 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014D34 04                         byte_14440:	dc.b 4
00014D35 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014D3A E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014D3F 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014D44 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014D4A 00                         		even
00014D4A 00                         		even
00014D4A                            
00014D4A                            Ani_obj4A:
00014D4A                            	include "_anim\obj4A.asm"
00014D4A                            ; ---------------------------------------------------------------------------
00014D4A                            ; Animation script - special stage entry effect from beta
00014D4A                            ; ---------------------------------------------------------------------------
00014D4A 0000                       		dc.w byte_14458-Ani_obj4A
00014D4C 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014D60                            		even
00014D60                            		even
00014D60                            
00014D60                            ; ---------------------------------------------------------------------------
00014D60                            ; Sprite mappings - special stage entry	from beta
00014D60                            ; ---------------------------------------------------------------------------
00014D60                            Map_obj4A:
00014D60                            	include "_maps\obj4A.asm"
00014D60                            ; ---------------------------------------------------------------------------
00014D60                            ; Sprite mappings - special stage entry	from beta
00014D60                            ; ---------------------------------------------------------------------------
00014D60 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014D64 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014D68 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014D6C 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014D70 03                         byte_1447C:	dc.b 3
00014D71 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014D76 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014D7B 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014D80 03                         byte_1448C:	dc.b 3
00014D81 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014D86 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014D8B 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014D90 05                         byte_1449C:	dc.b 5
00014D91 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014D96 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014D9B FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014DA0 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014DA5 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014DAA 09                         byte_144B6:	dc.b 9
00014DAB F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014DB0 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014DB5 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014DBA 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014DBF F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014DC4 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014DC9 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014DCE 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014DD3 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014DD8 12                         byte_144E4:	dc.b $12
00014DD9 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014DDE F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014DE3 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014DE8 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014DED 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014DF2 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014DF7 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014DFC F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014E01 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014E06 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014E0B 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014E10 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014E15 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014E1A F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014E1F 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014E24 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014E29 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014E2E F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014E33 11                         byte_1453F:	dc.b $11
00014E34 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014E39 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014E3E 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014E43 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014E48 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014E4D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014E52 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014E57 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014E5C 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014E61 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014E66 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014E6B 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014E70 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014E75 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014E7A F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014E7F 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014E84 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014E89 09                         byte_14595:	dc.b 9
00014E8A FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014E8F 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014E94 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014E99 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014E9E FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014EA3 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014EA8 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014EAD 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014EB2 04                         		dc.b 4
00014EB3 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014EB8                            		even
00014EB8                            		even
00014EB8                            
00014EB8                            Ani_obj08:
00014EB8                            	include "_anim\obj08.asm"
00014EB8                            ; ---------------------------------------------------------------------------
00014EB8                            ; Animation script - water splash (LZ)
00014EB8                            ; ---------------------------------------------------------------------------
00014EB8 0000                       		dc.w byte_145C6-Ani_obj08
00014EBA 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014EC0                            		even
00014EC0                            		even
00014EC0                            
00014EC0                            ; ---------------------------------------------------------------------------
00014EC0                            ; Sprite mappings - water splash (LZ)
00014EC0                            ; ---------------------------------------------------------------------------
00014EC0                            Map_obj08:
00014EC0                            	include "_maps\obj08.asm"
00014EC0                            ; ---------------------------------------------------------------------------
00014EC0                            ; Sprite mappings - water splash (LZ)
00014EC0                            ; ---------------------------------------------------------------------------
00014EC0 0000                       		dc.w byte_145D2-Map_obj08
00014EC2 0000                       		dc.w byte_145DD-Map_obj08
00014EC4 0000                       		dc.w byte_145E8-Map_obj08
00014EC6 02                         byte_145D2:	dc.b 2
00014EC7 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014ECC FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014ED1 02                         byte_145DD:	dc.b 2
00014ED2 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014ED7 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014EDC 01                         byte_145E8:	dc.b 1
00014EDD E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014EE2                            		even
00014EE2                            		even
00014EE2                            
00014EE2                            ; ---------------------------------------------------------------------------
00014EE2                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014EE2                            ; ---------------------------------------------------------------------------
00014EE2                            
00014EE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EE2                            
00014EE2                            
00014EE2                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014EE2 0828 0003 0022             		btst	#3,$22(a0)
00014EE8 6700                       		beq.s	loc_14602
00014EEA 7000                       		moveq	#0,d0
00014EEC 11C0 F768                  		move.b	d0,($FFFFF768).w
00014EF0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014EF4 4E75                       		rts	
00014EF6                            ; ===========================================================================
00014EF6                            
00014EF6                            loc_14602:
00014EF6 7003                       		moveq	#3,d0
00014EF8 11C0 F768                  		move.b	d0,($FFFFF768).w
00014EFC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014F00 1028 0026                  		move.b	$26(a0),d0
00014F04 0600 0020                  		addi.b	#$20,d0
00014F08 6A00                       		bpl.s	loc_14624
00014F0A 1028 0026                  		move.b	$26(a0),d0
00014F0E 6A00                       		bpl.s	loc_1461E
00014F10 5300                       		subq.b	#1,d0
00014F12                            
00014F12                            loc_1461E:
00014F12 0600 0020                  		addi.b	#$20,d0
00014F16 6000                       		bra.s	loc_14630
00014F18                            ; ===========================================================================
00014F18                            
00014F18                            loc_14624:
00014F18 1028 0026                  		move.b	$26(a0),d0
00014F1C 6A00                       		bpl.s	loc_1462C
00014F1E 5200                       		addq.b	#1,d0
00014F20                            
00014F20                            loc_1462C:
00014F20 0600 001F                  		addi.b	#$1F,d0
00014F24                            
00014F24                            loc_14630:
00014F24 0200 00C0                  		andi.b	#$C0,d0
00014F28 0C00 0040                  		cmpi.b	#$40,d0
00014F2C 6700 0000                  		beq.w	Sonic_WalkVertL
00014F30 0C00 0080                  		cmpi.b	#$80,d0
00014F34 6700 0000                  		beq.w	Sonic_WalkCeiling
00014F38 0C00 00C0                  		cmpi.b	#$C0,d0
00014F3C 6700 0000                  		beq.w	Sonic_WalkVertR
00014F40 3428 000C                  		move.w	$C(a0),d2
00014F44 3628 0008                  		move.w	8(a0),d3
00014F48 7000                       		moveq	#0,d0
00014F4A 1028 0016                  		move.b	$16(a0),d0
00014F4E 4880                       		ext.w	d0
00014F50 D440                       		add.w	d0,d2
00014F52 1028 0017                  		move.b	$17(a0),d0
00014F56 4880                       		ext.w	d0
00014F58 D640                       		add.w	d0,d3
00014F5A 49F8 F768                  		lea	($FFFFF768).w,a4
00014F5E 367C 0010                  		movea.w	#$10,a3
00014F62 3C3C 0000                  		move.w	#0,d6
00014F66 7A0D                       		moveq	#$D,d5
00014F68 6100 0000                  		bsr.w	FindFloor
00014F6C 3F01                       		move.w	d1,-(sp)
00014F6E 3428 000C                  		move.w	$C(a0),d2
00014F72 3628 0008                  		move.w	8(a0),d3
00014F76 7000                       		moveq	#0,d0
00014F78 1028 0016                  		move.b	$16(a0),d0
00014F7C 4880                       		ext.w	d0
00014F7E D440                       		add.w	d0,d2
00014F80 1028 0017                  		move.b	$17(a0),d0
00014F84 4880                       		ext.w	d0
00014F86 4440                       		neg.w	d0
00014F88 D640                       		add.w	d0,d3
00014F8A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F8E 367C 0010                  		movea.w	#$10,a3
00014F92 3C3C 0000                  		move.w	#0,d6
00014F96 7A0D                       		moveq	#$D,d5
00014F98 6100 0000                  		bsr.w	FindFloor
00014F9C 301F                       		move.w	(sp)+,d0
00014F9E 6100 0000                  		bsr.w	Sonic_Angle
00014FA2 4A41                       		tst.w	d1
00014FA4 6700                       		beq.s	locret_146BE
00014FA6 6A00                       		bpl.s	loc_146C0
00014FA8 0C41 FFF2                  		cmpi.w	#-$E,d1
00014FAC 6D00                       		blt.s	locret_146E6
00014FAE D368 000C                  		add.w	d1,$C(a0)
00014FB2                            
00014FB2                            locret_146BE:
00014FB2 4E75                       		rts	
00014FB4                            ; ===========================================================================
00014FB4                            
00014FB4                            loc_146C0:
00014FB4 0C41 000E                  		cmpi.w	#$E,d1
00014FB8 6E00                       		bgt.s	loc_146CC
00014FBA                            
00014FBA                            loc_146C6:
00014FBA D368 000C                  		add.w	d1,$C(a0)
00014FBE 4E75                       		rts	
00014FC0                            ; ===========================================================================
00014FC0                            
00014FC0                            loc_146CC:
00014FC0 4A28 0038                  		tst.b	$38(a0)
00014FC4 66F4                       		bne.s	loc_146C6
00014FC6 08E8 0001 0022             		bset	#1,$22(a0)
00014FCC 08A8 0005 0022             		bclr	#5,$22(a0)
00014FD2 117C 0001 001D             		move.b	#1,$1D(a0)
00014FD8 4E75                       		rts	
00014FDA                            ; ===========================================================================
00014FDA                            
00014FDA                            locret_146E6:
00014FDA 4E75                       		rts	
00014FDC                            ; End of function Sonic_AnglePos
00014FDC                            
00014FDC                            ; ===========================================================================
00014FDC 2428 0008                  		move.l	8(a0),d2
00014FE0 3028 0010                  		move.w	$10(a0),d0
00014FE4 48C0                       		ext.l	d0
00014FE6 E180                       		asl.l	#8,d0
00014FE8 9480                       		sub.l	d0,d2
00014FEA 2142 0008                  		move.l	d2,8(a0)
00014FEE 303C 0038                  		move.w	#$38,d0
00014FF2 48C0                       		ext.l	d0
00014FF4 E180                       		asl.l	#8,d0
00014FF6 9680                       		sub.l	d0,d3
00014FF8 2143 000C                  		move.l	d3,$C(a0)
00014FFC 4E75                       		rts	
00014FFE                            ; ===========================================================================
00014FFE                            
00014FFE                            locret_1470A:
00014FFE 4E75                       		rts	
00015000                            ; ===========================================================================
00015000 2628 000C                  		move.l	$C(a0),d3
00015004 3028 0012                  		move.w	$12(a0),d0
00015008 0440 0038                  		subi.w	#$38,d0
0001500C 3140 0012                  		move.w	d0,$12(a0)
00015010 48C0                       		ext.l	d0
00015012 E180                       		asl.l	#8,d0
00015014 9680                       		sub.l	d0,d3
00015016 2143 000C                  		move.l	d3,$C(a0)
0001501A 4E75                       		rts	
0001501C 4E75                       		rts	
0001501E                            ; ===========================================================================
0001501E 2428 0008                  		move.l	8(a0),d2
00015022 2628 000C                  		move.l	$C(a0),d3
00015026 3028 0010                  		move.w	$10(a0),d0
0001502A 48C0                       		ext.l	d0
0001502C E180                       		asl.l	#8,d0
0001502E 9480                       		sub.l	d0,d2
00015030 3028 0012                  		move.w	$12(a0),d0
00015034 48C0                       		ext.l	d0
00015036 E180                       		asl.l	#8,d0
00015038 9680                       		sub.l	d0,d3
0001503A 2142 0008                  		move.l	d2,8(a0)
0001503E 2143 000C                  		move.l	d3,$C(a0)
00015042 4E75                       		rts	
00015044                            
00015044                            ; ---------------------------------------------------------------------------
00015044                            ; Subroutine to	change Sonic's angle as he walks along the floor
00015044                            ; ---------------------------------------------------------------------------
00015044                            
00015044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015044                            
00015044                            
00015044                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00015044 1438 F76A                  		move.b	($FFFFF76A).w,d2
00015048 B240                       		cmp.w	d0,d1
0001504A 6F00                       		ble.s	loc_1475E
0001504C 1438 F768                  		move.b	($FFFFF768).w,d2
00015050 3200                       		move.w	d0,d1
00015052                            
00015052                            loc_1475E:
00015052 0802 0000                  		btst	#0,d2
00015056 6600                       		bne.s	loc_1476A
00015058 1142 0026                  		move.b	d2,$26(a0)
0001505C 4E75                       		rts	
0001505E                            ; ===========================================================================
0001505E                            
0001505E                            loc_1476A:
0001505E 1428 0026                  		move.b	$26(a0),d2
00015062 0602 0020                  		addi.b	#$20,d2
00015066 0202 00C0                  		andi.b	#$C0,d2
0001506A 1142 0026                  		move.b	d2,$26(a0)
0001506E 4E75                       		rts	
00015070                            ; End of function Sonic_Angle
00015070                            
00015070                            ; ---------------------------------------------------------------------------
00015070                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00015070                            ; ---------------------------------------------------------------------------
00015070                            
00015070                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015070                            
00015070                            
00015070                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00015070 3428 000C                  		move.w	$C(a0),d2
00015074 3628 0008                  		move.w	8(a0),d3
00015078 7000                       		moveq	#0,d0
0001507A 1028 0017                  		move.b	$17(a0),d0
0001507E 4880                       		ext.w	d0
00015080 4440                       		neg.w	d0
00015082 D440                       		add.w	d0,d2
00015084 1028 0016                  		move.b	$16(a0),d0
00015088 4880                       		ext.w	d0
0001508A D640                       		add.w	d0,d3
0001508C 49F8 F768                  		lea	($FFFFF768).w,a4
00015090 367C 0010                  		movea.w	#$10,a3
00015094 3C3C 0000                  		move.w	#0,d6
00015098 7A0D                       		moveq	#$D,d5
0001509A 6100 0000                  		bsr.w	FindWall
0001509E 3F01                       		move.w	d1,-(sp)
000150A0 3428 000C                  		move.w	$C(a0),d2
000150A4 3628 0008                  		move.w	8(a0),d3
000150A8 7000                       		moveq	#0,d0
000150AA 1028 0017                  		move.b	$17(a0),d0
000150AE 4880                       		ext.w	d0
000150B0 D440                       		add.w	d0,d2
000150B2 1028 0016                  		move.b	$16(a0),d0
000150B6 4880                       		ext.w	d0
000150B8 D640                       		add.w	d0,d3
000150BA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000150BE 367C 0010                  		movea.w	#$10,a3
000150C2 3C3C 0000                  		move.w	#0,d6
000150C6 7A0D                       		moveq	#$D,d5
000150C8 6100 0000                  		bsr.w	FindWall
000150CC 301F                       		move.w	(sp)+,d0
000150CE 6100 FF74                  		bsr.w	Sonic_Angle
000150D2 4A41                       		tst.w	d1
000150D4 6700                       		beq.s	locret_147F0
000150D6 6A00                       		bpl.s	loc_147F2
000150D8 0C41 FFF2                  		cmpi.w	#-$E,d1
000150DC 6D00 FF20                  		blt.w	locret_1470A
000150E0 D368 0008                  		add.w	d1,8(a0)
000150E4                            
000150E4                            locret_147F0:
000150E4 4E75                       		rts	
000150E6                            ; ===========================================================================
000150E6                            
000150E6                            loc_147F2:
000150E6 0C41 000E                  		cmpi.w	#$E,d1
000150EA 6E00                       		bgt.s	loc_147FE
000150EC                            
000150EC                            loc_147F8:
000150EC D368 0008                  		add.w	d1,8(a0)
000150F0 4E75                       		rts	
000150F2                            ; ===========================================================================
000150F2                            
000150F2                            loc_147FE:
000150F2 4A28 0038                  		tst.b	$38(a0)
000150F6 66F4                       		bne.s	loc_147F8
000150F8 08E8 0001 0022             		bset	#1,$22(a0)
000150FE 08A8 0005 0022             		bclr	#5,$22(a0)
00015104 117C 0001 001D             		move.b	#1,$1D(a0)
0001510A 4E75                       		rts	
0001510C                            ; End of function Sonic_WalkVertR
0001510C                            
0001510C                            ; ---------------------------------------------------------------------------
0001510C                            ; Subroutine allowing Sonic to walk upside-down
0001510C                            ; ---------------------------------------------------------------------------
0001510C                            
0001510C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001510C                            
0001510C                            
0001510C                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001510C 3428 000C                  		move.w	$C(a0),d2
00015110 3628 0008                  		move.w	8(a0),d3
00015114 7000                       		moveq	#0,d0
00015116 1028 0016                  		move.b	$16(a0),d0
0001511A 4880                       		ext.w	d0
0001511C 9440                       		sub.w	d0,d2
0001511E 0A42 000F                  		eori.w	#$F,d2
00015122 1028 0017                  		move.b	$17(a0),d0
00015126 4880                       		ext.w	d0
00015128 D640                       		add.w	d0,d3
0001512A 49F8 F768                  		lea	($FFFFF768).w,a4
0001512E 367C FFF0                  		movea.w	#-$10,a3
00015132 3C3C 1000                  		move.w	#$1000,d6
00015136 7A0D                       		moveq	#$D,d5
00015138 6100 0000                  		bsr.w	FindFloor
0001513C 3F01                       		move.w	d1,-(sp)
0001513E 3428 000C                  		move.w	$C(a0),d2
00015142 3628 0008                  		move.w	8(a0),d3
00015146 7000                       		moveq	#0,d0
00015148 1028 0016                  		move.b	$16(a0),d0
0001514C 4880                       		ext.w	d0
0001514E 9440                       		sub.w	d0,d2
00015150 0A42 000F                  		eori.w	#$F,d2
00015154 1028 0017                  		move.b	$17(a0),d0
00015158 4880                       		ext.w	d0
0001515A 9640                       		sub.w	d0,d3
0001515C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015160 367C FFF0                  		movea.w	#-$10,a3
00015164 3C3C 1000                  		move.w	#$1000,d6
00015168 7A0D                       		moveq	#$D,d5
0001516A 6100 0000                  		bsr.w	FindFloor
0001516E 301F                       		move.w	(sp)+,d0
00015170 6100 FED2                  		bsr.w	Sonic_Angle
00015174 4A41                       		tst.w	d1
00015176 6700                       		beq.s	locret_14892
00015178 6A00                       		bpl.s	loc_14894
0001517A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001517E 6D00 FE5A                  		blt.w	locret_146E6
00015182 9368 000C                  		sub.w	d1,$C(a0)
00015186                            
00015186                            locret_14892:
00015186 4E75                       		rts	
00015188                            ; ===========================================================================
00015188                            
00015188                            loc_14894:
00015188 0C41 000E                  		cmpi.w	#$E,d1
0001518C 6E00                       		bgt.s	loc_148A0
0001518E                            
0001518E                            loc_1489A:
0001518E 9368 000C                  		sub.w	d1,$C(a0)
00015192 4E75                       		rts	
00015194                            ; ===========================================================================
00015194                            
00015194                            loc_148A0:
00015194 4A28 0038                  		tst.b	$38(a0)
00015198 66F4                       		bne.s	loc_1489A
0001519A 08E8 0001 0022             		bset	#1,$22(a0)
000151A0 08A8 0005 0022             		bclr	#5,$22(a0)
000151A6 117C 0001 001D             		move.b	#1,$1D(a0)
000151AC 4E75                       		rts	
000151AE                            ; End of function Sonic_WalkCeiling
000151AE                            
000151AE                            ; ---------------------------------------------------------------------------
000151AE                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000151AE                            ; ---------------------------------------------------------------------------
000151AE                            
000151AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151AE                            
000151AE                            
000151AE                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000151AE 3428 000C                  		move.w	$C(a0),d2
000151B2 3628 0008                  		move.w	8(a0),d3
000151B6 7000                       		moveq	#0,d0
000151B8 1028 0017                  		move.b	$17(a0),d0
000151BC 4880                       		ext.w	d0
000151BE 9440                       		sub.w	d0,d2
000151C0 1028 0016                  		move.b	$16(a0),d0
000151C4 4880                       		ext.w	d0
000151C6 9640                       		sub.w	d0,d3
000151C8 0A43 000F                  		eori.w	#$F,d3
000151CC 49F8 F768                  		lea	($FFFFF768).w,a4
000151D0 367C FFF0                  		movea.w	#-$10,a3
000151D4 3C3C 0800                  		move.w	#$800,d6
000151D8 7A0D                       		moveq	#$D,d5
000151DA 6100 0000                  		bsr.w	FindWall
000151DE 3F01                       		move.w	d1,-(sp)
000151E0 3428 000C                  		move.w	$C(a0),d2
000151E4 3628 0008                  		move.w	8(a0),d3
000151E8 7000                       		moveq	#0,d0
000151EA 1028 0017                  		move.b	$17(a0),d0
000151EE 4880                       		ext.w	d0
000151F0 D440                       		add.w	d0,d2
000151F2 1028 0016                  		move.b	$16(a0),d0
000151F6 4880                       		ext.w	d0
000151F8 9640                       		sub.w	d0,d3
000151FA 0A43 000F                  		eori.w	#$F,d3
000151FE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015202 367C FFF0                  		movea.w	#-$10,a3
00015206 3C3C 0800                  		move.w	#$800,d6
0001520A 7A0D                       		moveq	#$D,d5
0001520C 6100 0000                  		bsr.w	FindWall
00015210 301F                       		move.w	(sp)+,d0
00015212 6100 FE30                  		bsr.w	Sonic_Angle
00015216 4A41                       		tst.w	d1
00015218 6700                       		beq.s	locret_14934
0001521A 6A00                       		bpl.s	loc_14936
0001521C 0C41 FFF2                  		cmpi.w	#-$E,d1
00015220 6D00 FDDC                  		blt.w	locret_1470A
00015224 9368 0008                  		sub.w	d1,8(a0)
00015228                            
00015228                            locret_14934:
00015228 4E75                       		rts	
0001522A                            ; ===========================================================================
0001522A                            
0001522A                            loc_14936:
0001522A 0C41 000E                  		cmpi.w	#$E,d1
0001522E 6E00                       		bgt.s	loc_14942
00015230                            
00015230                            loc_1493C:
00015230 9368 0008                  		sub.w	d1,8(a0)
00015234 4E75                       		rts	
00015236                            ; ===========================================================================
00015236                            
00015236                            loc_14942:
00015236 4A28 0038                  		tst.b	$38(a0)
0001523A 66F4                       		bne.s	loc_1493C
0001523C 08E8 0001 0022             		bset	#1,$22(a0)
00015242 08A8 0005 0022             		bclr	#5,$22(a0)
00015248 117C 0001 001D             		move.b	#1,$1D(a0)
0001524E 4E75                       		rts	
00015250                            ; End of function Sonic_WalkVertL
00015250                            
00015250                            ; ---------------------------------------------------------------------------
00015250                            ; Subroutine to	find which tile	the object is standing on
00015250                            ; ---------------------------------------------------------------------------
00015250                            
00015250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015250                            
00015250                            
00015250                            Floor_ChkTile:				; XREF: FindFloor; et al
00015250 3002                       		move.w	d2,d0
00015252 E248                       		lsr.w	#1,d0
00015254 0240 0380                  		andi.w	#$380,d0
00015258 3203                       		move.w	d3,d1
0001525A E049                       		lsr.w	#8,d1
0001525C 0241 007F                  		andi.w	#$7F,d1
00015260 D041                       		add.w	d1,d0
00015262 72FF                       		moveq	#-1,d1
00015264 43F8 A400                  		lea	($FFFFA400).w,a1
00015268 1231 0000                  		move.b	(a1,d0.w),d1
0001526C 6700                       		beq.s	loc_14996
0001526E 6B00                       		bmi.s	loc_1499A
00015270 5301                       		subq.b	#1,d1
00015272 4881                       		ext.w	d1
00015274 EE59                       		ror.w	#7,d1
00015276 3002                       		move.w	d2,d0
00015278 D040                       		add.w	d0,d0
0001527A 0240 01E0                  		andi.w	#$1E0,d0
0001527E D240                       		add.w	d0,d1
00015280 3003                       		move.w	d3,d0
00015282 E648                       		lsr.w	#3,d0
00015284 0240 001E                  		andi.w	#$1E,d0
00015288 D240                       		add.w	d0,d1
0001528A                            
0001528A                            loc_14996:
0001528A 2241                       		movea.l	d1,a1
0001528C 4E75                       		rts	
0001528E                            ; ===========================================================================
0001528E                            
0001528E                            loc_1499A:
0001528E 0241 007F                  		andi.w	#$7F,d1
00015292 0828 0006 0001             		btst	#6,1(a0)
00015298 6700                       		beq.s	loc_149B2
0001529A 5241                       		addq.w	#1,d1
0001529C 0C41 0029                  		cmpi.w	#$29,d1
000152A0 6600                       		bne.s	loc_149B2
000152A2 323C 0051                  		move.w	#$51,d1
000152A6                            
000152A6                            loc_149B2:
000152A6 5301                       		subq.b	#1,d1
000152A8 EE59                       		ror.w	#7,d1
000152AA 3002                       		move.w	d2,d0
000152AC D040                       		add.w	d0,d0
000152AE 0240 01E0                  		andi.w	#$1E0,d0
000152B2 D240                       		add.w	d0,d1
000152B4 3003                       		move.w	d3,d0
000152B6 E648                       		lsr.w	#3,d0
000152B8 0240 001E                  		andi.w	#$1E,d0
000152BC D240                       		add.w	d0,d1
000152BE 2241                       		movea.l	d1,a1
000152C0 4E75                       		rts	
000152C2                            ; End of function Floor_ChkTile
000152C2                            
000152C2                            
000152C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152C2                            
000152C2                            
000152C2                            FindFloor:				; XREF: Sonic_AnglePos; et al
000152C2 618C                       		bsr.s	Floor_ChkTile
000152C4 3011                       		move.w	(a1),d0
000152C6 3800                       		move.w	d0,d4
000152C8 0240 07FF                  		andi.w	#$7FF,d0
000152CC 6700                       		beq.s	loc_149DE
000152CE 0B04                       		btst	d5,d4
000152D0 6600                       		bne.s	loc_149EC
000152D2                            
000152D2                            loc_149DE:
000152D2 D44B                       		add.w	a3,d2
000152D4 6100 0000                  		bsr.w	FindFloor2
000152D8 944B                       		sub.w	a3,d2
000152DA 0641 0010                  		addi.w	#$10,d1
000152DE 4E75                       		rts	
000152E0                            ; ===========================================================================
000152E0                            
000152E0                            loc_149EC:
000152E0 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000152E4 1032 0000                  		move.b	(a2,d0.w),d0
000152E8 0240 00FF                  		andi.w	#$FF,d0
000152EC 67E4                       		beq.s	loc_149DE
000152EE 45F9 0000 0000             		lea	(AngleMap).l,a2
000152F4 18B2 0000                  		move.b	(a2,d0.w),(a4)
000152F8 E948                       		lsl.w	#4,d0
000152FA 3203                       		move.w	d3,d1
000152FC 0804 000B                  		btst	#$B,d4
00015300 6700                       		beq.s	loc_14A12
00015302 4641                       		not.w	d1
00015304 4414                       		neg.b	(a4)
00015306                            
00015306                            loc_14A12:
00015306 0804 000C                  		btst	#$C,d4
0001530A 6700                       		beq.s	loc_14A22
0001530C 0614 0040                  		addi.b	#$40,(a4)
00015310 4414                       		neg.b	(a4)
00015312 0414 0040                  		subi.b	#$40,(a4)
00015316                            
00015316                            loc_14A22:
00015316 0241 000F                  		andi.w	#$F,d1
0001531A D240                       		add.w	d0,d1
0001531C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015322 1032 1000                  		move.b	(a2,d1.w),d0
00015326 4880                       		ext.w	d0
00015328 BD44                       		eor.w	d6,d4
0001532A 0804 000C                  		btst	#$C,d4
0001532E 6700                       		beq.s	loc_14A3E
00015330 4440                       		neg.w	d0
00015332                            
00015332                            loc_14A3E:
00015332 4A40                       		tst.w	d0
00015334 679C                       		beq.s	loc_149DE
00015336 6B00                       		bmi.s	loc_14A5A
00015338 0C00 0010                  		cmpi.b	#$10,d0
0001533C 6700                       		beq.s	loc_14A66
0001533E 3202                       		move.w	d2,d1
00015340 0241 000F                  		andi.w	#$F,d1
00015344 D041                       		add.w	d1,d0
00015346 323C 000F                  		move.w	#$F,d1
0001534A 9240                       		sub.w	d0,d1
0001534C 4E75                       		rts	
0001534E                            ; ===========================================================================
0001534E                            
0001534E                            loc_14A5A:
0001534E 3202                       		move.w	d2,d1
00015350 0241 000F                  		andi.w	#$F,d1
00015354 D041                       		add.w	d1,d0
00015356 6A00 FF7A                  		bpl.w	loc_149DE
0001535A                            
0001535A                            loc_14A66:
0001535A 944B                       		sub.w	a3,d2
0001535C 6100 0000                  		bsr.w	FindFloor2
00015360 D44B                       		add.w	a3,d2
00015362 0441 0010                  		subi.w	#$10,d1
00015366 4E75                       		rts	
00015368                            ; End of function FindFloor
00015368                            
00015368                            
00015368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015368                            
00015368                            
00015368                            FindFloor2:				; XREF: FindFloor
00015368 6100 FEE6                  		bsr.w	Floor_ChkTile
0001536C 3011                       		move.w	(a1),d0
0001536E 3800                       		move.w	d0,d4
00015370 0240 07FF                  		andi.w	#$7FF,d0
00015374 6700                       		beq.s	loc_14A86
00015376 0B04                       		btst	d5,d4
00015378 6600                       		bne.s	loc_14A94
0001537A                            
0001537A                            loc_14A86:
0001537A 323C 000F                  		move.w	#$F,d1
0001537E 3002                       		move.w	d2,d0
00015380 0240 000F                  		andi.w	#$F,d0
00015384 9240                       		sub.w	d0,d1
00015386 4E75                       		rts	
00015388                            ; ===========================================================================
00015388                            
00015388                            loc_14A94:
00015388 2478 F796                  		movea.l	($FFFFF796).w,a2
0001538C 1032 0000                  		move.b	(a2,d0.w),d0
00015390 0240 00FF                  		andi.w	#$FF,d0
00015394 67E4                       		beq.s	loc_14A86
00015396 45F9 0000 0000             		lea	(AngleMap).l,a2
0001539C 18B2 0000                  		move.b	(a2,d0.w),(a4)
000153A0 E948                       		lsl.w	#4,d0
000153A2 3203                       		move.w	d3,d1
000153A4 0804 000B                  		btst	#$B,d4
000153A8 6700                       		beq.s	loc_14ABA
000153AA 4641                       		not.w	d1
000153AC 4414                       		neg.b	(a4)
000153AE                            
000153AE                            loc_14ABA:
000153AE 0804 000C                  		btst	#$C,d4
000153B2 6700                       		beq.s	loc_14ACA
000153B4 0614 0040                  		addi.b	#$40,(a4)
000153B8 4414                       		neg.b	(a4)
000153BA 0414 0040                  		subi.b	#$40,(a4)
000153BE                            
000153BE                            loc_14ACA:
000153BE 0241 000F                  		andi.w	#$F,d1
000153C2 D240                       		add.w	d0,d1
000153C4 45F9 0000 0000             		lea	(CollArray1).l,a2
000153CA 1032 1000                  		move.b	(a2,d1.w),d0
000153CE 4880                       		ext.w	d0
000153D0 BD44                       		eor.w	d6,d4
000153D2 0804 000C                  		btst	#$C,d4
000153D6 6700                       		beq.s	loc_14AE6
000153D8 4440                       		neg.w	d0
000153DA                            
000153DA                            loc_14AE6:
000153DA 4A40                       		tst.w	d0
000153DC 679C                       		beq.s	loc_14A86
000153DE 6B00                       		bmi.s	loc_14AFC
000153E0 3202                       		move.w	d2,d1
000153E2 0241 000F                  		andi.w	#$F,d1
000153E6 D041                       		add.w	d1,d0
000153E8 323C 000F                  		move.w	#$F,d1
000153EC 9240                       		sub.w	d0,d1
000153EE 4E75                       		rts	
000153F0                            ; ===========================================================================
000153F0                            
000153F0                            loc_14AFC:
000153F0 3202                       		move.w	d2,d1
000153F2 0241 000F                  		andi.w	#$F,d1
000153F6 D041                       		add.w	d1,d0
000153F8 6A00 FF80                  		bpl.w	loc_14A86
000153FC 4641                       		not.w	d1
000153FE 4E75                       		rts	
00015400                            ; End of function FindFloor2
00015400                            
00015400                            
00015400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015400                            
00015400                            
00015400                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015400 6100 FE4E                  		bsr.w	Floor_ChkTile
00015404 3011                       		move.w	(a1),d0
00015406 3800                       		move.w	d0,d4
00015408 0240 07FF                  		andi.w	#$7FF,d0
0001540C 6700                       		beq.s	loc_14B1E
0001540E 0B04                       		btst	d5,d4
00015410 6600                       		bne.s	loc_14B2C
00015412                            
00015412                            loc_14B1E:
00015412 D64B                       		add.w	a3,d3
00015414 6100 0000                  		bsr.w	FindWall2
00015418 964B                       		sub.w	a3,d3
0001541A 0641 0010                  		addi.w	#$10,d1
0001541E 4E75                       		rts	
00015420                            ; ===========================================================================
00015420                            
00015420                            loc_14B2C:
00015420 2478 F796                  		movea.l	($FFFFF796).w,a2
00015424 1032 0000                  		move.b	(a2,d0.w),d0
00015428 0240 00FF                  		andi.w	#$FF,d0
0001542C 67E4                       		beq.s	loc_14B1E
0001542E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015434 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015438 E948                       		lsl.w	#4,d0
0001543A 3202                       		move.w	d2,d1
0001543C 0804 000C                  		btst	#$C,d4
00015440 6700                       		beq.s	loc_14B5A
00015442 4641                       		not.w	d1
00015444 0614 0040                  		addi.b	#$40,(a4)
00015448 4414                       		neg.b	(a4)
0001544A 0414 0040                  		subi.b	#$40,(a4)
0001544E                            
0001544E                            loc_14B5A:
0001544E 0804 000B                  		btst	#$B,d4
00015452 6700                       		beq.s	loc_14B62
00015454 4414                       		neg.b	(a4)
00015456                            
00015456                            loc_14B62:
00015456 0241 000F                  		andi.w	#$F,d1
0001545A D240                       		add.w	d0,d1
0001545C 45F9 0000 0000             		lea	(CollArray2).l,a2
00015462 1032 1000                  		move.b	(a2,d1.w),d0
00015466 4880                       		ext.w	d0
00015468 BD44                       		eor.w	d6,d4
0001546A 0804 000B                  		btst	#$B,d4
0001546E 6700                       		beq.s	loc_14B7E
00015470 4440                       		neg.w	d0
00015472                            
00015472                            loc_14B7E:
00015472 4A40                       		tst.w	d0
00015474 679C                       		beq.s	loc_14B1E
00015476 6B00                       		bmi.s	loc_14B9A
00015478 0C00 0010                  		cmpi.b	#$10,d0
0001547C 6700                       		beq.s	loc_14BA6
0001547E 3203                       		move.w	d3,d1
00015480 0241 000F                  		andi.w	#$F,d1
00015484 D041                       		add.w	d1,d0
00015486 323C 000F                  		move.w	#$F,d1
0001548A 9240                       		sub.w	d0,d1
0001548C 4E75                       		rts	
0001548E                            ; ===========================================================================
0001548E                            
0001548E                            loc_14B9A:
0001548E 3203                       		move.w	d3,d1
00015490 0241 000F                  		andi.w	#$F,d1
00015494 D041                       		add.w	d1,d0
00015496 6A00 FF7A                  		bpl.w	loc_14B1E
0001549A                            
0001549A                            loc_14BA6:
0001549A 964B                       		sub.w	a3,d3
0001549C 6100 0000                  		bsr.w	FindWall2
000154A0 D64B                       		add.w	a3,d3
000154A2 0441 0010                  		subi.w	#$10,d1
000154A6 4E75                       		rts	
000154A8                            ; End of function FindWall
000154A8                            
000154A8                            
000154A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154A8                            
000154A8                            
000154A8                            FindWall2:				; XREF: FindWall
000154A8 6100 FDA6                  		bsr.w	Floor_ChkTile
000154AC 3011                       		move.w	(a1),d0
000154AE 3800                       		move.w	d0,d4
000154B0 0240 07FF                  		andi.w	#$7FF,d0
000154B4 6700                       		beq.s	loc_14BC6
000154B6 0B04                       		btst	d5,d4
000154B8 6600                       		bne.s	loc_14BD4
000154BA                            
000154BA                            loc_14BC6:
000154BA 323C 000F                  		move.w	#$F,d1
000154BE 3003                       		move.w	d3,d0
000154C0 0240 000F                  		andi.w	#$F,d0
000154C4 9240                       		sub.w	d0,d1
000154C6 4E75                       		rts	
000154C8                            ; ===========================================================================
000154C8                            
000154C8                            loc_14BD4:
000154C8 2478 F796                  		movea.l	($FFFFF796).w,a2
000154CC 1032 0000                  		move.b	(a2,d0.w),d0
000154D0 0240 00FF                  		andi.w	#$FF,d0
000154D4 67E4                       		beq.s	loc_14BC6
000154D6 45F9 0000 0000             		lea	(AngleMap).l,a2
000154DC 18B2 0000                  		move.b	(a2,d0.w),(a4)
000154E0 E948                       		lsl.w	#4,d0
000154E2 3202                       		move.w	d2,d1
000154E4 0804 000C                  		btst	#$C,d4
000154E8 6700                       		beq.s	loc_14C02
000154EA 4641                       		not.w	d1
000154EC 0614 0040                  		addi.b	#$40,(a4)
000154F0 4414                       		neg.b	(a4)
000154F2 0414 0040                  		subi.b	#$40,(a4)
000154F6                            
000154F6                            loc_14C02:
000154F6 0804 000B                  		btst	#$B,d4
000154FA 6700                       		beq.s	loc_14C0A
000154FC 4414                       		neg.b	(a4)
000154FE                            
000154FE                            loc_14C0A:
000154FE 0241 000F                  		andi.w	#$F,d1
00015502 D240                       		add.w	d0,d1
00015504 45F9 0000 0000             		lea	(CollArray2).l,a2
0001550A 1032 1000                  		move.b	(a2,d1.w),d0
0001550E 4880                       		ext.w	d0
00015510 BD44                       		eor.w	d6,d4
00015512 0804 000B                  		btst	#$B,d4
00015516 6700                       		beq.s	loc_14C26
00015518 4440                       		neg.w	d0
0001551A                            
0001551A                            loc_14C26:
0001551A 4A40                       		tst.w	d0
0001551C 679C                       		beq.s	loc_14BC6
0001551E 6B00                       		bmi.s	loc_14C3C
00015520 3203                       		move.w	d3,d1
00015522 0241 000F                  		andi.w	#$F,d1
00015526 D041                       		add.w	d1,d0
00015528 323C 000F                  		move.w	#$F,d1
0001552C 9240                       		sub.w	d0,d1
0001552E 4E75                       		rts	
00015530                            ; ===========================================================================
00015530                            
00015530                            loc_14C3C:
00015530 3203                       		move.w	d3,d1
00015532 0241 000F                  		andi.w	#$F,d1
00015536 D041                       		add.w	d1,d0
00015538 6A00 FF80                  		bpl.w	loc_14BC6
0001553C 4641                       		not.w	d1
0001553E 4E75                       		rts	
00015540                            ; End of function FindWall2
00015540                            
00015540                            ; ---------------------------------------------------------------------------
00015540                            ; Unused floor/wall subroutine - logs something	to do with collision
00015540                            ; ---------------------------------------------------------------------------
00015540                            
00015540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015540                            
00015540                            
00015540                            FloorLog_Unk:				; XREF: Level
00015540 4E75                       		rts	
00015542                            
00015542 43F9 0000 0000             		lea	(CollArray1).l,a1
00015548 45F9 0000 0000             		lea	(CollArray1).l,a2
0001554E 363C 00FF                  		move.w	#$FF,d3
00015552                            
00015552                            loc_14C5E:
00015552 7A10                       		moveq	#$10,d5
00015554 343C 000F                  		move.w	#$F,d2
00015558                            
00015558                            loc_14C64:
00015558 7800                       		moveq	#0,d4
0001555A 323C 000F                  		move.w	#$F,d1
0001555E                            
0001555E                            loc_14C6A:
0001555E 3019                       		move.w	(a1)+,d0
00015560 EAA8                       		lsr.l	d5,d0
00015562 D944                       		addx.w	d4,d4
00015564 51C9 FFF8                  		dbf	d1,loc_14C6A
00015568                            
00015568 34C4                       		move.w	d4,(a2)+
0001556A 92FC 0020                  		suba.w	#$20,a1
0001556E 5345                       		subq.w	#1,d5
00015570 51CA FFE6                  		dbf	d2,loc_14C64
00015574                            
00015574 D2FC 0020                  		adda.w	#$20,a1
00015578 51CB FFD8                  		dbf	d3,loc_14C5E
0001557C                            
0001557C 43F9 0000 0000             		lea	(CollArray1).l,a1
00015582 45F9 0000 0000             		lea	(CollArray2).l,a2
00015588 6100                       		bsr.s	FloorLog_Unk2
0001558A 43F9 0000 0000             		lea	(CollArray1).l,a1
00015590 45F9 0000 0000             		lea	(CollArray1).l,a2
00015596                            
00015596                            ; End of function FloorLog_Unk
00015596                            
00015596                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015596                            
00015596                            
00015596                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015596 363C 0FFF                  		move.w	#$FFF,d3
0001559A                            
0001559A                            loc_14CA6:
0001559A 7400                       		moveq	#0,d2
0001559C 323C 000F                  		move.w	#$F,d1
000155A0 3019                       		move.w	(a1)+,d0
000155A2 6700                       		beq.s	loc_14CD4
000155A4 6B00                       		bmi.s	loc_14CBE
000155A6                            
000155A6                            loc_14CB2:
000155A6 E248                       		lsr.w	#1,d0
000155A8 6400                       		bcc.s	loc_14CB8
000155AA 5202                       		addq.b	#1,d2
000155AC                            
000155AC                            loc_14CB8:
000155AC 51C9 FFF8                  		dbf	d1,loc_14CB2
000155B0                            
000155B0 6000                       		bra.s	loc_14CD6
000155B2                            ; ===========================================================================
000155B2                            
000155B2                            loc_14CBE:
000155B2 0C40 FFFF                  		cmpi.w	#-1,d0
000155B6 6700                       		beq.s	loc_14CD0
000155B8                            
000155B8                            loc_14CC4:
000155B8 E348                       		lsl.w	#1,d0
000155BA 6400                       		bcc.s	loc_14CCA
000155BC 5302                       		subq.b	#1,d2
000155BE                            
000155BE                            loc_14CCA:
000155BE 51C9 FFF8                  		dbf	d1,loc_14CC4
000155C2                            
000155C2 6000                       		bra.s	loc_14CD6
000155C4                            ; ===========================================================================
000155C4                            
000155C4                            loc_14CD0:
000155C4 303C 0010                  		move.w	#$10,d0
000155C8                            
000155C8                            loc_14CD4:
000155C8 3400                       		move.w	d0,d2
000155CA                            
000155CA                            loc_14CD6:
000155CA 14C2                       		move.b	d2,(a2)+
000155CC 51CB FFCC                  		dbf	d3,loc_14CA6
000155D0                            
000155D0 4E75                       		rts	
000155D2                            
000155D2                            ; End of function FloorLog_Unk2
000155D2                            
000155D2                            
000155D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155D2                            
000155D2                            
000155D2                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000155D2 2628 0008                  		move.l	8(a0),d3
000155D6 2428 000C                  		move.l	$C(a0),d2
000155DA 3228 0010                  		move.w	$10(a0),d1
000155DE 48C1                       		ext.l	d1
000155E0 E181                       		asl.l	#8,d1
000155E2 D681                       		add.l	d1,d3
000155E4 3228 0012                  		move.w	$12(a0),d1
000155E8 48C1                       		ext.l	d1
000155EA E181                       		asl.l	#8,d1
000155EC D481                       		add.l	d1,d2
000155EE 4842                       		swap	d2
000155F0 4843                       		swap	d3
000155F2 11C0 F768                  		move.b	d0,($FFFFF768).w
000155F6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000155FA 1200                       		move.b	d0,d1
000155FC 0600 0020                  		addi.b	#$20,d0
00015600 6A00                       		bpl.s	loc_14D1A
00015602 1001                       		move.b	d1,d0
00015604 6A00                       		bpl.s	loc_14D14
00015606 5300                       		subq.b	#1,d0
00015608                            
00015608                            loc_14D14:
00015608 0600 0020                  		addi.b	#$20,d0
0001560C 6000                       		bra.s	loc_14D24
0001560E                            ; ===========================================================================
0001560E                            
0001560E                            loc_14D1A:
0001560E 1001                       		move.b	d1,d0
00015610 6A00                       		bpl.s	loc_14D20
00015612 5200                       		addq.b	#1,d0
00015614                            
00015614                            loc_14D20:
00015614 0600 001F                  		addi.b	#$1F,d0
00015618                            
00015618                            loc_14D24:
00015618 0200 00C0                  		andi.b	#$C0,d0
0001561C 6700 0000                  		beq.w	loc_14DF0
00015620 0C00 0080                  		cmpi.b	#$80,d0
00015624 6700 0000                  		beq.w	loc_14F7C
00015628 0201 0038                  		andi.b	#$38,d1
0001562C 6600                       		bne.s	loc_14D3C
0001562E 5042                       		addq.w	#8,d2
00015630                            
00015630                            loc_14D3C:
00015630 0C00 0040                  		cmpi.b	#$40,d0
00015634 6700 0000                  		beq.w	loc_1504A
00015638 6000 0000                  		bra.w	loc_14EBC
0001563C                            
0001563C                            ; End of function Sonic_WalkSpeed
0001563C                            
0001563C                            
0001563C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001563C                            
0001563C                            
0001563C                            sub_14D48:				; XREF: Sonic_Jump
0001563C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015640 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015644 0600 0020                  		addi.b	#$20,d0
00015648 0200 00C0                  		andi.b	#$C0,d0
0001564C 0C00 0040                  		cmpi.b	#$40,d0
00015650 6700 0000                  		beq.w	loc_14FD6
00015654 0C00 0080                  		cmpi.b	#$80,d0
00015658 6700 0000                  		beq.w	Sonic_DontRunOnWalls
0001565C 0C00 00C0                  		cmpi.b	#$C0,d0
00015660 6700 0000                  		beq.w	sub_14E50
00015664                            
00015664                            ; End of function sub_14D48
00015664                            
00015664                            ; ---------------------------------------------------------------------------
00015664                            ; Subroutine to	make Sonic land	on the floor after jumping
00015664                            ; ---------------------------------------------------------------------------
00015664                            
00015664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015664                            
00015664                            
00015664                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015664 3428 000C                  		move.w	$C(a0),d2
00015668 3628 0008                  		move.w	8(a0),d3
0001566C 7000                       		moveq	#0,d0
0001566E 1028 0016                  		move.b	$16(a0),d0
00015672 4880                       		ext.w	d0
00015674 D440                       		add.w	d0,d2
00015676 1028 0017                  		move.b	$17(a0),d0
0001567A 4880                       		ext.w	d0
0001567C D640                       		add.w	d0,d3
0001567E 49F8 F768                  		lea	($FFFFF768).w,a4
00015682 367C 0010                  		movea.w	#$10,a3
00015686 3C3C 0000                  		move.w	#0,d6
0001568A 7A0D                       		moveq	#$D,d5
0001568C 6100 FC34                  		bsr.w	FindFloor
00015690 3F01                       		move.w	d1,-(sp)
00015692 3428 000C                  		move.w	$C(a0),d2
00015696 3628 0008                  		move.w	8(a0),d3
0001569A 7000                       		moveq	#0,d0
0001569C 1028 0016                  		move.b	$16(a0),d0
000156A0 4880                       		ext.w	d0
000156A2 D440                       		add.w	d0,d2
000156A4 1028 0017                  		move.b	$17(a0),d0
000156A8 4880                       		ext.w	d0
000156AA 9640                       		sub.w	d0,d3
000156AC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000156B0 367C 0010                  		movea.w	#$10,a3
000156B4 3C3C 0000                  		move.w	#0,d6
000156B8 7A0D                       		moveq	#$D,d5
000156BA 6100 FC06                  		bsr.w	FindFloor
000156BE 301F                       		move.w	(sp)+,d0
000156C0 143C 0000                  		move.b	#0,d2
000156C4                            
000156C4                            loc_14DD0:
000156C4 1638 F76A                  		move.b	($FFFFF76A).w,d3
000156C8 B240                       		cmp.w	d0,d1
000156CA 6F00                       		ble.s	loc_14DDE
000156CC 1638 F768                  		move.b	($FFFFF768).w,d3
000156D0 C141                       		exg	d0,d1
000156D2                            
000156D2                            loc_14DDE:
000156D2 0803 0000                  		btst	#0,d3
000156D6 6700                       		beq.s	locret_14DE6
000156D8 1602                       		move.b	d2,d3
000156DA                            
000156DA                            locret_14DE6:
000156DA 4E75                       		rts	
000156DC                            
000156DC                            ; End of function Sonic_HitFloor
000156DC                            
000156DC                            ; ===========================================================================
000156DC 3428 000C                  		move.w	$C(a0),d2
000156E0 3628 0008                  		move.w	8(a0),d3
000156E4                            
000156E4                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000156E4 0642 000A                  		addi.w	#$A,d2
000156E8 49F8 F768                  		lea	($FFFFF768).w,a4
000156EC 367C 0010                  		movea.w	#$10,a3
000156F0 3C3C 0000                  		move.w	#0,d6
000156F4 7A0E                       		moveq	#$E,d5
000156F6 6100 FBCA                  		bsr.w	FindFloor
000156FA 143C 0000                  		move.b	#0,d2
000156FE                            
000156FE                            loc_14E0A:				; XREF: sub_14EB4
000156FE 1638 F768                  		move.b	($FFFFF768).w,d3
00015702 0803 0000                  		btst	#0,d3
00015706 6700                       		beq.s	locret_14E16
00015708 1602                       		move.b	d2,d3
0001570A                            
0001570A                            locret_14E16:
0001570A 4E75                       		rts	
0001570C                            
0001570C                            ; ---------------------------------------------------------------------------
0001570C                            ; Subroutine allowing objects to interact with the floor
0001570C                            ; ---------------------------------------------------------------------------
0001570C                            
0001570C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001570C                            
0001570C                            
0001570C                            ObjHitFloor:
0001570C 3628 0008                  		move.w	8(a0),d3
00015710                            
00015710                            ; End of function ObjHitFloor
00015710                            
00015710                            
00015710                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015710                            
00015710                            
00015710                            ObjHitFloor2:
00015710 3428 000C                  		move.w	$C(a0),d2
00015714 7000                       		moveq	#0,d0
00015716 1028 0016                  		move.b	$16(a0),d0
0001571A 4880                       		ext.w	d0
0001571C D440                       		add.w	d0,d2
0001571E 49F8 F768                  		lea	($FFFFF768).w,a4
00015722 18BC 0000                  		move.b	#0,(a4)
00015726 367C 0010                  		movea.w	#$10,a3
0001572A 3C3C 0000                  		move.w	#0,d6
0001572E 7A0D                       		moveq	#$D,d5
00015730 6100 FB90                  		bsr.w	FindFloor
00015734 1638 F768                  		move.b	($FFFFF768).w,d3
00015738 0803 0000                  		btst	#0,d3
0001573C 6700                       		beq.s	locret_14E4E
0001573E 163C 0000                  		move.b	#0,d3
00015742                            
00015742                            locret_14E4E:
00015742 4E75                       		rts	
00015744                            ; End of function ObjHitFloor2
00015744                            
00015744                            
00015744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015744                            
00015744                            
00015744                            sub_14E50:				; XREF: sub_14D48
00015744 3428 000C                  		move.w	$C(a0),d2
00015748 3628 0008                  		move.w	8(a0),d3
0001574C 7000                       		moveq	#0,d0
0001574E 1028 0017                  		move.b	$17(a0),d0
00015752 4880                       		ext.w	d0
00015754 9440                       		sub.w	d0,d2
00015756 1028 0016                  		move.b	$16(a0),d0
0001575A 4880                       		ext.w	d0
0001575C D640                       		add.w	d0,d3
0001575E 49F8 F768                  		lea	($FFFFF768).w,a4
00015762 367C 0010                  		movea.w	#$10,a3
00015766 3C3C 0000                  		move.w	#0,d6
0001576A 7A0E                       		moveq	#$E,d5
0001576C 6100 FC92                  		bsr.w	FindWall
00015770 3F01                       		move.w	d1,-(sp)
00015772 3428 000C                  		move.w	$C(a0),d2
00015776 3628 0008                  		move.w	8(a0),d3
0001577A 7000                       		moveq	#0,d0
0001577C 1028 0017                  		move.b	$17(a0),d0
00015780 4880                       		ext.w	d0
00015782 D440                       		add.w	d0,d2
00015784 1028 0016                  		move.b	$16(a0),d0
00015788 4880                       		ext.w	d0
0001578A D640                       		add.w	d0,d3
0001578C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015790 367C 0010                  		movea.w	#$10,a3
00015794 3C3C 0000                  		move.w	#0,d6
00015798 7A0E                       		moveq	#$E,d5
0001579A 6100 FC64                  		bsr.w	FindWall
0001579E 301F                       		move.w	(sp)+,d0
000157A0 143C 00C0                  		move.b	#-$40,d2
000157A4 6000 FF1E                  		bra.w	loc_14DD0
000157A8                            
000157A8                            ; End of function sub_14E50
000157A8                            
000157A8                            
000157A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157A8                            
000157A8                            
000157A8                            sub_14EB4:				; XREF: Sonic_Floor
000157A8 3428 000C                  		move.w	$C(a0),d2
000157AC 3628 0008                  		move.w	8(a0),d3
000157B0                            
000157B0                            loc_14EBC:
000157B0 0643 000A                  		addi.w	#$A,d3
000157B4 49F8 F768                  		lea	($FFFFF768).w,a4
000157B8 367C 0010                  		movea.w	#$10,a3
000157BC 3C3C 0000                  		move.w	#0,d6
000157C0 7A0E                       		moveq	#$E,d5
000157C2 6100 FC3C                  		bsr.w	FindWall
000157C6 143C 00C0                  		move.b	#-$40,d2
000157CA 6000 FF32                  		bra.w	loc_14E0A
000157CE                            
000157CE                            ; End of function sub_14EB4
000157CE                            
000157CE                            ; ---------------------------------------------------------------------------
000157CE                            ; Subroutine to	detect when an object hits a wall to its right
000157CE                            ; ---------------------------------------------------------------------------
000157CE                            
000157CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157CE                            
000157CE                            
000157CE                            ObjHitWallRight:
000157CE D668 0008                  		add.w	8(a0),d3
000157D2 3428 000C                  		move.w	$C(a0),d2
000157D6 49F8 F768                  		lea	($FFFFF768).w,a4
000157DA 18BC 0000                  		move.b	#0,(a4)
000157DE 367C 0010                  		movea.w	#$10,a3
000157E2 3C3C 0000                  		move.w	#0,d6
000157E6 7A0E                       		moveq	#$E,d5
000157E8 6100 FC16                  		bsr.w	FindWall
000157EC 1638 F768                  		move.b	($FFFFF768).w,d3
000157F0 0803 0000                  		btst	#0,d3
000157F4 6700                       		beq.s	locret_14F06
000157F6 163C 00C0                  		move.b	#-$40,d3
000157FA                            
000157FA                            locret_14F06:
000157FA 4E75                       		rts	
000157FC                            
000157FC                            ; End of function ObjHitWallRight
000157FC                            
000157FC                            ; ---------------------------------------------------------------------------
000157FC                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000157FC                            ; touches them
000157FC                            ; ---------------------------------------------------------------------------
000157FC                            
000157FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157FC                            
000157FC                            
000157FC                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000157FC 3428 000C                  		move.w	$C(a0),d2
00015800 3628 0008                  		move.w	8(a0),d3
00015804 7000                       		moveq	#0,d0
00015806 1028 0016                  		move.b	$16(a0),d0
0001580A 4880                       		ext.w	d0
0001580C 9440                       		sub.w	d0,d2
0001580E 0A42 000F                  		eori.w	#$F,d2
00015812 1028 0017                  		move.b	$17(a0),d0
00015816 4880                       		ext.w	d0
00015818 D640                       		add.w	d0,d3
0001581A 49F8 F768                  		lea	($FFFFF768).w,a4
0001581E 367C FFF0                  		movea.w	#-$10,a3
00015822 3C3C 1000                  		move.w	#$1000,d6
00015826 7A0E                       		moveq	#$E,d5
00015828 6100 FA98                  		bsr.w	FindFloor
0001582C 3F01                       		move.w	d1,-(sp)
0001582E 3428 000C                  		move.w	$C(a0),d2
00015832 3628 0008                  		move.w	8(a0),d3
00015836 7000                       		moveq	#0,d0
00015838 1028 0016                  		move.b	$16(a0),d0
0001583C 4880                       		ext.w	d0
0001583E 9440                       		sub.w	d0,d2
00015840 0A42 000F                  		eori.w	#$F,d2
00015844 1028 0017                  		move.b	$17(a0),d0
00015848 4880                       		ext.w	d0
0001584A 9640                       		sub.w	d0,d3
0001584C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015850 367C FFF0                  		movea.w	#-$10,a3
00015854 3C3C 1000                  		move.w	#$1000,d6
00015858 7A0E                       		moveq	#$E,d5
0001585A 6100 FA66                  		bsr.w	FindFloor
0001585E 301F                       		move.w	(sp)+,d0
00015860 143C 0080                  		move.b	#-$80,d2
00015864 6000 FE5E                  		bra.w	loc_14DD0
00015868                            ; End of function Sonic_DontRunOnWalls
00015868                            
00015868                            ; ===========================================================================
00015868 3428 000C                  		move.w	$C(a0),d2
0001586C 3628 0008                  		move.w	8(a0),d3
00015870                            
00015870                            loc_14F7C:
00015870 0442 000A                  		subi.w	#$A,d2
00015874 0A42 000F                  		eori.w	#$F,d2
00015878 49F8 F768                  		lea	($FFFFF768).w,a4
0001587C 367C FFF0                  		movea.w	#-$10,a3
00015880 3C3C 1000                  		move.w	#$1000,d6
00015884 7A0E                       		moveq	#$E,d5
00015886 6100 FA3A                  		bsr.w	FindFloor
0001588A 143C 0080                  		move.b	#-$80,d2
0001588E 6000 FE6E                  		bra.w	loc_14E0A
00015892                            
00015892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015892                            
00015892                            
00015892                            ObjHitCeiling:
00015892 3428 000C                  		move.w	$C(a0),d2
00015896 3628 0008                  		move.w	8(a0),d3
0001589A 7000                       		moveq	#0,d0
0001589C 1028 0016                  		move.b	$16(a0),d0
000158A0 4880                       		ext.w	d0
000158A2 9440                       		sub.w	d0,d2
000158A4 0A42 000F                  		eori.w	#$F,d2
000158A8 49F8 F768                  		lea	($FFFFF768).w,a4
000158AC 367C FFF0                  		movea.w	#-$10,a3
000158B0 3C3C 1000                  		move.w	#$1000,d6
000158B4 7A0E                       		moveq	#$E,d5
000158B6 6100 FA0A                  		bsr.w	FindFloor
000158BA 1638 F768                  		move.b	($FFFFF768).w,d3
000158BE 0803 0000                  		btst	#0,d3
000158C2 6700                       		beq.s	locret_14FD4
000158C4 163C 0080                  		move.b	#-$80,d3
000158C8                            
000158C8                            locret_14FD4:
000158C8 4E75                       		rts	
000158CA                            ; End of function ObjHitCeiling
000158CA                            
000158CA                            ; ===========================================================================
000158CA                            
000158CA                            loc_14FD6:				; XREF: sub_14D48
000158CA 3428 000C                  		move.w	$C(a0),d2
000158CE 3628 0008                  		move.w	8(a0),d3
000158D2 7000                       		moveq	#0,d0
000158D4 1028 0017                  		move.b	$17(a0),d0
000158D8 4880                       		ext.w	d0
000158DA 9440                       		sub.w	d0,d2
000158DC 1028 0016                  		move.b	$16(a0),d0
000158E0 4880                       		ext.w	d0
000158E2 9640                       		sub.w	d0,d3
000158E4 0A43 000F                  		eori.w	#$F,d3
000158E8 49F8 F768                  		lea	($FFFFF768).w,a4
000158EC 367C FFF0                  		movea.w	#-$10,a3
000158F0 3C3C 0800                  		move.w	#$800,d6
000158F4 7A0E                       		moveq	#$E,d5
000158F6 6100 FB08                  		bsr.w	FindWall
000158FA 3F01                       		move.w	d1,-(sp)
000158FC 3428 000C                  		move.w	$C(a0),d2
00015900 3628 0008                  		move.w	8(a0),d3
00015904 7000                       		moveq	#0,d0
00015906 1028 0017                  		move.b	$17(a0),d0
0001590A 4880                       		ext.w	d0
0001590C D440                       		add.w	d0,d2
0001590E 1028 0016                  		move.b	$16(a0),d0
00015912 4880                       		ext.w	d0
00015914 9640                       		sub.w	d0,d3
00015916 0A43 000F                  		eori.w	#$F,d3
0001591A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001591E 367C FFF0                  		movea.w	#-$10,a3
00015922 3C3C 0800                  		move.w	#$800,d6
00015926 7A0E                       		moveq	#$E,d5
00015928 6100 FAD6                  		bsr.w	FindWall
0001592C 301F                       		move.w	(sp)+,d0
0001592E 143C 0040                  		move.b	#$40,d2
00015932 6000 FD90                  		bra.w	loc_14DD0
00015936                            
00015936                            ; ---------------------------------------------------------------------------
00015936                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015936                            ; ---------------------------------------------------------------------------
00015936                            
00015936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015936                            
00015936                            
00015936                            Sonic_HitWall:				; XREF: Sonic_Floor
00015936 3428 000C                  		move.w	$C(a0),d2
0001593A 3628 0008                  		move.w	8(a0),d3
0001593E                            
0001593E                            loc_1504A:
0001593E 0443 000A                  		subi.w	#$A,d3
00015942 0A43 000F                  		eori.w	#$F,d3
00015946 49F8 F768                  		lea	($FFFFF768).w,a4
0001594A 367C FFF0                  		movea.w	#-$10,a3
0001594E 3C3C 0800                  		move.w	#$800,d6
00015952 7A0E                       		moveq	#$E,d5
00015954 6100 FAAA                  		bsr.w	FindWall
00015958 143C 0040                  		move.b	#$40,d2
0001595C 6000 FDA0                  		bra.w	loc_14E0A
00015960                            ; End of function Sonic_HitWall
00015960                            
00015960                            ; ---------------------------------------------------------------------------
00015960                            ; Subroutine to	detect when an object hits a wall to its left
00015960                            ; ---------------------------------------------------------------------------
00015960                            
00015960                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015960                            
00015960                            
00015960                            ObjHitWallLeft:
00015960 D668 0008                  		add.w	8(a0),d3
00015964 3428 000C                  		move.w	$C(a0),d2
00015968 49F8 F768                  		lea	($FFFFF768).w,a4
0001596C 18BC 0000                  		move.b	#0,(a4)
00015970 367C FFF0                  		movea.w	#-$10,a3
00015974 3C3C 0800                  		move.w	#$800,d6
00015978 7A0E                       		moveq	#$E,d5
0001597A 6100 FA84                  		bsr.w	FindWall
0001597E 1638 F768                  		move.b	($FFFFF768).w,d3
00015982 0803 0000                  		btst	#0,d3
00015986 6700                       		beq.s	locret_15098
00015988 163C 0040                  		move.b	#$40,d3
0001598C                            
0001598C                            locret_15098:
0001598C 4E75                       		rts	
0001598E                            ; End of function ObjHitWallLeft
0001598E                            
0001598E                            ; ===========================================================================
0001598E                            ; ---------------------------------------------------------------------------
0001598E                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
0001598E                            ; ---------------------------------------------------------------------------
0001598E                            
0001598E                            Obj66:					; XREF: Obj_Index
0001598E 7000                       		moveq	#0,d0
00015990 1028 0024                  		move.b	$24(a0),d0
00015994 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015998 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
0001599C                            ; ===========================================================================
0001599C 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001599E 0000                       		dc.w Obj66_Action-Obj66_Index
000159A0 0000                       		dc.w Obj66_Display-Obj66_Index
000159A2 0000                       		dc.w Obj66_Release-Obj66_Index
000159A4                            ; ===========================================================================
000159A4                            
000159A4                            Obj66_Main:				; XREF: Obj66_Index
000159A4 5428 0024                  		addq.b	#2,$24(a0)
000159A8 323C 0001                  		move.w	#1,d1
000159AC 2248                       		movea.l	a0,a1
000159AE 6000                       		bra.s	Obj66_MakeItem
000159B0                            ; ===========================================================================
000159B0                            
000159B0                            Obj66_Loop:
000159B0 6100 88D6                  		bsr.w	SingleObjLoad
000159B4 6600                       		bne.s	loc_150FE
000159B6 12BC 0066                  		move.b	#$66,0(a1)
000159BA 5829 0024                  		addq.b	#4,$24(a1)
000159BE 3368 0008 0008             		move.w	8(a0),8(a1)
000159C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000159CA 137C 0003 0018             		move.b	#3,$18(a1)
000159D0 137C 0010 001A             		move.b	#$10,$1A(a1)
000159D6                            
000159D6                            Obj66_MakeItem:				; XREF: Obj66_Main
000159D6 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000159DE 337C 4348 0002             		move.w	#$4348,2(a1)
000159E4 0029 0004 0001             		ori.b	#4,1(a1)
000159EA 137C 0038 0019             		move.b	#$38,$19(a1)
000159F0                            
000159F0                            loc_150FE:
000159F0 51C9 FFBE                  		dbf	d1,Obj66_Loop
000159F4                            
000159F4 117C 0030 0019             		move.b	#$30,$19(a0)
000159FA 117C 0004 0018             		move.b	#4,$18(a0)
00015A00 317C 003C 0030             		move.w	#$3C,$30(a0)
00015A06 117C 0001 0034             		move.b	#1,$34(a0)
00015A0C 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015A12                            
00015A12                            Obj66_Action:				; XREF: Obj66_Index
00015A12 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015A16 4A28 0001                  		tst.b	1(a0)
00015A1A 6A00 0000                  		bpl.w	Obj66_Display
00015A1E 323C 0030                  		move.w	#$30,d1
00015A22 3401                       		move.w	d1,d2
00015A24 3602                       		move.w	d2,d3
00015A26 5243                       		addq.w	#1,d3
00015A28 3828 0008                  		move.w	8(a0),d4
00015A2C 6100 A7A4                  		bsr.w	SolidObject
00015A30 0828 0005 0022             		btst	#5,$22(a0)
00015A36 6700 0000                  		beq.w	Obj66_Display
00015A3A 43F8 D000                  		lea	($FFFFD000).w,a1
00015A3E 720E                       		moveq	#$E,d1
00015A40 3029 0008                  		move.w	8(a1),d0
00015A44 B068 0008                  		cmp.w	8(a0),d0
00015A48 6500                       		bcs.s	Obj66_GrabSonic
00015A4A 7207                       		moveq	#7,d1
00015A4C                            
00015A4C                            Obj66_GrabSonic:
00015A4C B228 001A                  		cmp.b	$1A(a0),d1
00015A50 6600                       		bne.s	Obj66_Display
00015A52 1141 0032                  		move.b	d1,$32(a0)
00015A56 5828 0024                  		addq.b	#4,$24(a0)
00015A5A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015A60 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015A66 337C 0800 0014             		move.w	#$800,$14(a1)
00015A6C 337C 0000 0010             		move.w	#0,$10(a1)
00015A72 337C 0000 0012             		move.w	#0,$12(a1)
00015A78 08A8 0005 0022             		bclr	#5,$22(a0)
00015A7E 08A9 0005 0022             		bclr	#5,$22(a1)
00015A84 08E9 0001 0022             		bset	#1,$22(a1)
00015A8A 3429 0008                  		move.w	8(a1),d2
00015A8E 3629 000C                  		move.w	$C(a1),d3
00015A92 6100 0000                  		bsr.w	Obj66_ChgPos
00015A96 D569 0008                  		add.w	d2,8(a1)
00015A9A D769 000C                  		add.w	d3,$C(a1)
00015A9E E0E9 0008                  		asr	8(a1)
00015AA2 E0E9 000C                  		asr	$C(a1)
00015AA6                            
00015AA6                            Obj66_Display:				; XREF: Obj66_Index
00015AA6 6000 A402                  		bra.w	MarkObjGone
00015AAA                            ; ===========================================================================
00015AAA                            
00015AAA                            Obj66_Release:				; XREF: Obj66_Index
00015AAA 1028 001A                  		move.b	$1A(a0),d0
00015AAE 0C00 0004                  		cmpi.b	#4,d0
00015AB2 6700                       		beq.s	loc_151C8
00015AB4 0C00 0007                  		cmpi.b	#7,d0
00015AB8 6600                       		bne.s	loc_151F8
00015ABA                            
00015ABA                            loc_151C8:
00015ABA B028 0032                  		cmp.b	$32(a0),d0
00015ABE 6700                       		beq.s	loc_151F8
00015AC0 43F8 D000                  		lea	($FFFFD000).w,a1
00015AC4 337C 0000 0010             		move.w	#0,$10(a1)
00015ACA 337C 0800 0012             		move.w	#$800,$12(a1)
00015AD0 0C00 0004                  		cmpi.b	#4,d0
00015AD4 6700                       		beq.s	loc_151F0
00015AD6 337C 0800 0010             		move.w	#$800,$10(a1)
00015ADC 337C 0800 0012             		move.w	#$800,$12(a1)
00015AE2                            
00015AE2                            loc_151F0:
00015AE2 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015AE6 5928 0024                  		subq.b	#4,$24(a0)
00015AEA                            
00015AEA                            loc_151F8:
00015AEA 6100                       		bsr.s	Obj66_ChkSwitch
00015AEC 6100                       		bsr.s	Obj66_ChgPos
00015AEE 6000 A3BA                  		bra.w	MarkObjGone
00015AF2                            
00015AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AF2                            
00015AF2                            
00015AF2                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015AF2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015AF6 7000                       		moveq	#0,d0
00015AF8 1028 0038                  		move.b	$38(a0),d0
00015AFC 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015B02 6700                       		beq.s	loc_15224	; if not, branch
00015B04 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015B08 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015B0A 4428 0034                  		neg.b	$34(a0)
00015B0E 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015B14 6000                       		bra.s	Obj66_Animate
00015B16                            ; ===========================================================================
00015B16                            
00015B16                            loc_15224:
00015B16 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015B1A                            
00015B1A                            Obj66_Animate:
00015B1A 5328 001E                  		subq.b	#1,$1E(a0)
00015B1E 6A00                       		bpl.s	locret_15246
00015B20 117C 0007 001E             		move.b	#7,$1E(a0)
00015B26 1228 0034                  		move.b	$34(a0),d1
00015B2A 1028 001A                  		move.b	$1A(a0),d0
00015B2E D001                       		add.b	d1,d0
00015B30 0200 000F                  		andi.b	#$F,d0
00015B34 1140 001A                  		move.b	d0,$1A(a0)
00015B38                            
00015B38                            locret_15246:
00015B38 4E75                       		rts	
00015B3A                            ; End of function Obj66_ChkSwitch
00015B3A                            
00015B3A                            
00015B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B3A                            
00015B3A                            
00015B3A                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015B3A 43F8 D000                  		lea	($FFFFD000).w,a1
00015B3E 7000                       		moveq	#0,d0
00015B40 1028 001A                  		move.b	$1A(a0),d0
00015B44 D040                       		add.w	d0,d0
00015B46 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015B4A 101A                       		move.b	(a2)+,d0
00015B4C 4880                       		ext.w	d0
00015B4E D068 0008                  		add.w	8(a0),d0
00015B52 3340 0008                  		move.w	d0,8(a1)
00015B56 101A                       		move.b	(a2)+,d0
00015B58 4880                       		ext.w	d0
00015B5A D068 000C                  		add.w	$C(a0),d0
00015B5E 3340 000C                  		move.w	d0,$C(a1)
00015B62 4E75                       		rts	
00015B64                            ; End of function Obj66_ChgPos
00015B64                            
00015B64                            ; ===========================================================================
00015B64 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015B68 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015B6C 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015B70 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015B74 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015B78 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015B7C 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015B80 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015B84                            ; ---------------------------------------------------------------------------
00015B84                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015B84                            ; ---------------------------------------------------------------------------
00015B84                            Map_obj66:
00015B84                            	include "_maps\obj66.asm"
00015B84                            ; ---------------------------------------------------------------------------
00015B84                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015B84                            ; ---------------------------------------------------------------------------
00015B84 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015B88 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015B8C 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015B90 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015B94 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015B98 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015B9C 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015BA0 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015BA4 0000                       		dc.w byte_154A4-Map_obj66
00015BA6 06                         byte_152B4:	dc.b 6
00015BA7 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015BAC 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015BB1 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015BB6 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015BBB 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015BC0 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015BC5 06                         byte_152D3:	dc.b 6
00015BC6 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015BCB 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015BD0 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015BD5 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015BDA 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015BDF 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015BE4 06                         byte_152F2:	dc.b 6
00015BE5 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015BEA 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015BEF 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015BF4 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015BF9 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015BFE 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015C03 06                         byte_15311:	dc.b 6
00015C04 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015C09 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015C0E 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015C13 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015C18 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015C1D 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015C22 06                         byte_15330:	dc.b 6
00015C23 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015C28 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015C2D 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015C32 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015C37 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015C3C 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015C41 06                         byte_1534F:	dc.b 6
00015C42 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015C47 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015C4C 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015C51 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015C56 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015C5B 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015C60 06                         byte_1536E:	dc.b 6
00015C61 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015C66 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015C6B 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015C70 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015C75 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015C7A 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015C7F 06                         byte_1538D:	dc.b 6
00015C80 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015C85 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015C8A F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015C8F F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015C94 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015C99 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015C9E 06                         byte_153AC:	dc.b 6
00015C9F E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015CA4 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015CA9 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015CAE E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015CB3 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015CB8 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015CBD 06                         byte_153CB:	dc.b 6
00015CBE D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015CC3 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015CC8 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015CCD DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015CD2 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015CD7 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015CDC 06                         byte_153EA:	dc.b 6
00015CDD D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015CE2 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015CE7 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015CEC D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015CF1 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015CF6 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015CFB 06                         byte_15409:	dc.b 6
00015CFC D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015D01 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015D06 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015D0B CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015D10 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015D15 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015D1A 06                         byte_15428:	dc.b 6
00015D1B D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015D20 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015D25 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015D2A C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015D2F E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015D34 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015D39 06                         byte_15447:	dc.b 6
00015D3A D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015D3F D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015D44 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015D49 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015D4E E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015D53 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015D58 06                         byte_15466:	dc.b 6
00015D59 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015D5E D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015D63 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015D68 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015D6D E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015D72 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015D77 06                         byte_15485:	dc.b 6
00015D78 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015D7D D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015D82 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015D87 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015D8C F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015D91 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015D96 0C                         byte_154A4:	dc.b $C
00015D97 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015D9C D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015DA1 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015DA6 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015DAB D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015DB0 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015DB5 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015DBA 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015DBF 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015DC4 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015DC9 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015DCE 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015DD4 00                         		even
00015DD4 00                         		even
00015DD4                            
00015DD4                            ; ===========================================================================
00015DD4                            ; ---------------------------------------------------------------------------
00015DD4                            ; Object 67 - disc that	you run	around (SBZ)
00015DD4                            ; ---------------------------------------------------------------------------
00015DD4                            
00015DD4                            Obj67:					; XREF: Obj_Index
00015DD4 7000                       		moveq	#0,d0
00015DD6 1028 0024                  		move.b	$24(a0),d0
00015DDA 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015DDE 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015DE2                            ; ===========================================================================
00015DE2 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015DE4 0000                       		dc.w Obj67_Action-Obj67_Index
00015DE6                            ; ===========================================================================
00015DE6                            
00015DE6                            Obj67_Main:				; XREF: Obj67_Index
00015DE6 5428 0024                  		addq.b	#2,$24(a0)
00015DEA 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015DF2 317C C344 0002             		move.w	#$C344,2(a0)
00015DF8 117C 0004 0001             		move.b	#4,1(a0)
00015DFE 117C 0004 0018             		move.b	#4,$18(a0)
00015E04 117C 0008 0019             		move.b	#8,$19(a0)
00015E0A 3168 0008 0032             		move.w	8(a0),$32(a0)
00015E10 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015E16 117C 0018 0034             		move.b	#$18,$34(a0)
00015E1C 117C 0048 0038             		move.b	#$48,$38(a0)
00015E22 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E26 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015E2A 6700                       		beq.s	loc_15546
00015E2C 117C 0010 0034             		move.b	#$10,$34(a0)
00015E32 117C 0038 0038             		move.b	#$38,$38(a0)
00015E38                            
00015E38                            loc_15546:
00015E38 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E3C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015E40 4881                       		ext.w	d1
00015E42 E741                       		asl.w	#3,d1
00015E44 3141 0036                  		move.w	d1,$36(a0)
00015E48 1028 0022                  		move.b	$22(a0),d0
00015E4C E418                       		ror.b	#2,d0
00015E4E 0200 00C0                  		andi.b	#-$40,d0
00015E52 1140 0026                  		move.b	d0,$26(a0)
00015E56                            
00015E56                            Obj67_Action:				; XREF: Obj67_Index
00015E56 6100 0000                  		bsr.w	Obj67_MoveSonic
00015E5A 6100 0000                  		bsr.w	Obj67_MoveSpot
00015E5E 6000 0000                  		bra.w	Obj67_ChkDel
00015E62                            ; ===========================================================================
00015E62                            
00015E62                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015E62 7400                       		moveq	#0,d2
00015E64 1428 0038                  		move.b	$38(a0),d2
00015E68 3602                       		move.w	d2,d3
00015E6A D643                       		add.w	d3,d3
00015E6C 43F8 D000                  		lea	($FFFFD000).w,a1
00015E70 3029 0008                  		move.w	8(a1),d0
00015E74 9068 0032                  		sub.w	$32(a0),d0
00015E78 D042                       		add.w	d2,d0
00015E7A B043                       		cmp.w	d3,d0
00015E7C 6400                       		bcc.s	loc_155A8
00015E7E 3229 000C                  		move.w	$C(a1),d1
00015E82 9268 0030                  		sub.w	$30(a0),d1
00015E86 D242                       		add.w	d2,d1
00015E88 B243                       		cmp.w	d3,d1
00015E8A 6400                       		bcc.s	loc_155A8
00015E8C 0829 0001 0022             		btst	#1,$22(a1)
00015E92 6700                       		beq.s	loc_155B8
00015E94 4228 003A                  		clr.b	$3A(a0)
00015E98 4E75                       		rts	
00015E9A                            ; ===========================================================================
00015E9A                            
00015E9A                            loc_155A8:
00015E9A 4A28 003A                  		tst.b	$3A(a0)
00015E9E 6700                       		beq.s	locret_155B6
00015EA0 4229 0038                  		clr.b	$38(a1)
00015EA4 4228 003A                  		clr.b	$3A(a0)
00015EA8                            
00015EA8                            locret_155B6:
00015EA8 4E75                       		rts	
00015EAA                            ; ===========================================================================
00015EAA                            
00015EAA                            loc_155B8:
00015EAA 4A28 003A                  		tst.b	$3A(a0)
00015EAE 6600                       		bne.s	loc_155E2
00015EB0 117C 0001 003A             		move.b	#1,$3A(a0)
00015EB6 0829 0002 0022             		btst	#2,$22(a1)
00015EBC 6600                       		bne.s	loc_155D0
00015EBE 4229 001C                  		clr.b	$1C(a1)
00015EC2                            
00015EC2                            loc_155D0:
00015EC2 08A9 0005 0022             		bclr	#5,$22(a1)
00015EC8 137C 0001 001D             		move.b	#1,$1D(a1)
00015ECE 137C 0001 0038             		move.b	#1,$38(a1)
00015ED4                            
00015ED4                            loc_155E2:
00015ED4 3029 0014                  		move.w	$14(a1),d0
00015ED8 4A68 0036                  		tst.w	$36(a0)
00015EDC 6A00                       		bpl.s	loc_15608
00015EDE 0C40 FC00                  		cmpi.w	#-$400,d0
00015EE2 6F00                       		ble.s	loc_155FA
00015EE4 337C FC00 0014             		move.w	#-$400,$14(a1)
00015EEA 4E75                       		rts	
00015EEC                            ; ===========================================================================
00015EEC                            
00015EEC                            loc_155FA:
00015EEC 0C40 F100                  		cmpi.w	#-$F00,d0
00015EF0 6C00                       		bge.s	locret_15606
00015EF2 337C F100 0014             		move.w	#-$F00,$14(a1)
00015EF8                            
00015EF8                            locret_15606:
00015EF8 4E75                       		rts	
00015EFA                            ; ===========================================================================
00015EFA                            
00015EFA                            loc_15608:
00015EFA 0C40 0400                  		cmpi.w	#$400,d0
00015EFE 6C00                       		bge.s	loc_15616
00015F00 337C 0400 0014             		move.w	#$400,$14(a1)
00015F06 4E75                       		rts	
00015F08                            ; ===========================================================================
00015F08                            
00015F08                            loc_15616:
00015F08 0C40 0F00                  		cmpi.w	#$F00,d0
00015F0C 6F00                       		ble.s	locret_15622
00015F0E 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015F14                            
00015F14                            locret_15622:
00015F14 4E75                       		rts	
00015F16                            ; ===========================================================================
00015F16                            
00015F16                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015F16 3028 0036                  		move.w	$36(a0),d0
00015F1A D168 0026                  		add.w	d0,$26(a0)
00015F1E 1028 0026                  		move.b	$26(a0),d0
00015F22 4EB9 0000 2CEC             		jsr	(CalcSine).l
00015F28 3428 0030                  		move.w	$30(a0),d2
00015F2C 3628 0032                  		move.w	$32(a0),d3
00015F30 7800                       		moveq	#0,d4
00015F32 1828 0034                  		move.b	$34(a0),d4
00015F36 E14C                       		lsl.w	#8,d4
00015F38 2A04                       		move.l	d4,d5
00015F3A C9C0                       		muls.w	d0,d4
00015F3C 4844                       		swap	d4
00015F3E CBC1                       		muls.w	d1,d5
00015F40 4845                       		swap	d5
00015F42 D842                       		add.w	d2,d4
00015F44 DA43                       		add.w	d3,d5
00015F46 3144 000C                  		move.w	d4,$C(a0)
00015F4A 3145 0008                  		move.w	d5,8(a0)
00015F4E 4E75                       		rts	
00015F50                            ; ===========================================================================
00015F50                            
00015F50                            Obj67_ChkDel:				; XREF: Obj67_Action
00015F50 3028 0032                  		move.w	$32(a0),d0
00015F54 0240 FF80                  		andi.w	#-$80,d0
00015F58 3238 F700                  		move.w	($FFFFF700).w,d1
00015F5C 0441 0080                  		subi.w	#$80,d1
00015F60 0241 FF80                  		andi.w	#-$80,d1
00015F64 9041                       		sub.w	d1,d0
00015F66 0C40 0280                  		cmpi.w	#$280,d0
00015F6A 6200                       		bhi.s	Obj67_Delete
00015F6C 4EF9 0000 DE02             		jmp	DisplaySprite
00015F72                            ; ===========================================================================
00015F72                            
00015F72                            Obj67_Delete:
00015F72 4EF9 0000 DE3E             		jmp	DeleteObject
00015F78                            ; ===========================================================================
00015F78                            ; ---------------------------------------------------------------------------
00015F78                            ; Sprite mappings - disc that you run around (SBZ)
00015F78                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015F78                            ; part of the level tiles.)
00015F78                            ; ---------------------------------------------------------------------------
00015F78                            Map_obj67:
00015F78                            	include "_maps\obj67.asm"
00015F78                            ; ---------------------------------------------------------------------------
00015F78                            ; Sprite mappings - disc that you run around (SBZ)
00015F78                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015F78                            ; part of the level tiles.)
00015F78                            ; ---------------------------------------------------------------------------
00015F78 0000                       		dc.w byte_15688-Map_obj67
00015F7A 01                         byte_15688:	dc.b 1
00015F7B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015F80                            		even
00015F80                            		even
00015F80                            
00015F80                            ; ===========================================================================
00015F80                            ; ---------------------------------------------------------------------------
00015F80                            ; Object 68 - conveyor belts (SBZ)
00015F80                            ; ---------------------------------------------------------------------------
00015F80                            
00015F80                            Obj68:					; XREF: Obj_Index
00015F80 7000                       		moveq	#0,d0
00015F82 1028 0024                  		move.b	$24(a0),d0
00015F86 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015F8A 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015F8E                            ; ===========================================================================
00015F8E 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015F90 0000                       		dc.w Obj68_Action-Obj68_Index
00015F92                            ; ===========================================================================
00015F92                            
00015F92                            Obj68_Main:				; XREF: Obj68_Index
00015F92 5428 0024                  		addq.b	#2,$24(a0)
00015F96 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015F9C 1228 0028                  		move.b	$28(a0),d1	; get object type
00015FA0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015FA4 6700                       		beq.s	loc_156BA	; if zero, branch
00015FA6 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015FAC                            
00015FAC                            loc_156BA:
00015FAC 1228 0028                  		move.b	$28(a0),d1	; get object type
00015FB0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015FB4 4881                       		ext.w	d1
00015FB6 E841                       		asr.w	#4,d1
00015FB8 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015FBC                            
00015FBC                            Obj68_Action:				; XREF: Obj68_Index
00015FBC 6100                       		bsr.s	Obj68_MoveSonic
00015FBE 3028 0008                  		move.w	8(a0),d0
00015FC2 0240 FF80                  		andi.w	#$FF80,d0
00015FC6 3238 F700                  		move.w	($FFFFF700).w,d1
00015FCA 0441 0080                  		subi.w	#$80,d1
00015FCE 0241 FF80                  		andi.w	#$FF80,d1
00015FD2 9041                       		sub.w	d1,d0
00015FD4 0C40 0280                  		cmpi.w	#$280,d0
00015FD8 6200                       		bhi.s	Obj68_Delete
00015FDA 4E75                       		rts	
00015FDC                            ; ===========================================================================
00015FDC                            
00015FDC                            Obj68_Delete:
00015FDC 4EF9 0000 DE3E             		jmp	DeleteObject
00015FE2                            ; ===========================================================================
00015FE2                            
00015FE2                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015FE2 7400                       		moveq	#0,d2
00015FE4 1428 0038                  		move.b	$38(a0),d2
00015FE8 3602                       		move.w	d2,d3
00015FEA D643                       		add.w	d3,d3
00015FEC 43F8 D000                  		lea	($FFFFD000).w,a1
00015FF0 3029 0008                  		move.w	8(a1),d0
00015FF4 9068 0008                  		sub.w	8(a0),d0
00015FF8 D042                       		add.w	d2,d0
00015FFA B043                       		cmp.w	d3,d0
00015FFC 6400                       		bcc.s	locret_1572E
00015FFE 3229 000C                  		move.w	$C(a1),d1
00016002 9268 000C                  		sub.w	$C(a0),d1
00016006 0641 0030                  		addi.w	#$30,d1
0001600A 0C41 0030                  		cmpi.w	#$30,d1
0001600E 6400                       		bcc.s	locret_1572E
00016010 0829 0001 0022             		btst	#1,$22(a1)
00016016 6600                       		bne.s	locret_1572E
00016018 3028 0036                  		move.w	$36(a0),d0
0001601C D169 0008                  		add.w	d0,8(a1)
00016020                            
00016020                            locret_1572E:
00016020 4E75                       		rts	
00016022                            
00016022                            ; ===========================================================================
00016022                            ; ---------------------------------------------------------------------------
00016022                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016022                            ; ---------------------------------------------------------------------------
00016022                            
00016022                            Obj69:					; XREF: Obj_Index
00016022 7000                       		moveq	#0,d0
00016024 1028 0024                  		move.b	$24(a0),d0
00016028 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001602C 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016030                            ; ===========================================================================
00016030 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016032 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00016034 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016036                            ; ===========================================================================
00016036                            
00016036                            Obj69_Main:				; XREF: Obj69_Index
00016036 5428 0024                  		addq.b	#2,$24(a0)
0001603A 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00016042 317C 4492 0002             		move.w	#$4492,2(a0)
00016048 0028 0004 0001             		ori.b	#4,1(a0)
0001604E 117C 0080 0019             		move.b	#$80,$19(a0)
00016054 7000                       		moveq	#0,d0
00016056 1028 0028                  		move.b	$28(a0),d0
0001605A 0240 000F                  		andi.w	#$F,d0
0001605E C0FC 003C                  		mulu.w	#$3C,d0
00016062 3140 0032                  		move.w	d0,$32(a0)
00016066 4A28 0028                  		tst.b	$28(a0)
0001606A 6A00                       		bpl.s	Obj69_Trapdoor
0001606C 5428 0024                  		addq.b	#2,$24(a0)
00016070 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00016078 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001607E 117C 0010 0019             		move.b	#$10,$19(a0)
00016084 117C 0002 001C             		move.b	#2,$1C(a0)
0001608A 7000                       		moveq	#0,d0
0001608C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016090 3200                       		move.w	d0,d1
00016092 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016096 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
0001609A 3140 0030                  		move.w	d0,$30(a0)	; set time delay
0001609E 3140 0032                  		move.w	d0,$32(a0)
000160A2 0241 0070                  		andi.w	#$70,d1
000160A6 0641 0010                  		addi.w	#$10,d1
000160AA E549                       		lsl.w	#2,d1
000160AC 5341                       		subq.w	#1,d1
000160AE 3141 0036                  		move.w	d1,$36(a0)
000160B2 6000                       		bra.s	Obj69_Spinner
000160B4                            ; ===========================================================================
000160B4                            
000160B4                            Obj69_Trapdoor:				; XREF: Obj69_Index
000160B4 5368 0030                  		subq.w	#1,$30(a0)
000160B8 6A00                       		bpl.s	Obj69_Animate
000160BA 3168 0032 0030             		move.w	$32(a0),$30(a0)
000160C0 0868 0000 001C             		bchg	#0,$1C(a0)
000160C6 4A28 0001                  		tst.b	1(a0)
000160CA 6A00                       		bpl.s	Obj69_Animate
000160CC 303C 00BB                  		move.w	#$BB,d0
000160D0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
000160D6                            
000160D6                            Obj69_Animate:
000160D6 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000160DC 4EB9 0000 AEC2             		jsr	AnimateSprite
000160E2 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000160E6 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000160E8 323C 004B                  		move.w	#$4B,d1
000160EC 343C 000C                  		move.w	#$C,d2
000160F0 3602                       		move.w	d2,d3
000160F2 5243                       		addq.w	#1,d3
000160F4 3828 0008                  		move.w	8(a0),d4
000160F8 6100 A0D8                  		bsr.w	SolidObject
000160FC 6000 9DAC                  		bra.w	MarkObjGone
00016100                            ; ===========================================================================
00016100                            
00016100                            Obj69_NotSolid:
00016100 0828 0003 0022             		btst	#3,$22(a0)
00016106 6700                       		beq.s	Obj69_Display
00016108 43F8 D000                  		lea	($FFFFD000).w,a1
0001610C 08A9 0003 0022             		bclr	#3,$22(a1)
00016112 08A8 0003 0022             		bclr	#3,$22(a0)
00016118 4228 0025                  		clr.b	$25(a0)
0001611C                            
0001611C                            Obj69_Display:
0001611C 6000 9D8C                  		bra.w	MarkObjGone
00016120                            ; ===========================================================================
00016120                            
00016120                            Obj69_Spinner:				; XREF: Obj69_Index
00016120 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016124 C068 0036                  		and.w	$36(a0),d0
00016128 6600                       		bne.s	Obj69_Delay
0001612A 117C 0001 0034             		move.b	#1,$34(a0)
00016130                            
00016130                            Obj69_Delay:
00016130 4A28 0034                  		tst.b	$34(a0)
00016134 6700                       		beq.s	Obj69_Animate2
00016136 5368 0030                  		subq.w	#1,$30(a0)
0001613A 6A00                       		bpl.s	Obj69_Animate2
0001613C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016142 4228 0034                  		clr.b	$34(a0)
00016146 0868 0000 001C             		bchg	#0,$1C(a0)
0001614C                            
0001614C                            Obj69_Animate2:
0001614C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016152 4EB9 0000 AEC2             		jsr	AnimateSprite
00016158 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
0001615C 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001615E 323C 001B                  		move.w	#$1B,d1
00016162 343C 0007                  		move.w	#7,d2
00016166 3602                       		move.w	d2,d3
00016168 5243                       		addq.w	#1,d3
0001616A 3828 0008                  		move.w	8(a0),d4
0001616E 6100 A062                  		bsr.w	SolidObject
00016172 6000 9D36                  		bra.w	MarkObjGone
00016176                            ; ===========================================================================
00016176                            
00016176                            Obj69_NotSolid2:
00016176 0828 0003 0022             		btst	#3,$22(a0)
0001617C 6700                       		beq.s	Obj69_Display2
0001617E 43F8 D000                  		lea	($FFFFD000).w,a1
00016182 08A9 0003 0022             		bclr	#3,$22(a1)
00016188 08A8 0003 0022             		bclr	#3,$22(a0)
0001618E 4228 0025                  		clr.b	$25(a0)
00016192                            
00016192                            Obj69_Display2:
00016192 6000 9D16                  		bra.w	MarkObjGone
00016196                            ; ===========================================================================
00016196                            Ani_obj69:
00016196                            	include "_anim\obj69.asm"
00016196                            ; ---------------------------------------------------------------------------
00016196                            ; Animation script - trapdoor (SBZ)
00016196                            ; ---------------------------------------------------------------------------
00016196 0000                       		dc.w byte_158AC-Ani_obj69
00016198 0000                       		dc.w byte_158B2-Ani_obj69
0001619A 0000                       		dc.w byte_158B8-Ani_obj69
0001619C 0000                       		dc.w byte_158CC-Ani_obj69
0001619E 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000161A4 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000161AA 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000161B7 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000161BE 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000161CB 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000161D2                            		even
000161D2                            		even
000161D2                            
000161D2                            ; ---------------------------------------------------------------------------
000161D2                            ; Sprite mappings - trapdoor (SBZ)
000161D2                            ; ---------------------------------------------------------------------------
000161D2                            Map_obj69:
000161D2                            	include "_maps\obj69.asm"
000161D2                            ; ---------------------------------------------------------------------------
000161D2                            ; Sprite mappings - trapdoor (SBZ)
000161D2                            ; ---------------------------------------------------------------------------
000161D2 0000                       		dc.w byte_158E6-Map_obj69
000161D4 0000                       		dc.w byte_158FB-Map_obj69
000161D6 0000                       		dc.w byte_15924-Map_obj69
000161D8 04                         byte_158E6:	dc.b 4
000161D9 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000161DE F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000161E3 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000161E8 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000161ED 08                         byte_158FB:	dc.b 8
000161EE F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000161F3 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000161F8 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000161FD 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016202 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016207 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001620C 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016211 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016216 04                         byte_15924:	dc.b 4
00016217 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001621C 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016221 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016226 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001622C 00                         		even
0001622C 00                         		even
0001622C                            
0001622C                            ; ---------------------------------------------------------------------------
0001622C                            ; Sprite mappings - spinning platforms (SBZ)
0001622C                            ; ---------------------------------------------------------------------------
0001622C                            Map_obj69a:
0001622C                            	include "_maps\obj69a.asm"
0001622C                            ; ---------------------------------------------------------------------------
0001622C                            ; Sprite mappings - spinning platforms (SBZ)
0001622C                            ; ---------------------------------------------------------------------------
0001622C 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016230 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016234 0000                       		dc.w byte_15970-Map_obj69a
00016236 02                         byte_15944:	dc.b 2
00016237 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001623C F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016241 02                         byte_1594F:	dc.b 2
00016242 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016247 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001624C 02                         byte_1595A:	dc.b 2
0001624D F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016252 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016257 02                         byte_15965:	dc.b 2
00016258 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
0001625D 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016262 02                         byte_15970:	dc.b 2
00016263 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016268 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001626E 00                         		even
0001626E 00                         		even
0001626E                            
0001626E                            ; ===========================================================================
0001626E                            ; ---------------------------------------------------------------------------
0001626E                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001626E                            ; ---------------------------------------------------------------------------
0001626E                            
0001626E                            Obj6A:					; XREF: Obj_Index
0001626E 7000                       		moveq	#0,d0
00016270 1028 0024                  		move.b	$24(a0),d0
00016274 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016278 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
0001627C                            ; ===========================================================================
0001627C 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001627E 0000                       		dc.w Obj6A_Action-Obj6A_Index
00016280                            ; ===========================================================================
00016280                            
00016280                            Obj6A_Main:				; XREF: Obj6A_Index
00016280 5428 0024                  		addq.b	#2,$24(a0)
00016284 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
0001628C 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016292 117C 0004 0001             		move.b	#4,1(a0)
00016298 117C 0004 0018             		move.b	#4,$18(a0)
0001629E 117C 0020 0019             		move.b	#$20,$19(a0)
000162A4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000162AA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000162B0 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000162B6 6400                       		bcc.s	Obj6A_Action
000162B8 117C 00A2 0020             		move.b	#$A2,$20(a0)
000162BE                            
000162BE                            Obj6A_Action:				; XREF: Obj6A_Index
000162BE 7000                       		moveq	#0,d0
000162C0 1028 0028                  		move.b	$28(a0),d0
000162C4 0240 0007                  		andi.w	#7,d0
000162C8 D040                       		add.w	d0,d0
000162CA 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000162CE 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000162D2 3028 003A                  		move.w	$3A(a0),d0
000162D6 0240 FF80                  		andi.w	#$FF80,d0
000162DA 3238 F700                  		move.w	($FFFFF700).w,d1
000162DE 0441 0080                  		subi.w	#$80,d1
000162E2 0241 FF80                  		andi.w	#$FF80,d1
000162E6 9041                       		sub.w	d1,d0
000162E8 0C40 0280                  		cmpi.w	#$280,d0
000162EC 6200                       		bhi.s	Obj6A_Delete
000162EE 4EF9 0000 DE02             		jmp	DisplaySprite
000162F4                            ; ===========================================================================
000162F4                            
000162F4                            Obj6A_Delete:
000162F4 4EF9 0000 DE3E             		jmp	DeleteObject
000162FA                            ; ===========================================================================
000162FA 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000162FE 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016302 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016304                            ; ===========================================================================
00016304                            
00016304                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016304 4E75                       		rts	
00016306                            ; ===========================================================================
00016306                            
00016306                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016306 323C 0060                  		move.w	#$60,d1
0001630A 7000                       		moveq	#0,d0
0001630C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016310 0828 0000 0022             		btst	#0,$22(a0)
00016316 6700                       		beq.s	Obj6A_Animate01
00016318 4440                       		neg.w	d0
0001631A D041                       		add.w	d1,d0
0001631C                            
0001631C                            Obj6A_Animate01:
0001631C 3228 003A                  		move.w	$3A(a0),d1
00016320 9240                       		sub.w	d0,d1
00016322 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016326 5328 001E                  		subq.b	#1,$1E(a0)
0001632A 6A00                       		bpl.s	loc_15A46
0001632C 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016332 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016338                            
00016338                            loc_15A46:
00016338 4A28 0001                  		tst.b	1(a0)
0001633C 6A00                       		bpl.s	locret_15A60
0001633E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016342 0240 000F                  		andi.w	#$F,d0
00016346 6600                       		bne.s	locret_15A60
00016348 303C 00B0                  		move.w	#$B0,d0
0001634C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016352                            
00016352                            locret_15A60:
00016352 4E75                       		rts	
00016354                            ; ===========================================================================
00016354                            
00016354                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016354 323C 0030                  		move.w	#$30,d1
00016358 7000                       		moveq	#0,d0
0001635A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001635E 0828 0000 0022             		btst	#0,$22(a0)
00016364 6700                       		beq.s	Obj6A_Animate02
00016366 4440                       		neg.w	d0
00016368 0640 0080                  		addi.w	#$80,d0
0001636C                            
0001636C                            Obj6A_Animate02:
0001636C 3228 0038                  		move.w	$38(a0),d1
00016370 9240                       		sub.w	d0,d1
00016372 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016376 5328 001E                  		subq.b	#1,$1E(a0)
0001637A 6A00                       		bpl.s	loc_15A96
0001637C 117C 0002 001E             		move.b	#2,$1E(a0)
00016382 0868 0000 001A             		bchg	#0,$1A(a0)
00016388                            
00016388                            loc_15A96:
00016388 4A28 0001                  		tst.b	1(a0)
0001638C 6A00                       		bpl.s	locret_15AB0
0001638E 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016392 0C00 0018                  		cmpi.b	#$18,d0
00016396 6600                       		bne.s	locret_15AB0
00016398 303C 00B0                  		move.w	#$B0,d0
0001639C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000163A2                            
000163A2                            locret_15AB0:
000163A2 4E75                       		rts	
000163A4                            ; ===========================================================================
000163A4                            
000163A4                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000163A4 4A28 003D                  		tst.b	$3D(a0)
000163A8 6600                       		bne.s	Obj6A_Animate03
000163AA 3038 D008                  		move.w	($FFFFD008).w,d0
000163AE 0440 00C0                  		subi.w	#$C0,d0
000163B2 6500                       		bcs.s	loc_15B02
000163B4 9068 0008                  		sub.w	8(a0),d0
000163B8 6500                       		bcs.s	loc_15B02
000163BA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000163BE 0440 0080                  		subi.w	#$80,d0
000163C2 B068 000C                  		cmp.w	$C(a0),d0
000163C6 6400                       		bcc.s	locret_15B04
000163C8 0640 0100                  		addi.w	#$100,d0
000163CC B068 000C                  		cmp.w	$C(a0),d0
000163D0 6500                       		bcs.s	locret_15B04
000163D2 117C 0001 003D             		move.b	#1,$3D(a0)
000163D8 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000163DE 117C 00A2 0020             		move.b	#$A2,$20(a0)
000163E4 117C 0002 001A             		move.b	#2,$1A(a0)
000163EA 303C 00B0                  		move.w	#$B0,d0
000163EE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000163F4                            
000163F4                            loc_15B02:
000163F4 588F                       		addq.l	#4,sp
000163F6                            
000163F6                            locret_15B04:
000163F6 4E75                       		rts	
000163F8                            ; ===========================================================================
000163F8                            
000163F8                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000163F8 4EB9 0000 DDDC             		jsr	SpeedToPos
000163FE 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016404 5328 001E                  		subq.b	#1,$1E(a0)
00016408 6A00                       		bpl.s	locret_15B24
0001640A 117C 0002 001E             		move.b	#2,$1E(a0)
00016410 0868 0000 001A             		bchg	#0,$1A(a0)
00016416                            
00016416                            locret_15B24:
00016416 4E75                       		rts	
00016418                            ; ===========================================================================
00016418                            
00016418                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016418 4A28 003D                  		tst.b	$3D(a0)
0001641C 6600                       		bne.s	Obj6A_Animate04
0001641E 3038 D008                  		move.w	($FFFFD008).w,d0
00016422 0640 00E0                  		addi.w	#$E0,d0
00016426 9068 0008                  		sub.w	8(a0),d0
0001642A 6400                       		bcc.s	loc_15B74
0001642C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016430 0440 0080                  		subi.w	#$80,d0
00016434 B068 000C                  		cmp.w	$C(a0),d0
00016438 6400                       		bcc.s	locret_15B76
0001643A 0640 0100                  		addi.w	#$100,d0
0001643E B068 000C                  		cmp.w	$C(a0),d0
00016442 6500                       		bcs.s	locret_15B76
00016444 117C 0001 003D             		move.b	#1,$3D(a0)
0001644A 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016450 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016456 117C 0002 001A             		move.b	#2,$1A(a0)
0001645C 303C 00B0                  		move.w	#$B0,d0
00016460 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016466                            
00016466                            loc_15B74:
00016466 588F                       		addq.l	#4,sp
00016468                            
00016468                            locret_15B76:
00016468 4E75                       		rts	
0001646A                            ; ===========================================================================
0001646A                            
0001646A                            Obj6A_Animate04:
0001646A 4EB9 0000 DDDC             		jsr	SpeedToPos
00016470 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016476 5328 001E                  		subq.b	#1,$1E(a0)
0001647A 6A00                       		bpl.s	locret_15B96
0001647C 117C 0002 001E             		move.b	#2,$1E(a0)
00016482 0868 0000 001A             		bchg	#0,$1A(a0)
00016488                            
00016488                            locret_15B96:
00016488 4E75                       		rts	
0001648A                            ; ===========================================================================
0001648A                            ; ---------------------------------------------------------------------------
0001648A                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001648A                            ; ---------------------------------------------------------------------------
0001648A                            Map_obj6A:
0001648A                            	include "_maps\obj6A.asm"
0001648A                            ; ---------------------------------------------------------------------------
0001648A                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001648A                            ; ---------------------------------------------------------------------------
0001648A 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001648E 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016492 07                         byte_15BA0:	dc.b 7
00016493 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016498 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001649D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000164A2 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000164A7 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000164AC 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000164B1 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000164B6 07                         byte_15BC4:	dc.b 7
000164B7 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000164BC D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000164C1 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000164C6 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000164CB E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000164D0 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000164D5 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000164DA 04                         byte_15BE8:	dc.b 4
000164DB E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000164E0 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000164E5 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000164EA 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000164EF 04                         byte_15BFD:	dc.b 4
000164F0 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000164F5 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000164FA 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000164FF 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016504                            		even
00016504                            		even
00016504                            
00016504                            ; ===========================================================================
00016504                            ; ---------------------------------------------------------------------------
00016504                            ; Object 6B - stomper (SBZ)
00016504                            ; ---------------------------------------------------------------------------
00016504                            
00016504                            Obj6B:					; XREF: Obj_Index
00016504 7000                       		moveq	#0,d0
00016506 1028 0024                  		move.b	$24(a0),d0
0001650A 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001650E 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016512                            ; ===========================================================================
00016512 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016514 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016516                            
00016516 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001651A 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001651E 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016522 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016526 8040 0005                  		dc.b  $80, $40,	  0,   5
0001652A                            ; ===========================================================================
0001652A                            
0001652A                            Obj6B_Main:				; XREF: Obj6B_Index
0001652A 5428 0024                  		addq.b	#2,$24(a0)
0001652E 7000                       		moveq	#0,d0
00016530 1028 0028                  		move.b	$28(a0),d0
00016534 E448                       		lsr.w	#2,d0
00016536 0240 001C                  		andi.w	#$1C,d0
0001653A 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001653E 115B 0019                  		move.b	(a3)+,$19(a0)
00016542 115B 0016                  		move.b	(a3)+,$16(a0)
00016546 E448                       		lsr.w	#2,d0
00016548 1140 001A                  		move.b	d0,$1A(a0)
0001654C 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016554 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001655A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016560 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016562 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016568 6700                       		beq.s	Obj6B_SBZ3
0001656A                            
0001656A                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
0001656A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001656E 7000                       		moveq	#0,d0
00016570 1028 0023                  		move.b	$23(a0),d0
00016574 6700                       		beq.s	Obj6B_Delete
00016576 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001657C                            
0001657C                            Obj6B_Delete:
0001657C 4EF9 0000 DE3E             		jmp	DeleteObject
00016582                            ; ===========================================================================
00016582                            
00016582                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016582 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016588 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001658E 6600                       		bne.s	Obj6B_SBZ12
00016590 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016594 7000                       		moveq	#0,d0
00016596 1028 0023                  		move.b	$23(a0),d0
0001659A 6700                       		beq.s	Obj6B_SBZ12
0001659C 0832 0000 0002             		btst	#0,2(a2,d0.w)
000165A2 6700                       		beq.s	Obj6B_SBZ12
000165A4 4238 F7CB                  		clr.b	($FFFFF7CB).w
000165A8 60C0                       		bra.s	Obj6B_ChkGone
000165AA                            ; ===========================================================================
000165AA                            
000165AA                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000165AA 0028 0004 0001             		ori.b	#4,1(a0)
000165B0 117C 0004 0018             		move.b	#4,$18(a0)
000165B6 3168 0008 0034             		move.w	8(a0),$34(a0)
000165BC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000165C2 7000                       		moveq	#0,d0
000165C4 101B                       		move.b	(a3)+,d0
000165C6 3140 003C                  		move.w	d0,$3C(a0)
000165CA 7000                       		moveq	#0,d0
000165CC 1028 0028                  		move.b	$28(a0),d0
000165D0 6A00                       		bpl.s	Obj6B_Action
000165D2 0200 000F                  		andi.b	#$F,d0
000165D6 1140 003E                  		move.b	d0,$3E(a0)
000165DA 1153 0028                  		move.b	(a3),$28(a0)
000165DE 0C13 0005                  		cmpi.b	#5,(a3)
000165E2 6600                       		bne.s	Obj6B_ChkGone2
000165E4 08E8 0004 0001             		bset	#4,1(a0)
000165EA                            
000165EA                            Obj6B_ChkGone2:
000165EA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165EE 7000                       		moveq	#0,d0
000165F0 1028 0023                  		move.b	$23(a0),d0
000165F4 6700                       		beq.s	Obj6B_Action
000165F6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000165FC                            
000165FC                            Obj6B_Action:				; XREF: Obj6B_Index
000165FC 3F28 0008                  		move.w	8(a0),-(sp)
00016600 7000                       		moveq	#0,d0
00016602 1028 0028                  		move.b	$28(a0),d0
00016606 0240 000F                  		andi.w	#$F,d0
0001660A D040                       		add.w	d0,d0
0001660C 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016610 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016614 381F                       		move.w	(sp)+,d4
00016616 4A28 0001                  		tst.b	1(a0)
0001661A 6A00                       		bpl.s	Obj6B_ChkDel
0001661C 7200                       		moveq	#0,d1
0001661E 1228 0019                  		move.b	$19(a0),d1
00016622 0641 000B                  		addi.w	#$B,d1
00016626 7400                       		moveq	#0,d2
00016628 1428 0016                  		move.b	$16(a0),d2
0001662C 3602                       		move.w	d2,d3
0001662E 5243                       		addq.w	#1,d3
00016630 6100 9BA0                  		bsr.w	SolidObject
00016634                            
00016634                            Obj6B_ChkDel:
00016634 3028 0034                  		move.w	$34(a0),d0
00016638 0240 FF80                  		andi.w	#$FF80,d0
0001663C 3238 F700                  		move.w	($FFFFF700).w,d1
00016640 0441 0080                  		subi.w	#$80,d1
00016644 0241 FF80                  		andi.w	#$FF80,d1
00016648 9041                       		sub.w	d1,d0
0001664A 0C40 0280                  		cmpi.w	#$280,d0
0001664E 6200                       		bhi.s	loc_15D64
00016650 4EF9 0000 DE02             		jmp	DisplaySprite
00016656                            ; ===========================================================================
00016656                            
00016656                            loc_15D64:
00016656 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001665C 6600                       		bne.s	Obj6B_Delete2
0001665E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016662 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016666 7000                       		moveq	#0,d0
00016668 1028 0023                  		move.b	$23(a0),d0
0001666C 6700                       		beq.s	Obj6B_Delete2
0001666E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016674                            
00016674                            Obj6B_Delete2:
00016674 4EF9 0000 DE3E             		jmp	DeleteObject
0001667A                            ; ===========================================================================
0001667A 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001667E 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016682 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016686                            ; ===========================================================================
00016686                            
00016686                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016686 4E75                       		rts	
00016688                            ; ===========================================================================
00016688                            
00016688                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016688 4A28 0038                  		tst.b	$38(a0)
0001668C 6600                       		bne.s	loc_15DB4
0001668E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016692 7000                       		moveq	#0,d0
00016694 1028 003E                  		move.b	$3E(a0),d0
00016698 0832 0000 0000             		btst	#0,(a2,d0.w)
0001669E 6700                       		beq.s	loc_15DC2
000166A0 117C 0001 0038             		move.b	#1,$38(a0)
000166A6                            
000166A6                            loc_15DB4:
000166A6 3028 003C                  		move.w	$3C(a0),d0
000166AA B068 003A                  		cmp.w	$3A(a0),d0
000166AE 6700                       		beq.s	loc_15DE0
000166B0 5468 003A                  		addq.w	#2,$3A(a0)
000166B4                            
000166B4                            loc_15DC2:
000166B4 3028 003A                  		move.w	$3A(a0),d0
000166B8 0828 0000 0022             		btst	#0,$22(a0)
000166BE 6700                       		beq.s	loc_15DD4
000166C0 4440                       		neg.w	d0
000166C2 0640 0080                  		addi.w	#$80,d0
000166C6                            
000166C6                            loc_15DD4:
000166C6 3228 0034                  		move.w	$34(a0),d1
000166CA 9240                       		sub.w	d0,d1
000166CC 3141 0008                  		move.w	d1,8(a0)
000166D0 4E75                       		rts	
000166D2                            ; ===========================================================================
000166D2                            
000166D2                            loc_15DE0:
000166D2 5228 0028                  		addq.b	#1,$28(a0)
000166D6 317C 00B4 0036             		move.w	#$B4,$36(a0)
000166DC 4228 0038                  		clr.b	$38(a0)
000166E0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000166E4 7000                       		moveq	#0,d0
000166E6 1028 0023                  		move.b	$23(a0),d0
000166EA 67C8                       		beq.s	loc_15DC2
000166EC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000166F2 60C0                       		bra.s	loc_15DC2
000166F4                            ; ===========================================================================
000166F4                            
000166F4                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000166F4 4A28 0038                  		tst.b	$38(a0)
000166F8 6600                       		bne.s	loc_15E14
000166FA 5368 0036                  		subq.w	#1,$36(a0)
000166FE 6600                       		bne.s	loc_15E1E
00016700 117C 0001 0038             		move.b	#1,$38(a0)
00016706                            
00016706                            loc_15E14:
00016706 4A68 003A                  		tst.w	$3A(a0)
0001670A 6700                       		beq.s	loc_15E3C
0001670C 5568 003A                  		subq.w	#2,$3A(a0)
00016710                            
00016710                            loc_15E1E:
00016710 3028 003A                  		move.w	$3A(a0),d0
00016714 0828 0000 0022             		btst	#0,$22(a0)
0001671A 6700                       		beq.s	loc_15E30
0001671C 4440                       		neg.w	d0
0001671E 0640 0080                  		addi.w	#$80,d0
00016722                            
00016722                            loc_15E30:
00016722 3228 0034                  		move.w	$34(a0),d1
00016726 9240                       		sub.w	d0,d1
00016728 3141 0008                  		move.w	d1,8(a0)
0001672C 4E75                       		rts	
0001672E                            ; ===========================================================================
0001672E                            
0001672E                            loc_15E3C:
0001672E 5328 0028                  		subq.b	#1,$28(a0)
00016732 4228 0038                  		clr.b	$38(a0)
00016736 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001673A 7000                       		moveq	#0,d0
0001673C 1028 0023                  		move.b	$23(a0),d0
00016740 67CE                       		beq.s	loc_15E1E
00016742 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016748 60C6                       		bra.s	loc_15E1E
0001674A                            ; ===========================================================================
0001674A                            
0001674A                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001674A 4A28 0038                  		tst.b	$38(a0)
0001674E 6600                       		bne.s	loc_15E7C
00016750 4A68 003A                  		tst.w	$3A(a0)
00016754 6700                       		beq.s	loc_15E6A
00016756 5368 003A                  		subq.w	#1,$3A(a0)
0001675A 6000                       		bra.s	loc_15E8E
0001675C                            ; ===========================================================================
0001675C                            
0001675C                            loc_15E6A:
0001675C 5368 0036                  		subq.w	#1,$36(a0)
00016760 6A00                       		bpl.s	loc_15E8E
00016762 317C 003C 0036             		move.w	#$3C,$36(a0)
00016768 117C 0001 0038             		move.b	#1,$38(a0)
0001676E                            
0001676E                            loc_15E7C:
0001676E 5068 003A                  		addq.w	#8,$3A(a0)
00016772 3028 003A                  		move.w	$3A(a0),d0
00016776 B068 003C                  		cmp.w	$3C(a0),d0
0001677A 6600                       		bne.s	loc_15E8E
0001677C 4228 0038                  		clr.b	$38(a0)
00016780                            
00016780                            loc_15E8E:
00016780 3028 003A                  		move.w	$3A(a0),d0
00016784 0828 0000 0022             		btst	#0,$22(a0)
0001678A 6700                       		beq.s	loc_15EA0
0001678C 4440                       		neg.w	d0
0001678E 0640 0038                  		addi.w	#$38,d0
00016792                            
00016792                            loc_15EA0:
00016792 3228 0030                  		move.w	$30(a0),d1
00016796 D240                       		add.w	d0,d1
00016798 3141 000C                  		move.w	d1,$C(a0)
0001679C 4E75                       		rts	
0001679E                            ; ===========================================================================
0001679E                            
0001679E                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001679E 4A28 0038                  		tst.b	$38(a0)
000167A2 6600                       		bne.s	loc_15ED0
000167A4 4A68 003A                  		tst.w	$3A(a0)
000167A8 6700                       		beq.s	loc_15EBE
000167AA 5168 003A                  		subq.w	#8,$3A(a0)
000167AE 6000                       		bra.s	loc_15EF0
000167B0                            ; ===========================================================================
000167B0                            
000167B0                            loc_15EBE:
000167B0 5368 0036                  		subq.w	#1,$36(a0)
000167B4 6A00                       		bpl.s	loc_15EF0
000167B6 317C 003C 0036             		move.w	#$3C,$36(a0)
000167BC 117C 0001 0038             		move.b	#1,$38(a0)
000167C2                            
000167C2                            loc_15ED0:
000167C2 3028 003A                  		move.w	$3A(a0),d0
000167C6 B068 003C                  		cmp.w	$3C(a0),d0
000167CA 6700                       		beq.s	loc_15EE0
000167CC 5068 003A                  		addq.w	#8,$3A(a0)
000167D0 6000                       		bra.s	loc_15EF0
000167D2                            ; ===========================================================================
000167D2                            
000167D2                            loc_15EE0:
000167D2 5368 0036                  		subq.w	#1,$36(a0)
000167D6 6A00                       		bpl.s	loc_15EF0
000167D8 317C 003C 0036             		move.w	#$3C,$36(a0)
000167DE 4228 0038                  		clr.b	$38(a0)
000167E2                            
000167E2                            loc_15EF0:
000167E2 3028 003A                  		move.w	$3A(a0),d0
000167E6 0828 0000 0022             		btst	#0,$22(a0)
000167EC 6700                       		beq.s	loc_15F02
000167EE 4440                       		neg.w	d0
000167F0 0640 0038                  		addi.w	#$38,d0
000167F4                            
000167F4                            loc_15F02:
000167F4 3228 0030                  		move.w	$30(a0),d1
000167F8 D240                       		add.w	d0,d1
000167FA 3141 000C                  		move.w	d1,$C(a0)
000167FE 4E75                       		rts	
00016800                            ; ===========================================================================
00016800                            
00016800                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016800 4A28 0038                  		tst.b	$38(a0)
00016804 6600                       		bne.s	loc_15F3E
00016806 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001680A 7000                       		moveq	#0,d0
0001680C 1028 003E                  		move.b	$3E(a0),d0
00016810 0832 0000 0000             		btst	#0,(a2,d0.w)
00016816 6700                       		beq.s	locret_15F5C
00016818 117C 0001 0038             		move.b	#1,$38(a0)
0001681E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016822 7000                       		moveq	#0,d0
00016824 1028 0023                  		move.b	$23(a0),d0
00016828 6700                       		beq.s	loc_15F3E
0001682A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016830                            
00016830                            loc_15F3E:
00016830 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016838 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016840 3168 0008 0034             		move.w	8(a0),$34(a0)
00016846 0C68 0980 0008             		cmpi.w	#$980,8(a0)
0001684C 6700                       		beq.s	loc_15F5E
0001684E                            
0001684E                            locret_15F5C:
0001684E 4E75                       		rts	
00016850                            ; ===========================================================================
00016850                            
00016850                            loc_15F5E:
00016850 4228 0028                  		clr.b	$28(a0)
00016854 4228 0038                  		clr.b	$38(a0)
00016858 4E75                       		rts	
0001685A                            ; ===========================================================================
0001685A                            ; ---------------------------------------------------------------------------
0001685A                            ; Sprite mappings - stomper and	platforms (SBZ)
0001685A                            ; ---------------------------------------------------------------------------
0001685A                            Map_obj6B:
0001685A                            	include "_maps\obj6B.asm"
0001685A                            ; ---------------------------------------------------------------------------
0001685A                            ; Sprite mappings - stomper and	platforms (SBZ)
0001685A                            ; ---------------------------------------------------------------------------
0001685A 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001685E 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016862 0000                       		dc.w byte_15FB0-Map_obj6B
00016864 04                         byte_15F72:	dc.b 4
00016865 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
0001686A F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001686F F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016874 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016879 08                         byte_15F87:	dc.b 8
0001687A E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001687F E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016884 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016889 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001688E 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016893 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016898 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001689D 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000168A2 0E                         byte_15FB0:	dc.b $E
000168A3 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000168A8 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000168AD C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000168B2 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000168B7 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000168BC C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000168C1 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000168C6 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000168CB E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000168D0 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000168D5 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000168DA 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000168DF 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000168E4 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000168EA 00                         		even
000168EA 00                         		even
000168EA                            
000168EA                            ; ===========================================================================
000168EA                            ; ---------------------------------------------------------------------------
000168EA                            ; Object 6C - vanishing	platforms (SBZ)
000168EA                            ; ---------------------------------------------------------------------------
000168EA                            
000168EA                            Obj6C:					; XREF: Obj_Index
000168EA 7000                       		moveq	#0,d0
000168EC 1028 0024                  		move.b	$24(a0),d0
000168F0 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000168F4 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000168F8                            ; ===========================================================================
000168F8 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000168FA 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000168FC 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000168FE 0000                       		dc.w loc_16068-Obj6C_Index
00016900                            ; ===========================================================================
00016900                            
00016900                            Obj6C_Main:				; XREF: Obj6C_Index
00016900 5C28 0024                  		addq.b	#6,$24(a0)
00016904 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001690C 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016912 0028 0004 0001             		ori.b	#4,1(a0)
00016918 117C 0010 0019             		move.b	#$10,$19(a0)
0001691E 117C 0004 0018             		move.b	#4,$18(a0)
00016924 7000                       		moveq	#0,d0
00016926 1028 0028                  		move.b	$28(a0),d0	; get object type
0001692A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001692E 5240                       		addq.w	#1,d0		; add 1
00016930 EF48                       		lsl.w	#7,d0		; multiply by $80
00016932 3200                       		move.w	d0,d1
00016934 5340                       		subq.w	#1,d0
00016936 3140 0030                  		move.w	d0,$30(a0)
0001693A 3140 0032                  		move.w	d0,$32(a0)
0001693E 7000                       		moveq	#0,d0
00016940 1028 0028                  		move.b	$28(a0),d0	; get object type
00016944 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016948 0641 0080                  		addi.w	#$80,d1
0001694C C0C1                       		mulu.w	d1,d0
0001694E E088                       		lsr.l	#8,d0
00016950 3140 0036                  		move.w	d0,$36(a0)
00016954 5341                       		subq.w	#1,d1
00016956 3141 0038                  		move.w	d1,$38(a0)
0001695A                            
0001695A                            loc_16068:				; XREF: Obj6C_Index
0001695A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001695E 9068 0036                  		sub.w	$36(a0),d0
00016962 C068 0038                  		and.w	$38(a0),d0
00016966 6600                       		bne.s	Obj6C_Animate
00016968 5928 0024                  		subq.b	#4,$24(a0)
0001696C 6000                       		bra.s	Obj6C_Vanish
0001696E                            ; ===========================================================================
0001696E                            
0001696E                            Obj6C_Animate:
0001696E 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016974 4EB9 0000 AEC2             		jsr	AnimateSprite
0001697A 6000 952E                  		bra.w	MarkObjGone
0001697E                            ; ===========================================================================
0001697E                            
0001697E                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001697E 5368 0030                  		subq.w	#1,$30(a0)
00016982 6A00                       		bpl.s	loc_160AA
00016984 317C 007F 0030             		move.w	#127,$30(a0)
0001698A 4A28 001C                  		tst.b	$1C(a0)
0001698E 6700                       		beq.s	loc_160A4
00016990 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016996                            
00016996                            loc_160A4:
00016996 0868 0000 001C             		bchg	#0,$1C(a0)
0001699C                            
0001699C                            loc_160AA:
0001699C 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000169A2 4EB9 0000 AEC2             		jsr	AnimateSprite
000169A8 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000169AE 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000169B0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000169B6 6600                       		bne.s	loc_160D6
000169B8 7200                       		moveq	#0,d1
000169BA 1228 0019                  		move.b	$19(a0),d1
000169BE 4EB9 0000 7A82             		jsr	(PlatformObject).l
000169C4 6000 94E4                  		bra.w	MarkObjGone
000169C8                            ; ===========================================================================
000169C8                            
000169C8                            loc_160D6:
000169C8 7200                       		moveq	#0,d1
000169CA 1228 0019                  		move.b	$19(a0),d1
000169CE 4EB9 0000 7BF6             		jsr	(ExitPlatform).l
000169D4 3428 0008                  		move.w	8(a0),d2
000169D8 4EB9 0000 8160             		jsr	(MvSonicOnPtfm2).l
000169DE 6000 94CA                  		bra.w	MarkObjGone
000169E2                            ; ===========================================================================
000169E2                            
000169E2                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000169E2 0828 0003 0022             		btst	#3,$22(a0)
000169E8 6700                       		beq.s	Obj6C_Display
000169EA 43F8 D000                  		lea	($FFFFD000).w,a1
000169EE 08A9 0003 0022             		bclr	#3,$22(a1)
000169F4 08A8 0003 0022             		bclr	#3,$22(a0)
000169FA 117C 0002 0024             		move.b	#2,$24(a0)
00016A00 4228 0025                  		clr.b	$25(a0)
00016A04                            
00016A04                            Obj6C_Display:
00016A04 6000 94A4                  		bra.w	MarkObjGone
00016A08                            ; ===========================================================================
00016A08                            Ani_obj6C:
00016A08                            	include "_anim\obj6C.asm"
00016A08                            ; ---------------------------------------------------------------------------
00016A08                            ; Animation script - vanishing platforms (SBZ)
00016A08                            ; ---------------------------------------------------------------------------
00016A08 0000                       		dc.w byte_1611A-Ani_obj6C
00016A0A 0000                       		dc.w byte_16122-Ani_obj6C
00016A0C 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016A14 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016A1C                            		even
00016A1C                            		even
00016A1C                            
00016A1C                            ; ---------------------------------------------------------------------------
00016A1C                            ; Sprite mappings - vanishing platforms	(SBZ)
00016A1C                            ; ---------------------------------------------------------------------------
00016A1C                            Map_obj6C:
00016A1C                            	include "_maps\obj6C.asm"
00016A1C                            ; ---------------------------------------------------------------------------
00016A1C                            ; Sprite mappings - vanishing platforms	(SBZ)
00016A1C                            ; ---------------------------------------------------------------------------
00016A1C 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016A20 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016A24 01                         byte_16132:	dc.b 1
00016A25 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016A2A 01                         byte_16138:	dc.b 1
00016A2B F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016A30 01                         byte_1613E:	dc.b 1
00016A31 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016A36 00                         byte_16144:	dc.b 0
00016A38 00                         		even
00016A38 00                         		even
00016A38                            
00016A38                            ; ===========================================================================
00016A38                            ; ---------------------------------------------------------------------------
00016A38                            ; Object 6E - electrocution orbs (SBZ)
00016A38                            ; ---------------------------------------------------------------------------
00016A38                            
00016A38                            Obj6E:					; XREF: Obj_Index
00016A38 7000                       		moveq	#0,d0
00016A3A 1028 0024                  		move.b	$24(a0),d0
00016A3E 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016A42 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016A46                            ; ===========================================================================
00016A46 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016A48 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016A4A                            ; ===========================================================================
00016A4A                            
00016A4A                            Obj6E_Main:				; XREF: Obj6E_Index
00016A4A 5428 0024                  		addq.b	#2,$24(a0)
00016A4E 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016A56 317C 047E 0002             		move.w	#$47E,2(a0)
00016A5C 0028 0004 0001             		ori.b	#4,1(a0)
00016A62 117C 0028 0019             		move.b	#$28,$19(a0)
00016A68 7000                       		moveq	#0,d0
00016A6A 1028 0028                  		move.b	$28(a0),d0	; read object type
00016A6E E948                       		lsl.w	#4,d0		; multiply by $10
00016A70 5340                       		subq.w	#1,d0
00016A72 3140 0034                  		move.w	d0,$34(a0)
00016A76                            
00016A76                            Obj6E_Shock:				; XREF: Obj6E_Index
00016A76 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016A7A C068 0034                  		and.w	$34(a0),d0
00016A7E 6600                       		bne.s	Obj6E_Animate
00016A80 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016A86 4A28 0001                  		tst.b	1(a0)
00016A8A 6A00                       		bpl.s	Obj6E_Animate
00016A8C 303C 00B1                  		move.w	#$B1,d0
00016A90 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play electricity sound
00016A96                            
00016A96                            Obj6E_Animate:
00016A96 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016A9C 4EB9 0000 AEC2             		jsr	AnimateSprite
00016AA2 117C 0000 0020             		move.b	#0,$20(a0)
00016AA8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016AAE 6600                       		bne.s	Obj6E_Display	; if not, branch
00016AB0 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016AB6                            
00016AB6                            Obj6E_Display:
00016AB6 6000 93F2                  		bra.w	MarkObjGone
00016ABA                            ; ===========================================================================
00016ABA                            Ani_obj6E:
00016ABA                            	include "_anim\obj6E.asm"
00016ABA                            ; ---------------------------------------------------------------------------
00016ABA                            ; Animation script - electrocution orbs (SBZ)
00016ABA                            ; ---------------------------------------------------------------------------
00016ABA 0000                       		dc.w byte_161CC-Ani_obj6E
00016ABC 0000                       		dc.w byte_161D0-Ani_obj6E
00016ABE 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016AC2 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016AD2                            		even
00016AD2                            		even
00016AD2                            
00016AD2                            ; ---------------------------------------------------------------------------
00016AD2                            ; Sprite mappings - electrocution orbs (SBZ)
00016AD2                            ; ---------------------------------------------------------------------------
00016AD2                            Map_obj6E:
00016AD2                            	include "_maps\obj6E.asm"
00016AD2                            Map_26ed:
00016AD2 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016AD4 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016AD6 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016AD8 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016ADA 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016ADC 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016ADE 01                         Map_26ed_C: 	dc.b $1
00016ADF 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016AE4 02                         Map_26ed_12: 	dc.b $2
00016AE5 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016AEA 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AEF 06                         Map_26ed_1D: 	dc.b $6
00016AF0 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016AF5 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AFA F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016AFF F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B04 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B09 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B0E 08                         Map_26ed_3C: 	dc.b $8
00016B0F F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B14 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B19 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016B1E F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B23 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B28 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B2D F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B32 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B37 06                         Map_26ed_65: 	dc.b $6
00016B38 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B3D 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B42 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B47 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B4C F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B51 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B56 04                         Map_26ed_84: 	dc.b $4
00016B57 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B5C 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B61 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B66 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B6C 00                         	even
00016B6C 00                         	even
00016B6C                            
00016B6C                            ; ===========================================================================
00016B6C                            ; ---------------------------------------------------------------------------
00016B6C                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016B6C                            ; ---------------------------------------------------------------------------
00016B6C                            
00016B6C                            Obj6F:					; XREF: Obj_Index
00016B6C 7000                       		moveq	#0,d0
00016B6E 1028 0024                  		move.b	$24(a0),d0
00016B72 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016B76 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016B7A 3028 0030                  		move.w	$30(a0),d0
00016B7E 0240 FF80                  		andi.w	#$FF80,d0
00016B82 3238 F700                  		move.w	($FFFFF700).w,d1
00016B86 0441 0080                  		subi.w	#$80,d1
00016B8A 0241 FF80                  		andi.w	#$FF80,d1
00016B8E 9041                       		sub.w	d1,d0
00016B90 0C40 0280                  		cmpi.w	#$280,d0
00016B94 6200                       		bhi.s	loc_1629A
00016B96                            
00016B96                            Obj6F_Display:
00016B96 4EF9 0000 DE02             		jmp	DisplaySprite
00016B9C                            ; ===========================================================================
00016B9C                            
00016B9C                            loc_1629A:
00016B9C 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016BA2 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016BA4 0C40 FF80                  		cmpi.w	#-$80,d0
00016BA8 64EC                       		bcc.s	Obj6F_Display
00016BAA                            
00016BAA                            Obj6F_Act1or2:
00016BAA 1028 002F                  		move.b	$2F(a0),d0
00016BAE 6A00                       		bpl.s	Obj6F_Delete
00016BB0 0240 007F                  		andi.w	#$7F,d0
00016BB4 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016BB8 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016BBE                            
00016BBE                            Obj6F_Delete:
00016BBE 4EF9 0000 DE3E             		jmp	DeleteObject
00016BC4                            ; ===========================================================================
00016BC4 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016BC6 0000                       		dc.w loc_163D8-Obj6F_Index
00016BC8                            ; ===========================================================================
00016BC8                            
00016BC8                            Obj6F_Main:				; XREF: Obj6F_Index
00016BC8 1028 0028                  		move.b	$28(a0),d0
00016BCC 6B00 0000                  		bmi.w	loc_16380
00016BD0 5428 0024                  		addq.b	#2,$24(a0)
00016BD4 217C 0001 622C 0004        		move.l	#Map_obj69a,4(a0)
00016BDC 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016BE2 117C 0010 0019             		move.b	#$10,$19(a0)
00016BE8 0028 0004 0001             		ori.b	#4,1(a0)
00016BEE 117C 0004 0018             		move.b	#4,$18(a0)
00016BF4 7000                       		moveq	#0,d0
00016BF6 1028 0028                  		move.b	$28(a0),d0
00016BFA 3200                       		move.w	d0,d1
00016BFC E648                       		lsr.w	#3,d0
00016BFE 0240 001E                  		andi.w	#$1E,d0
00016C02 45FA 0000                  		lea	off_164A6(pc),a2
00016C06 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C0A 315A 0038                  		move.w	(a2)+,$38(a0)
00016C0E 315A 0030                  		move.w	(a2)+,$30(a0)
00016C12 214A 003C                  		move.l	a2,$3C(a0)
00016C16 0241 000F                  		andi.w	#$F,d1
00016C1A E549                       		lsl.w	#2,d1
00016C1C 1141 0038                  		move.b	d1,$38(a0)
00016C20 117C 0004 003A             		move.b	#4,$3A(a0)
00016C26 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016C2A 6700                       		beq.s	loc_16356
00016C2C 117C 0001 003B             		move.b	#1,$3B(a0)
00016C32 4428 003A                  		neg.b	$3A(a0)
00016C36 7200                       		moveq	#0,d1
00016C38 1228 0038                  		move.b	$38(a0),d1
00016C3C D228 003A                  		add.b	$3A(a0),d1
00016C40 B228 0039                  		cmp.b	$39(a0),d1
00016C44 6500                       		bcs.s	loc_16352
00016C46 1001                       		move.b	d1,d0
00016C48 7200                       		moveq	#0,d1
00016C4A 4A00                       		tst.b	d0
00016C4C 6A00                       		bpl.s	loc_16352
00016C4E 1228 0039                  		move.b	$39(a0),d1
00016C52 5901                       		subq.b	#4,d1
00016C54                            
00016C54                            loc_16352:
00016C54 1141 0038                  		move.b	d1,$38(a0)
00016C58                            
00016C58                            loc_16356:
00016C58 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016C5E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016C64 4A41                       		tst.w	d1
00016C66 6600                       		bne.s	loc_1636C
00016C68 117C 0001 001C             		move.b	#1,$1C(a0)
00016C6E                            
00016C6E                            loc_1636C:
00016C6E 0C41 0008                  		cmpi.w	#8,d1
00016C72 6600                       		bne.s	loc_16378
00016C74 117C 0000 001C             		move.b	#0,$1C(a0)
00016C7A                            
00016C7A                            loc_16378:
00016C7A 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016C7E 6000 0000                  		bra.w	loc_163D8
00016C82                            ; ===========================================================================
00016C82                            
00016C82                            loc_16380:				; XREF: Obj6F_Main
00016C82 1140 002F                  		move.b	d0,$2F(a0)
00016C86 0240 007F                  		andi.w	#$7F,d0
00016C8A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016C8E 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016C94 6700                       		beq.s	loc_1639A
00016C96 4EF9 0000 DE3E             		jmp	DeleteObject
00016C9C                            ; ===========================================================================
00016C9C                            
00016C9C                            loc_1639A:
00016C9C D040                       		add.w	d0,d0
00016C9E 0240 001E                  		andi.w	#$1E,d0
00016CA2 0640 0080                  		addi.w	#$80,d0
00016CA6 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016CAC D4F2 0000                  		adda.w	(a2,d0.w),a2
00016CB0 321A                       		move.w	(a2)+,d1
00016CB2 2248                       		movea.l	a0,a1
00016CB4 6000                       		bra.s	Obj6F_LoadPform
00016CB6                            ; ===========================================================================
00016CB6                            
00016CB6                            Obj6F_Loop:
00016CB6 4EB9 0000 E288             		jsr	SingleObjLoad
00016CBC 6600                       		bne.s	loc_163D0
00016CBE                            
00016CBE                            Obj6F_LoadPform:			; XREF: loc_1639A
00016CBE 12BC 006F                  		move.b	#$6F,0(a1)
00016CC2 335A 0008                  		move.w	(a2)+,8(a1)
00016CC6 335A 000C                  		move.w	(a2)+,$C(a1)
00016CCA 301A                       		move.w	(a2)+,d0
00016CCC 1340 0028                  		move.b	d0,$28(a1)
00016CD0                            
00016CD0                            loc_163D0:
00016CD0 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016CD4                            
00016CD4 588F                       		addq.l	#4,sp
00016CD6 4E75                       		rts	
00016CD8                            ; ===========================================================================
00016CD8                            
00016CD8                            loc_163D8:				; XREF: Obj6F_Index
00016CD8 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016CDE 4EB9 0000 AEC2             		jsr	AnimateSprite
00016CE4 4A28 001A                  		tst.b	$1A(a0)
00016CE8 6600                       		bne.s	loc_16404
00016CEA 3F28 0008                  		move.w	8(a0),-(sp)
00016CEE 6100 0000                  		bsr.w	loc_16424
00016CF2 323C 001B                  		move.w	#$1B,d1
00016CF6 343C 0007                  		move.w	#7,d2
00016CFA 3602                       		move.w	d2,d3
00016CFC 5243                       		addq.w	#1,d3
00016CFE 381F                       		move.w	(sp)+,d4
00016D00 6000 94D0                  		bra.w	SolidObject
00016D04                            ; ===========================================================================
00016D04                            
00016D04                            loc_16404:
00016D04 0828 0003 0022             		btst	#3,$22(a0)
00016D0A 6700                       		beq.s	loc_16420
00016D0C 43F8 D000                  		lea	($FFFFD000).w,a1
00016D10 08A9 0003 0022             		bclr	#3,$22(a1)
00016D16 08A8 0003 0022             		bclr	#3,$22(a0)
00016D1C 4228 0025                  		clr.b	$25(a0)
00016D20                            
00016D20                            loc_16420:
00016D20 6000 0002                  		bra.w	*+4
00016D24                            
00016D24                            loc_16424:
00016D24 3028 0008                  		move.w	8(a0),d0
00016D28 B068 0034                  		cmp.w	$34(a0),d0
00016D2C 6600                       		bne.s	loc_16484
00016D2E 3028 000C                  		move.w	$C(a0),d0
00016D32 B068 0036                  		cmp.w	$36(a0),d0
00016D36 6600                       		bne.s	loc_16484
00016D38 7200                       		moveq	#0,d1
00016D3A 1228 0038                  		move.b	$38(a0),d1
00016D3E D228 003A                  		add.b	$3A(a0),d1
00016D42 B228 0039                  		cmp.b	$39(a0),d1
00016D46 6500                       		bcs.s	loc_16456
00016D48 1001                       		move.b	d1,d0
00016D4A 7200                       		moveq	#0,d1
00016D4C 4A00                       		tst.b	d0
00016D4E 6A00                       		bpl.s	loc_16456
00016D50 1228 0039                  		move.b	$39(a0),d1
00016D54 5901                       		subq.b	#4,d1
00016D56                            
00016D56                            loc_16456:
00016D56 1141 0038                  		move.b	d1,$38(a0)
00016D5A 2268 003C                  		movea.l	$3C(a0),a1
00016D5E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016D64 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016D6A 4A41                       		tst.w	d1
00016D6C 6600                       		bne.s	loc_16474
00016D6E 117C 0001 001C             		move.b	#1,$1C(a0)
00016D74                            
00016D74                            loc_16474:
00016D74 0C41 0008                  		cmpi.w	#8,d1
00016D78 6600                       		bne.s	loc_16480
00016D7A 117C 0000 001C             		move.b	#0,$1C(a0)
00016D80                            
00016D80                            loc_16480:
00016D80 6100 BFC0                  		bsr.w	Obj63_ChangeDir
00016D84                            
00016D84                            loc_16484:
00016D84 4EF9 0000 DDDC             		jmp	SpeedToPos
00016D8A                            ; ===========================================================================
00016D8A                            Ani_obj6F:
00016D8A                            	include "_anim\obj6F.asm"
00016D8A                            ; ---------------------------------------------------------------------------
00016D8A                            ; Animation script - platform on conveyor belt (SBZ)
00016D8A                            ; ---------------------------------------------------------------------------
00016D8A 0000                       		dc.w byte_1648E-Ani_obj6F
00016D8C 0000                       		dc.w byte_164A2-Ani_obj6F
00016D8E 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016D9B 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016DA2 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016DA6 00                         		even
00016DA6 00                         		even
00016DA6                            
00016DA6 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016DAC 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016DB2 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016DC6 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016DDA 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016DEE 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016E02 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016E16 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016E2A                            ; ===========================================================================
00016E2A                            ; ---------------------------------------------------------------------------
00016E2A                            ; Object 70 - large girder block (SBZ)
00016E2A                            ; ---------------------------------------------------------------------------
00016E2A                            
00016E2A                            Obj70:					; XREF: Obj_Index
00016E2A 7000                       		moveq	#0,d0
00016E2C 1028 0024                  		move.b	$24(a0),d0
00016E30 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016E34 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016E38                            ; ===========================================================================
00016E38 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016E3A 0000                       		dc.w Obj70_Action-Obj70_Index
00016E3C                            ; ===========================================================================
00016E3C                            
00016E3C                            Obj70_Main:				; XREF: Obj70_Index
00016E3C 5428 0024                  		addq.b	#2,$24(a0)
00016E40 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016E48 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016E4E 0028 0004 0001             		ori.b	#4,1(a0)
00016E54 117C 0004 0018             		move.b	#4,$18(a0)
00016E5A 117C 0060 0019             		move.b	#$60,$19(a0)
00016E60 117C 0018 0016             		move.b	#$18,$16(a0)
00016E66 3168 0008 0032             		move.w	8(a0),$32(a0)
00016E6C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016E72 6100 0000                  		bsr.w	Obj70_Move2
00016E76                            
00016E76                            Obj70_Action:				; XREF: Obj70_Index
00016E76 3F28 0008                  		move.w	8(a0),-(sp)
00016E7A 4A68 003A                  		tst.w	$3A(a0)
00016E7E 6700                       		beq.s	Obj70_Move
00016E80 5368 003A                  		subq.w	#1,$3A(a0)
00016E84 6600                       		bne.s	Obj70_Solid
00016E86                            
00016E86                            Obj70_Move:
00016E86 4EB9 0000 DDDC             		jsr	SpeedToPos
00016E8C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016E90 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016E92 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016E96                            
00016E96                            Obj70_Solid:
00016E96 381F                       		move.w	(sp)+,d4
00016E98 4A28 0001                  		tst.b	1(a0)
00016E9C 6A00                       		bpl.s	Obj70_ChkDel
00016E9E 7200                       		moveq	#0,d1
00016EA0 1228 0019                  		move.b	$19(a0),d1
00016EA4 0641 000B                  		addi.w	#$B,d1
00016EA8 7400                       		moveq	#0,d2
00016EAA 1428 0016                  		move.b	$16(a0),d2
00016EAE 3602                       		move.w	d2,d3
00016EB0 5243                       		addq.w	#1,d3
00016EB2 6100 931E                  		bsr.w	SolidObject
00016EB6                            
00016EB6                            Obj70_ChkDel:
00016EB6 3028 0032                  		move.w	$32(a0),d0
00016EBA 0240 FF80                  		andi.w	#$FF80,d0
00016EBE 3238 F700                  		move.w	($FFFFF700).w,d1
00016EC2 0441 0080                  		subi.w	#$80,d1
00016EC6 0241 FF80                  		andi.w	#$FF80,d1
00016ECA 9041                       		sub.w	d1,d0
00016ECC 0C40 0280                  		cmpi.w	#$280,d0
00016ED0 6200                       		bhi.s	Obj70_Delete
00016ED2 4EF9 0000 DE02             		jmp	DisplaySprite
00016ED8                            ; ===========================================================================
00016ED8                            
00016ED8                            Obj70_Delete:
00016ED8 4EF9 0000 DE3E             		jmp	DeleteObject
00016EDE                            ; ===========================================================================
00016EDE                            
00016EDE                            Obj70_Move2:				; XREF: Obj70_Main
00016EDE 1028 0038                  		move.b	$38(a0),d0
00016EE2 0240 0018                  		andi.w	#$18,d0
00016EE6 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016EEC 43F1 0000                  		lea	(a1,d0.w),a1
00016EF0 3159 0010                  		move.w	(a1)+,$10(a0)
00016EF4 3159 0012                  		move.w	(a1)+,$12(a0)
00016EF8 3159 0034                  		move.w	(a1)+,$34(a0)
00016EFC 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016F00 317C 0007 003A             		move.w	#7,$3A(a0)
00016F06 4E75                       		rts	
00016F08                            ; ===========================================================================
00016F08 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016F10 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016F18 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016F20 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016F28                            ; ---------------------------------------------------------------------------
00016F28                            ; Sprite mappings - large girder block (SBZ)
00016F28                            ; ---------------------------------------------------------------------------
00016F28                            Map_obj70:
00016F28                            	include "_maps\obj70.asm"
00016F28                            ; ---------------------------------------------------------------------------
00016F28                            ; Sprite mappings - large girder block (SBZ)
00016F28                            ; ---------------------------------------------------------------------------
00016F28 0000                       		dc.w byte_1662A-Map_obj70
00016F2A 0C                         byte_1662A:	dc.b $C
00016F2B E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016F30 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016F35 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016F3A 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016F3F E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016F44 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016F49 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016F4E 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016F53 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016F58 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016F5D E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016F62 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016F68 00                         		even
00016F68 00                         		even
00016F68                            
00016F68                            ; ===========================================================================
00016F68                            ; ---------------------------------------------------------------------------
00016F68                            ; Object 72 - teleporter (SBZ)
00016F68                            ; ---------------------------------------------------------------------------
00016F68                            
00016F68                            Obj72:					; XREF: Obj_Index
00016F68 7000                       		moveq	#0,d0
00016F6A 1028 0024                  		move.b	$24(a0),d0
00016F6E 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016F72 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016F76 3028 0008                  		move.w	8(a0),d0
00016F7A 0240 FF80                  		andi.w	#$FF80,d0
00016F7E 3238 F700                  		move.w	($FFFFF700).w,d1
00016F82 0441 0080                  		subi.w	#$80,d1
00016F86 0241 FF80                  		andi.w	#$FF80,d1
00016F8A 9041                       		sub.w	d1,d0
00016F8C 0C40 0280                  		cmpi.w	#$280,d0
00016F90 6200                       		bhi.s	Obj72_Delete
00016F92 4E75                       		rts	
00016F94                            ; ===========================================================================
00016F94                            
00016F94                            Obj72_Delete:
00016F94 4EF9 0000 DE3E             		jmp	DeleteObject
00016F9A                            ; ===========================================================================
00016F9A 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016F9C 0000                       		dc.w loc_166C8-Obj72_Index
00016F9E 0000                       		dc.w loc_1675E-Obj72_Index
00016FA0 0000                       		dc.w loc_16798-Obj72_Index
00016FA2                            ; ===========================================================================
00016FA2                            
00016FA2                            Obj72_Main:				; XREF: Obj72_Index
00016FA2 5428 0024                  		addq.b	#2,$24(a0)
00016FA6 1028 0028                  		move.b	$28(a0),d0
00016FAA D040                       		add.w	d0,d0
00016FAC 0240 001E                  		andi.w	#$1E,d0
00016FB0 45FA 0000                  		lea	Obj72_Data(pc),a2
00016FB4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016FB8 315A 003A                  		move.w	(a2)+,$3A(a0)
00016FBC 214A 003C                  		move.l	a2,$3C(a0)
00016FC0 315A 0036                  		move.w	(a2)+,$36(a0)
00016FC4 315A 0038                  		move.w	(a2)+,$38(a0)
00016FC8                            
00016FC8                            loc_166C8:				; XREF: Obj72_Index
00016FC8 43F8 D000                  		lea	($FFFFD000).w,a1
00016FCC 3029 0008                  		move.w	8(a1),d0
00016FD0 9068 0008                  		sub.w	8(a0),d0
00016FD4 0828 0000 0022             		btst	#0,$22(a0)
00016FDA 6700                       		beq.s	loc_166E0
00016FDC 0640 000F                  		addi.w	#$F,d0
00016FE0                            
00016FE0                            loc_166E0:
00016FE0 0C40 0010                  		cmpi.w	#$10,d0
00016FE4 6400                       		bcc.s	locret_1675C
00016FE6 3229 000C                  		move.w	$C(a1),d1
00016FEA 9268 000C                  		sub.w	$C(a0),d1
00016FEE 0641 0020                  		addi.w	#$20,d1
00016FF2 0C41 0040                  		cmpi.w	#$40,d1
00016FF6 6400                       		bcc.s	locret_1675C
00016FF8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016FFC 6600                       		bne.s	locret_1675C
00016FFE 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017004 6600                       		bne.s	loc_1670E
00017006 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001700C 6500                       		bcs.s	locret_1675C
0001700E                            
0001700E                            loc_1670E:
0001700E 5428 0024                  		addq.b	#2,$24(a0)
00017012 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017018 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001701E 337C 0800 0014             		move.w	#$800,$14(a1)
00017024 337C 0000 0010             		move.w	#0,$10(a1)
0001702A 337C 0000 0012             		move.w	#0,$12(a1)
00017030 08A8 0005 0022             		bclr	#5,$22(a0)
00017036 08A9 0005 0022             		bclr	#5,$22(a1)
0001703C 08E9 0001 0022             		bset	#1,$22(a1)
00017042 3368 0008 0008             		move.w	8(a0),8(a1)
00017048 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001704E 4228 0032                  		clr.b	$32(a0)
00017052 303C 00BE                  		move.w	#$BE,d0
00017056 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001705C                            
0001705C                            locret_1675C:
0001705C 4E75                       		rts	
0001705E                            ; ===========================================================================
0001705E                            
0001705E                            loc_1675E:				; XREF: Obj72_Index
0001705E 43F8 D000                  		lea	($FFFFD000).w,a1
00017062 1028 0032                  		move.b	$32(a0),d0
00017066 5428 0032                  		addq.b	#2,$32(a0)
0001706A 4EB9 0000 2CEC             		jsr	(CalcSine).l
00017070 EA40                       		asr.w	#5,d0
00017072 3428 000C                  		move.w	$C(a0),d2
00017076 9440                       		sub.w	d0,d2
00017078 3342 000C                  		move.w	d2,$C(a1)
0001707C 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00017082 6600                       		bne.s	locret_16796
00017084 6100 0000                  		bsr.w	sub_1681C
00017088 5428 0024                  		addq.b	#2,$24(a0)
0001708C 303C 00BC                  		move.w	#$BC,d0
00017090 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play teleport sound
00017096                            
00017096                            locret_16796:
00017096 4E75                       		rts	
00017098                            ; ===========================================================================
00017098                            
00017098                            loc_16798:				; XREF: Obj72_Index
00017098 588F                       		addq.l	#4,sp
0001709A 43F8 D000                  		lea	($FFFFD000).w,a1
0001709E 5328 002E                  		subq.b	#1,$2E(a0)
000170A2 6A00                       		bpl.s	loc_167DA
000170A4 3368 0036 0008             		move.w	$36(a0),8(a1)
000170AA 3368 0038 000C             		move.w	$38(a0),$C(a1)
000170B0 7200                       		moveq	#0,d1
000170B2 1228 003A                  		move.b	$3A(a0),d1
000170B6 5801                       		addq.b	#4,d1
000170B8 B228 003B                  		cmp.b	$3B(a0),d1
000170BC 6500                       		bcs.s	loc_167C2
000170BE 7200                       		moveq	#0,d1
000170C0 6000                       		bra.s	loc_16800
000170C2                            ; ===========================================================================
000170C2                            
000170C2                            loc_167C2:
000170C2 1141 003A                  		move.b	d1,$3A(a0)
000170C6 2468 003C                  		movea.l	$3C(a0),a2
000170CA 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000170D0 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000170D6 6000 0000                  		bra.w	sub_1681C
000170DA                            ; ===========================================================================
000170DA                            
000170DA                            loc_167DA:
000170DA 2429 0008                  		move.l	8(a1),d2
000170DE 2629 000C                  		move.l	$C(a1),d3
000170E2 3029 0010                  		move.w	$10(a1),d0
000170E6 48C0                       		ext.l	d0
000170E8 E180                       		asl.l	#8,d0
000170EA D480                       		add.l	d0,d2
000170EC 3029 0012                  		move.w	$12(a1),d0
000170F0 48C0                       		ext.l	d0
000170F2 E180                       		asl.l	#8,d0
000170F4 D680                       		add.l	d0,d3
000170F6 2342 0008                  		move.l	d2,8(a1)
000170FA 2343 000C                  		move.l	d3,$C(a1)
000170FE 4E75                       		rts	
00017100                            ; ===========================================================================
00017100                            
00017100                            loc_16800:
00017100 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017106 4228 0024                  		clr.b	$24(a0)
0001710A 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001710E 337C 0000 0010             		move.w	#0,$10(a1)
00017114 337C 0200 0012             		move.w	#$200,$12(a1)
0001711A 4E75                       		rts	
0001711C                            
0001711C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001711C                            
0001711C                            
0001711C                            sub_1681C:
0001711C 7000                       		moveq	#0,d0
0001711E 343C 1000                  		move.w	#$1000,d2
00017122 3028 0036                  		move.w	$36(a0),d0
00017126 9069 0008                  		sub.w	8(a1),d0
0001712A 6C00                       		bge.s	loc_16830
0001712C 4440                       		neg.w	d0
0001712E 4442                       		neg.w	d2
00017130                            
00017130                            loc_16830:
00017130 7200                       		moveq	#0,d1
00017132 363C 1000                  		move.w	#$1000,d3
00017136 3228 0038                  		move.w	$38(a0),d1
0001713A 9269 000C                  		sub.w	$C(a1),d1
0001713E 6C00                       		bge.s	loc_16844
00017140 4441                       		neg.w	d1
00017142 4443                       		neg.w	d3
00017144                            
00017144                            loc_16844:
00017144 B240                       		cmp.w	d0,d1
00017146 6500                       		bcs.s	loc_1687A
00017148 7200                       		moveq	#0,d1
0001714A 3228 0038                  		move.w	$38(a0),d1
0001714E 9269 000C                  		sub.w	$C(a1),d1
00017152 4841                       		swap	d1
00017154 83C3                       		divs.w	d3,d1
00017156 7000                       		moveq	#0,d0
00017158 3028 0036                  		move.w	$36(a0),d0
0001715C 9069 0008                  		sub.w	8(a1),d0
00017160 6700                       		beq.s	loc_16866
00017162 4840                       		swap	d0
00017164 81C1                       		divs.w	d1,d0
00017166                            
00017166                            loc_16866:
00017166 3340 0010                  		move.w	d0,$10(a1)
0001716A 3343 0012                  		move.w	d3,$12(a1)
0001716E 4A41                       		tst.w	d1
00017170 6A00                       		bpl.s	loc_16874
00017172 4441                       		neg.w	d1
00017174                            
00017174                            loc_16874:
00017174 3141 002E                  		move.w	d1,$2E(a0)
00017178 4E75                       		rts	
0001717A                            ; ===========================================================================
0001717A                            
0001717A                            loc_1687A:
0001717A 7000                       		moveq	#0,d0
0001717C 3028 0036                  		move.w	$36(a0),d0
00017180 9069 0008                  		sub.w	8(a1),d0
00017184 4840                       		swap	d0
00017186 81C2                       		divs.w	d2,d0
00017188 7200                       		moveq	#0,d1
0001718A 3228 0038                  		move.w	$38(a0),d1
0001718E 9269 000C                  		sub.w	$C(a1),d1
00017192 6700                       		beq.s	loc_16898
00017194 4841                       		swap	d1
00017196 83C0                       		divs.w	d0,d1
00017198                            
00017198                            loc_16898:
00017198 3341 0012                  		move.w	d1,$12(a1)
0001719C 3342 0010                  		move.w	d2,$10(a1)
000171A0 4A40                       		tst.w	d0
000171A2 6A00                       		bpl.s	loc_168A6
000171A4 4440                       		neg.w	d0
000171A6                            
000171A6                            loc_168A6:
000171A6 3140 002E                  		move.w	d0,$2E(a0)
000171AA 4E75                       		rts	
000171AC                            ; End of function sub_1681C
000171AC                            
000171AC                            ; ===========================================================================
000171AC 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000171B2 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000171B8 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000171BC 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000171C2 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000171C8 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000171CE 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000171D4 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000171DA 0884 0298 0894             		dc.w $884, $298, $894
000171E0 0270 0894 0190             		dc.w $270, $894, $190
000171E6 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000171EC 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000171F2 1184 0498 1158             		dc.w $1184, $498, $1158
000171F8 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000171FE 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017204 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001720A 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017210 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017216 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001721C FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017222 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017228 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001722E 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017234                            ; ===========================================================================
00017234                            ; ---------------------------------------------------------------------------
00017234                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017234                            ; ---------------------------------------------------------------------------
00017234                            
00017234                            Obj78:					; XREF: Obj_Index
00017234 7000                       		moveq	#0,d0
00017236 1028 0024                  		move.b	$24(a0),d0
0001723A 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001723E 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017242                            ; ===========================================================================
00017242 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017244 0000                       		dc.w Obj78_Action-Obj78_Index
00017246 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017248 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
0001724A 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001724C 0000                       		dc.w Obj78_Delete-Obj78_Index
0001724E 0000                       		dc.w loc_16CC0-Obj78_Index
00017250                            ; ===========================================================================
00017250                            
00017250                            locret_16950:
00017250 4E75                       		rts	
00017252                            ; ===========================================================================
00017252                            
00017252                            Obj78_Main:				; XREF: Obj78_Index
00017252 117C 0007 0016             		move.b	#7,$16(a0)
00017258 117C 0008 0017             		move.b	#8,$17(a0)
0001725E 4EB9 0000 DDB0             		jsr	ObjectFall
00017264 4EBA E4A6                  		jsr	ObjHitFloor
00017268 4A41                       		tst.w	d1
0001726A 6AE4                       		bpl.s	locret_16950
0001726C D368 000C                  		add.w	d1,$C(a0)
00017270 4268 0012                  		clr.w	$12(a0)
00017274 5428 0024                  		addq.b	#2,$24(a0)
00017278 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00017280 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017286 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001728C 6700                       		beq.s	loc_16996
0001728E 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017294                            
00017294                            loc_16996:
00017294 0228 0003 0001             		andi.b	#3,1(a0)
0001729A 0028 0004 0001             		ori.b	#4,1(a0)
000172A0 1168 0001 0022             		move.b	1(a0),$22(a0)
000172A6 117C 0004 0018             		move.b	#4,$18(a0)
000172AC 117C 0008 0019             		move.b	#8,$19(a0)
000172B2 117C 000B 0020             		move.b	#$B,$20(a0)
000172B8 3428 0008                  		move.w	8(a0),d2
000172BC 7A0C                       		moveq	#$C,d5
000172BE 0828 0000 0022             		btst	#0,$22(a0)
000172C4 6700                       		beq.s	loc_169CA
000172C6 4445                       		neg.w	d5
000172C8                            
000172C8                            loc_169CA:
000172C8 1C3C 0004                  		move.b	#4,d6
000172CC 7600                       		moveq	#0,d3
000172CE 7804                       		moveq	#4,d4
000172D0 2448                       		movea.l	a0,a2
000172D2 7202                       		moveq	#2,d1
000172D4                            
000172D4                            Obj78_LoadBody:
000172D4 4EB9 0000 E29E             		jsr	SingleObjLoad2
000172DA 6600                       		bne.s	Obj78_QuitLoad
000172DC 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000172E0 1346 0024                  		move.b	d6,$24(a1)
000172E4 5406                       		addq.b	#2,d6
000172E6 2368 0004 0004             		move.l	4(a0),4(a1)
000172EC 3368 0002 0002             		move.w	2(a0),2(a1)
000172F2 137C 0005 0018             		move.b	#5,$18(a1)
000172F8 137C 0008 0019             		move.b	#8,$19(a1)
000172FE 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017304 D445                       		add.w	d5,d2
00017306 3342 0008                  		move.w	d2,8(a1)
0001730A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017310 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017316 1368 0022 0001             		move.b	$22(a0),1(a1)
0001731C 137C 0008 001A             		move.b	#8,$1A(a1)
00017322 234A 003C                  		move.l	a2,$3C(a1)
00017326 1344 003C                  		move.b	d4,$3C(a1)
0001732A 5804                       		addq.b	#4,d4
0001732C 2449                       		movea.l	a1,a2
0001732E                            
0001732E                            Obj78_QuitLoad:
0001732E 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017332                            
00017332 117C 0007 002A             		move.b	#7,$2A(a0)
00017338 4228 003C                  		clr.b	$3C(a0)
0001733C                            
0001733C                            Obj78_Action:				; XREF: Obj78_Index
0001733C 4A28 0022                  		tst.b	$22(a0)
00017340 6B00 0000                  		bmi.w	loc_16C96
00017344 7000                       		moveq	#0,d0
00017346 1028 0025                  		move.b	$25(a0),d0
0001734A 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001734E 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017352 1228 002B                  		move.b	$2B(a0),d1
00017356 6A00                       		bpl.s	Obj78_Display
00017358 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001735E 1028 0026                  		move.b	$26(a0),d0
00017362 0240 007F                  		andi.w	#$7F,d0
00017366 5828 0026                  		addq.b	#4,$26(a0)
0001736A 1031 0000                  		move.b	(a1,d0.w),d0
0001736E 6A00                       		bpl.s	Obj78_AniHead
00017370 08A8 0007 002B             		bclr	#7,$2B(a0)
00017376 6000                       		bra.s	Obj78_Display
00017378                            ; ===========================================================================
00017378                            
00017378                            Obj78_AniHead:
00017378 0201 0010                  		andi.b	#$10,d1
0001737C D001                       		add.b	d1,d0
0001737E 1140 001A                  		move.b	d0,$1A(a0)
00017382                            
00017382                            Obj78_Display:
00017382 3028 0008                  		move.w	8(a0),d0
00017386 0240 FF80                  		andi.w	#$FF80,d0
0001738A 3238 F700                  		move.w	($FFFFF700).w,d1
0001738E 0441 0080                  		subi.w	#$80,d1
00017392 0241 FF80                  		andi.w	#$FF80,d1
00017396 9041                       		sub.w	d1,d0
00017398 0C40 0280                  		cmpi.w	#$280,d0
0001739C 6200 0000                  		bhi.w	Obj78_ChkGone
000173A0 4EF9 0000 DE02             		jmp	DisplaySprite
000173A6                            ; ===========================================================================
000173A6                            
000173A6                            Obj78_ChkGone:
000173A6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000173AA 7000                       		moveq	#0,d0
000173AC 1028 0023                  		move.b	$23(a0),d0
000173B0 6700                       		beq.s	loc_16ABC
000173B2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000173B8                            
000173B8                            loc_16ABC:
000173B8 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000173BE 4E75                       		rts	
000173C0                            ; ===========================================================================
000173C0                            
000173C0                            Obj78_Delete:				; XREF: Obj78_Index
000173C0 4EF9 0000 DE3E             		jmp	DeleteObject
000173C6                            ; ===========================================================================
000173C6 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000173C8 0000                       		dc.w loc_16B02-Obj78_Index2
000173CA                            ; ===========================================================================
000173CA                            
000173CA                            Obj78_Move:				; XREF: Obj78_Index2
000173CA 5328 002A                  		subq.b	#1,$2A(a0)
000173CE 6B00                       		bmi.s	Obj78_Move2
000173D0 4E75                       		rts	
000173D2                            ; ===========================================================================
000173D2                            
000173D2                            Obj78_Move2:
000173D2 5428 0025                  		addq.b	#2,$25(a0)
000173D6 117C 0010 002A             		move.b	#$10,$2A(a0)
000173DC 317C FF40 0010             		move.w	#-$C0,$10(a0)
000173E2 317C 0040 0014             		move.w	#$40,$14(a0)
000173E8 0868 0004 002B             		bchg	#4,$2B(a0)
000173EE 6600                       		bne.s	loc_16AFC
000173F0 4268 0010                  		clr.w	$10(a0)
000173F4 4468 0014                  		neg.w	$14(a0)
000173F8                            
000173F8                            loc_16AFC:
000173F8 08E8 0007 002B             		bset	#7,$2B(a0)
000173FE                            
000173FE                            loc_16B02:				; XREF: Obj78_Index2
000173FE 5328 002A                  		subq.b	#1,$2A(a0)
00017402 6B00                       		bmi.s	loc_16B5E
00017404 2F28 0008                  		move.l	8(a0),-(sp)
00017408 2428 0008                  		move.l	8(a0),d2
0001740C 3028 0010                  		move.w	$10(a0),d0
00017410 0828 0000 0022             		btst	#0,$22(a0)
00017416 6700                       		beq.s	loc_16B1E
00017418 4440                       		neg.w	d0
0001741A                            
0001741A                            loc_16B1E:
0001741A 48C0                       		ext.l	d0
0001741C E180                       		asl.l	#8,d0
0001741E D480                       		add.l	d0,d2
00017420 2142 0008                  		move.l	d2,8(a0)
00017424 4EBA E2E6                  		jsr	ObjHitFloor
00017428 241F                       		move.l	(sp)+,d2
0001742A 0C41 FFF8                  		cmpi.w	#-8,d1
0001742E 6D00                       		blt.s	loc_16B70
00017430 0C41 000C                  		cmpi.w	#$C,d1
00017434 6C00                       		bge.s	loc_16B70
00017436 D368 000C                  		add.w	d1,$C(a0)
0001743A 4842                       		swap	d2
0001743C B468 0008                  		cmp.w	8(a0),d2
00017440 6700                       		beq.s	locret_16B5C
00017442 7000                       		moveq	#0,d0
00017444 1028 003C                  		move.b	$3C(a0),d0
00017448 5228 003C                  		addq.b	#1,$3C(a0)
0001744C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017452 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017456                            
00017456                            locret_16B5C:
00017456 4E75                       		rts	
00017458                            ; ===========================================================================
00017458                            
00017458                            loc_16B5E:
00017458 5528 0025                  		subq.b	#2,$25(a0)
0001745C 117C 0007 002A             		move.b	#7,$2A(a0)
00017462 317C 0000 0010             		move.w	#0,$10(a0)
00017468 4E75                       		rts	
0001746A                            ; ===========================================================================
0001746A                            
0001746A                            loc_16B70:
0001746A 2142 0008                  		move.l	d2,8(a0)
0001746E 0868 0000 0022             		bchg	#0,$22(a0)
00017474 1168 0022 0001             		move.b	$22(a0),1(a0)
0001747A 7000                       		moveq	#0,d0
0001747C 1028 003C                  		move.b	$3C(a0),d0
00017480 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017486 5228 003C                  		addq.b	#1,$3C(a0)
0001748A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017490 4E75                       		rts	
00017492                            ; ===========================================================================
00017492                            
00017492                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017492 2268 003C                  		movea.l	$3C(a0),a1
00017496 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001749C 6A00                       		bpl.s	Obj78_BodySeg1
0001749E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000174A4 1028 0026                  		move.b	$26(a0),d0
000174A8 0240 007F                  		andi.w	#$7F,d0
000174AC 5828 0026                  		addq.b	#4,$26(a0)
000174B0 4A31 0004                  		tst.b	4(a1,d0.w)
000174B4 6A00                       		bpl.s	Obj78_AniBody
000174B6 5828 0026                  		addq.b	#4,$26(a0)
000174BA                            
000174BA                            Obj78_AniBody:
000174BA 1031 0000                  		move.b	(a1,d0.w),d0
000174BE 5000                       		addq.b	#8,d0
000174C0 1140 001A                  		move.b	d0,$1A(a0)
000174C4                            
000174C4                            Obj78_BodySeg1:				; XREF: Obj78_Index
000174C4 2268 003C                  		movea.l	$3C(a0),a1
000174C8 4A28 0022                  		tst.b	$22(a0)
000174CC 6B00 0000                  		bmi.w	loc_16C90
000174D0 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000174D6 1169 0025 0025             		move.b	$25(a1),$25(a0)
000174DC 6700 0000                  		beq.w	loc_16C64
000174E0 3169 0014 0014             		move.w	$14(a1),$14(a0)
000174E6 3029 0010                  		move.w	$10(a1),d0
000174EA D069 0014                  		add.w	$14(a1),d0
000174EE 3140 0010                  		move.w	d0,$10(a0)
000174F2 2428 0008                  		move.l	8(a0),d2
000174F6 2602                       		move.l	d2,d3
000174F8 3028 0010                  		move.w	$10(a0),d0
000174FC 0828 0000 0022             		btst	#0,$22(a0)
00017502 6700                       		beq.s	loc_16C0C
00017504 4440                       		neg.w	d0
00017506                            
00017506                            loc_16C0C:
00017506 48C0                       		ext.l	d0
00017508 E180                       		asl.l	#8,d0
0001750A D480                       		add.l	d0,d2
0001750C 2142 0008                  		move.l	d2,8(a0)
00017510 4843                       		swap	d3
00017512 B668 0008                  		cmp.w	8(a0),d3
00017516 6700                       		beq.s	loc_16C64
00017518 7000                       		moveq	#0,d0
0001751A 1028 003C                  		move.b	$3C(a0),d0
0001751E 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017522 0C01 0080                  		cmpi.b	#-$80,d1
00017526 6600                       		bne.s	loc_16C50
00017528 4843                       		swap	d3
0001752A 2143 0008                  		move.l	d3,8(a0)
0001752E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017532 0868 0000 0022             		bchg	#0,$22(a0)
00017538 1168 0022 0001             		move.b	$22(a0),1(a0)
0001753E 5228 003C                  		addq.b	#1,$3C(a0)
00017542 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017548 6000                       		bra.s	loc_16C64
0001754A                            ; ===========================================================================
0001754A                            
0001754A                            loc_16C50:
0001754A 4881                       		ext.w	d1
0001754C D368 000C                  		add.w	d1,$C(a0)
00017550 5228 003C                  		addq.b	#1,$3C(a0)
00017554 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001755A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001755E                            
0001755E                            loc_16C64:
0001755E 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017564 6700                       		beq.s	loc_16C90
00017566 0C11 0027                  		cmpi.b	#$27,0(a1)
0001756A 6700                       		beq.s	loc_16C7C
0001756C 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017572 6600                       		bne.s	loc_16C82
00017574                            
00017574                            loc_16C7C:
00017574 117C 000A 0024             		move.b	#$A,$24(a0)
0001757A                            
0001757A                            loc_16C82:
0001757A 4EF9 0000 DE02             		jmp	DisplaySprite
00017580                            
00017580                            ; ===========================================================================
00017580 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017588                            ; ===========================================================================
00017588                            
00017588                            loc_16C90:
00017588 08E9 0007 0022             		bset	#7,$22(a1)
0001758E                            
0001758E                            loc_16C96:
0001758E 7000                       		moveq	#0,d0
00017590 1028 0024                  		move.b	$24(a0),d0
00017594 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017598 0828 0000 0022             		btst	#0,$22(a0)
0001759E 6700                       		beq.s	loc_16CAA
000175A0 4440                       		neg.w	d0
000175A2                            
000175A2                            loc_16CAA:
000175A2 3140 0010                  		move.w	d0,$10(a0)
000175A6 317C FC00 0012             		move.w	#-$400,$12(a0)
000175AC 117C 000C 0024             		move.b	#$C,$24(a0)
000175B2 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000175B8                            
000175B8                            loc_16CC0:				; XREF: Obj78_Index
000175B8 4EB9 0000 DDB0             		jsr	ObjectFall
000175BE 4A68 0012                  		tst.w	$12(a0)
000175C2 6B00                       		bmi.s	loc_16CE0
000175C4 4EBA E146                  		jsr	ObjHitFloor
000175C8 4A41                       		tst.w	d1
000175CA 6A00                       		bpl.s	loc_16CE0
000175CC D368 000C                  		add.w	d1,$C(a0)
000175D0 317C FC00 0012             		move.w	#-$400,$12(a0)
000175D6                            
000175D6                            loc_16CE0:
000175D6 4A28 0001                  		tst.b	1(a0)
000175DA 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000175DE 4EF9 0000 DE02             		jmp	DisplaySprite
000175E4                            ; ===========================================================================
000175E4                            Ani_obj78:
000175E4                            	include "_anim\obj78.asm"
000175E4                            ; ---------------------------------------------------------------------------
000175E4                            ; Animation script - Caterkiller enemy (uses non-standard format)
000175E4                            ; ---------------------------------------------------------------------------
000175E4 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000175F4 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017604 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017614 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017624 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017634 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017644 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017654 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017664                            	even
00017664                            	even
00017664                            
00017664                            ; ---------------------------------------------------------------------------
00017664                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017664                            ; ---------------------------------------------------------------------------
00017664                            Map_obj78:
00017664                            	include "_maps\obj78.asm"
00017664                            ; ---------------------------------------------------------------------------
00017664                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017664                            ; ---------------------------------------------------------------------------
00017664 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017668 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001766C 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017670 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017674 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017678 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
0001767C 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017680 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017684 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017688 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
0001768C 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017690 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017694 01                         byte_16D9E:	dc.b 1
00017695 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001769A 01                         byte_16DA4:	dc.b 1
0001769B F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000176A0 01                         byte_16DAA:	dc.b 1
000176A1 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000176A6 01                         byte_16DB0:	dc.b 1
000176A7 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000176AC 01                         byte_16DB6:	dc.b 1
000176AD EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000176B2 01                         byte_16DBC:	dc.b 1
000176B3 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000176B8 01                         byte_16DC2:	dc.b 1
000176B9 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000176BE 01                         byte_16DC8:	dc.b 1
000176BF EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000176C4 01                         byte_16DCE:	dc.b 1
000176C5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000176CA 01                         byte_16DD4:	dc.b 1
000176CB F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000176D0 01                         byte_16DDA:	dc.b 1
000176D1 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000176D6 01                         byte_16DE0:	dc.b 1
000176D7 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000176DC 01                         byte_16DE6:	dc.b 1
000176DD F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000176E2 01                         byte_16DEC:	dc.b 1
000176E3 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000176E8 01                         byte_16DF2:	dc.b 1
000176E9 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000176EE 01                         byte_16DF8:	dc.b 1
000176EF F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000176F4 01                         byte_16DFE:	dc.b 1
000176F5 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000176FA 01                         byte_16E04:	dc.b 1
000176FB F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017700 01                         byte_16E0A:	dc.b 1
00017701 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017706 01                         byte_16E10:	dc.b 1
00017707 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001770C 01                         byte_16E16:	dc.b 1
0001770D EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017712 01                         byte_16E1C:	dc.b 1
00017713 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017718 01                         byte_16E22:	dc.b 1
00017719 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001771E 01                         byte_16E28:	dc.b 1
0001771F EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017724                            		even
00017724                            		even
00017724                            
00017724                            ; ===========================================================================
00017724                            ; ---------------------------------------------------------------------------
00017724                            ; Object 79 - lamppost
00017724                            ; ---------------------------------------------------------------------------
00017724                            
00017724                            Obj79:					; XREF: Obj_Index
00017724 7000                       		moveq	#0,d0
00017726 1028 0024                  		move.b	$24(a0),d0
0001772A 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001772E 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017732 4EFA 8776                  		jmp	MarkObjGone
00017736                            ; ===========================================================================
00017736 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017738 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001773A 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001773C 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001773E                            ; ===========================================================================
0001773E                            
0001773E                            Obj79_Main:				; XREF: Obj79_Index
0001773E 5428 0024                  		addq.b	#2,$24(a0)
00017742 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001774A 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017750 117C 0004 0001             		move.b	#4,1(a0)
00017756 117C 0008 0019             		move.b	#8,$19(a0)
0001775C 117C 0005 0018             		move.b	#5,$18(a0)
00017762 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017766 7000                       		moveq	#0,d0
00017768 1028 0023                  		move.b	$23(a0),d0
0001776C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017772 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017778 6600                       		bne.s	Obj79_RedLamp
0001777A 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001777E 0201 007F                  		andi.b	#$7F,d1
00017782 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017786 0202 007F                  		andi.b	#$7F,d2
0001778A B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001778C 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001778E                            
0001778E                            Obj79_RedLamp:
0001778E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017794 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
0001779A 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000177A0 4E75                       		rts	
000177A2                            ; ===========================================================================
000177A2                            
000177A2                            Obj79_BlueLamp:				; XREF: Obj79_Index
000177A2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000177A6 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000177AA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000177AE 6B00 0000                  		bmi.w	locret_16F90
000177B2 1238 FE30                  		move.b	($FFFFFE30).w,d1
000177B6 0201 007F                  		andi.b	#$7F,d1
000177BA 1428 0028                  		move.b	$28(a0),d2
000177BE 0202 007F                  		andi.b	#$7F,d2
000177C2 B202                       		cmp.b	d2,d1
000177C4 6500                       		bcs.s	Obj79_HitLamp
000177C6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177CA 7000                       		moveq	#0,d0
000177CC 1028 0023                  		move.b	$23(a0),d0
000177D0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177D6 117C 0004 0024             		move.b	#4,$24(a0)
000177DC 117C 0003 001A             		move.b	#3,$1A(a0)
000177E2 6000 0000                  		bra.w	locret_16F90
000177E6                            ; ===========================================================================
000177E6                            
000177E6                            Obj79_HitLamp:
000177E6 3038 D008                  		move.w	($FFFFD008).w,d0
000177EA 9068 0008                  		sub.w	8(a0),d0
000177EE 5040                       		addq.w	#8,d0
000177F0 0C40 0010                  		cmpi.w	#$10,d0
000177F4 6400 0000                  		bcc.w	locret_16F90
000177F8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000177FC 9068 000C                  		sub.w	$C(a0),d0
00017800 0640 0040                  		addi.w	#$40,d0
00017804 0C40 0068                  		cmpi.w	#$68,d0
00017808 6400                       		bcc.s	locret_16F90
0001780A 303C 00A1                  		move.w	#$A1,d0
0001780E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017814 5428 0024                  		addq.b	#2,$24(a0)
00017818 4EB9 0000 E288             		jsr	SingleObjLoad
0001781E 6600                       		bne.s	loc_16F76
00017820 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017824 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001782A 3368 0008 0030             		move.w	8(a0),$30(a1)
00017830 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017836 0469 0018 0032             		subi.w	#$18,$32(a1)
0001783C 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017844 337C 07A0 0002             		move.w	#$7A0,2(a1)
0001784A 137C 0004 0001             		move.b	#4,1(a1)
00017850 137C 0008 0019             		move.b	#8,$19(a1)
00017856 137C 0004 0018             		move.b	#4,$18(a1)
0001785C 137C 0002 001A             		move.b	#2,$1A(a1)
00017862 337C 0020 0036             		move.w	#$20,$36(a1)
00017868                            
00017868                            loc_16F76:
00017868 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001786E 6100 0000                  		bsr.w	Obj79_StoreInfo
00017872 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017876 7000                       		moveq	#0,d0
00017878 1028 0023                  		move.b	$23(a0),d0
0001787C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017882                            
00017882                            locret_16F90:
00017882 4E75                       		rts	
00017884                            ; ===========================================================================
00017884                            
00017884                            Obj79_AfterHit:				; XREF: Obj79_Index
00017884 4E75                       		rts	
00017886                            ; ===========================================================================
00017886                            
00017886                            Obj79_Twirl:				; XREF: Obj79_Index
00017886 5368 0036                  		subq.w	#1,$36(a0)
0001788A 6A00                       		bpl.s	loc_16FA0
0001788C 117C 0004 0024             		move.b	#4,$24(a0)
00017892                            
00017892                            loc_16FA0:
00017892 1028 0026                  		move.b	$26(a0),d0
00017896 0428 0010 0026             		subi.b	#$10,$26(a0)
0001789C 0400 0040                  		subi.b	#$40,d0
000178A0 4EB9 0000 2CEC             		jsr	(CalcSine).l
000178A6 C3FC 0C00                  		muls.w	#$C00,d1
000178AA 4841                       		swap	d1
000178AC D268 0030                  		add.w	$30(a0),d1
000178B0 3141 0008                  		move.w	d1,8(a0)
000178B4 C1FC 0C00                  		muls.w	#$C00,d0
000178B8 4840                       		swap	d0
000178BA D068 0032                  		add.w	$32(a0),d0
000178BE 3140 000C                  		move.w	d0,$C(a0)
000178C2 4E75                       		rts	
000178C4                            ; ===========================================================================
000178C4                            ; ---------------------------------------------------------------------------
000178C4                            ; Subroutine to	store information when you hit a lamppost
000178C4                            ; ---------------------------------------------------------------------------
000178C4                            
000178C4                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000178C4 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000178CA 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000178D0 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000178D6 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000178DC 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000178E2 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000178E8 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000178EE 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000178F4 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000178FA 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017900 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017906 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
0001790C 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017912 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017918 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001791E 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017924 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001792A 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017930 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017936 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001793C 4E75                       		rts	
0001793E                            
0001793E                            ; ---------------------------------------------------------------------------
0001793E                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001793E                            ; ---------------------------------------------------------------------------
0001793E                            
0001793E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001793E                            
0001793E                            
0001793E                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001793E 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017944 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
0001794A 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017950 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017956 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001795C 4278 FE20                  		clr.w	($FFFFFE20).w
00017960 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017964 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
0001796A 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017970 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017974 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
0001797A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017980 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017986 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
0001798C 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017992 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017998 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001799E 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000179A4 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000179AA 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000179B0 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000179B6 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000179BC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000179C2 6600                       		bne.s	loc_170E4
000179C4 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000179CA 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000179D0 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000179D6                            
000179D6                            loc_170E4:
000179D6 4A38 FE30                  		tst.b	($FFFFFE30).w
000179DA 6A00                       		bpl.s	locret_170F6
000179DC 3038 FE32                  		move.w	($FFFFFE32).w,d0
000179E0 0440 00A0                  		subi.w	#$A0,d0
000179E4 31C0 F728                  		move.w	d0,($FFFFF728).w
000179E8                            
000179E8                            locret_170F6:
000179E8 4E75                       		rts	
000179EA                            ; End of function Obj79_LoadInfo
000179EA                            
000179EA                            ; ===========================================================================
000179EA                            ; ---------------------------------------------------------------------------
000179EA                            ; Sprite mappings - lamppost
000179EA                            ; ---------------------------------------------------------------------------
000179EA                            Map_obj79:
000179EA                            	include "_maps\obj79.asm"
000179EA                            ; ---------------------------------------------------------------------------
000179EA                            ; Sprite mappings - lamppost
000179EA                            ; ---------------------------------------------------------------------------
000179EA 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000179EE 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000179F2 06                         byte_17100:	dc.b 6
000179F3 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000179F8 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000179FD F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A02 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A07 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017A0C D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017A11 04                         byte_1711F:	dc.b 4
00017A12 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A17 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A1C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A21 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A26 02                         byte_17134:	dc.b 2
00017A27 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017A2C F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017A31 06                         byte_1713F:	dc.b 6
00017A32 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A37 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A3C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A41 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A46 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017A4B D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017A50                            		even
00017A50                            		even
00017A50                            
00017A50                            ; ===========================================================================
00017A50                            ; ---------------------------------------------------------------------------
00017A50                            ; Object 7D - hidden points at the end of a level
00017A50                            ; ---------------------------------------------------------------------------
00017A50                            
00017A50                            Obj7D:					; XREF: Obj_Index
00017A50 7000                       		moveq	#0,d0
00017A52 1028 0024                  		move.b	$24(a0),d0
00017A56 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017A5A 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017A5E                            ; ===========================================================================
00017A5E 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017A60 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017A62                            ; ===========================================================================
00017A62                            
00017A62                            Obj7D_Main:				; XREF: Obj7D_Index
00017A62 7410                       		moveq	#$10,d2
00017A64 3602                       		move.w	d2,d3
00017A66 D643                       		add.w	d3,d3
00017A68 43F8 D000                  		lea	($FFFFD000).w,a1
00017A6C 3029 0008                  		move.w	8(a1),d0
00017A70 9068 0008                  		sub.w	8(a0),d0
00017A74 D042                       		add.w	d2,d0
00017A76 B043                       		cmp.w	d3,d0
00017A78 6400                       		bcc.s	Obj7D_ChkDel
00017A7A 3229 000C                  		move.w	$C(a1),d1
00017A7E 9268 000C                  		sub.w	$C(a0),d1
00017A82 D242                       		add.w	d2,d1
00017A84 B243                       		cmp.w	d3,d1
00017A86 6400                       		bcc.s	Obj7D_ChkDel
00017A88 4A78 FE08                  		tst.w	($FFFFFE08).w
00017A8C 6600                       		bne.s	Obj7D_ChkDel
00017A8E 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017A92 6600                       		bne.s	Obj7D_ChkDel
00017A94 5428 0024                  		addq.b	#2,$24(a0)
00017A98 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017AA0 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017AA6 0028 0004 0001             		ori.b	#4,1(a0)
00017AAC 117C 0000 0018             		move.b	#0,$18(a0)
00017AB2 117C 0010 0019             		move.b	#$10,$19(a0)
00017AB8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017ABE 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017AC4 303C 00C9                  		move.w	#$C9,d0
00017AC8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bonus sound
00017ACE 7000                       		moveq	#0,d0
00017AD0 1028 0028                  		move.b	$28(a0),d0
00017AD4 D040                       		add.w	d0,d0
00017AD6 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017ADA 4EB9 0000 0000             		jsr	AddPoints
00017AE0                            
00017AE0                            Obj7D_ChkDel:
00017AE0 3028 0008                  		move.w	8(a0),d0
00017AE4 0240 FF80                  		andi.w	#$FF80,d0
00017AE8 3238 F700                  		move.w	($FFFFF700).w,d1
00017AEC 0441 0080                  		subi.w	#$80,d1
00017AF0 0241 FF80                  		andi.w	#$FF80,d1
00017AF4 9041                       		sub.w	d1,d0
00017AF6 0C40 0280                  		cmpi.w	#$280,d0
00017AFA 6200                       		bhi.s	Obj7D_Delete
00017AFC 4E75                       		rts	
00017AFE                            ; ===========================================================================
00017AFE                            
00017AFE                            Obj7D_Delete:
00017AFE 4EF9 0000 DE3E             		jmp	DeleteObject
00017B04                            ; ===========================================================================
00017B04 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017B06 03E8                       		dc.w 1000
00017B08 0064                       		dc.w 100
00017B0A 0001                       		dc.w 1
00017B0C                            ; ===========================================================================
00017B0C                            
00017B0C                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017B0C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017B10 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017B12 3028 0008                  		move.w	8(a0),d0
00017B16 0240 FF80                  		andi.w	#-$80,d0
00017B1A 3238 F700                  		move.w	($FFFFF700).w,d1
00017B1E 0441 0080                  		subi.w	#$80,d1
00017B22 0241 FF80                  		andi.w	#-$80,d1
00017B26 9041                       		sub.w	d1,d0
00017B28 0C40 0280                  		cmpi.w	#$280,d0
00017B2C 6200                       		bhi.s	Obj7D_Delete2
00017B2E 4EF9 0000 DE02             		jmp	DisplaySprite
00017B34                            ; ===========================================================================
00017B34                            
00017B34                            Obj7D_Delete2:
00017B34 4EF9 0000 DE3E             		jmp	DeleteObject
00017B3A                            ; ===========================================================================
00017B3A                            ; ---------------------------------------------------------------------------
00017B3A                            ; Sprite mappings - hidden points at the end of	a level
00017B3A                            ; ---------------------------------------------------------------------------
00017B3A                            Map_obj7D:
00017B3A                            	include "_maps\obj7D.asm"
00017B3A                            ; ---------------------------------------------------------------------------
00017B3A                            ; Sprite mappings - hidden points at the end of	a level
00017B3A                            ; ---------------------------------------------------------------------------
00017B3A 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017B3E 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017B42 00                         byte_17250:	dc.b 0
00017B43 01                         byte_17251:	dc.b 1
00017B44 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017B49 01                         byte_17257:	dc.b 1
00017B4A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017B4F 01                         byte_1725D:	dc.b 1
00017B50 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017B56 00                         		even
00017B56 00                         		even
00017B56                            
00017B56                            ; ===========================================================================
00017B56                            ; ---------------------------------------------------------------------------
00017B56                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017B56                            ; ---------------------------------------------------------------------------
00017B56                            
00017B56                            Obj8A:					; XREF: Obj_Index
00017B56 7000                       		moveq	#0,d0
00017B58 1028 0024                  		move.b	$24(a0),d0
00017B5C 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017B60 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017B64                            ; ===========================================================================
00017B64 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017B66 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017B68                            ; ===========================================================================
00017B68                            
00017B68                            Obj8A_Main:				; XREF: Obj8A_Index
00017B68 5428 0024                  		addq.b	#2,$24(a0)
00017B6C 317C 0120 0008             		move.w	#$120,8(a0)
00017B72 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017B78 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017B80 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017B86 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017B8A 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017B8E 117C 0000 0001             		move.b	#0,1(a0)
00017B94 117C 0000 0018             		move.b	#0,$18(a0)
00017B9A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017BA0 6600                       		bne.s	Obj8A_Display	; if not, branch
00017BA2 317C 00A6 0002             		move.w	#$A6,2(a0)
00017BA8 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017BAE 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017BB2 6700                       		beq.s	Obj8A_Display	; if not, branch
00017BB4 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017BBA 6600                       		bne.s	Obj8A_Display	; if not, branch
00017BBC 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017BC2 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017BC8 4EF9 0000 DE3E             		jmp	DeleteObject
00017BCE                            ; ===========================================================================
00017BCE                            
00017BCE                            Obj8A_Display:				; XREF: Obj8A_Index
00017BCE 4EF9 0000 DE02             		jmp	DisplaySprite
00017BD4                            ; ===========================================================================
00017BD4                            ; ---------------------------------------------------------------------------
00017BD4                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017BD4                            ; ---------------------------------------------------------------------------
00017BD4                            Map_obj8A:
00017BD4                            	include "_maps\obj8A.asm"
00017BD4                            Map_ca8f:
00017BD4 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017BD6 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017BD8 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017BDA 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017BDC 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017BDE 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017BE0 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017BE2 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017BE4 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017BE6 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017BE8 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017BEA 08                         Map_ca8f_16: 	dc.b $8
00017BEB CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017BF0 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017BF5 F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017BFA 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017BFF B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017C04 B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017C09 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017C0E B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017C13 10                         Map_ca8f_3F: 	dc.b $10
00017C14 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017C19 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017C1E D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017C23 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017C28 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017C2D D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017C32 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017C37 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017C3C 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017C41 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017C46 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017C4B 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017C50 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017C55 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017C5A 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017C5F 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017C64 0A                         Map_ca8f_90: 	dc.b $A
00017C65 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017C6A D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017C6F D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017C74 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017C79 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017C7E D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017C83 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017C88 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017C8D 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017C92 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017C97 18                         Map_ca8f_C3: 	dc.b $18
00017C98 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017C9D D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017CA2 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017CA7 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017CAC D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017CB1 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017CB6 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017CBB D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017CC0 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017CC5 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017CCA D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017CCF D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017CD4 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017CD9 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017CDE D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017CE3 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017CE8 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017CED 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017CF2 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017CF7 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017CFC 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017D01 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017D06 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017D0B 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017D10 14                         Map_ca8f_13C: 	dc.b $14
00017D11 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017D16 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017D1B D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017D20 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017D25 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017D2A D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017D2F 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017D34 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017D39 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017D3E 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017D43 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017D48 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017D4D 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017D52 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017D57 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017D5C 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017D61 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017D66 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017D6B 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017D70 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017D75 1A                         Map_ca8f_1A1: 	dc.b $1A
00017D76 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017D7B D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017D80 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017D85 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017D8A D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017D8F D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017D94 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017D99 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017D9E D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017DA3 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017DA8 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017DAD D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017DB2 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017DB7 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017DBC 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017DC1 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017DC6 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017DCB 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017DD0 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017DD5 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017DDA 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017DDF 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017DE4 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017DE9 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017DEE 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017DF3 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017DF8 17                         Map_ca8f_224: 	dc.b $17
00017DF9 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017DFE D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017E03 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017E08 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017E0D D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017E12 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017E17 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017E1C D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017E21 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017E26 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017E2B D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017E30 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017E35 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017E3A 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017E3F 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017E44 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017E49 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017E4E 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017E53 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017E58 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017E5D 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017E62 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017E67 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017E6C 1F                         Map_ca8f_298: 	dc.b $1F
00017E6D D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017E72 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017E77 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017E7C D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017E81 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017E86 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017E8B D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017E90 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017E95 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017E9A D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017E9F D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017EA4 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017EA9 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017EAE 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017EB3 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017EB8 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017EBD 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017EC2 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017EC7 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017ECC 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017ED1 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017ED6 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017EDB 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017EE0 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017EE5 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017EEA 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017EEF 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017EF4 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017EF9 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017EFE 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017F03 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017F08 0F                         Map_ca8f_334: 	dc.b $F
00017F09 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017F0E F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017F13 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017F18 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017F1D F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017F22 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017F27 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017F2C F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017F31 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017F36 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017F3B F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017F40 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017F45 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017F4A F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017F4F F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017F54 08                         Map_ca8f_380: 	dc.b $8
00017F55 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017F5A 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017F5F 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017F64 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017F69 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017F6E 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017F73 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017F78 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017F7D 20                         Map_ca8f_3A9: 	dc.b $20
00017F7E ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017F83 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017F88 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017F8D ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017F92 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00017F97 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00017F9C ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00017FA1 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00017FA6 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00017FAB FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00017FB0 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00017FB5 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00017FBA FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00017FBF 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00017FC4 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00017FC9 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00017FCE 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00017FD3 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00017FD8 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00017FDD 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00017FE2 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00017FE7 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00017FEC 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00017FF1 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00017FF6 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00017FFB 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00018000 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00018005 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
0001800A 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
0001800F 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00018014 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018019 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
0001801E                            	even
0001801E                            	even
0001801E                            
0001801E                            ; ===========================================================================
0001801E                            ; ---------------------------------------------------------------------------
0001801E                            ; Object 3D - matthew boss - modified by GK89
0001801E                            ; ---------------------------------------------------------------------------
0001801E                            
0001801E                            Obj3D:					; XREF: Obj_Index
0001801E 7000                       		moveq	#0,d0
00018020 1028 0024                  		move.b	$24(a0),d0
00018024 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018028 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001802C                            ; ===========================================================================
0001802C 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001802E 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018030 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018032 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018034                            
00018034 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018036 0401                       		dc.b 4,	1
00018038 0607                       		dc.b 6,	7
0001803A                            ; ===========================================================================
0001803A                            
0001803A                            Obj3D_Main:				; XREF: Obj3D_Index
0001803A 45F9 0001 8034             		lea	(Obj3D_ObjData).l,a2
00018040 2248                       		movea.l	a0,a1
00018042 7202                       		moveq	#2,d1
00018044 6000                       		bra.s	Obj3D_LoadBoss
00018046                            ; ===========================================================================
00018046                            
00018046                            Obj3D_Loop:
00018046 4EB9 0000 E29E             		jsr	SingleObjLoad2
0001804C 6600                       		bne.s	loc_17772
0001804E                            
0001804E                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001804E 135A 0024                  		move.b	(a2)+,$24(a1)
00018052 12BC 003D                  		move.b	#$3D,0(a1)
00018056 3368 0008 0008             		move.w	8(a0),8(a1)
0001805C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018062 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001806A 337C 0400 0002             		move.w	#$400,2(a1)
00018070 137C 0004 0001             		move.b	#4,1(a1)
00018076 137C 0020 0019             		move.b	#$20,$19(a1)
0001807C 137C 0003 0018             		move.b	#3,$18(a1)
00018082 135A 001C                  		move.b	(a2)+,$1C(a1)
00018086 2348 0034                  		move.l	a0,$34(a1)
0001808A 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001808E                            
0001808E                            loc_17772:
0001808E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018094 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001809A 117C 000F 0020             		move.b	#$F,$20(a0)
000180A0 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
000180A6                            
000180A6                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000180A6 7000                       		moveq	#0,d0
000180A8 1028 0025                  		move.b	$25(a0),d0
000180AC 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000180B0 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000180B4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000180BA 4EB9 0000 AEC2             		jsr	AnimateSprite
000180C0 1028 0022                  		move.b	$22(a0),d0
000180C4 0200 0003                  		andi.b	#3,d0
000180C8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000180CE 8128 0001                  		or.b	d0,1(a0)
000180D2 4EF9 0000 DE02             		jmp	DisplaySprite
000180D8                            ; ===========================================================================
000180D8 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000180DA 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000180DC 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000180DE 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000180E0 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000180E2 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000180E4 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000180E6                            ; ===========================================================================
000180E6                            
000180E6                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000180E6 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000180EC 6100 0000                  		bsr.w	BossMove
000180F0 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000180F6 6600                       		bne.s	loc_177E6
000180F8 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000180FE 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018102                            
00018102                            loc_177E6:
00018102 1028 003F                  		move.b	$3F(a0),d0
00018106 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001810C EC40                       		asr.w	#6,d0
0001810E D068 0038                  		add.w	$38(a0),d0
00018112 3140 000C                  		move.w	d0,$C(a0)
00018116 3168 0030 0008             		move.w	$30(a0),8(a0)
0001811C 5428 003F                  		addq.b	#2,$3F(a0)
00018120 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018126 6400                       		bcc.s	locret_1784A
00018128 4A28 0022                  		tst.b	$22(a0)
0001812C 6B00                       		bmi.s	loc_1784C
0001812E 4A28 0020                  		tst.b	$20(a0)
00018132 6600                       		bne.s	locret_1784A
00018134 4A28 003E                  		tst.b	$3E(a0)
00018138 6600                       		bne.s	Obj3D_ShipFlash
0001813A 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018140 303C 00AC                  		move.w	#$AC,d0
00018144 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001814A                            
0001814A                            Obj3D_ShipFlash:
0001814A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001814E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018150 4A51                       		tst.w	(a1)
00018152 6600                       		bne.s	loc_1783C
00018154 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018158                            
00018158                            loc_1783C:
00018158 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001815A 5328 003E                  		subq.b	#1,$3E(a0)
0001815E 6600                       		bne.s	locret_1784A
00018160 117C 000F 0020             		move.b	#$F,$20(a0)
00018166                            
00018166                            locret_1784A:
00018166 4E75                       		rts	
00018168                            ; ===========================================================================
00018168                            
00018168                            loc_1784C:				; XREF: loc_177E6
00018168 7064                       		moveq	#100,d0
0001816A 6100 0000                  		bsr.w	AddPoints
0001816E 117C 0008 0025             		move.b	#8,$25(a0)
00018174 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001817A 4E75                       		rts	
0001817C                            
0001817C                            ; ---------------------------------------------------------------------------
0001817C                            ; Defeated boss	subroutine
0001817C                            ; ---------------------------------------------------------------------------
0001817C                            
0001817C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001817C                            
0001817C                            
0001817C                            BossDefeated:
0001817C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018180 0200 0007                  		andi.b	#7,d0
00018184 6600                       		bne.s	locret_178A2
00018186 4EB9 0000 E288             		jsr	SingleObjLoad
0001818C 6600                       		bne.s	locret_178A2
0001818E 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018192 3368 0008 0008             		move.w	8(a0),8(a1)
00018198 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001819E 4EB9 0000 2CC6             		jsr	(RandomNumber).l
000181A4 3200                       		move.w	d0,d1
000181A6 7200                       		moveq	#0,d1
000181A8 1200                       		move.b	d0,d1
000181AA E409                       		lsr.b	#2,d1
000181AC 0441 0020                  		subi.w	#$20,d1
000181B0 D369 0008                  		add.w	d1,8(a1)
000181B4 E048                       		lsr.w	#8,d0
000181B6 E608                       		lsr.b	#3,d0
000181B8 D169 000C                  		add.w	d0,$C(a1)
000181BC                            
000181BC                            locret_178A2:
000181BC 4E75                       		rts	
000181BE                            ; End of function BossDefeated
000181BE                            
000181BE                            ; ---------------------------------------------------------------------------
000181BE                            ; Subroutine to	move a boss
000181BE                            ; ---------------------------------------------------------------------------
000181BE                            
000181BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181BE                            
000181BE                            
000181BE                            BossMove:
000181BE 2428 0030                  		move.l	$30(a0),d2
000181C2 2628 0038                  		move.l	$38(a0),d3
000181C6 3028 0010                  		move.w	$10(a0),d0
000181CA 48C0                       		ext.l	d0
000181CC E180                       		asl.l	#8,d0
000181CE D480                       		add.l	d0,d2
000181D0 3028 0012                  		move.w	$12(a0),d0
000181D4 48C0                       		ext.l	d0
000181D6 E180                       		asl.l	#8,d0
000181D8 D680                       		add.l	d0,d3
000181DA 2142 0030                  		move.l	d2,$30(a0)
000181DE 2143 0038                  		move.l	d3,$38(a0)
000181E2 4E75                       		rts	
000181E4                            ; End of function BossMove
000181E4                            
000181E4                            ; ===========================================================================
000181E4                            
000181E4                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000181E4 6100 FFD8                  		bsr.w	BossMove
000181E8 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000181EE 6600                       		bne.s	loc_17916
000181F0 317C 0000 0010             		move.w	#0,$10(a0)
000181F6 317C 0000 0012             		move.w	#0,$12(a0)
000181FC 5428 0025                  		addq.b	#2,$25(a0)
00018200 4EB9 0000 E29E             		jsr	SingleObjLoad2
00018206 6600                       		bne.s	loc_17910
00018208 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001820C 3368 0030 0008             		move.w	$30(a0),8(a1)
00018212 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018218 2348 0034                  		move.l	a0,$34(a1)
0001821C                            
0001821C                            loc_17910:
0001821C 317C 0077 003C             		move.w	#$77,$3C(a0)
00018222                            
00018222                            loc_17916:
00018222 6000 FEDE                  		bra.w	loc_177E6
00018226                            ; ===========================================================================
00018226                            
00018226                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018226 5368 003C                  		subq.w	#1,$3C(a0)
0001822A 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018230 5428 0025                  		addq.b	#2,$25(a0)
00018234 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001823A 3038 D008                  		move.w	($FFFFD008).w,d0	 
0001823E 9068 0008                  		sub.w	8(a0),d0		 
00018242 6A00                       		bpl.s	Obj3D_left			 
00018244 08A8 0000 0022             		bclr	#0,$22(a0)		 
0001824A 6000                       		bra.s	Obj3D_right		 
0001824C 08A8 0005 0022             		bclr	#5,$22(a0)
00018252 4EB9 0000 0000              		jsr     loc_17950
00018258 4E75                       		rts
0001825A                            ; ===========================================================================
0001825A                            
0001825A                            Obj3D_right:
0001825A 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018260 4E75                       		Rts
00018262                            
00018262                            Obj3D_left:
00018262 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018268 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
0001826E 6600                       		bne.s	RTSboss  	; if not, branch
00018270 0868 0000 0022              		bchg	#0,$22(a0)
00018276                            
00018276                            RTSboss:	    
00018276 4E75                       		rts
00018278                             ; ===========================================================================
00018278                            
00018278                            Obj3D_UpStuff:
00018278 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
0001827C 9068 000C                  		sub.w	$C(a0),d0		 
00018280 6A00                       		bpl.s	Obj3D_down			 
00018282 6000                        		bra.s	Obj3D_up		 
00018284 08A8 0005 0022             		bclr	#5,$22(a0)
0001828A                             
0001828A                            Obj3D_up:		
0001828A 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018290 4E75                        	    rts
00018292                            
00018292                            Obj3D_down:
00018292 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018298                            
00018298                            loc_17950:
00018298 6000 FE68                  		bra.w	loc_177E6
0001829C                            ; ===========================================================================
0001829C                            
0001829C                            loc_17954:				; XREF: Obj3D_ShipIndex
0001829C 5368 003C                  		subq.w	#1,$3C(a0)
000182A0 6B00                       		bmi.s	loc_17960
000182A2 6100 FF1A                  		bsr.w	BossMove
000182A6 6000                       		bra.s	loc_17976
000182A8                            ; ===========================================================================
000182A8                            
000182A8                            loc_17960:
000182A8 0868 0000 0022             		bchg	#0,$22(a0)
000182AE 317C 003F 003C             		move.w	#$3F,$3C(a0)
000182B4 5528 0025                  		subq.b	#2,$25(a0)
000182B8 317C 0000 0010             		move.w	#0,$10(a0)
000182BE                            
000182BE                            loc_17976:
000182BE 6000 FE42                  		bra.w	loc_177E6
000182C2                            ; ===========================================================================
000182C2                            
000182C2                            loc_1797A:				; XREF: Obj3D_ShipIndex
000182C2 5368 003C                  		subq.w	#1,$3C(a0)
000182C6 6B00                       		bmi.s	loc_17984
000182C8 6000 FEB2                  		bra.w	BossDefeated
000182CC                            ; ===========================================================================
000182CC                            
000182CC                            loc_17984:
000182CC 08E8 0000 0022             		bset	#0,$22(a0)
000182D2 08A8 0007 0022             		bclr	#7,$22(a0)
000182D8 4268 0010                  		clr.w	$10(a0)
000182DC 5428 0025                  		addq.b	#2,$25(a0)
000182E0 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000182E6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000182EA 6600                       		bne.s	locret_179AA
000182EC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000182F2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000182F8 6000 FE82                  		bra.w	BossDefeated
000182FC                            
000182FC                            locret_179AA:
000182FC 4E75                       		rts	
000182FE                            ; ===========================================================================
000182FE                            
000182FE                            loc_179AC:				; XREF: Obj3D_ShipIndex
000182FE 4EB9 0000 DDB0             		jsr ObjectFall		
00018304 5268 003C                  		addq.w	#1,$3C(a0)
00018308 6700                       		beq.s	loc_179BC
0001830A 6A00                       		bpl.s	loc_179C2
0001830C 6000                       		bra.s	loc_179EE
0001830E                            ; ===========================================================================
0001830E                            
0001830E                            loc_179BC:
0001830E 4268 0012                  		clr.w	$12(a0)
00018312 6000                       		bra.s	loc_179EE
00018314                            ; ===========================================================================
00018314                            
00018314                            loc_179C2:
00018314 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001831A 6500                       		bcs.s	loc_179DA
0001831C 6700                       		beq.s	loc_179E0
0001831E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018324 6500                       		bcs.s	loc_179EE
00018326 5428 0025                  		addq.b	#2,$25(a0)
0001832A 6000                       		bra.s	loc_179EE
0001832C                            ; ===========================================================================
0001832C                            
0001832C                            loc_179DA:
0001832C 5168 0012                  		subq.w	#8,$12(a0)
00018330 6000                       		bra.s	loc_179EE
00018332 6000 FE48                  		bra.w	BossDefeated
00018336                            ; ===========================================================================
00018336                            
00018336                            loc_179E0:
00018336 4268 0012                  		clr.w	$12(a0)
0001833A 303C 0081                  		move.w	#$81,d0
0001833E 4EB9 0000 15BA             		jsr	(PlaySound).l	; play GHZ music
00018344                            
00018344                            loc_179EE:
00018344 6100 FE78                  		bsr.w	BossMove
00018348 6000 FDB8                  		bra.w	loc_177E6
0001834C                            ; ===========================================================================
0001834C                            
0001834C                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001834C 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018352 6700                       		beq.s	loc_17A10
00018354 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018358 6000                       		bra.s	loc_17A16
0001835A                            ; ===========================================================================
0001835A                            
0001835A                            loc_17A10:
0001835A 4A28 0001                  		tst.b	1(a0)
0001835E 6A00                       		bpl.s	Obj3D_ShipDel
00018360                            
00018360                            loc_17A16:
00018360 6100 FE5C                  		bsr.w	BossMove
00018364 6000 FD9C                  		bra.w	loc_177E6
00018368                            ; ===========================================================================
00018368                            
00018368                            Obj3D_ShipDel:
00018368 4EF9 0000 DE3E             		jmp	DeleteObject
0001836E                            ; ===========================================================================
0001836E                            
0001836E                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001836E 7000                       		moveq	#0,d0
00018370 7201                       		moveq	#1,d1
00018372 2268 0034                  		movea.l	$34(a0),a1
00018376 1029 0025                  		move.b	$25(a1),d0
0001837A 5900                       		subq.b	#4,d0
0001837C 6600                       		bne.s	loc_17A3E
0001837E 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018384 6600                       		bne.s	loc_17A46
00018386 7204                       		moveq	#4,d1
00018388                            
00018388                            loc_17A3E:
00018388 5D00                       		subq.b	#6,d0
0001838A 6B00                       		bmi.s	loc_17A46
0001838C 720A                       		moveq	#$A,d1
0001838E 6000                       		bra.s	loc_17A5A
00018390                            ; ===========================================================================
00018390                            
00018390                            loc_17A46:
00018390 4A29 0020                  		tst.b	$20(a1)
00018394 6600                       		bne.s	loc_17A50
00018396 7205                       		moveq	#5,d1
00018398 6000                       		bra.s	loc_17A5A
0001839A                            ; ===========================================================================
0001839A                            
0001839A                            loc_17A50:
0001839A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000183A0 6500                       		bcs.s	loc_17A5A
000183A2 7204                       		moveq	#4,d1
000183A4                            
000183A4                            loc_17A5A:
000183A4 1141 001C                  		move.b	d1,$1C(a0)
000183A8 5500                       		subq.b	#2,d0
000183AA 6600                       		bne.s	Obj3D_FaceDisp
000183AC 117C 0006 001C             		move.b	#6,$1C(a0)
000183B2 4A28 0001                  		tst.b	1(a0)
000183B6 6A00                       		bpl.s	Obj3D_FaceDel
000183B8                            
000183B8                            Obj3D_FaceDisp:
000183B8 6000                       		bra.s	Obj3D_Display
000183BA                            ; ===========================================================================
000183BA                            
000183BA                            Obj3D_FaceDel:
000183BA 4EF9 0000 DE3E             		jmp	DeleteObject
000183C0                            ; ===========================================================================
000183C0                            
000183C0                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000183C0 117C 0007 001C             		move.b	#7,$1C(a0)
000183C6 2268 0034                  		movea.l	$34(a0),a1
000183CA 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000183D0 6600                       		bne.s	loc_17A96
000183D2 117C 000B 001C             		move.b	#$B,$1C(a0)
000183D8 4A28 0001                  		tst.b	1(a0)
000183DC 6A00                       		bpl.s	Obj3D_FlameDel
000183DE 6000                       		bra.s	Obj3D_FlameDisp
000183E0                            ; ===========================================================================
000183E0                            
000183E0                            loc_17A96:
000183E0 3029 0010                  		move.w	$10(a1),d0
000183E4 6700                       		beq.s	Obj3D_FlameDisp
000183E6 117C 0008 001C             		move.b	#8,$1C(a0)
000183EC                            
000183EC                            Obj3D_FlameDisp:
000183EC 6000                       		bra.s	Obj3D_Display
000183EE                            ; ===========================================================================
000183EE                            
000183EE                            Obj3D_FlameDel:
000183EE 4EF9 0000 DE3E             		jmp	DeleteObject
000183F4                            ; ===========================================================================
000183F4                            
000183F4                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000183F4 2268 0034                  		movea.l	$34(a0),a1
000183F8 3169 0008 0008             		move.w	8(a1),8(a0)
000183FE 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018404 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001840A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018410 4EB9 0000 AEC2             		jsr	AnimateSprite
00018416 1028 0022                  		move.b	$22(a0),d0
0001841A 0200 0003                  		andi.b	#3,d0
0001841E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018424 8128 0001                  		or.b	d0,1(a0)
00018428 4EF9 0000 DE02             		jmp	DisplaySprite
0001842E                            ; ===========================================================================
0001842E                            ; ---------------------------------------------------------------------------
0001842E                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001842E                            ; ---------------------------------------------------------------------------
0001842E                            
0001842E                            Obj48:					; XREF: Obj_Index
0001842E 7000                       		moveq	#0,d0
00018430 1028 0024                  		move.b	$24(a0),d0
00018434 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018438 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001843C                            ; ===========================================================================
0001843C 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001843E 0000                       		dc.w Obj48_Base-Obj48_Index
00018440 0000                       		dc.w Obj48_Display2-Obj48_Index
00018442 0000                       		dc.w loc_17C68-Obj48_Index
00018444 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018446                            ; ===========================================================================
00018446                            
00018446                            Obj48_Main:				; XREF: Obj48_Index
00018446 5428 0024                  		addq.b	#2,$24(a0)
0001844A 317C 4080 0026             		move.w	#$4080,$26(a0)
00018450 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018456 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001845E 317C 046C 0002             		move.w	#$46C,2(a0)
00018464 45E8 0028                  		lea	$28(a0),a2
00018468 14FC 0000                  		move.b	#0,(a2)+
0001846C 7205                       		moveq	#5,d1
0001846E 2248                       		movea.l	a0,a1
00018470 6000                       		bra.s	loc_17B60
00018472                            ; ===========================================================================
00018472                            
00018472                            Obj48_MakeLinks:
00018472 4EB9 0000 E29E             		jsr	SingleObjLoad2
00018478 6600                       		bne.s	Obj48_MakeBall
0001847A 3368 0008 0008             		move.w	8(a0),8(a1)
00018480 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018486 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001848A 137C 0006 0024             		move.b	#6,$24(a1)
00018490 237C 0000 827A 0004        		move.l	#Map_obj15,4(a1)
00018498 337C 0380 0002             		move.w	#$380,2(a1)
0001849E 137C 0001 001A             		move.b	#1,$1A(a1)
000184A4 5228 0028                  		addq.b	#1,$28(a0)
000184A8                            
000184A8                            loc_17B60:				; XREF: Obj48_Main
000184A8 3A09                       		move.w	a1,d5
000184AA 0445 D000                  		subi.w	#$D000,d5
000184AE EC4D                       		lsr.w	#6,d5
000184B0 0245 007F                  		andi.w	#$7F,d5
000184B4 14C5                       		move.b	d5,(a2)+
000184B6 137C 0004 0001             		move.b	#4,1(a1)
000184BC 137C 0008 0019             		move.b	#8,$19(a1)
000184C2 137C 0006 0018             		move.b	#6,$18(a1)
000184C8 2368 0034 0034             		move.l	$34(a0),$34(a1)
000184CE 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000184D2                            
000184D2                            Obj48_MakeBall:
000184D2 137C 0008 0024             		move.b	#8,$24(a1)
000184D8 237C 0000 886A 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000184E0 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000184E6 137C 0001 001A             		move.b	#1,$1A(a1)
000184EC 137C 0005 0018             		move.b	#5,$18(a1)
000184F2 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000184F8 4E75                       		rts	
000184FA                            ; ===========================================================================
000184FA                            
000184FA 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018500                            
00018500                            ; ===========================================================================
00018500                            
00018500                            Obj48_Base:				; XREF: Obj48_Index
00018500 47F9 0001 84FA             		lea	(Obj48_PosData).l,a3
00018506 45E8 0028                  		lea	$28(a0),a2
0001850A 7C00                       		moveq	#0,d6
0001850C 1C1A                       		move.b	(a2)+,d6
0001850E                            
0001850E                            loc_17BC6:
0001850E 7800                       		moveq	#0,d4
00018510 181A                       		move.b	(a2)+,d4
00018512 ED4C                       		lsl.w	#6,d4
00018514 0684 00FF D000             		addi.l	#$FFD000,d4
0001851A 2244                       		movea.l	d4,a1
0001851C 101B                       		move.b	(a3)+,d0
0001851E B029 003C                  		cmp.b	$3C(a1),d0
00018522 6700                       		beq.s	loc_17BE0
00018524 5229 003C                  		addq.b	#1,$3C(a1)
00018528                            
00018528                            loc_17BE0:
00018528 51CE FFE4                  		dbf	d6,loc_17BC6
0001852C                            
0001852C B029 003C                  		cmp.b	$3C(a1),d0
00018530 6600                       		bne.s	loc_17BFA
00018532 2268 0034                  		movea.l	$34(a0),a1
00018536 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001853C 6600                       		bne.s	loc_17BFA
0001853E 5428 0024                  		addq.b	#2,$24(a0)
00018542                            
00018542                            loc_17BFA:
00018542 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018548 6700                       		beq.s	Obj48_Display
0001854A 5268 0032                  		addq.w	#1,$32(a0)
0001854E                            
0001854E                            Obj48_Display:
0001854E 6100 0000                  		bsr.w	sub_17C2A
00018552 1028 0026                  		move.b	$26(a0),d0
00018556 4EB9 0000 81EC             		jsr	(Obj15_Move2).l
0001855C 4EF9 0000 DE02             		jmp	DisplaySprite
00018562                            ; ===========================================================================
00018562                            
00018562                            Obj48_Display2:				; XREF: Obj48_Index
00018562 6100 0000                  		bsr.w	sub_17C2A
00018566 4EB9 0000 81AC             		jsr	(Obj48_Move).l
0001856C 4EF9 0000 DE02             		jmp	DisplaySprite
00018572                            
00018572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018572                            
00018572                            
00018572                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018572 2268 0034                  		movea.l	$34(a0),a1
00018576 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001857C 6400                       		bcc.s	loc_17C3C
0001857E 0868 0000 001A             		bchg	#0,$1A(a0)
00018584                            
00018584                            loc_17C3C:
00018584 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001858A 3029 000C                  		move.w	$C(a1),d0
0001858E D068 0032                  		add.w	$32(a0),d0
00018592 3140 0038                  		move.w	d0,$38(a0)
00018596 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001859C 4A29 0022                  		tst.b	$22(a1)
000185A0 6A00                       		bpl.s	locret_17C66
000185A2 10BC 003F                  		move.b	#$3F,0(a0)
000185A6 117C 0000 0024             		move.b	#0,$24(a0)
000185AC                            
000185AC                            locret_17C66:
000185AC 4E75                       		rts	
000185AE                            ; End of function sub_17C2A
000185AE                            
000185AE                            ; ===========================================================================
000185AE                            
000185AE                            loc_17C68:				; XREF: Obj48_Index
000185AE 2268 0034                  		movea.l	$34(a0),a1
000185B2 4A29 0022                  		tst.b	$22(a1)
000185B6 6A00                       		bpl.s	Obj48_Display3
000185B8 10BC 003F                  		move.b	#$3F,0(a0)
000185BC 117C 0000 0024             		move.b	#0,$24(a0)
000185C2                            
000185C2                            Obj48_Display3:
000185C2 4EF9 0000 DE02             		jmp	DisplaySprite
000185C8                            ; ===========================================================================
000185C8                            
000185C8                            Obj48_ChkVanish:			; XREF: Obj48_Index
000185C8 7000                       		moveq	#0,d0
000185CA 4A28 001A                  		tst.b	$1A(a0)
000185CE 6600                       		bne.s	Obj48_Vanish
000185D0 5200                       		addq.b	#1,d0
000185D2                            
000185D2                            Obj48_Vanish:
000185D2 1140 001A                  		move.b	d0,$1A(a0)
000185D6 2268 0034                  		movea.l	$34(a0),a1
000185DA 4A29 0022                  		tst.b	$22(a1)
000185DE 6A00                       		bpl.s	Obj48_Display4
000185E0 117C 0000 0020             		move.b	#0,$20(a0)
000185E6 6100 FB94                  		bsr.w	BossDefeated
000185EA 5328 003C                  		subq.b	#1,$3C(a0)
000185EE 6A00                       		bpl.s	Obj48_Display4
000185F0 10BC 003F                  		move.b	#$3F,(a0)
000185F4 117C 0000 0024             		move.b	#0,$24(a0)
000185FA                            
000185FA                            Obj48_Display4:
000185FA 4EF9 0000 DE02             		jmp	DisplaySprite
00018600                            ; ===========================================================================
00018600                            Ani_Eggman:
00018600                            	include "_anim\Eggman.asm"
00018600                            ; ---------------------------------------------------------------------------
00018600                            ; Animation script - Eggman (bosses)
00018600                            ; ---------------------------------------------------------------------------
00018600 0000                       		dc.w byte_17CD4-Ani_Eggman
00018602 0000                       		dc.w byte_17CD8-Ani_Eggman
00018604 0000                       		dc.w byte_17CDC-Ani_Eggman
00018606 0000                       		dc.w byte_17CE0-Ani_Eggman
00018608 0000                       		dc.w byte_17CE4-Ani_Eggman
0001860A 0000                       		dc.w byte_17CE8-Ani_Eggman
0001860C 0000                       		dc.w byte_17CEC-Ani_Eggman
0001860E 0000                       		dc.w byte_17CF0-Ani_Eggman
00018610 0000                       		dc.w byte_17CF4-Ani_Eggman
00018612 0000                       		dc.w byte_17CF8-Ani_Eggman
00018614 0000                       		dc.w byte_17CFC-Ani_Eggman
00018616 0000                       		dc.w byte_17D00-Ani_Eggman
00018618 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001861C 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018620 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018624 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018628 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001862C 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018630 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018634 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018638 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001863C 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018640 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018644 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018650                            		even
00018650                            		even
00018650                            Ani_TetoB:
00018650                            	include "_anim\TetoB.asm"
00018650                            ; ---------------------------------------------------------------------------
00018650                            ; Animation script - Eggman (bosses)
00018650                            ; ---------------------------------------------------------------------------
00018650 0000                       		dc.w spin-Ani_TetoB
00018652 0000                       		dc.w static-Ani_TetoB
00018654 0000                       		dc.w static2-Ani_TetoB
00018656 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
0001865D 0500 FF                    static:	dc.b 5,	0, $FF
00018660 0501 FF                    static2:	dc.b 5,	1, $FF
00018664 00                         		even
00018664 00                         		even
00018664                            ; ---------------------------------------------------------------------------
00018664                            ; Sprite mappings - Eggman (boss levels)
00018664                            ; ---------------------------------------------------------------------------
00018664                            Map_Eggman:
00018664                            	include "_maps\Eggman.asm"
00018664                            Map_dc7e:
00018664 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018666 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018668 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
0001866A 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
0001866C 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
0001866E 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018670 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018672 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018674 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018676 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018678 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
0001867A 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
0001867C 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
0001867E 06                         Map_dc7e_1A: 	dc.b $6
0001867F EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018684 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018689 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
0001868E FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018693 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018698 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
0001869D 02                         Map_dc7e_39: 	dc.b $2
0001869E E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000186A3 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
000186A8 02                         Map_dc7e_44: 	dc.b $2
000186A9 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000186AE EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000186B3 03                         Map_dc7e_4F: 	dc.b $3
000186B4 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000186B9 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000186BE EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000186C3 03                         Map_dc7e_5F: 	dc.b $3
000186C4 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000186C9 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000186CE EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000186D3 03                         Map_dc7e_6F: 	dc.b $3
000186D4 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000186D9 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000186DE EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000186E3 03                         Map_dc7e_7F: 	dc.b $3
000186E4 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000186E9 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000186EE EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000186F3 04                         Map_dc7e_8F: 	dc.b $4
000186F4 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000186F9 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000186FE EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018703 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018708 01                         Map_dc7e_A4: 	dc.b $1
00018709 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
0001870E 01                         Map_dc7e_AA: 	dc.b $1
0001870F 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018714 00                         Map_dc7e_B0: 	dc.b $0
00018715 02                         Map_dc7e_B1: 	dc.b $2
00018716 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
0001871B 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018720 02                         Map_dc7e_BC: 	dc.b $2
00018721 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018726 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
0001872C 00                         	even
0001872C 00                         	even
0001872C                            
0001872C                            ; ---------------------------------------------------------------------------
0001872C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001872C                            ; ---------------------------------------------------------------------------
0001872C                            Map_BossItems:
0001872C                            	include "_maps\Boss items.asm"
0001872C                            ; ---------------------------------------------------------------------------
0001872C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001872C                            ; ---------------------------------------------------------------------------
0001872C 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018730 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018734 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018738 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001873C 01                         byte_17DE4:	dc.b 1
0001873D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018742 02                         byte_17DEA:	dc.b 2
00018743 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018748 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001874D 00                         		dc.b 0
0001874E 01                         byte_17DF6:	dc.b 1
0001874F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018754 01                         byte_17DFC:	dc.b 1
00018755 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001875A 01                         byte_17E02:	dc.b 1
0001875B 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018760 04                         byte_17E08:	dc.b 4
00018761 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018766 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001876B F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018770 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018775 00                         		dc.b 0
00018776 02                         byte_17E1E:	dc.b 2
00018777 0005 0017 00               		dc.b 0,	5, 0, $17, 0
0001877C 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018781 00                         		dc.b 0
00018782 02                         byte_17E2A:	dc.b 2
00018783 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018788 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001878E 00                         		even
0001878E 00                         		even
0001878E                            
0001878E                            ; ===========================================================================
0001878E                            ; ---------------------------------------------------------------------------
0001878E                            ; Object 77 - Fatass teto boss fight in LZ -STDH
0001878E                            ; ---------------------------------------------------------------------------
0001878E                            
0001878E                            
0001878E                            obj77:					; XREF: Obj_Index
0001878E 7000                       		moveq	#0,d0
00018790 1028 0024                  		move.b	$24(a0),d0
00018794 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018798 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
0001879C                            ; ===========================================================================
0001879C 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
0001879E 0000                       		dc.w obj77_ShipMain-obj77_Index
000187A0 0000                       		dc.w obj77_FaceMain-obj77_Index
000187A2 0000                       		dc.w obj77_FlameMain-obj77_Index
000187A4                            
000187A4 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
000187A6 0401                       		dc.b 4,	1
000187A8 0607                       		dc.b 6,	7
000187AA                            ; ===========================================================================
000187AA                            
000187AA                            obj77_Main:				; XREF: obj77_Index
000187AA 45F9 0001 87A4             		lea	(obj77_ObjData).l,a2
000187B0 2248                       		movea.l	a0,a1
000187B2 7202                       		moveq	#2,d1
000187B4 6000                       		bra.s	obj77_LoadBoss
000187B6                            ; ===========================================================================
000187B6                            
000187B6                            obj77_Loop:
000187B6 4EB9 0000 E29E             		jsr	SingleObjLoad2
000187BC 6600                       		bne.s	loc2_17772
000187BE                            
000187BE                            obj77_LoadBoss:				; XREF: obj77_Main
000187BE 135A 0024                  		move.b	(a2)+,$24(a1)
000187C2 12BC 0077                  		move.b	#$77,0(a1)
000187C6 3368 0008 0008             		move.w	8(a0),8(a1)
000187CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000187D2 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000187DA 337C 0400 0002             		move.w	#$400,2(a1)
000187E0 137C 0004 0001             		move.b	#4,1(a1)
000187E6 137C 0020 0019             		move.b	#$20,$19(a1)
000187EC 137C 0003 0018             		move.b	#3,$18(a1)
000187F2 135A 001C                  		move.b	(a2)+,$1C(a1)
000187F6 2348 0034                  		move.l	a0,$34(a1)
000187FA 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
000187FE                            
000187FE                            loc2_17772:
000187FE 3168 0008 0030             		move.w	8(a0),$30(a0)
00018804 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001880A 117C 000F 0020             		move.b	#$F,$20(a0)
00018810 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018816                            
00018816                            obj77_ShipMain:				; XREF: obj77_Index
00018816 7000                       		moveq	#0,d0
00018818 1028 0025                  		move.b	$25(a0),d0
0001881C 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018820 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018824 43F9 0001 8650             		lea	(Ani_TetoB).l,a1
0001882A 4EB9 0000 AEC2             		jsr	AnimateSprite
00018830 1028 0022                  		move.b	$22(a0),d0
00018834 0200 0003                  		andi.b	#3,d0
00018838 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001883E 8128 0001                  		or.b	d0,1(a0)
00018842 4EF9 0000 DE02             		jmp	DisplaySprite
00018848                            ; ===========================================================================
00018848 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
0001884A 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
0001884C 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
0001884E 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018850 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018852 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018854 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018856 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018858                            ; ===========================================================================
00018858                            
00018858                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018858                            	;	move.w	#$100,$12(a0)	; move ship down
00018858 6100 F964                  		bsr.w	BossMove
0001885C 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018862 6600                       		bne.s	loc2_177E6
00018864 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001886A 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001886E                            
0001886E                            loc2_177E6:
0001886E                            ;		move.b	$3F(a0),d0
0001886E                            ;		jsr	(CalcSine).l
0001886E EC40                       		asr.w	#6,d0
00018870 D068 0038                  		add.w	$38(a0),d0
00018874 3140 000C                  		move.w	d0,$C(a0)
00018878 3168 0030 0008             		move.w	$30(a0),8(a0)
0001887E 5428 003F                  		addq.b	#2,$3F(a0)
00018882 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018888 6400                       		bcc.s	locret_1784A2
0001888A 4A28 0022                  		tst.b	$22(a0)
0001888E 6B00                       		bmi.s	loc2_1784C
00018890 4A28 0020                  		tst.b	$20(a0)
00018894 6600                       		bne.s	locret_1784A2
00018896 4A28 003E                  		tst.b	$3E(a0)
0001889A 6600                       		bne.s	obj77_ShipFlash
0001889C 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
000188A2 303C 00AC                  		move.w	#$AC,d0
000188A6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
000188AC                            
000188AC                            obj77_ShipFlash:
000188AC 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000188B0 7000                       		moveq	#0,d0		; move 0 (black) to d0
000188B2 4A51                       		tst.w	(a1)
000188B4 6600                       		bne.s	loc2_1783C
000188B6 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000188BA                            
000188BA                            loc2_1783C:
000188BA 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000188BC 5328 003E                  		subq.b	#1,$3E(a0)
000188C0 6600                       		bne.s	locret_1784A2
000188C2 117C 000F 0020             		move.b	#$F,$20(a0)
000188C8                            
000188C8                            locret_1784A2:
000188C8 4E75                       		rts	
000188CA                            ; ===========================================================================
000188CA                            
000188CA                            loc2_1784C:				; XREF: loc2_177E6
000188CA 7064                       		moveq	#100,d0
000188CC 6100 0000                  		bsr.w	AddPoints
000188D0 117C 000A 0025             		move.b	#$A,$25(a0)
000188D6 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000188DC 4E75                       		rts	
000188DE                            ; ===========================================================================
000188DE                            
000188DE                            obj77_MakeBall:				; XREF: obj77_ShipIndex
000188DE 317C FF00 0010             		move.w	#-$100,$10(a0)
000188E4 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
000188EA 6100 F8D2                  		bsr.w	BossMove
000188EE 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
000188F4 6600                       		bne.s	loc2_17916
000188F6 317C 0000 0010             		move.w	#0,$10(a0)
000188FC 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018902 317C 0000 0012             		move.w	#0,$12(a0)
00018908 5428 0025                  		addq.b	#2,$25(a0)
0001890C                            
0001890C                            loc2_17910:
0001890C 317C 0077 003C             		move.w	#$77,$3C(a0)
00018912                            
00018912                            loc2_17916:
00018912 6000 FF5A                  		bra.w	loc2_177E6
00018916                            ; ===========================================================================
00018916                            
00018916                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018916 6100 F8A6                  		bsr.w	BossMove
0001891A 5368 003C                  		subq.w	#1,$3C(a0)
0001891E 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018920 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018926 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
0001892C 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018932 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018938 6600                       		bne.s	loc2_17950 ; if not branch
0001893A                            
0001893A                            fatass_attack:
0001893A 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018940 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018946 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
0001894C 6600                       		bne.s	loc2_17950    ; if not you know the drill
0001894E 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018952 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018958                            
00018958                            loc2_17950:
00018958 6000 FF14                  		bra.w	loc2_177E6
0001895C                            ; ===========================================================================
0001895C                            
0001895C                            loc2_17954:				; XREF: obj77_ShipIndex
0001895C 6100 F860                  		bsr.w	BossMove
00018960 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018966                            		; i suck at programming
00018966 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
0001896C 6600                       		bne.s	loc2_17976    ; if not blah blah
0001896E 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018974 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018978 303C 00B9                  		move.w	#$B9,d0
0001897C 4EB9 0000 15BA             		jsr	(PlaySound).l	; play the earthquake sound
00018982                            
00018982                            Peartobombs:	
00018982 4EB9 0000 E29E                		jsr	SingleObjLoad2
00018988 6600                       		bne.s	secondone
0001898A 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
0001898E 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018994 337C 0670 000C             		move.w	#$670,$C(a1)
0001899A                            secondone:		
0001899A 4EB9 0000 E29E                		jsr	SingleObjLoad2
000189A0 6600                       		bne.s	loc2_17976		
000189A2 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
000189A6 337C 1D20 0008             		move.w	#$1D20,8(a1)
000189AC 337C 0670 000C             		move.w	#$670,$C(a1)
000189B2                            lastone:
000189B2 4EB9 0000 E29E                		jsr	SingleObjLoad2
000189B8 6600                       		bne.s	loc2_17976		
000189BA 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
000189BE 337C 1E00 0008             		move.w	#$1E00,8(a1)
000189C4 337C 0670 000C             		move.w	#$670,$C(a1)
000189CA                            		
000189CA                            loc2_17976:
000189CA 6000 FEA2                  		bra.w	loc2_177E6
000189CE                            		
000189CE                            ; ===========================================================================
000189CE                            Fatassruns:
000189CE 6100 F7EE                   		bsr.w	BossMove
000189D2 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
000189D8 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
000189DE 6600                       		bne.s	processstuff ; is not go here
000189E0 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
000189E6 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
000189EC 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
000189F0 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
000189F6 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
000189FC                            		
000189FC                            		
000189FC                            processstuff:
000189FC 6000 FE70                  		bra.w	loc2_177E6
00018A00                            ; ===========================================================================
00018A00                            
00018A00                            loc2_1797A:				; XREF: obj77_ShipIndex
00018A00 5368 003C                  		subq.w	#1,$3C(a0)
00018A04 6B00                       		bmi.s	loc2_17984
00018A06 6000 F774                  		bra.w	BossDefeated
00018A0A                            ; ===========================================================================
00018A0A                            
00018A0A                            loc2_17984:
00018A0A 08E8 0000 0022             		bset	#0,$22(a0)
00018A10 08A8 0007 0022             		bclr	#7,$22(a0)
00018A16 4268 0010                  		clr.w	$10(a0)
00018A1A 5428 0025                  		addq.b	#2,$25(a0)
00018A1E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018A24 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018A28 6600                       		bne.s	locret_179AA2
00018A2A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018A30                            
00018A30                            locret_179AA2:
00018A30 4E75                       		rts	
00018A32                            ; ===========================================================================
00018A32                            
00018A32                            loc2_179AC:				; XREF: obj77_ShipIndex
00018A32 5268 003C                  		addq.w	#1,$3C(a0)
00018A36 6700                       		beq.s	loc2_179BC
00018A38 6A00                       		bpl.s	loc2_179C2
00018A3A 0668 0018 0012             		addi.w	#$18,$12(a0)
00018A40 6000                       		bra.s	loc2_179EE
00018A42                            ; ===========================================================================
00018A42                            
00018A42                            loc2_179BC:
00018A42 4268 0012                  		clr.w	$12(a0)
00018A46 6000                       		bra.s	loc2_179EE
00018A48                            ; ===========================================================================
00018A48                            
00018A48                            loc2_179C2:
00018A48 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018A4E 6500                       		bcs.s	loc2_179DA
00018A50 6700                       		beq.s	loc2_179E0
00018A52 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018A58 6500                       		bcs.s	loc2_179EE
00018A5A 5428 0025                  		addq.b	#2,$25(a0)
00018A5E 6000                       		bra.s	loc2_179EE
00018A60                            ; ===========================================================================
00018A60                            
00018A60                            loc2_179DA:
00018A60 5168 0012                  		subq.w	#8,$12(a0)
00018A64 6000                       		bra.s	loc2_179EE
00018A66                            ; ===========================================================================
00018A66                            
00018A66                            loc2_179E0:
00018A66 4268 0012                  		clr.w	$12(a0)
00018A6A 303C 0097                  		move.w	#$97,d0
00018A6E 4EB9 0000 15BA             		jsr	(PlaySound).l	; play lz3 music
00018A74                            
00018A74                            loc2_179EE:
00018A74 6100 F748                  		bsr.w	BossMove
00018A78 6000 FDF4                  		bra.w	loc2_177E6
00018A7C                            ; ===========================================================================
00018A7C                            
00018A7C                            loc2_179F6:				; XREF: obj77_ShipIndex
00018A7C 317C 0400 0010             		move.w	#$400,$10(a0)
00018A82 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018A88 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018A8E 6700                       		beq.s	loc2_17A10
00018A90 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018A94 6000                       		bra.s	loc2_17A16
00018A96                            ; ===========================================================================
00018A96                            
00018A96                            loc2_17A10:
00018A96 4A28 0001                  		tst.b	1(a0)
00018A9A 6A00                       		bpl.s	obj77_ShipDel
00018A9C                            
00018A9C                            loc2_17A16:
00018A9C 6100 F720                  		bsr.w	BossMove
00018AA0 6000 FDCC                  		bra.w	loc2_177E6
00018AA4                            ; ===========================================================================
00018AA4                            
00018AA4                            obj77_ShipDel:
00018AA4 4EF9 0000 DE3E             		jmp	DeleteObject
00018AAA                            ; ===========================================================================
00018AAA                            
00018AAA                            obj77_FaceMain:				; XREF: obj77_Index
00018AAA 4E75                       		rts
00018AAC                            ; ===========================================================================
00018AAC                            
00018AAC                            obj77_FlameMain:			; XREF: obj77_Index
00018AAC 4E75                       		rts
00018AAE                            ; ===========================================================================
00018AAE                            
00018AAE                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018AAE 43F9 0001 8650             		lea	(Ani_TetoB).l,a1
00018AB4 4EB9 0000 AEC2             		jsr	AnimateSprite
00018ABA 4EF9 0000 DE02             		jmp	DisplaySprite
00018AC0                            ; ---------------------------------------------------------------------------
00018AC0                            ; Sprite mappings - Fatass teto boss
00018AC0                            ; ---------------------------------------------------------------------------
00018AC0                            Map_TetoBoss:
00018AC0                            	include "_maps\tetoboss.asm"
00018AC0                            Map_f09a:
00018AC0 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018AC2 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018AC4 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018AC6 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018AC8 03                         Map_f09a_8: 	dc.b $3
00018AC9 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018ACE 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018AD3 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018AD8 06                         Map_f09a_18: 	dc.b $6
00018AD9 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018ADE 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018AE3 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018AE8 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018AED EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018AF2 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018AF7 03                         Map_f09a_37: 	dc.b $3
00018AF8 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018AFD 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018B02 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018B07 06                         Map_f09a_47: 	dc.b $6
00018B08 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018B0D 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018B12 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018B17 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018B1C ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018B21 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018B26                            	even
00018B26                            	even
00018B26                            ; ===========================================================================
00018B26                            ; ---------------------------------------------------------------------------
00018B26                            ; Object 73 - Eggman (MZ)
00018B26                            ; ---------------------------------------------------------------------------
00018B26                            
00018B26                            Obj73:					; XREF: Obj_Index
00018B26 7000                       		moveq	#0,d0
00018B28 1028 0024                  		move.b	$24(a0),d0
00018B2C 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018B30 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018B34                            ; ===========================================================================
00018B34 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018B36 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018B38 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018B3A 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018B3C 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018B3E                            
00018B3E 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018B41 0401 04                    		dc.b 4,	1, 4
00018B44 0607 04                    		dc.b 6,	7, 4
00018B47 0800 03                    		dc.b 8,	0, 3
00018B4A                            ; ===========================================================================
00018B4A                            
00018B4A                            Obj73_Main:				; XREF: Obj73_Index
00018B4A 3168 0008 0030             		move.w	8(a0),$30(a0)
00018B50 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018B56 117C 000F 0020             		move.b	#$F,$20(a0)
00018B5C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018B62 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018B66 2248                       		movea.l	a0,a1
00018B68 7203                       		moveq	#3,d1
00018B6A 6000                       		bra.s	Obj73_LoadBoss
00018B6C                            ; ===========================================================================
00018B6C                            
00018B6C                            Obj73_Loop:
00018B6C 4EB9 0000 E29E             		jsr	SingleObjLoad2
00018B72 6600                       		bne.s	Obj73_ShipMain
00018B74 12BC 0073                  		move.b	#$73,0(a1)
00018B78 3368 0008 0008             		move.w	8(a0),8(a1)
00018B7E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018B84                            
00018B84                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018B84 08A8 0000 0022             		bclr	#0,$22(a0)
00018B8A 4229 0025                  		clr.b	$25(a1)
00018B8E 135A 0024                  		move.b	(a2)+,$24(a1)
00018B92 135A 001C                  		move.b	(a2)+,$1C(a1)
00018B96 135A 0018                  		move.b	(a2)+,$18(a1)
00018B9A 237C 0001 8664 0004        		move.l	#Map_Eggman,4(a1)
00018BA2 337C 0400 0002             		move.w	#$400,2(a1)
00018BA8 137C 0004 0001             		move.b	#4,1(a1)
00018BAE 137C 0020 0019             		move.b	#$20,$19(a1)
00018BB4 2348 0034                  		move.l	a0,$34(a1)
00018BB8 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018BBC                            
00018BBC                            Obj73_ShipMain:
00018BBC 7000                       		moveq	#0,d0
00018BBE 1028 0025                  		move.b	$25(a0),d0
00018BC2 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018BC6 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018BCA 43F9 0001 8600             		lea	(Ani_Eggman).l,a1
00018BD0 4EB9 0000 AEC2             		jsr	AnimateSprite
00018BD6 7003                       		moveq	#3,d0
00018BD8 C028 0022                  		and.b	$22(a0),d0
00018BDC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018BE2 8128 0001                  		or.b	d0,1(a0)
00018BE6 4EF9 0000 DE02             		jmp	DisplaySprite
00018BEC                            ; ===========================================================================
00018BEC 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018BEE 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018BF0 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018BF2 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018BF4 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018BF6                            ; ===========================================================================
00018BF6                            
00018BF6                            loc_18302:				; XREF: Obj73_ShipIndex
00018BF6 1028 003F                  		move.b	$3F(a0),d0
00018BFA 5428 003F                  		addq.b	#2,$3F(a0)
00018BFE 4EB9 0000 2CEC             		jsr	(CalcSine).l
00018C04 E440                       		asr.w	#2,d0
00018C06 3140 0012                  		move.w	d0,$12(a0)
00018C0A 317C FF00 0010             		move.w	#-$100,$10(a0)
00018C10 6100 F5AC                  		bsr.w	BossMove
00018C14 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018C1A 6600                       		bne.s	loc_18334
00018C1C 5428 0025                  		addq.b	#2,$25(a0)
00018C20 4228 0028                  		clr.b	$28(a0)
00018C24 42A8 0010                  		clr.l	$10(a0)
00018C28                            
00018C28                            loc_18334:
00018C28 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00018C2E 1140 0034                  		move.b	d0,$34(a0)
00018C32                            
00018C32                            loc_1833E:
00018C32 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018C38 3168 0030 0008             		move.w	$30(a0),8(a0)
00018C3E 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018C44 6400                       		bcc.s	locret_18390
00018C46 4A28 0022                  		tst.b	$22(a0)
00018C4A 6B00                       		bmi.s	loc_18392
00018C4C 4A28 0020                  		tst.b	$20(a0)
00018C50 6600                       		bne.s	locret_18390
00018C52 4A28 003E                  		tst.b	$3E(a0)
00018C56 6600                       		bne.s	loc_18374
00018C58 117C 0028 003E             		move.b	#$28,$3E(a0)
00018C5E 303C 00AC                  		move.w	#$AC,d0
00018C62 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018C68                            
00018C68                            loc_18374:
00018C68 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018C6C 7000                       		moveq	#0,d0
00018C6E 4A51                       		tst.w	(a1)
00018C70 6600                       		bne.s	loc_18382
00018C72 303C 0EEE                  		move.w	#$EEE,d0
00018C76                            
00018C76                            loc_18382:
00018C76 3280                       		move.w	d0,(a1)
00018C78 5328 003E                  		subq.b	#1,$3E(a0)
00018C7C 6600                       		bne.s	locret_18390
00018C7E 117C 000F 0020             		move.b	#$F,$20(a0)
00018C84                            
00018C84                            locret_18390:
00018C84 4E75                       		rts	
00018C86                            ; ===========================================================================
00018C86                            
00018C86                            loc_18392:				; XREF: loc_1833E
00018C86 7064                       		moveq	#100,d0
00018C88 6100 0000                  		bsr.w	AddPoints
00018C8C 117C 0004 0025             		move.b	#4,$25(a0)
00018C92 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018C98 4268 0010                  		clr.w	$10(a0)
00018C9C 4E75                       		rts	
00018C9E                            ; ===========================================================================
00018C9E                            
00018C9E                            loc_183AA:				; XREF: Obj73_ShipIndex
00018C9E 7000                       		moveq	#0,d0
00018CA0 1028 0028                  		move.b	$28(a0),d0
00018CA4 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018CA8 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018CAC 0228 0006 0028             		andi.b	#6,$28(a0)
00018CB2 6000 FF7E                  		bra.w	loc_1833E
00018CB6                            ; ===========================================================================
00018CB6 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018CB8 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018CBA 0000                       		dc.w loc_183CA-off_183C2
00018CBC 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018CBE                            ; ===========================================================================
00018CBE                            
00018CBE                            loc_183CA:				; XREF: off_183C2
00018CBE 4A68 0010                  		tst.w	$10(a0)
00018CC2 6600                       		bne.s	loc_183FE
00018CC4 7040                       		moveq	#$40,d0
00018CC6 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018CCC 6700                       		beq.s	loc_183E6
00018CCE 6500                       		bcs.s	loc_183DE
00018CD0 4440                       		neg.w	d0
00018CD2                            
00018CD2                            loc_183DE:
00018CD2 3140 0012                  		move.w	d0,$12(a0)
00018CD6 6000 F4E6                  		bra.w	BossMove
00018CDA                            ; ===========================================================================
00018CDA                            
00018CDA                            loc_183E6:
00018CDA 317C 0200 0010             		move.w	#$200,$10(a0)
00018CE0 317C 0100 0012             		move.w	#$100,$12(a0)
00018CE6 0828 0000 0022             		btst	#0,$22(a0)
00018CEC 6600                       		bne.s	loc_183FE
00018CEE 4468 0010                  		neg.w	$10(a0)
00018CF2                            
00018CF2                            loc_183FE:
00018CF2 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018CF8 6400                       		bcc.s	Obj73_MakeLava
00018CFA 6100 F4C2                  		bsr.w	BossMove
00018CFE 5968 0012                  		subq.w	#4,$12(a0)
00018D02                            
00018D02                            Obj73_MakeLava:
00018D02 5328 0034                  		subq.b	#1,$34(a0)
00018D06 6400                       		bcc.s	loc_1845C
00018D08 4EB9 0000 E288             		jsr	SingleObjLoad
00018D0E 6600                       		bne.s	loc_1844A
00018D10 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018D14 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018D1A 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00018D20 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018D26 80FC 0050                  		divu.w	#$50,d0
00018D2A 4840                       		swap	d0
00018D2C 0640 1878                  		addi.w	#$1878,d0
00018D30 3340 0008                  		move.w	d0,8(a1)
00018D34 EE09                       		lsr.b	#7,d1
00018D36 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018D3C                            
00018D3C                            loc_1844A:
00018D3C 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00018D42 0200 001F                  		andi.b	#$1F,d0
00018D46 0600 0040                  		addi.b	#$40,d0
00018D4A 1140 0034                  		move.b	d0,$34(a0)
00018D4E                            
00018D4E                            loc_1845C:
00018D4E 0828 0000 0022             		btst	#0,$22(a0)
00018D54 6700                       		beq.s	loc_18474
00018D56 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018D5C 6D00                       		blt.s	locret_1849C
00018D5E 317C 1910 0030             		move.w	#$1910,$30(a0)
00018D64 6000                       		bra.s	loc_18482
00018D66                            ; ===========================================================================
00018D66                            
00018D66                            loc_18474:
00018D66 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018D6C 6E00                       		bgt.s	locret_1849C
00018D6E 317C 1830 0030             		move.w	#$1830,$30(a0)
00018D74                            
00018D74                            loc_18482:
00018D74 4268 0010                  		clr.w	$10(a0)
00018D78 317C FE80 0012             		move.w	#-$180,$12(a0)
00018D7E 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018D84 6400                       		bcc.s	loc_18498
00018D86 4468 0012                  		neg.w	$12(a0)
00018D8A                            
00018D8A                            loc_18498:
00018D8A 5428 0028                  		addq.b	#2,$28(a0)
00018D8E                            
00018D8E                            locret_1849C:
00018D8E 4E75                       		rts	
00018D90                            ; ===========================================================================
00018D90                            
00018D90                            Obj73_MakeLava2:			; XREF: off_183C2
00018D90 6100 F42C                  		bsr.w	BossMove
00018D94 3028 0038                  		move.w	$38(a0),d0
00018D98 0440 022C                  		subi.w	#$22C,d0
00018D9C 6E00                       		bgt.s	locret_184F4
00018D9E 303C 022C                  		move.w	#$22C,d0
00018DA2 4A68 0012                  		tst.w	$12(a0)
00018DA6 6700                       		beq.s	loc_184EA
00018DA8 4268 0012                  		clr.w	$12(a0)
00018DAC 317C 0050 003C             		move.w	#$50,$3C(a0)
00018DB2 0868 0000 0022             		bchg	#0,$22(a0)
00018DB8 4EB9 0000 E288             		jsr	SingleObjLoad
00018DBE 6600                       		bne.s	loc_184EA
00018DC0 3368 0030 0008             		move.w	$30(a0),8(a1)
00018DC6 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018DCC 0669 0018 000C             		addi.w	#$18,$C(a1)
00018DD2 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018DD6 137C 0001 0028             		move.b	#1,$28(a1)
00018DDC                            
00018DDC                            loc_184EA:
00018DDC 5368 003C                  		subq.w	#1,$3C(a0)
00018DE0 6600                       		bne.s	locret_184F4
00018DE2 5428 0028                  		addq.b	#2,$28(a0)
00018DE6                            
00018DE6                            locret_184F4:
00018DE6 4E75                       		rts	
00018DE8                            ; ===========================================================================
00018DE8                            
00018DE8                            loc_184F6:				; XREF: Obj73_ShipIndex
00018DE8 5368 003C                  		subq.w	#1,$3C(a0)
00018DEC 6B00                       		bmi.s	loc_18500
00018DEE 6000 F38C                  		bra.w	BossDefeated
00018DF2                            ; ===========================================================================
00018DF2                            
00018DF2                            loc_18500:
00018DF2 08E8 0000 0022             		bset	#0,$22(a0)
00018DF8 08A8 0007 0022             		bclr	#7,$22(a0)
00018DFE 4268 0010                  		clr.w	$10(a0)
00018E02 5428 0025                  		addq.b	#2,$25(a0)
00018E06 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018E0C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018E10 6600                       		bne.s	locret_1852A
00018E12 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018E18 4268 0012                  		clr.w	$12(a0)
00018E1C                            
00018E1C                            locret_1852A:
00018E1C 4E75                       		rts	
00018E1E                            ; ===========================================================================
00018E1E                            
00018E1E                            loc_1852C:				; XREF: Obj73_ShipIndex
00018E1E 5268 003C                  		addq.w	#1,$3C(a0)
00018E22 6700                       		beq.s	loc_18544
00018E24 6A00                       		bpl.s	loc_1854E
00018E26 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018E2C 6400                       		bcc.s	loc_18544
00018E2E 0668 0018 0012             		addi.w	#$18,$12(a0)
00018E34 6000                       		bra.s	loc_1857A
00018E36                            ; ===========================================================================
00018E36                            
00018E36                            loc_18544:
00018E36 4268 0012                  		clr.w	$12(a0)
00018E3A 4268 003C                  		clr.w	$3C(a0)
00018E3E 6000                       		bra.s	loc_1857A
00018E40                            ; ===========================================================================
00018E40                            
00018E40                            loc_1854E:
00018E40 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018E46 6500                       		bcs.s	loc_18566
00018E48 6700                       		beq.s	loc_1856C
00018E4A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018E50 6500                       		bcs.s	loc_1857A
00018E52 5428 0025                  		addq.b	#2,$25(a0)
00018E56 6000                       		bra.s	loc_1857A
00018E58                            ; ===========================================================================
00018E58                            
00018E58                            loc_18566:
00018E58 5168 0012                  		subq.w	#8,$12(a0)
00018E5C 6000                       		bra.s	loc_1857A
00018E5E                            ; ===========================================================================
00018E5E                            
00018E5E                            loc_1856C:
00018E5E 4268 0012                  		clr.w	$12(a0)
00018E62 303C 0083                  		move.w	#$83,d0
00018E66 4EB9 0000 15BA             		jsr	(PlaySound).l	; play MZ music
00018E6C                            
00018E6C                            loc_1857A:
00018E6C 6100 F350                  		bsr.w	BossMove
00018E70 6000 FDC0                  		bra.w	loc_1833E
00018E74                            ; ===========================================================================
00018E74                            
00018E74                            loc_18582:				; XREF: Obj73_ShipIndex
00018E74 317C 0500 0010             		move.w	#$500,$10(a0)
00018E7A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018E80 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018E86 6400                       		bcc.s	loc_1859C
00018E88 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018E8C 6000                       		bra.s	loc_185A2
00018E8E                            ; ===========================================================================
00018E8E                            
00018E8E                            loc_1859C:
00018E8E 4A28 0001                  		tst.b	1(a0)
00018E92 6A00                       		bpl.s	Obj73_ShipDel
00018E94                            
00018E94                            loc_185A2:
00018E94 6100 F328                  		bsr.w	BossMove
00018E98 6000 FD98                  		bra.w	loc_1833E
00018E9C                            ; ===========================================================================
00018E9C                            
00018E9C                            Obj73_ShipDel:
00018E9C 4EF9 0000 DE3E             		jmp	DeleteObject
00018EA2                            ; ===========================================================================
00018EA2                            
00018EA2                            Obj73_FaceMain:				; XREF: Obj73_Index
00018EA2 7000                       		moveq	#0,d0
00018EA4 7201                       		moveq	#1,d1
00018EA6 2268 0034                  		movea.l	$34(a0),a1
00018EAA 1029 0025                  		move.b	$25(a1),d0
00018EAE 5540                       		subq.w	#2,d0
00018EB0 6600                       		bne.s	loc_185D2
00018EB2 0829 0001 0028             		btst	#1,$28(a1)
00018EB8 6700                       		beq.s	loc_185DA
00018EBA 4A69 0012                  		tst.w	$12(a1)
00018EBE 6600                       		bne.s	loc_185DA
00018EC0 7204                       		moveq	#4,d1
00018EC2 6000                       		bra.s	loc_185EE
00018EC4                            ; ===========================================================================
00018EC4                            
00018EC4                            loc_185D2:
00018EC4 5500                       		subq.b	#2,d0
00018EC6 6B00                       		bmi.s	loc_185DA
00018EC8 720A                       		moveq	#$A,d1
00018ECA 6000                       		bra.s	loc_185EE
00018ECC                            ; ===========================================================================
00018ECC                            
00018ECC                            loc_185DA:
00018ECC 4A29 0020                  		tst.b	$20(a1)
00018ED0 6600                       		bne.s	loc_185E4
00018ED2 7205                       		moveq	#5,d1
00018ED4 6000                       		bra.s	loc_185EE
00018ED6                            ; ===========================================================================
00018ED6                            
00018ED6                            loc_185E4:
00018ED6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018EDC 6500                       		bcs.s	loc_185EE
00018EDE 7204                       		moveq	#4,d1
00018EE0                            
00018EE0                            loc_185EE:
00018EE0 1141 001C                  		move.b	d1,$1C(a0)
00018EE4 5900                       		subq.b	#4,d0
00018EE6 6600                       		bne.s	loc_18602
00018EE8 117C 0006 001C             		move.b	#6,$1C(a0)
00018EEE 4A28 0001                  		tst.b	1(a0)
00018EF2 6A00                       		bpl.s	Obj73_FaceDel
00018EF4                            
00018EF4                            loc_18602:
00018EF4 6000                       		bra.s	Obj73_Display
00018EF6                            ; ===========================================================================
00018EF6                            
00018EF6                            Obj73_FaceDel:
00018EF6 4EF9 0000 DE3E             		jmp	DeleteObject
00018EFC                            ; ===========================================================================
00018EFC                            
00018EFC                            Obj73_FlameMain:			; XREF: Obj73_Index
00018EFC 117C 0007 001C             		move.b	#7,$1C(a0)
00018F02 2268 0034                  		movea.l	$34(a0),a1
00018F06 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018F0C 6D00                       		blt.s	loc_1862A
00018F0E 117C 000B 001C             		move.b	#$B,$1C(a0)
00018F14 4A28 0001                  		tst.b	1(a0)
00018F18 6A00                       		bpl.s	Obj73_FlameDel
00018F1A 6000                       		bra.s	loc_18636
00018F1C                            ; ===========================================================================
00018F1C                            
00018F1C                            loc_1862A:
00018F1C 4A69 0010                  		tst.w	$10(a1)
00018F20 6700                       		beq.s	loc_18636
00018F22 117C 0008 001C             		move.b	#8,$1C(a0)
00018F28                            
00018F28                            loc_18636:
00018F28 6000                       		bra.s	Obj73_Display
00018F2A                            ; ===========================================================================
00018F2A                            
00018F2A                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018F2A 4EF9 0000 DE3E             		jmp	DeleteObject
00018F30                            ; ===========================================================================
00018F30                            
00018F30                            Obj73_Display:
00018F30 43F9 0001 8600             		lea	(Ani_Eggman).l,a1
00018F36 4EB9 0000 AEC2             		jsr	AnimateSprite
00018F3C                            
00018F3C                            loc_1864A:
00018F3C 2268 0034                  		movea.l	$34(a0),a1
00018F40 3169 0008 0008             		move.w	8(a1),8(a0)
00018F46 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018F4C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018F52 7003                       		moveq	#3,d0
00018F54 C028 0022                  		and.b	$22(a0),d0
00018F58 0228 00FC 0001             		andi.b	#-4,1(a0)
00018F5E 8128 0001                  		or.b	d0,1(a0)
00018F62 4EF9 0000 DE02             		jmp	DisplaySprite
00018F68                            ; ===========================================================================
00018F68                            
00018F68                            Obj73_TubeMain:				; XREF: Obj73_Index
00018F68 2268 0034                  		movea.l	$34(a0),a1
00018F6C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018F72 6600                       		bne.s	loc_18688
00018F74 4A28 0001                  		tst.b	1(a0)
00018F78 6A00                       		bpl.s	Obj73_TubeDel
00018F7A                            
00018F7A                            loc_18688:
00018F7A 217C 0001 872C 0004        		move.l	#Map_BossItems,4(a0)
00018F82 317C 246C 0002             		move.w	#$246C,2(a0)
00018F88 117C 0004 001A             		move.b	#4,$1A(a0)
00018F8E 60AC                       		bra.s	loc_1864A
00018F90                            ; ===========================================================================
00018F90                            
00018F90                            Obj73_TubeDel:
00018F90 4EF9 0000 DE3E             		jmp	DeleteObject
00018F96                            ; ===========================================================================
00018F96                            ; ---------------------------------------------------------------------------
00018F96                            ; Object 74 - lava that	Eggman drops (MZ)
00018F96                            ; ---------------------------------------------------------------------------
00018F96                            
00018F96                            Obj74:					; XREF: Obj_Index
00018F96 7000                       		moveq	#0,d0
00018F98 1028 0024                  		move.b	$24(a0),d0
00018F9C 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018FA0 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018FA4 4EF9 0000 DE02             		jmp	DisplaySprite
00018FAA                            ; ===========================================================================
00018FAA 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018FAC 0000                       		dc.w Obj74_Action-Obj74_Index
00018FAE 0000                       		dc.w loc_18886-Obj74_Index
00018FB0 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018FB2                            ; ===========================================================================
00018FB2                            
00018FB2                            Obj74_Main:				; XREF: Obj74_Index
00018FB2 117C 0008 0016             		move.b	#8,$16(a0)
00018FB8 117C 0008 0017             		move.b	#8,$17(a0)
00018FBE 217C 0000 BAC0 0004        		move.l	#Map_obj14,4(a0)
00018FC6 317C 0345 0002             		move.w	#$345,2(a0)
00018FCC 117C 0004 0001             		move.b	#4,1(a0)
00018FD2 117C 0005 0018             		move.b	#5,$18(a0)
00018FD8 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018FDE 117C 0008 0019             		move.b	#8,$19(a0)
00018FE4 5428 0024                  		addq.b	#2,$24(a0)
00018FE8 4A28 0028                  		tst.b	$28(a0)
00018FEC 6600                       		bne.s	loc_1870A
00018FEE 117C 008B 0020             		move.b	#$8B,$20(a0)
00018FF4 5428 0024                  		addq.b	#2,$24(a0)
00018FF8 6000 0000                  		bra.w	loc_18886
00018FFC                            ; ===========================================================================
00018FFC                            
00018FFC                            loc_1870A:
00018FFC 117C 001E 0029             		move.b	#$1E,$29(a0)
00019002 303C 00AE                  		move.w	#$AE,d0
00019006 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava sound
0001900C                            
0001900C                            Obj74_Action:				; XREF: Obj74_Index
0001900C 7000                       		moveq	#0,d0
0001900E 1028 0025                  		move.b	$25(a0),d0
00019012 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019016 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001901A 4EB9 0000 DDDC             		jsr	SpeedToPos
00019020 43F9 0000 ECBC             		lea	(Ani_obj14).l,a1
00019026 4EB9 0000 AEC2             		jsr	AnimateSprite
0001902C 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019032 6200                       		bhi.s	Obj74_Delete
00019034 4E75                       		rts	
00019036                            ; ===========================================================================
00019036                            
00019036                            Obj74_Delete:
00019036 4EF9 0000 DE3E             		jmp	DeleteObject
0001903C                            ; ===========================================================================
0001903C 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001903E 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019040 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019042 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019044                            ; ===========================================================================
00019044                            
00019044                            Obj74_Drop:				; XREF: Obj74_Index2
00019044 08E8 0001 0022             		bset	#1,$22(a0)
0001904A 5328 0029                  		subq.b	#1,$29(a0)
0001904E 6A00                       		bpl.s	locret_18780
00019050 117C 008B 0020             		move.b	#$8B,$20(a0)
00019056 4228 0028                  		clr.b	$28(a0)
0001905A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019060 08A8 0001 0022             		bclr	#1,$22(a0)
00019066 6100 C6A4                  		bsr.w	ObjHitFloor
0001906A 4A41                       		tst.w	d1
0001906C 6A00                       		bpl.s	locret_18780
0001906E 5428 0025                  		addq.b	#2,$25(a0)
00019072                            
00019072                            locret_18780:
00019072 4E75                       		rts	
00019074                            ; ===========================================================================
00019074                            
00019074                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00019074 5568 000C                  		subq.w	#2,$C(a0)
00019078 08E8 0007 0002             		bset	#7,2(a0)
0001907E 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019084 4268 0012                  		clr.w	$12(a0)
00019088 3168 0008 0030             		move.w	8(a0),$30(a0)
0001908E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019094 117C 0003 0029             		move.b	#3,$29(a0)
0001909A 4EB9 0000 E29E             		jsr	SingleObjLoad2
000190A0 6600                       		bne.s	loc_187CA
000190A2 47D1                       		lea	(a1),a3
000190A4 45D0                       		lea	(a0),a2
000190A6 7003                       		moveq	#3,d0
000190A8                            
000190A8                            Obj74_Loop:
000190A8 26DA                       		move.l	(a2)+,(a3)+
000190AA 26DA                       		move.l	(a2)+,(a3)+
000190AC 26DA                       		move.l	(a2)+,(a3)+
000190AE 26DA                       		move.l	(a2)+,(a3)+
000190B0 51C8 FFF6                  		dbf	d0,Obj74_Loop
000190B4                            
000190B4 4469 0010                  		neg.w	$10(a1)
000190B8 5429 0025                  		addq.b	#2,$25(a1)
000190BC                            
000190BC                            loc_187CA:
000190BC 5428 0025                  		addq.b	#2,$25(a0)
000190C0 4E75                       		rts	
000190C2                            
000190C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000190C2                            
000190C2                            
000190C2                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000190C2 4EB9 0000 E29E             		jsr	SingleObjLoad2
000190C8 6600                       		bne.s	locret_187EE
000190CA 3368 0008 0008             		move.w	8(a0),8(a1)
000190D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000190D6 12BC 0074                  		move.b	#$74,(a1)
000190DA 337C 0067 0028             		move.w	#$67,$28(a1)
000190E0                            
000190E0                            locret_187EE:
000190E0 4E75                       		rts	
000190E2                            ; End of function Obj74_Duplicate2
000190E2                            
000190E2                            ; ===========================================================================
000190E2                            
000190E2                            Obj74_Duplicate:			; XREF: Obj74_Index2
000190E2 6100 C628                  		bsr.w	ObjHitFloor
000190E6 4A41                       		tst.w	d1
000190E8 6A00                       		bpl.s	loc_18826
000190EA 3028 0008                  		move.w	8(a0),d0
000190EE 0C40 1940                  		cmpi.w	#$1940,d0
000190F2 6E00                       		bgt.s	loc_1882C
000190F4 3228 0030                  		move.w	$30(a0),d1
000190F8 B240                       		cmp.w	d0,d1
000190FA 6700                       		beq.s	loc_1881E
000190FC 0240 0010                  		andi.w	#$10,d0
00019100 0241 0010                  		andi.w	#$10,d1
00019104 B240                       		cmp.w	d0,d1
00019106 6700                       		beq.s	loc_1881E
00019108 61B8                       		bsr.s	Obj74_Duplicate2
0001910A 3168 0008 0032             		move.w	8(a0),$32(a0)
00019110                            
00019110                            loc_1881E:
00019110 3168 0008 0030             		move.w	8(a0),$30(a0)
00019116 4E75                       		rts	
00019118                            ; ===========================================================================
00019118                            
00019118                            loc_18826:
00019118 5428 0025                  		addq.b	#2,$25(a0)
0001911C 4E75                       		rts	
0001911E                            ; ===========================================================================
0001911E                            
0001911E                            loc_1882C:
0001911E 5428 0024                  		addq.b	#2,$24(a0)
00019122 4E75                       		rts	
00019124                            ; ===========================================================================
00019124                            
00019124                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019124 08A8 0001 0022             		bclr	#1,$22(a0)
0001912A 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019130 3028 0008                  		move.w	8(a0),d0
00019134 9068 0032                  		sub.w	$32(a0),d0
00019138 6A00                       		bpl.s	loc_1884A
0001913A 4440                       		neg.w	d0
0001913C                            
0001913C                            loc_1884A:
0001913C 0C40 0012                  		cmpi.w	#$12,d0
00019140 6600                       		bne.s	loc_18856
00019142 08A8 0007 0002             		bclr	#7,2(a0)
00019148                            
00019148                            loc_18856:
00019148 6100 C5C2                  		bsr.w	ObjHitFloor
0001914C 4A41                       		tst.w	d1
0001914E 6A00                       		bpl.s	locret_1887E
00019150 5328 0029                  		subq.b	#1,$29(a0)
00019154 6700                       		beq.s	Obj74_Delete2
00019156 4268 0012                  		clr.w	$12(a0)
0001915A 3168 0032 0008             		move.w	$32(a0),8(a0)
00019160 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019166 08E8 0007 0002             		bset	#7,2(a0)
0001916C 5528 0025                  		subq.b	#2,$25(a0)
00019170                            
00019170                            locret_1887E:
00019170 4E75                       		rts	
00019172                            ; ===========================================================================
00019172                            
00019172                            Obj74_Delete2:
00019172 4EF9 0000 DE3E             		jmp	DeleteObject
00019178                            ; ===========================================================================
00019178                            
00019178                            loc_18886:				; XREF: Obj74_Index
00019178 08E8 0007 0002             		bset	#7,2(a0)
0001917E 5328 0029                  		subq.b	#1,$29(a0)
00019182 6600                       		bne.s	Obj74_Animate
00019184 117C 0001 001C             		move.b	#1,$1C(a0)
0001918A 5968 000C                  		subq.w	#4,$C(a0)
0001918E 4228 0020                  		clr.b	$20(a0)
00019192                            
00019192                            Obj74_Animate:
00019192 43F9 0000 ECBC             		lea	(Ani_obj14).l,a1
00019198 4EF9 0000 AEC2             		jmp	AnimateSprite
0001919E                            ; ===========================================================================
0001919E                            
0001919E                            Obj74_Delete3:				; XREF: Obj74_Index
0001919E 4EF9 0000 DE3E             		jmp	DeleteObject
000191A4                            ; ===========================================================================
000191A4                            
000191A4                            Obj7A_Delete:
000191A4 4EF9 0000 DE3E             		jmp	DeleteObject
000191AA                            ; ===========================================================================
000191AA                            ; ---------------------------------------------------------------------------
000191AA                            ; Object 7A - Eggman (SLZ)
000191AA                            ; ---------------------------------------------------------------------------
000191AA                            
000191AA                            Obj7A:					; XREF: Obj_Index
000191AA 7000                       		moveq	#0,d0
000191AC 1028 0024                  		move.b	$24(a0),d0
000191B0 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000191B4 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000191B8                            ; ===========================================================================
000191B8 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000191BA 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000191BC 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000191BE 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000191C0 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000191C2                            
000191C2 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000191C5 0401 04                    		dc.b 4,	1, 4
000191C8 0607 04                    		dc.b 6,	7, 4
000191CB 0800 03                    		dc.b 8,	0, 3
000191CE                            ; ===========================================================================
000191CE                            
000191CE                            Obj7A_Main:				; XREF: Obj7A_Index
000191CE 317C 2188 0008             		move.w	#$2188,8(a0)
000191D4 317C 0228 000C             		move.w	#$228,$C(a0)
000191DA 3168 0008 0030             		move.w	8(a0),$30(a0)
000191E0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000191E6 117C 000F 0020             		move.b	#$F,$20(a0)
000191EC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000191F2 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000191F6 2248                       		movea.l	a0,a1
000191F8 7203                       		moveq	#3,d1
000191FA 6000                       		bra.s	Obj7A_LoadBoss
000191FC                            ; ===========================================================================
000191FC                            
000191FC                            Obj7A_Loop:
000191FC 4EB9 0000 E29E             		jsr	SingleObjLoad2
00019202 6600                       		bne.s	loc_1895C
00019204 12BC 007A                  		move.b	#$7A,0(a1)
00019208 3368 0008 0008             		move.w	8(a0),8(a1)
0001920E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019214                            
00019214                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019214 08A8 0000 0022             		bclr	#0,$22(a0)
0001921A 4229 0025                  		clr.b	$25(a1)
0001921E 135A 0024                  		move.b	(a2)+,$24(a1)
00019222 135A 001C                  		move.b	(a2)+,$1C(a1)
00019226 135A 0018                  		move.b	(a2)+,$18(a1)
0001922A 237C 0001 8664 0004        		move.l	#Map_Eggman,4(a1)
00019232 337C 0400 0002             		move.w	#$400,2(a1)
00019238 137C 0004 0001             		move.b	#4,1(a1)
0001923E 137C 0020 0019             		move.b	#$20,$19(a1)
00019244 2348 0034                  		move.l	a0,$34(a1)
00019248 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001924C                            
0001924C                            loc_1895C:
0001924C 43F8 D040                  		lea	($FFFFD040).w,a1
00019250 45E8 002A                  		lea	$2A(a0),a2
00019254 705E                       		moveq	#$5E,d0
00019256 723E                       		moveq	#$3E,d1
00019258                            
00019258                            loc_18968:
00019258 B011                       		cmp.b	(a1),d0
0001925A 6600                       		bne.s	loc_18974
0001925C 4A29 0028                  		tst.b	$28(a1)
00019260 6700                       		beq.s	loc_18974
00019262 34C9                       		move.w	a1,(a2)+
00019264                            
00019264                            loc_18974:
00019264 D2FC 0040                  		adda.w	#$40,a1
00019268 51C9 FFEE                  		dbf	d1,loc_18968
0001926C                            
0001926C                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001926C 7000                       		moveq	#0,d0
0001926E 1028 0025                  		move.b	$25(a0),d0
00019272 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019276 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001927A 43F9 0001 8600             		lea	(Ani_Eggman).l,a1
00019280 4EB9 0000 AEC2             		jsr	AnimateSprite
00019286 7003                       		moveq	#3,d0
00019288 C028 0022                  		and.b	$22(a0),d0
0001928C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019292 8128 0001                  		or.b	d0,1(a0)
00019296 4EF9 0000 DE02             		jmp	DisplaySprite
0001929C                            ; ===========================================================================
0001929C 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001929E 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000192A0 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000192A2 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000192A4 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000192A6 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000192A8                            ; ===========================================================================
000192A8                            
000192A8                            loc_189B8:				; XREF: Obj7A_ShipIndex
000192A8 317C FF00 0010             		move.w	#-$100,$10(a0)
000192AE 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000192B4 6400                       		bcc.s	loc_189CA
000192B6 5428 0025                  		addq.b	#2,$25(a0)
000192BA                            
000192BA                            loc_189CA:
000192BA 6100 EF02                  		bsr.w	BossMove
000192BE 1028 003F                  		move.b	$3F(a0),d0
000192C2 5428 003F                  		addq.b	#2,$3F(a0)
000192C6 4EB9 0000 2CEC             		jsr	(CalcSine).l
000192CC EC40                       		asr.w	#6,d0
000192CE D068 0038                  		add.w	$38(a0),d0
000192D2 3140 000C                  		move.w	d0,$C(a0)
000192D6 3168 0030 0008             		move.w	$30(a0),8(a0)
000192DC 6000                       		bra.s	loc_189FE
000192DE                            ; ===========================================================================
000192DE                            
000192DE                            loc_189EE:
000192DE 6100 EEDE                  		bsr.w	BossMove
000192E2 3168 0038 000C             		move.w	$38(a0),$C(a0)
000192E8 3168 0030 0008             		move.w	$30(a0),8(a0)
000192EE                            
000192EE                            loc_189FE:
000192EE 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000192F4 6400                       		bcc.s	locret_18A44
000192F6 4A28 0022                  		tst.b	$22(a0)
000192FA 6B00                       		bmi.s	loc_18A46
000192FC 4A28 0020                  		tst.b	$20(a0)
00019300 6600                       		bne.s	locret_18A44
00019302 4A28 003E                  		tst.b	$3E(a0)
00019306 6600                       		bne.s	loc_18A28
00019308 117C 0020 003E             		move.b	#$20,$3E(a0)
0001930E 303C 00AC                  		move.w	#$AC,d0
00019312 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019318                            
00019318                            loc_18A28:
00019318 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001931C 7000                       		moveq	#0,d0
0001931E 4A51                       		tst.w	(a1)
00019320 6600                       		bne.s	loc_18A36
00019322 303C 0EEE                  		move.w	#$EEE,d0
00019326                            
00019326                            loc_18A36:
00019326 3280                       		move.w	d0,(a1)
00019328 5328 003E                  		subq.b	#1,$3E(a0)
0001932C 6600                       		bne.s	locret_18A44
0001932E 117C 000F 0020             		move.b	#$F,$20(a0)
00019334                            
00019334                            locret_18A44:
00019334 4E75                       		rts	
00019336                            ; ===========================================================================
00019336                            
00019336                            loc_18A46:
00019336 7064                       		moveq	#100,d0
00019338 6100 0000                  		bsr.w	AddPoints
0001933C 117C 0006 0025             		move.b	#6,$25(a0)
00019342 117C 0078 003C             		move.b	#$78,$3C(a0)
00019348 4268 0010                  		clr.w	$10(a0)
0001934C 4E75                       		rts	
0001934E                            ; ===========================================================================
0001934E                            
0001934E                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001934E 3028 0030                  		move.w	$30(a0),d0
00019352 317C 0200 0010             		move.w	#$200,$10(a0)
00019358 0828 0000 0022             		btst	#0,$22(a0)
0001935E 6600                       		bne.s	loc_18A7C
00019360 4468 0010                  		neg.w	$10(a0)
00019364 0C40 2008                  		cmpi.w	#$2008,d0
00019368 6E00                       		bgt.s	loc_18A88
0001936A 6000                       		bra.s	loc_18A82
0001936C                            ; ===========================================================================
0001936C                            
0001936C                            loc_18A7C:
0001936C 0C40 2138                  		cmpi.w	#$2138,d0
00019370 6D00                       		blt.s	loc_18A88
00019372                            
00019372                            loc_18A82:
00019372 0868 0000 0022             		bchg	#0,$22(a0)
00019378                            
00019378                            loc_18A88:
00019378 3028 0008                  		move.w	8(a0),d0
0001937C 72FF                       		moveq	#-1,d1
0001937E 7402                       		moveq	#2,d2
00019380 45E8 002A                  		lea	$2A(a0),a2
00019384 7828                       		moveq	#$28,d4
00019386 4A68 0010                  		tst.w	$10(a0)
0001938A 6A00                       		bpl.s	loc_18A9E
0001938C 4444                       		neg.w	d4
0001938E                            
0001938E                            loc_18A9E:
0001938E 321A                       		move.w	(a2)+,d1
00019390 2641                       		movea.l	d1,a3
00019392 082B 0003 0022             		btst	#3,$22(a3)
00019398 6600                       		bne.s	loc_18AB4
0001939A 362B 0008                  		move.w	8(a3),d3
0001939E D644                       		add.w	d4,d3
000193A0 9640                       		sub.w	d0,d3
000193A2 6700                       		beq.s	loc_18AC0
000193A4                            
000193A4                            loc_18AB4:
000193A4 51CA FFE8                  		dbf	d2,loc_18A9E
000193A8                            
000193A8 1142 0028                  		move.b	d2,$28(a0)
000193AC 6000 FF0C                  		bra.w	loc_189CA
000193B0                            ; ===========================================================================
000193B0                            
000193B0                            loc_18AC0:
000193B0 1142 0028                  		move.b	d2,$28(a0)
000193B4 5428 0025                  		addq.b	#2,$25(a0)
000193B8 117C 0028 003C             		move.b	#$28,$3C(a0)
000193BE 6000 FEFA                  		bra.w	loc_189CA
000193C2                            ; ===========================================================================
000193C2                            
000193C2                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000193C2 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000193C8 6600                       		bne.s	loc_18B36
000193CA 70FF                       		moveq	#-1,d0
000193CC 1028 0028                  		move.b	$28(a0),d0
000193D0 4880                       		ext.w	d0
000193D2 6B00                       		bmi.s	loc_18B40
000193D4 5540                       		subq.w	#2,d0
000193D6 4440                       		neg.w	d0
000193D8 D040                       		add.w	d0,d0
000193DA 43E8 002A                  		lea	$2A(a0),a1
000193DE 3031 0000                  		move.w	(a1,d0.w),d0
000193E2 2440                       		movea.l	d0,a2
000193E4 43F8 D040                  		lea	($FFFFD040).w,a1
000193E8 723E                       		moveq	#$3E,d1
000193EA                            
000193EA                            loc_18AFA:
000193EA B0A9 003C                  		cmp.l	$3C(a1),d0
000193EE 6700                       		beq.s	loc_18B40
000193F0 D2FC 0040                  		adda.w	#$40,a1
000193F4 51C9 FFF4                  		dbf	d1,loc_18AFA
000193F8                            
000193F8 2F08                       		move.l	a0,-(sp)
000193FA 41D2                       		lea	(a2),a0
000193FC 4EB9 0000 E29E             		jsr	SingleObjLoad2
00019402 205F                       		movea.l	(sp)+,a0
00019404 6600                       		bne.s	loc_18B40
00019406 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001940A 3368 0008 0008             		move.w	8(a0),8(a1)
00019410 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019416 0669 0020 000C             		addi.w	#$20,$C(a1)
0001941C 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019422 234A 003C                  		move.l	a2,$3C(a1)
00019426                            
00019426                            loc_18B36:
00019426 5328 003C                  		subq.b	#1,$3C(a0)
0001942A 6700                       		beq.s	loc_18B40
0001942C 6000 FEC0                  		bra.w	loc_189FE
00019430                            ; ===========================================================================
00019430                            
00019430                            loc_18B40:
00019430 5528 0025                  		subq.b	#2,$25(a0)
00019434 6000 FE84                  		bra.w	loc_189CA
00019438                            ; ===========================================================================
00019438                            
00019438                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019438 5328 003C                  		subq.b	#1,$3C(a0)
0001943C 6B00                       		bmi.s	loc_18B52
0001943E 6000 ED3C                  		bra.w	BossDefeated
00019442                            ; ===========================================================================
00019442                            
00019442                            loc_18B52:
00019442 5428 0025                  		addq.b	#2,$25(a0)
00019446 4268 0012                  		clr.w	$12(a0)
0001944A 08E8 0000 0022             		bset	#0,$22(a0)
00019450 08A8 0007 0022             		bclr	#7,$22(a0)
00019456 4268 0010                  		clr.w	$10(a0)
0001945A 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019460 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019464 6600                       		bne.s	loc_18B7C
00019466 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001946C                            
0001946C                            loc_18B7C:
0001946C 6000 FE80                  		bra.w	loc_189FE
00019470                            ; ===========================================================================
00019470                            
00019470                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019470 5228 003C                  		addq.b	#1,$3C(a0)
00019474 6700                       		beq.s	loc_18B90
00019476 6A00                       		bpl.s	loc_18B96
00019478 0668 0018 0012             		addi.w	#$18,$12(a0)
0001947E 6000                       		bra.s	loc_18BC2
00019480                            ; ===========================================================================
00019480                            
00019480                            loc_18B90:
00019480 4268 0012                  		clr.w	$12(a0)
00019484 6000                       		bra.s	loc_18BC2
00019486                            ; ===========================================================================
00019486                            
00019486                            loc_18B96:
00019486 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001948C 6500                       		bcs.s	loc_18BAE
0001948E 6700                       		beq.s	loc_18BB4
00019490 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019496 6500                       		bcs.s	loc_18BC2
00019498 5428 0025                  		addq.b	#2,$25(a0)
0001949C 6000                       		bra.s	loc_18BC2
0001949E                            ; ===========================================================================
0001949E                            
0001949E                            loc_18BAE:
0001949E 5168 0012                  		subq.w	#8,$12(a0)
000194A2 6000                       		bra.s	loc_18BC2
000194A4                            ; ===========================================================================
000194A4                            
000194A4                            loc_18BB4:
000194A4 4268 0012                  		clr.w	$12(a0)
000194A8 303C 0084                  		move.w	#$84,d0
000194AC 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SLZ music
000194B2                            
000194B2                            loc_18BC2:
000194B2 6000 FE2A                  		bra.w	loc_189EE
000194B6                            ; ===========================================================================
000194B6                            
000194B6                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000194B6 317C 0400 0010             		move.w	#$400,$10(a0)
000194BC 317C FFC0 0012             		move.w	#-$40,$12(a0)
000194C2 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000194C8 6400                       		bcc.s	loc_18BE0
000194CA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000194CE 6000                       		bra.s	loc_18BE8
000194D0                            ; ===========================================================================
000194D0                            
000194D0                            loc_18BE0:
000194D0 4A28 0001                  		tst.b	1(a0)
000194D4 6A00 FCCE                  		bpl.w	Obj7A_Delete
000194D8                            
000194D8                            loc_18BE8:
000194D8 6100 ECE4                  		bsr.w	BossMove
000194DC 6000 FDDC                  		bra.w	loc_189CA
000194E0                            ; ===========================================================================
000194E0                            
000194E0                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000194E0 7000                       		moveq	#0,d0
000194E2 7201                       		moveq	#1,d1
000194E4 2268 0034                  		movea.l	$34(a0),a1
000194E8 1029 0025                  		move.b	$25(a1),d0
000194EC 0C00 0006                  		cmpi.b	#6,d0
000194F0 6B00                       		bmi.s	loc_18C06
000194F2 720A                       		moveq	#$A,d1
000194F4 6000                       		bra.s	loc_18C1A
000194F6                            ; ===========================================================================
000194F6                            
000194F6                            loc_18C06:
000194F6 4A29 0020                  		tst.b	$20(a1)
000194FA 6600                       		bne.s	loc_18C10
000194FC 7205                       		moveq	#5,d1
000194FE 6000                       		bra.s	loc_18C1A
00019500                            ; ===========================================================================
00019500                            
00019500                            loc_18C10:
00019500 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019506 6500                       		bcs.s	loc_18C1A
00019508 7204                       		moveq	#4,d1
0001950A                            
0001950A                            loc_18C1A:
0001950A 1141 001C                  		move.b	d1,$1C(a0)
0001950E 0C00 000A                  		cmpi.b	#$A,d0
00019512 6600                       		bne.s	loc_18C32
00019514 117C 0006 001C             		move.b	#6,$1C(a0)
0001951A 4A28 0001                  		tst.b	1(a0)
0001951E 6A00 FC84                  		bpl.w	Obj7A_Delete
00019522                            
00019522                            loc_18C32:
00019522 6000                       		bra.s	loc_18C6C
00019524                            ; ===========================================================================
00019524                            
00019524                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019524 117C 0008 001C             		move.b	#8,$1C(a0)
0001952A 2268 0034                  		movea.l	$34(a0),a1
0001952E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019534 6600                       		bne.s	loc_18C56
00019536 4A28 0001                  		tst.b	1(a0)
0001953A 6A00 FC68                  		bpl.w	Obj7A_Delete
0001953E 117C 000B 001C             		move.b	#$B,$1C(a0)
00019544 6000                       		bra.s	loc_18C6C
00019546                            ; ===========================================================================
00019546                            
00019546                            loc_18C56:
00019546 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001954C 6E00                       		bgt.s	loc_18C6C
0001954E 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019554 6D00                       		blt.s	loc_18C6C
00019556 117C 0007 001C             		move.b	#7,$1C(a0)
0001955C                            
0001955C                            loc_18C6C:
0001955C 43F9 0001 8600             		lea	(Ani_Eggman).l,a1
00019562 4EB9 0000 AEC2             		jsr	AnimateSprite
00019568                            
00019568                            loc_18C78:
00019568 2268 0034                  		movea.l	$34(a0),a1
0001956C 3169 0008 0008             		move.w	8(a1),8(a0)
00019572 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019578 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001957E 7003                       		moveq	#3,d0
00019580 C028 0022                  		and.b	$22(a0),d0
00019584 0228 00FC 0001             		andi.b	#-4,1(a0)
0001958A 8128 0001                  		or.b	d0,1(a0)
0001958E 4EF9 0000 DE02             		jmp	DisplaySprite
00019594                            ; ===========================================================================
00019594                            
00019594                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019594 2268 0034                  		movea.l	$34(a0),a1
00019598 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001959E 6600                       		bne.s	loc_18CB8
000195A0 4A28 0001                  		tst.b	1(a0)
000195A4 6A00 FBFE                  		bpl.w	Obj7A_Delete
000195A8                            
000195A8                            loc_18CB8:
000195A8 217C 0001 872C 0004        		move.l	#Map_BossItems,4(a0)
000195B0 317C 246C 0002             		move.w	#$246C,2(a0)
000195B6 117C 0003 001A             		move.b	#3,$1A(a0)
000195BC 60AA                       		bra.s	loc_18C78
000195BE                            ; ===========================================================================
000195BE                            ; ---------------------------------------------------------------------------
000195BE                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000195BE                            ; ---------------------------------------------------------------------------
000195BE                            
000195BE                            Obj7B:					; XREF: Obj_Index
000195BE 7000                       		moveq	#0,d0
000195C0 1028 0024                  		move.b	$24(a0),d0
000195C4 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000195C8 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000195CC 3028 0030                  		move.w	$30(a0),d0
000195D0 0240 FF80                  		andi.w	#$FF80,d0
000195D4 3238 F700                  		move.w	($FFFFF700).w,d1
000195D8 0441 0080                  		subi.w	#$80,d1
000195DC 0241 FF80                  		andi.w	#$FF80,d1
000195E0 9041                       		sub.w	d1,d0
000195E2 6B00 FBC0                  		bmi.w	Obj7A_Delete
000195E6 0C40 0280                  		cmpi.w	#$280,d0
000195EA 6200 FBB8                  		bhi.w	Obj7A_Delete
000195EE 4EF9 0000 DE02             		jmp	DisplaySprite
000195F4                            ; ===========================================================================
000195F4 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000195F6 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000195F8 0000                       		dc.w loc_18DC6-Obj7B_Index
000195FA 0000                       		dc.w loc_18EAA-Obj7B_Index
000195FC 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000195FE 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019600                            ; ===========================================================================
00019600                            
00019600                            Obj7B_Main:				; XREF: Obj7B_Index
00019600 217C 0001 21C8 0004        		move.l	#Map_obj5Ea,4(a0)
00019608 317C 0518 0002             		move.w	#$518,2(a0)
0001960E 117C 0001 001A             		move.b	#1,$1A(a0)
00019614 0028 0004 0001             		ori.b	#4,1(a0)
0001961A 117C 0004 0018             		move.b	#4,$18(a0)
00019620 117C 008B 0020             		move.b	#$8B,$20(a0)
00019626 117C 000C 0019             		move.b	#$C,$19(a0)
0001962C 2268 003C                  		movea.l	$3C(a0),a1
00019630 3169 0008 0030             		move.w	8(a1),$30(a0)
00019636 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001963C 08E8 0000 0022             		bset	#0,$22(a0)
00019642 3028 0008                  		move.w	8(a0),d0
00019646 B069 0008                  		cmp.w	8(a1),d0
0001964A 6E00                       		bgt.s	loc_18D68
0001964C 08A8 0000 0022             		bclr	#0,$22(a0)
00019652 117C 0002 003A             		move.b	#2,$3A(a0)
00019658                            
00019658                            loc_18D68:
00019658 5428 0024                  		addq.b	#2,$24(a0)
0001965C                            
0001965C                            Obj7B_Fall:				; XREF: Obj7B_Index
0001965C 4EB9 0000 DDB0             		jsr	ObjectFall
00019662 2268 003C                  		movea.l	$3C(a0),a1
00019666 45F9 0000 0000             		lea	(word_19018).l,a2
0001966C 7000                       		moveq	#0,d0
0001966E 1029 001A                  		move.b	$1A(a1),d0
00019672 3228 0008                  		move.w	8(a0),d1
00019676 9268 0030                  		sub.w	$30(a0),d1
0001967A 6400                       		bcc.s	loc_18D8E
0001967C 5440                       		addq.w	#2,d0
0001967E                            
0001967E                            loc_18D8E:
0001967E D040                       		add.w	d0,d0
00019680 3228 0034                  		move.w	$34(a0),d1
00019684 D272 0000                  		add.w	(a2,d0.w),d1
00019688 B268 000C                  		cmp.w	$C(a0),d1
0001968C 6E00                       		bgt.s	locret_18DC4
0001968E 2268 003C                  		movea.l	$3C(a0),a1
00019692 7202                       		moveq	#2,d1
00019694 0828 0000 0022             		btst	#0,$22(a0)
0001969A 6700                       		beq.s	loc_18DAE
0001969C 7200                       		moveq	#0,d1
0001969E                            
0001969E                            loc_18DAE:
0001969E 317C 00F0 0028             		move.w	#$F0,$28(a0)
000196A4 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000196AA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000196B0 6000 0000                  		bra.w	loc_18FA2
000196B4                            ; ===========================================================================
000196B4                            
000196B4                            locret_18DC4:
000196B4 4E75                       		rts	
000196B6                            ; ===========================================================================
000196B6                            
000196B6                            loc_18DC6:				; XREF: Obj7B_Index
000196B6 2268 003C                  		movea.l	$3C(a0),a1
000196BA 7000                       		moveq	#0,d0
000196BC 1028 003A                  		move.b	$3A(a0),d0
000196C0 9029 003A                  		sub.b	$3A(a1),d0
000196C4 6700                       		beq.s	loc_18E2A
000196C6 6400                       		bcc.s	loc_18DDA
000196C8 4400                       		neg.b	d0
000196CA                            
000196CA                            loc_18DDA:
000196CA 323C F7E8                  		move.w	#-$818,d1
000196CE 343C FEEC                  		move.w	#-$114,d2
000196D2 0C00 0001                  		cmpi.b	#1,d0
000196D6 6700                       		beq.s	loc_18E00
000196D8 323C F6A0                  		move.w	#-$960,d1
000196DC 343C FF0C                  		move.w	#-$F4,d2
000196E0 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000196E6 6D00                       		blt.s	loc_18E00
000196E8 323C F5E0                  		move.w	#-$A20,d1
000196EC 343C FF80                  		move.w	#-$80,d2
000196F0                            
000196F0                            loc_18E00:
000196F0 3141 0012                  		move.w	d1,$12(a0)
000196F4 3142 0010                  		move.w	d2,$10(a0)
000196F8 3028 0008                  		move.w	8(a0),d0
000196FC 9068 0030                  		sub.w	$30(a0),d0
00019700 6400                       		bcc.s	loc_18E16
00019702 4468 0010                  		neg.w	$10(a0)
00019706                            
00019706                            loc_18E16:
00019706 117C 0001 001A             		move.b	#1,$1A(a0)
0001970C 317C 0020 0028             		move.w	#$20,$28(a0)
00019712 5428 0024                  		addq.b	#2,$24(a0)
00019716 6000 0000                  		bra.w	loc_18EAA
0001971A                            ; ===========================================================================
0001971A                            
0001971A                            loc_18E2A:				; XREF: loc_18DC6
0001971A 45F9 0000 0000             		lea	(word_19018).l,a2
00019720 7000                       		moveq	#0,d0
00019722 1029 001A                  		move.b	$1A(a1),d0
00019726 343C 0028                  		move.w	#$28,d2
0001972A 3228 0008                  		move.w	8(a0),d1
0001972E 9268 0030                  		sub.w	$30(a0),d1
00019732 6400                       		bcc.s	loc_18E48
00019734 4442                       		neg.w	d2
00019736 5440                       		addq.w	#2,d0
00019738                            
00019738                            loc_18E48:
00019738 D040                       		add.w	d0,d0
0001973A 3228 0034                  		move.w	$34(a0),d1
0001973E D272 0000                  		add.w	(a2,d0.w),d1
00019742 3141 000C                  		move.w	d1,$C(a0)
00019746 D468 0030                  		add.w	$30(a0),d2
0001974A 3142 0008                  		move.w	d2,8(a0)
0001974E 4268 000E                  		clr.w	$E(a0)
00019752 4268 000A                  		clr.w	$A(a0)
00019756 5368 0028                  		subq.w	#1,$28(a0)
0001975A 6600                       		bne.s	loc_18E7A
0001975C 317C 0020 0028             		move.w	#$20,$28(a0)
00019762 117C 0008 0024             		move.b	#8,$24(a0)
00019768 4E75                       		rts	
0001976A                            ; ===========================================================================
0001976A                            
0001976A                            loc_18E7A:
0001976A 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019770 6600                       		bne.s	loc_18E88
00019772 117C 0005 001F             		move.b	#5,$1F(a0)
00019778                            
00019778                            loc_18E88:
00019778 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001977E 6600                       		bne.s	loc_18E96
00019780 117C 0002 001F             		move.b	#2,$1F(a0)
00019786                            
00019786                            loc_18E96:
00019786 5328 001E                  		subq.b	#1,$1E(a0)
0001978A 6E00                       		bgt.s	locret_18EA8
0001978C 0868 0000 001A             		bchg	#0,$1A(a0)
00019792 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019798                            
00019798                            locret_18EA8:
00019798 4E75                       		rts	
0001979A                            ; ===========================================================================
0001979A                            
0001979A                            loc_18EAA:				; XREF: Obj7B_Index
0001979A 43F8 D040                  		lea	($FFFFD040).w,a1
0001979E 707A                       		moveq	#$7A,d0
000197A0 7240                       		moveq	#$40,d1
000197A2 743E                       		moveq	#$3E,d2
000197A4                            
000197A4                            loc_18EB4:
000197A4 B011                       		cmp.b	(a1),d0
000197A6 6700                       		beq.s	loc_18EC0
000197A8 D2C1                       		adda.w	d1,a1
000197AA 51CA FFF8                  		dbf	d2,loc_18EB4
000197AE                            
000197AE 6000                       		bra.s	loc_18F38
000197B0                            ; ===========================================================================
000197B0                            
000197B0                            loc_18EC0:
000197B0 3029 0008                  		move.w	8(a1),d0
000197B4 3229 000C                  		move.w	$C(a1),d1
000197B8 3428 0008                  		move.w	8(a0),d2
000197BC 3628 000C                  		move.w	$C(a0),d3
000197C0 45FA 0000                  		lea	byte_19022(pc),a2
000197C4 47FA 0000                  		lea	byte_19026(pc),a3
000197C8 181A                       		move.b	(a2)+,d4
000197CA 4884                       		ext.w	d4
000197CC D044                       		add.w	d4,d0
000197CE 181B                       		move.b	(a3)+,d4
000197D0 4884                       		ext.w	d4
000197D2 D444                       		add.w	d4,d2
000197D4 B440                       		cmp.w	d0,d2
000197D6 6500                       		bcs.s	loc_18F38
000197D8 181A                       		move.b	(a2)+,d4
000197DA 4884                       		ext.w	d4
000197DC D044                       		add.w	d4,d0
000197DE 181B                       		move.b	(a3)+,d4
000197E0 4884                       		ext.w	d4
000197E2 D444                       		add.w	d4,d2
000197E4 B042                       		cmp.w	d2,d0
000197E6 6500                       		bcs.s	loc_18F38
000197E8 181A                       		move.b	(a2)+,d4
000197EA 4884                       		ext.w	d4
000197EC D244                       		add.w	d4,d1
000197EE 181B                       		move.b	(a3)+,d4
000197F0 4884                       		ext.w	d4
000197F2 D644                       		add.w	d4,d3
000197F4 B641                       		cmp.w	d1,d3
000197F6 6500                       		bcs.s	loc_18F38
000197F8 181A                       		move.b	(a2)+,d4
000197FA 4884                       		ext.w	d4
000197FC D244                       		add.w	d4,d1
000197FE 181B                       		move.b	(a3)+,d4
00019800 4884                       		ext.w	d4
00019802 D644                       		add.w	d4,d3
00019804 B243                       		cmp.w	d3,d1
00019806 6500                       		bcs.s	loc_18F38
00019808 5428 0024                  		addq.b	#2,$24(a0)
0001980C 4268 0028                  		clr.w	$28(a0)
00019810 4229 0020                  		clr.b	$20(a1)
00019814 5329 0021                  		subq.b	#1,$21(a1)
00019818 6600                       		bne.s	loc_18F38
0001981A 08E9 0007 0022             		bset	#7,$22(a1)
00019820 4268 0010                  		clr.w	$10(a0)
00019824 4268 0012                  		clr.w	$12(a0)
00019828                            
00019828                            loc_18F38:
00019828 4A68 0012                  		tst.w	$12(a0)
0001982C 6A00                       		bpl.s	loc_18F5C
0001982E 4EB9 0000 DDB0             		jsr	ObjectFall
00019834 3028 0034                  		move.w	$34(a0),d0
00019838 0440 002F                  		subi.w	#$2F,d0
0001983C B068 000C                  		cmp.w	$C(a0),d0
00019840 6E00                       		bgt.s	loc_18F58
00019842 4EB9 0000 DDB0             		jsr	ObjectFall
00019848                            
00019848                            loc_18F58:
00019848 6000 FF20                  		bra.w	loc_18E7A
0001984C                            ; ===========================================================================
0001984C                            
0001984C                            loc_18F5C:
0001984C 4EB9 0000 DDB0             		jsr	ObjectFall
00019852 2268 003C                  		movea.l	$3C(a0),a1
00019856 45F9 0000 0000             		lea	(word_19018).l,a2
0001985C 7000                       		moveq	#0,d0
0001985E 1029 001A                  		move.b	$1A(a1),d0
00019862 3228 0008                  		move.w	8(a0),d1
00019866 9268 0030                  		sub.w	$30(a0),d1
0001986A 6400                       		bcc.s	loc_18F7E
0001986C 5440                       		addq.w	#2,d0
0001986E                            
0001986E                            loc_18F7E:
0001986E D040                       		add.w	d0,d0
00019870 3228 0034                  		move.w	$34(a0),d1
00019874 D272 0000                  		add.w	(a2,d0.w),d1
00019878 B268 000C                  		cmp.w	$C(a0),d1
0001987C 6ECA                       		bgt.s	loc_18F58
0001987E 2268 003C                  		movea.l	$3C(a0),a1
00019882 7202                       		moveq	#2,d1
00019884 4A68 0010                  		tst.w	$10(a0)
00019888 6B00                       		bmi.s	loc_18F9C
0001988A 7200                       		moveq	#0,d1
0001988C                            
0001988C                            loc_18F9C:
0001988C 317C 0000 0028             		move.w	#0,$28(a0)
00019892                            
00019892                            loc_18FA2:
00019892 1341 003A                  		move.b	d1,$3A(a1)
00019896 1141 003A                  		move.b	d1,$3A(a0)
0001989A B229 001A                  		cmp.b	$1A(a1),d1
0001989E 6700                       		beq.s	loc_19008
000198A0 08A9 0003 0022             		bclr	#3,$22(a1)
000198A6 6700                       		beq.s	loc_19008
000198A8 4229 0025                  		clr.b	$25(a1)
000198AC 137C 0002 0024             		move.b	#2,$24(a1)
000198B2 45F8 D000                  		lea	($FFFFD000).w,a2
000198B6 3568 0012 0012             		move.w	$12(a0),$12(a2)
000198BC 446A 0012                  		neg.w	$12(a2)
000198C0 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000198C6 6600                       		bne.s	loc_18FDC
000198C8 E0EA 0012                  		asr	$12(a2)
000198CC                            
000198CC                            loc_18FDC:
000198CC 08EA 0001 0022             		bset	#1,$22(a2)
000198D2 08AA 0003 0022             		bclr	#3,$22(a2)
000198D8 422A 003C                  		clr.b	$3C(a2)
000198DC 2F08                       		move.l	a0,-(sp)
000198DE 41D2                       		lea	(a2),a0
000198E0 4EBA A368                  		jsr	Obj01_ChkRoll
000198E4 205F                       		movea.l	(sp)+,a0
000198E6 157C 0002 0024             		move.b	#2,$24(a2)
000198EC 303C 00CC                  		move.w	#$CC,d0
000198F0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spring" sound
000198F6                            
000198F6                            loc_19008:
000198F6 4268 0010                  		clr.w	$10(a0)
000198FA 4268 0012                  		clr.w	$12(a0)
000198FE 5428 0024                  		addq.b	#2,$24(a0)
00019902 6000 FE66                  		bra.w	loc_18E7A
00019906                            ; ===========================================================================
00019906 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019910                            		even
00019910 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019914                            		even
00019914 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019918                            		even
00019918                            ; ===========================================================================
00019918                            
00019918                            Obj7B_Explode:				; XREF: Obj7B_Index
00019918 10BC 003F                  		move.b	#$3F,(a0)
0001991C 4228 0024                  		clr.b	$24(a0)
00019920 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019926 6700                       		beq.s	Obj7B_MakeFrag
00019928 4E75                       		rts	
0001992A                            ; ===========================================================================
0001992A                            
0001992A                            Obj7B_MakeFrag:
0001992A 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019930 7203                       		moveq	#3,d1
00019932 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019936                            
00019936                            Obj7B_Loop:
00019936 4EB9 0000 E288             		jsr	SingleObjLoad
0001993C 6600                       		bne.s	loc_1909A
0001993E 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019942 137C 000A 0024             		move.b	#$A,$24(a1)
00019948 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019950 137C 0003 0018             		move.b	#3,$18(a1)
00019956 337C 0518 0002             		move.w	#$518,2(a1)
0001995C 3368 0008 0008             		move.w	8(a0),8(a1)
00019962 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019968 335A 0010                  		move.w	(a2)+,$10(a1)
0001996C 335A 0012                  		move.w	(a2)+,$12(a1)
00019970 137C 0098 0020             		move.b	#$98,$20(a1)
00019976 0029 0004 0001             		ori.b	#4,1(a1)
0001997C 08E9 0007 0001             		bset	#7,1(a1)
00019982 137C 000C 0019             		move.b	#$C,$19(a1)
00019988                            
00019988                            loc_1909A:
00019988 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001998C                            
0001998C 4E75                       		rts	
0001998E                            ; ===========================================================================
0001998E FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019992 FF60 FDC0                  		dc.w $FF60, $FDC0
00019996 0100 FCC0                  		dc.w $100, $FCC0
0001999A 00A0 FDC0                  		dc.w $A0, $FDC0
0001999E                            ; ===========================================================================
0001999E                            
0001999E                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001999E 4EB9 0000 DDDC             		jsr	SpeedToPos
000199A4 3168 0008 0030             		move.w	8(a0),$30(a0)
000199AA 3168 000C 0034             		move.w	$C(a0),$34(a0)
000199B0 0668 0018 0012             		addi.w	#$18,$12(a0)
000199B6 7004                       		moveq	#4,d0
000199B8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000199BC E448                       		lsr.w	#2,d0
000199BE 1140 001A                  		move.b	d0,$1A(a0)
000199C2 4A28 0001                  		tst.b	1(a0)
000199C6 6A00 F7DC                  		bpl.w	Obj7A_Delete
000199CA 4E75                       		rts	
000199CC                            ; ===========================================================================
000199CC                            ; ---------------------------------------------------------------------------
000199CC                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000199CC                            ; ---------------------------------------------------------------------------
000199CC                            Map_obj7B:
000199CC                            	include "_maps\obj7B.asm"
000199CC                            ; ---------------------------------------------------------------------------
000199CC                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000199CC                            ; ---------------------------------------------------------------------------
000199CC 0000                       		dc.w byte_190E2-Map_obj7B
000199CE 0000                       		dc.w byte_190E8-Map_obj7B
000199D0 01                         byte_190E2:	dc.b 1
000199D1 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000199D6 01                         byte_190E8:	dc.b 1
000199D7 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000199DC                            		even
000199DC                            		even
000199DC                            
000199DC                            ; ===========================================================================
000199DC                            ; ---------------------------------------------------------------------------
000199DC                            ; Object 75 - Eggman (SYZ)
000199DC                            ; ---------------------------------------------------------------------------
000199DC                            
000199DC                            Obj75:					; XREF: Obj_Index
000199DC 7000                       		moveq	#0,d0
000199DE 1028 0024                  		move.b	$24(a0),d0
000199E2 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000199E6 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000199EA                            ; ===========================================================================
000199EA 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000199EC 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000199EE 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000199F0 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000199F2 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000199F4                            
000199F4 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000199F7 0401 05                    		dc.b 4,	1, 5
000199FA 0607 05                    		dc.b 6,	7, 5
000199FD 0800 05                    		dc.b 8,	0, 5
00019A00                            ; ===========================================================================
00019A00                            
00019A00                            Obj75_Main:				; XREF: Obj75_Index
00019A00 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019A06 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019A0C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019A12 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019A18 117C 000F 0020             		move.b	#$F,$20(a0)
00019A1E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019A24 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019A28 2248                       		movea.l	a0,a1
00019A2A 7203                       		moveq	#3,d1
00019A2C 6000                       		bra.s	Obj75_LoadBoss
00019A2E                            ; ===========================================================================
00019A2E                            
00019A2E                            Obj75_Loop:
00019A2E 4EB9 0000 E29E             		jsr	SingleObjLoad2
00019A34 6600                       		bne.s	Obj75_ShipMain
00019A36 12BC 0075                  		move.b	#$75,(a1)
00019A3A 3368 0008 0008             		move.w	8(a0),8(a1)
00019A40 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019A46                            
00019A46                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019A46 08A8 0000 0022             		bclr	#0,$22(a0)
00019A4C 4229 0025                  		clr.b	$25(a1)
00019A50 135A 0024                  		move.b	(a2)+,$24(a1)
00019A54 135A 001C                  		move.b	(a2)+,$1C(a1)
00019A58 135A 0018                  		move.b	(a2)+,$18(a1)
00019A5C 237C 0001 8664 0004        		move.l	#Map_Eggman,4(a1)
00019A64 337C 0400 0002             		move.w	#$400,2(a1)
00019A6A 137C 0004 0001             		move.b	#4,1(a1)
00019A70 137C 0020 0019             		move.b	#$20,$19(a1)
00019A76 2348 0034                  		move.l	a0,$34(a1)
00019A7A 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019A7E                            
00019A7E                            Obj75_ShipMain:				; XREF: Obj75_Index
00019A7E 7000                       		moveq	#0,d0
00019A80 1028 0025                  		move.b	$25(a0),d0
00019A84 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019A88 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019A8C 43F9 0001 8600             		lea	(Ani_Eggman).l,a1
00019A92 4EB9 0000 AEC2             		jsr	AnimateSprite
00019A98 7003                       		moveq	#3,d0
00019A9A C028 0022                  		and.b	$22(a0),d0
00019A9E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019AA4 8128 0001                  		or.b	d0,1(a0)
00019AA8 4EF9 0000 DE02             		jmp	DisplaySprite
00019AAE                            ; ===========================================================================
00019AAE 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019AB2 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019AB6 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019ABA                            ; ===========================================================================
00019ABA                            
00019ABA                            loc_191CC:				; XREF: Obj75_ShipIndex
00019ABA 317C FF00 0010             		move.w	#-$100,$10(a0)
00019AC0 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019AC6 6400                       		bcc.s	loc_191DE
00019AC8 5428 0025                  		addq.b	#2,$25(a0)
00019ACC                            
00019ACC                            loc_191DE:
00019ACC 1028 003F                  		move.b	$3F(a0),d0
00019AD0 5428 003F                  		addq.b	#2,$3F(a0)
00019AD4 4EB9 0000 2CEC             		jsr	(CalcSine).l
00019ADA E440                       		asr.w	#2,d0
00019ADC 3140 0012                  		move.w	d0,$12(a0)
00019AE0                            
00019AE0                            loc_191F2:
00019AE0 6100 E6DC                  		bsr.w	BossMove
00019AE4 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019AEA 3168 0030 0008             		move.w	$30(a0),8(a0)
00019AF0                            
00019AF0                            loc_19202:
00019AF0 3028 0008                  		move.w	8(a0),d0
00019AF4 0440 2C00                  		subi.w	#$2C00,d0
00019AF8 EA48                       		lsr.w	#5,d0
00019AFA 1140 0034                  		move.b	d0,$34(a0)
00019AFE 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019B04 6400                       		bcc.s	locret_19256
00019B06 4A28 0022                  		tst.b	$22(a0)
00019B0A 6B00                       		bmi.s	loc_19258
00019B0C 4A28 0020                  		tst.b	$20(a0)
00019B10 6600                       		bne.s	locret_19256
00019B12 4A28 003E                  		tst.b	$3E(a0)
00019B16 6600                       		bne.s	loc_1923A
00019B18 117C 0020 003E             		move.b	#$20,$3E(a0)
00019B1E 303C 00AC                  		move.w	#$AC,d0
00019B22 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019B28                            
00019B28                            loc_1923A:
00019B28 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019B2C 7000                       		moveq	#0,d0
00019B2E 4A51                       		tst.w	(a1)
00019B30 6600                       		bne.s	loc_19248
00019B32 303C 0EEE                  		move.w	#$EEE,d0
00019B36                            
00019B36                            loc_19248:
00019B36 3280                       		move.w	d0,(a1)
00019B38 5328 003E                  		subq.b	#1,$3E(a0)
00019B3C 6600                       		bne.s	locret_19256
00019B3E 117C 000F 0020             		move.b	#$F,$20(a0)
00019B44                            
00019B44                            locret_19256:
00019B44 4E75                       		rts	
00019B46                            ; ===========================================================================
00019B46                            
00019B46                            loc_19258:				; XREF: loc_19202
00019B46 7064                       		moveq	#100,d0
00019B48 6100 0000                  		bsr.w	AddPoints
00019B4C 117C 0006 0025             		move.b	#6,$25(a0)
00019B52 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019B58 4268 0010                  		clr.w	$10(a0)
00019B5C 4E75                       		rts	
00019B5E                            ; ===========================================================================
00019B5E                            
00019B5E                            loc_19270:				; XREF: Obj75_ShipIndex
00019B5E 3028 0030                  		move.w	$30(a0),d0
00019B62 317C 0140 0010             		move.w	#$140,$10(a0)
00019B68 0828 0000 0022             		btst	#0,$22(a0)
00019B6E 6600                       		bne.s	loc_1928E
00019B70 4468 0010                  		neg.w	$10(a0)
00019B74 0C40 2C08                  		cmpi.w	#$2C08,d0
00019B78 6E00                       		bgt.s	loc_1929E
00019B7A 6000                       		bra.s	loc_19294
00019B7C                            ; ===========================================================================
00019B7C                            
00019B7C                            loc_1928E:
00019B7C 0C40 2D38                  		cmpi.w	#$2D38,d0
00019B80 6D00                       		blt.s	loc_1929E
00019B82                            
00019B82                            loc_19294:
00019B82 0868 0000 0022             		bchg	#0,$22(a0)
00019B88 4228 003D                  		clr.b	$3D(a0)
00019B8C                            
00019B8C                            loc_1929E:
00019B8C 0440 2C10                  		subi.w	#$2C10,d0
00019B90 0240 001F                  		andi.w	#$1F,d0
00019B94 0440 001F                  		subi.w	#$1F,d0
00019B98 6A00                       		bpl.s	loc_192AE
00019B9A 4440                       		neg.w	d0
00019B9C                            
00019B9C                            loc_192AE:
00019B9C 5340                       		subq.w	#1,d0
00019B9E 6E00                       		bgt.s	loc_192E8
00019BA0 4A28 003D                  		tst.b	$3D(a0)
00019BA4 6600                       		bne.s	loc_192E8
00019BA6 3238 D008                  		move.w	($FFFFD008).w,d1
00019BAA 0441 2C00                  		subi.w	#$2C00,d1
00019BAE EA41                       		asr.w	#5,d1
00019BB0 B228 0034                  		cmp.b	$34(a0),d1
00019BB4 6600                       		bne.s	loc_192E8
00019BB6 7000                       		moveq	#0,d0
00019BB8 1028 0034                  		move.b	$34(a0),d0
00019BBC EB40                       		asl.w	#5,d0
00019BBE 0640 2C10                  		addi.w	#$2C10,d0
00019BC2 3140 0030                  		move.w	d0,$30(a0)
00019BC6 6100 0000                  		bsr.w	Obj75_FindBlocks
00019BCA 5428 0025                  		addq.b	#2,$25(a0)
00019BCE 4268 0028                  		clr.w	$28(a0)
00019BD2 4268 0010                  		clr.w	$10(a0)
00019BD6                            
00019BD6                            loc_192E8:
00019BD6 6000 FEF4                  		bra.w	loc_191DE
00019BDA                            ; ===========================================================================
00019BDA                            
00019BDA                            loc_192EC:				; XREF: Obj75_ShipIndex
00019BDA 7000                       		moveq	#0,d0
00019BDC 1028 0028                  		move.b	$28(a0),d0
00019BE0 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019BE4 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019BE8                            ; ===========================================================================
00019BE8 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019BEA 0000                       		dc.w loc_19348-off_192FA
00019BEC 0000                       		dc.w loc_1938E-off_192FA
00019BEE 0000                       		dc.w loc_193D0-off_192FA
00019BF0                            ; ===========================================================================
00019BF0                            
00019BF0                            loc_19302:				; XREF: off_192FA
00019BF0 317C 0180 0012             		move.w	#$180,$12(a0)
00019BF6 3028 0038                  		move.w	$38(a0),d0
00019BFA 0C40 0556                  		cmpi.w	#$556,d0
00019BFE 6500                       		bcs.s	loc_19344
00019C00 317C 0556 0038             		move.w	#$556,$38(a0)
00019C06 4268 003C                  		clr.w	$3C(a0)
00019C0A 70FF                       		moveq	#-1,d0
00019C0C 3028 0036                  		move.w	$36(a0),d0
00019C10 6700                       		beq.s	loc_1933C
00019C12 2240                       		movea.l	d0,a1
00019C14 137C 00FF 0029             		move.b	#-1,$29(a1)
00019C1A 117C 00FF 0029             		move.b	#-1,$29(a0)
00019C20 2348 0034                  		move.l	a0,$34(a1)
00019C24 317C 0032 003C             		move.w	#$32,$3C(a0)
00019C2A                            
00019C2A                            loc_1933C:
00019C2A 4268 0012                  		clr.w	$12(a0)
00019C2E 5428 0028                  		addq.b	#2,$28(a0)
00019C32                            
00019C32                            loc_19344:
00019C32 6000 FEAC                  		bra.w	loc_191F2
00019C36                            ; ===========================================================================
00019C36                            
00019C36                            loc_19348:				; XREF: off_192FA
00019C36 5368 003C                  		subq.w	#1,$3C(a0)
00019C3A 6A00                       		bpl.s	loc_19366
00019C3C 5428 0028                  		addq.b	#2,$28(a0)
00019C40 317C F800 0012             		move.w	#-$800,$12(a0)
00019C46 4A68 0036                  		tst.w	$36(a0)
00019C4A 6600                       		bne.s	loc_19362
00019C4C E0E8 0012                  		asr	$12(a0)
00019C50                            
00019C50                            loc_19362:
00019C50 7000                       		moveq	#0,d0
00019C52 6000                       		bra.s	loc_1937C
00019C54                            ; ===========================================================================
00019C54                            
00019C54                            loc_19366:
00019C54 7000                       		moveq	#0,d0
00019C56 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019C5C 6E00                       		bgt.s	loc_1937C
00019C5E 7002                       		moveq	#2,d0
00019C60 0828 0001 003D             		btst	#1,$3D(a0)
00019C66 6700                       		beq.s	loc_1937C
00019C68 4440                       		neg.w	d0
00019C6A                            
00019C6A                            loc_1937C:
00019C6A D068 0038                  		add.w	$38(a0),d0
00019C6E 3140 000C                  		move.w	d0,$C(a0)
00019C72 3168 0030 0008             		move.w	$30(a0),8(a0)
00019C78 6000 FE76                  		bra.w	loc_19202
00019C7C                            ; ===========================================================================
00019C7C                            
00019C7C                            loc_1938E:				; XREF: off_192FA
00019C7C 303C 04DA                  		move.w	#$4DA,d0
00019C80 4A68 0036                  		tst.w	$36(a0)
00019C84 6700                       		beq.s	loc_1939C
00019C86 0440 0018                  		subi.w	#$18,d0
00019C8A                            
00019C8A                            loc_1939C:
00019C8A B068 0038                  		cmp.w	$38(a0),d0
00019C8E 6D00                       		blt.s	loc_193BE
00019C90 317C 0008 003C             		move.w	#8,$3C(a0)
00019C96 4A68 0036                  		tst.w	$36(a0)
00019C9A 6700                       		beq.s	loc_193B4
00019C9C 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019CA2                            
00019CA2                            loc_193B4:
00019CA2 5428 0028                  		addq.b	#2,$28(a0)
00019CA6 4268 0012                  		clr.w	$12(a0)
00019CAA 6000                       		bra.s	loc_193CC
00019CAC                            ; ===========================================================================
00019CAC                            
00019CAC                            loc_193BE:
00019CAC 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019CB2 6C00                       		bge.s	loc_193CC
00019CB4 0668 000C 0012             		addi.w	#$C,$12(a0)
00019CBA                            
00019CBA                            loc_193CC:
00019CBA 6000 FE24                  		bra.w	loc_191F2
00019CBE                            ; ===========================================================================
00019CBE                            
00019CBE                            loc_193D0:				; XREF: off_192FA
00019CBE 5368 003C                  		subq.w	#1,$3C(a0)
00019CC2 6E00                       		bgt.s	loc_19406
00019CC4 6B00                       		bmi.s	loc_193EE
00019CC6 70FF                       		moveq	#-1,d0
00019CC8 3028 0036                  		move.w	$36(a0),d0
00019CCC 6700                       		beq.s	loc_193E8
00019CCE 2240                       		movea.l	d0,a1
00019CD0 137C 000A 0029             		move.b	#$A,$29(a1)
00019CD6                            
00019CD6                            loc_193E8:
00019CD6 4268 0036                  		clr.w	$36(a0)
00019CDA 6000                       		bra.s	loc_19406
00019CDC                            ; ===========================================================================
00019CDC                            
00019CDC                            loc_193EE:
00019CDC 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019CE2 6600                       		bne.s	loc_19406
00019CE4 4228 0029                  		clr.b	$29(a0)
00019CE8 5528 0025                  		subq.b	#2,$25(a0)
00019CEC 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019CF2 6000                       		bra.s	loc_19446
00019CF4                            ; ===========================================================================
00019CF4                            
00019CF4                            loc_19406:
00019CF4 7001                       		moveq	#1,d0
00019CF6 4A68 0036                  		tst.w	$36(a0)
00019CFA 6700                       		beq.s	loc_19410
00019CFC 7002                       		moveq	#2,d0
00019CFE                            
00019CFE                            loc_19410:
00019CFE 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019D04 6700                       		beq.s	loc_19424
00019D06 6D00                       		blt.s	loc_1941C
00019D08 4440                       		neg.w	d0
00019D0A                            
00019D0A                            loc_1941C:
00019D0A 4A68 0036                  		tst.w	$36(a0)
00019D0E D168 0038                  		add.w	d0,$38(a0)
00019D12                            
00019D12                            loc_19424:
00019D12 7000                       		moveq	#0,d0
00019D14 4A68 0036                  		tst.w	$36(a0)
00019D18 6700                       		beq.s	loc_19438
00019D1A 7002                       		moveq	#2,d0
00019D1C 0828 0000 003D             		btst	#0,$3D(a0)
00019D22 6700                       		beq.s	loc_19438
00019D24 4440                       		neg.w	d0
00019D26                            
00019D26                            loc_19438:
00019D26 D068 0038                  		add.w	$38(a0),d0
00019D2A 3140 000C                  		move.w	d0,$C(a0)
00019D2E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D34                            
00019D34                            loc_19446:
00019D34 6000 FDBA                  		bra.w	loc_19202
00019D38                            
00019D38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D38                            
00019D38                            
00019D38                            Obj75_FindBlocks:			; XREF: loc_192AE
00019D38 4268 0036                  		clr.w	$36(a0)
00019D3C 43F8 D040                  		lea	($FFFFD040).w,a1
00019D40 703E                       		moveq	#$3E,d0
00019D42 7276                       		moveq	#$76,d1
00019D44 1428 0034                  		move.b	$34(a0),d2
00019D48                            
00019D48                            Obj75_FindLoop:
00019D48 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019D4A 6600                       		bne.s	loc_1946A	; if not, branch
00019D4C B429 0028                  		cmp.b	$28(a1),d2
00019D50 6600                       		bne.s	loc_1946A
00019D52 3149 0036                  		move.w	a1,$36(a0)
00019D56 6000                       		bra.s	locret_19472
00019D58                            ; ===========================================================================
00019D58                            
00019D58                            loc_1946A:
00019D58 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019D5C 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019D60                            
00019D60                            locret_19472:
00019D60 4E75                       		rts	
00019D62                            ; End of function Obj75_FindBlocks
00019D62                            
00019D62                            ; ===========================================================================
00019D62                            
00019D62                            loc_19474:				; XREF: Obj75_ShipIndex
00019D62 5368 003C                  		subq.w	#1,$3C(a0)
00019D66 6B00                       		bmi.s	loc_1947E
00019D68 6000 E412                  		bra.w	BossDefeated
00019D6C                            ; ===========================================================================
00019D6C                            
00019D6C                            loc_1947E:
00019D6C 5428 0025                  		addq.b	#2,$25(a0)
00019D70 4268 0012                  		clr.w	$12(a0)
00019D74 08E8 0000 0022             		bset	#0,$22(a0)
00019D7A 08A8 0007 0022             		bclr	#7,$22(a0)
00019D80 4268 0010                  		clr.w	$10(a0)
00019D84 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019D8A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019D8E 6600                       		bne.s	loc_194A8
00019D90 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019D96                            
00019D96                            loc_194A8:
00019D96 6000 FD58                  		bra.w	loc_19202
00019D9A                            ; ===========================================================================
00019D9A                            
00019D9A                            loc_194AC:				; XREF: Obj75_ShipIndex
00019D9A 5268 003C                  		addq.w	#1,$3C(a0)
00019D9E 6700                       		beq.s	loc_194BC
00019DA0 6A00                       		bpl.s	loc_194C2
00019DA2 0668 0018 0012             		addi.w	#$18,$12(a0)
00019DA8 6000                       		bra.s	loc_194EE
00019DAA                            ; ===========================================================================
00019DAA                            
00019DAA                            loc_194BC:
00019DAA 4268 0012                  		clr.w	$12(a0)
00019DAE 6000                       		bra.s	loc_194EE
00019DB0                            ; ===========================================================================
00019DB0                            
00019DB0                            loc_194C2:
00019DB0 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019DB6 6500                       		bcs.s	loc_194DA
00019DB8 6700                       		beq.s	loc_194E0
00019DBA 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019DC0 6500                       		bcs.s	loc_194EE
00019DC2 5428 0025                  		addq.b	#2,$25(a0)
00019DC6 6000                       		bra.s	loc_194EE
00019DC8                            ; ===========================================================================
00019DC8                            
00019DC8                            loc_194DA:
00019DC8 5168 0012                  		subq.w	#8,$12(a0)
00019DCC 6000                       		bra.s	loc_194EE
00019DCE                            ; ===========================================================================
00019DCE                            
00019DCE                            loc_194E0:
00019DCE 4268 0012                  		clr.w	$12(a0)
00019DD2 303C 0085                  		move.w	#$85,d0
00019DD6 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SYZ music
00019DDC                            
00019DDC                            loc_194EE:
00019DDC 6000 FD02                  		bra.w	loc_191F2
00019DE0                            ; ===========================================================================
00019DE0                            
00019DE0                            loc_194F2:				; XREF: Obj75_ShipIndex
00019DE0 317C 0400 0010             		move.w	#$400,$10(a0)
00019DE6 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019DEC 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019DF2 6400                       		bcc.s	loc_1950C
00019DF4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019DF8 6000                       		bra.s	loc_19512
00019DFA                            ; ===========================================================================
00019DFA                            
00019DFA                            loc_1950C:
00019DFA 4A28 0001                  		tst.b	1(a0)
00019DFE 6A00                       		bpl.s	Obj75_ShipDelete
00019E00                            
00019E00                            loc_19512:
00019E00 6100 E3BC                  		bsr.w	BossMove
00019E04 6000 FCC6                  		bra.w	loc_191DE
00019E08                            ; ===========================================================================
00019E08                            
00019E08                            Obj75_ShipDelete:
00019E08 4EF9 0000 DE3E             		jmp	DeleteObject
00019E0E                            ; ===========================================================================
00019E0E                            
00019E0E                            Obj75_FaceMain:				; XREF: Obj75_Index
00019E0E 7201                       		moveq	#1,d1
00019E10 2268 0034                  		movea.l	$34(a0),a1
00019E14 7000                       		moveq	#0,d0
00019E16 1029 0025                  		move.b	$25(a1),d0
00019E1A 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019E1E 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019E22 1141 001C                  		move.b	d1,$1C(a0)
00019E26 1010                       		move.b	(a0),d0
00019E28 B011                       		cmp.b	(a1),d0
00019E2A 6600                       		bne.s	Obj75_FaceDelete
00019E2C 6000                       		bra.s	loc_195BE
00019E2E                            ; ===========================================================================
00019E2E                            
00019E2E                            Obj75_FaceDelete:
00019E2E 4EF9 0000 DE3E             		jmp	DeleteObject
00019E34                            ; ===========================================================================
00019E34 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019E38 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019E3C 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019E40                            ; ===========================================================================
00019E40                            
00019E40                            loc_19552:				; XREF: off_19546
00019E40 720A                       		moveq	#$A,d1
00019E42 4E75                       		rts	
00019E44                            ; ===========================================================================
00019E44                            
00019E44                            loc_19556:				; XREF: off_19546
00019E44 7206                       		moveq	#6,d1
00019E46 4E75                       		rts	
00019E48                            ; ===========================================================================
00019E48                            
00019E48                            loc_1955A:				; XREF: off_19546
00019E48 7000                       		moveq	#0,d0
00019E4A 1029 0028                  		move.b	$28(a1),d0
00019E4E 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019E52 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019E56                            ; ===========================================================================
00019E56 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019E5A 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019E5E                            ; ===========================================================================
00019E5E                            
00019E5E                            loc_19570:				; XREF: off_19568
00019E5E 6000                       		bra.s	loc_19574
00019E60                            ; ===========================================================================
00019E60                            
00019E60                            loc_19572:				; XREF: off_19568
00019E60 7206                       		moveq	#6,d1
00019E62                            
00019E62                            loc_19574:				; XREF: off_19546
00019E62 4A29 0020                  		tst.b	$20(a1)
00019E66 6600                       		bne.s	loc_1957E
00019E68 7205                       		moveq	#5,d1
00019E6A 4E75                       		rts	
00019E6C                            ; ===========================================================================
00019E6C                            
00019E6C                            loc_1957E:
00019E6C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019E72 6500                       		bcs.s	locret_19588
00019E74 7204                       		moveq	#4,d1
00019E76                            
00019E76                            locret_19588:
00019E76 4E75                       		rts	
00019E78                            ; ===========================================================================
00019E78                            
00019E78                            Obj75_FlameMain:			; XREF: Obj75_Index
00019E78 117C 0007 001C             		move.b	#7,$1C(a0)
00019E7E 2268 0034                  		movea.l	$34(a0),a1
00019E82 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019E88 6600                       		bne.s	loc_195AA
00019E8A 117C 000B 001C             		move.b	#$B,$1C(a0)
00019E90 4A28 0001                  		tst.b	1(a0)
00019E94 6A00                       		bpl.s	Obj75_FlameDelete
00019E96 6000                       		bra.s	loc_195B6
00019E98                            ; ===========================================================================
00019E98                            
00019E98                            loc_195AA:
00019E98 4A69 0010                  		tst.w	$10(a1)
00019E9C 6700                       		beq.s	loc_195B6
00019E9E 117C 0008 001C             		move.b	#8,$1C(a0)
00019EA4                            
00019EA4                            loc_195B6:
00019EA4 6000                       		bra.s	loc_195BE
00019EA6                            ; ===========================================================================
00019EA6                            
00019EA6                            Obj75_FlameDelete:
00019EA6 4EF9 0000 DE3E             		jmp	DeleteObject
00019EAC                            ; ===========================================================================
00019EAC                            
00019EAC                            loc_195BE:
00019EAC 43F9 0001 8600             		lea	(Ani_Eggman).l,a1
00019EB2 4EB9 0000 AEC2             		jsr	AnimateSprite
00019EB8 2268 0034                  		movea.l	$34(a0),a1
00019EBC 3169 0008 0008             		move.w	8(a1),8(a0)
00019EC2 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019EC8                            
00019EC8                            loc_195DA:
00019EC8 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019ECE 7003                       		moveq	#3,d0
00019ED0 C028 0022                  		and.b	$22(a0),d0
00019ED4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019EDA 8128 0001                  		or.b	d0,1(a0)
00019EDE 4EF9 0000 DE02             		jmp	DisplaySprite
00019EE4                            ; ===========================================================================
00019EE4                            
00019EE4                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019EE4 217C 0001 872C 0004        		move.l	#Map_BossItems,4(a0)
00019EEC 317C 246C 0002             		move.w	#$246C,2(a0)
00019EF2 117C 0005 001A             		move.b	#5,$1A(a0)
00019EF8 2268 0034                  		movea.l	$34(a0),a1
00019EFC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F02 6600                       		bne.s	loc_1961C
00019F04 4A28 0001                  		tst.b	1(a0)
00019F08 6A00                       		bpl.s	Obj75_SpikeDelete
00019F0A                            
00019F0A                            loc_1961C:
00019F0A 3169 0008 0008             		move.w	8(a1),8(a0)
00019F10 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F16 3028 003C                  		move.w	$3C(a0),d0
00019F1A 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019F20 6600                       		bne.s	loc_19652
00019F22 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019F28 6700                       		beq.s	loc_1964C
00019F2A 4A29 0028                  		tst.b	$28(a1)
00019F2E 6600                       		bne.s	loc_19658
00019F30 0C40 0094                  		cmpi.w	#$94,d0
00019F34 6C00                       		bge.s	loc_19658
00019F36 5E40                       		addq.w	#7,d0
00019F38 6000                       		bra.s	loc_19658
00019F3A                            ; ===========================================================================
00019F3A                            
00019F3A                            loc_1964C:
00019F3A 4A69 003C                  		tst.w	$3C(a1)
00019F3E 6A00                       		bpl.s	loc_19658
00019F40                            
00019F40                            loc_19652:
00019F40 4A40                       		tst.w	d0
00019F42 6F00                       		ble.s	loc_19658
00019F44 5B40                       		subq.w	#5,d0
00019F46                            
00019F46                            loc_19658:
00019F46 3140 003C                  		move.w	d0,$3C(a0)
00019F4A E440                       		asr.w	#2,d0
00019F4C D168 000C                  		add.w	d0,$C(a0)
00019F50 117C 0008 0019             		move.b	#8,$19(a0)
00019F56 117C 000C 0016             		move.b	#$C,$16(a0)
00019F5C 4228 0020                  		clr.b	$20(a0)
00019F60 2268 0034                  		movea.l	$34(a0),a1
00019F64 4A29 0020                  		tst.b	$20(a1)
00019F68 6700                       		beq.s	loc_19688
00019F6A 4A29 0029                  		tst.b	$29(a1)
00019F6E 6600                       		bne.s	loc_19688
00019F70 117C 0084 0020             		move.b	#$84,$20(a0)
00019F76                            
00019F76                            loc_19688:
00019F76 6000 FF50                  		bra.w	loc_195DA
00019F7A                            ; ===========================================================================
00019F7A                            
00019F7A                            Obj75_SpikeDelete:
00019F7A 4EF9 0000 DE3E             		jmp	DeleteObject
00019F80                            ; ===========================================================================
00019F80                            ; ---------------------------------------------------------------------------
00019F80                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019F80                            ; ---------------------------------------------------------------------------
00019F80                            
00019F80                            Obj76:					; XREF: Obj_Index
00019F80 7000                       		moveq	#0,d0
00019F82 1028 0024                  		move.b	$24(a0),d0
00019F86 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019F8A 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019F8E                            ; ===========================================================================
00019F8E 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019F90 0000                       		dc.w Obj76_Action-Obj76_Index
00019F92 0000                       		dc.w loc_19762-Obj76_Index
00019F94                            ; ===========================================================================
00019F94                            
00019F94                            Obj76_Main:				; XREF: Obj76_Index
00019F94 7800                       		moveq	#0,d4
00019F96 3A3C 2C10                  		move.w	#$2C10,d5
00019F9A 7C09                       		moveq	#9,d6
00019F9C 43D0                       		lea	(a0),a1
00019F9E 6000                       		bra.s	Obj76_MakeBlock
00019FA0                            ; ===========================================================================
00019FA0                            
00019FA0                            Obj76_Loop:
00019FA0 4EB9 0000 E288             		jsr	SingleObjLoad
00019FA6 6600                       		bne.s	Obj76_ExitLoop
00019FA8                            
00019FA8                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019FA8 12BC 0076                  		move.b	#$76,(a1)
00019FAC 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019FB4 337C 4000 0002             		move.w	#$4000,2(a1)
00019FBA 137C 0004 0001             		move.b	#4,1(a1)
00019FC0 137C 0010 0019             		move.b	#$10,$19(a1)
00019FC6 137C 0010 0016             		move.b	#$10,$16(a1)
00019FCC 137C 0003 0018             		move.b	#3,$18(a1)
00019FD2 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019FD6 337C 0582 000C             		move.w	#$582,$C(a1)
00019FDC 3344 0028                  		move.w	d4,$28(a1)
00019FE0 0644 0101                  		addi.w	#$101,d4
00019FE4 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019FE8 5429 0024                  		addq.b	#2,$24(a1)
00019FEC 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019FF0                            
00019FF0                            Obj76_ExitLoop:
00019FF0 4E75                       		rts	
00019FF2                            ; ===========================================================================
00019FF2                            
00019FF2                            Obj76_Action:				; XREF: Obj76_Index
00019FF2 1028 0029                  		move.b	$29(a0),d0
00019FF6 B028 0028                  		cmp.b	$28(a0),d0
00019FFA 6700                       		beq.s	Obj76_Solid
00019FFC 4A00                       		tst.b	d0
00019FFE 6B00                       		bmi.s	loc_19718
0001A000                            
0001A000                            loc_19712:
0001A000 6100 0000                  		bsr.w	Obj76_Break
0001A004 6000                       		bra.s	Obj76_Display
0001A006                            ; ===========================================================================
0001A006                            
0001A006                            loc_19718:
0001A006 2268 0034                  		movea.l	$34(a0),a1
0001A00A 4A29 0021                  		tst.b	$21(a1)
0001A00E 67F0                       		beq.s	loc_19712
0001A010 3169 0008 0008             		move.w	8(a1),8(a0)
0001A016 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A01C 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A022 B2C8                       		cmpa.w	a0,a1
0001A024 6500                       		bcs.s	Obj76_Display
0001A026 3029 0012                  		move.w	$12(a1),d0
0001A02A 48C0                       		ext.l	d0
0001A02C E080                       		asr.l	#8,d0
0001A02E D168 000C                  		add.w	d0,$C(a0)
0001A032 6000                       		bra.s	Obj76_Display
0001A034                            ; ===========================================================================
0001A034                            
0001A034                            Obj76_Solid:				; XREF: Obj76_Action
0001A034 323C 001B                  		move.w	#$1B,d1
0001A038 343C 0010                  		move.w	#$10,d2
0001A03C 363C 0011                  		move.w	#$11,d3
0001A040 3828 0008                  		move.w	8(a0),d4
0001A044 4EB9 0001 01D2             		jsr	SolidObject
0001A04A                            
0001A04A                            Obj76_Display:				; XREF: Obj76_Action
0001A04A 4EF9 0000 DE02             		jmp	DisplaySprite
0001A050                            ; ===========================================================================
0001A050                            
0001A050                            loc_19762:				; XREF: Obj76_Index
0001A050 4A28 0001                  		tst.b	1(a0)
0001A054 6A00                       		bpl.s	Obj76_Delete
0001A056 4EB9 0000 DDB0             		jsr	ObjectFall
0001A05C 4EF9 0000 DE02             		jmp	DisplaySprite
0001A062                            ; ===========================================================================
0001A062                            
0001A062                            Obj76_Delete:
0001A062 4EF9 0000 DE3E             		jmp	DeleteObject
0001A068                            
0001A068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A068                            
0001A068                            
0001A068                            Obj76_Break:				; XREF: Obj76_Action
0001A068 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A06C 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A070 7801                       		moveq	#1,d4
0001A072 7203                       		moveq	#3,d1
0001A074 7438                       		moveq	#$38,d2
0001A076 5428 0024                  		addq.b	#2,$24(a0)
0001A07A 117C 0008 0019             		move.b	#8,$19(a0)
0001A080 117C 0008 0016             		move.b	#8,$16(a0)
0001A086 43D0                       		lea	(a0),a1
0001A088 6000                       		bra.s	Obj76_MakeFrag
0001A08A                            ; ===========================================================================
0001A08A                            
0001A08A                            Obj76_LoopFrag:
0001A08A 4EB9 0000 E29E             		jsr	SingleObjLoad2
0001A090 6600                       		bne.s	loc_197D4
0001A092                            
0001A092                            Obj76_MakeFrag:
0001A092 45D0                       		lea	(a0),a2
0001A094 47D1                       		lea	(a1),a3
0001A096 7603                       		moveq	#3,d3
0001A098                            
0001A098                            loc_197AA:
0001A098 26DA                       		move.l	(a2)+,(a3)+
0001A09A 26DA                       		move.l	(a2)+,(a3)+
0001A09C 26DA                       		move.l	(a2)+,(a3)+
0001A09E 26DA                       		move.l	(a2)+,(a3)+
0001A0A0 51CB FFF6                  		dbf	d3,loc_197AA
0001A0A4                            
0001A0A4 335C 0010                  		move.w	(a4)+,$10(a1)
0001A0A8 335C 0012                  		move.w	(a4)+,$12(a1)
0001A0AC 361D                       		move.w	(a5)+,d3
0001A0AE D769 0008                  		add.w	d3,8(a1)
0001A0B2 361D                       		move.w	(a5)+,d3
0001A0B4 D769 000C                  		add.w	d3,$C(a1)
0001A0B8 1344 001A                  		move.b	d4,$1A(a1)
0001A0BC 5244                       		addq.w	#1,d4
0001A0BE 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A0C2                            
0001A0C2                            loc_197D4:
0001A0C2 303C 00CB                  		move.w	#$CB,d0
0001A0C6 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A0CC                            ; End of function Obj76_Break
0001A0CC                            
0001A0CC                            ; ===========================================================================
0001A0CC FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A0D0 0180 FE00                  		dc.w $180, $FE00
0001A0D4 FF00 FF00                  		dc.w $FF00, $FF00
0001A0D8 0100 FF00                  		dc.w $100, $FF00
0001A0DC FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A0E0 0010 0000                  		dc.w $10, 0
0001A0E4 0000 0010                  		dc.w 0,	$10
0001A0E8 0010 0010                  		dc.w $10, $10
0001A0EC                            ; ---------------------------------------------------------------------------
0001A0EC                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A0EC                            ; ---------------------------------------------------------------------------
0001A0EC                            Map_obj76:
0001A0EC                            	include "_maps\obj76.asm"
0001A0EC                            ; ---------------------------------------------------------------------------
0001A0EC                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A0EC                            ; ---------------------------------------------------------------------------
0001A0EC 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A0F0 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A0F4 0000                       		dc.w byte_19826-Map_obj76
0001A0F6 02                         byte_19808:	dc.b 2
0001A0F7 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A0FC 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A101 00                         		dc.b 0
0001A102 01                         byte_19814:	dc.b 1
0001A103 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A108 01                         byte_1981A:	dc.b 1
0001A109 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A10E 01                         byte_19820:	dc.b 1
0001A10F F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A114 01                         byte_19826:	dc.b 1
0001A115 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A11A                            		even
0001A11A                            		even
0001A11A                            
0001A11A                            ; ===========================================================================
0001A11A                            
0001A11A                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A11A 4EF9 0000 DE3E             		jmp	DeleteObject
0001A120                            ; ===========================================================================
0001A120                            ; ---------------------------------------------------------------------------
0001A120                            ; Object 82 - Eggman (SBZ2)
0001A120                            ; ---------------------------------------------------------------------------
0001A120                            
0001A120                            Obj82:					; XREF: Obj_Index
0001A120 7000                       		moveq	#0,d0
0001A122 1028 0024                  		move.b	$24(a0),d0
0001A126 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A12A 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A12E                            ; ===========================================================================
0001A12E 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A130 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A132 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A134                            
0001A134 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A137 0400 03                    		dc.b 4,	0, 3
0001A13A                            ; ===========================================================================
0001A13A                            
0001A13A                            Obj82_Main:				; XREF: Obj82_Index
0001A13A 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A13E 317C 2160 0008             		move.w	#$2160,8(a0)
0001A144 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A14A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A150 117C 0010 0021             		move.b	#$10,$21(a0)
0001A156 08A8 0000 0022             		bclr	#0,$22(a0)
0001A15C 4228 0025                  		clr.b	$25(a0)
0001A160 115A 0024                  		move.b	(a2)+,$24(a0)
0001A164 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A168 115A 0018                  		move.b	(a2)+,$18(a0)
0001A16C 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A174 317C 0400 0002             		move.w	#$400,2(a0)
0001A17A 117C 0004 0001             		move.b	#4,1(a0)
0001A180 08E8 0007 0001             		bset	#7,1(a0)
0001A186 117C 0020 0019             		move.b	#$20,$19(a0)
0001A18C 4EB9 0000 E29E             		jsr	SingleObjLoad2
0001A192 6600                       		bne.s	Obj82_Eggman
0001A194 2348 0034                  		move.l	a0,$34(a1)
0001A198 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A19C 337C 2130 0008             		move.w	#$2130,8(a1)
0001A1A2 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A1A8 4228 0025                  		clr.b	$25(a0)
0001A1AC 135A 0024                  		move.b	(a2)+,$24(a1)
0001A1B0 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A1B4 135A 0018                  		move.b	(a2)+,$18(a1)
0001A1B8 237C 0000 C5F6 0004        		move.l	#Map_obj32,4(a1)
0001A1C0 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A1C6 137C 0004 0001             		move.b	#4,1(a1)
0001A1CC 08E9 0007 0001             		bset	#7,1(a1)
0001A1D2 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1D8 137C 0000 001A             		move.b	#0,$1A(a1)
0001A1DE                            
0001A1DE                            Obj82_Eggman:				; XREF: Obj82_Index
0001A1DE 7000                       		moveq	#0,d0
0001A1E0 1028 0025                  		move.b	$25(a0),d0
0001A1E4 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A1E8 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A1EC 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A1F0 4EB9 0000 AEC2             		jsr	AnimateSprite
0001A1F6 4EF9 0000 DE02             		jmp	DisplaySprite
0001A1FC                            ; ===========================================================================
0001A1FC 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A1FE 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A200 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A202 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A204                            ; ===========================================================================
0001A204                            
0001A204                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A204 3028 0008                  		move.w	8(a0),d0
0001A208 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A20C 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A210 6400                       		bcc.s	loc_19934	; if not, branch
0001A212 5428 0025                  		addq.b	#2,$25(a0)
0001A216 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A21C 117C 0001 001C             		move.b	#1,$1C(a0)
0001A222                            
0001A222                            loc_19934:				; XREF: Obj82_EggIndex
0001A222 4EF9 0000 DDDC             		jmp	SpeedToPos
0001A228                            ; ===========================================================================
0001A228                            
0001A228                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A228 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A22C 6600                       		bne.s	loc_19954	; if time remains, branch
0001A22E 5428 0025                  		addq.b	#2,$25(a0)
0001A232 117C 0002 001C             		move.b	#2,$1C(a0)
0001A238 5868 000C                  		addq.w	#4,$C(a0)
0001A23C 317C 000F 003C             		move.w	#15,$3C(a0)
0001A242                            
0001A242                            loc_19954:
0001A242 60DE                       		bra.s	loc_19934
0001A244                            ; ===========================================================================
0001A244                            
0001A244                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A244 5368 003C                  		subq.w	#1,$3C(a0)
0001A248 6E00                       		bgt.s	loc_199D0
0001A24A 6600                       		bne.s	loc_1996A
0001A24C 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A252 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A258                            
0001A258                            loc_1996A:
0001A258 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A25E 6E00                       		bgt.s	loc_19976
0001A260 4268 0010                  		clr.w	$10(a0)
0001A264                            
0001A264                            loc_19976:
0001A264 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A26A 4A68 0012                  		tst.w	$12(a0)
0001A26E 6B00                       		bmi.s	Obj82_FindBlocks
0001A270 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A276 6500                       		bcs.s	Obj82_FindBlocks
0001A278 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A27E 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A284 6500                       		bcs.s	Obj82_FindBlocks
0001A286 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A28C 4268 0012                  		clr.w	$12(a0)
0001A290                            
0001A290                            Obj82_FindBlocks:
0001A290 3028 0010                  		move.w	$10(a0),d0
0001A294 8068 0012                  		or.w	$12(a0),d0
0001A298 6600                       		bne.s	loc_199D0
0001A29A 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A29E 703E                       		moveq	#$3E,d0
0001A2A0 7240                       		moveq	#$40,d1
0001A2A2                            
0001A2A2                            Obj82_FindLoop:	
0001A2A2 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A2A4 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A2A8 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A2AC                            
0001A2AC 6600                       		bne.s	loc_199D0
0001A2AE 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A2B4 5428 0025                  		addq.b	#2,$25(a0)
0001A2B8 117C 0001 001C             		move.b	#1,$1C(a0)
0001A2BE                            
0001A2BE                            loc_199D0:
0001A2BE 6000 FF62                  		bra.w	loc_19934
0001A2C2                            ; ===========================================================================
0001A2C2                            
0001A2C2                            Obj82_Switch:				; XREF: Obj82_Index
0001A2C2 7000                       		moveq	#0,d0
0001A2C4 1028 0025                  		move.b	$25(a0),d0
0001A2C8 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A2CC 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A2D0                            ; ===========================================================================
0001A2D0 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A2D2 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A2D4                            ; ===========================================================================
0001A2D4                            
0001A2D4                            loc_199E6:				; XREF: Obj82_SwIndex
0001A2D4 2268 0034                  		movea.l	$34(a0),a1
0001A2D8 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A2DE 6600                       		bne.s	Obj82_SwDisplay
0001A2E0 117C 0001 001A             		move.b	#1,$1A(a0)
0001A2E6 5428 0025                  		addq.b	#2,$25(a0)
0001A2EA                            
0001A2EA                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A2EA 4EF9 0000 DE02             		jmp	DisplaySprite
0001A2F0                            ; ===========================================================================
0001A2F0                            Ani_obj82:
0001A2F0                            	include "_anim\obj82.asm"
0001A2F0                            ; ---------------------------------------------------------------------------
0001A2F0                            ; Animation script - Eggman (SBZ2)
0001A2F0                            ; ---------------------------------------------------------------------------
0001A2F0 0000                       		dc.w byte_19A10-Ani_obj82
0001A2F2 0000                       		dc.w byte_19A14-Ani_obj82
0001A2F4 0000                       		dc.w byte_19A18-Ani_obj82
0001A2F6 0000                       		dc.w byte_19A20-Ani_obj82
0001A2F8 0000                       		dc.w byte_19A24-Ani_obj82
0001A2FA 0000                       		dc.w byte_19A2A-Ani_obj82
0001A2FC 0000                       		dc.w byte_19A30-Ani_obj82
0001A2FE 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A302 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A306 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A30E 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A312 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A318 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A31E 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A322                            		even
0001A322                            		even
0001A322                            
0001A322                            ; ---------------------------------------------------------------------------
0001A322                            ; Sprite mappings - Eggman (SBZ2)
0001A322                            ; ---------------------------------------------------------------------------
0001A322                            Map_obj82:
0001A322                            	include "_maps\obj82.asm"
0001A322                            ; ================================================================================
0001A322                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A322                            ; ================================================================================
0001A322                            
0001A322                            DATAA16Z12RYSAF:
0001A322 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A326 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A32A 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A32E 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A332 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A336 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A338 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A339 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A33E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A343 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A348 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A349 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A34E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A353 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A358 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A35D 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A35E E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A363 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A368 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A36D FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A372 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A373 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A378 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A37D F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A382 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A383 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A388 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A38D 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A392 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A397 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A398 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A39D E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A3A2 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A3A7 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A3AC 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A3AD E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A3B2 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A3B7 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A3BC 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A3C1 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A3C6 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A3CB F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A3D0 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A3D1 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A3D6 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A3DB 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A3E0 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A3E5 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A3E6 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A3EB E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A3F0 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A3F5 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A3FA EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A3FF 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A400 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A405 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A40A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A40F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A414 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A419 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A41E 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A423 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A428 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A429 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A42E F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A433 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A438                            	even
0001A438                            	even
0001A438                            
0001A438                            ; ===========================================================================
0001A438                            ; ---------------------------------------------------------------------------
0001A438                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A438                            ; ---------------------------------------------------------------------------
0001A438                            
0001A438                            Obj83:					; XREF: Obj_Index
0001A438 7000                       		moveq	#0,d0
0001A43A 1028 0024                  		move.b	$24(a0),d0
0001A43E 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A442 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A446                            ; ===========================================================================
0001A446 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A448 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A44A 0000                       		dc.w loc_19C36-Obj83_Index
0001A44C 0000                       		dc.w loc_19C62-Obj83_Index
0001A44E 0000                       		dc.w loc_19C72-Obj83_Index
0001A450 0000                       		dc.w loc_19C80-Obj83_Index
0001A452                            ; ===========================================================================
0001A452                            
0001A452                            Obj83_Main:				; XREF: Obj83_Index
0001A452 317C 2080 0008             		move.w	#$2080,8(a0)
0001A458 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A45E 117C 0080 0019             		move.b	#$80,$19(a0)
0001A464 117C 0010 0016             		move.b	#$10,$16(a0)
0001A46A 117C 0004 0001             		move.b	#4,1(a0)
0001A470 08E8 0007 0001             		bset	#7,1(a0)
0001A476 7800                       		moveq	#0,d4
0001A478 3A3C 2010                  		move.w	#$2010,d5
0001A47C 7C07                       		moveq	#7,d6
0001A47E 45E8 0030                  		lea	$30(a0),a2
0001A482                            
0001A482                            Obj83_MakeBlock:
0001A482 4EB9 0000 E288             		jsr	SingleObjLoad
0001A488 6600                       		bne.s	Obj83_ExitMake
0001A48A 34C9                       		move.w	a1,(a2)+
0001A48C 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A490 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A498 337C 4518 0002             		move.w	#$4518,2(a1)
0001A49E 137C 0004 0001             		move.b	#4,1(a1)
0001A4A4 137C 0010 0019             		move.b	#$10,$19(a1)
0001A4AA 137C 0010 0016             		move.b	#$10,$16(a1)
0001A4B0 137C 0003 0018             		move.b	#3,$18(a1)
0001A4B6 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A4BA 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A4C0 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A4C4 137C 0008 0024             		move.b	#8,$24(a1)
0001A4CA 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A4CE                            
0001A4CE                            Obj83_ExitMake:
0001A4CE 5428 0024                  		addq.b	#2,$24(a0)
0001A4D2 4E75                       		rts	
0001A4D4                            ; ===========================================================================
0001A4D4                            
0001A4D4                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A4D4 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A4DA 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A4DC 4228 001A                  		clr.b	$1A(a0)
0001A4E0 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A4E4                            
0001A4E4                            Obj83_Solid:
0001A4E4 7000                       		moveq	#0,d0
0001A4E6 1028 001A                  		move.b	$1A(a0),d0
0001A4EA 4400                       		neg.b	d0
0001A4EC 4880                       		ext.w	d0
0001A4EE 5040                       		addq.w	#8,d0
0001A4F0 E940                       		asl.w	#4,d0
0001A4F2 383C 2100                  		move.w	#$2100,d4
0001A4F6 9840                       		sub.w	d0,d4
0001A4F8 1140 0019                  		move.b	d0,$19(a0)
0001A4FC 3144 0008                  		move.w	d4,8(a0)
0001A500 720B                       		moveq	#$B,d1
0001A502 D240                       		add.w	d0,d1
0001A504 7410                       		moveq	#$10,d2
0001A506 7611                       		moveq	#$11,d3
0001A508 4EF9 0001 01D2             		jmp	SolidObject
0001A50E                            ; ===========================================================================
0001A50E                            
0001A50E                            loc_19C36:				; XREF: Obj83_Index
0001A50E 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A514 6400                       		bcc.s	Obj83_Solid2
0001A516 70FF                       		moveq	#-1,d0
0001A518 1028 001A                  		move.b	$1A(a0),d0
0001A51C 4880                       		ext.w	d0
0001A51E D040                       		add.w	d0,d0
0001A520 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A524 2240                       		movea.l	d0,a1
0001A526 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A52C 5228 001A                  		addq.b	#1,$1A(a0)
0001A530 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A536 6700                       		beq.s	loc_19C62
0001A538                            
0001A538                            Obj83_Solid2:
0001A538 60AA                       		bra.s	Obj83_Solid
0001A53A                            ; ===========================================================================
0001A53A                            
0001A53A                            loc_19C62:				; XREF: Obj83_Index
0001A53A 08A8 0003 0022             		bclr	#3,$22(a0)
0001A540 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A546 6000 FBD2                  		bra.w	loc_1982C
0001A54A                            ; ===========================================================================
0001A54A                            
0001A54A                            loc_19C72:				; XREF: Obj83_Index
0001A54A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A550 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A552 4EF9 0000 DE02             		jmp	DisplaySprite
0001A558                            ; ===========================================================================
0001A558                            
0001A558                            loc_19C80:				; XREF: Obj83_Index
0001A558 4A28 0001                  		tst.b	1(a0)
0001A55C 6A00 FBBC                  		bpl.w	loc_1982C
0001A560 4EB9 0000 DDB0             		jsr	ObjectFall
0001A566 4EF9 0000 DE02             		jmp	DisplaySprite
0001A56C                            ; ===========================================================================
0001A56C                            
0001A56C                            Obj83_Break:				; XREF: loc_19C72
0001A56C 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A570 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A574 7801                       		moveq	#1,d4
0001A576 7203                       		moveq	#3,d1
0001A578 7438                       		moveq	#$38,d2
0001A57A 5428 0024                  		addq.b	#2,$24(a0)
0001A57E 117C 0008 0019             		move.b	#8,$19(a0)
0001A584 117C 0008 0016             		move.b	#8,$16(a0)
0001A58A 43D0                       		lea	(a0),a1
0001A58C 6000                       		bra.s	Obj83_MakeFrag
0001A58E                            ; ===========================================================================
0001A58E                            
0001A58E                            Obj83_LoopFrag:
0001A58E 4EB9 0000 E29E             		jsr	SingleObjLoad2
0001A594 6600                       		bne.s	Obj83_BreakSnd
0001A596                            
0001A596                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A596 45D0                       		lea	(a0),a2
0001A598 47D1                       		lea	(a1),a3
0001A59A 7603                       		moveq	#3,d3
0001A59C                            
0001A59C                            loc_19CC4:
0001A59C 26DA                       		move.l	(a2)+,(a3)+
0001A59E 26DA                       		move.l	(a2)+,(a3)+
0001A5A0 26DA                       		move.l	(a2)+,(a3)+
0001A5A2 26DA                       		move.l	(a2)+,(a3)+
0001A5A4 51CB FFF6                  		dbf	d3,loc_19CC4
0001A5A8                            
0001A5A8 335C 0012                  		move.w	(a4)+,$12(a1)
0001A5AC 361D                       		move.w	(a5)+,d3
0001A5AE D769 0008                  		add.w	d3,8(a1)
0001A5B2 361D                       		move.w	(a5)+,d3
0001A5B4 D769 000C                  		add.w	d3,$C(a1)
0001A5B8 1344 001A                  		move.b	d4,$1A(a1)
0001A5BC 5244                       		addq.w	#1,d4
0001A5BE 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A5C2                            
0001A5C2                            Obj83_BreakSnd:
0001A5C2 303C 00CB                  		move.w	#$CB,d0
0001A5C6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A5CC 4EF9 0000 DE02             		jmp	DisplaySprite
0001A5D2                            ; ===========================================================================
0001A5D2 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A5D6 0120 00C0                  		dc.w $120, $C0
0001A5DA FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A5DE 0010 0000                  		dc.w $10, 0
0001A5E2 0000 0010                  		dc.w 0,	$10
0001A5E6 0010 0010                  		dc.w $10, $10
0001A5EA                            ; ---------------------------------------------------------------------------
0001A5EA                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A5EA                            ; ---------------------------------------------------------------------------
0001A5EA                            Map_obj83:
0001A5EA                            	include "_maps\obj83.asm"
0001A5EA                            ; ---------------------------------------------------------------------------
0001A5EA                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A5EA                            ; ---------------------------------------------------------------------------
0001A5EA 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A5EE 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A5F2 0000                       		dc.w byte_19D46-Map_obj83
0001A5F4 01                         byte_19D1C:	dc.b 1
0001A5F5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A5FA 02                         byte_19D22:	dc.b 2
0001A5FB F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A600 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A605 00                         		dc.b 0
0001A606 02                         byte_19D2E:	dc.b 2
0001A607 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A60C F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A611 00                         		dc.b 0
0001A612 02                         byte_19D3A:	dc.b 2
0001A613 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A618 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A61D 00                         		dc.b 0
0001A61E 02                         byte_19D46:	dc.b 2
0001A61F F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A624 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A62A 00                         		even
0001A62A 00                         		even
0001A62A                            
0001A62A                            ; ===========================================================================
0001A62A                            ; ---------------------------------------------------------------------------
0001A62A                            ; Object 85 - Eggman (FZ)
0001A62A                            ; ---------------------------------------------------------------------------
0001A62A                            
0001A62A                            Obj85_Delete:
0001A62A 4EF9 0000 DE3E             		jmp	DeleteObject
0001A630                            ; ===========================================================================
0001A630                            
0001A630                            Obj85:					; XREF: Obj_Index
0001A630 7000                       		moveq	#0,d0
0001A632 1028 0024                  		move.b	$24(a0),d0
0001A636 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A63A 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A63E                            ; ===========================================================================
0001A63E 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A640 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A642 0000                       		dc.w loc_1A38E-Obj85_Index
0001A644 0000                       		dc.w loc_1A346-Obj85_Index
0001A646 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A648 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A64A 0000                       		dc.w loc_1A264-Obj85_Index
0001A64C                            
0001A64C 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A652 0001 A322                  		dc.l Map_obj82		; mappings pointer
0001A656 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A65C 0000 0000                  		dc.l Map_obj84
0001A660 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A666 0000 0000                  		dc.l Map_FZBoss
0001A66A 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A670 0001 A322                  		dc.l Map_obj82
0001A674 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A67A 0001 8664                  		dc.l Map_Eggman
0001A67E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A684 0001 8664                  		dc.l Map_Eggman
0001A688                            
0001A688 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A68D 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A692 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A697 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A69C 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A6A1 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A6A6                            ; ===========================================================================
0001A6A6                            
0001A6A6                            Obj85_Main:				; XREF: Obj85_Index
0001A6A6 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A6AA 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A6AE 2248                       		movea.l	a0,a1
0001A6B0 7205                       		moveq	#5,d1
0001A6B2 6000                       		bra.s	Obj85_LoadBoss
0001A6B4                            ; ===========================================================================
0001A6B4                            
0001A6B4                            Obj85_Loop:
0001A6B4 4EB9 0000 E29E             		jsr	SingleObjLoad2
0001A6BA 6600                       		bne.s	loc_19E20
0001A6BC                            
0001A6BC                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A6BC 12BC 0085                  		move.b	#$85,(a1)
0001A6C0 335A 0008                  		move.w	(a2)+,8(a1)
0001A6C4 335A 000C                  		move.w	(a2)+,$C(a1)
0001A6C8 335A 0002                  		move.w	(a2)+,2(a1)
0001A6CC 235A 0004                  		move.l	(a2)+,4(a1)
0001A6D0 135B 0024                  		move.b	(a3)+,$24(a1)
0001A6D4 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A6D8 135B 0018                  		move.b	(a3)+,$18(a1)
0001A6DC 135B 0017                  		move.b	(a3)+,$17(a1)
0001A6E0 135B 0016                  		move.b	(a3)+,$16(a1)
0001A6E4 137C 0004 0001             		move.b	#4,1(a1)
0001A6EA 08E8 0007 0001             		bset	#7,1(a0)
0001A6F0 2348 0034                  		move.l	a0,$34(a1)
0001A6F4 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A6F8                            
0001A6F8                            loc_19E20:
0001A6F8 45E8 0036                  		lea	$36(a0),a2
0001A6FC 4EB9 0000 E288             		jsr	SingleObjLoad
0001A702 6600                       		bne.s	loc_19E5A
0001A704 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A708 3489                       		move.w	a1,(a2)
0001A70A 2348 0034                  		move.l	a0,$34(a1)
0001A70E 45E8 0038                  		lea	$38(a0),a2
0001A712 7400                       		moveq	#0,d2
0001A714 7203                       		moveq	#3,d1
0001A716                            
0001A716                            loc_19E3E:
0001A716 4EB9 0000 E29E             		jsr	SingleObjLoad2
0001A71C 6600                       		bne.s	loc_19E5A
0001A71E 34C9                       		move.w	a1,(a2)+
0001A720 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A724 2348 0034                  		move.l	a0,$34(a1)
0001A728 1342 0028                  		move.b	d2,$28(a1)
0001A72C 5442                       		addq.w	#2,d2
0001A72E 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A732                            
0001A732                            loc_19E5A:
0001A732 317C 0000 0034             		move.w	#0,$34(a0)
0001A738 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A73E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A744                            
0001A744                            Obj85_Eggman:				; XREF: Obj85_Index
0001A744 7000                       		moveq	#0,d0
0001A746 1028 0034                  		move.b	$34(a0),d0
0001A74A 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A74E 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A752 4EF9 0000 DE02             		jmp	DisplaySprite
0001A758                            ; ===========================================================================
0001A758 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A75C 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A760 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A764 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A768                            ; ===========================================================================
0001A768                            
0001A768                            loc_19E90:				; XREF: off_19E80
0001A768 4AB8 F680                  		tst.l	($FFFFF680).w
0001A76C 6600                       		bne.s	loc_19EA2
0001A76E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A774 6500                       		bcs.s	loc_19EA2
0001A776 5428 0034                  		addq.b	#2,$34(a0)
0001A77A                            
0001A77A                            loc_19EA2:
0001A77A 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A77E 4E75                       		rts	
0001A780                            ; ===========================================================================
0001A780                            
0001A780                            loc_19EA8:				; XREF: off_19E80
0001A780 4A68 0030                  		tst.w	$30(a0)
0001A784 6A00                       		bpl.s	loc_19F10
0001A786 4268 0030                  		clr.w	$30(a0)
0001A78A 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001A790 0240 000C                  		andi.w	#$C,d0
0001A794 3200                       		move.w	d0,d1
0001A796 5441                       		addq.w	#2,d1
0001A798 4A80                       		tst.l	d0
0001A79A 6A00                       		bpl.s	loc_19EC6
0001A79C C141                       		exg	d1,d0
0001A79E                            
0001A79E                            loc_19EC6:
0001A79E 43FA 0000                  		lea	word_19FD6(pc),a1
0001A7A2 3031 0000                  		move.w	(a1,d0.w),d0
0001A7A6 3231 1000                  		move.w	(a1,d1.w),d1
0001A7AA 3140 0030                  		move.w	d0,$30(a0)
0001A7AE 74FF                       		moveq	#-1,d2
0001A7B0 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A7B4 2242                       		movea.l	d2,a1
0001A7B6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A7BC 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A7C2 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A7C6 2242                       		movea.l	d2,a1
0001A7C8 137C 0001 0029             		move.b	#1,$29(a1)
0001A7CE 337C 0000 0030             		move.w	#0,$30(a1)
0001A7D4 317C 0001 0032             		move.w	#1,$32(a0)
0001A7DA 4228 0035                  		clr.b	$35(a0)
0001A7DE 303C 00B7                  		move.w	#$B7,d0
0001A7E2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A7E8                            
0001A7E8                            loc_19F10:
0001A7E8 4A68 0032                  		tst.w	$32(a0)
0001A7EC 6B00 0000                  		bmi.w	loc_19FA6
0001A7F0 08A8 0000 0022             		bclr	#0,$22(a0)
0001A7F6 3038 D008                  		move.w	($FFFFD008).w,d0
0001A7FA 9068 0008                  		sub.w	8(a0),d0
0001A7FE 6500                       		bcs.s	loc_19F2E
0001A800 08E8 0000 0022             		bset	#0,$22(a0)
0001A806                            
0001A806                            loc_19F2E:
0001A806 323C 002B                  		move.w	#$2B,d1
0001A80A 343C 0014                  		move.w	#$14,d2
0001A80E 363C 0014                  		move.w	#$14,d3
0001A812 3828 0008                  		move.w	8(a0),d4
0001A816 4EB9 0001 01D2             		jsr	SolidObject
0001A81C 4A44                       		tst.w	d4
0001A81E 6E00                       		bgt.s	loc_19F50
0001A820                            
0001A820                            loc_19F48:
0001A820 4A28 0035                  		tst.b	$35(a0)
0001A824 6600                       		bne.s	loc_19F88
0001A826 6000                       		bra.s	loc_19F96
0001A828                            ; ===========================================================================
0001A828                            
0001A828                            loc_19F50:
0001A828 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A82C 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A832 66EC                       		bne.s	loc_19F48
0001A834 303C 0300                  		move.w	#$300,d0
0001A838 0828 0000 0022             		btst	#0,$22(a0)
0001A83E 6600                       		bne.s	loc_19F6A
0001A840 4440                       		neg.w	d0
0001A842                            
0001A842                            loc_19F6A:
0001A842 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A846 4A28 0035                  		tst.b	$35(a0)
0001A84A 6600                       		bne.s	loc_19F88
0001A84C 5328 0021                  		subq.b	#1,$21(a0)
0001A850 117C 0064 0035             		move.b	#$64,$35(a0)
0001A856 303C 00AC                  		move.w	#$AC,d0
0001A85A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A860                            
0001A860                            loc_19F88:
0001A860 5328 0035                  		subq.b	#1,$35(a0)
0001A864 6700                       		beq.s	loc_19F96
0001A866 117C 0003 001C             		move.b	#3,$1C(a0)
0001A86C 6000                       		bra.s	loc_19F9C
0001A86E                            ; ===========================================================================
0001A86E                            
0001A86E                            loc_19F96:
0001A86E 117C 0001 001C             		move.b	#1,$1C(a0)
0001A874                            
0001A874                            loc_19F9C:
0001A874 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A878 4EF9 0000 AEC2             		jmp	AnimateSprite
0001A87E                            ; ===========================================================================
0001A87E                            
0001A87E                            loc_19FA6:
0001A87E 4A28 0021                  		tst.b	$21(a0)
0001A882 6700                       		beq.s	loc_19FBC
0001A884 5428 0034                  		addq.b	#2,$34(a0)
0001A888 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A88E 4268 0032                  		clr.w	$32(a0)
0001A892 4E75                       		rts	
0001A894                            ; ===========================================================================
0001A894                            
0001A894                            loc_19FBC:
0001A894 117C 0006 0034             		move.b	#6,$34(a0)
0001A89A 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A8A0 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A8A6 117C 0014 0016             		move.b	#$14,$16(a0)
0001A8AC 4E75                       		rts	
0001A8AE                            ; ===========================================================================
0001A8AE 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A8BE                            ; ===========================================================================
0001A8BE                            
0001A8BE                            loc_19FE6:				; XREF: off_19E80
0001A8BE 70FF                       		moveq	#-1,d0
0001A8C0 3028 0036                  		move.w	$36(a0),d0
0001A8C4 2240                       		movea.l	d0,a1
0001A8C6 4A68 0030                  		tst.w	$30(a0)
0001A8CA 6A00                       		bpl.s	loc_1A000
0001A8CC 4268 0030                  		clr.w	$30(a0)
0001A8D0 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A8D6 6100                       		bsr.s	loc_1A020
0001A8D8                            
0001A8D8                            loc_1A000:
0001A8D8 700F                       		moveq	#$F,d0
0001A8DA C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A8DE 6600                       		bne.s	loc_1A00A
0001A8E0 6100                       		bsr.s	loc_1A020
0001A8E2                            
0001A8E2                            loc_1A00A:
0001A8E2 4A68 0032                  		tst.w	$32(a0)
0001A8E6 6700                       		beq.s	locret_1A01E
0001A8E8 5528 0034                  		subq.b	#2,$34(a0)
0001A8EC 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A8F2 4268 0032                  		clr.w	$32(a0)
0001A8F6                            
0001A8F6                            locret_1A01E:
0001A8F6 4E75                       		rts	
0001A8F8                            ; ===========================================================================
0001A8F8                            
0001A8F8                            loc_1A020:
0001A8F8 303C 00B1                  		move.w	#$B1,d0
0001A8FC 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A902                            ; ===========================================================================
0001A902                            
0001A902                            loc_1A02A:				; XREF: off_19E80
0001A902 117C 0030 0017             		move.b	#$30,$17(a0)
0001A908 08E8 0000 0022             		bset	#0,$22(a0)
0001A90E 4EB9 0000 DDDC             		jsr	SpeedToPos
0001A914 117C 0006 001A             		move.b	#6,$1A(a0)
0001A91A 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A920 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A926 6500                       		bcs.s	loc_1A070
0001A928 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A92E 5428 0034                  		addq.b	#2,$34(a0)
0001A932 117C 0020 0017             		move.b	#$20,$17(a0)
0001A938 317C 0100 0010             		move.w	#$100,$10(a0)
0001A93E 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A944 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A948                            
0001A948                            loc_1A070:
0001A948 6000 0000                  		bra.w	loc_1A166
0001A94C                            ; ===========================================================================
0001A94C                            
0001A94C                            loc_1A074:				; XREF: off_19E80
0001A94C 08E8 0000 0022             		bset	#0,$22(a0)
0001A952 117C 0004 001C             		move.b	#4,$1C(a0)
0001A958 4EB9 0000 DDDC             		jsr	SpeedToPos
0001A95E 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A964 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A96A 6500                       		bcs.s	loc_1A09A
0001A96C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A972                            
0001A972                            loc_1A09A:
0001A972 317C 0400 0010             		move.w	#$400,$10(a0)
0001A978 3028 0008                  		move.w	8(a0),d0
0001A97C 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A980 6A00                       		bpl.s	loc_1A0B4
0001A982 317C 0500 0010             		move.w	#$500,$10(a0)
0001A988 6000 0000                  		bra.w	loc_1A0F2
0001A98C                            ; ===========================================================================
0001A98C                            
0001A98C                            loc_1A0B4:
0001A98C 0440 0070                  		subi.w	#$70,d0
0001A990 6500                       		bcs.s	loc_1A0F2
0001A992 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A998 5140                       		subq.w	#8,d0
0001A99A 6500                       		bcs.s	loc_1A0F2
0001A99C 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A9A2 5140                       		subq.w	#8,d0
0001A9A4 6500                       		bcs.s	loc_1A0F2
0001A9A6 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A9AC 5140                       		subq.w	#8,d0
0001A9AE 6500                       		bcs.s	loc_1A0F2
0001A9B0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A9B6 5140                       		subq.w	#8,d0
0001A9B8 6500                       		bcs.s	loc_1A0F2
0001A9BA 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A9C0 0440 0038                  		subi.w	#$38,d0
0001A9C4 6500                       		bcs.s	loc_1A0F2
0001A9C6 4268 0010                  		clr.w	$10(a0)
0001A9CA                            
0001A9CA                            loc_1A0F2:
0001A9CA 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A9D0 6500                       		bcs.s	loc_1A110
0001A9D2 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A9D8 317C 0240 0010             		move.w	#$240,$10(a0)
0001A9DE 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A9E4 5428 0034                  		addq.b	#2,$34(a0)
0001A9E8                            
0001A9E8                            loc_1A110:
0001A9E8 6000                       		bra.s	loc_1A15C
0001A9EA                            ; ===========================================================================
0001A9EA                            
0001A9EA                            loc_1A112:				; XREF: off_19E80
0001A9EA 4EB9 0000 DDDC             		jsr	SpeedToPos
0001A9F0 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A9F6 6500                       		bcs.s	loc_1A124
0001A9F8 4268 0010                  		clr.w	$10(a0)
0001A9FC                            
0001A9FC                            loc_1A124:
0001A9FC 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AA02 4A68 0012                  		tst.w	$12(a0)
0001AA06 6B00                       		bmi.s	loc_1A142
0001AA08 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AA0E 6500                       		bcs.s	loc_1A142
0001AA10 317C 0592 000C             		move.w	#$592,$C(a0)
0001AA16 4268 0012                  		clr.w	$12(a0)
0001AA1A                            
0001AA1A                            loc_1A142:
0001AA1A 3028 0010                  		move.w	$10(a0),d0
0001AA1E 8068 0012                  		or.w	$12(a0),d0
0001AA22 6600                       		bne.s	loc_1A15C
0001AA24 5428 0034                  		addq.b	#2,$34(a0)
0001AA28 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AA2E 117C 0001 0021             		move.b	#1,$21(a0)
0001AA34                            
0001AA34                            loc_1A15C:
0001AA34 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001AA38 4EB9 0000 AEC2             		jsr	AnimateSprite
0001AA3E                            
0001AA3E                            loc_1A166:
0001AA3E 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AA44 6C00                       		bge.s	loc_1A172
0001AA46 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AA4A                            
0001AA4A                            loc_1A172:
0001AA4A 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AA50 6C00                       		bge.s	locret_1A190
0001AA52 323C 001B                  		move.w	#$1B,d1
0001AA56 343C 0070                  		move.w	#$70,d2
0001AA5A 363C 0071                  		move.w	#$71,d3
0001AA5E 3828 0008                  		move.w	8(a0),d4
0001AA62 4EF9 0001 01D2             		jmp	SolidObject
0001AA68                            ; ===========================================================================
0001AA68                            
0001AA68                            locret_1A190:
0001AA68 4E75                       		rts	
0001AA6A                            ; ===========================================================================
0001AA6A                            
0001AA6A                            loc_1A192:				; XREF: off_19E80
0001AA6A 217C 0001 8664 0004        		move.l	#Map_Eggman,4(a0)
0001AA72 317C 0400 0002             		move.w	#$400,2(a0)
0001AA78 117C 0000 001C             		move.b	#0,$1C(a0)
0001AA7E 08E8 0000 0022             		bset	#0,$22(a0)
0001AA84 4EB9 0000 DDDC             		jsr	SpeedToPos
0001AA8A 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AA90 6400                       		bcc.s	loc_1A1D0
0001AA92 317C 0180 0010             		move.w	#$180,$10(a0)
0001AA98 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AA9E 117C 000F 0020             		move.b	#$F,$20(a0)
0001AAA4 5428 0034                  		addq.b	#2,$34(a0)
0001AAA8                            
0001AAA8                            loc_1A1D0:
0001AAA8 6000 FF8A                  		bra.w	loc_1A15C
0001AAAC                            ; ===========================================================================
0001AAAC                            
0001AAAC                            loc_1A1D4:				; XREF: off_19E80
0001AAAC 08E8 0000 0022             		bset	#0,$22(a0)
0001AAB2 4EB9 0000 DDDC             		jsr	SpeedToPos
0001AAB8 4A68 0030                  		tst.w	$30(a0)
0001AABC 6600                       		bne.s	loc_1A1FC
0001AABE 4A28 0020                  		tst.b	$20(a0)
0001AAC2 6600                       		bne.s	loc_1A216
0001AAC4 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AACA 303C 00AC                  		move.w	#$AC,d0
0001AACE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AAD4                            
0001AAD4                            loc_1A1FC:
0001AAD4 5368 0030                  		subq.w	#1,$30(a0)
0001AAD8 6600                       		bne.s	loc_1A216
0001AADA 4A28 0022                  		tst.b	$22(a0)
0001AADE 6A00                       		bpl.s	loc_1A210
0001AAE0 317C 0060 0012             		move.w	#$60,$12(a0)
0001AAE6 6000                       		bra.s	loc_1A216
0001AAE8                            ; ===========================================================================
0001AAE8                            
0001AAE8                            loc_1A210:
0001AAE8 117C 000F 0020             		move.b	#$F,$20(a0)
0001AAEE                            
0001AAEE                            loc_1A216:
0001AAEE 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AAF4 6D00                       		blt.s	loc_1A23A
0001AAF6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AAFC 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AB02 4278 D014                  		clr.w	($FFFFD014).w
0001AB06 4A68 0012                  		tst.w	$12(a0)
0001AB0A 6A00                       		bpl.s	loc_1A248
0001AB0C 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AB12                            
0001AB12                            loc_1A23A:
0001AB12 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AB18 6D00                       		blt.s	loc_1A248
0001AB1A 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AB20                            
0001AB20                            loc_1A248:
0001AB20 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AB26 6500                       		bcs.s	loc_1A260
0001AB28 4A28 0001                  		tst.b	1(a0)
0001AB2C 6B00                       		bmi.s	loc_1A260
0001AB2E 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AB34 6000 FAF4                  		bra.w	Obj85_Delete
0001AB38                            ; ===========================================================================
0001AB38                            
0001AB38                            loc_1A260:
0001AB38 6000 FEFA                  		bra.w	loc_1A15C
0001AB3C                            ; ===========================================================================
0001AB3C                            
0001AB3C                            loc_1A264:				; XREF: Obj85_Index
0001AB3C 2268 0034                  		movea.l	$34(a0),a1
0001AB40 1011                       		move.b	(a1),d0
0001AB42 B010                       		cmp.b	(a0),d0
0001AB44 6600 FAE4                  		bne.w	Obj85_Delete
0001AB48 117C 0007 001C             		move.b	#7,$1C(a0)
0001AB4E 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AB54 6C00                       		bge.s	loc_1A280
0001AB56 6000                       		bra.s	loc_1A2A6
0001AB58                            ; ===========================================================================
0001AB58                            
0001AB58                            loc_1A280:
0001AB58 4A69 0010                  		tst.w	$10(a1)
0001AB5C 6700                       		beq.s	loc_1A28C
0001AB5E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AB64                            
0001AB64                            loc_1A28C:
0001AB64 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001AB68 4EB9 0000 AEC2             		jsr	AnimateSprite
0001AB6E                            
0001AB6E                            loc_1A296:
0001AB6E 2268 0034                  		movea.l	$34(a0),a1
0001AB72 3169 0008 0008             		move.w	8(a1),8(a0)
0001AB78 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AB7E                            
0001AB7E                            loc_1A2A6:
0001AB7E 2268 0034                  		movea.l	$34(a0),a1
0001AB82 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AB88 7003                       		moveq	#3,d0
0001AB8A C028 0022                  		and.b	$22(a0),d0
0001AB8E 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AB94 8128 0001                  		or.b	d0,1(a0)
0001AB98 4EF9 0000 DE02             		jmp	DisplaySprite
0001AB9E                            ; ===========================================================================
0001AB9E                            
0001AB9E                            loc_1A2C6:				; XREF: Obj85_Index
0001AB9E 2268 0034                  		movea.l	$34(a0),a1
0001ABA2 1011                       		move.b	(a1),d0
0001ABA4 B010                       		cmp.b	(a0),d0
0001ABA6 6600 FA82                  		bne.w	Obj85_Delete
0001ABAA 0CA9 0001 8664 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ABB2 6700                       		beq.s	loc_1A2E4
0001ABB4 117C 000A 001A             		move.b	#$A,$1A(a0)
0001ABBA 60C2                       		bra.s	loc_1A2A6
0001ABBC                            ; ===========================================================================
0001ABBC                            
0001ABBC                            loc_1A2E4:
0001ABBC 117C 0001 001C             		move.b	#1,$1C(a0)
0001ABC2 4A29 0021                  		tst.b	$21(a1)
0001ABC6 6F00                       		ble.s	loc_1A312
0001ABC8 117C 0006 001C             		move.b	#6,$1C(a0)
0001ABCE 217C 0001 8664 0004        		move.l	#Map_Eggman,4(a0)
0001ABD6 317C 0400 0002             		move.w	#$400,2(a0)
0001ABDC 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001ABE0 4EB9 0000 AEC2             		jsr	AnimateSprite
0001ABE6 6000 FF86                  		bra.w	loc_1A296
0001ABEA                            ; ===========================================================================
0001ABEA                            
0001ABEA                            loc_1A312:
0001ABEA 4A28 0001                  		tst.b	1(a0)
0001ABEE 6A00 FA3A                  		bpl.w	Obj85_Delete
0001ABF2 6100 D588                  		bsr.w	BossDefeated
0001ABF6 117C 0002 0018             		move.b	#2,$18(a0)
0001ABFC 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC02 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AC0A 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AC10 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AC14 4EB9 0000 AEC2             		jsr	AnimateSprite
0001AC1A 6000 FF52                  		bra.w	loc_1A296
0001AC1E                            ; ===========================================================================
0001AC1E                            
0001AC1E                            loc_1A346:				; XREF: Obj85_Index
0001AC1E 08E8 0000 0022             		bset	#0,$22(a0)
0001AC24 2268 0034                  		movea.l	$34(a0),a1
0001AC28 0CA9 0001 8664 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC30 6700                       		beq.s	loc_1A35E
0001AC32 6000 FF4A                  		bra.w	loc_1A2A6
0001AC36                            ; ===========================================================================
0001AC36                            
0001AC36                            loc_1A35E:
0001AC36 3169 0008 0008             		move.w	8(a1),8(a0)
0001AC3C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AC42 4A28 001E                  		tst.b	$1E(a0)
0001AC46 6600                       		bne.s	loc_1A376
0001AC48 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AC4E                            
0001AC4E                            loc_1A376:
0001AC4E 5328 001E                  		subq.b	#1,$1E(a0)
0001AC52 6E00                       		bgt.s	loc_1A38A
0001AC54 5228 001A                  		addq.b	#1,$1A(a0)
0001AC58 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AC5E 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AC62                            
0001AC62                            loc_1A38A:
0001AC62 6000 FF0A                  		bra.w	loc_1A296
0001AC66                            ; ===========================================================================
0001AC66                            
0001AC66                            loc_1A38E:				; XREF: Obj85_Index
0001AC66 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AC6C 3038 D008                  		move.w	($FFFFD008).w,d0
0001AC70 9068 0008                  		sub.w	8(a0),d0
0001AC74 6500                       		bcs.s	loc_1A3A6
0001AC76 4A28 0001                  		tst.b	1(a0)
0001AC7A 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AC7E                            
0001AC7E                            loc_1A3A6:
0001AC7E 4EF9 0000 DE02             		jmp	DisplaySprite
0001AC84                            ; ===========================================================================
0001AC84                            
0001AC84                            loc_1A3AC:				; XREF: Obj85_Index
0001AC84 117C 0000 001A             		move.b	#0,$1A(a0)
0001AC8A 08E8 0000 0022             		bset	#0,$22(a0)
0001AC90 2268 0034                  		movea.l	$34(a0),a1
0001AC94 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AC9A 6600                       		bne.s	loc_1A3D0
0001AC9C 0CA9 0001 8664 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ACA4 6700 F984                  		beq.w	Obj85_Delete
0001ACA8                            
0001ACA8                            loc_1A3D0:
0001ACA8 6000 FED4                  		bra.w	loc_1A2A6
0001ACAC                            ; ===========================================================================
0001ACAC                            Ani_obj85:
0001ACAC                            	include "_anim\obj85.asm"
0001ACAC                            ; ---------------------------------------------------------------------------
0001ACAC                            ; Animation script - Eggman (FZ)
0001ACAC                            ; ---------------------------------------------------------------------------
0001ACAC 0000                       		dc.w byte_1A3D6-Ani_obj85
0001ACAE 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001ACB2                            		even
0001ACB2                            		even
0001ACB2                            
0001ACB2                            Map_Eggman2:
0001ACB2                            	include "_maps\Eggman2.asm"
0001ACB2                            ; ---------------------------------------------------------------------------
0001ACB2                            ; Sprite mappings - Eggman (FZ)
0001ACB2                            ; ---------------------------------------------------------------------------
0001ACB2 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001ACB4 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001ACB6 06                         byte_1A3DE:	dc.b 6
0001ACB7 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001ACBC EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001ACC1 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ACC6 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ACCB FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ACD0 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ACD5 06                         byte_1A3FD:	dc.b 6
0001ACD6 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001ACDB EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001ACE0 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ACE5 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ACEA FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ACEF 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ACF4                            		even
0001ACF4                            		even
0001ACF4                            
0001ACF4                            Map_FZBoss:
0001ACF4                            	include "_maps\FZ boss.asm"
0001ACF4                            ; ---------------------------------------------------------------------------
0001ACF4                            ; Sprite mappings - boss (FZ)
0001ACF4                            ; ---------------------------------------------------------------------------
0001ACF4 0000                       		dc.w byte_1A422-Map_FZBoss
0001ACF6 0000                       		dc.w byte_1A42D-Map_FZBoss
0001ACF8 0000                       		dc.w byte_1A43D-Map_FZBoss
0001ACFA 02                         byte_1A422:	dc.b 2
0001ACFB 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AD00 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AD05 03                         byte_1A42D:	dc.b 3
0001AD06 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AD0B 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AD10 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AD15 02                         byte_1A43D:	dc.b 2
0001AD16 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AD1B 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AD20                            		even
0001AD20                            		even
0001AD20                            
0001AD20                            ; ===========================================================================
0001AD20                            
0001AD20                            Obj84_Delete:
0001AD20 4EF9 0000 DE3E             		jmp	DeleteObject
0001AD26                            ; ===========================================================================
0001AD26                            ; ---------------------------------------------------------------------------
0001AD26                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AD26                            ; ---------------------------------------------------------------------------
0001AD26                            
0001AD26                            Obj84:					; XREF: Obj_Index
0001AD26 7000                       		moveq	#0,d0
0001AD28 1028 0024                  		move.b	$24(a0),d0
0001AD2C 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AD30 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AD34                            ; ===========================================================================
0001AD34 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AD36 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AD38 0000                       		dc.w loc_1A57E-Obj84_Index
0001AD3A                            
0001AD3A 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AD3E 2550 0620                  		dc.w $2550, $620
0001AD42 2490 04C0                  		dc.w $2490, $4C0
0001AD46 2510 04C0                  		dc.w $2510, $4C0
0001AD4A                            ; ===========================================================================
0001AD4A                            
0001AD4A                            Obj84_Main:				; XREF: Obj84_Index
0001AD4A 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AD4E 7000                       		moveq	#0,d0
0001AD50 1028 0028                  		move.b	$28(a0),d0
0001AD54 D040                       		add.w	d0,d0
0001AD56 D2C0                       		adda.w	d0,a1
0001AD58 117C 0004 0001             		move.b	#4,1(a0)
0001AD5E 08E8 0007 0001             		bset	#7,1(a0)
0001AD64 08E8 0004 0001             		bset	#4,1(a0)
0001AD6A 317C 0300 0002             		move.w	#$300,2(a0)
0001AD70 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AD78 3159 0008                  		move.w	(a1)+,8(a0)
0001AD7C 3151 000C                  		move.w	(a1),$C(a0)
0001AD80 3159 0038                  		move.w	(a1)+,$38(a0)
0001AD84 117C 0020 0016             		move.b	#$20,$16(a0)
0001AD8A 117C 0060 0017             		move.b	#$60,$17(a0)
0001AD90 117C 0020 0019             		move.b	#$20,$19(a0)
0001AD96 117C 0060 0016             		move.b	#$60,$16(a0)
0001AD9C 117C 0003 0018             		move.b	#3,$18(a0)
0001ADA2 5428 0024                  		addq.b	#2,$24(a0)
0001ADA6                            
0001ADA6                            loc_1A4CE:				; XREF: Obj84_Index
0001ADA6 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001ADAC 6F00                       		ble.s	loc_1A4DC
0001ADAE 08E8 0001 0001             		bset	#1,1(a0)
0001ADB4                            
0001ADB4                            loc_1A4DC:
0001ADB4 42A8 003C                  		clr.l	$3C(a0)
0001ADB8 4A28 0029                  		tst.b	$29(a0)
0001ADBC 6700                       		beq.s	loc_1A4EA
0001ADBE 5428 0024                  		addq.b	#2,$24(a0)
0001ADC2                            
0001ADC2                            loc_1A4EA:
0001ADC2 2028 003C                  		move.l	$3C(a0),d0
0001ADC6 2228 0038                  		move.l	$38(a0),d1
0001ADCA D280                       		add.l	d0,d1
0001ADCC 4841                       		swap	d1
0001ADCE 3141 000C                  		move.w	d1,$C(a0)
0001ADD2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001ADD8 6600                       		bne.s	loc_1A524
0001ADDA 4A68 0030                  		tst.w	$30(a0)
0001ADDE 6A00                       		bpl.s	loc_1A524
0001ADE0 70F6                       		moveq	#-$A,d0
0001ADE2 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001ADE8 6F00                       		ble.s	loc_1A514
0001ADEA 700E                       		moveq	#$E,d0
0001ADEC                            
0001ADEC                            loc_1A514:
0001ADEC D240                       		add.w	d0,d1
0001ADEE 2268 0034                  		movea.l	$34(a0),a1
0001ADF2 3341 000C                  		move.w	d1,$C(a1)
0001ADF6 3368 0008 0008             		move.w	8(a0),8(a1)
0001ADFC                            
0001ADFC                            loc_1A524:
0001ADFC 323C 002B                  		move.w	#$2B,d1
0001AE00 343C 0060                  		move.w	#$60,d2
0001AE04 363C 0061                  		move.w	#$61,d3
0001AE08 3828 0008                  		move.w	8(a0),d4
0001AE0C 4EB9 0001 01D2             		jsr	SolidObject
0001AE12 7000                       		moveq	#0,d0
0001AE14 3228 003C                  		move.w	$3C(a0),d1
0001AE18 6A00                       		bpl.s	loc_1A550
0001AE1A 4441                       		neg.w	d1
0001AE1C 5141                       		subq.w	#8,d1
0001AE1E 6500                       		bcs.s	loc_1A55C
0001AE20 5200                       		addq.b	#1,d0
0001AE22 E841                       		asr.w	#4,d1
0001AE24 D041                       		add.w	d1,d0
0001AE26 6000                       		bra.s	loc_1A55C
0001AE28                            ; ===========================================================================
0001AE28                            
0001AE28                            loc_1A550:
0001AE28 0441 0027                  		subi.w	#$27,d1
0001AE2C 6500                       		bcs.s	loc_1A55C
0001AE2E 5200                       		addq.b	#1,d0
0001AE30 E841                       		asr.w	#4,d1
0001AE32 D041                       		add.w	d1,d0
0001AE34                            
0001AE34                            loc_1A55C:
0001AE34 1140 001A                  		move.b	d0,$1A(a0)
0001AE38 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE3C 9068 0008                  		sub.w	8(a0),d0
0001AE40 6B00                       		bmi.s	loc_1A578
0001AE42 0440 0140                  		subi.w	#$140,d0
0001AE46 6B00                       		bmi.s	loc_1A578
0001AE48 4A28 0001                  		tst.b	1(a0)
0001AE4C 6A00 FED2                  		bpl.w	Obj84_Delete
0001AE50                            
0001AE50                            loc_1A578:
0001AE50 4EF9 0000 DE02             		jmp	DisplaySprite
0001AE56                            ; ===========================================================================
0001AE56                            
0001AE56                            loc_1A57E:				; XREF: Obj84_Index
0001AE56 7000                       		moveq	#0,d0
0001AE58 1028 0028                  		move.b	$28(a0),d0
0001AE5C 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AE60 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AE64 6000 FF5C                  		bra.w	loc_1A4EA
0001AE68                            ; ===========================================================================
0001AE68 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AE6A 0000                       		dc.w loc_1A598-off_1A590
0001AE6C 0000                       		dc.w loc_1A604-off_1A590
0001AE6E 0000                       		dc.w loc_1A604-off_1A590
0001AE70                            ; ===========================================================================
0001AE70                            
0001AE70                            loc_1A598:				; XREF: off_1A590
0001AE70 4A28 0029                  		tst.b	$29(a0)
0001AE74 6600                       		bne.s	loc_1A5D4
0001AE76 2268 0034                  		movea.l	$34(a0),a1
0001AE7A 4A29 0021                  		tst.b	$21(a1)
0001AE7E 6600                       		bne.s	loc_1A5B4
0001AE80 6100 D2FA                  		bsr.w	BossDefeated
0001AE84 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AE8C                            
0001AE8C                            loc_1A5B4:
0001AE8C 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AE94 6400                       		bcc.s	locret_1A602
0001AE96 42A8 003C                  		clr.l	$3C(a0)
0001AE9A 2268 0034                  		movea.l	$34(a0),a1
0001AE9E 5369 0032                  		subq.w	#1,$32(a1)
0001AEA2 4269 0030                  		clr.w	$30(a1)
0001AEA6 5528 0024                  		subq.b	#2,$24(a0)
0001AEAA 4E75                       		rts	
0001AEAC                            ; ===========================================================================
0001AEAC                            
0001AEAC                            loc_1A5D4:
0001AEAC 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AEB2 6C00                       		bge.s	loc_1A5E4
0001AEB4 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AEBC                            
0001AEBC                            loc_1A5E4:
0001AEBC 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AEC4 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AECA 6E00                       		bgt.s	locret_1A602
0001AECC 4268 003E                  		clr.w	$3E(a0)
0001AED0 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AED6 4228 0029                  		clr.b	$29(a0)
0001AEDA                            
0001AEDA                            locret_1A602:
0001AEDA 4E75                       		rts	
0001AEDC                            ; ===========================================================================
0001AEDC                            
0001AEDC                            loc_1A604:				; XREF: off_1A590
0001AEDC 08E8 0001 0001             		bset	#1,1(a0)
0001AEE2 4A28 0029                  		tst.b	$29(a0)
0001AEE6 6600                       		bne.s	loc_1A646
0001AEE8 2268 0034                  		movea.l	$34(a0),a1
0001AEEC 4A29 0021                  		tst.b	$21(a1)
0001AEF0 6600                       		bne.s	loc_1A626
0001AEF2 6100 D288                  		bsr.w	BossDefeated
0001AEF6 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AEFE                            
0001AEFE                            loc_1A626:
0001AEFE 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AF06 6400                       		bcc.s	locret_1A674
0001AF08 42A8 003C                  		clr.l	$3C(a0)
0001AF0C 2268 0034                  		movea.l	$34(a0),a1
0001AF10 5369 0032                  		subq.w	#1,$32(a1)
0001AF14 4269 0030                  		clr.w	$30(a1)
0001AF18 5528 0024                  		subq.b	#2,$24(a0)
0001AF1C 4E75                       		rts	
0001AF1E                            ; ===========================================================================
0001AF1E                            
0001AF1E                            loc_1A646:
0001AF1E 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AF24 6D00                       		blt.s	loc_1A656
0001AF26 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AF2E                            
0001AF2E                            loc_1A656:
0001AF2E 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AF36 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AF3C 6D00                       		blt.s	locret_1A674
0001AF3E 4268 003E                  		clr.w	$3E(a0)
0001AF42 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AF48 4228 0029                  		clr.b	$29(a0)
0001AF4C                            
0001AF4C                            locret_1A674:
0001AF4C 4E75                       		rts	
0001AF4E                            ; ===========================================================================
0001AF4E                            ; ---------------------------------------------------------------------------
0001AF4E                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AF4E                            ; ---------------------------------------------------------------------------
0001AF4E                            Map_obj84:
0001AF4E                            	include "_maps\obj84.asm"
0001AF4E                            ; ---------------------------------------------------------------------------
0001AF4E                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AF4E                            ; ---------------------------------------------------------------------------
0001AF4E 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AF52 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AF56 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AF5A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AF5E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AF62 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AF66 06                         byte_1A68E:	dc.b 6
0001AF67 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF6C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF71 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF76 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF7B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF80 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF85 08                         byte_1A6AD:	dc.b 8
0001AF86 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF8B A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF90 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF95 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF9A B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF9F B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFA4 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFA9 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFAE 0A                         byte_1A6D6:	dc.b $A
0001AFAF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFB4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFB9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFBE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFC3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFC8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFCD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFD2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFD7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFDC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AFE1 0C                         byte_1A709:	dc.b $C
0001AFE2 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFE7 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFEC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFF1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFF6 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFFB B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B000 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B005 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B00A F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B00F F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B014 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B019 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B01E 0D                         byte_1A746:	dc.b $D
0001B01F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B024 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B029 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B02E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B033 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B038 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B03D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B042 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B047 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B04C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B051 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B056 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B05B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B060 0E                         byte_1A788:	dc.b $E
0001B061 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B066 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B06B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B070 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B075 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B07A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B07F D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B084 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B089 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B08E F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B093 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B098 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B09D 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B0A2 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B0A7 02                         byte_1A7CF:	dc.b 2
0001B0A8 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B0AD 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B0B2                            		even
0001B0B2                            		even
0001B0B2                            
0001B0B2                            ; ===========================================================================
0001B0B2                            ; ---------------------------------------------------------------------------
0001B0B2                            ; Object 86 - energy balls (FZ)
0001B0B2                            ; ---------------------------------------------------------------------------
0001B0B2                            
0001B0B2                            Obj86:					; XREF: Obj_Index
0001B0B2 7000                       		moveq	#0,d0
0001B0B4 1028 0024                  		move.b	$24(a0),d0
0001B0B8 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B0BC 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B0C0                            ; ===========================================================================
0001B0C0 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B0C2 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B0C4 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B0C6 0000                       		dc.w loc_1A962-Obj86_Index
0001B0C8 0000                       		dc.w loc_1A982-Obj86_Index
0001B0CA                            ; ===========================================================================
0001B0CA                            
0001B0CA                            Obj86_Main:				; XREF: Obj86_Index
0001B0CA 317C 2588 0008             		move.w	#$2588,8(a0)
0001B0D0 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B0D6 317C 0300 0002             		move.w	#$300,2(a0)
0001B0DC 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B0E4 117C 0000 001C             		move.b	#0,$1C(a0)
0001B0EA 117C 0003 0018             		move.b	#3,$18(a0)
0001B0F0 117C 0008 0017             		move.b	#8,$17(a0)
0001B0F6 117C 0008 0016             		move.b	#8,$16(a0)
0001B0FC 117C 0004 0001             		move.b	#4,1(a0)
0001B102 08E8 0007 0001             		bset	#7,1(a0)
0001B108 5428 0024                  		addq.b	#2,$24(a0)
0001B10C                            
0001B10C                            Obj86_Generator:			; XREF: Obj86_Index
0001B10C 2268 0034                  		movea.l	$34(a0),a1
0001B110 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B116 6600                       		bne.s	loc_1A850
0001B118 10BC 003F                  		move.b	#$3F,(a0)
0001B11C 117C 0000 0024             		move.b	#0,$24(a0)
0001B122 4EF9 0000 DE02             		jmp	DisplaySprite
0001B128                            ; ===========================================================================
0001B128                            
0001B128                            loc_1A850:
0001B128 117C 0000 001C             		move.b	#0,$1C(a0)
0001B12E 4A28 0029                  		tst.b	$29(a0)
0001B132 6700                       		beq.s	loc_1A86C
0001B134 5428 0024                  		addq.b	#2,$24(a0)
0001B138 117C 0001 001C             		move.b	#1,$1C(a0)
0001B13E 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B144                            
0001B144                            loc_1A86C:
0001B144 323C 0013                  		move.w	#$13,d1
0001B148 343C 0008                  		move.w	#8,d2
0001B14C 363C 0011                  		move.w	#$11,d3
0001B150 3828 0008                  		move.w	8(a0),d4
0001B154 4EB9 0001 01D2             		jsr	SolidObject
0001B15A 3038 D008                  		move.w	($FFFFD008).w,d0
0001B15E 9068 0008                  		sub.w	8(a0),d0
0001B162 6B00                       		bmi.s	loc_1A89A
0001B164 0440 0140                  		subi.w	#$140,d0
0001B168 6B00                       		bmi.s	loc_1A89A
0001B16A 4A28 0001                  		tst.b	1(a0)
0001B16E 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B172                            
0001B172                            loc_1A89A:
0001B172 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B176 4EB9 0000 AEC2             		jsr	AnimateSprite
0001B17C 4EF9 0000 DE02             		jmp	DisplaySprite
0001B182                            ; ===========================================================================
0001B182                            
0001B182                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B182 4A28 0029                  		tst.b	$29(a0)
0001B186 6700 0000                  		beq.w	loc_1A954
0001B18A 4228 0029                  		clr.b	$29(a0)
0001B18E D068 0030                  		add.w	$30(a0),d0
0001B192 0240 001E                  		andi.w	#$1E,d0
0001B196 D4C0                       		adda.w	d0,a2
0001B198 5868 0030                  		addq.w	#4,$30(a0)
0001B19C 4268 0032                  		clr.w	$32(a0)
0001B1A0 7403                       		moveq	#3,d2
0001B1A2                            
0001B1A2                            Obj86_Loop:
0001B1A2 4EB9 0000 E29E             		jsr	SingleObjLoad2
0001B1A8 6600 0000                  		bne.w	loc_1A954
0001B1AC 12BC 0086                  		move.b	#$86,(a1)
0001B1B0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1B6 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B1BC 137C 0008 0024             		move.b	#8,$24(a1)
0001B1C2 337C 2300 0002             		move.w	#$2300,2(a1)
0001B1C8 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B1D0 137C 000C 0016             		move.b	#$C,$16(a1)
0001B1D6 137C 000C 0017             		move.b	#$C,$17(a1)
0001B1DC 137C 0000 0020             		move.b	#0,$20(a1)
0001B1E2 137C 0003 0018             		move.b	#3,$18(a1)
0001B1E8 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B1EE 137C 0004 0001             		move.b	#4,1(a1)
0001B1F4 08E9 0007 0001             		bset	#7,1(a1)
0001B1FA 2348 0034                  		move.l	a0,$34(a1)
0001B1FE 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001B204 3228 0032                  		move.w	$32(a0),d1
0001B208 C3FC FFB1                  		muls.w	#-$4F,d1
0001B20C 0641 2578                  		addi.w	#$2578,d1
0001B210 0240 001F                  		andi.w	#$1F,d0
0001B214 0440 0010                  		subi.w	#$10,d0
0001B218 D041                       		add.w	d1,d0
0001B21A 3340 0030                  		move.w	d0,$30(a1)
0001B21E 5268 0032                  		addq.w	#1,$32(a0)
0001B222 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B228 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B22C                            
0001B22C                            loc_1A954:
0001B22C 4A68 0032                  		tst.w	$32(a0)
0001B230 6600                       		bne.s	loc_1A95E
0001B232 5428 0024                  		addq.b	#2,$24(a0)
0001B236                            
0001B236                            loc_1A95E:
0001B236 6000 FF0C                  		bra.w	loc_1A86C
0001B23A                            ; ===========================================================================
0001B23A                            
0001B23A                            loc_1A962:				; XREF: Obj86_Index
0001B23A 117C 0002 001C             		move.b	#2,$1C(a0)
0001B240 4A68 0038                  		tst.w	$38(a0)
0001B244 6600                       		bne.s	loc_1A97E
0001B246 117C 0002 0024             		move.b	#2,$24(a0)
0001B24C 2268 0034                  		movea.l	$34(a0),a1
0001B250 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B256                            
0001B256                            loc_1A97E:
0001B256 6000 FEEC                  		bra.w	loc_1A86C
0001B25A                            ; ===========================================================================
0001B25A                            
0001B25A                            loc_1A982:				; XREF: Obj86_Index
0001B25A 7000                       		moveq	#0,d0
0001B25C 1028 0025                  		move.b	$25(a0),d0
0001B260 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B264 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B268 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B26C 4EB9 0000 AEC2             		jsr	AnimateSprite
0001B272 4EF9 0000 DE02             		jmp	DisplaySprite
0001B278                            ; ===========================================================================
0001B278 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B27A 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B27C 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B27E                            ; ===========================================================================
0001B27E                            
0001B27E                            loc_1A9A6:				; XREF: Obj86_Index2
0001B27E 3028 0030                  		move.w	$30(a0),d0
0001B282 9068 0008                  		sub.w	8(a0),d0
0001B286 E940                       		asl.w	#4,d0
0001B288 3140 0010                  		move.w	d0,$10(a0)
0001B28C 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B292 5428 0025                  		addq.b	#2,$25(a0)
0001B296 4E75                       		rts	
0001B298                            ; ===========================================================================
0001B298                            
0001B298                            loc_1A9C0:				; XREF: Obj86_Index2
0001B298 4A68 0010                  		tst.w	$10(a0)
0001B29C 6700                       		beq.s	loc_1A9E6
0001B29E 4EB9 0000 DDDC             		jsr	SpeedToPos
0001B2A4 3028 0008                  		move.w	8(a0),d0
0001B2A8 9068 0030                  		sub.w	$30(a0),d0
0001B2AC 6400                       		bcc.s	loc_1A9E6
0001B2AE 4268 0010                  		clr.w	$10(a0)
0001B2B2 D168 0008                  		add.w	d0,8(a0)
0001B2B6 2268 0034                  		movea.l	$34(a0),a1
0001B2BA 5369 0032                  		subq.w	#1,$32(a1)
0001B2BE                            
0001B2BE                            loc_1A9E6:
0001B2BE 117C 0000 001C             		move.b	#0,$1C(a0)
0001B2C4 5368 0028                  		subq.w	#1,$28(a0)
0001B2C8 6600                       		bne.s	locret_1AA1C
0001B2CA 5428 0025                  		addq.b	#2,$25(a0)
0001B2CE 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2D4 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B2DA 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B2E0 7000                       		moveq	#0,d0
0001B2E2 3038 D008                  		move.w	($FFFFD008).w,d0
0001B2E6 9068 0008                  		sub.w	8(a0),d0
0001B2EA 3140 0010                  		move.w	d0,$10(a0)
0001B2EE 317C 0140 0012             		move.w	#$140,$12(a0)
0001B2F4                            
0001B2F4                            locret_1AA1C:
0001B2F4 4E75                       		rts	
0001B2F6                            ; ===========================================================================
0001B2F6                            
0001B2F6                            loc_1AA1E:				; XREF: Obj86_Index2
0001B2F6 4EB9 0000 DDDC             		jsr	SpeedToPos
0001B2FC 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B302 6400                       		bcc.s	loc_1AA34
0001B304 5368 0028                  		subq.w	#1,$28(a0)
0001B308 6700                       		beq.s	loc_1AA34
0001B30A 4E75                       		rts	
0001B30C                            ; ===========================================================================
0001B30C                            
0001B30C                            loc_1AA34:
0001B30C 2268 0034                  		movea.l	$34(a0),a1
0001B310 5369 0038                  		subq.w	#1,$38(a1)
0001B314 6000 FA0A                  		bra.w	Obj84_Delete
0001B318                            ; ===========================================================================
0001B318                            Ani_obj86:
0001B318                            	include "_anim\obj86.asm"
0001B318                            ; ---------------------------------------------------------------------------
0001B318                            ; Animation script - energy ball launcher (FZ)
0001B318                            ; ---------------------------------------------------------------------------
0001B318 0000                       		dc.w byte_1AA46-Ani_obj86
0001B31A 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B31C 0000                       		dc.w byte_1AA50-Ani_obj86
0001B31E 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B322 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B328 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B32E                            		even
0001B32E                            		even
0001B32E                            
0001B32E                            ; ---------------------------------------------------------------------------
0001B32E                            ; Sprite mappings - energy ball	launcher (FZ)
0001B32E                            ; ---------------------------------------------------------------------------
0001B32E                            Map_obj86:
0001B32E                            	include "_maps\obj86.asm"
0001B32E                            ; ---------------------------------------------------------------------------
0001B32E                            ; Sprite mappings - energy ball	launcher (FZ)
0001B32E                            ; ---------------------------------------------------------------------------
0001B32E 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B332 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B336 01                         byte_1AA5E:	dc.b 1
0001B337 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B33C 01                         byte_1AA64:	dc.b 1
0001B33D F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B342 01                         byte_1AA6A:	dc.b 1
0001B343 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B348 01                         byte_1AA70:	dc.b 1
0001B349 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B34E                            		even
0001B34E                            		even
0001B34E                            
0001B34E                            Ani_obj86a:
0001B34E                            	include "_anim\obj86a.asm"
0001B34E                            ; ---------------------------------------------------------------------------
0001B34E                            ; Animation script - energy balls (FZ)
0001B34E                            ; ---------------------------------------------------------------------------
0001B34E 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B350 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B352 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B361 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B370 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B374 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B37E                            		even
0001B37E                            		even
0001B37E                            
0001B37E                            ; ---------------------------------------------------------------------------
0001B37E                            ; Sprite mappings - energy balls (FZ)
0001B37E                            ; ---------------------------------------------------------------------------
0001B37E                            Map_obj86a:
0001B37E                            	include "_maps\obj86a.asm"
0001B37E                            ; ---------------------------------------------------------------------------
0001B37E                            ; Sprite mappings - energy balls (FZ)
0001B37E                            ; ---------------------------------------------------------------------------
0001B37E 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B382 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B386 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B38A 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B38E 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B392 0000                       		dc.w byte_1AB20-Map_obj86a
0001B394 02                         byte_1AABC:	dc.b 2
0001B395 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B39A 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B39F 02                         byte_1AAC7:	dc.b 2
0001B3A0 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B3A5 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B3AA 02                         byte_1AAD2:	dc.b 2
0001B3AB F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B3B0 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B3B5 02                         byte_1AADD:	dc.b 2
0001B3B6 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B3BB 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B3C0 02                         byte_1AAE8:	dc.b 2
0001B3C1 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B3C6 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B3CB 02                         byte_1AAF3:	dc.b 2
0001B3CC F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B3D1 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B3D6 01                         byte_1AAFE:	dc.b 1
0001B3D7 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B3DC 01                         byte_1AB04:	dc.b 1
0001B3DD F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B3E2 02                         byte_1AB0A:	dc.b 2
0001B3E3 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B3E8 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B3ED 02                         byte_1AB15:	dc.b 2
0001B3EE F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B3F3 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B3F8 00                         byte_1AB20:	dc.b 0
0001B3FA 00                         		even
0001B3FA 00                         		even
0001B3FA                            
0001B3FA                            ; ===========================================================================
0001B3FA                            ; ---------------------------------------------------------------------------
0001B3FA                            ; Object 3E - prison capsule
0001B3FA                            ; ---------------------------------------------------------------------------
0001B3FA                            
0001B3FA                            Obj3E:					; XREF: Obj_Index
0001B3FA 7000                       		moveq	#0,d0
0001B3FC 1028 0024                  		move.b	$24(a0),d0
0001B400 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B404 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B408 3028 0008                  		move.w	8(a0),d0
0001B40C 0240 FF80                  		andi.w	#$FF80,d0
0001B410 3238 F700                  		move.w	($FFFFF700).w,d1
0001B414 0441 0080                  		subi.w	#$80,d1
0001B418 0241 FF80                  		andi.w	#$FF80,d1
0001B41C 9041                       		sub.w	d1,d0
0001B41E 0C40 0280                  		cmpi.w	#$280,d0
0001B422 6200                       		bhi.s	Obj3E_Delete
0001B424 4EF9 0000 DE02             		jmp	DisplaySprite
0001B42A                            ; ===========================================================================
0001B42A                            
0001B42A                            Obj3E_Delete:
0001B42A 4EF9 0000 DE3E             		jmp	DeleteObject
0001B430                            ; ===========================================================================
0001B430 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B432 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B434 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B436 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B438 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B43A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B43C 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B43E 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B440                            
0001B440 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B444 040C 0501                  		dc.b 4,	$C, 5, 1
0001B448 0610 0403                  		dc.b 6,	$10, 4,	3
0001B44C 0810 0305                  		dc.b 8,	$10, 3,	5
0001B450                            ; ===========================================================================
0001B450                            
0001B450                            Obj3E_Main:				; XREF: Obj3E_Index
0001B450 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B458 317C 049D 0002             		move.w	#$49D,2(a0)
0001B45E 117C 0004 0001             		move.b	#4,1(a0)
0001B464 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B46A 7000                       		moveq	#0,d0
0001B46C 1028 0028                  		move.b	$28(a0),d0
0001B470 E548                       		lsl.w	#2,d0
0001B472 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B476 1159 0024                  		move.b	(a1)+,$24(a0)
0001B47A 1159 0019                  		move.b	(a1)+,$19(a0)
0001B47E 1159 0018                  		move.b	(a1)+,$18(a0)
0001B482 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B486 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B48A 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B48C 117C 0006 0020             		move.b	#6,$20(a0)
0001B492 117C 0008 0021             		move.b	#8,$21(a0)
0001B498                            
0001B498                            Obj3E_Not02:
0001B498 4E75                       		rts	
0001B49A                            ; ===========================================================================
0001B49A                            
0001B49A                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B49A 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B4A0 6700                       		beq.s	Obj3E_ChkOpened
0001B4A2 323C 002B                  		move.w	#$2B,d1
0001B4A6 343C 0018                  		move.w	#$18,d2
0001B4AA 363C 0018                  		move.w	#$18,d3
0001B4AE 3828 0008                  		move.w	8(a0),d4
0001B4B2 4EF9 0001 01D2             		jmp	SolidObject
0001B4B8                            ; ===========================================================================
0001B4B8                            
0001B4B8                            Obj3E_ChkOpened:
0001B4B8 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B4BC 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B4BE 4228 0025                  		clr.b	$25(a0)
0001B4C2 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B4C8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B4CE                            
0001B4CE                            Obj3E_DoOpen:
0001B4CE 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B4D4 4E75                       		rts	
0001B4D6                            ; ===========================================================================
0001B4D6                            
0001B4D6                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B4D6 323C 0017                  		move.w	#$17,d1
0001B4DA 343C 0008                  		move.w	#8,d2
0001B4DE 363C 0008                  		move.w	#8,d3
0001B4E2 3828 0008                  		move.w	8(a0),d4
0001B4E6 4EB9 0001 01D2             		jsr	SolidObject
0001B4EC 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B4F2 4EB9 0000 AEC2             		jsr	AnimateSprite
0001B4F8 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B4FE 4A28 0025                  		tst.b	$25(a0)
0001B502 6700                       		beq.s	locret_1AC60
0001B504 5068 000C                  		addq.w	#8,$C(a0)
0001B508 117C 000A 0024             		move.b	#$A,$24(a0)
0001B50E 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B514 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B518 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B51C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B522 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B528 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B52A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B530 6000                       		bra.s	Obj3E_ContinueCode
0001B532                            
0001B532                            Obj3E_MoveLeft:
0001B532 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B538                            
0001B538                            Obj3E_ContinueCode:
0001B538 4228 0025                  		clr.b	$25(a0)
0001B53C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B542 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B548                            
0001B548                            locret_1AC60:
0001B548 4E75                       		rts	
0001B54A                            ; ===========================================================================
0001B54A                            
0001B54A                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B54A 7007                       		moveq	#7,d0
0001B54C C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B550 6600                       		bne.s	loc_1ACA0
0001B552 4EB9 0000 E288             		jsr	SingleObjLoad
0001B558 6600                       		bne.s	loc_1ACA0
0001B55A 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B55E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B564 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B56A 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001B570 7200                       		moveq	#0,d1
0001B572 1200                       		move.b	d0,d1
0001B574 E409                       		lsr.b	#2,d1
0001B576 0441 0020                  		subi.w	#$20,d1
0001B57A D369 0008                  		add.w	d1,8(a1)
0001B57E E048                       		lsr.w	#8,d0
0001B580 E608                       		lsr.b	#3,d0
0001B582 D169 000C                  		add.w	d0,$C(a1)
0001B586                            
0001B586                            loc_1ACA0:
0001B586 5368 001E                  		subq.w	#1,$1E(a0)
0001B58A 6700                       		beq.s	Obj3E_MakeAnimal
0001B58C 4E75                       		rts	
0001B58E                            ; ===========================================================================
0001B58E                            
0001B58E                            Obj3E_MakeAnimal:
0001B58E 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B594 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B59A 117C 0006 001A             		move.b	#6,$1A(a0)
0001B5A0 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B5A6 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B5AC 7C07                       		moveq	#7,d6
0001B5AE 3A3C 009A                  		move.w	#$9A,d5
0001B5B2 78E4                       		moveq	#-$1C,d4
0001B5B4                            
0001B5B4                            Obj3E_Loop:
0001B5B4 4EB9 0000 E288             		jsr	SingleObjLoad
0001B5BA 6600                       		bne.s	locret_1ACF8
0001B5BC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B5C0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B5CC D969 0008                  		add.w	d4,8(a1)
0001B5D0 5E44                       		addq.w	#7,d4
0001B5D2 3345 0036                  		move.w	d5,$36(a1)
0001B5D6 5145                       		subq.w	#8,d5
0001B5D8 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B5DC                            
0001B5DC                            locret_1ACF8:
0001B5DC 4E75                       		rts	
0001B5DE                            ; ===========================================================================
0001B5DE                            
0001B5DE                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B5DE 7007                       		moveq	#7,d0
0001B5E0 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B5E4 6600                       		bne.s	loc_1AD38
0001B5E6 4EB9 0000 E288             		jsr	SingleObjLoad
0001B5EC 6600                       		bne.s	loc_1AD38
0001B5EE 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B5F2 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B5FE 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001B604 0240 001F                  		andi.w	#$1F,d0
0001B608 5D40                       		subq.w	#6,d0
0001B60A 4A41                       		tst.w	d1
0001B60C 6A00                       		bpl.s	loc_1AD2E
0001B60E 4440                       		neg.w	d0
0001B610                            
0001B610                            loc_1AD2E:
0001B610 D169 0008                  		add.w	d0,8(a1)
0001B614 337C 000C 0036             		move.w	#$C,$36(a1)
0001B61A                            
0001B61A                            loc_1AD38:
0001B61A 5368 001E                  		subq.w	#1,$1E(a0)
0001B61E 6600                       		bne.s	locret_1AD48
0001B620 5428 0024                  		addq.b	#2,$24(a0)
0001B624 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B62A                            
0001B62A                            locret_1AD48:
0001B62A 4E75                       		rts	
0001B62C                            ; ===========================================================================
0001B62C                            
0001B62C                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B62C 703E                       		moveq	#$3E,d0
0001B62E 7228                       		moveq	#$28,d1
0001B630 7440                       		moveq	#$40,d2
0001B632 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B636                            
0001B636                            Obj3E_FindObj28:
0001B636 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B638 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B63A D2C2                       		adda.w	d2,a1		; next object RAM
0001B63C 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B640                            
0001B640 4EB9 0000 F48E             		jsr	GotThroughAct
0001B646 4EF9 0000 DE3E             		jmp	DeleteObject
0001B64C                            ; ===========================================================================
0001B64C                            
0001B64C                            Obj3E_Obj28Found:
0001B64C 4E75                       		rts	
0001B64E                            ; ===========================================================================
0001B64E                            Ani_obj3E:
0001B64E                            	include "_anim\obj3E.asm"
0001B64E                            ; ---------------------------------------------------------------------------
0001B64E                            ; Animation script - prison capsule
0001B64E                            ; ---------------------------------------------------------------------------
0001B64E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B650 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B652 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B656                            		even
0001B656                            		even
0001B656                            
0001B656                            ; ---------------------------------------------------------------------------
0001B656                            ; Sprite mappings - prison capsule
0001B656                            ; ---------------------------------------------------------------------------
0001B656                            Map_obj3E:
0001B656                            	include "_maps\obj3E.asm"
0001B656                            ; ---------------------------------------------------------------------------
0001B656                            ; Sprite mappings - prison capsule
0001B656                            ; ---------------------------------------------------------------------------
0001B656 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B65A 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B65E 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B662 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B664 07                         byte_1AD82:	dc.b 7
0001B665 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B66A E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B66F E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B674 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B679 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B67E 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B683 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B688 01                         byte_1ADA6:	dc.b 1
0001B689 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B68E 06                         byte_1ADAC:	dc.b 6
0001B68F 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B694 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B699 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B69E 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B6A3 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B6A8 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B6AD 01                         byte_1ADCB:	dc.b 1
0001B6AE F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B6B3 02                         byte_1ADD1:	dc.b 2
0001B6B4 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B6B9 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B6BE 01                         byte_1ADDC:	dc.b 1
0001B6BF F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B6C4 00                         byte_1ADE2:	dc.b 0
0001B6C6 00                         		even
0001B6C6 00                         		even
0001B6C6                            
0001B6C6                            ; ---------------------------------------------------------------------------
0001B6C6                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B6C6                            ; ---------------------------------------------------------------------------
0001B6C6                            
0001B6C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6C6                            
0001B6C6                            
0001B6C6                            TouchResponse:				; XREF: Obj01
0001B6C6 4E71                       		nop	
0001B6C8 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B6CC 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B6D0 5142                       		subq.w	#8,d2
0001B6D2 7A00                       		moveq	#0,d5
0001B6D4 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B6D8 5705                       		subq.b	#3,d5
0001B6DA 9645                       		sub.w	d5,d3
0001B6DC 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B6E2 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B6E4 0643 000C                  		addi.w	#$C,d3
0001B6E8 7A0A                       		moveq	#$A,d5
0001B6EA                            
0001B6EA                            Touch_NoDuck:
0001B6EA 383C 0010                  		move.w	#$10,d4
0001B6EE DA45                       		add.w	d5,d5
0001B6F0 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B6F4 3C3C 005F                  		move.w	#$5F,d6
0001B6F8                            
0001B6F8                            Touch_Loop:
0001B6F8 4A29 0001                  		tst.b	1(a1)
0001B6FC 6A00                       		bpl.s	Touch_NextObj
0001B6FE 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B702 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B704                            
0001B704                            Touch_NextObj:
0001B704 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B708 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B70C                            
0001B70C 7000                       		moveq	#0,d0
0001B70E 4E75                       		rts	
0001B710                            ; ===========================================================================
0001B710 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B712 0C14                       		dc.b   $C, $14
0001B714 140C                       		dc.b  $14,  $C
0001B716 0410                       		dc.b	4, $10
0001B718 0C12                       		dc.b   $C, $12
0001B71A 1010                       		dc.b  $10, $10
0001B71C 0606                       		dc.b	6,   6
0001B71E 180C                       		dc.b  $18,  $C
0001B720 0C10                       		dc.b   $C, $10
0001B722 100C                       		dc.b  $10,  $C
0001B724 0808                       		dc.b	8,   8
0001B726 1410                       		dc.b  $14, $10
0001B728 1408                       		dc.b  $14,   8
0001B72A 0E0E                       		dc.b   $E,  $E
0001B72C 1818                       		dc.b  $18, $18
0001B72E 2810                       		dc.b  $28, $10
0001B730 1018                       		dc.b  $10, $18
0001B732 0810                       		dc.b	8, $10
0001B734 2070                       		dc.b  $20, $70
0001B736 4020                       		dc.b  $40, $20
0001B738 8020                       		dc.b  $80, $20
0001B73A 2020                       		dc.b  $20, $20
0001B73C 0808                       		dc.b	8,   8
0001B73E 0404                       		dc.b	4,   4
0001B740 2008                       		dc.b  $20,   8
0001B742 0C0C                       		dc.b   $C,  $C
0001B744 0804                       		dc.b	8,   4
0001B746 1804                       		dc.b  $18,   4
0001B748 2804                       		dc.b  $28,   4
0001B74A 0408                       		dc.b	4,   8
0001B74C 0418                       		dc.b	4, $18
0001B74E 0428                       		dc.b	4, $28
0001B750 0420                       		dc.b	4, $20
0001B752 1818                       		dc.b  $18, $18
0001B754 0C18                       		dc.b   $C, $18
0001B756 4808                       		dc.b  $48,   8
0001B758                            ; ===========================================================================
0001B758                            
0001B758                            Touch_Height:				; XREF: TouchResponse
0001B758 0240 003F                  		andi.w	#$3F,d0
0001B75C D040                       		add.w	d0,d0
0001B75E 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B762 7200                       		moveq	#0,d1
0001B764 121A                       		move.b	(a2)+,d1
0001B766 3029 0008                  		move.w	8(a1),d0
0001B76A 9041                       		sub.w	d1,d0
0001B76C 9042                       		sub.w	d2,d0
0001B76E 6400                       		bcc.s	loc_1AE98
0001B770 D241                       		add.w	d1,d1
0001B772 D041                       		add.w	d1,d0
0001B774 6500                       		bcs.s	Touch_Width
0001B776 6000 FF8C                  		bra.w	Touch_NextObj
0001B77A                            ; ===========================================================================
0001B77A                            
0001B77A                            loc_1AE98:
0001B77A B044                       		cmp.w	d4,d0
0001B77C 6200 FF86                  		bhi.w	Touch_NextObj
0001B780                            
0001B780                            Touch_Width:
0001B780 7200                       		moveq	#0,d1
0001B782 121A                       		move.b	(a2)+,d1
0001B784 3029 000C                  		move.w	$C(a1),d0
0001B788 9041                       		sub.w	d1,d0
0001B78A 9043                       		sub.w	d3,d0
0001B78C 6400                       		bcc.s	loc_1AEB6
0001B78E D241                       		add.w	d1,d1
0001B790 D240                       		add.w	d0,d1
0001B792 6500                       		bcs.s	Touch_ChkValue
0001B794 6000 FF6E                  		bra.w	Touch_NextObj
0001B798                            ; ===========================================================================
0001B798                            
0001B798                            loc_1AEB6:
0001B798 B045                       		cmp.w	d5,d0
0001B79A 6200 FF68                  		bhi.w	Touch_NextObj
0001B79E                            
0001B79E                            Touch_ChkValue:
0001B79E 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B7A2 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B7A6 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B7AA 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B7AE 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B7B2 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B7B4 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B7B8                            
0001B7B8                            ; touch	response is $40-$7F
0001B7B8                            
0001B7B8 1029 0020                  		move.b	$20(a1),d0
0001B7BC 0200 003F                  		andi.b	#$3F,d0
0001B7C0 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B7C4 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B7C6 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B7CC 6400 0000                  		bcc.w	locret_1AEF2
0001B7D0 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B7D4                            
0001B7D4                            locret_1AEF2:
0001B7D4 4E75                       		rts	
0001B7D6                            ; ===========================================================================
0001B7D6                            
0001B7D6                            Touch_Monitor:
0001B7D6 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B7DA 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B7DC 3028 000C                  		move.w	$C(a0),d0
0001B7E0 0440 0010                  		subi.w	#$10,d0
0001B7E4 B069 000C                  		cmp.w	$C(a1),d0
0001B7E8 6500                       		bcs.s	locret_1AF2E
0001B7EA 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B7EE 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B7F4 4A29 0025                  		tst.b	$25(a1)
0001B7F8 6600                       		bne.s	locret_1AF2E
0001B7FA 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B7FE 4E75                       		rts	
0001B800                            ; ===========================================================================
0001B800                            
0001B800                            loc_1AF1E:
0001B800 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B806 6600                       		bne.s	locret_1AF2E
0001B808 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B80C 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B810                            
0001B810                            locret_1AF2E:
0001B810 4E75                       		rts	
0001B812                            ; ===========================================================================
0001B812                            
0001B812                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B812 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B816 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B818 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B81E 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B822                            
0001B822                            loc_1AF40:
0001B822 4A29 0021                  		tst.b	$21(a1)
0001B826 6700                       		beq.s	Touch_KillEnemy
0001B828 4468 0010                  		neg.w	$10(a0)
0001B82C 4468 0012                  		neg.w	$12(a0)
0001B830 E0E8 0010                  		asr	$10(a0)
0001B834 E0E8 0012                  		asr	$12(a0)
0001B838 137C 0000 0020             		move.b	#0,$20(a1)
0001B83E 5329 0021                  		subq.b	#1,$21(a1)
0001B842 6600                       		bne.s	locret_1AF68
0001B844 08E9 0007 0022             		bset	#7,$22(a1)
0001B84A                            
0001B84A                            locret_1AF68:
0001B84A 4E75                       		rts	
0001B84C                            ; ===========================================================================
0001B84C                            
0001B84C                            Touch_KillEnemy:
0001B84C 08E9 0007 0022             		bset	#7,$22(a1)
0001B852 7000                       		moveq	#0,d0
0001B854 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B858 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B85C 0C40 0006                  		cmpi.w	#6,d0
0001B860 6500                       		bcs.s	loc_1AF82
0001B862 7006                       		moveq	#6,d0
0001B864                            
0001B864                            loc_1AF82:
0001B864 3340 003E                  		move.w	d0,$3E(a1)
0001B868 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B86C 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B872 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B874 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B878 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B87E                            
0001B87E                            loc_1AF9C:
0001B87E 6100 0000                  		bsr.w	AddPoints
0001B882 7400                       		moveq	#0,d2	; GMZ
0001B884 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B886 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B888                            
0001B888                            TouchKE_Explode:
0001B888 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B88C 137C 0000 0024             		move.b	#0,$24(a1)
0001B892 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B896                            
0001B896                            TouchKE_NextExplosion:
0001B896 5802                       		addq.b	#4,d2
0001B898 4EB9 0000 E288             		jsr	SingleObjLoad
0001B89E 6600                       		bne.s	TouchKE_NoExplosion
0001B8A0 336A 0008 0008             		move.w	8(a2),8(a1)
0001B8A6 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B8AC 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B8B0                            
0001B8B0                            TouchKE_NoExplosion:
0001B8B0 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B8B2 4A68 0012                  		tst.w	$12(a0)
0001B8B6 6B00                       		bmi.s	loc_1AFC2
0001B8B8 3028 000C                  		move.w	$C(a0),d0
0001B8BC B069 000C                  		cmp.w	$C(a1),d0
0001B8C0 6400                       		bcc.s	loc_1AFCA
0001B8C2 4468 0012                  		neg.w	$12(a0)
0001B8C6 4E75                       		rts	
0001B8C8                            ; ===========================================================================
0001B8C8                            
0001B8C8                            loc_1AFC2:
0001B8C8 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B8CE 4E75                       		rts	
0001B8D0                            ; ===========================================================================
0001B8D0                            
0001B8D0                            loc_1AFCA:
0001B8D0 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B8D6 4E75                       		rts	
0001B8D8                            ; ===========================================================================
0001B8D8 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B8E0                            ; ===========================================================================
0001B8E0                            
0001B8E0                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B8E0 08E9 0007 0022             		bset	#7,$22(a1)
0001B8E6                            
0001B8E6                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B8E6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B8EA 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B8EC                            
0001B8EC                            loc_1AFE6:				; XREF: Touch_Hurt
0001B8EC 70FF                       		moveq	#-1,d0
0001B8EE 4E75                       		rts	
0001B8F0                            ; ===========================================================================
0001B8F0                            
0001B8F0                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B8F0 4E71                       		nop	
0001B8F2 4A68 0030                  		tst.w	$30(a0)
0001B8F6 66F4                       		bne.s	loc_1AFE6
0001B8F8 2449                       		movea.l	a1,a2
0001B8FA                            
0001B8FA                            ; End of function TouchResponse
0001B8FA                            ; continue straight to HurtSonic
0001B8FA                            
0001B8FA                            ; ---------------------------------------------------------------------------
0001B8FA                            ; Hurting Sonic	subroutine
0001B8FA                            ; ---------------------------------------------------------------------------
0001B8FA                            
0001B8FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8FA                            
0001B8FA                            
0001B8FA                            HurtSonic:
0001B8FA 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B8FE 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B900 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B904 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B908 4EB9 0000 E288             		jsr	SingleObjLoad
0001B90E 6600                       		bne.s	Hurt_Shield
0001B910 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B914 3368 0008 0008             		move.w	8(a0),8(a1)
0001B91A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B920                            
0001B920                            Hurt_Shield:
0001B920 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B926 117C 0004 0024             		move.b	#4,$24(a0)
0001B92C 6100 8716                  		bsr.w	Sonic_ResetOnFloor
0001B930 08E8 0001 0022             		bset	#1,$22(a0)
0001B936 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B93C 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B942 0828 0006 0022             		btst	#6,$22(a0)
0001B948 6700                       		beq.s	Hurt_Reverse
0001B94A 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B950 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B956                            
0001B956                            Hurt_Reverse:
0001B956 3028 0008                  		move.w	8(a0),d0
0001B95A B06A 0008                  		cmp.w	8(a2),d0
0001B95E 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B960 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B964                            
0001B964                            Hurt_ChkSpikes:
0001B964 317C 0000 0014             		move.w	#0,$14(a0)
0001B96A 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B970 317C 0078 0030             		move.w	#$78,$30(a0)
0001B976 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B97A 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B97E 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B980 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B984 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B986 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B98A                            
0001B98A                            Hurt_Sound:
0001B98A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B990 70FF                       		moveq	#-1,d0
0001B992 4E75                       		rts	
0001B994                            ; ===========================================================================
0001B994                            
0001B994                            Hurt_NoRings:
0001B994 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B998 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B99C                            ; End of function HurtSonic
0001B99C                            
0001B99C                            ; ---------------------------------------------------------------------------
0001B99C                            ; Subroutine to	kill Sonic
0001B99C                            ; ---------------------------------------------------------------------------
0001B99C                            
0001B99C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B99C                            
0001B99C                            
0001B99C                            KillSonic:
0001B99C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B9A0 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B9A2 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B9A8 117C 0006 0024             		move.b	#6,$24(a0)
0001B9AE 6100 8694                  		bsr.w	Sonic_ResetOnFloor
0001B9B2 08E8 0001 0022             		bset	#1,$22(a0)
0001B9B8 317C F900 0012             		move.w	#-$700,$12(a0)
0001B9BE 317C 0000 0010             		move.w	#0,$10(a0)
0001B9C4 317C 0000 0014             		move.w	#0,$14(a0)
0001B9CA 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B9D0 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B9D6 08E8 0007 0002             		bset	#7,2(a0)
0001B9DC 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B9E0 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B9E4 6600                       		bne.s	Kill_Sound
0001B9E6 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B9EA                            
0001B9EA                            Kill_Sound:
0001B9EA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B9F0                            
0001B9F0                            Kill_NoDeath:
0001B9F0 70FF                       		moveq	#-1,d0
0001B9F2 4E75                       		rts	
0001B9F4                            ; End of function KillSonic
0001B9F4                            
0001B9F4                            
0001B9F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9F4                            
0001B9F4                            
0001B9F4                            Touch_Special:				; XREF: Touch_ChkValue
0001B9F4 1229 0020                  		move.b	$20(a1),d1
0001B9F8 0201 003F                  		andi.b	#$3F,d1
0001B9FC 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BA00 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BA02 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BA06 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BA08 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BA0C 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BA0E 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BA12 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BA14 4E75                       		rts	
0001BA16                            ; ===========================================================================
0001BA16                            
0001BA16                            Touch_CatKiller:			; XREF: Touch_Special
0001BA16 6000 FEC8                  		bra.w	loc_1AFDA
0001BA1A                            ; ===========================================================================
0001BA1A                            
0001BA1A                            Touch_Yadrin:				; XREF: Touch_Special
0001BA1A 9A40                       		sub.w	d0,d5
0001BA1C 0C45 0008                  		cmpi.w	#8,d5
0001BA20 6400                       		bcc.s	loc_1B144
0001BA22 3029 0008                  		move.w	8(a1),d0
0001BA26 5940                       		subq.w	#4,d0
0001BA28 0829 0000 0022             		btst	#0,$22(a1)
0001BA2E 6700                       		beq.s	loc_1B130
0001BA30 0440 0010                  		subi.w	#$10,d0
0001BA34                            
0001BA34                            loc_1B130:
0001BA34 9042                       		sub.w	d2,d0
0001BA36 6400                       		bcc.s	loc_1B13C
0001BA38 0640 0018                  		addi.w	#$18,d0
0001BA3C 6500                       		bcs.s	loc_1B140
0001BA3E 6000                       		bra.s	loc_1B144
0001BA40                            ; ===========================================================================
0001BA40                            
0001BA40                            loc_1B13C:
0001BA40 B044                       		cmp.w	d4,d0
0001BA42 6200                       		bhi.s	loc_1B144
0001BA44                            
0001BA44                            loc_1B140:
0001BA44 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BA48                            ; ===========================================================================
0001BA48                            
0001BA48                            loc_1B144:
0001BA48 6000 FDC8                  		bra.w	Touch_Enemy
0001BA4C                            ; ===========================================================================
0001BA4C                            
0001BA4C                            Touch_D7orE1:				; XREF: Touch_Special
0001BA4C 5229 0021                  		addq.b	#1,$21(a1)
0001BA50 4E75                       		rts	
0001BA52                            ; End of function Touch_Special
0001BA52                            
0001BA52                            ; ---------------------------------------------------------------------------
0001BA52                            ; Subroutine to	show the special stage layout
0001BA52                            ; ---------------------------------------------------------------------------
0001BA52                            
0001BA52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA52                            
0001BA52                            
0001BA52                            SS_ShowLayout:				; XREF: SpecialStage
0001BA52 6100 0000                  		bsr.w	SS_AniWallsRings
0001BA56 6100 0000                  		bsr.w	SS_AniItems
0001BA5A 3F05                       		move.w	d5,-(sp)
0001BA5C 43F8 8000                  		lea	($FFFF8000).w,a1
0001BA60 1038 F780                  		move.b	($FFFFF780).w,d0
0001BA64 0200 00FC                  		andi.b	#$FC,d0
0001BA68 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001BA6E 3800                       		move.w	d0,d4
0001BA70 3A01                       		move.w	d1,d5
0001BA72 C9FC 0018                  		muls.w	#$18,d4
0001BA76 CBFC 0018                  		muls.w	#$18,d5
0001BA7A 7400                       		moveq	#0,d2
0001BA7C 3438 F700                  		move.w	($FFFFF700).w,d2
0001BA80 84FC 0018                  		divu.w	#$18,d2
0001BA84 4842                       		swap	d2
0001BA86 4442                       		neg.w	d2
0001BA88 0642 FF4C                  		addi.w	#-$B4,d2
0001BA8C 7600                       		moveq	#0,d3
0001BA8E 3638 F704                  		move.w	($FFFFF704).w,d3
0001BA92 86FC 0018                  		divu.w	#$18,d3
0001BA96 4843                       		swap	d3
0001BA98 4443                       		neg.w	d3
0001BA9A 0643 FF4C                  		addi.w	#-$B4,d3
0001BA9E 3E3C 000F                  		move.w	#$F,d7
0001BAA2                            
0001BAA2                            loc_1B19E:
0001BAA2 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BAA6 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BAAA 4440                       		neg.w	d0
0001BAAC C3C2                       		muls.w	d2,d1
0001BAAE C1C3                       		muls.w	d3,d0
0001BAB0 2C00                       		move.l	d0,d6
0001BAB2 DC81                       		add.l	d1,d6
0001BAB4 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BAB8 C1C2                       		muls.w	d2,d0
0001BABA C3C3                       		muls.w	d3,d1
0001BABC D280                       		add.l	d0,d1
0001BABE 2406                       		move.l	d6,d2
0001BAC0 3C3C 000F                  		move.w	#$F,d6
0001BAC4                            
0001BAC4                            loc_1B1C0:
0001BAC4 2002                       		move.l	d2,d0
0001BAC6 E080                       		asr.l	#8,d0
0001BAC8 32C0                       		move.w	d0,(a1)+
0001BACA 2001                       		move.l	d1,d0
0001BACC E080                       		asr.l	#8,d0
0001BACE 32C0                       		move.w	d0,(a1)+
0001BAD0 D485                       		add.l	d5,d2
0001BAD2 D284                       		add.l	d4,d1
0001BAD4 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BAD8                            
0001BAD8 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BADC 0643 0018                  		addi.w	#$18,d3
0001BAE0 51CF FFC0                  		dbf	d7,loc_1B19E
0001BAE4                            
0001BAE4 3A1F                       		move.w	(sp)+,d5
0001BAE6 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BAEC 7000                       		moveq	#0,d0
0001BAEE 3038 F704                  		move.w	($FFFFF704).w,d0
0001BAF2 80FC 0018                  		divu.w	#$18,d0
0001BAF6 C0FC 0080                  		mulu.w	#$80,d0
0001BAFA D1C0                       		adda.l	d0,a0
0001BAFC 7000                       		moveq	#0,d0
0001BAFE 3038 F700                  		move.w	($FFFFF700).w,d0
0001BB02 80FC 0018                  		divu.w	#$18,d0
0001BB06 D0C0                       		adda.w	d0,a0
0001BB08 49F8 8000                  		lea	($FFFF8000).w,a4
0001BB0C 3E3C 000F                  		move.w	#$F,d7
0001BB10                            
0001BB10                            loc_1B20C:
0001BB10 3C3C 000F                  		move.w	#$F,d6
0001BB14                            
0001BB14                            loc_1B210:
0001BB14 7000                       		moveq	#0,d0
0001BB16 1018                       		move.b	(a0)+,d0
0001BB18 6700                       		beq.s	loc_1B268
0001BB1A 0C00 004E                  		cmpi.b	#$4E,d0
0001BB1E 6200                       		bhi.s	loc_1B268
0001BB20 3614                       		move.w	(a4),d3
0001BB22 0643 0120                  		addi.w	#$120,d3
0001BB26 0C43 0070                  		cmpi.w	#$70,d3
0001BB2A 6500                       		bcs.s	loc_1B268
0001BB2C 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BB30 6400                       		bcc.s	loc_1B268
0001BB32 342C 0002                  		move.w	2(a4),d2
0001BB36 0642 00F0                  		addi.w	#$F0,d2
0001BB3A 0C42 0070                  		cmpi.w	#$70,d2
0001BB3E 6500                       		bcs.s	loc_1B268
0001BB40 0C42 0170                  		cmpi.w	#$170,d2
0001BB44 6400                       		bcc.s	loc_1B268
0001BB46 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BB4C E748                       		lsl.w	#3,d0
0001BB4E 4BF5 0000                  		lea	(a5,d0.w),a5
0001BB52 225D                       		movea.l	(a5)+,a1
0001BB54 321D                       		move.w	(a5)+,d1
0001BB56 D241                       		add.w	d1,d1
0001BB58 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BB5C 365D                       		movea.w	(a5)+,a3
0001BB5E 7200                       		moveq	#0,d1
0001BB60 1219                       		move.b	(a1)+,d1
0001BB62 5301                       		subq.b	#1,d1
0001BB64 6B00                       		bmi.s	loc_1B268
0001BB66 4EB9 0000 DF60             		jsr	sub_D762
0001BB6C                            
0001BB6C                            loc_1B268:
0001BB6C 584C                       		addq.w	#4,a4
0001BB6E 51CE FFA4                  		dbf	d6,loc_1B210
0001BB72                            
0001BB72 41E8 0070                  		lea	$70(a0),a0
0001BB76 51CF FF98                  		dbf	d7,loc_1B20C
0001BB7A                            
0001BB7A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BB7E 0C05 0050                  		cmpi.b	#$50,d5
0001BB82 6700                       		beq.s	loc_1B288
0001BB84 24BC 0000 0000             		move.l	#0,(a2)
0001BB8A 4E75                       		rts	
0001BB8C                            ; ===========================================================================
0001BB8C                            
0001BB8C                            loc_1B288:
0001BB8C 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BB92 4E75                       		rts	
0001BB94                            ; End of function SS_ShowLayout
0001BB94                            
0001BB94                            ; ---------------------------------------------------------------------------
0001BB94                            ; Subroutine to	animate	walls and rings	in the special stage
0001BB94                            ; ---------------------------------------------------------------------------
0001BB94                            
0001BB94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB94                            
0001BB94                            
0001BB94                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BB94 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BB9A 7000                       		moveq	#0,d0
0001BB9C 1038 F780                  		move.b	($FFFFF780).w,d0
0001BBA0 E408                       		lsr.b	#2,d0
0001BBA2 0240 000F                  		andi.w	#$F,d0
0001BBA6 7223                       		moveq	#$23,d1
0001BBA8                            
0001BBA8                            loc_1B2A4:
0001BBA8 3280                       		move.w	d0,(a1)
0001BBAA 5049                       		addq.w	#8,a1
0001BBAC 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BBB0                            
0001BBB0 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BBB6 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BBBA 6A00                       		bpl.s	loc_1B2C8
0001BBBC 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BBC2 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BBC6 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BBCC                            
0001BBCC                            loc_1B2C8:
0001BBCC 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BBD2 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BBD6 6A00                       		bpl.s	loc_1B2E4
0001BBD8 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BBDE 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BBE2 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BBE8                            
0001BBE8                            loc_1B2E4:
0001BBE8 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BBEC 1340 0138                  		move.b	d0,$138(a1)
0001BBF0 1340 0160                  		move.b	d0,$160(a1)
0001BBF4 1340 0148                  		move.b	d0,$148(a1)
0001BBF8 1340 0150                  		move.b	d0,$150(a1)
0001BBFC 1340 01D8                  		move.b	d0,$1D8(a1)
0001BC00 1340 01E0                  		move.b	d0,$1E0(a1)
0001BC04 1340 01E8                  		move.b	d0,$1E8(a1)
0001BC08 1340 01F0                  		move.b	d0,$1F0(a1)
0001BC0C 1340 01F8                  		move.b	d0,$1F8(a1)
0001BC10 1340 0200                  		move.b	d0,$200(a1)
0001BC14 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BC18 6A00                       		bpl.s	loc_1B326
0001BC1A 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BC20 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BC24 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BC2A                            
0001BC2A                            loc_1B326:
0001BC2A 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BC2E 1340 0168                  		move.b	d0,$168(a1)
0001BC32 1340 0170                  		move.b	d0,$170(a1)
0001BC36 1340 0178                  		move.b	d0,$178(a1)
0001BC3A 1340 0180                  		move.b	d0,$180(a1)
0001BC3E 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BC42 6A00                       		bpl.s	loc_1B350
0001BC44 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BC4A 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BC4E 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BC54                            
0001BC54                            loc_1B350:
0001BC54 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BC5A 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BC60 7000                       		moveq	#0,d0
0001BC62 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BC66 D040                       		add.w	d0,d0
0001BC68 41F0 0000                  		lea	(a0,d0.w),a0
0001BC6C 3290                       		move.w	(a0),(a1)
0001BC6E 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC74 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC7A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC80 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC86 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC8C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC92 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC98 D0FC 0020                  		adda.w	#$20,a0
0001BC9C D2FC 0048                  		adda.w	#$48,a1
0001BCA0 3290                       		move.w	(a0),(a1)
0001BCA2 3368 0002 0008             		move.w	2(a0),8(a1)
0001BCA8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BCAE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BCB4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BCBA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BCC0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BCC6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BCCC D0FC 0020                  		adda.w	#$20,a0
0001BCD0 D2FC 0048                  		adda.w	#$48,a1
0001BCD4 3290                       		move.w	(a0),(a1)
0001BCD6 3368 0002 0008             		move.w	2(a0),8(a1)
0001BCDC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BCE2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BCE8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BCEE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BCF4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BCFA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD00 D0FC 0020                  		adda.w	#$20,a0
0001BD04 D2FC 0048                  		adda.w	#$48,a1
0001BD08 3290                       		move.w	(a0),(a1)
0001BD0A 3368 0002 0008             		move.w	2(a0),8(a1)
0001BD10 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BD16 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD1C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD22 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD28 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD2E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD34 D0FC 0020                  		adda.w	#$20,a0
0001BD38 D2FC 0048                  		adda.w	#$48,a1
0001BD3C 4E75                       		rts	
0001BD3E                            ; End of function SS_AniWallsRings
0001BD3E                            
0001BD3E                            ; ===========================================================================
0001BD3E 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BD4E 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BD5E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BD6E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BD7E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BD8E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BD9E 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BDAE 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BDBE                            ; ---------------------------------------------------------------------------
0001BDBE                            ; Subroutine to	remove items when you collect them in the special stage
0001BDBE                            ; ---------------------------------------------------------------------------
0001BDBE                            
0001BDBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDBE                            
0001BDBE                            
0001BDBE                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BDBE 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BDC4 303C 001F                  		move.w	#$1F,d0
0001BDC8                            
0001BDC8                            loc_1B4C4:
0001BDC8 4A12                       		tst.b	(a2)
0001BDCA 6700                       		beq.s	locret_1B4CE
0001BDCC 504A                       		addq.w	#8,a2
0001BDCE 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BDD2                            
0001BDD2                            locret_1B4CE:
0001BDD2 4E75                       		rts	
0001BDD4                            ; End of function SS_RemoveCollectedItem
0001BDD4                            
0001BDD4                            ; ---------------------------------------------------------------------------
0001BDD4                            ; Subroutine to	animate	special	stage items when you touch them
0001BDD4                            ; ---------------------------------------------------------------------------
0001BDD4                            
0001BDD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDD4                            
0001BDD4                            
0001BDD4                            SS_AniItems:				; XREF: SS_ShowLayout
0001BDD4 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BDDA 3E3C 001F                  		move.w	#$1F,d7
0001BDDE                            
0001BDDE                            loc_1B4DA:
0001BDDE 7000                       		moveq	#0,d0
0001BDE0 1010                       		move.b	(a0),d0
0001BDE2 6700                       		beq.s	loc_1B4E8
0001BDE4 E548                       		lsl.w	#2,d0
0001BDE6 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BDEA 4E91                       		jsr	(a1)
0001BDEC                            
0001BDEC                            loc_1B4E8:
0001BDEC 5048                       		addq.w	#8,a0
0001BDEE                            
0001BDEE                            loc_1B4EA:
0001BDEE 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BDF2                            
0001BDF2 4E75                       		rts	
0001BDF4                            ; End of function SS_AniItems
0001BDF4                            
0001BDF4                            ; ===========================================================================
0001BDF4 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BDF8 0000 0000                  		dc.l SS_AniBumper
0001BDFC 0000 0000                  		dc.l SS_Ani1Up
0001BE00 0000 0000                  		dc.l SS_AniReverse
0001BE04 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BE08 0000 0000                  		dc.l SS_AniGlassBlock
0001BE0C                            ; ===========================================================================
0001BE0C                            
0001BE0C                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BE0C 5328 0002                  		subq.b	#1,2(a0)
0001BE10 6A00                       		bpl.s	locret_1B530
0001BE12 117C 0005 0002             		move.b	#5,2(a0)
0001BE18 7000                       		moveq	#0,d0
0001BE1A 1028 0003                  		move.b	3(a0),d0
0001BE1E 5228 0003                  		addq.b	#1,3(a0)
0001BE22 2268 0004                  		movea.l	4(a0),a1
0001BE26 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BE2A 1280                       		move.b	d0,(a1)
0001BE2C 6600                       		bne.s	locret_1B530
0001BE2E 4290                       		clr.l	(a0)
0001BE30 42A8 0004                  		clr.l	4(a0)
0001BE34                            
0001BE34                            locret_1B530:
0001BE34 4E75                       		rts	
0001BE36                            ; ===========================================================================
0001BE36 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BE3C                            ; ===========================================================================
0001BE3C                            
0001BE3C                            SS_AniBumper:				; XREF: SS_AniIndex
0001BE3C 5328 0002                  		subq.b	#1,2(a0)
0001BE40 6A00                       		bpl.s	locret_1B566
0001BE42 117C 0007 0002             		move.b	#7,2(a0)
0001BE48 7000                       		moveq	#0,d0
0001BE4A 1028 0003                  		move.b	3(a0),d0
0001BE4E 5228 0003                  		addq.b	#1,3(a0)
0001BE52 2268 0004                  		movea.l	4(a0),a1
0001BE56 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BE5A 6600                       		bne.s	loc_1B564
0001BE5C 4290                       		clr.l	(a0)
0001BE5E 42A8 0004                  		clr.l	4(a0)
0001BE62 12BC 0025                  		move.b	#$25,(a1)
0001BE66 4E75                       		rts	
0001BE68                            ; ===========================================================================
0001BE68                            
0001BE68                            loc_1B564:
0001BE68 1280                       		move.b	d0,(a1)
0001BE6A                            
0001BE6A                            locret_1B566:
0001BE6A 4E75                       		rts	
0001BE6C                            ; ===========================================================================
0001BE6C 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BE72                            ; ===========================================================================
0001BE72                            
0001BE72                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BE72 5328 0002                  		subq.b	#1,2(a0)
0001BE76 6A00                       		bpl.s	locret_1B596
0001BE78 117C 0005 0002             		move.b	#5,2(a0)
0001BE7E 7000                       		moveq	#0,d0
0001BE80 1028 0003                  		move.b	3(a0),d0
0001BE84 5228 0003                  		addq.b	#1,3(a0)
0001BE88 2268 0004                  		movea.l	4(a0),a1
0001BE8C 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BE90 1280                       		move.b	d0,(a1)
0001BE92 6600                       		bne.s	locret_1B596
0001BE94 4290                       		clr.l	(a0)
0001BE96 42A8 0004                  		clr.l	4(a0)
0001BE9A                            
0001BE9A                            locret_1B596:
0001BE9A 4E75                       		rts	
0001BE9C                            ; ===========================================================================
0001BE9C 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BEA2                            ; ===========================================================================
0001BEA2                            
0001BEA2                            SS_AniReverse:				; XREF: SS_AniIndex
0001BEA2 5328 0002                  		subq.b	#1,2(a0)
0001BEA6 6A00                       		bpl.s	locret_1B5CC
0001BEA8 117C 0007 0002             		move.b	#7,2(a0)
0001BEAE 7000                       		moveq	#0,d0
0001BEB0 1028 0003                  		move.b	3(a0),d0
0001BEB4 5228 0003                  		addq.b	#1,3(a0)
0001BEB8 2268 0004                  		movea.l	4(a0),a1
0001BEBC 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BEC0 6600                       		bne.s	loc_1B5CA
0001BEC2 4290                       		clr.l	(a0)
0001BEC4 42A8 0004                  		clr.l	4(a0)
0001BEC8 12BC 002B                  		move.b	#$2B,(a1)
0001BECC 4E75                       		rts	
0001BECE                            ; ===========================================================================
0001BECE                            
0001BECE                            loc_1B5CA:
0001BECE 1280                       		move.b	d0,(a1)
0001BED0                            
0001BED0                            locret_1B5CC:
0001BED0 4E75                       		rts	
0001BED2                            ; ===========================================================================
0001BED2 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BED8                            ; ===========================================================================
0001BED8                            
0001BED8                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BED8 5328 0002                  		subq.b	#1,2(a0)
0001BEDC 6A00                       		bpl.s	locret_1B60C
0001BEDE 117C 0005 0002             		move.b	#5,2(a0)
0001BEE4 7000                       		moveq	#0,d0
0001BEE6 1028 0003                  		move.b	3(a0),d0
0001BEEA 5228 0003                  		addq.b	#1,3(a0)
0001BEEE 2268 0004                  		movea.l	4(a0),a1
0001BEF2 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BEF6 1280                       		move.b	d0,(a1)
0001BEF8 6600                       		bne.s	locret_1B60C
0001BEFA 4290                       		clr.l	(a0)
0001BEFC 42A8 0004                  		clr.l	4(a0)
0001BF00 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BF06 303C 00A8                  		move.w	#$A8,d0
0001BF0A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BF10                            
0001BF10                            locret_1B60C:
0001BF10 4E75                       		rts	
0001BF12                            ; ===========================================================================
0001BF12 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BF18                            ; ===========================================================================
0001BF18                            
0001BF18                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BF18 5328 0002                  		subq.b	#1,2(a0)
0001BF1C 6A00                       		bpl.s	locret_1B640
0001BF1E 117C 0001 0002             		move.b	#1,2(a0)
0001BF24 7000                       		moveq	#0,d0
0001BF26 1028 0003                  		move.b	3(a0),d0
0001BF2A 5228 0003                  		addq.b	#1,3(a0)
0001BF2E 2268 0004                  		movea.l	4(a0),a1
0001BF32 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BF36 1280                       		move.b	d0,(a1)
0001BF38 6600                       		bne.s	locret_1B640
0001BF3A 12A8 0004                  		move.b	4(a0),(a1)
0001BF3E 4290                       		clr.l	(a0)
0001BF40 42A8 0004                  		clr.l	4(a0)
0001BF44                            
0001BF44                            locret_1B640:
0001BF44 4E75                       		rts	
0001BF46                            ; ===========================================================================
0001BF46 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BF50                            ; ---------------------------------------------------------------------------
0001BF50                            ; Special stage	layout pointers
0001BF50                            ; ---------------------------------------------------------------------------
0001BF50                            SS_LayoutIndex:
0001BF50                            	include "_inc\Special stage layout pointers.asm"
0001BF50                            ; ---------------------------------------------------------------------------
0001BF50                            ; Special stage	layout pointers
0001BF50                            ; ---------------------------------------------------------------------------
0001BF50 0000 0000                  	dc.l SS_1
0001BF54 0000 0000                  	dc.l SS_2
0001BF58 0000 0000                  	dc.l SS_3
0001BF5C 0000 0000                  	dc.l SS_4
0001BF60 0000 0000                  	dc.l SS_5
0001BF64 0000 0000                  	dc.l SS_6
0001BF68                            	even
0001BF68                            	even
0001BF68                            
0001BF68                            ; ---------------------------------------------------------------------------
0001BF68                            ; Special stage	start locations
0001BF68                            ; ---------------------------------------------------------------------------
0001BF68                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BF80                            		even
0001BF80                            
0001BF80                            ; ---------------------------------------------------------------------------
0001BF80                            ; Subroutine to	load special stage layout
0001BF80                            ; ---------------------------------------------------------------------------
0001BF80                            
0001BF80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF80                            
0001BF80                            
0001BF80                            SS_Load:				; XREF: SpecialStage
0001BF80 7000                       		moveq	#0,d0
0001BF82 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BF86 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BF8A 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BF90 6500                       		bcs.s	SS_ChkEmldNum
0001BF92 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BF98                            
0001BF98                            SS_ChkEmldNum:
0001BF98 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BF9E 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BFA0 7200                       		moveq	#0,d1
0001BFA2 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BFA6 5301                       		subq.b	#1,d1
0001BFA8 6500                       		bcs.s	SS_LoadData
0001BFAA 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BFAE                            
0001BFAE                            SS_ChkEmldLoop:	
0001BFAE B033 1000                  		cmp.b	(a3,d1.w),d0
0001BFB2 6600                       		bne.s	SS_ChkEmldRepeat
0001BFB4 60CA                       		bra.s	SS_Load
0001BFB6                            ; ===========================================================================
0001BFB6                            
0001BFB6                            SS_ChkEmldRepeat:
0001BFB6 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BFBA                            
0001BFBA                            SS_LoadData:
0001BFBA E548                       		lsl.w	#2,d0
0001BFBC 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BFC0 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BFC4 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BFC8 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BFCC 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BFD2 303C 0000                  		move.w	#0,d0
0001BFD6 4EB9 0000 1942             		jsr	(EniDec).l
0001BFDC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BFE2 303C 0FFF                  		move.w	#$FFF,d0
0001BFE6                            
0001BFE6                            SS_ClrRAM3:
0001BFE6 4299                       		clr.l	(a1)+
0001BFE8 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BFEC                            
0001BFEC 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BFF2 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BFF8 723F                       		moveq	#$3F,d1
0001BFFA                            
0001BFFA                            loc_1B6F6:
0001BFFA 743F                       		moveq	#$3F,d2
0001BFFC                            
0001BFFC                            loc_1B6F8:
0001BFFC 12D8                       		move.b	(a0)+,(a1)+
0001BFFE 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C002                            
0001C002 43E9 0040                  		lea	$40(a1),a1
0001C006 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C00A                            
0001C00A 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C010 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C016 724D                       		moveq	#$4D,d1
0001C018                            
0001C018                            loc_1B714:
0001C018 22D8                       		move.l	(a0)+,(a1)+
0001C01A 32FC 0000                  		move.w	#0,(a1)+
0001C01E 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C024 32D8                       		move.w	(a0)+,(a1)+
0001C026 51C9 FFF0                  		dbf	d1,loc_1B714
0001C02A                            
0001C02A 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C030 323C 003F                  		move.w	#$3F,d1
0001C034                            
0001C034                            loc_1B730:
0001C034                            
0001C034 4299                       		clr.l	(a1)+
0001C036 51C9 FFFC                  		dbf	d1,loc_1B730
0001C03A                            
0001C03A 4E75                       		rts	
0001C03C                            ; End of function SS_Load
0001C03C                            
0001C03C                            ; ===========================================================================
0001C03C                            ; ---------------------------------------------------------------------------
0001C03C                            ; Special stage	mappings and VRAM pointers
0001C03C                            ; ---------------------------------------------------------------------------
0001C03C                            SS_MapIndex:
0001C03C                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C03C                            ; ---------------------------------------------------------------------------
0001C03C                            ; Special stage	mappings and VRAM pointers
0001C03C                            ; ---------------------------------------------------------------------------
0001C03C 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C040 0142                       	dc.w $142		; VRAM setting
0001C042 0000 0000                  	dc.l Map_SSWalls
0001C046 0142                       	dc.w $142
0001C048 0000 0000                  	dc.l Map_SSWalls
0001C04C 0142                       	dc.w $142
0001C04E 0000 0000                  	dc.l Map_SSWalls
0001C052 0142                       	dc.w $142
0001C054 0000 0000                  	dc.l Map_SSWalls
0001C058 0142                       	dc.w $142
0001C05A 0000 0000                  	dc.l Map_SSWalls
0001C05E 0142                       	dc.w $142
0001C060 0000 0000                  	dc.l Map_SSWalls
0001C064 0142                       	dc.w $142
0001C066 0000 0000                  	dc.l Map_SSWalls
0001C06A 0142                       	dc.w $142
0001C06C 0000 0000                  	dc.l Map_SSWalls
0001C070 0142                       	dc.w $142
0001C072 0000 0000                  	dc.l Map_SSWalls
0001C076 2142                       	dc.w $2142
0001C078 0000 0000                  	dc.l Map_SSWalls
0001C07C 2142                       	dc.w $2142
0001C07E 0000 0000                  	dc.l Map_SSWalls
0001C082 2142                       	dc.w $2142
0001C084 0000 0000                  	dc.l Map_SSWalls
0001C088 2142                       	dc.w $2142
0001C08A 0000 0000                  	dc.l Map_SSWalls
0001C08E 2142                       	dc.w $2142
0001C090 0000 0000                  	dc.l Map_SSWalls
0001C094 2142                       	dc.w $2142
0001C096 0000 0000                  	dc.l Map_SSWalls
0001C09A 2142                       	dc.w $2142
0001C09C 0000 0000                  	dc.l Map_SSWalls
0001C0A0 2142                       	dc.w $2142
0001C0A2 0000 0000                  	dc.l Map_SSWalls
0001C0A6 2142                       	dc.w $2142
0001C0A8 0000 0000                  	dc.l Map_SSWalls
0001C0AC 4142                       	dc.w $4142
0001C0AE 0000 0000                  	dc.l Map_SSWalls
0001C0B2 4142                       	dc.w $4142
0001C0B4 0000 0000                  	dc.l Map_SSWalls
0001C0B8 4142                       	dc.w $4142
0001C0BA 0000 0000                  	dc.l Map_SSWalls
0001C0BE 4142                       	dc.w $4142
0001C0C0 0000 0000                  	dc.l Map_SSWalls
0001C0C4 4142                       	dc.w $4142
0001C0C6 0000 0000                  	dc.l Map_SSWalls
0001C0CA 4142                       	dc.w $4142
0001C0CC 0000 0000                  	dc.l Map_SSWalls
0001C0D0 4142                       	dc.w $4142
0001C0D2 0000 0000                  	dc.l Map_SSWalls
0001C0D6 4142                       	dc.w $4142
0001C0D8 0000 0000                  	dc.l Map_SSWalls
0001C0DC 4142                       	dc.w $4142
0001C0DE 0000 0000                  	dc.l Map_SSWalls
0001C0E2 6142                       	dc.w $6142
0001C0E4 0000 0000                  	dc.l Map_SSWalls
0001C0E8 6142                       	dc.w $6142
0001C0EA 0000 0000                  	dc.l Map_SSWalls
0001C0EE 6142                       	dc.w $6142
0001C0F0 0000 0000                  	dc.l Map_SSWalls
0001C0F4 6142                       	dc.w $6142
0001C0F6 0000 0000                  	dc.l Map_SSWalls
0001C0FA 6142                       	dc.w $6142
0001C0FC 0000 0000                  	dc.l Map_SSWalls
0001C100 6142                       	dc.w $6142
0001C102 0000 0000                  	dc.l Map_SSWalls
0001C106 6142                       	dc.w $6142
0001C108 0000 0000                  	dc.l Map_SSWalls
0001C10C 6142                       	dc.w $6142
0001C10E 0000 0000                  	dc.l Map_SSWalls
0001C112 6142                       	dc.w $6142
0001C114 0000 F2F6                  	dc.l Map_obj47
0001C118 023B                       	dc.w $23B
0001C11A 0000 0000                  	dc.l Map_SS_R
0001C11E 0570                       	dc.w $570
0001C120 0000 0000                  	dc.l Map_SS_R
0001C124 0251                       	dc.w $251
0001C126 0000 0000                  	dc.l Map_SS_R
0001C12A 0370                       	dc.w $370
0001C12C 0000 0000                  	dc.l Map_SS_Up
0001C130 0263                       	dc.w $263
0001C132 0000 0000                  	dc.l Map_SS_Down
0001C136 0263                       	dc.w $263
0001C138 0000 0000                  	dc.l Map_SS_R
0001C13C 22F0                       	dc.w $22F0
0001C13E 0000 0000                  	dc.l Map_SS_Glass
0001C142 0470                       	dc.w $470
0001C144 0000 0000                  	dc.l Map_SS_Glass
0001C148 05F0                       	dc.w $5F0
0001C14A 0000 0000                  	dc.l Map_SS_Glass
0001C14E 65F0                       	dc.w $65F0
0001C150 0000 0000                  	dc.l Map_SS_Glass
0001C154 25F0                       	dc.w $25F0
0001C156 0000 0000                  	dc.l Map_SS_Glass
0001C15A 45F0                       	dc.w $45F0
0001C15C 0000 0000                  	dc.l Map_SS_R
0001C160 02F0                       	dc.w $2F0
0001C162 0100 F2F6                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C166 023B                       	dc.w $23B
0001C168 0200 F2F6                  	dc.l Map_obj47+$2000000
0001C16C 023B                       	dc.w $23B
0001C16E 0000 0000                  	dc.l Map_SS_R
0001C172 0797                       	dc.w $797
0001C174 0000 0000                  	dc.l Map_SS_R
0001C178 07A0                       	dc.w $7A0
0001C17A 0000 0000                  	dc.l Map_SS_R
0001C17E 07A9                       	dc.w $7A9
0001C180 0000 0000                  	dc.l Map_SS_R
0001C184 0797                       	dc.w $797
0001C186 0000 0000                  	dc.l Map_SS_R
0001C18A 07A0                       	dc.w $7A0
0001C18C 0000 0000                  	dc.l Map_SS_R
0001C190 07A9                       	dc.w $7A9
0001C192 0000 A660                  	dc.l Map_obj25
0001C196 27B2                       	dc.w $27B2
0001C198 0000 0000                  	dc.l Map_SS_Chaos3
0001C19C 0770                       	dc.w $770
0001C19E 0000 0000                  	dc.l Map_SS_Chaos3
0001C1A2 2770                       	dc.w $2770
0001C1A4 0000 0000                  	dc.l Map_SS_Chaos3
0001C1A8 4770                       	dc.w $4770
0001C1AA 0000 0000                  	dc.l Map_SS_Chaos3
0001C1AE 6770                       	dc.w $6770
0001C1B0 0000 0000                  	dc.l Map_SS_Chaos1
0001C1B4 0770                       	dc.w $770
0001C1B6 0000 0000                  	dc.l Map_SS_Chaos2
0001C1BA 0770                       	dc.w $770
0001C1BC 0000 0000                  	dc.l Map_SS_R
0001C1C0 04F0                       	dc.w $4F0
0001C1C2 0400 A660                  	dc.l Map_obj25+$4000000
0001C1C6 27B2                       	dc.w $27B2
0001C1C8 0500 A660                  	dc.l Map_obj25+$5000000
0001C1CC 27B2                       	dc.w $27B2
0001C1CE 0600 A660                  	dc.l Map_obj25+$6000000
0001C1D2 27B2                       	dc.w $27B2
0001C1D4 0700 A660                  	dc.l Map_obj25+$7000000
0001C1D8 27B2                       	dc.w $27B2
0001C1DA 0000 0000                  	dc.l Map_SS_Glass
0001C1DE 23F0                       	dc.w $23F0
0001C1E0 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C1E4 23F0                       	dc.w $23F0
0001C1E6 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C1EA 23F0                       	dc.w $23F0
0001C1EC 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C1F0 23F0                       	dc.w $23F0
0001C1F2 0000 0000                  	dc.l Map_SS_R+$2000000
0001C1F6 04F0                       	dc.w $4F0
0001C1F8 0000 0000                  	dc.l Map_SS_Glass
0001C1FC 05F0                       	dc.w $5F0
0001C1FE 0000 0000                  	dc.l Map_SS_Glass
0001C202 65F0                       	dc.w $65F0
0001C204 0000 0000                  	dc.l Map_SS_Glass
0001C208 25F0                       	dc.w $25F0
0001C20A 0000 0000                  	dc.l Map_SS_Glass
0001C20E 45F0                       	dc.w $45F0
0001C20E 45F0                       	dc.w $45F0
0001C210                            
0001C210                            ; ---------------------------------------------------------------------------
0001C210                            ; Sprite mappings - special stage "R" block
0001C210                            ; ---------------------------------------------------------------------------
0001C210                            Map_SS_R:
0001C210                            	include "_maps\SSRblock.asm"
0001C210                            ; ---------------------------------------------------------------------------
0001C210                            ; Sprite mappings - special stage "R" block
0001C210                            ; ---------------------------------------------------------------------------
0001C210 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C214 0000                       		dc.w byte_1B91E-Map_SS_R
0001C216 01                         byte_1B912:	dc.b 1
0001C217 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C21C 01                         byte_1B918:	dc.b 1
0001C21D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C222 00                         byte_1B91E:	dc.b 0
0001C224 00                         		even
0001C224 00                         		even
0001C224                            
0001C224                            ; ---------------------------------------------------------------------------
0001C224                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C224                            ; ---------------------------------------------------------------------------
0001C224                            Map_SS_Glass:
0001C224                            	include "_maps\SSglassblock.asm"
0001C224                            ; ---------------------------------------------------------------------------
0001C224                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C224                            ; ---------------------------------------------------------------------------
0001C224 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C228 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C22C 01                         byte_1B928:	dc.b 1
0001C22D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C232 01                         byte_1B92E:	dc.b 1
0001C233 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C238 01                         byte_1B934:	dc.b 1
0001C239 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C23E 01                         byte_1B93A:	dc.b 1
0001C23F F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C244                            		even
0001C244                            		even
0001C244                            
0001C244                            ; ---------------------------------------------------------------------------
0001C244                            ; Sprite mappings - special stage "UP" block
0001C244                            ; ---------------------------------------------------------------------------
0001C244                            Map_SS_Up:
0001C244                            	include "_maps\SSUPblock.asm"
0001C244                            ; ---------------------------------------------------------------------------
0001C244                            ; Sprite mappings - special stage "UP" block
0001C244                            ; ---------------------------------------------------------------------------
0001C244 0000                       		dc.w byte_1B944-Map_SS_Up
0001C246 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C248 01                         byte_1B944:	dc.b 1
0001C249 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C24E 01                         byte_1B94A:	dc.b 1
0001C24F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C254                            		even
0001C254                            		even
0001C254                            
0001C254                            ; ---------------------------------------------------------------------------
0001C254                            ; Sprite mappings - special stage "DOWN" block
0001C254                            ; ---------------------------------------------------------------------------
0001C254                            Map_SS_Down:
0001C254                            	include "_maps\SSDOWNblock.asm"
0001C254                            ; ---------------------------------------------------------------------------
0001C254                            ; Sprite mappings - special stage "DOWN" block
0001C254                            ; ---------------------------------------------------------------------------
0001C254 0000                       		dc.w byte_1B954-Map_SS_Down
0001C256 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C258 01                         byte_1B954:	dc.b 1
0001C259 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C25E 01                         byte_1B95A:	dc.b 1
0001C25F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C264                            		even
0001C264                            		even
0001C264                            
0001C264                            ; ---------------------------------------------------------------------------
0001C264                            ; Sprite mappings - special stage chaos	emeralds
0001C264                            ; ---------------------------------------------------------------------------
0001C264 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C266 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C268 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C26A 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C26C 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C26E 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C270 01                         byte_1B96C:	dc.b 1
0001C271 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C276 01                         byte_1B972:	dc.b 1
0001C277 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C27C 01                         byte_1B978:	dc.b 1
0001C27D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C282 01                         byte_1B97E:	dc.b 1
0001C283 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C288                            		even
0001C288                            ; ===========================================================================
0001C288                            ; ---------------------------------------------------------------------------
0001C288                            ; Object 09 - Sonic (special stage)
0001C288                            ; ---------------------------------------------------------------------------
0001C288                            
0001C288                            Obj09:					; XREF: Obj_Index
0001C288                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C288                            ;		beq.s	Obj09_Normal	; if not, branch
0001C288 6100 0000                  		bsr.w	SS_FixCamera
0001C28C                            ;		bra.w	DebugMode
0001C28C                            ; ===========================================================================
0001C28C                            
0001C28C                            Obj09_Normal:
0001C28C 7000                       		moveq	#0,d0
0001C28E 1028 0024                  		move.b	$24(a0),d0
0001C292 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C296 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C29A                            ; ===========================================================================
0001C29A 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C29C 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C29E 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C2A0 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C2A2                            ; ===========================================================================
0001C2A2                            
0001C2A2                            Obj09_Main:				; XREF: Obj09_Index
0001C2A2 5428 0024                  		addq.b	#2,$24(a0)
0001C2A6 117C 000E 0016             		move.b	#$E,$16(a0)
0001C2AC 117C 0007 0017             		move.b	#7,$17(a0)
0001C2B2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C2BA 317C 0780 0002             		move.w	#$780,2(a0)
0001C2C0 117C 0004 0001             		move.b	#4,1(a0)
0001C2C6 117C 0000 0018             		move.b	#0,$18(a0)
0001C2CC 117C 0002 001C             		move.b	#2,$1C(a0)
0001C2D2 08E8 0002 0022             		bset	#2,$22(a0)
0001C2D8 08E8 0001 0022             		bset	#1,$22(a0)
0001C2DE                            
0001C2DE                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C2DE                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C2DE                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C2DE                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C2DE                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C2DE                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C2DE                            
0001C2DE                            Obj09_NoDebug:
0001C2DE 117C 0000 0030             		move.b	#0,$30(a0)
0001C2E4 7000                       		moveq	#0,d0
0001C2E6 1028 0022                  		move.b	$22(a0),d0
0001C2EA 0240 0002                  		andi.w	#2,d0
0001C2EE 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C2F2 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C2F6 4EBA 8212                  		jsr	LoadSonicDynPLC
0001C2FA 4EF9 0000 DE02             		jmp	DisplaySprite
0001C300                            ; ===========================================================================
0001C300 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C302 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C304                            ; ===========================================================================
0001C304                            
0001C304                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C304 6100 0000                  		bsr.w	Obj09_Rise
0001C308 6100 0000                  		bsr.w	Obj09_Move
0001C30C 6100 0000                  		bsr.w	Obj09_Fall
0001C310 6000                       		bra.s	Obj09_Display
0001C312                            ; ===========================================================================
0001C312                            
0001C312                            Obj09_InAir:				; XREF: Obj09_Modes
0001C312 6100 0000                  		bsr.w	Obj09_Rise
0001C316 6100 0000                  		bsr.w	Obj09_Move
0001C31A 6100 0000                  		bsr.w	Obj09_Fall
0001C31E                            
0001C31E                            Obj09_Display:				; XREF: Obj09_OnWall
0001C31E 6100 0000                  		bsr.w	Obj09_ChkItems
0001C322 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C326 4EB9 0000 DDDC             		jsr	SpeedToPos
0001C32C 6100 0000                  		bsr.w	SS_FixCamera
0001C330 3038 F780                  		move.w	($FFFFF780).w,d0
0001C334 D078 F782                  		add.w	($FFFFF782).w,d0
0001C338 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C33C 4EB9 0001 426C             		jsr	Sonic_Animate
0001C342 4E75                       		rts	
0001C344                            
0001C344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C344                            
0001C344                            
0001C344                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C344 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C34A 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C34C 4A78 F784                          tst.w   ($FFFFF784).w
0001C350 6600                               bne.s   @corereverse1
0001C352 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C356 6000                               bra.s   Obj09_ChkRight          
0001C358                            
0001C358                            @corereverse1:
0001C358 6100 0000                          bsr.w	Obj09_MoveRight
0001C35C                            
0001C35C                            Obj09_ChkRight:
0001C35C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C362 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C364 4A78 F784                          tst.w   ($FFFFF784).w
0001C368 6600                               bne.s   @corereverse2
0001C36A 6100 0000                  		bsr.w	Obj09_MoveRight
0001C36E 6000                               bra.s   Obj09_MoveSpeed 
0001C370                            
0001C370                            @corereverse2:
0001C370 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C374                            
0001C374                            Obj09_MoveSpeed:
0001C374 1038 F602                  		move.b	($FFFFF602).w,d0
0001C378 0200 000C                  		andi.b	#$C,d0
0001C37C 6600                       		bne.s	Obj09_MoveCollision
0001C37E 3028 0010                  		move.w	$10(a0),d0
0001C382 6700                       		beq.s	Obj09_MoveCollision
0001C384 317C 0000 0010             		move.w	#0,$10(a0)
0001C38A                            
0001C38A                            Obj09_MoveCollision:
0001C38A 1038 F780                  		move.b	($FFFFF780).w,d0
0001C38E 0600 0020                  		addi.b	#$20,d0
0001C392 0200 00C0                  		andi.b	#$C0,d0
0001C396 4400                       		neg.b	d0
0001C398 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001C39E C3E8 0010                  		muls.w	$10(a0),d1
0001C3A2 D3A8 0008                  		add.l	d1,8(a0)
0001C3A6 C1E8 0012                  		muls.w	$12(a0),d0
0001C3AA D1A8 000C                  		add.l	d0,$C(a0)
0001C3AE 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C3B2 2428 000C                  		move.l	$C(a0),d2
0001C3B6 2628 0008                  		move.l	8(a0),d3
0001C3BA 6100 0000                  		bsr.w	sub_1BCE8
0001C3BE 6700                       		beq.s	loc_1BAF2
0001C3C0 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C3C4 93A8 0008                  		sub.l	d1,8(a0)
0001C3C8 91A8 000C                  		sub.l	d0,$C(a0)
0001C3CC 317C 0000 0010             		move.w	#0,$10(a0)
0001C3D2 4E75                       		rts	
0001C3D4                            ; ===========================================================================
0001C3D4                            
0001C3D4                            loc_1BAF2:
0001C3D4 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C3D8 4E75                       		rts	
0001C3DA                            ; End of function Obj09_Move
0001C3DA                            
0001C3DA                            
0001C3DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3DA                            
0001C3DA                            
0001C3DA                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C3DA 08E8 0000 0022             		bset	#0,$22(a0)
0001C3E0 4240                               clr.w   d0
0001C3E2 3038 F786                          move.w  ($FFFFF786).w,d0
0001C3E6 D040                               add.w   d0,d0
0001C3E8 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C3EE 4468 0010                          neg.w   $10(a0)
0001C3F2 4E75                               rts
0001C3F4                            
0001C3F4                            ; End of function Obj09_MoveLeft
0001C3F4                            
0001C3F4                            
0001C3F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3F4                            
0001C3F4                            
0001C3F4                            Obj09_MoveRight:
0001C3F4 08A8 0000 0022             		bclr	#0,$22(a0)
0001C3FA 4240                               clr.w   d0
0001C3FC 3038 F786                          move.w  ($FFFFF786).w,d0
0001C400 D040                               add.w   d0,d0
0001C402 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C408 4E75                       		rts
0001C40A                            
0001C40A                            ; End of function Obj09_MoveRight
0001C40A                            
0001C40A                            ; ---------------------------------------------------------------------------
0001C40A                            
0001C40A                            SS_XSpdIndex:
0001C40A 0032                       		dc.w 50
0001C40C 0064                       		dc.w 100
0001C40E 0096                       		dc.w 150
0001C410 00C8                       		dc.w 200
0001C412 00FA                       		dc.w 250
0001C414                            
0001C414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C414                            
0001C414                            
0001C414                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C414 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C41A 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C41C 4A78 F784                          tst.w   ($FFFFF784).w
0001C420 6600 0000                          bne.w   @corereverse1
0001C424 6100 0000                  		bsr.w	Obj09_MoveUp
0001C428 6000                               bra.s   Obj09_NoRise
0001C42A                            
0001C42A                            @corereverse1:
0001C42A 6100 0000                  		bsr.w	Obj09_Falling 
0001C42E                                    
0001C42E                            Obj09_NoRise:
0001C42E 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C434 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C436 4A78 F784                          tst.w   ($FFFFF784).w
0001C43A 6600 0000                          bne.w   @corereverse2
0001C43E 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C442 6000                               bra.s   Obj09_MoveYSpeed
0001C444                            
0001C444                            @corereverse2:
0001C444 6100 0000                  		bsr.w	Obj09_MoveUp
0001C448                            		
0001C448                            Obj09_MoveYSpeed:
0001C448 1038 F602                  		move.b	($FFFFF602).w,d0
0001C44C 0200 0003                  		andi.b	#3,d0
0001C450 6600                       		bne.s	Obj09_MoveYCollision
0001C452 3028 0012                  		move.w	$12(a0),d0
0001C456 6700                       		beq.s	Obj09_MoveYCollision
0001C458 317C 0000 0012             		move.w	#0,$12(a0)
0001C45E                            
0001C45E                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C45E 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C462 0600 0020                  		addi.b	#$20,d0					;	?
0001C466 0200 00C0                  		andi.b	#$C0,d0					;	
0001C46A 4400                       		neg.b	d0						;	?
0001C46C 4EB9 0000 2CEC             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C472 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C476 D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C47A C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C47E D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C482 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C486 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C48A 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C48E 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C492 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C496 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C49A 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C49E 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C4A2 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C4A8 4E75                       		rts								;	end routine
0001C4AA                            
0001C4AA                            Obj09_MoveUp:
0001C4AA 4240                               clr.w   d0
0001C4AC 3038 F786                          move.w  ($FFFFF786).w,d0
0001C4B0 D040                               add.w   d0,d0
0001C4B2 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C4B8 4468 0012                          neg.w   $12(a0)
0001C4BC 4E75                               rts
0001C4BE                            
0001C4BE                            Obj09_Falling:
0001C4BE 4240                               clr.w   d0
0001C4C0 3038 F786                          move.w  ($FFFFF786).w,d0
0001C4C4 D040                               add.w   d0,d0
0001C4C6 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C4CC 4E75                       		rts
0001C4CE                            ; End of function Obj09_Jump
0001C4CE                            
0001C4CE                            ; ---------------------------------------------------------------------------
0001C4CE                            SS_YSpdIndex:
0001C4CE 0080                       		dc.w $80
0001C4D0 0100                       		dc.w $100
0001C4D2 0180                       		dc.w $180
0001C4D4 0200                       		dc.w $200
0001C4D6 0280                       		dc.w $280
0001C4D8                            
0001C4D8                            
0001C4D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4D8                            
0001C4D8                            
0001C4D8                            nullsub_2:				; XREF: Obj09_InAir
0001C4D8 4E75                       		rts	
0001C4DA                            ; End of function nullsub_2
0001C4DA                            
0001C4DA                            ; ===========================================================================
0001C4DA                            ; ---------------------------------------------------------------------------
0001C4DA                            ; unused subroutine to limit Sonic's upward vertical speed
0001C4DA                            ; ---------------------------------------------------------------------------
0001C4DA 323C FC00                  		move.w	#-$400,d1
0001C4DE B268 0012                  		cmp.w	$12(a0),d1
0001C4E2 6F00                       		ble.s	locret_1BBB4
0001C4E4 1038 F602                  		move.b	($FFFFF602).w,d0
0001C4E8 0200 0070                  		andi.b	#$70,d0
0001C4EC 6600                       		bne.s	locret_1BBB4
0001C4EE 3141 0012                  		move.w	d1,$12(a0)
0001C4F2                            
0001C4F2                            locret_1BBB4:
0001C4F2 4E75                       		rts	
0001C4F4                            ; ---------------------------------------------------------------------------
0001C4F4                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C4F4                            ; ---------------------------------------------------------------------------
0001C4F4                            
0001C4F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4F4                            
0001C4F4                            
0001C4F4                            SS_FixCamera:				; XREF: Obj09
0001C4F4 3428 000C                  		move.w	$C(a0),d2
0001C4F8 3628 0008                  		move.w	8(a0),d3
0001C4FC 3038 F700                  		move.w	($FFFFF700).w,d0
0001C500 0443 00A0                  		subi.w	#$A0,d3
0001C504 6500                       		bcs.s	loc_1BBCE
0001C506 9043                       		sub.w	d3,d0
0001C508 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C50C                            
0001C50C                            loc_1BBCE:
0001C50C 3038 F704                  		move.w	($FFFFF704).w,d0
0001C510 0442 0070                  		subi.w	#$70,d2
0001C514 6500                       		bcs.s	locret_1BBDE
0001C516 9042                       		sub.w	d2,d0
0001C518 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C51C                            
0001C51C                            locret_1BBDE:
0001C51C 4E75                       		rts	
0001C51E                            ; End of function SS_FixCamera
0001C51E                            
0001C51E                            ; ===========================================================================
0001C51E                            
0001C51E                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C51E 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C524 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C52A 6600                       		bne.s	loc_1BBF4
0001C52C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C532                            
0001C532                            loc_1BBF4:
0001C532 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C538 6D00                       		blt.s	loc_1BC12
0001C53A 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C540                            ;		move.w	#$4000,($FFFFF780).w
0001C540 5428 0024                  		addq.b	#2,$24(a0)
0001C544 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C54A                            
0001C54A                            loc_1BC12:
0001C54A                            ;		move.w	($FFFFF780).w,d0
0001C54A                            ;		add.w	($FFFFF782).w,d0
0001C54A                            ;		move.w	d0,($FFFFF780).w
0001C54A 4EB9 0001 426C             		jsr	Sonic_Animate
0001C550 4EB9 0001 450A             		jsr	LoadSonicDynPLC
0001C556 6100 FF9C                  		bsr.w	SS_FixCamera
0001C55A 4EF9 0000 DE02             		jmp	DisplaySprite
0001C560                            ; ===========================================================================
0001C560                            
0001C560                            Obj09_Exit2:				; XREF: Obj09_Index
0001C560 5368 0038                  		subq.w	#1,$38(a0)
0001C564 6600                       		bne.s	loc_1BC40
0001C566 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C56C                            
0001C56C                            loc_1BC40:
0001C56C 4EB9 0001 426C             		jsr	Sonic_Animate
0001C572 4EB9 0001 450A             		jsr	LoadSonicDynPLC
0001C578 6100 FF7A                  		bsr.w	SS_FixCamera
0001C57C 4EF9 0000 DE02             		jmp	DisplaySprite
0001C582                            
0001C582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C582                            
0001C582                            
0001C582                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C582 2428 000C                  		move.l	$C(a0),d2
0001C586 2628 0008                  		move.l	8(a0),d3
0001C58A 1038 F780                  		move.b	($FFFFF780).w,d0
0001C58E 0200 00FC                  		andi.b	#$FC,d0
0001C592 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001C598 3828 0010                  		move.w	$10(a0),d4
0001C59C 48C4                       		ext.l	d4
0001C59E E184                       		asl.l	#8,d4
0001C5A0 C1FC 002A                  		muls.w	#$2A,d0
0001C5A4 D084                       		add.l	d4,d0
0001C5A6 3828 0012                  		move.w	$12(a0),d4
0001C5AA 48C4                       		ext.l	d4
0001C5AC E184                       		asl.l	#8,d4
0001C5AE C3FC 002A                  		muls.w	#$2A,d1
0001C5B2 D284                       		add.l	d4,d1
0001C5B4 7A00                       		moveq	#0,d5
0001C5B6 3A28 0010                  		move.w	$10(a0),d5
0001C5BA 6700                       		beq.s	Obj09_NoXFall
0001C5BC D680                       		add.l	d0,d3
0001C5BE 6100 0000                  		bsr.w	sub_1BCE8
0001C5C2 6700                       		beq.s	loc_1BCB0
0001C5C4 9680                       		sub.l	d0,d3
0001C5C6 7000                       		moveq	#0,d0
0001C5C8 3140 0010                  		move.w	d0,$10(a0)
0001C5CC 08A8 0001 0022             		bclr	#1,$22(a0)
0001C5D2                            
0001C5D2                            Obj09_NoXFall
0001C5D2 7C00                       		moveq	#0,d6
0001C5D4 3C28 0012                  		move.w	$12(a0),d6
0001C5D8 6700                       		beq.s	Obj09_NoYFall
0001C5DA D481                       		add.l	d1,d2
0001C5DC 6100 0000                  		bsr.w	sub_1BCE8
0001C5E0 6700                       		beq.s	loc_1BCC6
0001C5E2 9481                       		sub.l	d1,d2
0001C5E4 7200                       		moveq	#0,d1
0001C5E6 3141 0012                  		move.w	d1,$12(a0)
0001C5EA 4E75                       		rts	
0001C5EC                            ; ===========================================================================
0001C5EC                            
0001C5EC                            loc_1BCB0:
0001C5EC 7C00                       		moveq	#0,d6
0001C5EE 3C28 0012                  		move.w	$12(a0),d6
0001C5F2 6700                       		beq.s	Obj09_NoYFall
0001C5F4 D481                       		add.l	d1,d2
0001C5F6 6100 0000                  		bsr.w	sub_1BCE8
0001C5FA 6700                       		beq.s	loc_1BCD4
0001C5FC 9481                       		sub.l	d1,d2
0001C5FE 7200                       		moveq	#0,d1
0001C600 3141 0012                  		move.w	d1,$12(a0)
0001C604 08A8 0001 0022             		bclr	#1,$22(a0)
0001C60A                            
0001C60A                            loc_1BCC6:
0001C60A E080                       		asr.l	#8,d0
0001C60C E081                       		asr.l	#8,d1
0001C60E 3140 0010                  		move.w	d0,$10(a0)
0001C612 3141 0012                  		move.w	d1,$12(a0)
0001C616 4E75                       		rts	
0001C618                            ; ===========================================================================
0001C618                            
0001C618                            loc_1BCD4:
0001C618 E080                       		asr.l	#8,d0
0001C61A E081                       		asr.l	#8,d1
0001C61C 3140 0010                  		move.w	d0,$10(a0)
0001C620 3141 0012                  		move.w	d1,$12(a0)
0001C624 08E8 0001 0022             		bset	#1,$22(a0)
0001C62A 4E75                       		rts	
0001C62C                            
0001C62C                            Obj09_NoYFall:
0001C62C 4E75                       		rts
0001C62E                            ; End of function Obj09_Fall
0001C62E                            
0001C62E                            
0001C62E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C62E                            
0001C62E                            
0001C62E                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C62E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C634 7800                       		moveq	#0,d4
0001C636 4842                       		swap	d2
0001C638 3802                       		move.w	d2,d4
0001C63A 4842                       		swap	d2
0001C63C 0644 0044                  		addi.w	#$44,d4
0001C640 88FC 0018                  		divu.w	#$18,d4
0001C644 C8FC 0080                  		mulu.w	#$80,d4
0001C648 D3C4                       		adda.l	d4,a1
0001C64A 7800                       		moveq	#0,d4
0001C64C 4843                       		swap	d3
0001C64E 3803                       		move.w	d3,d4
0001C650 4843                       		swap	d3
0001C652 0644 0014                  		addi.w	#$14,d4
0001C656 88FC 0018                  		divu.w	#$18,d4
0001C65A D2C4                       		adda.w	d4,a1
0001C65C 7A00                       		moveq	#0,d5
0001C65E 1819                       		move.b	(a1)+,d4
0001C660 6100                       		bsr.s	sub_1BD30
0001C662 1819                       		move.b	(a1)+,d4
0001C664 6100                       		bsr.s	sub_1BD30
0001C666 D2FC 007E                  		adda.w	#$7E,a1
0001C66A 1819                       		move.b	(a1)+,d4
0001C66C 6100                       		bsr.s	sub_1BD30
0001C66E 1819                       		move.b	(a1)+,d4
0001C670 6100                       		bsr.s	sub_1BD30
0001C672 4A05                       		tst.b	d5
0001C674 4E75                       		rts	
0001C676                            ; End of function sub_1BCE8
0001C676                            
0001C676                            
0001C676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C676                            
0001C676                            
0001C676                            sub_1BD30:				; XREF: sub_1BCE8
0001C676 6700                       		beq.s	locret_1BD44
0001C678 0C04 0028                  		cmpi.b	#$28,d4
0001C67C 6500                       		blo.s	loc_1BD46
0001C67E 0C04 004B                  		cmpi.b	#$4B,d4
0001C682 6400                       		bhs.s	loc_1BD46
0001C684 0C04 003A                  		cmpi.b	#$3A,d4
0001C688 6400                       		bhs.s	locret_1BD44
0001C68A 0C04 002C                  		cmpi.b	#$2C,d4
0001C68E 6400                       		bhs.s	loc_1BD46
0001C690                            
0001C690                            locret_1BD44:
0001C690 4E75                       		rts	
0001C692                            ; ===========================================================================
0001C692                            
0001C692                            loc_1BD46:
0001C692 1144 0030                  		move.b	d4,$30(a0)
0001C696 2149 0032                  		move.l	a1,$32(a0)
0001C69A 7AFF                       		moveq	#-1,d5
0001C69C 4E75                       		rts	
0001C69E                            ; End of function sub_1BD30
0001C69E                            
0001C69E                            
0001C69E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C69E                            
0001C69E                            
0001C69E                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C69E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C6A4 7800                       		moveq	#0,d4
0001C6A6 3828 000C                  		move.w	$C(a0),d4
0001C6AA 0644 0050                  		addi.w	#$50,d4
0001C6AE 88FC 0018                  		divu.w	#$18,d4
0001C6B2 C8FC 0080                  		mulu.w	#$80,d4
0001C6B6 D3C4                       		adda.l	d4,a1
0001C6B8 7800                       		moveq	#0,d4
0001C6BA 3828 0008                  		move.w	8(a0),d4
0001C6BE 0644 0020                  		addi.w	#$20,d4
0001C6C2 88FC 0018                  		divu.w	#$18,d4
0001C6C6 D2C4                       		adda.w	d4,a1
0001C6C8 1811                       		move.b	(a1),d4
0001C6CA 6600                       		bne.s	Obj09_ChkCont
0001C6CC 4A28 003A                  		tst.b	$3A(a0)
0001C6D0 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C6D4 7800                       		moveq	#0,d4
0001C6D6 4E75                       		rts	
0001C6D8                            ; ===========================================================================
0001C6D8                            
0001C6D8                            Obj09_ChkCont:
0001C6D8 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C6DC 6600                       		bne.s	Obj09_Chk1Up
0001C6DE 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001C6E2 6600                       		bne.s	Obj09_GetCont
0001C6E4 14BC 0001                  		move.b	#1,(a2)
0001C6E8 2549 0004                  		move.l	a1,4(a2)
0001C6EC                            
0001C6EC                            Obj09_GetCont:
0001C6EC 4EB9 0000 A348             		jsr	CollectRing
0001C6F2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C6F8 6500                       		bcs.s	Obj09_NoCont
0001C6FA 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C700 6600                       		bne.s	Obj09_NoCont
0001C702 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C706 303C 00BF                  		move.w	#$BF,d0
0001C70A 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra continue sound
0001C710                            
0001C710                            Obj09_NoCont:
0001C710 7800                       		moveq	#0,d4
0001C712 4E75                       		rts	
0001C714                            ; ===========================================================================
0001C714                            
0001C714                            Obj09_Chk1Up:
0001C714 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C718 6600                       		bne.s	Obj09_ChkEmer
0001C71A 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001C71E 6600                       		bne.s	Obj09_Get1Up
0001C720 14BC 0003                  		move.b	#3,(a2)
0001C724 2549 0004                  		move.l	a1,4(a2)
0001C728                            
0001C728                            Obj09_Get1Up:
0001C728 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C72C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C730 303C 0088                  		move.w	#$88,d0
0001C734 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra life music
0001C73A 7800                       		moveq	#0,d4
0001C73C 4E75                       		rts	
0001C73E                            ; ===========================================================================
0001C73E                            
0001C73E                            Obj09_ChkEmer:
0001C73E 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C742 6500                       		bcs.s	Obj09_UPblock
0001C744 0C04 0040                  		cmpi.b	#$40,d4
0001C748 6200                       		bhi.s	Obj09_UPblock
0001C74A 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001C74E 6600                       		bne.s	Obj09_GetEmer
0001C750 14BC 0005                  		move.b	#5,(a2)
0001C754 2549 0004                  		move.l	a1,4(a2)
0001C758                            
0001C758                            Obj09_GetEmer:
0001C758 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C75E 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C760 0404 003B                  		subi.b	#$3B,d4
0001C764 7000                       		moveq	#0,d0
0001C766 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C76A 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C76E 1584 0000                  		move.b	d4,(a2,d0.w)
0001C772 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C776                            
0001C776                            Obj09_NoEmer:
0001C776 303C 0093                  		move.w	#$93,d0
0001C77A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play emerald music
0001C780 7800                       		moveq	#0,d4
0001C782 4E75                       		rts	
0001C784                            
0001C784                            ; ===========================================================================
0001C784                            
0001C784                            Obj09_UPblock:
0001C784 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001C788 6600                       		bne.s	Obj09_DOWNblock
0001C78A 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001C78E 6600                       		bne.s	Obj09_SpeedUp
0001C790 14BC 0001                  		move.b	#1,(a2)
0001C794 2549 0004                  		move.l	a1,4(a2)
0001C798                            
0001C798                            Obj09_SpeedUp:
0001C798 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001C79E 6400                       		bhs.s	Obj09_UPsnd
0001C7A0 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001C7A4                            
0001C7A4                            Obj09_UPsnd:
0001C7A4 303C 00A9                  		move.w	#$A9,d0
0001C7A8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l	; play up/down sound
0001C7AE 7800                       		moveq	#0,d4
0001C7B0 4E75                       		rts	
0001C7B2                            ; ===========================================================================
0001C7B2                            
0001C7B2                            Obj09_DOWNblock:
0001C7B2 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001C7B6 6600                       		bne.s	Obj09_Rblock
0001C7B8 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001C7BC 6600                       		bne.s	Obj09_SpeedDown
0001C7BE 14BC 0001                  		move.b	#1,(a2)
0001C7C2 2549 0004                  		move.l	a1,4(a2)
0001C7C6                            
0001C7C6                            Obj09_SpeedDown:
0001C7C6 4A78 F786                  		tst.w 	($FFFFF786).w
0001C7CA 6700                       		beq.s	Obj09_DOWNsnd
0001C7CC 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001C7D0                            
0001C7D0                            Obj09_DOWNsnd:
0001C7D0 303C 00A9                  		move.w	#$A9,d0
0001C7D4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l	; play up/down sound
0001C7DA 7800                       		moveq	#0,d4
0001C7DC 4E75                       		rts	
0001C7DE                            ; ===========================================================================
0001C7DE                            
0001C7DE                            Obj09_Rblock:
0001C7DE 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001C7E2 6600                       		bne.s	Obj09_ChkGhost
0001C7E4 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001C7E8 6600                       		bne.s	Obj09_RevStage
0001C7EA 14BC 0001                  		move.b	#1,(a2)
0001C7EE 2549 0004                  		move.l	a1,4(a2)
0001C7F2                            
0001C7F2                            Obj09_RevStage:
0001C7F2 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001C7F8 103C 00A9                  		move.b	#$A9,d0
0001C7FC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l	; play sound
0001C802 7800                       		moveq	#0,d4
0001C804 4E75                       		rts	
0001C806                            
0001C806                            ; ===========================================================================
0001C806                            
0001C806                            Obj09_ChkGhost:
0001C806 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C80A 6600                       		bne.s	Obj09_ChkGhostTag
0001C80C 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C812                            
0001C812                            Obj09_ChkGhostTag:
0001C812 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C816 6600                       		bne.s	Obj09_NoGhost
0001C818 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C81E 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C820 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C826                            
0001C826                            Obj09_NoGhost:
0001C826 78FF                       		moveq	#-1,d4
0001C828 4E75                       		rts	
0001C82A                            ; ===========================================================================
0001C82A                            
0001C82A                            Obj09_MakeGhostSolid:
0001C82A 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C830 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C832 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C838 723F                       		moveq	#$3F,d1
0001C83A                            
0001C83A                            Obj09_GhostLoop2:
0001C83A 743F                       		moveq	#$3F,d2
0001C83C                            
0001C83C                            Obj09_GhostLoop:
0001C83C 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C840 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C842 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C846                            
0001C846                            Obj09_NoReplace:
0001C846 5249                       		addq.w	#1,a1
0001C848 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C84C 43E9 0040                  		lea	$40(a1),a1
0001C850 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C854                            
0001C854                            Obj09_GhostNotSolid:
0001C854 4228 003A                  		clr.b	$3A(a0)
0001C858 7800                       		moveq	#0,d4
0001C85A 4E75                       		rts	
0001C85C                            ; End of function Obj09_ChkItems
0001C85C                            
0001C85C                            
0001C85C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C85C                            
0001C85C                            
0001C85C                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C85C 1028 0030                  		move.b	$30(a0),d0
0001C860 6600                       		bne.s	Obj09_GOAL
0001C862 5328 0036                  		subq.b	#1,$36(a0)
0001C866 6A00                       		bpl.s	loc_1BEA0
0001C868 117C 0000 0036             		move.b	#0,$36(a0)
0001C86E                            
0001C86E                            loc_1BEA0:
0001C86E 5328 0037                  		subq.b	#1,$37(a0)
0001C872 6A00                       		bpl.s	locret_1BEAC
0001C874 117C 0000 0037             		move.b	#0,$37(a0)
0001C87A                            
0001C87A                            locret_1BEAC:
0001C87A 4E75                       		rts	
0001C87C                            ; ===========================================================================
0001C87C                            
0001C87C                            ; ===========================================================================
0001C87C                            
0001C87C                            Obj09_GOAL:
0001C87C 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C880 6600                       		bne.s	Obj09_ChkGlass
0001C882 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C886 303C 00A8                  		move.w	#$A8,d0		; change item
0001C88A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C890 4E75                       		rts	
0001C892                            ; ===========================================================================
0001C892                            
0001C892                            ; ===========================================================================
0001C892                            
0001C892                            Obj09_ChkGlass:
0001C892 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C896 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C898 0C00 002E                  		cmpi.b	#$2E,d0
0001C89C 6700                       		beq.s	Obj09_Glass
0001C89E 0C00 002F                  		cmpi.b	#$2F,d0
0001C8A2 6700                       		beq.s	Obj09_Glass
0001C8A4 0C00 0030                  		cmpi.b	#$30,d0
0001C8A8 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C8AA                            
0001C8AA                            Obj09_Glass:
0001C8AA 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001C8AE 6600                       		bne.s	Obj09_GlassSnd
0001C8B0 14BC 0006                  		move.b	#6,(a2)
0001C8B4 2268 0032                  		movea.l	$32(a0),a1
0001C8B8 5389                       		subq.l	#1,a1
0001C8BA 2549 0004                  		move.l	a1,4(a2)
0001C8BE 1011                       		move.b	(a1),d0
0001C8C0 5200                       		addq.b	#1,d0		; change glass type when touched
0001C8C2 0C00 0030                  		cmpi.b	#$30,d0
0001C8C6 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C8C8 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C8CA                            
0001C8CA                            Obj09_GlassUpdate:
0001C8CA 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C8CE                            
0001C8CE                            Obj09_GlassSnd:
0001C8CE 303C 00BA                  		move.w	#$BA,d0
0001C8D2 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C8D8                            ; ===========================================================================
0001C8D8                            
0001C8D8                            Obj09_NoGlass:
0001C8D8 4E75                       		rts	
0001C8DA                            ; End of function Obj09_ChkItems2
0001C8DA                            
0001C8DA                            ; ===========================================================================
0001C8DA                            ; ---------------------------------------------------------------------------
0001C8DA                            ; Object 10 - blank
0001C8DA                            ; ---------------------------------------------------------------------------
0001C8DA                            
0001C8DA                            Obj10:					; XREF: Obj_Index
0001C8DA 4E75                       		rts	
0001C8DC                            ; ---------------------------------------------------------------------------
0001C8DC                            ; Subroutine to	animate	level graphics
0001C8DC                            ; ---------------------------------------------------------------------------
0001C8DC                            
0001C8DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8DC                            
0001C8DC                            
0001C8DC                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C8DC 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C8E0 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C8E2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C8E8 6100 0000                  		bsr.w	AniArt_GiantRing
0001C8EC 7000                       		moveq	#0,d0
0001C8EE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C8F2 D040                       		add.w	d0,d0
0001C8F4 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C8F8 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C8FC                            ; ===========================================================================
0001C8FC                            
0001C8FC                            AniArt_Pause:
0001C8FC 4E75                       		rts	
0001C8FE                            ; End of function AniArt_Load
0001C8FE                            
0001C8FE                            ; ===========================================================================
0001C8FE 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C902 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C906 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C90A 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C90C                            ; ===========================================================================
0001C90C                            ; ---------------------------------------------------------------------------
0001C90C                            ; Animated pattern routine - Green Hill
0001C90C                            ; ---------------------------------------------------------------------------
0001C90C                            
0001C90C                            AniArt_GHZ:				; XREF: AniArt_Index
0001C90C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C910 6A00                       		bpl.s	loc_1C08A
0001C912 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C918 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C91E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C922 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C926 0240 0001                  		andi.w	#1,d0
0001C92A 6700                       		beq.s	loc_1C078
0001C92C 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C930                            
0001C930                            loc_1C078:
0001C930 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C93A 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C93E 6000 0000                  		bra.w	LoadTiles
0001C942                            ; ===========================================================================
0001C942                            
0001C942                            loc_1C08A:
0001C942 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C946 6A00                       		bpl.s	loc_1C0C0
0001C948 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C94E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C954 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C958 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C95C 0240 0001                  		andi.w	#1,d0
0001C960 6700                       		beq.s	loc_1C0AE
0001C962 43E9 0200                  		lea	$200(a1),a1
0001C966                            
0001C966                            loc_1C0AE:
0001C966 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C970 323C 000F                  		move.w	#$F,d1
0001C974 6000 0000                  		bra.w	LoadTiles
0001C978                            ; ===========================================================================
0001C978                            
0001C978                            loc_1C0C0:
0001C978 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C97C 6A00                       		bpl.s	locret_1C10C
0001C97E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C984 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C988 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C98C 0240 0003                  		andi.w	#3,d0
0001C990 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C994 0800 0000                  		btst	#0,d0
0001C998 6600                       		bne.s	loc_1C0E8
0001C99A 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C9A0                            
0001C9A0                            loc_1C0E8:
0001C9A0 EF48                       		lsl.w	#7,d0
0001C9A2 3200                       		move.w	d0,d1
0001C9A4 D040                       		add.w	d0,d0
0001C9A6 D041                       		add.w	d1,d0
0001C9A8 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C9B2 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C9B8 43F1 0000                  		lea	(a1,d0.w),a1
0001C9BC 323C 000B                  		move.w	#$B,d1
0001C9C0 6100 0000                  		bsr.w	LoadTiles
0001C9C4                            
0001C9C4                            locret_1C10C:
0001C9C4 4E75                       		rts	
0001C9C6                            ; ===========================================================================
0001C9C6 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C9CA                            ; ===========================================================================
0001C9CA                            ; ---------------------------------------------------------------------------
0001C9CA                            ; Animated pattern routine - Marble
0001C9CA                            ; ---------------------------------------------------------------------------
0001C9CA                            
0001C9CA                            AniArt_MZ:				; XREF: AniArt_Index
0001C9CA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C9CE 6A00                       		bpl.s	loc_1C150
0001C9D0 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C9D6 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C9DC 7000                       		moveq	#0,d0
0001C9DE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C9E2 5200                       		addq.b	#1,d0
0001C9E4 0C00 0003                  		cmpi.b	#3,d0
0001C9E8 6600                       		bne.s	loc_1C134
0001C9EA 7000                       		moveq	#0,d0
0001C9EC                            
0001C9EC                            loc_1C134:
0001C9EC 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C9F0 C0FC 0100                  		mulu.w	#$100,d0
0001C9F4 D2C0                       		adda.w	d0,a1
0001C9F6 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CA00 323C 0007                  		move.w	#7,d1
0001CA04 6100 0000                  		bsr.w	LoadTiles
0001CA08                            
0001CA08                            loc_1C150:
0001CA08 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CA0C 6A00                       		bpl.s	loc_1C1AE
0001CA0E 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CA14 7000                       		moveq	#0,d0
0001CA16 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA1A 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CA20 EE58                       		ror.w	#7,d0
0001CA22 D8C0                       		adda.w	d0,a4
0001CA24 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CA2E 7600                       		moveq	#0,d3
0001CA30 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CA34 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CA38 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CA3C 343C 0003                  		move.w	#3,d2
0001CA40                            
0001CA40                            loc_1C188:
0001CA40 3003                       		move.w	d3,d0
0001CA42 D040                       		add.w	d0,d0
0001CA44 0240 001E                  		andi.w	#$1E,d0
0001CA48 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CA4E 3033 0000                  		move.w	(a3,d0.w),d0
0001CA52 47F3 0000                  		lea	(a3,d0.w),a3
0001CA56 224C                       		movea.l	a4,a1
0001CA58 323C 001F                  		move.w	#$1F,d1
0001CA5C 4E93                       		jsr	(a3)
0001CA5E 5843                       		addq.w	#4,d3
0001CA60 51CA FFDE                  		dbf	d2,loc_1C188
0001CA64 4E75                       		rts	
0001CA66                            ; ===========================================================================
0001CA66                            
0001CA66                            loc_1C1AE:
0001CA66 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA6A 6A00 0000                  		bpl.w	locret_1C1EA
0001CA6E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CA74 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CA7A 7000                       		moveq	#0,d0
0001CA7C 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CA80 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CA84 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CA8A C0FC 00C0                  		mulu.w	#$C0,d0
0001CA8E D2C0                       		adda.w	d0,a1
0001CA90 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CA9A 323C 0005                  		move.w	#5,d1
0001CA9E 6000 0000                  		bra.w	LoadTiles
0001CAA2                            ; ===========================================================================
0001CAA2                            
0001CAA2                            locret_1C1EA:
0001CAA2 4E75                       		rts	
0001CAA4                            ; ===========================================================================
0001CAA4                            ; ---------------------------------------------------------------------------
0001CAA4                            ; Animated pattern routine - Scrap Brain
0001CAA4                            ; ---------------------------------------------------------------------------
0001CAA4                            
0001CAA4                            AniArt_SBZ:				; XREF: AniArt_Index
0001CAA4 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CAA8 6700                       		beq.s	loc_1C1F8
0001CAAA 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CAAE 6000                       		bra.s	loc_1C250
0001CAB0                            ; ===========================================================================
0001CAB0                            
0001CAB0                            loc_1C1F8:
0001CAB0 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CAB4 6A00                       		bpl.s	loc_1C250
0001CAB6 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CABC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CAC2 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CACC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CAD0 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CAD4 0240 0007                  		andi.w	#7,d0
0001CAD8 6700                       		beq.s	loc_1C234
0001CADA 5340                       		subq.w	#1,d0
0001CADC C0FC 0180                  		mulu.w	#$180,d0
0001CAE0 43F1 0000                  		lea	(a1,d0.w),a1
0001CAE4 323C 000B                  		move.w	#$B,d1
0001CAE8 6000 0000                  		bra.w	LoadTiles
0001CAEC                            ; ===========================================================================
0001CAEC                            
0001CAEC                            loc_1C234:
0001CAEC 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CAF2                            
0001CAF2                            loc_1C23A:
0001CAF2 323C 0005                  		move.w	#5,d1
0001CAF6 6100 0000                  		bsr.w	LoadTiles
0001CAFA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CB00 323C 0005                  		move.w	#5,d1
0001CB04 6000 0000                  		bra.w	LoadTiles
0001CB08                            ; ===========================================================================
0001CB08                            
0001CB08                            loc_1C250:
0001CB08 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CB0C 6700                       		beq.s	loc_1C25C
0001CB0E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB12 6000                       		bra.s	locret_1C2A0
0001CB14                            ; ===========================================================================
0001CB14                            
0001CB14                            loc_1C25C:
0001CB14 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB18 6A00                       		bpl.s	locret_1C2A0
0001CB1A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CB20 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CB26 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CB30 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB34 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB38 0240 0007                  		andi.w	#7,d0
0001CB3C 6700                       		beq.s	loc_1C298
0001CB3E 5340                       		subq.w	#1,d0
0001CB40 C0FC 0180                  		mulu.w	#$180,d0
0001CB44 43F1 0000                  		lea	(a1,d0.w),a1
0001CB48 323C 000B                  		move.w	#$B,d1
0001CB4C 6000 0000                  		bra.w	LoadTiles
0001CB50                            ; ===========================================================================
0001CB50                            
0001CB50                            loc_1C298:
0001CB50 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CB56 609A                       		bra.s	loc_1C23A
0001CB58                            ; ===========================================================================
0001CB58                            
0001CB58                            locret_1C2A0:
0001CB58 4E75                       		rts	
0001CB5A                            ; ===========================================================================
0001CB5A                            ; ---------------------------------------------------------------------------
0001CB5A                            ; Animated pattern routine - ending sequence
0001CB5A                            ; ---------------------------------------------------------------------------
0001CB5A                            
0001CB5A                            AniArt_Ending:				; XREF: AniArt_Index
0001CB5A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB5E 6A00                       		bpl.s	loc_1C2F4
0001CB60 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CB66 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CB6C 45F8 9400                  		lea	($FFFF9400).w,a2
0001CB70 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB74 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB78 0240 0001                  		andi.w	#1,d0
0001CB7C 6700                       		beq.s	loc_1C2CE
0001CB7E 43E9 0200                  		lea	$200(a1),a1
0001CB82 45EA 0200                  		lea	$200(a2),a2
0001CB86                            
0001CB86                            loc_1C2CE:
0001CB86 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CB90 323C 000F                  		move.w	#$F,d1
0001CB94 6100 0000                  		bsr.w	LoadTiles
0001CB98 224A                       		movea.l	a2,a1
0001CB9A 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CBA4 323C 000F                  		move.w	#$F,d1
0001CBA8 6000 0000                  		bra.w	LoadTiles
0001CBAC                            ; ===========================================================================
0001CBAC                            
0001CBAC                            loc_1C2F4:
0001CBAC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CBB0 6A00                       		bpl.s	loc_1C33C
0001CBB2 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CBB8 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CBBC 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CBC0 0240 0007                  		andi.w	#7,d0
0001CBC4 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CBC8 EF48                       		lsl.w	#7,d0
0001CBCA 3200                       		move.w	d0,d1
0001CBCC D040                       		add.w	d0,d0
0001CBCE D041                       		add.w	d1,d0
0001CBD0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CBDA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CBE0 43F1 0000                  		lea	(a1,d0.w),a1
0001CBE4 323C 000B                  		move.w	#$B,d1
0001CBE8 6000 0000                  		bra.w	LoadTiles
0001CBEC                            ; ===========================================================================
0001CBEC 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CBF4                            ; ===========================================================================
0001CBF4                            
0001CBF4                            loc_1C33C:
0001CBF4 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CBF8 6A00                       		bpl.s	loc_1C37A
0001CBFA 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CC00 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CC04 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CC08 0240 0003                  		andi.w	#3,d0
0001CC0C 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CC10 E148                       		lsl.w	#8,d0
0001CC12 D040                       		add.w	d0,d0
0001CC14 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CC1E 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CC22 43F1 0000                  		lea	(a1,d0.w),a1
0001CC26 323C 000F                  		move.w	#$F,d1
0001CC2A 6000 0000                  		bra.w	LoadTiles
0001CC2E                            ; ===========================================================================
0001CC2E 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CC32                            ; ===========================================================================
0001CC32                            
0001CC32                            loc_1C37A:
0001CC32 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CC36 6A00                       		bpl.s	locret_1C3B4
0001CC38 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CC3E 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CC42 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CC46 0240 0003                  		andi.w	#3,d0
0001CC4A 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CC4E E148                       		lsl.w	#8,d0
0001CC50 D040                       		add.w	d0,d0
0001CC52 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CC5C 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CC60 43F1 0000                  		lea	(a1,d0.w),a1
0001CC64 323C 000F                  		move.w	#$F,d1
0001CC68 6000 0000                  		bra.w	LoadTiles
0001CC6C                            ; ===========================================================================
0001CC6C                            
0001CC6C                            locret_1C3B4:
0001CC6C 4E75                       		rts	
0001CC6E                            ; ===========================================================================
0001CC6E                            
0001CC6E                            AniArt_none:				; XREF: AniArt_Index
0001CC6E 4E75                       		rts	
0001CC70                            
0001CC70                            ; ---------------------------------------------------------------------------
0001CC70                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CC70                            ; ---------------------------------------------------------------------------
0001CC70                            
0001CC70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC70                            
0001CC70                            
0001CC70                            LoadTiles:
0001CC70 2C99                       		move.l	(a1)+,(a6)
0001CC72 2C99                       		move.l	(a1)+,(a6)
0001CC74 2C99                       		move.l	(a1)+,(a6)
0001CC76 2C99                       		move.l	(a1)+,(a6)
0001CC78 2C99                       		move.l	(a1)+,(a6)
0001CC7A 2C99                       		move.l	(a1)+,(a6)
0001CC7C 2C99                       		move.l	(a1)+,(a6)
0001CC7E 2C99                       		move.l	(a1)+,(a6)
0001CC80 51C9 FFEE                  		dbf	d1,LoadTiles
0001CC84 4E75                       		rts	
0001CC86                            ; End of function LoadTiles
0001CC86                            
0001CC86                            ; ===========================================================================
0001CC86                            ; ---------------------------------------------------------------------------
0001CC86                            ; Animated pattern routine - more Marble Zone
0001CC86                            ; ---------------------------------------------------------------------------
0001CC86 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CC8A 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CC8E 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CC92 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CC96 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CC9A 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CC9E 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CCA2 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CCA6                            ; ===========================================================================
0001CCA6                            
0001CCA6                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CCA6 2C91                       		move.l	(a1),(a6)
0001CCA8 43E9 0010                  		lea	$10(a1),a1
0001CCAC 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CCB0 4E75                       		rts	
0001CCB2                            ; ===========================================================================
0001CCB2                            
0001CCB2                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CCB2 2029 0002                  		move.l	2(a1),d0
0001CCB6 1029 0001                  		move.b	1(a1),d0
0001CCBA E098                       		ror.l	#8,d0
0001CCBC 2C80                       		move.l	d0,(a6)
0001CCBE 43E9 0010                  		lea	$10(a1),a1
0001CCC2 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CCC6 4E75                       		rts	
0001CCC8                            ; ===========================================================================
0001CCC8                            
0001CCC8                            loc_1C410:				; XREF: AniArt_MZextra
0001CCC8 2CA9 0002                  		move.l	2(a1),(a6)
0001CCCC 43E9 0010                  		lea	$10(a1),a1
0001CCD0 51C9 FFF6                  		dbf	d1,loc_1C410
0001CCD4 4E75                       		rts	
0001CCD6                            ; ===========================================================================
0001CCD6                            
0001CCD6                            loc_1C41E:				; XREF: AniArt_MZextra
0001CCD6 2029 0004                  		move.l	4(a1),d0
0001CCDA 1029 0003                  		move.b	3(a1),d0
0001CCDE E098                       		ror.l	#8,d0
0001CCE0 2C80                       		move.l	d0,(a6)
0001CCE2 43E9 0010                  		lea	$10(a1),a1
0001CCE6 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CCEA 4E75                       		rts	
0001CCEC                            ; ===========================================================================
0001CCEC                            
0001CCEC                            loc_1C434:				; XREF: AniArt_MZextra
0001CCEC 2CA9 0004                  		move.l	4(a1),(a6)
0001CCF0 43E9 0010                  		lea	$10(a1),a1
0001CCF4 51C9 FFF6                  		dbf	d1,loc_1C434
0001CCF8 4E75                       		rts	
0001CCFA                            ; ===========================================================================
0001CCFA                            
0001CCFA                            loc_1C442:				; XREF: AniArt_MZextra
0001CCFA 2029 0006                  		move.l	6(a1),d0
0001CCFE 1029 0005                  		move.b	5(a1),d0
0001CD02 E098                       		ror.l	#8,d0
0001CD04 2C80                       		move.l	d0,(a6)
0001CD06 43E9 0010                  		lea	$10(a1),a1
0001CD0A 51C9 FFEE                  		dbf	d1,loc_1C442
0001CD0E 4E75                       		rts	
0001CD10                            ; ===========================================================================
0001CD10                            
0001CD10                            loc_1C458:				; XREF: AniArt_MZextra
0001CD10 2CA9 0006                  		move.l	6(a1),(a6)
0001CD14 43E9 0010                  		lea	$10(a1),a1
0001CD18 51C9 FFF6                  		dbf	d1,loc_1C458
0001CD1C 4E75                       		rts	
0001CD1E                            ; ===========================================================================
0001CD1E                            
0001CD1E                            loc_1C466:				; XREF: AniArt_MZextra
0001CD1E 2029 0008                  		move.l	8(a1),d0
0001CD22 1029 0007                  		move.b	7(a1),d0
0001CD26 E098                       		ror.l	#8,d0
0001CD28 2C80                       		move.l	d0,(a6)
0001CD2A 43E9 0010                  		lea	$10(a1),a1
0001CD2E 51C9 FFEE                  		dbf	d1,loc_1C466
0001CD32 4E75                       		rts	
0001CD34                            ; ===========================================================================
0001CD34                            
0001CD34                            loc_1C47C:				; XREF: AniArt_MZextra
0001CD34 2CA9 0008                  		move.l	8(a1),(a6)
0001CD38 43E9 0010                  		lea	$10(a1),a1
0001CD3C 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CD40 4E75                       		rts	
0001CD42                            ; ===========================================================================
0001CD42                            
0001CD42                            loc_1C48A:				; XREF: AniArt_MZextra
0001CD42 2029 000A                  		move.l	$A(a1),d0
0001CD46 1029 0009                  		move.b	9(a1),d0
0001CD4A E098                       		ror.l	#8,d0
0001CD4C 2C80                       		move.l	d0,(a6)
0001CD4E 43E9 0010                  		lea	$10(a1),a1
0001CD52 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CD56 4E75                       		rts	
0001CD58                            ; ===========================================================================
0001CD58                            
0001CD58                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CD58 2CA9 000A                  		move.l	$A(a1),(a6)
0001CD5C 43E9 0010                  		lea	$10(a1),a1
0001CD60 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CD64 4E75                       		rts	
0001CD66                            ; ===========================================================================
0001CD66                            
0001CD66                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CD66 2029 000C                  		move.l	$C(a1),d0
0001CD6A 1029 000B                  		move.b	$B(a1),d0
0001CD6E E098                       		ror.l	#8,d0
0001CD70 2C80                       		move.l	d0,(a6)
0001CD72 43E9 0010                  		lea	$10(a1),a1
0001CD76 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CD7A 4E75                       		rts	
0001CD7C                            ; ===========================================================================
0001CD7C                            
0001CD7C                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CD7C 2CA9 000C                  		move.l	$C(a1),(a6)
0001CD80 43E9 0010                  		lea	$10(a1),a1
0001CD84 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CD88 4E75                       		rts	
0001CD8A                            ; ===========================================================================
0001CD8A                            
0001CD8A                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CD8A 2029 000C                  		move.l	$C(a1),d0
0001CD8E E198                       		rol.l	#8,d0
0001CD90 1011                       		move.b	0(a1),d0
0001CD92 2C80                       		move.l	d0,(a6)
0001CD94 43E9 0010                  		lea	$10(a1),a1
0001CD98 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CD9C 4E75                       		rts	
0001CD9E                            ; ===========================================================================
0001CD9E                            
0001CD9E                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CD9E 3CA9 000E                  		move.w	$E(a1),(a6)
0001CDA2 3C91                       		move.w	0(a1),(a6)
0001CDA4 43E9 0010                  		lea	$10(a1),a1
0001CDA8 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CDAC 4E75                       		rts	
0001CDAE                            ; ===========================================================================
0001CDAE                            
0001CDAE                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CDAE 2011                       		move.l	0(a1),d0
0001CDB0 1029 000F                  		move.b	$F(a1),d0
0001CDB4 E098                       		ror.l	#8,d0
0001CDB6 2C80                       		move.l	d0,(a6)
0001CDB8 43E9 0010                  		lea	$10(a1),a1
0001CDBC 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CDC0 4E75                       		rts	
0001CDC2                            
0001CDC2                            ; ---------------------------------------------------------------------------
0001CDC2                            ; Animated pattern routine - giant ring
0001CDC2                            ; ---------------------------------------------------------------------------
0001CDC2                            
0001CDC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDC2                            
0001CDC2                            
0001CDC2                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CDC2 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CDC6 6600                       		bne.s	loc_1C518
0001CDC8 4E75                       		rts	
0001CDCA                            ; ===========================================================================
0001CDCA                            
0001CDCA                            loc_1C518:
0001CDCA 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CDD0 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CDD6 7000                       		moveq	#0,d0
0001CDD8 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CDDC 43F1 0000                  		lea	(a1,d0.w),a1
0001CDE0 0640 8000                  		addi.w	#$8000,d0
0001CDE4 E588                       		lsl.l	#2,d0
0001CDE6 E448                       		lsr.w	#2,d0
0001CDE8 0040 4000                  		ori.w	#$4000,d0
0001CDEC 4840                       		swap	d0
0001CDEE 2D40 0004                  		move.l	d0,4(a6)
0001CDF2 323C 000D                  		move.w	#$D,d1
0001CDF6 6000 FE78                  		bra.w	LoadTiles
0001CDFA                            ; End of function AniArt_GiantRing
0001CDFA                            
0001CDFA                            ; ===========================================================================
0001CDFA                            ; ---------------------------------------------------------------------------
0001CDFA                            ; Object 21 - SCORE, TIME, RINGS
0001CDFA                            ; ---------------------------------------------------------------------------
0001CDFA                            
0001CDFA                            Obj21:					; XREF: Obj_Index
0001CDFA 7000                       		moveq	#0,d0
0001CDFC 1028 0024                  		move.b	$24(a0),d0
0001CE00 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CE04 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CE08                            ; ===========================================================================
0001CE08 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CE0A 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CE0C                            ; ===========================================================================
0001CE0C                            
0001CE0C                            Obj21_Main:				; XREF: Obj21_Main
0001CE0C 5428 0024                  		addq.b	#2,$24(a0)
0001CE10 317C 0090 0008             		move.w	#$90,8(a0)
0001CE16 317C 0108 000A             		move.w	#$108,$A(a0)
0001CE1C 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CE24 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CE2A 117C 0000 0001             		move.b	#0,1(a0)
0001CE30 117C 0000 0018             		move.b	#0,$18(a0)
0001CE36                            
0001CE36                            Obj21_Flash:				; XREF: Obj21_Main
0001CE36 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CE3A 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CE3C 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CE40 4EF9 0000 DE02             		jmp	DisplaySprite
0001CE46                            ; ===========================================================================
0001CE46                            
0001CE46                            Obj21_Flash2:
0001CE46 7000                       		moveq	#0,d0
0001CE48 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CE4E 6600                       		bne.s	Obj21_Display
0001CE50 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CE52 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CE58 6600                       		bne.s	Obj21_Display	; if not, branch
0001CE5A 5440                       		addq.w	#2,d0		; make time counter flash red
0001CE5C                            
0001CE5C                            Obj21_Display:
0001CE5C 1140 001A                  		move.b	d0,$1A(a0)
0001CE60 4EF9 0000 DE02             		jmp	DisplaySprite
0001CE66                            ; ===========================================================================
0001CE66                            ; ---------------------------------------------------------------------------
0001CE66                            ; Sprite mappings - SCORE, TIME, RINGS
0001CE66                            ; ---------------------------------------------------------------------------
0001CE66                            Map_obj21:
0001CE66                            	include "_maps\obj21.asm"
0001CE66                            ; ---------------------------------------------------------------------------
0001CE66                            ; Sprite mappings - SCORE, TIME, RINGS
0001CE66                            ; ---------------------------------------------------------------------------
0001CE66 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CE6A 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CE6E 0A                         byte_1C5BC:	dc.b $A
0001CE6F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE74 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE79 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE7E 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CE83 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE88 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CE8D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CE92 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE97 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE9C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CEA1 00                         		dc.b 0
0001CEA2 0A                         byte_1C5F0:	dc.b $A
0001CEA3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CEA8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEAD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CEB2 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CEB7 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEBC A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CEC1 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CEC6 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CECB 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CED0 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CED5 00                         		dc.b 0
0001CED6 0A                         byte_1C624:	dc.b $A
0001CED7 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CEDC 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEE1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CEE6 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CEEB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEF0 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CEF5 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CEFA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEFF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF04 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF09 00                         		dc.b 0
0001CF0A 0A                         byte_1C658:	dc.b $A
0001CF0B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF10 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF15 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF1A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CF1F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF24 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CF29 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CF2E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF33 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF38 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF3E 00                         		even
0001CF3E 00                         		even
0001CF3E                            
0001CF3E                            ; ---------------------------------------------------------------------------
0001CF3E                            ; Add points subroutine
0001CF3E                            ; ---------------------------------------------------------------------------
0001CF3E                            
0001CF3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF3E                            
0001CF3E                            
0001CF3E                            AddPoints:
0001CF3E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CF44 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CF48 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CF4C D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CF4E 223C 000F 423F             		move.l	#999999,d1
0001CF54 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CF56 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CF5A 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CF5C 2481                       		move.l	d1,(a2)
0001CF5E                            
0001CF5E                            loc_1C6AC:
0001CF5E 2013                       		move.l	(a3),d0
0001CF60 B092                       		cmp.l	(a2),d0
0001CF62 6500 0000                  		bcs.w	locret_1C6B6
0001CF66 2480                       		move.l	d0,(a2)
0001CF68                            
0001CF68                            locret_1C6B6:
0001CF68 4E75                       		rts	
0001CF6A                            ; End of function AddPoints
0001CF6A                            
0001CF6A                            ; ---------------------------------------------------------------------------
0001CF6A                            ; Subroutine to	update the HUD
0001CF6A                            ; ---------------------------------------------------------------------------
0001CF6A                            
0001CF6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF6A                            
0001CF6A                            
0001CF6A                            HudUpdate:
0001CF6A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CF6E 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CF72 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CF76 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CF78 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CF7C 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CF82 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CF86 6100 0000                  		bsr.w	Hud_Score
0001CF8A                            
0001CF8A                            Hud_ChkRings:
0001CF8A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CF8E 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CF90 6A00                       		bpl.s	loc_1C6E4
0001CF92 6100 0000                  		bsr.w	Hud_LoadZero
0001CF96                            
0001CF96                            loc_1C6E4:
0001CF96 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CF9A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CFA0 7200                       		moveq	#0,d1
0001CFA2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CFA6 6100 0000                  		bsr.w	Hud_Rings
0001CFAA                            
0001CFAA                            Hud_ChkTime:
0001CFAA 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CFAE 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CFB0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CFB4 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CFB6 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CFBA 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CFC0 6700                       		beq.s	TimeOver	; if yes, branch
0001CFC2 5221                       		addq.b	#1,-(a1)
0001CFC4 0C11 003C                  		cmpi.b	#60,(a1)
0001CFC8 6500                       		bcs.s	Hud_ChkLives
0001CFCA 12BC 0000                  		move.b	#0,(a1)
0001CFCE 5221                       		addq.b	#1,-(a1)
0001CFD0 0C11 003C                  		cmpi.b	#60,(a1)
0001CFD4 6500                       		bcs.s	loc_1C734
0001CFD6 12BC 0000                  		move.b	#0,(a1)
0001CFDA 5221                       		addq.b	#1,-(a1)
0001CFDC 0C11 0009                  		cmpi.b	#9,(a1)
0001CFE0 6500                       		bcs.s	loc_1C734
0001CFE2 12BC 0009                  		move.b	#9,(a1)
0001CFE6                            
0001CFE6                            loc_1C734:
0001CFE6 203C 5E40 0003             		move.l	#$5E400003,d0
0001CFEC 7200                       		moveq	#0,d1
0001CFEE 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CFF2 6100 0000                  		bsr.w	Hud_Mins
0001CFF6 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CFFC 7200                       		moveq	#0,d1
0001CFFE 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D002 6100 0000                  		bsr.w	Hud_Secs
0001D006                            
0001D006                            Hud_ChkLives:
0001D006 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D00A 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D00C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D010 6100 0000                  		bsr.w	Hud_Lives
0001D014                            
0001D014                            Hud_ChkBonus:
0001D014 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D018 6700                       		beq.s	Hud_End		; if not, branch
0001D01A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D01E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D028 7200                       		moveq	#0,d1
0001D02A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D02E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D032 7200                       		moveq	#0,d1
0001D034 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D038 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D03C                            
0001D03C                            Hud_End:
0001D03C 4E75                       		rts	
0001D03E                            ; ===========================================================================
0001D03E                            
0001D03E                            TimeOver:				; XREF: Hud_ChkTime
0001D03E 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D042 41F8 D000                  		lea	($FFFFD000).w,a0
0001D046 2448                       		movea.l	a0,a2
0001D048 6100 E952                  		bsr.w	KillSonic
0001D04C 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D052 4E75                       		rts	
0001D054                            ; ===========================================================================
0001D054                            
0001D054                            HudDebug:				; XREF: HudUpdate
0001D054 6100 0000                  		bsr.w	HudDb_XY
0001D058 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D05C 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D05E 6A00                       		bpl.s	HudDb_Rings
0001D060 6100 0000                  		bsr.w	Hud_LoadZero
0001D064                            
0001D064                            HudDb_Rings:
0001D064 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D068 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D06E 7200                       		moveq	#0,d1
0001D070 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D074 6100 0000                  		bsr.w	Hud_Rings
0001D078                            
0001D078                            HudDb_ObjCount:
0001D078 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D07E 7200                       		moveq	#0,d1
0001D080 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D084 6100 0000                  		bsr.w	Hud_Secs
0001D088 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D08C 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D08E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D092 6100 0000                  		bsr.w	Hud_Lives
0001D096                            
0001D096                            HudDb_ChkBonus:
0001D096 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D09A 6700                       		beq.s	HudDb_End	; if not, branch
0001D09C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D0A0 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D0AA 7200                       		moveq	#0,d1
0001D0AC 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D0B0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0B4 7200                       		moveq	#0,d1
0001D0B6 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D0BA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0BE                            
0001D0BE                            HudDb_End:
0001D0BE 4E75                       		rts	
0001D0C0                            ; End of function HudUpdate
0001D0C0                            
0001D0C0                            ; ---------------------------------------------------------------------------
0001D0C0                            ; Subroutine to	load "0" on the	HUD
0001D0C0                            ; ---------------------------------------------------------------------------
0001D0C0                            
0001D0C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0C0                            
0001D0C0                            
0001D0C0                            Hud_LoadZero:				; XREF: HudUpdate
0001D0C0 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D0CA 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D0CE 343C 0002                  		move.w	#2,d2
0001D0D2 6000                       		bra.s	loc_1C83E
0001D0D4                            ; End of function Hud_LoadZero
0001D0D4                            
0001D0D4                            ; ---------------------------------------------------------------------------
0001D0D4                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D0D4                            ; ---------------------------------------------------------------------------
0001D0D4                            
0001D0D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0D4                            
0001D0D4                            
0001D0D4                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D0D4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D0DA 6100 0000                  		bsr.w	Hud_Lives
0001D0DE 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D0E8 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D0EC 343C 000E                  		move.w	#$E,d2
0001D0F0                            
0001D0F0                            loc_1C83E:				; XREF: Hud_LoadZero
0001D0F0 43FA 0000                  		lea	Art_Hud(pc),a1
0001D0F4                            
0001D0F4                            loc_1C842:
0001D0F4 323C 000F                  		move.w	#$F,d1
0001D0F8 101A                       		move.b	(a2)+,d0
0001D0FA 6B00                       		bmi.s	loc_1C85E
0001D0FC 4880                       		ext.w	d0
0001D0FE EB48                       		lsl.w	#5,d0
0001D100 47F1 0000                  		lea	(a1,d0.w),a3
0001D104                            
0001D104                            loc_1C852:
0001D104 2C9B                       		move.l	(a3)+,(a6)
0001D106 51C9 FFFC                  		dbf	d1,loc_1C852
0001D10A                            
0001D10A                            loc_1C858:
0001D10A 51CA FFE8                  		dbf	d2,loc_1C842
0001D10E                            
0001D10E 4E75                       		rts	
0001D110                            ; ===========================================================================
0001D110                            
0001D110                            loc_1C85E:
0001D110 2CBC 0000 0000             		move.l	#0,(a6)
0001D116 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D11A                            
0001D11A 60EE                       		bra.s	loc_1C858
0001D11C                            ; End of function Hud_Base
0001D11C                            
0001D11C                            ; ===========================================================================
0001D11C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D128 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D12C                            ; ---------------------------------------------------------------------------
0001D12C                            ; Subroutine to	load debug mode	numbers	patterns
0001D12C                            ; ---------------------------------------------------------------------------
0001D12C                            
0001D12C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D12C                            
0001D12C                            
0001D12C                            HudDb_XY:				; XREF: HudDebug
0001D12C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D136 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D13A 4841                       		swap	d1
0001D13C 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D140 6100                       		bsr.s	HudDb_XY2
0001D142 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D146 4841                       		swap	d1
0001D148 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D14C                            ; End of function HudDb_XY
0001D14C                            
0001D14C                            
0001D14C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D14C                            
0001D14C                            
0001D14C                            HudDb_XY2:
0001D14C 7C07                       		moveq	#7,d6
0001D14E 43F9 0000 05F4             		lea	(Art_Text).l,a1
0001D154                            
0001D154                            HudDb_XYLoop:
0001D154 E959                       		rol.w	#4,d1
0001D156 3401                       		move.w	d1,d2
0001D158 0242 000F                  		andi.w	#$F,d2
0001D15C 0C42 000A                  		cmpi.w	#$A,d2
0001D160 6500                       		bcs.s	loc_1C8B2
0001D162 5E42                       		addq.w	#7,d2
0001D164                            
0001D164                            loc_1C8B2:
0001D164 EB4A                       		lsl.w	#5,d2
0001D166 47F1 2000                  		lea	(a1,d2.w),a3
0001D16A 2C9B                       		move.l	(a3)+,(a6)
0001D16C 2C9B                       		move.l	(a3)+,(a6)
0001D16E 2C9B                       		move.l	(a3)+,(a6)
0001D170 2C9B                       		move.l	(a3)+,(a6)
0001D172 2C9B                       		move.l	(a3)+,(a6)
0001D174 2C9B                       		move.l	(a3)+,(a6)
0001D176 2C9B                       		move.l	(a3)+,(a6)
0001D178 2C9B                       		move.l	(a3)+,(a6)
0001D17A 4841                       		swap	d1
0001D17C 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D180                            
0001D180 4E75                       		rts	
0001D182                            ; End of function HudDb_XY2
0001D182                            
0001D182                            ; ---------------------------------------------------------------------------
0001D182                            ; Subroutine to	load rings numbers patterns
0001D182                            ; ---------------------------------------------------------------------------
0001D182                            
0001D182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D182                            
0001D182                            
0001D182                            Hud_Rings:				; XREF: HudUpdate
0001D182 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D188 7C02                       		moveq	#2,d6
0001D18A 6000                       		bra.s	Hud_LoadArt
0001D18C                            ; End of function Hud_Rings
0001D18C                            
0001D18C                            ; ---------------------------------------------------------------------------
0001D18C                            ; Subroutine to	load score numbers patterns
0001D18C                            ; ---------------------------------------------------------------------------
0001D18C                            
0001D18C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D18C                            
0001D18C                            
0001D18C                            Hud_Score:				; XREF: HudUpdate
0001D18C 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D192 7C05                       		moveq	#5,d6
0001D194                            
0001D194                            Hud_LoadArt:
0001D194 7800                       		moveq	#0,d4
0001D196 43FA 0000                  		lea	Art_Hud(pc),a1
0001D19A                            
0001D19A                            Hud_ScoreLoop:
0001D19A 7400                       		moveq	#0,d2
0001D19C 261A                       		move.l	(a2)+,d3
0001D19E                            
0001D19E                            loc_1C8EC:
0001D19E 9283                       		sub.l	d3,d1
0001D1A0 6500                       		bcs.s	loc_1C8F4
0001D1A2 5242                       		addq.w	#1,d2
0001D1A4 60F8                       		bra.s	loc_1C8EC
0001D1A6                            ; ===========================================================================
0001D1A6                            
0001D1A6                            loc_1C8F4:
0001D1A6 D283                       		add.l	d3,d1
0001D1A8 4A42                       		tst.w	d2
0001D1AA 6700                       		beq.s	loc_1C8FE
0001D1AC 383C 0001                  		move.w	#1,d4
0001D1B0                            
0001D1B0                            loc_1C8FE:
0001D1B0 4A44                       		tst.w	d4
0001D1B2 6700                       		beq.s	loc_1C92C
0001D1B4 ED4A                       		lsl.w	#6,d2
0001D1B6 2D40 0004                  		move.l	d0,4(a6)
0001D1BA 47F1 2000                  		lea	(a1,d2.w),a3
0001D1BE 2C9B                       		move.l	(a3)+,(a6)
0001D1C0 2C9B                       		move.l	(a3)+,(a6)
0001D1C2 2C9B                       		move.l	(a3)+,(a6)
0001D1C4 2C9B                       		move.l	(a3)+,(a6)
0001D1C6 2C9B                       		move.l	(a3)+,(a6)
0001D1C8 2C9B                       		move.l	(a3)+,(a6)
0001D1CA 2C9B                       		move.l	(a3)+,(a6)
0001D1CC 2C9B                       		move.l	(a3)+,(a6)
0001D1CE 2C9B                       		move.l	(a3)+,(a6)
0001D1D0 2C9B                       		move.l	(a3)+,(a6)
0001D1D2 2C9B                       		move.l	(a3)+,(a6)
0001D1D4 2C9B                       		move.l	(a3)+,(a6)
0001D1D6 2C9B                       		move.l	(a3)+,(a6)
0001D1D8 2C9B                       		move.l	(a3)+,(a6)
0001D1DA 2C9B                       		move.l	(a3)+,(a6)
0001D1DC 2C9B                       		move.l	(a3)+,(a6)
0001D1DE                            
0001D1DE                            loc_1C92C:
0001D1DE 0680 0040 0000             		addi.l	#$400000,d0
0001D1E4 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D1E8                            
0001D1E8 4E75                       		rts	
0001D1EA                            ; End of function Hud_Score
0001D1EA                            
0001D1EA                            ; ---------------------------------------------------------------------------
0001D1EA                            ; Subroutine to	load countdown numbers on the continue screen
0001D1EA                            ; ---------------------------------------------------------------------------
0001D1EA                            
0001D1EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1EA                            
0001D1EA                            
0001D1EA                            ContScrCounter:				; XREF: ContinueScreen
0001D1EA 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D1F4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D1FA 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D200 7C01                       		moveq	#1,d6
0001D202 7800                       		moveq	#0,d4
0001D204 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D208                            
0001D208                            ContScr_Loop:
0001D208 7400                       		moveq	#0,d2
0001D20A 261A                       		move.l	(a2)+,d3
0001D20C                            
0001D20C                            loc_1C95A:
0001D20C 9283                       		sub.l	d3,d1
0001D20E 6500                       		bcs.s	loc_1C962
0001D210 5242                       		addq.w	#1,d2
0001D212 60F8                       		bra.s	loc_1C95A
0001D214                            ; ===========================================================================
0001D214                            
0001D214                            loc_1C962:
0001D214 D283                       		add.l	d3,d1
0001D216 ED4A                       		lsl.w	#6,d2
0001D218 47F1 2000                  		lea	(a1,d2.w),a3
0001D21C 2C9B                       		move.l	(a3)+,(a6)
0001D21E 2C9B                       		move.l	(a3)+,(a6)
0001D220 2C9B                       		move.l	(a3)+,(a6)
0001D222 2C9B                       		move.l	(a3)+,(a6)
0001D224 2C9B                       		move.l	(a3)+,(a6)
0001D226 2C9B                       		move.l	(a3)+,(a6)
0001D228 2C9B                       		move.l	(a3)+,(a6)
0001D22A 2C9B                       		move.l	(a3)+,(a6)
0001D22C 2C9B                       		move.l	(a3)+,(a6)
0001D22E 2C9B                       		move.l	(a3)+,(a6)
0001D230 2C9B                       		move.l	(a3)+,(a6)
0001D232 2C9B                       		move.l	(a3)+,(a6)
0001D234 2C9B                       		move.l	(a3)+,(a6)
0001D236 2C9B                       		move.l	(a3)+,(a6)
0001D238 2C9B                       		move.l	(a3)+,(a6)
0001D23A 2C9B                       		move.l	(a3)+,(a6)
0001D23C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D240                            
0001D240 4E75                       		rts	
0001D242                            ; End of function ContScrCounter
0001D242                            
0001D242                            ; ===========================================================================
0001D242                            ; ---------------------------------------------------------------------------
0001D242                            ; HUD counter sizes
0001D242                            ; ---------------------------------------------------------------------------
0001D242 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D246 0000 2710                  Hud_10000:	dc.l 10000
0001D24A 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D24E 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D252 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D256 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D25A                            
0001D25A                            ; ---------------------------------------------------------------------------
0001D25A                            ; Subroutine to	load time numbers patterns
0001D25A                            ; ---------------------------------------------------------------------------
0001D25A                            
0001D25A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D25A                            
0001D25A                            
0001D25A                            Hud_Mins:				; XREF: Hud_ChkTime
0001D25A 45F9 0001 D256             		lea	(Hud_1).l,a2
0001D260 7C00                       		moveq	#0,d6
0001D262 6000                       		bra.s	loc_1C9BA
0001D264                            ; End of function Hud_Mins
0001D264                            
0001D264                            
0001D264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D264                            
0001D264                            
0001D264                            Hud_Secs:				; XREF: Hud_ChkTime
0001D264 45F9 0001 D252             		lea	(Hud_10).l,a2
0001D26A 7C01                       		moveq	#1,d6
0001D26C                            
0001D26C                            loc_1C9BA:
0001D26C 7800                       		moveq	#0,d4
0001D26E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D272                            
0001D272                            Hud_TimeLoop:
0001D272 7400                       		moveq	#0,d2
0001D274 261A                       		move.l	(a2)+,d3
0001D276                            
0001D276                            loc_1C9C4:
0001D276 9283                       		sub.l	d3,d1
0001D278 6500                       		bcs.s	loc_1C9CC
0001D27A 5242                       		addq.w	#1,d2
0001D27C 60F8                       		bra.s	loc_1C9C4
0001D27E                            ; ===========================================================================
0001D27E                            
0001D27E                            loc_1C9CC:
0001D27E D283                       		add.l	d3,d1
0001D280 4A42                       		tst.w	d2
0001D282 6700                       		beq.s	loc_1C9D6
0001D284 383C 0001                  		move.w	#1,d4
0001D288                            
0001D288                            loc_1C9D6:
0001D288 ED4A                       		lsl.w	#6,d2
0001D28A 2D40 0004                  		move.l	d0,4(a6)
0001D28E 47F1 2000                  		lea	(a1,d2.w),a3
0001D292 2C9B                       		move.l	(a3)+,(a6)
0001D294 2C9B                       		move.l	(a3)+,(a6)
0001D296 2C9B                       		move.l	(a3)+,(a6)
0001D298 2C9B                       		move.l	(a3)+,(a6)
0001D29A 2C9B                       		move.l	(a3)+,(a6)
0001D29C 2C9B                       		move.l	(a3)+,(a6)
0001D29E 2C9B                       		move.l	(a3)+,(a6)
0001D2A0 2C9B                       		move.l	(a3)+,(a6)
0001D2A2 2C9B                       		move.l	(a3)+,(a6)
0001D2A4 2C9B                       		move.l	(a3)+,(a6)
0001D2A6 2C9B                       		move.l	(a3)+,(a6)
0001D2A8 2C9B                       		move.l	(a3)+,(a6)
0001D2AA 2C9B                       		move.l	(a3)+,(a6)
0001D2AC 2C9B                       		move.l	(a3)+,(a6)
0001D2AE 2C9B                       		move.l	(a3)+,(a6)
0001D2B0 2C9B                       		move.l	(a3)+,(a6)
0001D2B2 0680 0040 0000             		addi.l	#$400000,d0
0001D2B8 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D2BC                            
0001D2BC 4E75                       		rts	
0001D2BE                            ; End of function Hud_Secs
0001D2BE                            
0001D2BE                            ; ---------------------------------------------------------------------------
0001D2BE                            ; Subroutine to	load time/ring bonus numbers patterns
0001D2BE                            ; ---------------------------------------------------------------------------
0001D2BE                            
0001D2BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2BE                            
0001D2BE                            
0001D2BE                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D2BE 45F9 0001 D24A             		lea	(Hud_1000).l,a2
0001D2C4 7C03                       		moveq	#3,d6
0001D2C6 7800                       		moveq	#0,d4
0001D2C8 43FA 0000                  		lea	Art_Hud(pc),a1
0001D2CC                            
0001D2CC                            Hud_BonusLoop:
0001D2CC 7400                       		moveq	#0,d2
0001D2CE 261A                       		move.l	(a2)+,d3
0001D2D0                            
0001D2D0                            loc_1CA1E:
0001D2D0 9283                       		sub.l	d3,d1
0001D2D2 6500                       		bcs.s	loc_1CA26
0001D2D4 5242                       		addq.w	#1,d2
0001D2D6 60F8                       		bra.s	loc_1CA1E
0001D2D8                            ; ===========================================================================
0001D2D8                            
0001D2D8                            loc_1CA26:
0001D2D8 D283                       		add.l	d3,d1
0001D2DA 4A42                       		tst.w	d2
0001D2DC 6700                       		beq.s	loc_1CA30
0001D2DE 383C 0001                  		move.w	#1,d4
0001D2E2                            
0001D2E2                            loc_1CA30:
0001D2E2 4A44                       		tst.w	d4
0001D2E4 6700                       		beq.s	Hud_ClrBonus
0001D2E6 ED4A                       		lsl.w	#6,d2
0001D2E8 47F1 2000                  		lea	(a1,d2.w),a3
0001D2EC 2C9B                       		move.l	(a3)+,(a6)
0001D2EE 2C9B                       		move.l	(a3)+,(a6)
0001D2F0 2C9B                       		move.l	(a3)+,(a6)
0001D2F2 2C9B                       		move.l	(a3)+,(a6)
0001D2F4 2C9B                       		move.l	(a3)+,(a6)
0001D2F6 2C9B                       		move.l	(a3)+,(a6)
0001D2F8 2C9B                       		move.l	(a3)+,(a6)
0001D2FA 2C9B                       		move.l	(a3)+,(a6)
0001D2FC 2C9B                       		move.l	(a3)+,(a6)
0001D2FE 2C9B                       		move.l	(a3)+,(a6)
0001D300 2C9B                       		move.l	(a3)+,(a6)
0001D302 2C9B                       		move.l	(a3)+,(a6)
0001D304 2C9B                       		move.l	(a3)+,(a6)
0001D306 2C9B                       		move.l	(a3)+,(a6)
0001D308 2C9B                       		move.l	(a3)+,(a6)
0001D30A 2C9B                       		move.l	(a3)+,(a6)
0001D30C                            
0001D30C                            loc_1CA5A:
0001D30C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D310                            
0001D310 4E75                       		rts	
0001D312                            ; ===========================================================================
0001D312                            
0001D312                            Hud_ClrBonus:
0001D312 7A0F                       		moveq	#$F,d5
0001D314                            
0001D314                            Hud_ClrBonusLoop:
0001D314 2CBC 0000 0000             		move.l	#0,(a6)
0001D31A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D31E                            
0001D31E 60EC                       		bra.s	loc_1CA5A
0001D320                            ; End of function Hud_TimeRingBonus
0001D320                            
0001D320                            ; ---------------------------------------------------------------------------
0001D320                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D320                            ; ---------------------------------------------------------------------------
0001D320                            
0001D320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D320                            
0001D320                            
0001D320                            Hud_Lives:				; XREF: Hud_ChkLives
0001D320 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D326 7200                       		moveq	#0,d1
0001D328 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D32C 45F9 0001 D252             		lea	(Hud_10).l,a2
0001D332 7C01                       		moveq	#1,d6
0001D334 7800                       		moveq	#0,d4
0001D336 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D33A                            
0001D33A                            Hud_LivesLoop:
0001D33A 2D40 0004                  		move.l	d0,4(a6)
0001D33E 7400                       		moveq	#0,d2
0001D340 261A                       		move.l	(a2)+,d3
0001D342                            
0001D342                            loc_1CA90:
0001D342 9283                       		sub.l	d3,d1
0001D344 6500                       		bcs.s	loc_1CA98
0001D346 5242                       		addq.w	#1,d2
0001D348 60F8                       		bra.s	loc_1CA90
0001D34A                            ; ===========================================================================
0001D34A                            
0001D34A                            loc_1CA98:
0001D34A D283                       		add.l	d3,d1
0001D34C 4A42                       		tst.w	d2
0001D34E 6700                       		beq.s	loc_1CAA2
0001D350 383C 0001                  		move.w	#1,d4
0001D354                            
0001D354                            loc_1CAA2:
0001D354 4A44                       		tst.w	d4
0001D356 6700                       		beq.s	Hud_ClrLives
0001D358                            
0001D358                            loc_1CAA6:
0001D358 EB4A                       		lsl.w	#5,d2
0001D35A 47F1 2000                  		lea	(a1,d2.w),a3
0001D35E 2C9B                       		move.l	(a3)+,(a6)
0001D360 2C9B                       		move.l	(a3)+,(a6)
0001D362 2C9B                       		move.l	(a3)+,(a6)
0001D364 2C9B                       		move.l	(a3)+,(a6)
0001D366 2C9B                       		move.l	(a3)+,(a6)
0001D368 2C9B                       		move.l	(a3)+,(a6)
0001D36A 2C9B                       		move.l	(a3)+,(a6)
0001D36C 2C9B                       		move.l	(a3)+,(a6)
0001D36E                            
0001D36E                            loc_1CABC:
0001D36E 0680 0040 0000             		addi.l	#$400000,d0
0001D374 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D378                            
0001D378 4E75                       		rts	
0001D37A                            ; ===========================================================================
0001D37A                            
0001D37A                            Hud_ClrLives:
0001D37A 4A46                       		tst.w	d6
0001D37C 67DA                       		beq.s	loc_1CAA6
0001D37E 7A07                       		moveq	#7,d5
0001D380                            
0001D380                            Hud_ClrLivesLoop:
0001D380 2CBC 0000 0000             		move.l	#0,(a6)
0001D386 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D38A 60E2                       		bra.s	loc_1CABC
0001D38C                            ; End of function Hud_Lives
0001D38C                            
0001D38C                            ; ===========================================================================
0001D38C                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D68C                            		even
0001D68C                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D7CC                            		even
0001D7CC                            ; ===========================================================================
0001D7CC                            ; ---------------------------------------------------------------------------
0001D7CC                            ; When debug mode is currently in use
0001D7CC                            ; ---------------------------------------------------------------------------
0001D7CC                            
0001D7CC                            DebugMode:				; XREF: Obj01; Obj09
0001D7CC 7000                       		moveq	#0,d0
0001D7CE 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D7D2 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D7D6 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D7DA                            ; ===========================================================================
0001D7DA 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D7DC 0000                       		dc.w Debug_Skip-Debug_Index
0001D7DE                            ; ===========================================================================
0001D7DE                            
0001D7DE                            Debug_Main:				; XREF: Debug_Index
0001D7DE 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D7E2 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D7E8 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D7EE 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D7F4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D7FA 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D800 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D806 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D80C 117C 0000 001A             		move.b	#0,$1A(a0)
0001D812 117C 0000 001C             		move.b	#0,$1C(a0)
0001D818 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D81E 6600                       		bne.s	Debug_Zone	; if not, branch
0001D820 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D826 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D82C 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D82E 6000                       		bra.s	Debug_UseList
0001D830                            ; ===========================================================================
0001D830                            
0001D830                            Debug_Zone:
0001D830 7000                       		moveq	#0,d0
0001D832 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D836                            
0001D836                            Debug_UseList:
0001D836 45F9 0000 0000             		lea	(DebugList).l,a2
0001D83C D040                       		add.w	d0,d0
0001D83E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D842 3C1A                       		move.w	(a2)+,d6
0001D844 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D848 6200                       		bhi.s	loc_1CF9E
0001D84A 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D850                            
0001D850                            loc_1CF9E:
0001D850 6100 0000                  		bsr.w	Debug_ShowItem
0001D854 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D85A 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D860                            
0001D860                            Debug_Skip:				; XREF: Debug_Index
0001D860 7006                       		moveq	#6,d0
0001D862 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D868 6700                       		beq.s	loc_1CFBE
0001D86A 7000                       		moveq	#0,d0
0001D86C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D870                            
0001D870                            loc_1CFBE:
0001D870 45F9 0000 0000             		lea	(DebugList).l,a2
0001D876 D040                       		add.w	d0,d0
0001D878 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D87C 3C1A                       		move.w	(a2)+,d6
0001D87E 6100 0000                  		bsr.w	Debug_Control
0001D882 4EF9 0000 DE02             		jmp	DisplaySprite
0001D888                            
0001D888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D888                            
0001D888                            
0001D888                            Debug_Control:
0001D888 7800                       		moveq	#0,d4
0001D88A 323C 0001                  		move.w	#1,d1
0001D88E 1838 F605                  		move.b	($FFFFF605).w,d4
0001D892 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D896 6600                       		bne.s	loc_1D018	; if yes, branch
0001D898 1038 F604                  		move.b	($FFFFF604).w,d0
0001D89C 0240 000F                  		andi.w	#$F,d0
0001D8A0 6600                       		bne.s	loc_1D000
0001D8A2 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D8A8 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D8AE 6000 0000                  		bra.w	Debug_BackItem
0001D8B2                            ; ===========================================================================
0001D8B2                            
0001D8B2                            loc_1D000:
0001D8B2 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D8B6 6600                       		bne.s	loc_1D01C
0001D8B8 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D8BE 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D8C2 6600                       		bne.s	loc_1D018
0001D8C4 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D8CA                            
0001D8CA                            loc_1D018:
0001D8CA 1838 F604                  		move.b	($FFFFF604).w,d4
0001D8CE                            
0001D8CE                            loc_1D01C:
0001D8CE 7200                       		moveq	#0,d1
0001D8D0 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D8D4 5241                       		addq.w	#1,d1
0001D8D6 4841                       		swap	d1
0001D8D8 E881                       		asr.l	#4,d1
0001D8DA 2428 000C                  		move.l	$C(a0),d2
0001D8DE 2628 0008                  		move.l	8(a0),d3
0001D8E2 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D8E6 6700                       		beq.s	loc_1D03C	; if not, branch
0001D8E8 9481                       		sub.l	d1,d2
0001D8EA 6400                       		bcc.s	loc_1D03C
0001D8EC 7400                       		moveq	#0,d2
0001D8EE                            
0001D8EE                            loc_1D03C:
0001D8EE 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D8F2 6700                       		beq.s	loc_1D052	; if not, branch
0001D8F4 D481                       		add.l	d1,d2
0001D8F6 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D8FC 6500                       		bcs.s	loc_1D052
0001D8FE 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D904                            
0001D904                            loc_1D052:
0001D904 0804 0002                  		btst	#2,d4
0001D908 6700                       		beq.s	loc_1D05E
0001D90A 9681                       		sub.l	d1,d3
0001D90C 6400                       		bcc.s	loc_1D05E
0001D90E 7600                       		moveq	#0,d3
0001D910                            
0001D910                            loc_1D05E:
0001D910 0804 0003                  		btst	#3,d4
0001D914 6700                       		beq.s	loc_1D066
0001D916 D681                       		add.l	d1,d3
0001D918                            
0001D918                            loc_1D066:
0001D918 2142 000C                  		move.l	d2,$C(a0)
0001D91C 2143 0008                  		move.l	d3,8(a0)
0001D920                            
0001D920                            Debug_BackItem:
0001D920 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D926 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D928 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D92E 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D930 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D934 6400                       		bcc.s	Debug_NoLoop
0001D936 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D93A 6000                       		bra.s	Debug_NoLoop
0001D93C                            ; ===========================================================================
0001D93C                            
0001D93C                            Debug_NextItem:
0001D93C 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D942 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D944 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D948 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D94C 6200                       		bhi.s	Debug_NoLoop
0001D94E 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D954                            
0001D954                            Debug_NoLoop:
0001D954 6000 0000                  		bra.w	Debug_ShowItem
0001D958                            ; ===========================================================================
0001D958                            
0001D958                            Debug_MakeItem:
0001D958 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D95E 6700                       		beq.s	Debug_Exit	; if not, branch
0001D960 4EB9 0000 E288             		jsr	SingleObjLoad
0001D966 6600                       		bne.s	Debug_Exit
0001D968 3368 0008 0008             		move.w	8(a0),8(a1)
0001D96E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D974 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D978 1368 0001 0001             		move.b	1(a0),1(a1)
0001D97E 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D984 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D98A 7000                       		moveq	#0,d0
0001D98C 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D990 E748                       		lsl.w	#3,d0
0001D992 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D998 4E75                       		rts	
0001D99A                            ; ===========================================================================
0001D99A                            
0001D99A                            Debug_Exit:
0001D99A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D9A0 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D9A2 7000                       		moveq	#0,d0
0001D9A4 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D9A8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D9B0 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D9B6 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D9BA 3140 000A                  		move.w	d0,$A(a0)
0001D9BE 3140 000E                  		move.w	d0,$E(a0)
0001D9C2 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D9C8 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D9CE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D9D4 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D9D6 4278 F780                  		clr.w	($FFFFF780).w
0001D9DA 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D9E0 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D9E8 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D9EE 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D9F4 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D9FA 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DA00                            
0001DA00                            Debug_DoNothing:
0001DA00 4E75                       		rts	
0001DA02                            ; End of function Debug_Control
0001DA02                            
0001DA02                            
0001DA02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA02                            
0001DA02                            
0001DA02                            Debug_ShowItem:				; XREF: Debug_Main
0001DA02 7000                       		moveq	#0,d0
0001DA04 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DA08 E748                       		lsl.w	#3,d0
0001DA0A 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DA10 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DA16 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DA1C 4E75                       		rts	
0001DA1E                            ; End of function Debug_ShowItem
0001DA1E                            
0001DA1E                            ; ===========================================================================
0001DA1E                            ; ---------------------------------------------------------------------------
0001DA1E                            ; Debug	list pointers
0001DA1E                            ; ---------------------------------------------------------------------------
0001DA1E                            DebugList:
0001DA1E                            	include "_inc\Debug list pointers.asm"
0001DA1E                            ; ---------------------------------------------------------------------------
0001DA1E                            ; Debug	list pointers
0001DA1E                            ; ---------------------------------------------------------------------------
0001DA1E 0000                       	dc.w Debug_GHZ-DebugList
0001DA20 0000                       	dc.w Debug_LZ-DebugList
0001DA22 0000                       	dc.w Debug_MZ-DebugList
0001DA24 0000                       	dc.w Debug_SLZ-DebugList
0001DA26 0000                       	dc.w Debug_SYZ-DebugList
0001DA28 0000                       	dc.w Debug_SBZ-DebugList
0001DA2A 0000                       	dc.w Debug_Ending-DebugList
0001DA2A 0000                       	dc.w Debug_Ending-DebugList
0001DA2C                            
0001DA2C                            ; ---------------------------------------------------------------------------
0001DA2C                            ; Debug	list - Green Hill
0001DA2C                            ; ---------------------------------------------------------------------------
0001DA2C                            Debug_GHZ:
0001DA2C                            	include "_inc\Debug list - GHZ.asm"
0001DA2C                            ; ---------------------------------------------------------------------------
0001DA2C                            ; Debug	list - Green Hill
0001DA2C                            ; ---------------------------------------------------------------------------
0001DA2C 0010                       	dc.w $10			; number of items in list
0001DA2E 2500 A660                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DA32 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DA36 2600 AC66                  	dc.l Map_obj26+$26000000
0001DA3A 0000 0680                  	dc.b 0,	0, 6, $80
0001DA3E 1F00 9E58                  	dc.l Map_obj1F+$1F000000
0001DA42 0000 0400                  	dc.b 0,	0, 4, 0
0001DA46 2200 A114                  	dc.l Map_obj22+$22000000
0001DA4A 0000 0444                  	dc.b 0,	0, 4, $44
0001DA4E 2B00 B2DA                  	dc.l Map_obj2B+$2B000000
0001DA52 0000 047B                  	dc.b 0,	0, 4, $7B
0001DA56 3600 D7EA                  	dc.l Map_obj36+$36000000
0001DA5A 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA5E 1800 876A                  	dc.l Map_obj18+$18000000
0001DA62 0000 4000                  	dc.b 0,	0, $40,	0
0001DA66 3B00 D910                  	dc.l Map_obj3B+$3B000000
0001DA6A 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DA6E 4000 FF9C                  	dc.l Map_obj40+$40000000
0001DA72 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DA76 4100 E516                  	dc.l Map_obj41+$41000000
0001DA7A 0000 0523                  	dc.b 0,	0, 5, $23
0001DA7E 4200 E73C                  	dc.l Map_obj42+$42000000
0001DA82 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DA86 4400 EA4A                  	dc.l Map_obj44+$44000000
0001DA8A 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DA8E 1900 886A                  	dc.l Map_obj48+$19000000
0001DA92 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DA96 7901 79EA                  	dc.l Map_obj79+$79000000
0001DA9A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA9E 4B00 A6A0                  	dc.l Map_obj4B+$4B000000
0001DAA2 0000 2400                  	dc.b 0,	0, $24,	0
0001DAA6 7D01 7B3A                  	dc.l Map_obj7D+$7D000000
0001DAAA 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DAAE                            	even
0001DAAE                            	even
0001DAAE                            
0001DAAE                            ; ---------------------------------------------------------------------------
0001DAAE                            ; Debug	list - Labyrinth
0001DAAE                            ; ---------------------------------------------------------------------------
0001DAAE                            Debug_LZ:
0001DAAE                            	include "_inc\Debug list - LZ.asm"
0001DAAE                            ; ---------------------------------------------------------------------------
0001DAAE                            ; Debug	list - Labyrinth
0001DAAE                            ; ---------------------------------------------------------------------------
0001DAAE 0019                       	dc.w $19
0001DAB0 2500 A660                  	dc.l Map_obj25+$25000000
0001DAB4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DAB8 2600 AC66                  	dc.l Map_obj26+$26000000
0001DABC 0000 0680                  	dc.b 0,	0, 6, $80
0001DAC0 4100 E516                  	dc.l Map_obj41+$41000000
0001DAC4 0000 0523                  	dc.b 0,	0, 5, $23
0001DAC8 2C00 B38A                  	dc.l Map_obj2C+$2C000000
0001DACC 0800 2486                  	dc.b 8,	0, $24,	$86
0001DAD0 2D00 B57E                  	dc.l Map_obj2D+$2D000000
0001DAD4 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DAD8 1601 2770                  	dc.l Map_obj16+$16000000
0001DADC 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DAE0 1601 2770                  	dc.l Map_obj16+$16000000
0001DAE4 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DAE8 3300 CA36                  	dc.l Map_obj33+$33000000
0001DAEC 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DAF0 3200 C5F6                  	dc.l Map_obj32+$32000000
0001DAF4 0000 0513                  	dc.b 0,	0, 5, $13
0001DAF8 3600 D7EA                  	dc.l Map_obj36+$36000000
0001DAFC 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB00 5201 0892                  	dc.l Map_obj52a+$52000000
0001DB04 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DB08 6101 2998                  	dc.l Map_obj61+$61000000
0001DB0C 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DB10 6101 2998                  	dc.l Map_obj61+$61000000
0001DB14 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DB18 6101 2998                  	dc.l Map_obj61+$61000000
0001DB1C 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DB20 6201 2AEC                  	dc.l Map_obj62+$62000000
0001DB24 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DB28 6101 2998                  	dc.l Map_obj61+$61000000
0001DB2C 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DB30 6101 2998                  	dc.l Map_obj61+$61000000
0001DB34 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DB38 6301 2E4E                  	dc.l Map_obj63+$63000000
0001DB3C 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DB40 6001 26BA                  	dc.l Map_obj60+$60000000
0001DB44 0000 0467                  	dc.b 0,	0, 4, $67
0001DB48 6401 3194                  	dc.l Map_obj64+$64000000
0001DB4C 8413 8348                  	dc.b $84, $13, $83, $48
0001DB50 6501 331C                  	dc.l Map_obj65+$65000000
0001DB54 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DB58 6501 331C                  	dc.l Map_obj65+$65000000
0001DB5C 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DB60 0B01 1B0A                  	dc.l Map_obj0B+$B000000
0001DB64 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DB68 0C01 1BDA                  	dc.l Map_obj0C+$C000000
0001DB6C 0200 4328                  	dc.b 2,	0, $43,	$28
0001DB70 7901 79EA                  	dc.l Map_obj79+$79000000
0001DB74 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB78                            	even
0001DB78                            	even
0001DB78                            
0001DB78                            ; ---------------------------------------------------------------------------
0001DB78                            ; Debug	list - Marble
0001DB78                            ; ---------------------------------------------------------------------------
0001DB78                            Debug_MZ:
0001DB78                            	include "_inc\Debug list - MZ.asm"
0001DB78                            ; ---------------------------------------------------------------------------
0001DB78                            ; Debug	list - Marble
0001DB78                            ; ---------------------------------------------------------------------------
0001DB78 0012                       	dc.w $12
0001DB7A 2500 A660                  	dc.l Map_obj25+$25000000
0001DB7E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB82 2600 AC66                  	dc.l Map_obj26+$26000000
0001DB86 0000 0680                  	dc.b 0,	0, 6, $80
0001DB8A 2200 A114                  	dc.l Map_obj22+$22000000
0001DB8E 0000 0444                  	dc.b 0,	0, 4, $44
0001DB92 3600 D7EA                  	dc.l Map_obj36+$36000000
0001DB96 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB9A 4100 E516                  	dc.l Map_obj41+$41000000
0001DB9E 0000 0523                  	dc.b 0,	0, 5, $23
0001DBA2 1300 BAC0                  	dc.l Map_obj14+$13000000
0001DBA6 0000 0345                  	dc.b 0,	0, 3, $45
0001DBAA 4600 F0FC                  	dc.l Map_obj46+$46000000
0001DBAE 0000 4000                  	dc.b 0,	0, $40,	0
0001DBB2 4C00 FA48                  	dc.l Map_obj4C+$4C000000
0001DBB6 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DBBA 4E00 FD2C                  	dc.l Map_obj4E+$4E000000
0001DBBE 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DBC2 3300 CA36                  	dc.l Map_obj33+$33000000
0001DBC6 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DBCA 5001 012A                  	dc.l Map_obj50+$50000000
0001DBCE 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DBD2 5101 05C6                  	dc.l Map_obj51+$51000000
0001DBD6 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DBDA 5201 083C                  	dc.l Map_obj52+$52000000
0001DBDE 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DBE2 5300 8E02                  	dc.l Map_obj53+$53000000
0001DBE6 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DBEA 5400 FA0E                  	dc.l Map_obj54+$54000000
0001DBEE 0000 8680                  	dc.b 0,	0, $86,	$80
0001DBF2 5501 0A30                  	dc.l Map_obj55+$55000000
0001DBF6 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DBFA 7801 7664                  	dc.l Map_obj78+$78000000
0001DBFE 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DC02 7901 79EA                  	dc.l Map_obj79+$79000000
0001DC06 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC0A                            	even
0001DC0A                            	even
0001DC0A                            
0001DC0A                            ; ---------------------------------------------------------------------------
0001DC0A                            ; Debug	list - Star Light
0001DC0A                            ; ---------------------------------------------------------------------------
0001DC0A                            Debug_SLZ:
0001DC0A                            	include "_inc\Debug list - SLZ.asm"
0001DC0A                            ; ---------------------------------------------------------------------------
0001DC0A                            ; Debug	list - Star Light
0001DC0A                            ; ---------------------------------------------------------------------------
0001DC0A 000F                       	dc.w $F
0001DC0C 2500 A660                  	dc.l Map_obj25+$25000000
0001DC10 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC14 2600 AC66                  	dc.l Map_obj26+$26000000
0001DC18 0000 0680                  	dc.b 0,	0, 6, $80
0001DC1C 5901 1532                  	dc.l Map_obj59+$59000000
0001DC20 0000 4000                  	dc.b 0,	0, $40,	0
0001DC24 5300 8E02                  	dc.l Map_obj53+$53000000
0001DC28 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DC2C 1800 87C8                  	dc.l Map_obj18b+$18000000
0001DC30 0000 4000                  	dc.b 0,	0, $40,	0
0001DC34 5A01 166C                  	dc.l Map_obj5A+$5A000000
0001DC38 0000 4000                  	dc.b 0,	0, $40,	0
0001DC3C 5B01 1824                  	dc.l Map_obj5B+$5B000000
0001DC40 0000 4000                  	dc.b 0,	0, $40,	0
0001DC44 5D01 1DF4                  	dc.l Map_obj5D+$5D000000
0001DC48 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DC4C 5E01 2186                  	dc.l Map_obj5E+$5E000000
0001DC50 0000 0374                  	dc.b 0,	0, 3, $74
0001DC54 4100 E516                  	dc.l Map_obj41+$41000000
0001DC58 0000 0523                  	dc.b 0,	0, 5, $23
0001DC5C 1300 BAC0                  	dc.l Map_obj14+$13000000
0001DC60 0000 0480                  	dc.b 0,	0, 4, $80
0001DC64 1C00 8F12                  	dc.l Map_obj1C+$1C000000
0001DC68 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DC6C 5F01 2404                  	dc.l Map_obj5F+$5F000000
0001DC70 0000 0400                  	dc.b 0,	0, 4, 0
0001DC74 6001 26BA                  	dc.l Map_obj60+$60000000
0001DC78 0000 2429                  	dc.b 0,	0, $24,	$29
0001DC7C 7901 79EA                  	dc.l Map_obj79+$79000000
0001DC80 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC84                            	even
0001DC84                            	even
0001DC84                            
0001DC84                            ; ---------------------------------------------------------------------------
0001DC84                            ; Debug	list - Spring Yard
0001DC84                            ; ---------------------------------------------------------------------------
0001DC84                            Debug_SYZ:
0001DC84                            	include "_inc\Debug list - SYZ.asm"
0001DC84                            ; ---------------------------------------------------------------------------
0001DC84                            ; Debug	list - Spring Yard
0001DC84                            ; ---------------------------------------------------------------------------
0001DC84 000F                       	dc.w $F
0001DC86 2500 A660                  	dc.l Map_obj25+$25000000
0001DC8A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC8E 2600 AC66                  	dc.l Map_obj26+$26000000
0001DC92 0000 0680                  	dc.b 0,	0, 6, $80
0001DC96 3600 D7EA                  	dc.l Map_obj36+$36000000
0001DC9A 0000 051B                  	dc.b 0,	0, 5, $1B
0001DC9E 4100 E516                  	dc.l Map_obj41+$41000000
0001DCA2 0000 0523                  	dc.b 0,	0, 5, $23
0001DCA6 4300 E99C                  	dc.l Map_obj43+$43000000
0001DCAA 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DCAE 1200 F17A                  	dc.l Map_obj12+$12000000
0001DCB2 0000 0000                  	dc.b 0,	0, 0, 0
0001DCB6 4700 F2F6                  	dc.l Map_obj47+$47000000
0001DCBA 0000 0380                  	dc.b 0,	0, 3, $80
0001DCBE 1F00 9E58                  	dc.l Map_obj1F+$1F000000
0001DCC2 0000 0400                  	dc.b 0,	0, 4, 0
0001DCC6 2200 A114                  	dc.l Map_obj22+$22000000
0001DCCA 0000 0444                  	dc.b 0,	0, 4, $44
0001DCCE 5001 012A                  	dc.l Map_obj50+$50000000
0001DCD2 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DCD6 1800 87B6                  	dc.l Map_obj18a+$18000000
0001DCDA 0000 4000                  	dc.b 0,	0, $40,	0
0001DCDE 5601 0EF2                  	dc.l Map_obj56+$56000000
0001DCE2 0000 4000                  	dc.b 0,	0, $40,	0
0001DCE6 3200 C5F6                  	dc.l Map_obj32+$32000000
0001DCEA 0000 0513                  	dc.b 0,	0, 5, $13
0001DCEE 7801 7664                  	dc.l Map_obj78+$78000000
0001DCF2 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DCF6 7901 79EA                  	dc.l Map_obj79+$79000000
0001DCFA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DCFE                            	even
0001DCFE                            	even
0001DCFE                            
0001DCFE                            ; ---------------------------------------------------------------------------
0001DCFE                            ; Debug	list - Scrap Brain
0001DCFE                            ; ---------------------------------------------------------------------------
0001DCFE                            Debug_SBZ:
0001DCFE                            	include "_inc\Debug list - SBZ.asm"
0001DCFE                            ; ---------------------------------------------------------------------------
0001DCFE                            ; Debug	list - Scrap Brain
0001DCFE                            ; ---------------------------------------------------------------------------
0001DCFE 001D                       	dc.w $1D
0001DD00 2500 A660                  	dc.l Map_obj25+$25000000
0001DD04 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD08 2600 AC66                  	dc.l Map_obj26+$26000000
0001DD0C 0000 0680                  	dc.b 0,	0, 6, $80
0001DD10 5F01 2404                  	dc.l Map_obj5F+$5F000000
0001DD14 0000 0400                  	dc.b 0,	0, 4, 0
0001DD18 6001 26BA                  	dc.l Map_obj60+$60000000
0001DD1C 0000 0429                  	dc.b 0,	0, 4, $29
0001DD20 7801 7664                  	dc.l Map_obj78+$78000000
0001DD24 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DD28 1501 128E                  	dc.l Map_obj15b+$15000000
0001DD2C 0702 4391                  	dc.b 7,	2, $43,	$91
0001DD30 6701 5F78                  	dc.l Map_obj67+$67000000
0001DD34 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DD38 5201 083C                  	dc.l Map_obj52+$52000000
0001DD3C 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DD40 3200 C5F6                  	dc.l Map_obj32+$32000000
0001DD44 0000 0513                  	dc.b 0,	0, 5, $13
0001DD48 6901 61D2                  	dc.l Map_obj69+$69000000
0001DD4C 0300 4492                  	dc.b 3,	0, $44,	$92
0001DD50 6901 622C                  	dc.l Map_obj69a+$69000000
0001DD54 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DD58 6A01 648A                  	dc.l Map_obj6A+$6A000000
0001DD5C 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DD60 5300 8E02                  	dc.l Map_obj53+$53000000
0001DD64 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DD68 5201 083C                  	dc.l Map_obj52+$52000000
0001DD6C 3903 4460                  	dc.b $39, 3, $44, $60
0001DD70 6B01 685A                  	dc.l Map_obj6B+$6B000000
0001DD74 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DD78 2A00 90A8                  	dc.l Map_obj2A+$2A000000
0001DD7C 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DD80 6B01 685A                  	dc.l Map_obj6B+$6B000000
0001DD84 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DD88 6A01 648A                  	dc.l Map_obj6A+$6A000000
0001DD8C 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DD90 6B01 685A                  	dc.l Map_obj6B+$6B000000
0001DD94 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DD98 6A01 648A                  	dc.l Map_obj6A+$6A000000
0001DD9C 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DDA0 6B01 685A                  	dc.l Map_obj6B+$6B000000
0001DDA4 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DDA8 6C01 6A1C                  	dc.l Map_obj6C+$6C000000
0001DDAC 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DDB0 6D00 EDEC                  	dc.l Map_obj6D+$6D000000
0001DDB4 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DDB8 6D00 EDEC                  	dc.l Map_obj6D+$6D000000
0001DDBC 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DDC0 6E01 6AD2                  	dc.l Map_obj6E+$6E000000
0001DDC4 0400 047E                  	dc.b 4,	0, 4, $7E
0001DDC8 7001 6F28                  	dc.l Map_obj70+$70000000
0001DDCC 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DDD0 7101 1C9A                  	dc.l Map_obj71+$71000000
0001DDD4 1100 8680                  	dc.b $11, 0, $86, $80
0001DDD8 1E00 9566                  	dc.l Map_obj1E+$1E000000
0001DDDC 0400 2302                  	dc.b 4,	0, $23,	2
0001DDE0 7901 79EA                  	dc.l Map_obj79+$79000000
0001DDE4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DDE8                            	even
0001DDE8                            	even
0001DDE8                            
0001DDE8                            ; ---------------------------------------------------------------------------
0001DDE8                            ; Debug	list - ending sequence / special stage
0001DDE8                            ; ---------------------------------------------------------------------------
0001DDE8                            Debug_Ending:
0001DDE8                            	include "_inc\Debug list - Ending and SS.asm"
0001DDE8                            ; ---------------------------------------------------------------------------
0001DDE8                            ; Debug	list - ending sequence / special stage
0001DDE8                            ; ---------------------------------------------------------------------------
0001DDE8 000D                       	dc.w $D
0001DDEA 2500 A660                  	dc.l Map_obj25+$25000000
0001DDEE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DDF2 4700 F2F6                  	dc.l Map_obj47+$47000000
0001DDF6 0000 0380                  	dc.b 0,	0, 3, $80
0001DDFA 2800 9B8A                  	dc.l Map_obj28a+$28000000
0001DDFE 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DE02 2800 9B8A                  	dc.l Map_obj28a+$28000000
0001DE06 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DE0A 2800 9B8A                  	dc.l Map_obj28a+$28000000
0001DE0E 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DE12 2800 9B72                  	dc.l Map_obj28+$28000000
0001DE16 0D00 0553                  	dc.b $D, 0, 5, $53
0001DE1A 2800 9B72                  	dc.l Map_obj28+$28000000
0001DE1E 0E00 0553                  	dc.b $E, 0, 5, $53
0001DE22 2800 9B72                  	dc.l Map_obj28+$28000000
0001DE26 0F00 0573                  	dc.b $F, 0, 5, $73
0001DE2A 2800 9B72                  	dc.l Map_obj28+$28000000
0001DE2E 1000 0573                  	dc.b $10, 0, 5,	$73
0001DE32 2800 9B8A                  	dc.l Map_obj28a+$28000000
0001DE36 1100 0585                  	dc.b $11, 0, 5,	$85
0001DE3A 2800 9BA2                  	dc.l Map_obj28b+$28000000
0001DE3E 1200 0593                  	dc.b $12, 0, 5,	$93
0001DE42 2800 9B8A                  	dc.l Map_obj28a+$28000000
0001DE46 1300 0565                  	dc.b $13, 0, 5,	$65
0001DE4A 2800 9BA2                  	dc.l Map_obj28b+$28000000
0001DE4E 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DE52                            	even
0001DE52                            	even
0001DE52                            
0001DE52                            ; ---------------------------------------------------------------------------
0001DE52                            ; Main level load blocks
0001DE52                            ; ---------------------------------------------------------------------------
0001DE52                            MainLoadBlocks:
0001DE52                            	include "_inc\Main level load blocks.asm"
0001DE52                            ; ---------------------------------------------------------------------------
0001DE52                            ; Main level load blocks
0001DE52                            ;
0001DE52                            ; ===FORMAT===
0001DE52                            ; level	patterns + (1st	PLC num	* 10^6)
0001DE52                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DE52                            ; 256x256 mappings
0001DE52                            ; blank, music (unused), pal index (unused), pal index
0001DE52                            ; ---------------------------------------------------------------------------
0001DE52 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DE56 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DE5A 0000 0000                  	dc.l Blk256_GHZ
0001DE5E 0081 0404                  	dc.b 0,	$81, 4,	4
0001DE62 0000 0000                  	dc.l Nem_LZ+$6000000
0001DE66 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DE6A 0000 0000                  	dc.l Blk256_LZ
0001DE6E 0082 0505                  	dc.b 0,	$82, 5,	5
0001DE72 0000 0000                  	dc.l Nem_MZ+$8000000
0001DE76 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DE7A 0000 0000                  	dc.l Blk256_MZ
0001DE7E 0083 0606                  	dc.b 0,	$83, 6,	6
0001DE82 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DE86 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DE8A 0000 0000                  	dc.l Blk256_SLZ
0001DE8E 0084 0707                  	dc.b 0,	$84, 7,	7
0001DE92 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DE96 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DE9A 0000 0000                  	dc.l Blk256_SYZ
0001DE9E 0085 0808                  	dc.b 0,	$85, 8,	8
0001DEA2 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DEA6 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DEAA 0000 0000                  	dc.l Blk256_SBZ
0001DEAE 0086 0909                  	dc.b 0,	$86, 9,	9
0001DEB2 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DEB6 0000 0000                  	dc.l Blk16_GHZ
0001DEBA 0000 0000                  	dc.l Blk256_GHZ
0001DEBE 0086 1313                  	dc.b 0,	$86, $13, $13
0001DEC2                            	even
0001DEC2                            	even
0001DEC2                            
0001DEC2                            ; ---------------------------------------------------------------------------
0001DEC2                            ; Pattern load cues
0001DEC2                            ; ---------------------------------------------------------------------------
0001DEC2                            ArtLoadCues:
0001DEC2                            	include "_inc\Pattern load cues.asm"
0001DEC2                            ; ---------------------------------------------------------------------------
0001DEC2                            ; Pattern load cues - index
0001DEC2                            ; ---------------------------------------------------------------------------
0001DEC2 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DEC6 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DECA 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DECE 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DED2 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DED6 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DEDA 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DEDE 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DEE2 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DEE6 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DEEA 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DEEE 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DEF2 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DEF6 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DEFA 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DEFE 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DF02 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001DF04                            ; ---------------------------------------------------------------------------
0001DF04                            ; Pattern load cues - standard block 1
0001DF04                            ; ---------------------------------------------------------------------------
0001DF04 0004                       PLC_Main:	dc.w 4
0001DF06 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DF0A F400                       		dc.w $F400
0001DF0C 0000 0000                  		dc.l Nem_Hud		; HUD
0001DF10 D940                       		dc.w $D940
0001DF12 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DF16 FA80                       		dc.w $FA80
0001DF18 0000 0000                  		dc.l Nem_Ring		; rings
0001DF1C F640                       		dc.w $F640
0001DF1E 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DF22 F2E0                       		dc.w $F2E0
0001DF24                            ; ---------------------------------------------------------------------------
0001DF24                            ; Pattern load cues - standard block 2
0001DF24                            ; ---------------------------------------------------------------------------
0001DF24 0002                       PLC_Main2:	dc.w 2
0001DF26 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DF2A D000                       		dc.w $D000
0001DF2C 0000 0000                  		dc.l Nem_Shield		; shield
0001DF30 A820                       		dc.w $A820
0001DF32 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DF36 AB80                       		dc.w $AB80
0001DF38                            ; ---------------------------------------------------------------------------
0001DF38                            ; Pattern load cues - explosion
0001DF38                            ; ---------------------------------------------------------------------------
0001DF38 0000                       PLC_Explode:	dc.w 0
0001DF3A 0000 0000                  		dc.l Nem_Explode	; explosion
0001DF3E B400                       		dc.w $B400
0001DF40                            ; ---------------------------------------------------------------------------
0001DF40                            ; Pattern load cues - game/time	over
0001DF40                            ; ---------------------------------------------------------------------------
0001DF40 0000                       PLC_GameOver:	dc.w 0
0001DF42 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DF46 ABC0                       		dc.w $ABC0
0001DF48                            ; ---------------------------------------------------------------------------
0001DF48                            ; Pattern load cues - Green Hill
0001DF48                            ; ---------------------------------------------------------------------------
0001DF48 000B                       PLC_GHZ:	dc.w $B
0001DF4A 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DF4E 0000                       		dc.w 0
0001DF50 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DF54 39A0                       		dc.w $39A0
0001DF56 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DF5A 6B00                       		dc.w $6B00
0001DF5C 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DF60 7A00                       		dc.w $7A00
0001DF62 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DF66 8000                       		dc.w $8000
0001DF68 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DF6C 8880                       		dc.w $8880
0001DF6E 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DF72 8F60                       		dc.w $8F60
0001DF74 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DF78 9360                       		dc.w $9360
0001DF7A 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DF7E 9E00                       		dc.w $9E00
0001DF80 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF84 A360                       		dc.w $A360
0001DF86 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF8A A460                       		dc.w $A460
0001DF8C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF90 A660                       		dc.w $A660
0001DF92 0005                       PLC_GHZ2:	dc.w 5
0001DF94 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DF98 7000                       		dc.w $7000
0001DF9A 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DF9E 71C0                       		dc.w $71C0
0001DFA0 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DFA4 7300                       		dc.w $7300
0001DFA6 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DFAA 7540                       		dc.w $7540
0001DFAC 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DFB0 A1E0                       		dc.w $A1E0
0001DFB2 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DFB6 6980                       		dc.w $6980
0001DFB8                            ; ---------------------------------------------------------------------------
0001DFB8                            ; Pattern load cues - Labyrinth
0001DFB8                            ; ---------------------------------------------------------------------------
0001DFB8 000B                       PLC_LZ:		dc.w $B
0001DFBA 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DFBE 0000                       		dc.w 0
0001DFC0 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DFC4 3C00                       		dc.w $3C00
0001DFC6 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DFCA 3E00                       		dc.w $3E00
0001DFCC 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DFD0 4B20                       		dc.w $4B20
0001DFD2 0000 0000                  		dc.l Nem_Water		; water	surface
0001DFD6 6000                       		dc.w $6000
0001DFD8 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DFDC 6200                       		dc.w $6200
0001DFDE 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DFE2 6500                       		dc.w $6500
0001DFE4 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DFE8 6900                       		dc.w $6900
0001DFEA 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DFEE 7780                       		dc.w $7780
0001DFF0 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DFF4 7880                       		dc.w $7880
0001DFF6 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DFFA 7980                       		dc.w $7980
0001DFFC 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E000 94C0                       		dc.w $94C0
0001E002 000C                       PLC_LZ2:	dc.w $C
0001E004 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E008 7BC0                       		dc.w $7BC0
0001E00A 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E00E 7CC0                       		dc.w $7CC0
0001E010 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E014 7EC0                       		dc.w $7EC0
0001E016 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E01A 5D20                       		dc.w $5D20
0001E01C 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E020 8800                       		dc.w $8800
0001E022 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E026 89E0                       		dc.w $89E0
0001E028 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E02C 8CE0                       		dc.w $8CE0
0001E02E 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E032 90C0                       		dc.w $90C0
0001E034 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E038 A1E0                       		dc.w $A1E0
0001E03A 0000 0000                  		dc.l Nem_Cork		; cork block
0001E03E A000                       		dc.w $A000
0001E040 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E044 A360                       		dc.w $A360
0001E046 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E04A A460                       		dc.w $A460
0001E04C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E050 A660                       		dc.w $A660
0001E052                            ; ---------------------------------------------------------------------------
0001E052                            ; Pattern load cues - Marble
0001E052                            ; ---------------------------------------------------------------------------
0001E052 0009                       PLC_MZ:		dc.w 9
0001E054 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E058 0000                       		dc.w 0
0001E05A 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E05E 6000                       		dc.w $6000
0001E060 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E064 68A0                       		dc.w $68A0
0001E066 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E06A 7000                       		dc.w $7000
0001E06C 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E070 71C0                       		dc.w $71C0
0001E072 0000 0000                  		dc.l Nem_Lava		; lava
0001E076 7500                       		dc.w $7500
0001E078 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E07C 8880                       		dc.w $8880
0001E07E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E082 8F60                       		dc.w $8F60
0001E084 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E088 9700                       		dc.w $9700
0001E08A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E08E 9FE0                       		dc.w $9FE0
0001E090 0004                       PLC_MZ2:	dc.w 4
0001E092 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E096 A260                       		dc.w $A260
0001E098 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E09C A360                       		dc.w $A360
0001E09E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E0A2 A460                       		dc.w $A460
0001E0A4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E0A8 A660                       		dc.w $A660
0001E0AA 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E0AE 5700                       		dc.w $5700
0001E0B0                            ; ---------------------------------------------------------------------------
0001E0B0                            ; Pattern load cues - Star Light
0001E0B0                            ; ---------------------------------------------------------------------------
0001E0B0 0008                       PLC_SLZ:	dc.w 8
0001E0B2 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E0B6 0000                       		dc.w 0
0001E0B8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E0BC 8000                       		dc.w $8000
0001E0BE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E0C2 8520                       		dc.w $8520
0001E0C4 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E0C8 9000                       		dc.w $9000
0001E0CA 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E0CE 9C00                       		dc.w $9C00
0001E0D0 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E0D4 A260                       		dc.w $A260
0001E0D6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E0DA A360                       		dc.w $A360
0001E0DC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E0E0 A460                       		dc.w $A460
0001E0E2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E0E6 A660                       		dc.w $A660
0001E0E8 0005                       PLC_SLZ2:	dc.w 5
0001E0EA 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E0EE 6E80                       		dc.w $6E80
0001E0F0 0000 0000                  		dc.l Nem_Fan		; fan
0001E0F4 7400                       		dc.w $7400
0001E0F6 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E0FA 7980                       		dc.w $7980
0001E0FC 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E100 7B80                       		dc.w $7B80
0001E102 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E106 9B00                       		dc.w $9B00
0001E108 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E10C 9E00                       		dc.w $9E00
0001E10E                            ; ---------------------------------------------------------------------------
0001E10E                            ; Pattern load cues - Spring Yard
0001E10E                            ; ---------------------------------------------------------------------------
0001E10E 0004                       PLC_SYZ:	dc.w 4
0001E110 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E114 0000                       		dc.w 0
0001E116 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E11A 8000                       		dc.w $8000
0001E11C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E120 8880                       		dc.w $8880
0001E122 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E126 8F60                       		dc.w $8F60
0001E128 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E12C 9700                       		dc.w $9700
0001E12E 0007                       PLC_SYZ2:	dc.w 7
0001E130 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E134 7000                       		dc.w $7000
0001E136 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E13A 72C0                       		dc.w $72C0
0001E13C 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E140 7740                       		dc.w $7740
0001E142 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E146 9FE0                       		dc.w $9FE0
0001E148 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E14C A1E0                       		dc.w $A1E0
0001E14E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E152 A360                       		dc.w $A360
0001E154 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E158 A460                       		dc.w $A460
0001E15A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E15E A660                       		dc.w $A660
0001E160                            ; ---------------------------------------------------------------------------
0001E160                            ; Pattern load cues - Scrap Brain
0001E160                            ; ---------------------------------------------------------------------------
0001E160 000B                       PLC_SBZ:	dc.w $B
0001E162 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E166 0000                       		dc.w 0
0001E168 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E16C 5800                       		dc.w $5800
0001E16E 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E172 5D00                       		dc.w $5D00
0001E174 0000 0000                  		dc.l Nem_Girder		; girder
0001E178 5E00                       		dc.w $5E00
0001E17A 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E17E 6040                       		dc.w $6040
0001E180 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E184 6880                       		dc.w $6880
0001E186 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E18A 6900                       		dc.w $6900
0001E18C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E190 7220                       		dc.w $7220
0001E192 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E196 76A0                       		dc.w $76A0
0001E198 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E19C 7B20                       		dc.w $7B20
0001E19E 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E1A2 7EA0                       		dc.w $7EA0
0001E1A4 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E1A8 9860                       		dc.w $9860
0001E1AA 000C                       PLC_SBZ2:	dc.w $C
0001E1AC 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E1B0 5600                       		dc.w $5600
0001E1B2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E1B6 8000                       		dc.w $8000
0001E1B8 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E1BC 8520                       		dc.w $8520
0001E1BE 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E1C2 8C00                       		dc.w $8C00
0001E1C4 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E1C8 8DE0                       		dc.w $8DE0
0001E1CA 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E1CE 8FC0                       		dc.w $8FC0
0001E1D0 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E1D4 9240                       		dc.w $9240
0001E1D6 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E1DA 7F20                       		dc.w $7F20
0001E1DC 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E1E0 9BE0                       		dc.w $9BE0
0001E1E2 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E1E6 A1E0                       		dc.w $A1E0
0001E1E8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E1EC A360                       		dc.w $A360
0001E1EE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E1F2 A460                       		dc.w $A460
0001E1F4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E1F8 A660                       		dc.w $A660
0001E1FA                            ; ---------------------------------------------------------------------------
0001E1FA                            ; Pattern load cues - title card
0001E1FA                            ; ---------------------------------------------------------------------------
0001E1FA 0000                       PLC_TitleCard:	dc.w 0
0001E1FC 0000 0000                  		dc.l Nem_TitleCard
0001E200 B000                       		dc.w $B000
0001E202                            ; ---------------------------------------------------------------------------
0001E202                            ; Pattern load cues - act 3 boss
0001E202                            ; ---------------------------------------------------------------------------
0001E202 0005                       PLC_Boss:	dc.w 5
0001E204 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E208 8000                       		dc.w $8000
0001E20A 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E20E 8D80                       		dc.w $8D80
0001E210 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E214 93A0                       		dc.w $93A0
0001E216 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E21A A300                       		dc.w $A300
0001E21C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E220 A300                       		dc.w $A300
0001E222 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E226 A540                       		dc.w $A540
0001E228                            ; ---------------------------------------------------------------------------
0001E228                            ; Pattern load cues - act 1/2 signpost
0001E228                            ; ---------------------------------------------------------------------------
0001E228 0002                       PLC_Signpost:	dc.w 2
0001E22A 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E22E D000                       		dc.w $D000
0001E230 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E234 96C0                       		dc.w $96C0
0001E236 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E23A 8C40                       		dc.w $8C40
0001E23C                            ; ---------------------------------------------------------------------------
0001E23C                            ; Pattern load cues - beta special stage warp effect
0001E23C                            ; ---------------------------------------------------------------------------
0001E23C 0000                       PLC_Warp:	dc.w 0
0001E23E 0000 0000                  		dc.l Nem_Warp
0001E242 A820                       		dc.w $A820
0001E244                            ; ---------------------------------------------------------------------------
0001E244                            ; Pattern load cues - special stage
0001E244                            ; ---------------------------------------------------------------------------
0001E244 0010                       PLC_SpeStage:	dc.w $10
0001E246 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E24A 0000                       		dc.w 0
0001E24C 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E250 0A20                       		dc.w $A20
0001E252 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E256 2840                       		dc.w $2840
0001E258 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E25C 4760                       		dc.w $4760
0001E25E 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E262 4A20                       		dc.w $4A20
0001E264 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E268 4C60                       		dc.w $4C60
0001E26A 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E26E 5E00                       		dc.w $5E00
0001E270 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E274 6E00                       		dc.w $6E00
0001E276 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E27A 7E00                       		dc.w $7E00
0001E27C 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E280 8E00                       		dc.w $8E00
0001E282 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E286 9E00                       		dc.w $9E00
0001E288 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E28C AE00                       		dc.w $AE00
0001E28E 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E292 BE00                       		dc.w $BE00
0001E294 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E298 EE00                       		dc.w $EE00
0001E29A 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E29E F2E0                       		dc.w $F2E0
0001E2A0 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E2A4 F400                       		dc.w $F400
0001E2A6 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E2AA F520                       		dc.w $F520
0001E2AC 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E2B0 F2E0                       		dc.w $F2E0
0001E2B2 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E2B6 F400                       		dc.w $F400
0001E2B8 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E2BC F520                       		dc.w $F520
0001E2BE                            ; ---------------------------------------------------------------------------
0001E2BE                            ; Pattern load cues - GHZ animals
0001E2BE                            ; ---------------------------------------------------------------------------
0001E2BE 0001                       PLC_GHZAnimals:	dc.w 1
0001E2C0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E2C4 B000                       		dc.w $B000
0001E2C6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E2CA B240                       		dc.w $B240
0001E2CC                            ; ---------------------------------------------------------------------------
0001E2CC                            ; Pattern load cues - LZ animals
0001E2CC                            ; ---------------------------------------------------------------------------
0001E2CC 0001                       PLC_LZAnimals:	dc.w 1
0001E2CE 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E2D2 B000                       		dc.w $B000
0001E2D4 0000 0000                  		dc.l Nem_Seal		; seal
0001E2D8 B240                       		dc.w $B240
0001E2DA                            ; ---------------------------------------------------------------------------
0001E2DA                            ; Pattern load cues - MZ animals
0001E2DA                            ; ---------------------------------------------------------------------------
0001E2DA 0001                       PLC_MZAnimals:	dc.w 1
0001E2DC 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E2E0 B000                       		dc.w $B000
0001E2E2 0000 0000                  		dc.l Nem_Seal		; seal
0001E2E6 B240                       		dc.w $B240
0001E2E8                            ; ---------------------------------------------------------------------------
0001E2E8                            ; Pattern load cues - SLZ animals
0001E2E8                            ; ---------------------------------------------------------------------------
0001E2E8 0001                       PLC_SLZAnimals:	dc.w 1
0001E2EA 0000 0000                  		dc.l Nem_Pig		; pig
0001E2EE B000                       		dc.w $B000
0001E2F0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E2F4 B240                       		dc.w $B240
0001E2F6                            ; ---------------------------------------------------------------------------
0001E2F6                            ; Pattern load cues - SYZ animals
0001E2F6                            ; ---------------------------------------------------------------------------
0001E2F6 0001                       PLC_SYZAnimals:	dc.w 1
0001E2F8 0000 0000                  		dc.l Nem_Pig		; pig
0001E2FC B000                       		dc.w $B000
0001E2FE 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E302 B240                       		dc.w $B240
0001E304                            ; ---------------------------------------------------------------------------
0001E304                            ; Pattern load cues - SBZ animals
0001E304                            ; ---------------------------------------------------------------------------
0001E304 0001                       PLC_SBZAnimals:	dc.w 1
0001E306 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E30A B000                       		dc.w $B000
0001E30C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E310 B240                       		dc.w $B240
0001E312                            ; ---------------------------------------------------------------------------
0001E312                            ; Pattern load cues - special stage results screen
0001E312                            ; ---------------------------------------------------------------------------
0001E312 0001                       PLC_SpeStResult:dc.w 1
0001E314 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E318 A820                       		dc.w $A820
0001E31A 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E31E AA20                       		dc.w $AA20
0001E320                            ; ---------------------------------------------------------------------------
0001E320                            ; Pattern load cues - ending sequence
0001E320                            ; ---------------------------------------------------------------------------
0001E320 000E                       PLC_Ending:	dc.w $E
0001E322 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E326 0000                       		dc.w 0
0001E328 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E32C 39A0                       		dc.w $39A0
0001E32E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E332 6B00                       		dc.w $6B00
0001E334 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E338 7400                       		dc.w $7400
0001E33A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E33E 78A0                       		dc.w $78A0
0001E340 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E344 7C20                       		dc.w $7C20
0001E346 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E34A A480                       		dc.w $A480
0001E34C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E350 AA60                       		dc.w $AA60
0001E352 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E356 ACA0                       		dc.w $ACA0
0001E358 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E35C AE60                       		dc.w $AE60
0001E35E 0000 0000                  		dc.l Nem_Seal		; seal
0001E362 B0A0                       		dc.w $B0A0
0001E364 0000 0000                  		dc.l Nem_Pig		; pig
0001E368 B260                       		dc.w $B260
0001E36A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E36E B4A0                       		dc.w $B4A0
0001E370 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E374 B660                       		dc.w $B660
0001E376 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E37A B8A0                       		dc.w $B8A0
0001E37C                            ; ---------------------------------------------------------------------------
0001E37C                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E37C                            ; ---------------------------------------------------------------------------
0001E37C 0002                       PLC_TryAgain:	dc.w 2
0001E37E 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E382 78A0                       		dc.w $78A0
0001E384 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E388 7C20                       		dc.w $7C20
0001E38A 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E38E B400                       		dc.w $B400
0001E390                            ; ---------------------------------------------------------------------------
0001E390                            ; Pattern load cues - Eggman on SBZ 2
0001E390                            ; ---------------------------------------------------------------------------
0001E390 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E392 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E396 A300                       		dc.w $A300
0001E398 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E39C 8000                       		dc.w $8000
0001E39E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E3A2 9400                       		dc.w $9400
0001E3A4                            ; ---------------------------------------------------------------------------
0001E3A4                            ; Pattern load cues - final boss
0001E3A4                            ; ---------------------------------------------------------------------------
0001E3A4 0004                       PLC_FZBoss:	dc.w 4
0001E3A6 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E3AA 7400                       		dc.w $7400
0001E3AC 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E3B0 6000                       		dc.w $6000
0001E3B2 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E3B6 8000                       		dc.w $8000
0001E3B8 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E3BC 8E00                       		dc.w $8E00
0001E3BE 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E3C2 A540                       		dc.w $A540
0001E3C4                            ; ---------------------------------------------------------------------------
0001E3C4                            ; Pattern load cues - Teto boss
0001E3C4                            ; ---------------------------------------------------------------------------
0001E3C4 0002                       PLC_TetoBoss:	dc.w 2
0001E3C6 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E3CA 8000                       		dc.w $8000
0001E3CC 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E3D0 93A0                       		dc.w $93A0
0001E3D2 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E3D6 9000                       		dc.w $9000
0001E3D8                            		even
0001E3D8                            		even
0001E3D8                            
0001E3D8                            		incbin	misc\padding.bin
0001E4C6                            		even
0001E4C6                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E91C                            		even
0001E91C                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E9B4                            		even
0001E9B4                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EAF6                            		even
0001EAF6                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EB44                            		even
0001EB44                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EC58                            		even
0001EC58                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FB22                            		even
0001FB22                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023C28                            		even
00023C28                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023C5C                            		even
00023C5C                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023D1A                            		even
00023D1A                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000241C2                            		even
000241C2                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024220                            		even
00024220                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024E26                            		even
00024E26                            ; ---------------------------------------------------------------------------
00024E26                            ; Sprite mappings - Sonic
00024E26                            ; ---------------------------------------------------------------------------
00024E26                            Map_Sonic:
00024E26                            	include "_maps\Sonic.asm"
00024E26                            Map_81b4:
00024E26 0000                       Map_81b4_0: 	dc.w Map_81b4_B8-Map_81b4
00024E28 0000                       Map_81b4_2: 	dc.w Map_81b4_B9-Map_81b4
00024E2A 0000                       Map_81b4_4: 	dc.w Map_81b4_C4-Map_81b4
00024E2C 0000                       Map_81b4_6: 	dc.w Map_81b4_D4-Map_81b4
00024E2E 0000                       Map_81b4_8: 	dc.w Map_81b4_E4-Map_81b4
00024E30 0000                       Map_81b4_A: 	dc.w Map_81b4_F4-Map_81b4
00024E32 0000                       Map_81b4_C: 	dc.w Map_81b4_104-Map_81b4
00024E34 0000                       Map_81b4_E: 	dc.w Map_81b4_119-Map_81b4
00024E36 0000                       Map_81b4_10: 	dc.w Map_81b4_124-Map_81b4
00024E38 0000                       Map_81b4_12: 	dc.w Map_81b4_12F-Map_81b4
00024E3A 0000                       Map_81b4_14: 	dc.w Map_81b4_144-Map_81b4
00024E3C 0000                       Map_81b4_16: 	dc.w Map_81b4_14F-Map_81b4
00024E3E 0000                       Map_81b4_18: 	dc.w Map_81b4_15F-Map_81b4
00024E40 0000                       Map_81b4_1A: 	dc.w Map_81b4_179-Map_81b4
00024E42 0000                       Map_81b4_1C: 	dc.w Map_81b4_198-Map_81b4
00024E44 0000                       Map_81b4_1E: 	dc.w Map_81b4_1AD-Map_81b4
00024E46 0000                       Map_81b4_20: 	dc.w Map_81b4_1C7-Map_81b4
00024E48 0000                       Map_81b4_22: 	dc.w Map_81b4_1DC-Map_81b4
00024E4A 0000                       Map_81b4_24: 	dc.w Map_81b4_1F6-Map_81b4
00024E4C 0000                       Map_81b4_26: 	dc.w Map_81b4_20B-Map_81b4
00024E4E 0000                       Map_81b4_28: 	dc.w Map_81b4_216-Map_81b4
00024E50 0000                       Map_81b4_2A: 	dc.w Map_81b4_221-Map_81b4
00024E52 0000                       Map_81b4_2C: 	dc.w Map_81b4_236-Map_81b4
00024E54 0000                       Map_81b4_2E: 	dc.w Map_81b4_241-Map_81b4
00024E56 0000                       Map_81b4_30: 	dc.w Map_81b4_251-Map_81b4
00024E58 0000                       Map_81b4_32: 	dc.w Map_81b4_270-Map_81b4
00024E5A 0000                       Map_81b4_34: 	dc.w Map_81b4_28F-Map_81b4
00024E5C 0000                       Map_81b4_36: 	dc.w Map_81b4_2A4-Map_81b4
00024E5E 0000                       Map_81b4_38: 	dc.w Map_81b4_2BE-Map_81b4
00024E60 0000                       Map_81b4_3A: 	dc.w Map_81b4_2D3-Map_81b4
00024E62 0000                       Map_81b4_3C: 	dc.w Map_81b4_2ED-Map_81b4
00024E64 0000                       Map_81b4_3E: 	dc.w Map_81b4_2F8-Map_81b4
00024E66 0000                       Map_81b4_40: 	dc.w Map_81b4_303-Map_81b4
00024E68 0000                       Map_81b4_42: 	dc.w Map_81b4_30E-Map_81b4
00024E6A 0000                       Map_81b4_44: 	dc.w Map_81b4_319-Map_81b4
00024E6C 0000                       Map_81b4_46: 	dc.w Map_81b4_32E-Map_81b4
00024E6E 0000                       Map_81b4_48: 	dc.w Map_81b4_33E-Map_81b4
00024E70 0000                       Map_81b4_4A: 	dc.w Map_81b4_353-Map_81b4
00024E72 0000                       Map_81b4_4C: 	dc.w Map_81b4_363-Map_81b4
00024E74 0000                       Map_81b4_4E: 	dc.w Map_81b4_36E-Map_81b4
00024E76 0000                       Map_81b4_50: 	dc.w Map_81b4_379-Map_81b4
00024E78 0000                       Map_81b4_52: 	dc.w Map_81b4_384-Map_81b4
00024E7A 0000                       Map_81b4_54: 	dc.w Map_81b4_38F-Map_81b4
00024E7C 0000                       Map_81b4_56: 	dc.w Map_81b4_3A4-Map_81b4
00024E7E 0000                       Map_81b4_58: 	dc.w Map_81b4_3AF-Map_81b4
00024E80 0000                       Map_81b4_5A: 	dc.w Map_81b4_3C4-Map_81b4
00024E82 0000                       Map_81b4_5C: 	dc.w Map_81b4_3CF-Map_81b4
00024E84 0000                       Map_81b4_5E: 	dc.w Map_81b4_3D5-Map_81b4
00024E86 0000                       Map_81b4_60: 	dc.w Map_81b4_3DB-Map_81b4
00024E88 0000                       Map_81b4_62: 	dc.w Map_81b4_3E1-Map_81b4
00024E8A 0000                       Map_81b4_64: 	dc.w Map_81b4_3E7-Map_81b4
00024E8C 0000                       Map_81b4_66: 	dc.w Map_81b4_3ED-Map_81b4
00024E8E 0000                       Map_81b4_68: 	dc.w Map_81b4_3F8-Map_81b4
00024E90 0000                       Map_81b4_6A: 	dc.w Map_81b4_3FE-Map_81b4
00024E92 0000                       Map_81b4_6C: 	dc.w Map_81b4_409-Map_81b4
00024E94 0000                       Map_81b4_6E: 	dc.w Map_81b4_40F-Map_81b4
00024E96 0000                       Map_81b4_70: 	dc.w Map_81b4_41A-Map_81b4
00024E98 0000                       Map_81b4_72: 	dc.w Map_81b4_42F-Map_81b4
00024E9A 0000                       Map_81b4_74: 	dc.w Map_81b4_44E-Map_81b4
00024E9C 0000                       Map_81b4_76: 	dc.w Map_81b4_459-Map_81b4
00024E9E 0000                       Map_81b4_78: 	dc.w Map_81b4_464-Map_81b4
00024EA0 0000                       Map_81b4_7A: 	dc.w Map_81b4_479-Map_81b4
00024EA2 0000                       Map_81b4_7C: 	dc.w Map_81b4_484-Map_81b4
00024EA4 0000                       Map_81b4_7E: 	dc.w Map_81b4_494-Map_81b4
00024EA6 0000                       Map_81b4_80: 	dc.w Map_81b4_4A9-Map_81b4
00024EA8 0000                       Map_81b4_82: 	dc.w Map_81b4_4B4-Map_81b4
00024EAA 0000                       Map_81b4_84: 	dc.w Map_81b4_4C9-Map_81b4
00024EAC 0000                       Map_81b4_86: 	dc.w Map_81b4_4DE-Map_81b4
00024EAE 0000                       Map_81b4_88: 	dc.w Map_81b4_4F8-Map_81b4
00024EB0 0000                       Map_81b4_8A: 	dc.w Map_81b4_512-Map_81b4
00024EB2 0000                       Map_81b4_8C: 	dc.w Map_81b4_51D-Map_81b4
00024EB4 0000                       Map_81b4_8E: 	dc.w Map_81b4_52D-Map_81b4
00024EB6 0000                       Map_81b4_90: 	dc.w Map_81b4_538-Map_81b4
00024EB8 0000                       Map_81b4_92: 	dc.w Map_81b4_548-Map_81b4
00024EBA 0000                       Map_81b4_94: 	dc.w Map_81b4_553-Map_81b4
00024EBC 0000                       Map_81b4_96: 	dc.w Map_81b4_563-Map_81b4
00024EBE 0000                       Map_81b4_98: 	dc.w Map_81b4_573-Map_81b4
00024EC0 0000                       Map_81b4_9A: 	dc.w Map_81b4_58D-Map_81b4
00024EC2 0000                       Map_81b4_9C: 	dc.w Map_81b4_5A7-Map_81b4
00024EC4 0000                       Map_81b4_9E: 	dc.w Map_81b4_5B2-Map_81b4
00024EC6 0000                       Map_81b4_A0: 	dc.w Map_81b4_5C2-Map_81b4
00024EC8 0000                       Map_81b4_A2: 	dc.w Map_81b4_5C8-Map_81b4
00024ECA 0000                       Map_81b4_A4: 	dc.w Map_81b4_5CE-Map_81b4
00024ECC 0000                       Map_81b4_A6: 	dc.w Map_81b4_5D4-Map_81b4
00024ECE 0000                       Map_81b4_A8: 	dc.w Map_81b4_5E9-Map_81b4
00024ED0 0000                       Map_81b4_AA: 	dc.w Map_81b4_5F9-Map_81b4
00024ED2 0000                       Map_81b4_AC: 	dc.w Map_81b4_609-Map_81b4
00024ED4 0000                       Map_81b4_AE: 	dc.w Map_81b4_619-Map_81b4
00024ED6 0000                       Map_81b4_B0: 	dc.w Map_81b4_624-Map_81b4
00024ED8 0000                       Map_81b4_B2: 	dc.w Map_81b4_62F-Map_81b4
00024EDA 0000                       Map_81b4_B4: 	dc.w Map_81b4_63F-Map_81b4
00024EDC 0000                       Map_81b4_B6: 	dc.w Map_81b4_64A-Map_81b4
00024EDE 00                         Map_81b4_B8: 	dc.b $0
00024EDF 02                         Map_81b4_B9: 	dc.b $2
00024EE0 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024EE5 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024EEA 03                         Map_81b4_C4: 	dc.b $3
00024EEB EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024EF0 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024EF5 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024EFA 03                         Map_81b4_D4: 	dc.b $3
00024EFB EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F00 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F05 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F0A 03                         Map_81b4_E4: 	dc.b $3
00024F0B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F10 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F15 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F1A 03                         Map_81b4_F4: 	dc.b $3
00024F1B EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024F20 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024F25 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F2A 04                         Map_81b4_104: 	dc.b $4
00024F2B EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024F30 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024F35 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024F3A 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024F3F 02                         Map_81b4_119: 	dc.b $2
00024F40 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024F45 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024F4A 02                         Map_81b4_124: 	dc.b $2
00024F4B ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024F50 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024F55 04                         Map_81b4_12F: 	dc.b $4
00024F56 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024F5B FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024F60 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024F65 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024F6A 02                         Map_81b4_144: 	dc.b $2
00024F6B FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024F70 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024F75 03                         Map_81b4_14F: 	dc.b $3
00024F76 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024F7B FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024F80 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024F85 05                         Map_81b4_15F: 	dc.b $5
00024F86 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024F8B EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024F90 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024F95 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024F9A 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024F9F 06                         Map_81b4_179: 	dc.b $6
00024FA0 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024FA5 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024FAA FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024FAF 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024FB4 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024FB9 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024FBE 04                         Map_81b4_198: 	dc.b $4
00024FBF ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024FC4 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024FC9 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024FCE 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024FD3 05                         Map_81b4_1AD: 	dc.b $5
00024FD4 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024FD9 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024FDE FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024FE3 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024FE8 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024FED 04                         Map_81b4_1C7: 	dc.b $4
00024FEE EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024FF3 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024FF8 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00024FFD 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00025002 05                         Map_81b4_1DC: 	dc.b $5
00025003 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025008 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
0002500D FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00025012 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00025017 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
0002501C 04                         Map_81b4_1F6: 	dc.b $4
0002501D F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00025022 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00025027 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
0002502C 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00025031 02                         Map_81b4_20B: 	dc.b $2
00025032 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00025037 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
0002503C 02                         Map_81b4_216: 	dc.b $2
0002503D F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00025042 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00025047 04                         Map_81b4_221: 	dc.b $4
00025048 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
0002504D EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00025052 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00025057 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
0002505C 02                         Map_81b4_236: 	dc.b $2
0002505D F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00025062 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025067 03                         Map_81b4_241: 	dc.b $3
00025068 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
0002506D EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00025072 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025077 06                         Map_81b4_251: 	dc.b $6
00025078 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002507D ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00025082 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025087 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
0002508C 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00025091 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025096 06                         Map_81b4_270: 	dc.b $6
00025097 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002509C E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
000250A1 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
000250A6 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
000250AB F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
000250B0 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
000250B5 04                         Map_81b4_28F: 	dc.b $4
000250B6 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000250BB F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
000250C0 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
000250C5 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000250CA 05                         Map_81b4_2A4: 	dc.b $5
000250CB FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000250D0 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
000250D5 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
000250DA F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
000250DF 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
000250E4 04                         Map_81b4_2BE: 	dc.b $4
000250E5 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000250EA F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000250EF EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000250F4 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000250F9 05                         Map_81b4_2D3: 	dc.b $5
000250FA FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000250FF EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00025104 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00025109 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002510E 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00025113 02                         Map_81b4_2ED: 	dc.b $2
00025114 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025119 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002511E 02                         Map_81b4_2F8: 	dc.b $2
0002511F EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025124 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025129 02                         Map_81b4_303: 	dc.b $2
0002512A EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002512F FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025134 02                         Map_81b4_30E: 	dc.b $2
00025135 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002513A FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002513F 04                         Map_81b4_319: 	dc.b $4
00025140 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025145 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002514A FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002514F FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025154 03                         Map_81b4_32E: 	dc.b $3
00025155 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002515A EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002515F FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025164 04                         Map_81b4_33E: 	dc.b $4
00025165 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002516A EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002516F FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025174 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025179 03                         Map_81b4_353: 	dc.b $3
0002517A EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002517F EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025184 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025189 02                         Map_81b4_363: 	dc.b $2
0002518A F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002518F F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025194 02                         Map_81b4_36E: 	dc.b $2
00025195 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002519A F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002519F 02                         Map_81b4_379: 	dc.b $2
000251A0 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251A5 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251AA 02                         Map_81b4_384: 	dc.b $2
000251AB F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251B0 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251B5 04                         Map_81b4_38F: 	dc.b $4
000251B6 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000251BB F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000251C0 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000251C5 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000251CA 02                         Map_81b4_3A4: 	dc.b $2
000251CB F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000251D0 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000251D5 04                         Map_81b4_3AF: 	dc.b $4
000251D6 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000251DB F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000251E0 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000251E5 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000251EA 02                         Map_81b4_3C4: 	dc.b $2
000251EB F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000251F0 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000251F5 01                         Map_81b4_3CF: 	dc.b $1
000251F6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000251FB 01                         Map_81b4_3D5: 	dc.b $1
000251FC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025201 01                         Map_81b4_3DB: 	dc.b $1
00025202 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025207 01                         Map_81b4_3E1: 	dc.b $1
00025208 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002520D 01                         Map_81b4_3E7: 	dc.b $1
0002520E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025213 02                         Map_81b4_3ED: 	dc.b $2
00025214 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00025219 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
0002521E 01                         Map_81b4_3F8: 	dc.b $1
0002521F F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025224 02                         Map_81b4_3FE: 	dc.b $2
00025225 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002522A 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002522F 01                         Map_81b4_409: 	dc.b $1
00025230 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025235 02                         Map_81b4_40F: 	dc.b $2
00025236 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
0002523B FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00025240 04                         Map_81b4_41A: 	dc.b $4
00025241 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025246 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
0002524B 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00025250 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00025255 06                         Map_81b4_42F: 	dc.b $6
00025256 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
0002525B FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00025260 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00025265 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
0002526A FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
0002526F F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00025274 02                         Map_81b4_44E: 	dc.b $2
00025275 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
0002527A EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
0002527F 02                         Map_81b4_459: 	dc.b $2
00025280 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00025285 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
0002528A 04                         Map_81b4_464: 	dc.b $4
0002528B F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025290 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025295 0408 000C 03               	dc.b $4, $8, $0, $C, $3
0002529A 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002529F 02                         Map_81b4_479: 	dc.b $2
000252A0 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
000252A5 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
000252AA 03                         Map_81b4_484: 	dc.b $3
000252AB F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
000252B0 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
000252B5 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
000252BA 04                         Map_81b4_494: 	dc.b $4
000252BB F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000252C0 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000252C5 0408 000C 02               	dc.b $4, $8, $0, $C, $2
000252CA 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000252CF 02                         Map_81b4_4A9: 	dc.b $2
000252D0 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000252D5 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
000252DA 04                         Map_81b4_4B4: 	dc.b $4
000252DB F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000252E0 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000252E5 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000252EA F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000252EF 04                         Map_81b4_4C9: 	dc.b $4
000252F0 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000252F5 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000252FA F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000252FF F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025304 05                         Map_81b4_4DE: 	dc.b $5
00025305 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002530A F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002530F 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025314 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025319 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002531E 05                         Map_81b4_4F8: 	dc.b $5
0002531F E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025324 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00025329 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002532E 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025333 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025338 02                         Map_81b4_512: 	dc.b $2
00025339 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002533E 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025343 03                         Map_81b4_51D: 	dc.b $3
00025344 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025349 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002534E 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025353 02                         Map_81b4_52D: 	dc.b $2
00025354 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025359 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002535E 03                         Map_81b4_538: 	dc.b $3
0002535F EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025364 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025369 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002536E 02                         Map_81b4_548: 	dc.b $2
0002536F EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025374 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025379 03                         Map_81b4_553: 	dc.b $3
0002537A EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002537F 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025384 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025389 03                         Map_81b4_563: 	dc.b $3
0002538A E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002538F E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025394 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025399 05                         Map_81b4_573: 	dc.b $5
0002539A E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002539F E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000253A4 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000253A9 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000253AE 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000253B3 05                         Map_81b4_58D: 	dc.b $5
000253B4 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000253B9 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000253BE F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000253C3 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000253C8 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000253CD 02                         Map_81b4_5A7: 	dc.b $2
000253CE EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000253D3 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000253D8 03                         Map_81b4_5B2: 	dc.b $3
000253D9 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000253DE F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000253E3 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000253E8 01                         Map_81b4_5C2: 	dc.b $1
000253E9 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000253EE 01                         Map_81b4_5C8: 	dc.b $1
000253EF F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000253F4 01                         Map_81b4_5CE: 	dc.b $1
000253F5 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000253FA 04                         Map_81b4_5D4: 	dc.b $4
000253FB F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00025400 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025405 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
0002540A 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
0002540F 03                         Map_81b4_5E9: 	dc.b $3
00025410 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025415 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
0002541A 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
0002541F 03                         Map_81b4_5F9: 	dc.b $3
00025420 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025425 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0002542A 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
0002542F 03                         Map_81b4_609: 	dc.b $3
00025430 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025435 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
0002543A 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
0002543F 02                         Map_81b4_619: 	dc.b $2
00025440 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00025445 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
0002544A 02                         Map_81b4_624: 	dc.b $2
0002544B F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025450 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025455 03                         Map_81b4_62F: 	dc.b $3
00025456 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
0002545B 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00025460 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025465 02                         Map_81b4_63F: 	dc.b $2
00025466 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
0002546B EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00025470 04                         Map_81b4_64A: 	dc.b $4
00025471 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025476 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
0002547B F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00025480 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025486 00                         	even
00025486 00                         	even
00025486                            
00025486                            ; ---------------------------------------------------------------------------
00025486                            ; Uncompressed graphics	loading	array for Sonic
00025486                            ; ---------------------------------------------------------------------------
00025486                            SonicDynPLC:
00025486                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025486                            DPLC_b4ca:
00025486 0000                       DPLC_b4ca_0: 	dc.w DPLC_b4ca_B8-DPLC_b4ca
00025488 0000                       DPLC_b4ca_2: 	dc.w DPLC_b4ca_B9-DPLC_b4ca
0002548A 0000                       DPLC_b4ca_4: 	dc.w DPLC_b4ca_BE-DPLC_b4ca
0002548C 0000                       DPLC_b4ca_6: 	dc.w DPLC_b4ca_C5-DPLC_b4ca
0002548E 0000                       DPLC_b4ca_8: 	dc.w DPLC_b4ca_CC-DPLC_b4ca
00025490 0000                       DPLC_b4ca_A: 	dc.w DPLC_b4ca_D3-DPLC_b4ca
00025492 0000                       DPLC_b4ca_C: 	dc.w DPLC_b4ca_DA-DPLC_b4ca
00025494 0000                       DPLC_b4ca_E: 	dc.w DPLC_b4ca_E3-DPLC_b4ca
00025496 0000                       DPLC_b4ca_10: 	dc.w DPLC_b4ca_E8-DPLC_b4ca
00025498 0000                       DPLC_b4ca_12: 	dc.w DPLC_b4ca_ED-DPLC_b4ca
0002549A 0000                       DPLC_b4ca_14: 	dc.w DPLC_b4ca_F6-DPLC_b4ca
0002549C 0000                       DPLC_b4ca_16: 	dc.w DPLC_b4ca_FB-DPLC_b4ca
0002549E 0000                       DPLC_b4ca_18: 	dc.w DPLC_b4ca_102-DPLC_b4ca
000254A0 0000                       DPLC_b4ca_1A: 	dc.w DPLC_b4ca_10D-DPLC_b4ca
000254A2 0000                       DPLC_b4ca_1C: 	dc.w DPLC_b4ca_11A-DPLC_b4ca
000254A4 0000                       DPLC_b4ca_1E: 	dc.w DPLC_b4ca_123-DPLC_b4ca
000254A6 0000                       DPLC_b4ca_20: 	dc.w DPLC_b4ca_12E-DPLC_b4ca
000254A8 0000                       DPLC_b4ca_22: 	dc.w DPLC_b4ca_137-DPLC_b4ca
000254AA 0000                       DPLC_b4ca_24: 	dc.w DPLC_b4ca_142-DPLC_b4ca
000254AC 0000                       DPLC_b4ca_26: 	dc.w DPLC_b4ca_14B-DPLC_b4ca
000254AE 0000                       DPLC_b4ca_28: 	dc.w DPLC_b4ca_150-DPLC_b4ca
000254B0 0000                       DPLC_b4ca_2A: 	dc.w DPLC_b4ca_155-DPLC_b4ca
000254B2 0000                       DPLC_b4ca_2C: 	dc.w DPLC_b4ca_15E-DPLC_b4ca
000254B4 0000                       DPLC_b4ca_2E: 	dc.w DPLC_b4ca_163-DPLC_b4ca
000254B6 0000                       DPLC_b4ca_30: 	dc.w DPLC_b4ca_16A-DPLC_b4ca
000254B8 0000                       DPLC_b4ca_32: 	dc.w DPLC_b4ca_177-DPLC_b4ca
000254BA 0000                       DPLC_b4ca_34: 	dc.w DPLC_b4ca_184-DPLC_b4ca
000254BC 0000                       DPLC_b4ca_36: 	dc.w DPLC_b4ca_18D-DPLC_b4ca
000254BE 0000                       DPLC_b4ca_38: 	dc.w DPLC_b4ca_198-DPLC_b4ca
000254C0 0000                       DPLC_b4ca_3A: 	dc.w DPLC_b4ca_1A1-DPLC_b4ca
000254C2 0000                       DPLC_b4ca_3C: 	dc.w DPLC_b4ca_1AC-DPLC_b4ca
000254C4 0000                       DPLC_b4ca_3E: 	dc.w DPLC_b4ca_1B1-DPLC_b4ca
000254C6 0000                       DPLC_b4ca_40: 	dc.w DPLC_b4ca_1B6-DPLC_b4ca
000254C8 0000                       DPLC_b4ca_42: 	dc.w DPLC_b4ca_1BB-DPLC_b4ca
000254CA 0000                       DPLC_b4ca_44: 	dc.w DPLC_b4ca_1C0-DPLC_b4ca
000254CC 0000                       DPLC_b4ca_46: 	dc.w DPLC_b4ca_1C9-DPLC_b4ca
000254CE 0000                       DPLC_b4ca_48: 	dc.w DPLC_b4ca_1D0-DPLC_b4ca
000254D0 0000                       DPLC_b4ca_4A: 	dc.w DPLC_b4ca_1D9-DPLC_b4ca
000254D2 0000                       DPLC_b4ca_4C: 	dc.w DPLC_b4ca_1E0-DPLC_b4ca
000254D4 0000                       DPLC_b4ca_4E: 	dc.w DPLC_b4ca_1E5-DPLC_b4ca
000254D6 0000                       DPLC_b4ca_50: 	dc.w DPLC_b4ca_1EA-DPLC_b4ca
000254D8 0000                       DPLC_b4ca_52: 	dc.w DPLC_b4ca_1EF-DPLC_b4ca
000254DA 0000                       DPLC_b4ca_54: 	dc.w DPLC_b4ca_1F4-DPLC_b4ca
000254DC 0000                       DPLC_b4ca_56: 	dc.w DPLC_b4ca_1FD-DPLC_b4ca
000254DE 0000                       DPLC_b4ca_58: 	dc.w DPLC_b4ca_202-DPLC_b4ca
000254E0 0000                       DPLC_b4ca_5A: 	dc.w DPLC_b4ca_20B-DPLC_b4ca
000254E2 0000                       DPLC_b4ca_5C: 	dc.w DPLC_b4ca_210-DPLC_b4ca
000254E4 0000                       DPLC_b4ca_5E: 	dc.w DPLC_b4ca_213-DPLC_b4ca
000254E6 0000                       DPLC_b4ca_60: 	dc.w DPLC_b4ca_216-DPLC_b4ca
000254E8 0000                       DPLC_b4ca_62: 	dc.w DPLC_b4ca_219-DPLC_b4ca
000254EA 0000                       DPLC_b4ca_64: 	dc.w DPLC_b4ca_21C-DPLC_b4ca
000254EC 0000                       DPLC_b4ca_66: 	dc.w DPLC_b4ca_21F-DPLC_b4ca
000254EE 0000                       DPLC_b4ca_68: 	dc.w DPLC_b4ca_224-DPLC_b4ca
000254F0 0000                       DPLC_b4ca_6A: 	dc.w DPLC_b4ca_227-DPLC_b4ca
000254F2 0000                       DPLC_b4ca_6C: 	dc.w DPLC_b4ca_22C-DPLC_b4ca
000254F4 0000                       DPLC_b4ca_6E: 	dc.w DPLC_b4ca_22F-DPLC_b4ca
000254F6 0000                       DPLC_b4ca_70: 	dc.w DPLC_b4ca_234-DPLC_b4ca
000254F8 0000                       DPLC_b4ca_72: 	dc.w DPLC_b4ca_23D-DPLC_b4ca
000254FA 0000                       DPLC_b4ca_74: 	dc.w DPLC_b4ca_242-DPLC_b4ca
000254FC 0000                       DPLC_b4ca_76: 	dc.w DPLC_b4ca_247-DPLC_b4ca
000254FE 0000                       DPLC_b4ca_78: 	dc.w DPLC_b4ca_24C-DPLC_b4ca
00025500 0000                       DPLC_b4ca_7A: 	dc.w DPLC_b4ca_251-DPLC_b4ca
00025502 0000                       DPLC_b4ca_7C: 	dc.w DPLC_b4ca_254-DPLC_b4ca
00025504 0000                       DPLC_b4ca_7E: 	dc.w DPLC_b4ca_25B-DPLC_b4ca
00025506 0000                       DPLC_b4ca_80: 	dc.w DPLC_b4ca_260-DPLC_b4ca
00025508 0000                       DPLC_b4ca_82: 	dc.w DPLC_b4ca_263-DPLC_b4ca
0002550A 0000                       DPLC_b4ca_84: 	dc.w DPLC_b4ca_26C-DPLC_b4ca
0002550C 0000                       DPLC_b4ca_86: 	dc.w DPLC_b4ca_275-DPLC_b4ca
0002550E 0000                       DPLC_b4ca_88: 	dc.w DPLC_b4ca_280-DPLC_b4ca
00025510 0000                       DPLC_b4ca_8A: 	dc.w DPLC_b4ca_28B-DPLC_b4ca
00025512 0000                       DPLC_b4ca_8C: 	dc.w DPLC_b4ca_290-DPLC_b4ca
00025514 0000                       DPLC_b4ca_8E: 	dc.w DPLC_b4ca_297-DPLC_b4ca
00025516 0000                       DPLC_b4ca_90: 	dc.w DPLC_b4ca_29C-DPLC_b4ca
00025518 0000                       DPLC_b4ca_92: 	dc.w DPLC_b4ca_2A3-DPLC_b4ca
0002551A 0000                       DPLC_b4ca_94: 	dc.w DPLC_b4ca_2A8-DPLC_b4ca
0002551C 0000                       DPLC_b4ca_96: 	dc.w DPLC_b4ca_2AF-DPLC_b4ca
0002551E 0000                       DPLC_b4ca_98: 	dc.w DPLC_b4ca_2B6-DPLC_b4ca
00025520 0000                       DPLC_b4ca_9A: 	dc.w DPLC_b4ca_2C1-DPLC_b4ca
00025522 0000                       DPLC_b4ca_9C: 	dc.w DPLC_b4ca_2CC-DPLC_b4ca
00025524 0000                       DPLC_b4ca_9E: 	dc.w DPLC_b4ca_2D1-DPLC_b4ca
00025526 0000                       DPLC_b4ca_A0: 	dc.w DPLC_b4ca_2D8-DPLC_b4ca
00025528 0000                       DPLC_b4ca_A2: 	dc.w DPLC_b4ca_2DB-DPLC_b4ca
0002552A 0000                       DPLC_b4ca_A4: 	dc.w DPLC_b4ca_2DE-DPLC_b4ca
0002552C 0000                       DPLC_b4ca_A6: 	dc.w DPLC_b4ca_2E1-DPLC_b4ca
0002552E 0000                       DPLC_b4ca_A8: 	dc.w DPLC_b4ca_2E6-DPLC_b4ca
00025530 0000                       DPLC_b4ca_AA: 	dc.w DPLC_b4ca_2ED-DPLC_b4ca
00025532 0000                       DPLC_b4ca_AC: 	dc.w DPLC_b4ca_2F4-DPLC_b4ca
00025534 0000                       DPLC_b4ca_AE: 	dc.w DPLC_b4ca_2FB-DPLC_b4ca
00025536 0000                       DPLC_b4ca_B0: 	dc.w DPLC_b4ca_300-DPLC_b4ca
00025538 0000                       DPLC_b4ca_B2: 	dc.w DPLC_b4ca_305-DPLC_b4ca
0002553A 0000                       DPLC_b4ca_B4: 	dc.w DPLC_b4ca_30A-DPLC_b4ca
0002553C 0000                       DPLC_b4ca_B6: 	dc.w DPLC_b4ca_30F-DPLC_b4ca
0002553E 00                         DPLC_b4ca_B8: 	dc.b $0
0002553F 02                         DPLC_b4ca_B9: 	dc.b $2
00025540 F000                       	dc.b $F0, $0
00025542 1010                       	dc.b $10, $10
00025544 03                         DPLC_b4ca_BE: 	dc.b $3
00025545 5012                       	dc.b $50, $12
00025547 5018                       	dc.b $50, $18
00025549 201E                       	dc.b $20, $1E
0002554B 03                         DPLC_b4ca_C5: 	dc.b $3
0002554C 5021                       	dc.b $50, $21
0002554E 5018                       	dc.b $50, $18
00025550 201E                       	dc.b $20, $1E
00025552 03                         DPLC_b4ca_CC: 	dc.b $3
00025553 5021                       	dc.b $50, $21
00025555 5018                       	dc.b $50, $18
00025557 2027                       	dc.b $20, $27
00025559 03                         DPLC_b4ca_D3: 	dc.b $3
0002555A 802A                       	dc.b $80, $2A
0002555C 2033                       	dc.b $20, $33
0002555E 2036                       	dc.b $20, $36
00025560 04                         DPLC_b4ca_DA: 	dc.b $4
00025561 7039                       	dc.b $70, $39
00025563 5041                       	dc.b $50, $41
00025565 5047                       	dc.b $50, $47
00025567 104D                       	dc.b $10, $4D
00025569 02                         DPLC_b4ca_E3: 	dc.b $2
0002556A 7039                       	dc.b $70, $39
0002556C B04F                       	dc.b $B0, $4F
0002556E 02                         DPLC_b4ca_E8: 	dc.b $2
0002556F 505B                       	dc.b $50, $5B
00025571 8061                       	dc.b $80, $61
00025573 04                         DPLC_b4ca_ED: 	dc.b $4
00025574 505B                       	dc.b $50, $5B
00025576 506A                       	dc.b $50, $6A
00025578 5070                       	dc.b $50, $70
0002557A 1076                       	dc.b $10, $76
0002557C 02                         DPLC_b4ca_F6: 	dc.b $2
0002557D F4F0                       	dc.b $F4, $F0
0002557F 1500                       	dc.b $15, $0
00025581 03                         DPLC_b4ca_FB: 	dc.b $3
00025582 7039                       	dc.b $70, $39
00025584 3078                       	dc.b $30, $78
00025586 507C                       	dc.b $50, $7C
00025588 05                         DPLC_b4ca_102: 	dc.b $5
00025589 5082                       	dc.b $50, $82
0002558B 5088                       	dc.b $50, $88
0002558D 208E                       	dc.b $20, $8E
0002558F 5091                       	dc.b $50, $91
00025591 0097                       	dc.b $0, $97
00025593 06                         DPLC_b4ca_10D: 	dc.b $6
00025594 5082                       	dc.b $50, $82
00025596 1098                       	dc.b $10, $98
00025598 309A                       	dc.b $30, $9A
0002559A 509E                       	dc.b $50, $9E
0002559C 30A4                       	dc.b $30, $A4
0002559E 00A8                       	dc.b $0, $A8
000255A0 04                         DPLC_b4ca_11A: 	dc.b $4
000255A1 50A9                       	dc.b $50, $A9
000255A3 10AF                       	dc.b $10, $AF
000255A5 70B1                       	dc.b $70, $B1
000255A7 20B9                       	dc.b $20, $B9
000255A9 05                         DPLC_b4ca_123: 	dc.b $5
000255AA 50BC                       	dc.b $50, $BC
000255AC 30C2                       	dc.b $30, $C2
000255AE 70C6                       	dc.b $70, $C6
000255B0 20CE                       	dc.b $20, $CE
000255B2 10D1                       	dc.b $10, $D1
000255B4 04                         DPLC_b4ca_12E: 	dc.b $4
000255B5 50BC                       	dc.b $50, $BC
000255B7 10D3                       	dc.b $10, $D3
000255B9 70D5                       	dc.b $70, $D5
000255BB 20DD                       	dc.b $20, $DD
000255BD 05                         DPLC_b4ca_137: 	dc.b $5
000255BE 5082                       	dc.b $50, $82
000255C0 1098                       	dc.b $10, $98
000255C2 008E                       	dc.b $0, $8E
000255C4 70E0                       	dc.b $70, $E0
000255C6 20E8                       	dc.b $20, $E8
000255C8 04                         DPLC_b4ca_142: 	dc.b $4
000255C9 70EB                       	dc.b $70, $EB
000255CB 50F3                       	dc.b $50, $F3
000255CD 10F9                       	dc.b $10, $F9
000255CF 50FB                       	dc.b $50, $FB
000255D1 02                         DPLC_b4ca_14B: 	dc.b $2
000255D2 70EB                       	dc.b $70, $EB
000255D4 B101                       	dc.b $B1, $1
000255D6 02                         DPLC_b4ca_150: 	dc.b $2
000255D7 510D                       	dc.b $51, $D
000255D9 8113                       	dc.b $81, $13
000255DB 04                         DPLC_b4ca_155: 	dc.b $4
000255DC 510D                       	dc.b $51, $D
000255DE 511C                       	dc.b $51, $1C
000255E0 1122                       	dc.b $11, $22
000255E2 5124                       	dc.b $51, $24
000255E4 02                         DPLC_b4ca_15E: 	dc.b $2
000255E5 510D                       	dc.b $51, $D
000255E7 B12A                       	dc.b $B1, $2A
000255E9 03                         DPLC_b4ca_163: 	dc.b $3
000255EA 70EB                       	dc.b $70, $EB
000255EC 0101                       	dc.b $1, $1
000255EE 8136                       	dc.b $81, $36
000255F0 06                         DPLC_b4ca_16A: 	dc.b $6
000255F1 513F                       	dc.b $51, $3F
000255F3 1145                       	dc.b $11, $45
000255F5 1147                       	dc.b $11, $47
000255F7 8149                       	dc.b $81, $49
000255F9 0152                       	dc.b $1, $52
000255FB 0153                       	dc.b $1, $53
000255FD 06                         DPLC_b4ca_177: 	dc.b $6
000255FE 513F                       	dc.b $51, $3F
00025600 2154                       	dc.b $21, $54
00025602 1157                       	dc.b $11, $57
00025604 1159                       	dc.b $11, $59
00025606 815B                       	dc.b $81, $5B
00025608 0152                       	dc.b $1, $52
0002560A 04                         DPLC_b4ca_184: 	dc.b $4
0002560B 5164                       	dc.b $51, $64
0002560D 116A                       	dc.b $11, $6A
0002560F 816C                       	dc.b $81, $6C
00025611 1175                       	dc.b $11, $75
00025613 05                         DPLC_b4ca_18D: 	dc.b $5
00025614 5177                       	dc.b $51, $77
00025616 217D                       	dc.b $21, $7D
00025618 1180                       	dc.b $11, $80
0002561A 7182                       	dc.b $71, $82
0002561C 218A                       	dc.b $21, $8A
0002561E 04                         DPLC_b4ca_198: 	dc.b $4
0002561F 5177                       	dc.b $51, $77
00025621 118D                       	dc.b $11, $8D
00025623 818F                       	dc.b $81, $8F
00025625 1198                       	dc.b $11, $98
00025627 05                         DPLC_b4ca_1A1: 	dc.b $5
00025628 513F                       	dc.b $51, $3F
0002562A 819A                       	dc.b $81, $9A
0002562C 1159                       	dc.b $11, $59
0002562E 11A3                       	dc.b $11, $A3
00025630 0152                       	dc.b $1, $52
00025632 02                         DPLC_b4ca_1AC: 	dc.b $2
00025633 51A5                       	dc.b $51, $A5
00025635 B1AB                       	dc.b $B1, $AB
00025637 02                         DPLC_b4ca_1B1: 	dc.b $2
00025638 505B                       	dc.b $50, $5B
0002563A B1B7                       	dc.b $B1, $B7
0002563C 02                         DPLC_b4ca_1B6: 	dc.b $2
0002563D 51A5                       	dc.b $51, $A5
0002563F B1C3                       	dc.b $B1, $C3
00025641 02                         DPLC_b4ca_1BB: 	dc.b $2
00025642 505B                       	dc.b $50, $5B
00025644 B1CF                       	dc.b $B1, $CF
00025646 04                         DPLC_b4ca_1C0: 	dc.b $4
00025647 51DB                       	dc.b $51, $DB
00025649 11E1                       	dc.b $11, $E1
0002564B B1E3                       	dc.b $B1, $E3
0002564D 01EF                       	dc.b $1, $EF
0002564F 03                         DPLC_b4ca_1C9: 	dc.b $3
00025650 51F0                       	dc.b $51, $F0
00025652 11F6                       	dc.b $11, $F6
00025654 B1F8                       	dc.b $B1, $F8
00025656 04                         DPLC_b4ca_1D0: 	dc.b $4
00025657 51DB                       	dc.b $51, $DB
00025659 1204                       	dc.b $12, $4
0002565B B206                       	dc.b $B2, $6
0002565D 01EF                       	dc.b $1, $EF
0002565F 03                         DPLC_b4ca_1D9: 	dc.b $3
00025660 51F0                       	dc.b $51, $F0
00025662 11F6                       	dc.b $11, $F6
00025664 B212                       	dc.b $B2, $12
00025666 02                         DPLC_b4ca_1E0: 	dc.b $2
00025667 521E                       	dc.b $52, $1E
00025669 B224                       	dc.b $B2, $24
0002566B 02                         DPLC_b4ca_1E5: 	dc.b $2
0002566C 510D                       	dc.b $51, $D
0002566E B230                       	dc.b $B2, $30
00025670 02                         DPLC_b4ca_1EA: 	dc.b $2
00025671 521E                       	dc.b $52, $1E
00025673 B23C                       	dc.b $B2, $3C
00025675 02                         DPLC_b4ca_1EF: 	dc.b $2
00025676 510D                       	dc.b $51, $D
00025678 B248                       	dc.b $B2, $48
0002567A 04                         DPLC_b4ca_1F4: 	dc.b $4
0002567B 5254                       	dc.b $52, $54
0002567D 125A                       	dc.b $12, $5A
0002567F B25C                       	dc.b $B2, $5C
00025681 0268                       	dc.b $2, $68
00025683 02                         DPLC_b4ca_1FD: 	dc.b $2
00025684 7269                       	dc.b $72, $69
00025686 B271                       	dc.b $B2, $71
00025688 04                         DPLC_b4ca_202: 	dc.b $4
00025689 5254                       	dc.b $52, $54
0002568B 127D                       	dc.b $12, $7D
0002568D B27F                       	dc.b $B2, $7F
0002568F 0268                       	dc.b $2, $68
00025691 02                         DPLC_b4ca_20B: 	dc.b $2
00025692 7269                       	dc.b $72, $69
00025694 B28B                       	dc.b $B2, $8B
00025696 01                         DPLC_b4ca_210: 	dc.b $1
00025697 F297                       	dc.b $F2, $97
00025699 01                         DPLC_b4ca_213: 	dc.b $1
0002569A F2A7                       	dc.b $F2, $A7
0002569C 01                         DPLC_b4ca_216: 	dc.b $1
0002569D F2B7                       	dc.b $F2, $B7
0002569F 01                         DPLC_b4ca_219: 	dc.b $1
000256A0 F2C7                       	dc.b $F2, $C7
000256A2 01                         DPLC_b4ca_21C: 	dc.b $1
000256A3 F2D7                       	dc.b $F2, $D7
000256A5 02                         DPLC_b4ca_21F: 	dc.b $2
000256A6 B2E7                       	dc.b $B2, $E7
000256A8 22F3                       	dc.b $22, $F3
000256AA 01                         DPLC_b4ca_224: 	dc.b $1
000256AB F2F6                       	dc.b $F2, $F6
000256AD 02                         DPLC_b4ca_227: 	dc.b $2
000256AE B306                       	dc.b $B3, $6
000256B0 2312                       	dc.b $23, $12
000256B2 01                         DPLC_b4ca_22C: 	dc.b $1
000256B3 F315                       	dc.b $F3, $15
000256B5 02                         DPLC_b4ca_22F: 	dc.b $2
000256B6 5325                       	dc.b $53, $25
000256B8 B32B                       	dc.b $B3, $2B
000256BA 04                         DPLC_b4ca_234: 	dc.b $4
000256BB 5337                       	dc.b $53, $37
000256BD 733D                       	dc.b $73, $3D
000256BF 1345                       	dc.b $13, $45
000256C1 0347                       	dc.b $3, $47
000256C3 02                         DPLC_b4ca_23D: 	dc.b $2
000256C4 D348                       	dc.b $D3, $48
000256C6 34EC                       	dc.b $34, $EC
000256C8 02                         DPLC_b4ca_242: 	dc.b $2
000256C9 F528                       	dc.b $F5, $28
000256CB 0538                       	dc.b $5, $38
000256CD 02                         DPLC_b4ca_247: 	dc.b $2
000256CE F539                       	dc.b $F5, $39
000256D0 0549                       	dc.b $5, $49
000256D2 02                         DPLC_b4ca_24C: 	dc.b $2
000256D3 E356                       	dc.b $E3, $56
000256D5 054A                       	dc.b $5, $4A
000256D7 01                         DPLC_b4ca_251: 	dc.b $1
000256D8 8365                       	dc.b $83, $65
000256DA 03                         DPLC_b4ca_254: 	dc.b $3
000256DB 736E                       	dc.b $73, $6E
000256DD 0376                       	dc.b $3, $76
000256DF 3377                       	dc.b $33, $77
000256E1 02                         DPLC_b4ca_25B: 	dc.b $2
000256E2 E37B                       	dc.b $E3, $7B
000256E4 054A                       	dc.b $5, $4A
000256E6 01                         DPLC_b4ca_260: 	dc.b $1
000256E7 D561                       	dc.b $D5, $61
000256E9 04                         DPLC_b4ca_263: 	dc.b $4
000256EA B399                       	dc.b $B3, $99
000256EC 33A5                       	dc.b $33, $A5
000256EE 03A9                       	dc.b $3, $A9
000256F0 03AA                       	dc.b $3, $AA
000256F2 04                         DPLC_b4ca_26C: 	dc.b $4
000256F3 B3AB                       	dc.b $B3, $AB
000256F5 33B7                       	dc.b $33, $B7
000256F7 03BB                       	dc.b $3, $BB
000256F9 03BC                       	dc.b $3, $BC
000256FB 05                         DPLC_b4ca_275: 	dc.b $5
000256FC 83BD                       	dc.b $83, $BD
000256FE 13C6                       	dc.b $13, $C6
00025700 53C8                       	dc.b $53, $C8
00025702 13CE                       	dc.b $13, $CE
00025704 03D0                       	dc.b $3, $D0
00025706 05                         DPLC_b4ca_280: 	dc.b $5
00025707 83D1                       	dc.b $83, $D1
00025709 13DA                       	dc.b $13, $DA
0002570B 53C8                       	dc.b $53, $C8
0002570D 13CE                       	dc.b $13, $CE
0002570F 03D0                       	dc.b $3, $D0
00025711 02                         DPLC_b4ca_28B: 	dc.b $2
00025712 83DC                       	dc.b $83, $DC
00025714 73E5                       	dc.b $73, $E5
00025716 03                         DPLC_b4ca_290: 	dc.b $3
00025717 83ED                       	dc.b $83, $ED
00025719 23F6                       	dc.b $23, $F6
0002571B 13F9                       	dc.b $13, $F9
0002571D 02                         DPLC_b4ca_297: 	dc.b $2
0002571E 83FB                       	dc.b $83, $FB
00025720 7404                       	dc.b $74, $4
00025722 03                         DPLC_b4ca_29C: 	dc.b $3
00025723 83ED                       	dc.b $83, $ED
00025725 240C                       	dc.b $24, $C
00025727 140F                       	dc.b $14, $F
00025729 02                         DPLC_b4ca_2A3: 	dc.b $2
0002572A 5411                       	dc.b $54, $11
0002572C B417                       	dc.b $B4, $17
0002572E 03                         DPLC_b4ca_2A8: 	dc.b $3
0002572F 8423                       	dc.b $84, $23
00025731 342C                       	dc.b $34, $2C
00025733 0430                       	dc.b $4, $30
00025735 03                         DPLC_b4ca_2AF: 	dc.b $3
00025736 7431                       	dc.b $74, $31
00025738 1439                       	dc.b $14, $39
0002573A B43B                       	dc.b $B4, $3B
0002573C 05                         DPLC_b4ca_2B6: 	dc.b $5
0002573D 7447                       	dc.b $74, $47
0002573F 144F                       	dc.b $14, $4F
00025741 5451                       	dc.b $54, $51
00025743 3457                       	dc.b $34, $57
00025745 045B                       	dc.b $4, $5B
00025747 05                         DPLC_b4ca_2C1: 	dc.b $5
00025748 745C                       	dc.b $74, $5C
0002574A 144F                       	dc.b $14, $4F
0002574C 5464                       	dc.b $54, $64
0002574E 3457                       	dc.b $34, $57
00025750 045B                       	dc.b $4, $5B
00025752 02                         DPLC_b4ca_2CC: 	dc.b $2
00025753 246A                       	dc.b $24, $6A
00025755 F46D                       	dc.b $F4, $6D
00025757 03                         DPLC_b4ca_2D1: 	dc.b $3
00025758 247D                       	dc.b $24, $7D
0002575A B480                       	dc.b $B4, $80
0002575C 248C                       	dc.b $24, $8C
0002575E 01                         DPLC_b4ca_2D8: 	dc.b $1
0002575F B48F                       	dc.b $B4, $8F
00025761 01                         DPLC_b4ca_2DB: 	dc.b $1
00025762 549B                       	dc.b $54, $9B
00025764 01                         DPLC_b4ca_2DE: 	dc.b $1
00025765 14A1                       	dc.b $14, $A1
00025767 02                         DPLC_b4ca_2E1: 	dc.b $2
00025768 E356                       	dc.b $E3, $56
0002576A 054A                       	dc.b $5, $4A
0002576C 03                         DPLC_b4ca_2E6: 	dc.b $3
0002576D 736E                       	dc.b $73, $6E
0002576F 0376                       	dc.b $3, $76
00025771 3377                       	dc.b $33, $77
00025773 03                         DPLC_b4ca_2ED: 	dc.b $3
00025774 B4A3                       	dc.b $B4, $A3
00025776 14AF                       	dc.b $14, $AF
00025778 34B1                       	dc.b $34, $B1
0002577A 03                         DPLC_b4ca_2F4: 	dc.b $3
0002577B 54B5                       	dc.b $54, $B5
0002577D B4BB                       	dc.b $B4, $BB
0002577F 1074                       	dc.b $10, $74
00025781 02                         DPLC_b4ca_2FB: 	dc.b $2
00025782 F4C7                       	dc.b $F4, $C7
00025784 24D7                       	dc.b $24, $D7
00025786 02                         DPLC_b4ca_300: 	dc.b $2
00025787 F4DA                       	dc.b $F4, $DA
00025789 14EA                       	dc.b $14, $EA
0002578B 02                         DPLC_b4ca_305: 	dc.b $2
0002578C F502                       	dc.b $F5, $2
0002578E 2512                       	dc.b $25, $12
00025790 02                         DPLC_b4ca_30A: 	dc.b $2
00025791 F515                       	dc.b $F5, $15
00025793 2525                       	dc.b $25, $25
00025795 02                         DPLC_b4ca_30F: 	dc.b $2
00025796 F54B                       	dc.b $F5, $4B
00025798 755B                       	dc.b $75, $5B
0002579A                            	even
0002579A                            	even
0002579A                            
0002579A                            ; ---------------------------------------------------------------------------
0002579A                            ; Uncompressed graphics	- Sonic
0002579A                            ; ---------------------------------------------------------------------------
0002579A                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0003057A                            		even
0003057A                            ; ---------------------------------------------------------------------------
0003057A                            ; Compressed graphics - various
0003057A                            ; ---------------------------------------------------------------------------
0003057A                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003067E                            		even
0003067E                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000306B8                            		even
000306B8                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0003084E                            		even
0003084E                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030996                            		even
00030996                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030AA0                            		even
00030AA0                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030AF2                            		even
00030AF2                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00030D3A                            		even
00030D3A                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030EC0                            		even
00030EC0                            ; ---------------------------------------------------------------------------
00030EC0                            ; Sprite mappings - walls of the special stage
00030EC0                            ; ---------------------------------------------------------------------------
00030EC0                            Map_SSWalls:
00030EC0                            	include "_maps\SSwalls.asm"
00030EC0                            ; ---------------------------------------------------------------------------
00030EC0                            ; Sprite mappings - walls of the special stage
00030EC0                            ; ---------------------------------------------------------------------------
00030EC0 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030EC4 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030EC8 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030ECC 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030ED0 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030ED4 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030ED8 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030EDC 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030EE0 01                         byte_2C584:	dc.b 1
00030EE1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030EE6 01                         byte_2C58A:	dc.b 1
00030EE7 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030EEC 01                         byte_2C590:	dc.b 1
00030EED F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030EF2 01                         byte_2C596:	dc.b 1
00030EF3 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030EF8 01                         byte_2C59C:	dc.b 1
00030EF9 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030EFE 01                         byte_2C5A2:	dc.b 1
00030EFF F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030F04 01                         byte_2C5A8:	dc.b 1
00030F05 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030F0A 01                         byte_2C5AE:	dc.b 1
00030F0B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030F10 01                         byte_2C5B4:	dc.b 1
00030F11 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030F16 01                         byte_2C5BA:	dc.b 1
00030F17 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030F1C 01                         byte_2C5C0:	dc.b 1
00030F1D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030F22 01                         byte_2C5C6:	dc.b 1
00030F23 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030F28 01                         byte_2C5CC:	dc.b 1
00030F29 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030F2E 01                         byte_2C5D2:	dc.b 1
00030F2F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030F34 01                         byte_2C5D8:	dc.b 1
00030F35 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030F3A 01                         byte_2C5DE:	dc.b 1
00030F3B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030F40                            		even
00030F40                            		even
00030F40                            ; ---------------------------------------------------------------------------
00030F40                            ; Compressed graphics - special stage
00030F40                            ; ---------------------------------------------------------------------------
00030F40                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031878                            		even
00031878                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000319C6                            		even
000319C6                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032E58                            		even
00032E58                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00033158                            		even
00033158                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003364C                            		even
0003364C                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003373A                            		even
0003373A                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003380A                            		even
0003380A                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033900                            		even
00033900                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003395E                            		even
0003395E                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000339F0                            		even
000339F0                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033AB2                            		even
00033AB2                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033B80                            		even
00033B80                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033C4C                            		even
00033C4C                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033D14                            		even
00033D14                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033DDE                            		even
00033DDE                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033EAE                            		even
00033EAE                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000340A2                            		even
000340A2                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003420A                            		even
0003420A                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000342BA                            		even
000342BA                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00034394                            		even
00034394                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00034418                            		even
00034418                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00034596                            		even
00034596                            ; ---------------------------------------------------------------------------
00034596                            ; Compressed graphics - GHZ stuff
00034596                            ; ---------------------------------------------------------------------------
00034596                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000345E0                            		even
000345E0                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000346FA                            		even
000346FA                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
000347E6                            		even
000347E6                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0003482E                            		even
0003482E                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000349CC                            		even
000349CC                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034A88                            		even
00034A88                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034C9C                            		even
00034C9C                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034DC8                            		even
00034DC8                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034EF6                            		even
00034EF6                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034F94                            		even
00034F94                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034FF4                            		even
00034FF4                            ; ---------------------------------------------------------------------------
00034FF4                            ; Compressed graphics - LZ stuff
00034FF4                            ; ---------------------------------------------------------------------------
00034FF4                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00035118                            		even
00035118                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003590C                            		even
0003590C                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035A8C                            		even
00035A8C                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035BF6                            		even
00035BF6                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003624C                            		even
0003624C                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036302                            		even
00036302                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000363A4                            		even
000363A4                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036500                            		even
00036500                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00036564                            		even
00036564                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000366B6                            		even
000366B6                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036B98                            		even
00036B98                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036D08                            		even
00036D08                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036FC0                            		even
00036FC0                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000370F8                            		even
000370F8                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037222                            		even
00037222                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037332                            		even
00037332                            ; ---------------------------------------------------------------------------
00037332                            ; Compressed graphics - MZ stuff
00037332                            ; ---------------------------------------------------------------------------
00037332                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
000375C0                            		even
000375C0                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0003767E                            		even
0003767E                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037736                            		even
00037736                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003778A                            		even
0003778A                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037A5C 00                         		even
00037A5C                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00038372                            		even
00038372                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000384D6                            		even
000384D6                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0003855E                            		even
0003855E                            ; ---------------------------------------------------------------------------
0003855E                            ; Compressed graphics - SLZ stuff
0003855E                            ; ---------------------------------------------------------------------------
0003855E                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003879A                            		even
0003879A                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
000388E0                            		even
000388E0                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038B24                            		even
00038B24                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038B86                            		even
00038B86                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038C68                            		even
00038C68                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038E4A                            		even
00038E4A                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038F56                            		even
00038F56                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038FFA                            		even
00038FFA                            ; ---------------------------------------------------------------------------
00038FFA                            ; Compressed graphics - SYZ stuff
00038FFA                            ; ---------------------------------------------------------------------------
00038FFA                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00039164                            		even
00039164                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000391C6                            		even
000391C6                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000392A8                            		even
000392A8                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039536                            		even
00039536                            ; ---------------------------------------------------------------------------
00039536                            ; Compressed graphics - SBZ stuff
00039536                            ; ---------------------------------------------------------------------------
00039536                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003958A                            		even
0003958A                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039826                            		even
00039826                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039A2A                            		even
00039A2A                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039BC8                            		even
00039BC8                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039EF8                            		even
00039EF8                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A0D6                            		even
0003A0D6                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A12E                            		even
0003A12E                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A2F8 00                         		even
0003A2F8                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A3F6                            		even
0003A3F6                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A582                            		even
0003A582                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A5D2                            		even
0003A5D2                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A62A                            		even
0003A62A                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A726                            		even
0003A726                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A83C                            		even
0003A83C                            ; ---------------------------------------------------------------------------
0003A83C                            ; Compressed graphics - enemies
0003A83C                            ; ---------------------------------------------------------------------------
0003A83C                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003ACAA 00                         		even
0003ACAA                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AE54 00                         		even
0003AE54                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B216 00                         		even
0003B216                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B3FE                            		even
0003B3FE                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B5B6 00                         		even
0003B5B6                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B700                            		even
0003B700                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B98A                            		even
0003B98A                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BFAE                            		even
0003BFAE                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C1A4                            		even
0003C1A4                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C7C2                            		even
0003C7C2                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CBC2 00                         		even
0003CBC2                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CEBE                            		even
0003CEBE                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D106                            		even
0003D106                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D39E                            		even
0003D39E                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D57C                            		even
0003D57C                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D70A                            		even
0003D70A                            ; ---------------------------------------------------------------------------
0003D70A                            ; Compressed graphics - various
0003D70A                            ; ---------------------------------------------------------------------------
0003D70A                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DC52 00                         		even
0003DC52                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DD48                            		even
0003DD48                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DE4E                            		even
0003DE4E                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DF42                            		even
0003DF42                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E486                            		even
0003E486                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EAEC                            		even
0003EAEC                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003EB9C                            		even
0003EB9C                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003ED2E                            		even
0003ED2E                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EE42                            		even
0003EE42                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003EF14                            		even
0003EF14                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F390                            		even
0003F390                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F450                            		even
0003F450                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F5C4                            		even
0003F5C4                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F8C6                            		even
0003F8C6                            ; ---------------------------------------------------------------------------
0003F8C6                            ; Compressed graphics - continue screen
0003F8C6                            ; ---------------------------------------------------------------------------
0003F8C6                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003FB76                            		even
0003FB76                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FDB0                            		even
0003FDB0                            ; ---------------------------------------------------------------------------
0003FDB0                            ; Compressed graphics - animals
0003FDB0                            ; ---------------------------------------------------------------------------
0003FDB0                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FF08                            		even
0003FF08                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00040064                            		even
00040064                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
000401E0                            		even
000401E0                            Nem_Seal:	incbin	artnem\seal.bin		; seal
000402FC                            		even
000402FC                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040432                            		even
00040432                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0004056C                            		even
0004056C                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000406C8                            		even
000406C8                            ; ---------------------------------------------------------------------------
000406C8                            ; Compressed graphics - primary patterns and block mappings
000406C8                            ; ---------------------------------------------------------------------------
000406C8                            Blk16_GHZ:	incbin	map16\ghz.bin
00040FDC                            		even
00040FDC                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
000428EA                            		even
000428EA                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043C6A                            		even
00043C6A                            Blk256_GHZ:	incbin	map256\ghz.bin
00045F68                            		even
00045F68                            Blk16_LZ:	incbin	map16\lz.bin
000466A2                            		even
000466A2                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048AA8                            		even
00048AA8                            Blk256_LZ:	incbin	map256\lz.bin
0004B428                            		even
0004B428                            Blk16_MZ:	incbin	map16\mz.bin
0004BB90                            		even
0004BB90                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E4CC                            		even
0004E4CC                            Blk256_MZ:	incbin	map256\mz.bin
0004FC70                            		even
0004FC70                            Blk16_SLZ:	incbin	map16\slz.bin
0005033A                            		even
0005033A                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005228E                            		even
0005228E                            Blk256_SLZ:	incbin	map256\slz.bin
00052908                            		even
00052908                            Blk16_SYZ:	incbin	map16\syz.bin
0005352E                            		even
0005352E                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057AC0                            		even
00057AC0                            Blk256_SYZ:	incbin	map256\syz.bin
00059B1C                            		even
00059B1C                            Blk16_SBZ:	incbin	map16\sbz.bin
0005AA64                            		even
0005AA64                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D428                            		even
0005D428                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FF1E                            		even
0005FF1E                            ; ---------------------------------------------------------------------------
0005FF1E                            ; Compressed graphics - bosses and ending sequence
0005FF1E                            ; ---------------------------------------------------------------------------
0005FF1E                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00060738 00                         		even
00060738                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00060D86                            		even
00060D86                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00060E00                            		even
00060E00                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000610EA                            		even
000610EA                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006196E                            		even
0006196E                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000626C4 00                         		even
000626C4                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00062E2C                            		even
00062E2C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000633AC                            		even
000633AC                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000634CC                            		even
000634CC                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000636CA                            		even
000636CA                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000648A8                            		even
000648A8                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000651EC                            		even
000651EC                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000655C2                            		even
000655C2                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00065B52                            		even
00065B52                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00065DDA                            		even
00065DDA                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000663C8 00                         		even
000663C8                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00066650                            		even
00066650                            		incbin	misc\padding2.bin
00066754                            		even
00066754                            ; ---------------------------------------------------------------------------
00066754                            ; Collision data
00066754                            ; ---------------------------------------------------------------------------
00066754                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00066854                            		even
00066854                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00067854                            		even
00067854                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00068854                            		even
00068854                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00068A0C 00                         		even
00068A0C                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00068B74                            		even
00068B74                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00068D04 00                         		even
00068D04                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00068EF8                            		even
00068EF8                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000690FE                            		even
000690FE                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006939C                            		even
0006939C                            ; ---------------------------------------------------------------------------
0006939C                            ; Special layouts
0006939C                            ; ---------------------------------------------------------------------------
0006939C                            SS_1:		incbin	sslayout\1.bin
000695E4                            		even
000695E4                            SS_2:		incbin	sslayout\2.bin
0006999C                            		even
0006999C                            SS_3:		incbin	sslayout\3.bin
00069CF8                            		even
00069CF8                            SS_4:		incbin	sslayout\4.bin
0006A1D2                            		even
0006A1D2                            SS_5:		incbin	sslayout\5.bin
0006A682                            		even
0006A682                            SS_6:		incbin	sslayout\6.bin
0006A974                            		even
0006A974                            ; ---------------------------------------------------------------------------
0006A974                            ; Animated uncompressed graphics
0006A974                            ; ---------------------------------------------------------------------------
0006A974                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006AB74                            		even
0006AB74                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006AF74                            		even
0006AF74                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006B3F4                            		even
0006B3F4                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006B6F4                            		even
0006B6F4                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006BCF4                            		even
0006BCF4                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006BFF4                            		even
0006BFF4                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006CA74                            		even
0006CA74                            
0006CA74                            ; ---------------------------------------------------------------------------
0006CA74                            ; Level	layout index
0006CA74                            ; ---------------------------------------------------------------------------
0006CA74 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006CA7A 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006CA80 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006CA86 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006CA8C 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006CA92 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006CA98 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006CA9E 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006CAA4 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006CAAA 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006CAB0 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006CAB6 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006CABC 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CAC2 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CAC8 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CACE 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006CAD4 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006CADA 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006CAE0 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006CAE6 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006CAEC 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006CAF2 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006CAF8 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006CAFE 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006CB04 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006CB0A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006CB10 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006CB16 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006CB1C                            
0006CB1C                            Level_GHZ1:	incbin	levels\ghz1.bin
0006CC0E                            		even
0006CC0E 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006CC12                            Level_GHZ2:	incbin	levels\ghz2.bin
0006CCDA                            		even
0006CCDA 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006CCDE                            Level_GHZ3:	incbin	levels\ghz3.bin
0006CE00                            		even
0006CE00                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006CE22                            		even
0006CE22 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006CE26 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006CE2A                            
0006CE2A                            Level_LZ1:	incbin	levels\lz1.bin
0006CF2C                            		even
0006CF2C                            Level_LZbg:	incbin	levels\lzbg.bin
0006D02E                            		even
0006D02E 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006D032                            Level_LZ2:	incbin	levels\lz2.bin
0006D0CC                            		even
0006D0CC 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006D0D0                            Level_LZ3:	incbin	levels\lz3.bin
0006D1EA                            		even
0006D1EA 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006D1EE                            Level_SBZ3:	incbin	levels\sbz3.bin
0006D2A8                            		even
0006D2A8 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006D2AC                            
0006D2AC                            Level_MZ1:	incbin	levels\mz1.bin
0006D34A                            		even
0006D34A                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006D3C4                            		even
0006D3C4                            Level_MZ2:	incbin	levels\mz2.bin
0006D468                            		even
0006D468                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006D4FA                            		even
0006D4FA 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006D4FE                            Level_MZ3:	incbin	levels\mz3.bin
0006D5E0                            		even
0006D5E0                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006D684 00                         		even
0006D684 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006D688 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006D68C                            
0006D68C                            Level_SLZ1:	incbin	levels\slz1.bin
0006D79E                            		even
0006D79E                            Level_SLZbg:	incbin	levels\slzbg.bin
0006D7B8                            		even
0006D7B8                            Level_SLZ2:	incbin	levels\slz2.bin
0006D8A8                            		even
0006D8A8                            Level_SLZ3:	incbin	levels\slz3.bin
0006D9C2                            		even
0006D9C2 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006D9C6                            
0006D9C6                            Level_SYZ1:	incbin	levels\syz1.bin
0006DA82 00                         		even
0006DA82                            Level_SYZbg:	incbin	levels\syzbg.bin
0006DABC                            		even
0006DABC 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006DAC0                            Level_SYZ2:	incbin	levels\syz2.bin
0006DBC4                            		even
0006DBC4 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006DBC8                            Level_SYZ3:	incbin	levels\syz3.bin
0006DD22 00                         		even
0006DD22 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006DD26 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006DD2A                            
0006DD2A                            Level_SBZ1:	incbin	levels\sbz1.bin
0006DE4C                            		even
0006DE4C                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006DE8A                            		even
0006DE8A                            Level_SBZ2:	incbin	levels\sbz2.bin
0006DFCC                            		even
0006DFCC                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006E136                            		even
0006E136 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006E13A 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006E13E                            Level_End:	incbin	levels\ending.bin
0006E16E 00                         		even
0006E16E 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006E172                            
0006E172                            ; ---------------------------------------------------------------------------
0006E172                            ; Animated uncompressed giant ring graphics
0006E172                            ; ---------------------------------------------------------------------------
0006E172                            Art_BigRing:	incbin	artunc\bigring.bin
0006EDB2                            		even
0006EDB2                            
0006EDB2                            		incbin	misc\padding3.bin
0006EE4E                            		even
0006EE4E                            
0006EE4E                            ; ---------------------------------------------------------------------------
0006EE4E                            ; Sprite locations index
0006EE4E                            ; ---------------------------------------------------------------------------
0006EE4E 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE52 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE56 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE5A 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE5E 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE62 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE66 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE6A 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE6E 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE72 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE76 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE7A 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE7E 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE82 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE86 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE8A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE8E 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE92 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE96 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE9A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EE9E 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EEA2 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EEA6 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EEAA 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EEAE 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EEB2 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EEB6 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EEBA 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EEBE 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006EEC2 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006EEC6 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006EECA 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006EECE 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006EED2 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006EED6 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006EEDA 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006EEDE FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006EEE4                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006F730                            		even
0006F730                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006F7E4                            		even
0006F7E4                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00070228                            		even
00070228                            ObjPos_LZ1:	incbin	objpos\lz1.bin
000705D0                            		even
000705D0                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00070906                            		even
00070906                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00070E1C                            		even
00070E1C                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000712B4                            		even
000712B4                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000712E6                            		even
000712E6                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00071318                            		even
00071318                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007134A                            		even
0007134A                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007137C                            		even
0007137C                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000713C6                            		even
000713C6                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00071404                            		even
00071404                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00071770                            		even
00071770                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00071C1A                            		even
00071C1A                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00072190                            		even
00072190                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000721BA                            		even
000721BA                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00072622                            		even
00072622                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00072C04                            		even
00072C04                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00073276                            		even
00073276                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000737E0                            		even
000737E0                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00073DE6                            		even
00073DE6                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00074524                            		even
00074524                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00074C02                            		even
00074C02                            ObjPos_FZ:	incbin	objpos\fz.bin
00074C14                            		even
00074C14                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00074C46                            		even
00074C46                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00074C78                            		even
00074C78                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00074CAA                            		even
00074CAA                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00074CDC                            		even
00074CDC                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00074D0E                            		even
00074D0E                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00074D46                            		even
00074D46                            ObjPos_End:	incbin	objpos\ending.bin
00074EA2                            		even
00074EA2 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00074EA8                            ; ---------------------------------------------------------------------------
00074EA8                            		incbin	misc\padding4.bin
000754D2                            		even
000754D2                            
000754D2 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000754D6 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000754DA 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000754DE 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000754E2 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000754E6 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000754EA                            ; ---------------------------------------------------------------------------
000754EA                            ; PSG instruments used in music
000754EA                            ; ---------------------------------------------------------------------------
000754EA 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000754F6 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00075502 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007550E                            PSG1:		incbin	sound\psg1.bin
00075525                            PSG2:		incbin	sound\psg2.bin
0007552C                            PSG3:		incbin	sound\psg3.bin
0007553D                            PSG4:		incbin	sound\psg4.bin
00075548                            PSG6:		incbin	sound\psg6.bin
00075557                            PSG5:		incbin	sound\psg5.bin
00075581                            PSG7:		incbin	sound\psg7.bin
0007559D                            PSG8:		incbin	sound\psg8.bin
000755C5                            PSG9:		incbin	sound\psg9.bin
000755D6                            
000755D6 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000755DE                            ; ---------------------------------------------------------------------------
000755DE                            ; Music	Pointers
000755DE                            ; ---------------------------------------------------------------------------
000755DE 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000755E6 0000 0000 0000 0000        		dc.l Music83, Music84
000755EE 0000 0000 0000 0000        		dc.l Music85, Music86
000755F6 0000 0000 0000 0000        		dc.l Music87, Music88
000755FE 0000 0000 0000 0000        		dc.l Music89, Music8A
00075606 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007560E 0000 0000 0000 0000        		dc.l Music8D, Music8E
00075616 0000 0000 0000 0000        		dc.l Music8F, Music90
0007561E 0000 0000 0000 0000        		dc.l Music91, Music92
00075626 0000 0000 0000 0000        		dc.l Music93, Music94
0007562E 0000 0000 0000 0000        		dc.l Music95, Music96
00075636 0000 0000 0000 0000        		dc.l Music97, Music98
0007563E 0000 0000 0000 0000        		dc.l Music99, Music9A
00075646 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007564E 0000 0000 0000 0000        		dc.l Music9D, Music9E
00075656 0000 0000                  		dc.l Music9F
0007565A                            ; ---------------------------------------------------------------------------
0007565A                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0007565A                            ; ---------------------------------------------------------------------------
0007565A 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007566A 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0007567A 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0007568A 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007569A 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000756AA 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000756BA 9090 9090                  		dc.b $90, $90, $90, $90
000756BE                            
000756BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756BE                            
000756BE                            
000756BE                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
000756BE 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000756C6 4E71                       		nop	
000756C8 4E71                       		nop	
000756CA 4E71                       		nop	
000756CC                            
000756CC                            loc_71B5A:
000756CC 0839 0000 00A1 1100        		btst	#0,($A11100).l
000756D4 66F6                       		bne.s	loc_71B5A
000756D6                            
000756D6 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
000756DE 6700                       		beq.s	loc_71B82
000756E0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000756E8 4E71                       		nop	
000756EA 4E71                       		nop	
000756EC 4E71                       		nop	
000756EE 4E71                       		nop	
000756F0 4E71                       		nop	
000756F2 60CA                       		bra.s	sub_71B4C
000756F4                            ; ===========================================================================
000756F4                            
000756F4                            loc_71B82:
000756F4 4DF9 00FF F000             		lea	($FFF000).l,a6
000756FA 422E 000E                  		clr.b	$E(a6)
000756FE 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00075702 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00075706 532E 0001                  		subq.b	#1,1(a6)
0007570A 6600                       		bne.s	loc_71B9E
0007570C 4EBA 0000                  		jsr	sub_7260C(pc)
00075710                            
00075710                            loc_71B9E:
00075710 102E 0004                  		move.b	4(a6),d0
00075714 6700                       		beq.s	loc_71BA8
00075716 4EBA 0000                  		jsr	sub_72504(pc)
0007571A                            
0007571A                            loc_71BA8:
0007571A 4A2E 0024                  		tst.b	$24(a6)
0007571E 6700                       		beq.s	loc_71BB2
00075720 4EBA 0000                  		jsr	sub_7267C(pc)
00075724                            
00075724                            loc_71BB2:
00075724 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00075728 6700                       		beq.s	loc_71BBC	; if not, branch
0007572A 4EBA 0000                  		jsr	Sound_Play(pc)
0007572E                            
0007572E                            loc_71BBC:
0007572E 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075734 6700                       		beq.s	loc_71BC8
00075736 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007573A                            
0007573A                            loc_71BC8:
0007573A 4BEE 0040                  		lea	$40(a6),a5
0007573E 4A15                       		tst.b	(a5)
00075740 6A00                       		bpl.s	loc_71BD4
00075742 4EBA 0000                  		jsr	sub_71C4E(pc)
00075746                            
00075746                            loc_71BD4:
00075746 422E 0008                  		clr.b	8(a6)
0007574A 7E05                       		moveq	#5,d7
0007574C                            
0007574C                            loc_71BDA:
0007574C DAFC 0030                  		adda.w	#$30,a5
00075750 4A15                       		tst.b	(a5)
00075752 6A00                       		bpl.s	loc_71BE6
00075754 4EBA 0000                  		jsr	sub_71CCA(pc)
00075758                            
00075758                            loc_71BE6:
00075758 51CF FFF2                  		dbf	d7,loc_71BDA
0007575C                            
0007575C 7E02                       		moveq	#2,d7
0007575E                            
0007575E                            loc_71BEC:
0007575E DAFC 0030                  		adda.w	#$30,a5
00075762 4A15                       		tst.b	(a5)
00075764 6A00                       		bpl.s	loc_71BF8
00075766 4EBA 0000                  		jsr	sub_72850(pc)
0007576A                            
0007576A                            loc_71BF8:
0007576A 51CF FFF2                  		dbf	d7,loc_71BEC
0007576E                            
0007576E 1D7C 0080 000E             		move.b	#$80,$E(a6)
00075774 7E02                       		moveq	#2,d7
00075776                            
00075776                            loc_71C04:
00075776 DAFC 0030                  		adda.w	#$30,a5
0007577A 4A15                       		tst.b	(a5)
0007577C 6A00                       		bpl.s	loc_71C10
0007577E 4EBA 0000                  		jsr	sub_71CCA(pc)
00075782                            
00075782                            loc_71C10:
00075782 51CF FFF2                  		dbf	d7,loc_71C04
00075786                            
00075786 7E02                       		moveq	#2,d7
00075788                            
00075788                            loc_71C16:
00075788 DAFC 0030                  		adda.w	#$30,a5
0007578C 4A15                       		tst.b	(a5)
0007578E 6A00                       		bpl.s	loc_71C22
00075790 4EBA 0000                  		jsr	sub_72850(pc)
00075794                            
00075794                            loc_71C22:
00075794 51CF FFF2                  		dbf	d7,loc_71C16
00075798 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007579E DAFC 0030                  		adda.w	#$30,a5
000757A2 4A15                       		tst.b	(a5)
000757A4 6A00                       		bpl.s	loc_71C38
000757A6 4EBA 0000                  		jsr	sub_71CCA(pc)
000757AA                            
000757AA                            loc_71C38:
000757AA DAFC 0030                  		adda.w	#$30,a5
000757AE 4A15                       		tst.b	(a5)
000757B0 6A00                       		bpl.s	loc_71C44
000757B2 4EBA 0000                  		jsr	sub_72850(pc)
000757B6                            
000757B6                            loc_71C44:
000757B6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000757BE 4E75                       		rts	
000757C0                            ; End of function sub_71B4C
000757C0                            
000757C0                            
000757C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000757C0                            
000757C0                            
000757C0                            sub_71C4E:				; XREF: sub_71B4C
000757C0 532D 000E                  		subq.b	#1,$E(a5)
000757C4 6600                       		bne.s	locret_71CAA
000757C6 1D7C 0080 0008             		move.b	#$80,8(a6)
000757CC 286D 0004                  		movea.l	4(a5),a4
000757D0                            
000757D0                            loc_71C5E:
000757D0 7A00                       		moveq	#0,d5
000757D2 1A1C                       		move.b	(a4)+,d5
000757D4 0C05 00E0                  		cmpi.b	#-$20,d5
000757D8 6500                       		bcs.s	loc_71C6E
000757DA 4EBA 0000                  		jsr	sub_72A5A(pc)
000757DE 60F0                       		bra.s	loc_71C5E
000757E0                            ; ===========================================================================
000757E0                            
000757E0                            loc_71C6E:
000757E0 4A05                       		tst.b	d5
000757E2 6A00                       		bpl.s	loc_71C84
000757E4 1B45 0010                  		move.b	d5,$10(a5)
000757E8 1A1C                       		move.b	(a4)+,d5
000757EA 6A00                       		bpl.s	loc_71C84
000757EC 534C                       		subq.w	#1,a4
000757EE 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000757F4 6000                       		bra.s	loc_71C88
000757F6                            ; ===========================================================================
000757F6                            
000757F6                            loc_71C84:
000757F6 4EBA 0000                  		jsr	sub_71D40(pc)
000757FA                            
000757FA                            loc_71C88:
000757FA 2B4C 0004                  		move.l	a4,4(a5)
000757FE 0815 0002                  		btst	#2,(a5)
00075802 6600                       		bne.s	locret_71CAA
00075804 7000                       		moveq	#0,d0
00075806 102D 0010                  		move.b	$10(a5),d0
0007580A 0C00 0080                  		cmpi.b	#$80,d0
0007580E 6700                       		beq.s	locret_71CAA
00075810 0800 0003                  		btst	#3,d0
00075814 6600                       		bne.s	loc_71CAC
00075816 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007581C                            
0007581C                            locret_71CAA:
0007581C 4E75                       		rts	
0007581E                            ; ===========================================================================
0007581E                            
0007581E                            loc_71CAC:
0007581E 0400 0088                  		subi.b	#$88,d0
00075822 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00075826 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007582C 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00075834 4E75                       		rts	
00075836                            ; End of function sub_71C4E
00075836                            
00075836                            ; ===========================================================================
00075836 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007583C                            
0007583C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007583C                            
0007583C                            
0007583C                            sub_71CCA:				; XREF: sub_71B4C
0007583C 532D 000E                  		subq.b	#1,$E(a5)
00075840 6600                       		bne.s	loc_71CE0
00075842 0895 0004                  		bclr	#4,(a5)
00075846 4EBA 0000                  		jsr	sub_71CEC(pc)
0007584A 4EBA 0000                  		jsr	sub_71E18(pc)
0007584E 6000 0000                  		bra.w	loc_726E2
00075852                            ; ===========================================================================
00075852                            
00075852                            loc_71CE0:
00075852 4EBA 0000                  		jsr	sub_71D9E(pc)
00075856 4EBA 0000                  		jsr	sub_71DC6(pc)
0007585A 6000 0000                  		bra.w	loc_71E24
0007585E                            ; End of function sub_71CCA
0007585E                            
0007585E                            
0007585E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007585E                            
0007585E                            
0007585E                            sub_71CEC:				; XREF: sub_71CCA
0007585E 286D 0004                  		movea.l	4(a5),a4
00075862 0895 0001                  		bclr	#1,(a5)
00075866                            
00075866                            loc_71CF4:
00075866 7A00                       		moveq	#0,d5
00075868 1A1C                       		move.b	(a4)+,d5
0007586A 0C05 00E0                  		cmpi.b	#-$20,d5
0007586E 6500                       		bcs.s	loc_71D04
00075870 4EBA 0000                  		jsr	sub_72A5A(pc)
00075874 60F0                       		bra.s	loc_71CF4
00075876                            ; ===========================================================================
00075876                            
00075876                            loc_71D04:
00075876 4EBA 0000                  		jsr	sub_726FE(pc)
0007587A 4A05                       		tst.b	d5
0007587C 6A00                       		bpl.s	loc_71D1A
0007587E 4EBA 0000                  		jsr	sub_71D22(pc)
00075882 1A1C                       		move.b	(a4)+,d5
00075884 6A00                       		bpl.s	loc_71D1A
00075886 534C                       		subq.w	#1,a4
00075888 6000 0000                  		bra.w	sub_71D60
0007588C                            ; ===========================================================================
0007588C                            
0007588C                            loc_71D1A:
0007588C 4EBA 0000                  		jsr	sub_71D40(pc)
00075890 6000 0000                  		bra.w	sub_71D60
00075894                            ; End of function sub_71CEC
00075894                            
00075894                            
00075894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075894                            
00075894                            
00075894                            sub_71D22:				; XREF: sub_71CEC
00075894 0405 0080                  		subi.b	#$80,d5
00075898 6700                       		beq.s	loc_71D58
0007589A DA2D 0008                  		add.b	8(a5),d5
0007589E 0245 007F                  		andi.w	#$7F,d5
000758A2 E34D                       		lsl.w	#1,d5
000758A4 41FA 0000                  		lea	word_72790(pc),a0
000758A8 3C30 5000                  		move.w	(a0,d5.w),d6
000758AC 3B46 0010                  		move.w	d6,$10(a5)
000758B0 4E75                       		rts	
000758B2                            ; End of function sub_71D22
000758B2                            
000758B2                            
000758B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758B2                            
000758B2                            
000758B2                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000758B2 1005                       		move.b	d5,d0
000758B4 122D 0002                  		move.b	2(a5),d1
000758B8                            
000758B8                            loc_71D46:
000758B8 5301                       		subq.b	#1,d1
000758BA 6700                       		beq.s	loc_71D4E
000758BC D005                       		add.b	d5,d0
000758BE 60F8                       		bra.s	loc_71D46
000758C0                            ; ===========================================================================
000758C0                            
000758C0                            loc_71D4E:
000758C0 1B40 000F                  		move.b	d0,$F(a5)
000758C4 1B40 000E                  		move.b	d0,$E(a5)
000758C8 4E75                       		rts	
000758CA                            ; End of function sub_71D40
000758CA                            
000758CA                            ; ===========================================================================
000758CA                            
000758CA                            loc_71D58:				; XREF: sub_71D22
000758CA 08D5 0001                  		bset	#1,(a5)
000758CE 426D 0010                  		clr.w	$10(a5)
000758D2                            
000758D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758D2                            
000758D2                            
000758D2                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000758D2 2B4C 0004                  		move.l	a4,4(a5)
000758D6 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000758DC 0815 0004                  		btst	#4,(a5)
000758E0 6600                       		bne.s	locret_71D9C
000758E2 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000758E8 422D 000C                  		clr.b	$C(a5)
000758EC 0815 0003                  		btst	#3,(a5)
000758F0 6700                       		beq.s	locret_71D9C
000758F2 206D 0014                  		movea.l	$14(a5),a0
000758F6 1B58 0018                  		move.b	(a0)+,$18(a5)
000758FA 1B58 0019                  		move.b	(a0)+,$19(a5)
000758FE 1B58 001A                  		move.b	(a0)+,$1A(a5)
00075902 1018                       		move.b	(a0)+,d0
00075904 E208                       		lsr.b	#1,d0
00075906 1B40 001B                  		move.b	d0,$1B(a5)
0007590A 426D 001C                  		clr.w	$1C(a5)
0007590E                            
0007590E                            locret_71D9C:
0007590E 4E75                       		rts	
00075910                            ; End of function sub_71D60
00075910                            
00075910                            
00075910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075910                            
00075910                            
00075910                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00075910 4A2D 0012                  		tst.b	$12(a5)
00075914 6700                       		beq.s	locret_71DC4
00075916 532D 0012                  		subq.b	#1,$12(a5)
0007591A 6600                       		bne.s	locret_71DC4
0007591C 08D5 0001                  		bset	#1,(a5)
00075920 4A2D 0001                  		tst.b	1(a5)
00075924 6B00 0000                  		bmi.w	loc_71DBE
00075928 4EBA 0000                  		jsr	sub_726FE(pc)
0007592C 584F                       		addq.w	#4,sp
0007592E 4E75                       		rts	
00075930                            ; ===========================================================================
00075930                            
00075930                            loc_71DBE:
00075930 4EBA 0000                  		jsr	sub_729A0(pc)
00075934 584F                       		addq.w	#4,sp
00075936                            
00075936                            locret_71DC4:
00075936 4E75                       		rts	
00075938                            ; End of function sub_71D9E
00075938                            
00075938                            
00075938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075938                            
00075938                            
00075938                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00075938 584F                       		addq.w	#4,sp
0007593A 0815 0003                  		btst	#3,(a5)
0007593E 6700                       		beq.s	locret_71E16
00075940 4A2D 0018                  		tst.b	$18(a5)
00075944 6700                       		beq.s	loc_71DDA
00075946 532D 0018                  		subq.b	#1,$18(a5)
0007594A 4E75                       		rts	
0007594C                            ; ===========================================================================
0007594C                            
0007594C                            loc_71DDA:
0007594C 532D 0019                  		subq.b	#1,$19(a5)
00075950 6700                       		beq.s	loc_71DE2
00075952 4E75                       		rts	
00075954                            ; ===========================================================================
00075954                            
00075954                            loc_71DE2:
00075954 206D 0014                  		movea.l	$14(a5),a0
00075958 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007595E 4A2D 001B                  		tst.b	$1B(a5)
00075962 6600                       		bne.s	loc_71DFE
00075964 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007596A 442D 001A                  		neg.b	$1A(a5)
0007596E 4E75                       		rts	
00075970                            ; ===========================================================================
00075970                            
00075970                            loc_71DFE:
00075970 532D 001B                  		subq.b	#1,$1B(a5)
00075974 1C2D 001A                  		move.b	$1A(a5),d6
00075978 4886                       		ext.w	d6
0007597A DC6D 001C                  		add.w	$1C(a5),d6
0007597E 3B46 001C                  		move.w	d6,$1C(a5)
00075982 DC6D 0010                  		add.w	$10(a5),d6
00075986 594F                       		subq.w	#4,sp
00075988                            
00075988                            locret_71E16:
00075988 4E75                       		rts	
0007598A                            ; End of function sub_71DC6
0007598A                            
0007598A                            
0007598A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007598A                            
0007598A                            
0007598A                            sub_71E18:				; XREF: sub_71CCA
0007598A 0815 0001                  		btst	#1,(a5)
0007598E 6600                       		bne.s	locret_71E48
00075990 3C2D 0010                  		move.w	$10(a5),d6
00075994 6700                       		beq.s	loc_71E4A
00075996                            
00075996                            loc_71E24:				; XREF: sub_71CCA
00075996 102D 001E                  		move.b	$1E(a5),d0
0007599A 4880                       		ext.w	d0
0007599C DC40                       		add.w	d0,d6
0007599E 0815 0002                  		btst	#2,(a5)
000759A2 6600                       		bne.s	locret_71E48
000759A4 3206                       		move.w	d6,d1
000759A6 E049                       		lsr.w	#8,d1
000759A8 103C 00A4                  		move.b	#-$5C,d0
000759AC 4EBA 0000                  		jsr	sub_72722(pc)
000759B0 1206                       		move.b	d6,d1
000759B2 103C 00A0                  		move.b	#-$60,d0
000759B6 4EBA 0000                  		jsr	sub_72722(pc)
000759BA                            
000759BA                            locret_71E48:
000759BA 4E75                       		rts	
000759BC                            ; ===========================================================================
000759BC                            
000759BC                            loc_71E4A:
000759BC 08D5 0001                  		bset	#1,(a5)
000759C0 4E75                       		rts	
000759C2                            ; End of function sub_71E18
000759C2                            
000759C2                            ; ===========================================================================
000759C2                            
000759C2                            loc_71E50:				; XREF: sub_71B4C
000759C2 6B00                       		bmi.s	loc_71E94
000759C4 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000759CA 6700 0000                  		beq.w	loc_71EFE
000759CE 1D7C 0002 0003             		move.b	#2,3(a6)
000759D4 7602                       		moveq	#2,d3
000759D6 103C 00B4                  		move.b	#-$4C,d0
000759DA 7200                       		moveq	#0,d1
000759DC                            
000759DC                            loc_71E6A:
000759DC 4EBA 0000                  		jsr	sub_7272E(pc)
000759E0 4EBA 0000                  		jsr	sub_72764(pc)
000759E4 5200                       		addq.b	#1,d0
000759E6 51CB FFF4                  		dbf	d3,loc_71E6A
000759EA                            
000759EA 7602                       		moveq	#2,d3
000759EC 7028                       		moveq	#$28,d0
000759EE                            
000759EE                            loc_71E7C:
000759EE 1203                       		move.b	d3,d1
000759F0 4EBA 0000                  		jsr	sub_7272E(pc)
000759F4 5801                       		addq.b	#4,d1
000759F6 4EBA 0000                  		jsr	sub_7272E(pc)
000759FA 51CB FFF2                  		dbf	d3,loc_71E7C
000759FE                            
000759FE 4EBA 0000                  		jsr	sub_729B6(pc)
00075A02 6000 FDB2                  		bra.w	loc_71C44
00075A06                            ; ===========================================================================
00075A06                            
00075A06                            loc_71E94:				; XREF: loc_71E50
00075A06 422E 0003                  		clr.b	3(a6)
00075A0A 7630                       		moveq	#$30,d3
00075A0C 4BEE 0040                  		lea	$40(a6),a5
00075A10 7806                       		moveq	#6,d4
00075A12                            
00075A12                            loc_71EA0:
00075A12 0815 0007                  		btst	#7,(a5)
00075A16 6700                       		beq.s	loc_71EB8
00075A18 0815 0002                  		btst	#2,(a5)
00075A1C 6600                       		bne.s	loc_71EB8
00075A1E 103C 00B4                  		move.b	#-$4C,d0
00075A22 122D 000A                  		move.b	$A(a5),d1
00075A26 4EBA 0000                  		jsr	sub_72722(pc)
00075A2A                            
00075A2A                            loc_71EB8:
00075A2A DAC3                       		adda.w	d3,a5
00075A2C 51CC FFE4                  		dbf	d4,loc_71EA0
00075A30                            
00075A30 4BEE 0220                  		lea	$220(a6),a5
00075A34 7802                       		moveq	#2,d4
00075A36                            
00075A36                            loc_71EC4:
00075A36 0815 0007                  		btst	#7,(a5)
00075A3A 6700                       		beq.s	loc_71EDC
00075A3C 0815 0002                  		btst	#2,(a5)
00075A40 6600                       		bne.s	loc_71EDC
00075A42 103C 00B4                  		move.b	#-$4C,d0
00075A46 122D 000A                  		move.b	$A(a5),d1
00075A4A 4EBA 0000                  		jsr	sub_72722(pc)
00075A4E                            
00075A4E                            loc_71EDC:
00075A4E DAC3                       		adda.w	d3,a5
00075A50 51CC FFE4                  		dbf	d4,loc_71EC4
00075A54                            
00075A54 4BEE 0340                  		lea	$340(a6),a5
00075A58 0815 0007                  		btst	#7,(a5)
00075A5C 6700                       		beq.s	loc_71EFE
00075A5E 0815 0002                  		btst	#2,(a5)
00075A62 6600                       		bne.s	loc_71EFE
00075A64 103C 00B4                  		move.b	#-$4C,d0
00075A68 122D 000A                  		move.b	$A(a5),d1
00075A6C 4EBA 0000                  		jsr	sub_72722(pc)
00075A70                            
00075A70                            loc_71EFE:
00075A70 6000 FD44                  		bra.w	loc_71C44
00075A74                            
00075A74                            ; ---------------------------------------------------------------------------
00075A74                            ; Subroutine to	play a sound or	music track
00075A74                            ; ---------------------------------------------------------------------------
00075A74                            
00075A74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A74                            
00075A74                            
00075A74                            Sound_Play:				; XREF: sub_71B4C
00075A74 2079 0007 54D2             		movea.l	(Go_SoundTypes).l,a0
00075A7A 43EE 000A                  		lea	$A(a6),a1	; load music track number
00075A7E 1616                       		move.b	0(a6),d3
00075A80 7802                       		moveq	#2,d4
00075A82                            
00075A82                            loc_71F12:
00075A82 1011                       		move.b	(a1),d0		; move track number to d0
00075A84 1200                       		move.b	d0,d1
00075A86 4219                       		clr.b	(a1)+
00075A88 0400 0081                  		subi.b	#$81,d0
00075A8C 6500                       		bcs.s	loc_71F3E
00075A8E 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075A94 6700                       		beq.s	loc_71F2C
00075A96 1D41 000A                  		move.b	d1,$A(a6)
00075A9A 6000                       		bra.s	loc_71F3E
00075A9C                            ; ===========================================================================
00075A9C                            
00075A9C                            loc_71F2C:
00075A9C 0240 007F                  		andi.w	#$7F,d0
00075AA0 1430 0000                  		move.b	(a0,d0.w),d2
00075AA4 B403                       		cmp.b	d3,d2
00075AA6 6500                       		bcs.s	loc_71F3E
00075AA8 1602                       		move.b	d2,d3
00075AAA 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00075AAE                            
00075AAE                            loc_71F3E:
00075AAE 51CC FFD2                  		dbf	d4,loc_71F12
00075AB2                            
00075AB2 4A03                       		tst.b	d3
00075AB4 6B00                       		bmi.s	locret_71F4A
00075AB6 1C83                       		move.b	d3,0(a6)
00075AB8                            
00075AB8                            locret_71F4A:
00075AB8 4E75                       		rts	
00075ABA                            ; End of function Sound_Play
00075ABA                            
00075ABA                            
00075ABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075ABA                            
00075ABA                            
00075ABA                            Sound_ChkValue:				; XREF: sub_71B4C
00075ABA 7E00                       		moveq	#0,d7
00075ABC 1E2E 0009                  		move.b	9(a6),d7
00075AC0 6700 0000                  		beq.w	Sound_E4
00075AC4 6A00                       		bpl.s	locret_71F8C
00075AC6 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00075ACC 0C07 009F                  		cmpi.b	#$9F,d7
00075AD0 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00075AD4 0C07 00A0                  		cmpi.b	#$A0,d7
00075AD8 6500 0000                  		bcs.w	locret_71F8C
00075ADC 0C07 00CF                  		cmpi.b	#$CF,d7
00075AE0 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00075AE4 0C07 00D0                  		cmpi.b	#$D0,d7
00075AE8 6500 0000                  		bcs.w	locret_71F8C
00075AEC 0C07 00E0                  		cmpi.b	#$E0,d7
00075AF0 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00075AF4 0C07 00E5                  		cmpi.b	#$E5,d7
00075AF8 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
00075AFA                            
00075AFA                            locret_71F8C:
00075AFA 4E75                       		rts	
00075AFC                            ; ===========================================================================
00075AFC                            
00075AFC                            Sound_E0toE5				; XREF: Sound_ChkValue
00075AFC 0407 00E0                  		subi.b	#$E0,d7
00075B00 E54F                       		lsl.w	#2,d7
00075B02 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00075B06                            ; ===========================================================================
00075B06                            
00075B06                            Sound_ExIndex:
00075B06 6000 0000                  		bra.w	Sound_E0
00075B0A                            ; ===========================================================================
00075B0A 6000 0000                  		bra.w	Sound_E1
00075B0E                            ; ===========================================================================
00075B0E 6000 0000                  		bra.w	Sound_E2
00075B12                            ; ===========================================================================
00075B12 6000 0000                  		bra.w	Sound_E3
00075B16                            ; ===========================================================================
00075B16 6000 0000                  		bra.w	Sound_E4
00075B1A                            ; ===========================================================================
00075B1A 6000 0000                  		bra.w	Sound_E5
00075B1E                            ; ===========================================================================
00075B1E                            ; ---------------------------------------------------------------------------
00075B1E                            ; Play "Say-gaa" PCM sound
00075B1E                            ; ---------------------------------------------------------------------------
00075B1E                            
00075B1E                            Sound_E1:				  
00075B1E 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075B24 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00075B2A 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075B32                            PlayPCM_Loop:	  
00075B32 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075B38 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00075B3C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00075B40 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075B42 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00075B44 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00075B48 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00075B4E 4EB8 1418                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00075B52 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00075B58 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075B5A 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075B5C                            return_PlayPCM: 
00075B5C 584F                       		addq.w	#4,sp 
00075B5E 4E75                       		rts
00075B60                            		
00075B60                            ; ---------------------------------------------------------------------------
00075B60                            ; Play you are an idiot pcm sound
00075B60                            ; since the sfx already crashes the game forever load it here :V
00075B60                            ; ---------------------------------------------------------------------------
00075B60                            
00075B60                            Sound_E5: 
00075B60 4EB8 14E8                  		jsr	ClearScreen
00075B64                            		;control port on a5
00075B64 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00075B6A 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
00075B70 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
00075B74 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00075B78 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00075B7C                            		
00075B7C 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
00075B80                            		
00075B80 2ABC 4000 0000             		move.l	#$40000000,(a5)
00075B86 41F9 0002 4220             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00075B8C 4EB8 1664                  		jsr	NemDec
00075B90 43F9 00FF 0000             		lea	($FF0000).l,a1
00075B96 41F9 0002 41C2             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00075B9C 303C 0000                  		move.w	#0,d0
00075BA0 4EB8 1942                  		jsr	EniDec
00075BA4 43F9 00FF 0000             		lea	($FF0000).l,a1
00075BAA 203C 4304 0003             		move.l	#$43040003,d0
00075BB0 7223                       		moveq	#35,d1
00075BB2 740D                       		moveq	#13,d2
00075BB4 4EB8 1644                  		jsr	ShowVDPGraphics
00075BB8 7014                       		moveq	#20,d0
00075BBA 4EB8 2302                  		jsr	PalLoad2	; load pallet
00075BBE                            		
00075BBE                            Sound_E5_StartPCM:
00075BBE 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075BC4 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00075BCA 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075BD2                            PlayPCM_LoopE5:	  
00075BD2                            
00075BD2 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075BD8                            		
00075BD8 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00075BDC                            		
00075BDC 1038 FE24                  		move.b	($FFFFFE24).w,d0
00075BE0 0200 000F                  		andi.b	#$F,d0
00075BE4 6700                       		beq.s	SfxE5SwapPalette
00075BE6                            		
00075BE6 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00075BEA 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00075BEE 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075BF0 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
00075BF2 60DE                       		bra.s	PlayPCM_LoopE5
00075BF4                            		
00075BF4                            SfxE5SwapPalette:
00075BF4                            		
00075BF4 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00075BFA                            		
00075BFA                            		
00075BFA 0838 0004 FE24             		btst	#4,($FFFFFE24).w
00075C00 6700                       		beq.s	@not_black
00075C02 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00075C08 6000                       		bra.s	@merge
00075C0A                            	@not_black:
00075C0A 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00075C10                            	@merge:
00075C10 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00075C14 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00075C18 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00075C1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00075C22                            		
00075C22 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00075C26 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00075C2A 60A6                       		bra.s	PlayPCM_LoopE5
00075C2C                            		
00075C2C                            ; ===========================================================================
00075C2C                            ; ---------------------------------------------------------------------------
00075C2C                            ; Play music track $81-$9F
00075C2C                            ; ---------------------------------------------------------------------------
00075C2C                            
00075C2C                            Sound_81to9F:				; XREF: Sound_ChkValue
00075C2C 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00075C30 6600                       		bne.s	loc_72024	; if not, branch
00075C32 4A2E 0027                  		tst.b	$27(a6)
00075C36 6600 0000                  		bne.w	loc_721B6
00075C3A 4BEE 0040                  		lea	$40(a6),a5
00075C3E 7009                       		moveq	#9,d0
00075C40                            
00075C40                            loc_71FE6:
00075C40 0895 0002                  		bclr	#2,(a5)
00075C44 DAFC 0030                  		adda.w	#$30,a5
00075C48 51C8 FFF6                  		dbf	d0,loc_71FE6
00075C4C                            
00075C4C 4BEE 0220                  		lea	$220(a6),a5
00075C50 7005                       		moveq	#5,d0
00075C52                            
00075C52                            loc_71FF8:
00075C52 0895 0007                  		bclr	#7,(a5)
00075C56 DAFC 0030                  		adda.w	#$30,a5
00075C5A 51C8 FFF6                  		dbf	d0,loc_71FF8
00075C5E 4216                       		clr.b	0(a6)
00075C60 204E                       		movea.l	a6,a0
00075C62 43EE 03A0                  		lea	$3A0(a6),a1
00075C66 303C 0087                  		move.w	#$87,d0
00075C6A                            
00075C6A                            loc_72012:
00075C6A 22D8                       		move.l	(a0)+,(a1)+
00075C6C 51C8 FFFC                  		dbf	d0,loc_72012
00075C70                            
00075C70 1D7C 0080 0027             		move.b	#$80,$27(a6)
00075C76 4216                       		clr.b	0(a6)
00075C78 6000                       		bra.s	loc_7202C
00075C7A                            ; ===========================================================================
00075C7A                            
00075C7A                            loc_72024:
00075C7A 422E 0027                  		clr.b	$27(a6)
00075C7E 422E 0026                  		clr.b	$26(a6)
00075C82                            
00075C82                            loc_7202C:
00075C82 4EBA 0000                  		jsr	sub_725CA(pc)
00075C86 2879 0007 54E2             		movea.l	(off_719A0).l,a4
00075C8C 0407 0081                  		subi.b	#$81,d7
00075C90 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00075C96 2879 0007 54DA             		movea.l	(Go_MusicIndex).l,a4
00075C9C E54F                       		lsl.w	#2,d7
00075C9E 2874 7000                  		movea.l	(a4,d7.w),a4
00075CA2 7000                       		moveq	#0,d0
00075CA4 3014                       		move.w	(a4),d0
00075CA6 D08C                       		add.l	a4,d0
00075CA8 2D40 0018                  		move.l	d0,$18(a6)
00075CAC 102C 0005                  		move.b	5(a4),d0
00075CB0 1D40 0028                  		move.b	d0,$28(a6)
00075CB4 4A2E 002A                  		tst.b	$2A(a6)
00075CB8 6700                       		beq.s	loc_72068
00075CBA 102E 0029                  		move.b	$29(a6),d0
00075CBE                            
00075CBE                            loc_72068:
00075CBE 1D40 0002                  		move.b	d0,2(a6)
00075CC2 1D40 0001                  		move.b	d0,1(a6)
00075CC6 7200                       		moveq	#0,d1
00075CC8 264C                       		movea.l	a4,a3
00075CCA 5C4C                       		addq.w	#6,a4
00075CCC 7E00                       		moveq	#0,d7
00075CCE 1E2B 0002                  		move.b	2(a3),d7
00075CD2 6700 0000                  		beq.w	loc_72114
00075CD6 5307                       		subq.b	#1,d7
00075CD8 123C 00C0                  		move.b	#-$40,d1
00075CDC 182B 0004                  		move.b	4(a3),d4
00075CE0 7C30                       		moveq	#$30,d6
00075CE2 1A3C 0001                  		move.b	#1,d5
00075CE6 43EE 0040                  		lea	$40(a6),a1
00075CEA 45FA 0000                  		lea	byte_721BA(pc),a2
00075CEE                            
00075CEE                            loc_72098:
00075CEE 08D1 0007                  		bset	#7,(a1)
00075CF2 135A 0001                  		move.b	(a2)+,1(a1)
00075CF6 1344 0002                  		move.b	d4,2(a1)
00075CFA 1346 000D                  		move.b	d6,$D(a1)
00075CFE 1341 000A                  		move.b	d1,$A(a1)
00075D02 1345 000E                  		move.b	d5,$E(a1)
00075D06 7000                       		moveq	#0,d0
00075D08 301C                       		move.w	(a4)+,d0
00075D0A D08B                       		add.l	a3,d0
00075D0C 2340 0004                  		move.l	d0,4(a1)
00075D10 335C 0008                  		move.w	(a4)+,8(a1)
00075D14 D2C6                       		adda.w	d6,a1
00075D16 51CF FFD6                  		dbf	d7,loc_72098
00075D1A 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00075D20 6600                       		bne.s	loc_720D8
00075D22 702B                       		moveq	#$2B,d0
00075D24 7200                       		moveq	#0,d1
00075D26 4EBA 0000                  		jsr	sub_7272E(pc)
00075D2A 6000 0000                  		bra.w	loc_72114
00075D2E                            ; ===========================================================================
00075D2E                            
00075D2E                            loc_720D8:
00075D2E 7028                       		moveq	#$28,d0
00075D30 7206                       		moveq	#6,d1
00075D32 4EBA 0000                  		jsr	sub_7272E(pc)
00075D36 103C 0042                  		move.b	#$42,d0
00075D3A 727F                       		moveq	#$7F,d1
00075D3C 4EBA 0000                  		jsr	sub_72764(pc)
00075D40 103C 004A                  		move.b	#$4A,d0
00075D44 727F                       		moveq	#$7F,d1
00075D46 4EBA 0000                  		jsr	sub_72764(pc)
00075D4A 103C 0046                  		move.b	#$46,d0
00075D4E 727F                       		moveq	#$7F,d1
00075D50 4EBA 0000                  		jsr	sub_72764(pc)
00075D54 103C 004E                  		move.b	#$4E,d0
00075D58 727F                       		moveq	#$7F,d1
00075D5A 4EBA 0000                  		jsr	sub_72764(pc)
00075D5E 103C 00B6                  		move.b	#-$4A,d0
00075D62 123C 00C0                  		move.b	#-$40,d1
00075D66 4EBA 0000                  		jsr	sub_72764(pc)
00075D6A                            
00075D6A                            loc_72114:
00075D6A 7E00                       		moveq	#0,d7
00075D6C 1E2B 0003                  		move.b	3(a3),d7
00075D70 6700                       		beq.s	loc_72154
00075D72 5307                       		subq.b	#1,d7
00075D74 43EE 0190                  		lea	$190(a6),a1
00075D78 45FA 0000                  		lea	byte_721C2(pc),a2
00075D7C                            
00075D7C                            loc_72126:
00075D7C 08D1 0007                  		bset	#7,(a1)
00075D80 135A 0001                  		move.b	(a2)+,1(a1)
00075D84 1344 0002                  		move.b	d4,2(a1)
00075D88 1346 000D                  		move.b	d6,$D(a1)
00075D8C 1345 000E                  		move.b	d5,$E(a1)
00075D90 7000                       		moveq	#0,d0
00075D92 301C                       		move.w	(a4)+,d0
00075D94 D08B                       		add.l	a3,d0
00075D96 2340 0004                  		move.l	d0,4(a1)
00075D9A 335C 0008                  		move.w	(a4)+,8(a1)
00075D9E 101C                       		move.b	(a4)+,d0
00075DA0 135C 000B                  		move.b	(a4)+,$B(a1)
00075DA4 D2C6                       		adda.w	d6,a1
00075DA6 51CF FFD4                  		dbf	d7,loc_72126
00075DAA                            
00075DAA                            loc_72154:
00075DAA 43EE 0220                  		lea	$220(a6),a1
00075DAE 7E05                       		moveq	#5,d7
00075DB0                            
00075DB0                            loc_7215A:
00075DB0 4A11                       		tst.b	(a1)
00075DB2 6A00 0000                  		bpl.w	loc_7217C
00075DB6 7000                       		moveq	#0,d0
00075DB8 1029 0001                  		move.b	1(a1),d0
00075DBC 6B00                       		bmi.s	loc_7216E
00075DBE 5500                       		subq.b	#2,d0
00075DC0 E508                       		lsl.b	#2,d0
00075DC2 6000                       		bra.s	loc_72170
00075DC4                            ; ===========================================================================
00075DC4                            
00075DC4                            loc_7216E:
00075DC4 E608                       		lsr.b	#3,d0
00075DC6                            
00075DC6                            loc_72170:
00075DC6 41FA 0000                  		lea	dword_722CC(pc),a0
00075DCA 2070 0000                  		movea.l	(a0,d0.w),a0
00075DCE 08D0 0002                  		bset	#2,(a0)
00075DD2                            
00075DD2                            loc_7217C:
00075DD2 D2C6                       		adda.w	d6,a1
00075DD4 51CF FFDA                  		dbf	d7,loc_7215A
00075DD8                            
00075DD8 4A6E 0340                  		tst.w	$340(a6)
00075DDC 6A00                       		bpl.s	loc_7218E
00075DDE 08EE 0002 0100             		bset	#2,$100(a6)
00075DE4                            
00075DE4                            loc_7218E:
00075DE4 4A6E 0370                  		tst.w	$370(a6)
00075DE8 6A00                       		bpl.s	loc_7219A
00075DEA 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075DF0                            
00075DF0                            loc_7219A:
00075DF0 4BEE 0070                  		lea	$70(a6),a5
00075DF4 7805                       		moveq	#5,d4
00075DF6                            
00075DF6                            loc_721A0:
00075DF6 4EBA 0000                  		jsr	sub_726FE(pc)
00075DFA DAC6                       		adda.w	d6,a5
00075DFC 51CC FFF8                  		dbf	d4,loc_721A0
00075E00 7802                       		moveq	#2,d4
00075E02                            
00075E02                            loc_721AC:
00075E02 4EBA 0000                  		jsr	sub_729A0(pc)
00075E06 DAC6                       		adda.w	d6,a5
00075E08 51CC FFF8                  		dbf	d4,loc_721AC
00075E0C                            
00075E0C                            loc_721B6:
00075E0C 584F                       		addq.w	#4,sp
00075E0E 4E75                       		rts	
00075E10                            ; ===========================================================================
00075E10 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00075E18                            		even
00075E18 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00075E1C                            		even
00075E1C                            ; ===========================================================================
00075E1C                            ; ---------------------------------------------------------------------------
00075E1C                            ; Play normal sound effect
00075E1C                            ; ---------------------------------------------------------------------------
00075E1C                            
00075E1C                            Sound_A0toCF:				; XREF: Sound_ChkValue
00075E1C 4A2E 0027                  		tst.b	$27(a6)
00075E20 6600 0000                  		bne.w	loc_722C6
00075E24 4A2E 0004                  		tst.b	4(a6)
00075E28 6600 0000                  		bne.w	loc_722C6
00075E2C 4A2E 0024                  		tst.b	$24(a6)
00075E30 6600 0000                  		bne.w	loc_722C6
00075E34 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00075E38 6600                       		bne.s	Sound_notB5	; if not, branch
00075E3A 4A2E 002B                  		tst.b	$2B(a6)
00075E3E 6600                       		bne.s	loc_721EE
00075E40 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00075E44                            
00075E44                            loc_721EE:
00075E44 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075E4A                            
00075E4A                            Sound_notB5:
00075E4A 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00075E4E 6600                       		bne.s	Sound_notA7	; if not, branch
00075E50 4A2E 002C                  		tst.b	$2C(a6)
00075E54 6600 0000                  		bne.w	locret_722C4
00075E58 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00075E5E                            
00075E5E                            Sound_notA7:
00075E5E 2079 0007 54DE             		movea.l	(Go_SoundIndex).l,a0
00075E64 0407 00A0                  		subi.b	#$A0,d7
00075E68 E54F                       		lsl.w	#2,d7
00075E6A 2670 7000                  		movea.l	(a0,d7.w),a3
00075E6E 224B                       		movea.l	a3,a1
00075E70 7200                       		moveq	#0,d1
00075E72 3219                       		move.w	(a1)+,d1
00075E74 D28B                       		add.l	a3,d1
00075E76 1A19                       		move.b	(a1)+,d5
00075E78 1E19                       		move.b	(a1)+,d7
00075E7A 5307                       		subq.b	#1,d7
00075E7C 7C30                       		moveq	#$30,d6
00075E7E                            
00075E7E                            loc_72228:
00075E7E 7600                       		moveq	#0,d3
00075E80 1629 0001                  		move.b	1(a1),d3
00075E84 1803                       		move.b	d3,d4
00075E86 6B00                       		bmi.s	loc_72244
00075E88 5543                       		subq.w	#2,d3
00075E8A E54B                       		lsl.w	#2,d3
00075E8C 4BFA 0000                  		lea	dword_722CC(pc),a5
00075E90 2A75 3000                  		movea.l	(a5,d3.w),a5
00075E94 08D5 0002                  		bset	#2,(a5)
00075E98 6000                       		bra.s	loc_7226E
00075E9A                            ; ===========================================================================
00075E9A                            
00075E9A                            loc_72244:
00075E9A E64B                       		lsr.w	#3,d3
00075E9C 4BFA 0000                  		lea	dword_722CC(pc),a5
00075EA0 2A75 3000                  		movea.l	(a5,d3.w),a5
00075EA4 08D5 0002                  		bset	#2,(a5)
00075EA8 0C04 00C0                  		cmpi.b	#$C0,d4
00075EAC 6600                       		bne.s	loc_7226E
00075EAE 1004                       		move.b	d4,d0
00075EB0 0000 001F                  		ori.b	#$1F,d0
00075EB4 13C0 00C0 0011             		move.b	d0,($C00011).l
00075EBA 0840 0005                  		bchg	#5,d0
00075EBE 13C0 00C0 0011             		move.b	d0,($C00011).l
00075EC4                            
00075EC4                            loc_7226E:
00075EC4 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00075EC8 244D                       		movea.l	a5,a2
00075ECA 700B                       		moveq	#$B,d0
00075ECC                            
00075ECC                            loc_72276:
00075ECC 429A                       		clr.l	(a2)+
00075ECE 51C8 FFFC                  		dbf	d0,loc_72276
00075ED2                            
00075ED2 3A99                       		move.w	(a1)+,(a5)
00075ED4 1B45 0002                  		move.b	d5,2(a5)
00075ED8 7000                       		moveq	#0,d0
00075EDA 3019                       		move.w	(a1)+,d0
00075EDC D08B                       		add.l	a3,d0
00075EDE 2B40 0004                  		move.l	d0,4(a5)
00075EE2 3B59 0008                  		move.w	(a1)+,8(a5)
00075EE6 1B7C 0001 000E             		move.b	#1,$E(a5)
00075EEC 1B46 000D                  		move.b	d6,$D(a5)
00075EF0 4A04                       		tst.b	d4
00075EF2 6B00                       		bmi.s	loc_722A8
00075EF4 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075EFA 2B41 0020                  		move.l	d1,$20(a5)
00075EFE                            
00075EFE                            loc_722A8:
00075EFE 51CF FF7E                  		dbf	d7,loc_72228
00075F02                            
00075F02 4A2E 0250                  		tst.b	$250(a6)
00075F06 6A00                       		bpl.s	loc_722B8
00075F08 08EE 0002 0340             		bset	#2,$340(a6)
00075F0E                            
00075F0E                            loc_722B8:
00075F0E 4A2E 0310                  		tst.b	$310(a6)
00075F12 6A00                       		bpl.s	locret_722C4
00075F14 08EE 0002 0370             		bset	#2,$370(a6)
00075F1A                            
00075F1A                            locret_722C4:
00075F1A 4E75                       		rts	
00075F1C                            ; ===========================================================================
00075F1C                            
00075F1C                            loc_722C6:
00075F1C 4216                       		clr.b	0(a6)
00075F1E 4E75                       		rts	
00075F20                            ; ===========================================================================
00075F20 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00075F24 0000 0000                  		dc.l 0
00075F28 00FF F100                  		dc.l $FFF100
00075F2C 00FF F130                  		dc.l $FFF130
00075F30 00FF F190                  		dc.l $FFF190
00075F34 00FF F1C0                  		dc.l $FFF1C0
00075F38 00FF F1F0                  		dc.l $FFF1F0
00075F3C 00FF F1F0                  		dc.l $FFF1F0
00075F40 00FF F220                  dword_722EC:	dc.l $FFF220
00075F44 0000 0000                  		dc.l 0
00075F48 00FF F250                  		dc.l $FFF250
00075F4C 00FF F280                  		dc.l $FFF280
00075F50 00FF F2B0                  		dc.l $FFF2B0
00075F54 00FF F2E0                  		dc.l $FFF2E0
00075F58 00FF F310                  		dc.l $FFF310
00075F5C 00FF F310                  		dc.l $FFF310
00075F60                            ; ===========================================================================
00075F60                            ; ---------------------------------------------------------------------------
00075F60                            ; Play GHZ waterfall sound
00075F60                            ; ---------------------------------------------------------------------------
00075F60                            
00075F60                            Sound_D0toDF:				; XREF: Sound_ChkValue
00075F60 4A2E 0027                  		tst.b	$27(a6)
00075F64 6600 0000                  		bne.w	locret_723C6
00075F68 4A2E 0004                  		tst.b	4(a6)
00075F6C 6600 0000                  		bne.w	locret_723C6
00075F70 4A2E 0024                  		tst.b	$24(a6)
00075F74 6600 0000                  		bne.w	locret_723C6
00075F78 2079 0007 54D6             		movea.l	(Go_SoundD0).l,a0
00075F7E 0407 00D0                  		subi.b	#$D0,d7
00075F82 E54F                       		lsl.w	#2,d7
00075F84 2670 7000                  		movea.l	(a0,d7.w),a3
00075F88 224B                       		movea.l	a3,a1
00075F8A 7000                       		moveq	#0,d0
00075F8C 3019                       		move.w	(a1)+,d0
00075F8E D08B                       		add.l	a3,d0
00075F90 2D40 0020                  		move.l	d0,$20(a6)
00075F94 1A19                       		move.b	(a1)+,d5
00075F96 1E19                       		move.b	(a1)+,d7
00075F98 5307                       		subq.b	#1,d7
00075F9A 7C30                       		moveq	#$30,d6
00075F9C                            
00075F9C                            loc_72348:
00075F9C 1829 0001                  		move.b	1(a1),d4
00075FA0 6B00                       		bmi.s	loc_7235A
00075FA2 08EE 0002 0100             		bset	#2,$100(a6)
00075FA8 4BEE 0340                  		lea	$340(a6),a5
00075FAC 6000                       		bra.s	loc_72364
00075FAE                            ; ===========================================================================
00075FAE                            
00075FAE                            loc_7235A:
00075FAE 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075FB4 4BEE 0370                  		lea	$370(a6),a5
00075FB8                            
00075FB8                            loc_72364:
00075FB8 244D                       		movea.l	a5,a2
00075FBA 700B                       		moveq	#$B,d0
00075FBC                            
00075FBC                            loc_72368:
00075FBC 429A                       		clr.l	(a2)+
00075FBE 51C8 FFFC                  		dbf	d0,loc_72368
00075FC2                            
00075FC2 3A99                       		move.w	(a1)+,(a5)
00075FC4 1B45 0002                  		move.b	d5,2(a5)
00075FC8 7000                       		moveq	#0,d0
00075FCA 3019                       		move.w	(a1)+,d0
00075FCC D08B                       		add.l	a3,d0
00075FCE 2B40 0004                  		move.l	d0,4(a5)
00075FD2 3B59 0008                  		move.w	(a1)+,8(a5)
00075FD6 1B7C 0001 000E             		move.b	#1,$E(a5)
00075FDC 1B46 000D                  		move.b	d6,$D(a5)
00075FE0 4A04                       		tst.b	d4
00075FE2 6B00                       		bmi.s	loc_72396
00075FE4 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075FEA                            
00075FEA                            loc_72396:
00075FEA 51CF FFB0                  		dbf	d7,loc_72348
00075FEE                            
00075FEE 4A2E 0250                  		tst.b	$250(a6)
00075FF2 6A00                       		bpl.s	loc_723A6
00075FF4 08EE 0002 0340             		bset	#2,$340(a6)
00075FFA                            
00075FFA                            loc_723A6:
00075FFA 4A2E 0310                  		tst.b	$310(a6)
00075FFE 6A00                       		bpl.s	locret_723C6
00076000 08EE 0002 0370             		bset	#2,$370(a6)
00076006 0004 001F                  		ori.b	#$1F,d4
0007600A 13C4 00C0 0011             		move.b	d4,($C00011).l
00076010 0844 0005                  		bchg	#5,d4
00076014 13C4 00C0 0011             		move.b	d4,($C00011).l
0007601A                            
0007601A                            locret_723C6:
0007601A 4E75                       		rts	
0007601C                            ; End of function Sound_ChkValue
0007601C                            
0007601C                            ; ===========================================================================
0007601C 00FF F100                  		dc.l $FFF100
00076020 00FF F1F0                  		dc.l $FFF1F0
00076024 00FF F250                  		dc.l $FFF250
00076028 00FF F310                  		dc.l $FFF310
0007602C 00FF F340                  		dc.l $FFF340
00076030 00FF F370                  		dc.l $FFF370
00076034                            
00076034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076034                            
00076034                            
00076034                            Snd_FadeOut1:				; XREF: Sound_E0
00076034 4216                       		clr.b	0(a6)
00076036 4BEE 0220                  		lea	$220(a6),a5
0007603A 7E05                       		moveq	#5,d7
0007603C                            
0007603C                            loc_723EA:
0007603C 4A15                       		tst.b	(a5)
0007603E 6A00 0000                  		bpl.w	loc_72472
00076042 0895 0007                  		bclr	#7,(a5)
00076046 7600                       		moveq	#0,d3
00076048 162D 0001                  		move.b	1(a5),d3
0007604C 6B00                       		bmi.s	loc_7243C
0007604E 4EBA 0000                  		jsr	sub_726FE(pc)
00076052 0C03 0004                  		cmpi.b	#4,d3
00076056 6600                       		bne.s	loc_72416
00076058 4A2E 0340                  		tst.b	$340(a6)
0007605C 6A00                       		bpl.s	loc_72416
0007605E 4BEE 0340                  		lea	$340(a6),a5
00076062 226E 0020                  		movea.l	$20(a6),a1
00076066 6000                       		bra.s	loc_72428
00076068                            ; ===========================================================================
00076068                            
00076068                            loc_72416:
00076068 5503                       		subq.b	#2,d3
0007606A E50B                       		lsl.b	#2,d3
0007606C 41FA FEB2                  		lea	dword_722CC(pc),a0
00076070 264D                       		movea.l	a5,a3
00076072 2A70 3000                  		movea.l	(a0,d3.w),a5
00076076 226E 0018                  		movea.l	$18(a6),a1
0007607A                            
0007607A                            loc_72428:
0007607A 0895 0002                  		bclr	#2,(a5)
0007607E 08D5 0001                  		bset	#1,(a5)
00076082 102D 000B                  		move.b	$B(a5),d0
00076086 4EBA 0000                  		jsr	sub_72C4E(pc)
0007608A 2A4B                       		movea.l	a3,a5
0007608C 6000                       		bra.s	loc_72472
0007608E                            ; ===========================================================================
0007608E                            
0007608E                            loc_7243C:
0007608E 4EBA 0000                  		jsr	sub_729A0(pc)
00076092 41EE 0370                  		lea	$370(a6),a0
00076096 0C03 00E0                  		cmpi.b	#$E0,d3
0007609A 6700                       		beq.s	loc_7245A
0007609C 0C03 00C0                  		cmpi.b	#$C0,d3
000760A0 6700                       		beq.s	loc_7245A
000760A2 E60B                       		lsr.b	#3,d3
000760A4 41FA FE7A                  		lea	dword_722CC(pc),a0
000760A8 2070 3000                  		movea.l	(a0,d3.w),a0
000760AC                            
000760AC                            loc_7245A:
000760AC 0890 0002                  		bclr	#2,(a0)
000760B0 08D0 0001                  		bset	#1,(a0)
000760B4 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000760BA 6600                       		bne.s	loc_72472
000760BC 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000760C4                            
000760C4                            loc_72472:
000760C4 DAFC 0030                  		adda.w	#$30,a5
000760C8 51CF FF72                  		dbf	d7,loc_723EA
000760CC                            
000760CC 4E75                       		rts	
000760CE                            ; End of function Snd_FadeOut1
000760CE                            
000760CE                            
000760CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000760CE                            
000760CE                            
000760CE                            Snd_FadeOut2:				; XREF: Sound_E0
000760CE 4BEE 0340                  		lea	$340(a6),a5
000760D2 4A15                       		tst.b	(a5)
000760D4 6A00                       		bpl.s	loc_724AE
000760D6 0895 0007                  		bclr	#7,(a5)
000760DA 0815 0002                  		btst	#2,(a5)
000760DE 6600                       		bne.s	loc_724AE
000760E0 4EBA 0000                  		jsr	loc_7270A(pc)
000760E4 4BEE 0100                  		lea	$100(a6),a5
000760E8 0895 0002                  		bclr	#2,(a5)
000760EC 08D5 0001                  		bset	#1,(a5)
000760F0 4A15                       		tst.b	(a5)
000760F2 6A00                       		bpl.s	loc_724AE
000760F4 226E 0018                  		movea.l	$18(a6),a1
000760F8 102D 000B                  		move.b	$B(a5),d0
000760FC 4EBA 0000                  		jsr	sub_72C4E(pc)
00076100                            
00076100                            loc_724AE:
00076100 4BEE 0370                  		lea	$370(a6),a5
00076104 4A15                       		tst.b	(a5)
00076106 6A00                       		bpl.s	locret_724E4
00076108 0895 0007                  		bclr	#7,(a5)
0007610C 0815 0002                  		btst	#2,(a5)
00076110 6600                       		bne.s	locret_724E4
00076112 4EBA 0000                  		jsr	loc_729A6(pc)
00076116 4BEE 01F0                  		lea	$1F0(a6),a5
0007611A 0895 0002                  		bclr	#2,(a5)
0007611E 08D5 0001                  		bset	#1,(a5)
00076122 4A15                       		tst.b	(a5)
00076124 6A00                       		bpl.s	locret_724E4
00076126 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007612C 6600                       		bne.s	locret_724E4
0007612E 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00076136                            
00076136                            locret_724E4:
00076136 4E75                       		rts	
00076138                            ; End of function Snd_FadeOut2
00076138                            
00076138                            ; ===========================================================================
00076138                            ; ---------------------------------------------------------------------------
00076138                            ; Fade out music
00076138                            ; ---------------------------------------------------------------------------
00076138                            
00076138                            Sound_E0:				; XREF: Sound_ExIndex
00076138 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007613C 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00076140 1D7C 0003 0006             		move.b	#3,6(a6)
00076146 1D7C 0028 0004             		move.b	#$28,4(a6)
0007614C 422E 0040                  		clr.b	$40(a6)
00076150 422E 002A                  		clr.b	$2A(a6)
00076154 4E75                       		rts	
00076156                            
00076156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076156                            
00076156                            
00076156                            sub_72504:				; XREF: sub_71B4C
00076156 102E 0006                  		move.b	6(a6),d0
0007615A 6700                       		beq.s	loc_72510
0007615C 532E 0006                  		subq.b	#1,6(a6)
00076160 4E75                       		rts	
00076162                            ; ===========================================================================
00076162                            
00076162                            loc_72510:
00076162 532E 0004                  		subq.b	#1,4(a6)
00076166 6700 0000                  		beq.w	Sound_E4
0007616A 1D7C 0003 0006             		move.b	#3,6(a6)
00076170 4BEE 0070                  		lea	$70(a6),a5
00076174 7E05                       		moveq	#5,d7
00076176                            
00076176                            loc_72524:
00076176 4A15                       		tst.b	(a5)
00076178 6A00                       		bpl.s	loc_72538
0007617A 522D 0009                  		addq.b	#1,9(a5)
0007617E 6A00                       		bpl.s	loc_72534
00076180 0895 0007                  		bclr	#7,(a5)
00076184 6000                       		bra.s	loc_72538
00076186                            ; ===========================================================================
00076186                            
00076186                            loc_72534:
00076186 4EBA 0000                  		jsr	sub_72CB4(pc)
0007618A                            
0007618A                            loc_72538:
0007618A DAFC 0030                  		adda.w	#$30,a5
0007618E 51CF FFE6                  		dbf	d7,loc_72524
00076192                            
00076192 7E02                       		moveq	#2,d7
00076194                            
00076194                            loc_72542:
00076194 4A15                       		tst.b	(a5)
00076196 6A00                       		bpl.s	loc_72560
00076198 522D 0009                  		addq.b	#1,9(a5)
0007619C 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000761A2 6500                       		bcs.s	loc_72558
000761A4 0895 0007                  		bclr	#7,(a5)
000761A8 6000                       		bra.s	loc_72560
000761AA                            ; ===========================================================================
000761AA                            
000761AA                            loc_72558:
000761AA 1C2D 0009                  		move.b	9(a5),d6
000761AE 4EBA 0000                  		jsr	sub_7296A(pc)
000761B2                            
000761B2                            loc_72560:
000761B2 DAFC 0030                  		adda.w	#$30,a5
000761B6 51CF FFDC                  		dbf	d7,loc_72542
000761BA                            
000761BA 4E75                       		rts	
000761BC                            ; End of function sub_72504
000761BC                            
000761BC                            
000761BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000761BC                            
000761BC                            
000761BC                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000761BC 7602                       		moveq	#2,d3
000761BE 7028                       		moveq	#$28,d0
000761C0                            
000761C0                            loc_7256E:
000761C0 1203                       		move.b	d3,d1
000761C2 4EBA 0000                  		jsr	sub_7272E(pc)
000761C6 5801                       		addq.b	#4,d1
000761C8 4EBA 0000                  		jsr	sub_7272E(pc)
000761CC 51CB FFF2                  		dbf	d3,loc_7256E
000761D0                            
000761D0 7040                       		moveq	#$40,d0
000761D2 727F                       		moveq	#$7F,d1
000761D4 7802                       		moveq	#2,d4
000761D6                            
000761D6                            loc_72584:
000761D6 7603                       		moveq	#3,d3
000761D8                            
000761D8                            loc_72586:
000761D8 4EBA 0000                  		jsr	sub_7272E(pc)
000761DC 4EBA 0000                  		jsr	sub_72764(pc)
000761E0 5840                       		addq.w	#4,d0
000761E2 51CB FFF4                  		dbf	d3,loc_72586
000761E6                            
000761E6 0400 000F                  		subi.b	#$F,d0
000761EA 51CC FFEA                  		dbf	d4,loc_72584
000761EE                            
000761EE 4E75                       		rts	
000761F0                            ; End of function sub_7256A
000761F0                            
000761F0                            ; ===========================================================================
000761F0                            ; ---------------------------------------------------------------------------
000761F0                            ; Stop music
000761F0                            ; ---------------------------------------------------------------------------
000761F0                            
000761F0                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
000761F0 702B                       		moveq	#$2B,d0
000761F2 123C 0080                  		move.b	#$80,d1
000761F6 4EBA 0000                  		jsr	sub_7272E(pc)
000761FA 7027                       		moveq	#$27,d0
000761FC 7200                       		moveq	#0,d1
000761FE 4EBA 0000                  		jsr	sub_7272E(pc)
00076202 204E                       		movea.l	a6,a0
00076204 303C 00E3                  		move.w	#$E3,d0
00076208                            
00076208                            loc_725B6:
00076208 4298                       		clr.l	(a0)+
0007620A 51C8 FFFC                  		dbf	d0,loc_725B6
0007620E                            
0007620E 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00076214 4EBA FFA6                  		jsr	sub_7256A(pc)
00076218 6000 0000                  		bra.w	sub_729B6
0007621C                            
0007621C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007621C                            
0007621C                            
0007621C                            sub_725CA:				; XREF: Sound_ChkValue
0007621C 204E                       		movea.l	a6,a0
0007621E 1216                       		move.b	0(a6),d1
00076220 142E 0027                  		move.b	$27(a6),d2
00076224 162E 002A                  		move.b	$2A(a6),d3
00076228 182E 0026                  		move.b	$26(a6),d4
0007622C 3A2E 000A                  		move.w	$A(a6),d5
00076230 303C 0087                  		move.w	#$87,d0
00076234                            
00076234                            loc_725E4:
00076234 4298                       		clr.l	(a0)+
00076236 51C8 FFFC                  		dbf	d0,loc_725E4
0007623A                            
0007623A 1C81                       		move.b	d1,0(a6)
0007623C 1D42 0027                  		move.b	d2,$27(a6)
00076240 1D43 002A                  		move.b	d3,$2A(a6)
00076244 1D44 0026                  		move.b	d4,$26(a6)
00076248 3D45 000A                  		move.w	d5,$A(a6)
0007624C 1D7C 0080 0009             		move.b	#$80,9(a6)
00076252 4EBA FF68                  		jsr	sub_7256A(pc)
00076256 6000 0000                  		bra.w	sub_729B6
0007625A                            ; End of function sub_725CA
0007625A                            
0007625A                            
0007625A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007625A                            
0007625A                            
0007625A                            sub_7260C:				; XREF: sub_71B4C
0007625A 1D6E 0002 0001             		move.b	2(a6),1(a6)
00076260 41EE 004E                  		lea	$4E(a6),a0
00076264 7030                       		moveq	#$30,d0
00076266 7209                       		moveq	#9,d1
00076268                            
00076268                            loc_7261A:
00076268 5210                       		addq.b	#1,(a0)
0007626A D0C0                       		adda.w	d0,a0
0007626C 51C9 FFFA                  		dbf	d1,loc_7261A
00076270                            
00076270 4E75                       		rts	
00076272                            ; End of function sub_7260C
00076272                            
00076272                            ; ===========================================================================
00076272                            ; ---------------------------------------------------------------------------
00076272                            ; Speed	up music
00076272                            ; ---------------------------------------------------------------------------
00076272                            
00076272                            Sound_E2:				; XREF: Sound_ExIndex
00076272 4A2E 0027                  		tst.b	$27(a6)
00076276 6600                       		bne.s	loc_7263E
00076278 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007627E 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00076284 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007628A 4E75                       		rts	
0007628C                            ; ===========================================================================
0007628C                            
0007628C                            loc_7263E:
0007628C 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00076292 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00076298 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007629E 4E75                       		rts	
000762A0                            ; ===========================================================================
000762A0                            ; ---------------------------------------------------------------------------
000762A0                            ; Change music back to normal speed
000762A0                            ; ---------------------------------------------------------------------------
000762A0                            
000762A0                            Sound_E3:				; XREF: Sound_ExIndex
000762A0 4A2E 0027                  		tst.b	$27(a6)
000762A4 6600                       		bne.s	loc_7266A
000762A6 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000762AC 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000762B2 422E 002A                  		clr.b	$2A(a6)
000762B6 4E75                       		rts	
000762B8                            ; ===========================================================================
000762B8                            
000762B8                            loc_7266A:
000762B8 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000762BE 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000762C4 422E 03CA                  		clr.b	$3CA(a6)
000762C8 4E75                       		rts	
000762CA                            
000762CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762CA                            
000762CA                            
000762CA                            sub_7267C:				; XREF: sub_71B4C
000762CA 4A2E 0025                  		tst.b	$25(a6)
000762CE 6700                       		beq.s	loc_72688
000762D0 532E 0025                  		subq.b	#1,$25(a6)
000762D4 4E75                       		rts	
000762D6                            ; ===========================================================================
000762D6                            
000762D6                            loc_72688:
000762D6 4A2E 0026                  		tst.b	$26(a6)
000762DA 6700                       		beq.s	loc_726D6
000762DC 532E 0026                  		subq.b	#1,$26(a6)
000762E0 1D7C 0002 0025             		move.b	#2,$25(a6)
000762E6 4BEE 0070                  		lea	$70(a6),a5
000762EA 7E05                       		moveq	#5,d7
000762EC                            
000762EC                            loc_7269E:
000762EC 4A15                       		tst.b	(a5)
000762EE 6A00                       		bpl.s	loc_726AA
000762F0 532D 0009                  		subq.b	#1,9(a5)
000762F4 4EBA 0000                  		jsr	sub_72CB4(pc)
000762F8                            
000762F8                            loc_726AA:
000762F8 DAFC 0030                  		adda.w	#$30,a5
000762FC 51CF FFEE                  		dbf	d7,loc_7269E
00076300 7E02                       		moveq	#2,d7
00076302                            
00076302                            loc_726B4:
00076302 4A15                       		tst.b	(a5)
00076304 6A00                       		bpl.s	loc_726CC
00076306 532D 0009                  		subq.b	#1,9(a5)
0007630A 1C2D 0009                  		move.b	9(a5),d6
0007630E 0C06 0010                  		cmpi.b	#$10,d6
00076312 6500                       		bcs.s	loc_726C8
00076314 7C0F                       		moveq	#$F,d6
00076316                            
00076316                            loc_726C8:
00076316 4EBA 0000                  		jsr	sub_7296A(pc)
0007631A                            
0007631A                            loc_726CC:
0007631A DAFC 0030                  		adda.w	#$30,a5
0007631E 51CF FFE2                  		dbf	d7,loc_726B4
00076322 4E75                       		rts	
00076324                            ; ===========================================================================
00076324                            
00076324                            loc_726D6:
00076324 08AE 0002 0040             		bclr	#2,$40(a6)
0007632A 422E 0024                  		clr.b	$24(a6)
0007632E 4E75                       		rts	
00076330                            ; End of function sub_7267C
00076330                            
00076330                            ; ===========================================================================
00076330                            
00076330                            loc_726E2:				; XREF: sub_71CCA
00076330 0815 0001                  		btst	#1,(a5)
00076334 6600                       		bne.s	locret_726FC
00076336 0815 0002                  		btst	#2,(a5)
0007633A 6600                       		bne.s	locret_726FC
0007633C 7028                       		moveq	#$28,d0
0007633E 122D 0001                  		move.b	1(a5),d1
00076342 0001 00F0                  		ori.b	#-$10,d1
00076346 6000 0000                  		bra.w	sub_7272E
0007634A                            ; ===========================================================================
0007634A                            
0007634A                            locret_726FC:
0007634A 4E75                       		rts	
0007634C                            
0007634C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007634C                            
0007634C                            
0007634C                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007634C 0815 0004                  		btst	#4,(a5)
00076350 6600                       		bne.s	locret_72714
00076352 0815 0002                  		btst	#2,(a5)
00076356 6600                       		bne.s	locret_72714
00076358                            
00076358                            loc_7270A:				; XREF: Snd_FadeOut2
00076358 7028                       		moveq	#$28,d0
0007635A 122D 0001                  		move.b	1(a5),d1
0007635E 6000 0000                  		bra.w	sub_7272E
00076362                            ; ===========================================================================
00076362                            
00076362                            locret_72714:
00076362 4E75                       		rts	
00076364                            ; End of function sub_726FE
00076364                            
00076364                            ; ===========================================================================
00076364                            
00076364                            loc_72716:				; XREF: sub_72A5A
00076364 0815 0002                  		btst	#2,(a5)
00076368 6600                       		bne.s	locret_72720
0007636A 6000 0000                  		bra.w	sub_72722
0007636E                            ; ===========================================================================
0007636E                            
0007636E                            locret_72720:
0007636E 4E75                       		rts	
00076370                            
00076370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076370                            
00076370                            
00076370                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00076370 082D 0002 0001             		btst	#2,1(a5)
00076376 6600                       		bne.s	loc_7275A
00076378 D02D 0001                  		add.b	1(a5),d0
0007637C                            ; End of function sub_72722
0007637C                            
0007637C                            
0007637C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007637C                            
0007637C                            
0007637C                            sub_7272E:				; XREF: loc_71E6A
0007637C 1439 00A0 4000             		move.b	($A04000).l,d2
00076382 0802 0007                  		btst	#7,d2
00076386 66F4                       		bne.s	sub_7272E
00076388 13C0 00A0 4000             		move.b	d0,($A04000).l
0007638E 4E71                       		nop	
00076390 4E71                       		nop	
00076392 4E71                       		nop	
00076394                            
00076394                            loc_72746:
00076394 1439 00A0 4000             		move.b	($A04000).l,d2
0007639A 0802 0007                  		btst	#7,d2
0007639E 66F4                       		bne.s	loc_72746
000763A0                            
000763A0 13C1 00A0 4001             		move.b	d1,($A04001).l
000763A6 4E75                       		rts	
000763A8                            ; End of function sub_7272E
000763A8                            
000763A8                            ; ===========================================================================
000763A8                            
000763A8                            loc_7275A:				; XREF: sub_72722
000763A8 142D 0001                  		move.b	1(a5),d2
000763AC 0882 0002                  		bclr	#2,d2
000763B0 D002                       		add.b	d2,d0
000763B2                            
000763B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000763B2                            
000763B2                            
000763B2                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000763B2 1439 00A0 4000             		move.b	($A04000).l,d2
000763B8 0802 0007                  		btst	#7,d2
000763BC 66F4                       		bne.s	sub_72764
000763BE 13C0 00A0 4002             		move.b	d0,($A04002).l
000763C4 4E71                       		nop	
000763C6 4E71                       		nop	
000763C8 4E71                       		nop	
000763CA                            
000763CA                            loc_7277C:
000763CA 1439 00A0 4000             		move.b	($A04000).l,d2
000763D0 0802 0007                  		btst	#7,d2
000763D4 66F4                       		bne.s	loc_7277C
000763D6                            
000763D6 13C1 00A0 4003             		move.b	d1,($A04003).l
000763DC 4E75                       		rts	
000763DE                            ; End of function sub_72764
000763DE                            
000763DE                            ; ===========================================================================
000763DE 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000763F0 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00076402 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00076412 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00076422 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00076432 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00076442 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00076452 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00076462 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00076472 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00076482 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00076492 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007649E                            
0007649E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007649E                            
0007649E                            
0007649E                            sub_72850:				; XREF: sub_71B4C
0007649E 532D 000E                  		subq.b	#1,$E(a5)
000764A2 6600                       		bne.s	loc_72866
000764A4 0895 0004                  		bclr	#4,(a5)
000764A8 4EBA 0000                  		jsr	sub_72878(pc)
000764AC 4EBA 0000                  		jsr	sub_728DC(pc)
000764B0 6000 0000                  		bra.w	loc_7292E
000764B4                            ; ===========================================================================
000764B4                            
000764B4                            loc_72866:
000764B4 4EBA F45A                  		jsr	sub_71D9E(pc)
000764B8 4EBA 0000                  		jsr	sub_72926(pc)
000764BC 4EBA F47A                  		jsr	sub_71DC6(pc)
000764C0 4EBA 0000                  		jsr	sub_728E2(pc)
000764C4 4E75                       		rts	
000764C6                            ; End of function sub_72850
000764C6                            
000764C6                            
000764C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000764C6                            
000764C6                            
000764C6                            sub_72878:				; XREF: sub_72850
000764C6 0895 0001                  		bclr	#1,(a5)
000764CA 286D 0004                  		movea.l	4(a5),a4
000764CE                            
000764CE                            loc_72880:
000764CE 7A00                       		moveq	#0,d5
000764D0 1A1C                       		move.b	(a4)+,d5
000764D2 0C05 00E0                  		cmpi.b	#$E0,d5
000764D6 6500                       		bcs.s	loc_72890
000764D8 4EBA 0000                  		jsr	sub_72A5A(pc)
000764DC 60F0                       		bra.s	loc_72880
000764DE                            ; ===========================================================================
000764DE                            
000764DE                            loc_72890:
000764DE 4A05                       		tst.b	d5
000764E0 6A00                       		bpl.s	loc_728A4
000764E2 4EBA 0000                  		jsr	sub_728AC(pc)
000764E6 1A1C                       		move.b	(a4)+,d5
000764E8 4A05                       		tst.b	d5
000764EA 6A00                       		bpl.s	loc_728A4
000764EC 534C                       		subq.w	#1,a4
000764EE 6000 F3E2                  		bra.w	sub_71D60
000764F2                            ; ===========================================================================
000764F2                            
000764F2                            loc_728A4:
000764F2 4EBA F3BE                  		jsr	sub_71D40(pc)
000764F6 6000 F3DA                  		bra.w	sub_71D60
000764FA                            ; End of function sub_72878
000764FA                            
000764FA                            
000764FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000764FA                            
000764FA                            
000764FA                            sub_728AC:				; XREF: sub_72878
000764FA 0405 0081                  		subi.b	#$81,d5
000764FE 6500                       		bcs.s	loc_728CA
00076500 DA2D 0008                  		add.b	8(a5),d5
00076504 0245 007F                  		andi.w	#$7F,d5
00076508 E34D                       		lsl.w	#1,d5
0007650A 41FA 0000                  		lea	word_729CE(pc),a0
0007650E 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00076514 6000 F3BC                  		bra.w	sub_71D60
00076518                            ; ===========================================================================
00076518                            
00076518                            loc_728CA:
00076518 08D5 0001                  		bset	#1,(a5)
0007651C 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00076522 4EBA F3AE                  		jsr	sub_71D60(pc)
00076526 6000 0000                  		bra.w	sub_729A0
0007652A                            ; End of function sub_728AC
0007652A                            
0007652A                            
0007652A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007652A                            
0007652A                            
0007652A                            sub_728DC:				; XREF: sub_72850
0007652A 3C2D 0010                  		move.w	$10(a5),d6
0007652E 6B00                       		bmi.s	loc_72920
00076530                            ; End of function sub_728DC
00076530                            
00076530                            
00076530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076530                            
00076530                            
00076530                            sub_728E2:				; XREF: sub_72850
00076530 102D 001E                  		move.b	$1E(a5),d0
00076534 4880                       		ext.w	d0
00076536 DC40                       		add.w	d0,d6
00076538 0815 0002                  		btst	#2,(a5)
0007653C 6600                       		bne.s	locret_7291E
0007653E 0815 0001                  		btst	#1,(a5)
00076542 6600                       		bne.s	locret_7291E
00076544 102D 0001                  		move.b	1(a5),d0
00076548 0C00 00E0                  		cmpi.b	#$E0,d0
0007654C 6600                       		bne.s	loc_72904
0007654E 103C 00C0                  		move.b	#$C0,d0
00076552                            
00076552                            loc_72904:
00076552 3206                       		move.w	d6,d1
00076554 0201 000F                  		andi.b	#$F,d1
00076558 8001                       		or.b	d1,d0
0007655A E84E                       		lsr.w	#4,d6
0007655C 0206 003F                  		andi.b	#$3F,d6
00076560 13C0 00C0 0011             		move.b	d0,($C00011).l
00076566 13C6 00C0 0011             		move.b	d6,($C00011).l
0007656C                            
0007656C                            locret_7291E:
0007656C 4E75                       		rts	
0007656E                            ; End of function sub_728E2
0007656E                            
0007656E                            ; ===========================================================================
0007656E                            
0007656E                            loc_72920:				; XREF: sub_728DC
0007656E 08D5 0001                  		bset	#1,(a5)
00076572 4E75                       		rts	
00076574                            
00076574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076574                            
00076574                            
00076574                            sub_72926:				; XREF: sub_72850
00076574 4A2D 000B                  		tst.b	$B(a5)
00076578 6700 0000                  		beq.w	locret_7298A
0007657C                            
0007657C                            loc_7292E:				; XREF: sub_72850
0007657C 1C2D 0009                  		move.b	9(a5),d6
00076580 7000                       		moveq	#0,d0
00076582 102D 000B                  		move.b	$B(a5),d0
00076586 6700                       		beq.s	sub_7296A
00076588 2079 0007 54E6             		movea.l	(Go_PSGIndex).l,a0
0007658E 5340                       		subq.w	#1,d0
00076590 E548                       		lsl.w	#2,d0
00076592 2070 0000                  		movea.l	(a0,d0.w),a0
00076596 102D 000C                  		move.b	$C(a5),d0
0007659A 1030 0000                  		move.b	(a0,d0.w),d0
0007659E 522D 000C                  		addq.b	#1,$C(a5)
000765A2 0800 0007                  		btst	#7,d0
000765A6 6700                       		beq.s	loc_72960
000765A8 0C00 0080                  		cmpi.b	#$80,d0
000765AC 6700                       		beq.s	loc_7299A
000765AE                            
000765AE                            loc_72960:
000765AE DC40                       		add.w	d0,d6
000765B0 0C06 0010                  		cmpi.b	#$10,d6
000765B4 6500                       		bcs.s	sub_7296A
000765B6 7C0F                       		moveq	#$F,d6
000765B8                            ; End of function sub_72926
000765B8                            
000765B8                            
000765B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000765B8                            
000765B8                            
000765B8                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000765B8 0815 0001                  		btst	#1,(a5)
000765BC 6600                       		bne.s	locret_7298A
000765BE 0815 0002                  		btst	#2,(a5)
000765C2 6600                       		bne.s	locret_7298A
000765C4 0815 0004                  		btst	#4,(a5)
000765C8 6600                       		bne.s	loc_7298C
000765CA                            
000765CA                            loc_7297C:
000765CA 8C2D 0001                  		or.b	1(a5),d6
000765CE 0606 0010                  		addi.b	#$10,d6
000765D2 13C6 00C0 0011             		move.b	d6,($C00011).l
000765D8                            
000765D8                            locret_7298A:
000765D8 4E75                       		rts	
000765DA                            ; ===========================================================================
000765DA                            
000765DA                            loc_7298C:
000765DA 4A2D 0013                  		tst.b	$13(a5)
000765DE 67EA                       		beq.s	loc_7297C
000765E0 4A2D 0012                  		tst.b	$12(a5)
000765E4 66E4                       		bne.s	loc_7297C
000765E6 4E75                       		rts	
000765E8                            ; End of function sub_7296A
000765E8                            
000765E8                            ; ===========================================================================
000765E8                            
000765E8                            loc_7299A:				; XREF: sub_72926
000765E8 532D 000C                  		subq.b	#1,$C(a5)
000765EC 4E75                       		rts	
000765EE                            
000765EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000765EE                            
000765EE                            
000765EE                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000765EE 0815 0002                  		btst	#2,(a5)
000765F2 6600                       		bne.s	locret_729B4
000765F4                            
000765F4                            loc_729A6:				; XREF: Snd_FadeOut2
000765F4 102D 0001                  		move.b	1(a5),d0
000765F8 0000 001F                  		ori.b	#$1F,d0
000765FC 13C0 00C0 0011             		move.b	d0,($C00011).l
00076602                            
00076602                            locret_729B4:
00076602 4E75                       		rts	
00076604                            ; End of function sub_729A0
00076604                            
00076604                            
00076604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076604                            
00076604                            
00076604                            sub_729B6:				; XREF: loc_71E7C
00076604 41F9 00C0 0011             		lea	($C00011).l,a0
0007660A 10BC 009F                  		move.b	#$9F,(a0)
0007660E 10BC 00BF                  		move.b	#$BF,(a0)
00076612 10BC 00DF                  		move.b	#$DF,(a0)
00076616 10BC 00FF                  		move.b	#$FF,(a0)
0007661A 4E75                       		rts	
0007661C                            ; End of function sub_729B6
0007661C                            
0007661C                            ; ===========================================================================
0007661C 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007662E 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00076640 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00076654 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00076668 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007667C 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00076690 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000766A4 0011 0000                  		dc.w $11, 0
000766A8                            
000766A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000766A8                            
000766A8                            
000766A8                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000766A8 0445 00E0                  		subi.w	#$E0,d5
000766AC E54D                       		lsl.w	#2,d5
000766AE 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000766B2                            ; End of function sub_72A5A
000766B2                            
000766B2                            ; ===========================================================================
000766B2                            
000766B2                            loc_72A64:
000766B2 6000 0000                  		bra.w	loc_72ACC
000766B6                            ; ===========================================================================
000766B6 6000 0000                  		bra.w	loc_72AEC
000766BA                            ; ===========================================================================
000766BA 6000 0000                  		bra.w	loc_72AF2
000766BE                            ; ===========================================================================
000766BE 6000 0000                  		bra.w	loc_72AF8
000766C2                            ; ===========================================================================
000766C2 6000 0000                  		bra.w	loc_72B14
000766C6                            ; ===========================================================================
000766C6 6000 0000                  		bra.w	loc_72B9E
000766CA                            ; ===========================================================================
000766CA 6000 0000                  		bra.w	loc_72BA4
000766CE                            ; ===========================================================================
000766CE 6000 0000                  		bra.w	loc_72BAE
000766D2                            ; ===========================================================================
000766D2 6000 0000                  		bra.w	loc_72BB4
000766D6                            ; ===========================================================================
000766D6 6000 0000                  		bra.w	loc_72BBE
000766DA                            ; ===========================================================================
000766DA 6000 0000                  		bra.w	loc_72BC6
000766DE                            ; ===========================================================================
000766DE 6000 0000                  		bra.w	loc_72BD0
000766E2                            ; ===========================================================================
000766E2 6000 0000                  		bra.w	loc_72BE6
000766E6                            ; ===========================================================================
000766E6 6000 0000                  		bra.w	loc_72BEE
000766EA                            ; ===========================================================================
000766EA 6000 0000                  		bra.w	loc_72BF4
000766EE                            ; ===========================================================================
000766EE 6000 0000                  		bra.w	loc_72C26
000766F2                            ; ===========================================================================
000766F2 6000 0000                  		bra.w	loc_72D30
000766F6                            ; ===========================================================================
000766F6 6000 0000                  		bra.w	loc_72D52
000766FA                            ; ===========================================================================
000766FA 6000 0000                  		bra.w	loc_72D58
000766FE                            ; ===========================================================================
000766FE 6000 0000                  		bra.w	loc_72E06
00076702                            ; ===========================================================================
00076702 6000 0000                  		bra.w	loc_72E20
00076706                            ; ===========================================================================
00076706 6000 0000                  		bra.w	loc_72E26
0007670A                            ; ===========================================================================
0007670A 6000 0000                  		bra.w	loc_72E2C
0007670E                            ; ===========================================================================
0007670E 6000 0000                  		bra.w	loc_72E38
00076712                            ; ===========================================================================
00076712 6000 0000                  		bra.w	loc_72E52
00076716                            ; ===========================================================================
00076716 6000 0000                  		bra.w	loc_72E64
0007671A                            ; ===========================================================================
0007671A                            
0007671A                            loc_72ACC:				; XREF: loc_72A64
0007671A 121C                       		move.b	(a4)+,d1
0007671C 4A2D 0001                  		tst.b	1(a5)
00076720 6B00                       		bmi.s	locret_72AEA
00076722 102D 000A                  		move.b	$A(a5),d0
00076726 0200 0037                  		andi.b	#$37,d0
0007672A 8200                       		or.b	d0,d1
0007672C 1B41 000A                  		move.b	d1,$A(a5)
00076730 103C 00B4                  		move.b	#$B4,d0
00076734 6000 FC2E                  		bra.w	loc_72716
00076738                            ; ===========================================================================
00076738                            
00076738                            locret_72AEA:
00076738 4E75                       		rts	
0007673A                            ; ===========================================================================
0007673A                            
0007673A                            loc_72AEC:				; XREF: loc_72A64
0007673A 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007673E 4E75                       		rts	
00076740                            ; ===========================================================================
00076740                            
00076740                            loc_72AF2:				; XREF: loc_72A64
00076740 1D5C 0007                  		move.b	(a4)+,7(a6)
00076744 4E75                       		rts	
00076746                            ; ===========================================================================
00076746                            
00076746                            loc_72AF8:				; XREF: loc_72A64
00076746 7000                       		moveq	#0,d0
00076748 102D 000D                  		move.b	$D(a5),d0
0007674C 2875 0000                  		movea.l	(a5,d0.w),a4
00076750 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00076758 544C                       		addq.w	#2,a4
0007675A 5800                       		addq.b	#4,d0
0007675C 1B40 000D                  		move.b	d0,$D(a5)
00076760 4E75                       		rts	
00076762                            ; ===========================================================================
00076762                            
00076762                            loc_72B14:				; XREF: loc_72A64
00076762 204E                       		movea.l	a6,a0
00076764 43EE 03A0                  		lea	$3A0(a6),a1
00076768 303C 0087                  		move.w	#$87,d0
0007676C                            
0007676C                            loc_72B1E:
0007676C 20D9                       		move.l	(a1)+,(a0)+
0007676E 51C8 FFFC                  		dbf	d0,loc_72B1E
00076772                            
00076772 08EE 0002 0040             		bset	#2,$40(a6)
00076778 264D                       		movea.l	a5,a3
0007677A 1C3C 0028                  		move.b	#$28,d6
0007677E 9C2E 0026                  		sub.b	$26(a6),d6
00076782 7E05                       		moveq	#5,d7
00076784 4BEE 0070                  		lea	$70(a6),a5
00076788                            
00076788                            loc_72B3A:
00076788 0815 0007                  		btst	#7,(a5)
0007678C 6700                       		beq.s	loc_72B5C
0007678E 08D5 0001                  		bset	#1,(a5)
00076792 DD2D 0009                  		add.b	d6,9(a5)
00076796 0815 0002                  		btst	#2,(a5)
0007679A 6600                       		bne.s	loc_72B5C
0007679C 7000                       		moveq	#0,d0
0007679E 102D 000B                  		move.b	$B(a5),d0
000767A2 226E 0018                  		movea.l	$18(a6),a1
000767A6 4EBA 0000                  		jsr	sub_72C4E(pc)
000767AA                            
000767AA                            loc_72B5C:
000767AA DAFC 0030                  		adda.w	#$30,a5
000767AE 51CF FFD8                  		dbf	d7,loc_72B3A
000767B2                            
000767B2 7E02                       		moveq	#2,d7
000767B4                            
000767B4                            loc_72B66:
000767B4 0815 0007                  		btst	#7,(a5)
000767B8 6700                       		beq.s	loc_72B78
000767BA 08D5 0001                  		bset	#1,(a5)
000767BE 4EBA FE2E                  		jsr	sub_729A0(pc)
000767C2 DD2D 0009                  		add.b	d6,9(a5)
000767C6                            
000767C6                            loc_72B78:
000767C6 DAFC 0030                  		adda.w	#$30,a5
000767CA 51CF FFE8                  		dbf	d7,loc_72B66
000767CE 2A4B                       		movea.l	a3,a5
000767D0 1D7C 0080 0024             		move.b	#$80,$24(a6)
000767D6 1D7C 0028 0026             		move.b	#$28,$26(a6)
000767DC 422E 0027                  		clr.b	$27(a6)
000767E0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000767E8 504F                       		addq.w	#8,sp
000767EA 4E75                       		rts	
000767EC                            ; ===========================================================================
000767EC                            
000767EC                            loc_72B9E:				; XREF: loc_72A64
000767EC 1B5C 0002                  		move.b	(a4)+,2(a5)
000767F0 4E75                       		rts	
000767F2                            ; ===========================================================================
000767F2                            
000767F2                            loc_72BA4:				; XREF: loc_72A64
000767F2 101C                       		move.b	(a4)+,d0
000767F4 D12D 0009                  		add.b	d0,9(a5)
000767F8 6000 0000                  		bra.w	sub_72CB4
000767FC                            ; ===========================================================================
000767FC                            
000767FC                            loc_72BAE:				; XREF: loc_72A64
000767FC 08D5 0004                  		bset	#4,(a5)
00076800 4E75                       		rts	
00076802                            ; ===========================================================================
00076802                            
00076802                            loc_72BB4:				; XREF: loc_72A64
00076802 1B54 0012                  		move.b	(a4),$12(a5)
00076806 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007680A 4E75                       		rts	
0007680C                            ; ===========================================================================
0007680C                            
0007680C                            loc_72BBE:				; XREF: loc_72A64
0007680C 101C                       		move.b	(a4)+,d0
0007680E D12D 0008                  		add.b	d0,8(a5)
00076812 4E75                       		rts	
00076814                            ; ===========================================================================
00076814                            
00076814                            loc_72BC6:				; XREF: loc_72A64
00076814 1D54 0002                  		move.b	(a4),2(a6)
00076818 1D5C 0001                  		move.b	(a4)+,1(a6)
0007681C 4E75                       		rts	
0007681E                            ; ===========================================================================
0007681E                            
0007681E                            loc_72BD0:				; XREF: loc_72A64
0007681E 41EE 0040                  		lea	$40(a6),a0
00076822 101C                       		move.b	(a4)+,d0
00076824 7230                       		moveq	#$30,d1
00076826 7409                       		moveq	#9,d2
00076828                            
00076828                            loc_72BDA:
00076828 1140 0002                  		move.b	d0,2(a0)
0007682C D0C1                       		adda.w	d1,a0
0007682E 51CA FFF8                  		dbf	d2,loc_72BDA
00076832                            
00076832 4E75                       		rts	
00076834                            ; ===========================================================================
00076834                            
00076834                            loc_72BE6:				; XREF: loc_72A64
00076834 101C                       		move.b	(a4)+,d0
00076836 D12D 0009                  		add.b	d0,9(a5)
0007683A 4E75                       		rts	
0007683C                            ; ===========================================================================
0007683C                            
0007683C                            loc_72BEE:				; XREF: loc_72A64
0007683C 422E 002C                  		clr.b	$2C(a6)
00076840 4E75                       		rts	
00076842                            ; ===========================================================================
00076842                            
00076842                            loc_72BF4:				; XREF: loc_72A64
00076842 0895 0007                  		bclr	#7,(a5)
00076846 0895 0004                  		bclr	#4,(a5)
0007684A 4EBA FB00                  		jsr	sub_726FE(pc)
0007684E 4A2E 0250                  		tst.b	$250(a6)
00076852 6B00                       		bmi.s	loc_72C22
00076854 264D                       		movea.l	a5,a3
00076856 4BEE 0100                  		lea	$100(a6),a5
0007685A 226E 0018                  		movea.l	$18(a6),a1
0007685E 0895 0002                  		bclr	#2,(a5)
00076862 08D5 0001                  		bset	#1,(a5)
00076866 102D 000B                  		move.b	$B(a5),d0
0007686A 4EBA 0000                  		jsr	sub_72C4E(pc)
0007686E 2A4B                       		movea.l	a3,a5
00076870                            
00076870                            loc_72C22:
00076870 504F                       		addq.w	#8,sp
00076872 4E75                       		rts	
00076874                            ; ===========================================================================
00076874                            
00076874                            loc_72C26:				; XREF: loc_72A64
00076874 7000                       		moveq	#0,d0
00076876 101C                       		move.b	(a4)+,d0
00076878 1B40 000B                  		move.b	d0,$B(a5)
0007687C 0815 0002                  		btst	#2,(a5)
00076880 6600 0000                  		bne.w	locret_72CAA
00076884 226E 0018                  		movea.l	$18(a6),a1
00076888 4A2E 000E                  		tst.b	$E(a6)
0007688C 6700                       		beq.s	sub_72C4E
0007688E 226D 0020                  		movea.l	$20(a5),a1
00076892 4A2E 000E                  		tst.b	$E(a6)
00076896 6B00                       		bmi.s	sub_72C4E
00076898 226E 0020                  		movea.l	$20(a6),a1
0007689C                            
0007689C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007689C                            
0007689C                            
0007689C                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007689C 5340                       		subq.w	#1,d0
0007689E 6B00                       		bmi.s	loc_72C5C
000768A0 323C 0019                  		move.w	#$19,d1
000768A4                            
000768A4                            loc_72C56:
000768A4 D2C1                       		adda.w	d1,a1
000768A6 51C8 FFFC                  		dbf	d0,loc_72C56
000768AA                            
000768AA                            loc_72C5C:
000768AA 1219                       		move.b	(a1)+,d1
000768AC 1B41 001F                  		move.b	d1,$1F(a5)
000768B0 1801                       		move.b	d1,d4
000768B2 103C 00B0                  		move.b	#$B0,d0
000768B6 4EBA FAB8                  		jsr	sub_72722(pc)
000768BA 45FA 0000                  		lea	byte_72D18(pc),a2
000768BE 7613                       		moveq	#$13,d3
000768C0                            
000768C0                            loc_72C72:
000768C0 101A                       		move.b	(a2)+,d0
000768C2 1219                       		move.b	(a1)+,d1
000768C4 4EBA FAAA                  		jsr	sub_72722(pc)
000768C8 51CB FFF6                  		dbf	d3,loc_72C72
000768CC 7A03                       		moveq	#3,d5
000768CE 0244 0007                  		andi.w	#7,d4
000768D2 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000768D6 162D 0009                  		move.b	9(a5),d3
000768DA                            
000768DA                            loc_72C8C:
000768DA 101A                       		move.b	(a2)+,d0
000768DC 1219                       		move.b	(a1)+,d1
000768DE E20C                       		lsr.b	#1,d4
000768E0 6400                       		bcc.s	loc_72C96
000768E2 D203                       		add.b	d3,d1
000768E4                            
000768E4                            loc_72C96:
000768E4 4EBA FA8A                  		jsr	sub_72722(pc)
000768E8 51CD FFF0                  		dbf	d5,loc_72C8C
000768EC 103C 00B4                  		move.b	#$B4,d0
000768F0 122D 000A                  		move.b	$A(a5),d1
000768F4 4EBA FA7A                  		jsr	sub_72722(pc)
000768F8                            
000768F8                            locret_72CAA:
000768F8 4E75                       		rts	
000768FA                            ; End of function sub_72C4E
000768FA                            
000768FA                            ; ===========================================================================
000768FA 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00076902                            
00076902                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076902                            
00076902                            
00076902                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00076902 0815 0002                  		btst	#2,(a5)
00076906 6600                       		bne.s	locret_72D16
00076908 7000                       		moveq	#0,d0
0007690A 102D 000B                  		move.b	$B(a5),d0
0007690E 226E 0018                  		movea.l	$18(a6),a1
00076912 4A2E 000E                  		tst.b	$E(a6)
00076916 6700                       		beq.s	loc_72CD8
00076918 226E 0020                  		movea.l	$20(a6),a1
0007691C 4A2E 000E                  		tst.b	$E(a6)
00076920 6B00                       		bmi.s	loc_72CD8
00076922 226E 0020                  		movea.l	$20(a6),a1
00076926                            
00076926                            loc_72CD8:
00076926 5340                       		subq.w	#1,d0
00076928 6B00                       		bmi.s	loc_72CE6
0007692A 323C 0019                  		move.w	#$19,d1
0007692E                            
0007692E                            loc_72CE0:
0007692E D2C1                       		adda.w	d1,a1
00076930 51C8 FFFC                  		dbf	d0,loc_72CE0
00076934                            
00076934                            loc_72CE6:
00076934 D2FC 0015                  		adda.w	#$15,a1
00076938 45FA 0000                  		lea	byte_72D2C(pc),a2
0007693C 102D 001F                  		move.b	$1F(a5),d0
00076940 0240 0007                  		andi.w	#7,d0
00076944 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00076948 162D 0009                  		move.b	9(a5),d3
0007694C 6B00                       		bmi.s	locret_72D16
0007694E 7A03                       		moveq	#3,d5
00076950                            
00076950                            loc_72D02:
00076950 101A                       		move.b	(a2)+,d0
00076952 1219                       		move.b	(a1)+,d1
00076954 E20C                       		lsr.b	#1,d4
00076956 6400                       		bcc.s	loc_72D12
00076958 D203                       		add.b	d3,d1
0007695A 6500                       		bcs.s	loc_72D12
0007695C 4EBA FA12                  		jsr	sub_72722(pc)
00076960                            
00076960                            loc_72D12:
00076960 51CD FFEE                  		dbf	d5,loc_72D02
00076964                            
00076964                            locret_72D16:
00076964 4E75                       		rts	
00076966                            ; End of function sub_72CB4
00076966                            
00076966                            ; ===========================================================================
00076966 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00076970 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007697A 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007697E                            ; ===========================================================================
0007697E                            
0007697E                            loc_72D30:				; XREF: loc_72A64
0007697E 08D5 0003                  		bset	#3,(a5)
00076982 2B4C 0014                  		move.l	a4,$14(a5)
00076986 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007698A 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007698E 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00076992 101C                       		move.b	(a4)+,d0
00076994 E208                       		lsr.b	#1,d0
00076996 1B40 001B                  		move.b	d0,$1B(a5)
0007699A 426D 001C                  		clr.w	$1C(a5)
0007699E 4E75                       		rts	
000769A0                            ; ===========================================================================
000769A0                            
000769A0                            loc_72D52:				; XREF: loc_72A64
000769A0 08D5 0003                  		bset	#3,(a5)
000769A4 4E75                       		rts	
000769A6                            ; ===========================================================================
000769A6                            
000769A6                            loc_72D58:				; XREF: loc_72A64
000769A6 0895 0007                  		bclr	#7,(a5)
000769AA 0895 0004                  		bclr	#4,(a5)
000769AE 4A2D 0001                  		tst.b	1(a5)
000769B2 6B00                       		bmi.s	loc_72D74
000769B4 4A2E 0008                  		tst.b	8(a6)
000769B8 6B00 0000                  		bmi.w	loc_72E02
000769BC 4EBA F98E                  		jsr	sub_726FE(pc)
000769C0 6000                       		bra.s	loc_72D78
000769C2                            ; ===========================================================================
000769C2                            
000769C2                            loc_72D74:
000769C2 4EBA FC2A                  		jsr	sub_729A0(pc)
000769C6                            
000769C6                            loc_72D78:
000769C6 4A2E 000E                  		tst.b	$E(a6)
000769CA 6A00 0000                  		bpl.w	loc_72E02
000769CE 4216                       		clr.b	0(a6)
000769D0 7000                       		moveq	#0,d0
000769D2 102D 0001                  		move.b	1(a5),d0
000769D6 6B00                       		bmi.s	loc_72DCC
000769D8 41FA F546                  		lea	dword_722CC(pc),a0
000769DC 264D                       		movea.l	a5,a3
000769DE 0C00 0004                  		cmpi.b	#4,d0
000769E2 6600                       		bne.s	loc_72DA8
000769E4 4A2E 0340                  		tst.b	$340(a6)
000769E8 6A00                       		bpl.s	loc_72DA8
000769EA 4BEE 0340                  		lea	$340(a6),a5
000769EE 226E 0020                  		movea.l	$20(a6),a1
000769F2 6000                       		bra.s	loc_72DB8
000769F4                            ; ===========================================================================
000769F4                            
000769F4                            loc_72DA8:
000769F4 5500                       		subq.b	#2,d0
000769F6 E508                       		lsl.b	#2,d0
000769F8 2A70 0000                  		movea.l	(a0,d0.w),a5
000769FC 4A15                       		tst.b	(a5)
000769FE 6A00                       		bpl.s	loc_72DC8
00076A00 226E 0018                  		movea.l	$18(a6),a1
00076A04                            
00076A04                            loc_72DB8:
00076A04 0895 0002                  		bclr	#2,(a5)
00076A08 08D5 0001                  		bset	#1,(a5)
00076A0C 102D 000B                  		move.b	$B(a5),d0
00076A10 4EBA FE8A                  		jsr	sub_72C4E(pc)
00076A14                            
00076A14                            loc_72DC8:
00076A14 2A4B                       		movea.l	a3,a5
00076A16 6000                       		bra.s	loc_72E02
00076A18                            ; ===========================================================================
00076A18                            
00076A18                            loc_72DCC:
00076A18 41EE 0370                  		lea	$370(a6),a0
00076A1C 4A10                       		tst.b	(a0)
00076A1E 6A00                       		bpl.s	loc_72DE0
00076A20 0C00 00E0                  		cmpi.b	#$E0,d0
00076A24 6700                       		beq.s	loc_72DEA
00076A26 0C00 00C0                  		cmpi.b	#$C0,d0
00076A2A 6700                       		beq.s	loc_72DEA
00076A2C                            
00076A2C                            loc_72DE0:
00076A2C 41FA F4F2                  		lea	dword_722CC(pc),a0
00076A30 E608                       		lsr.b	#3,d0
00076A32 2070 0000                  		movea.l	(a0,d0.w),a0
00076A36                            
00076A36                            loc_72DEA:
00076A36 0890 0002                  		bclr	#2,(a0)
00076A3A 08D0 0001                  		bset	#1,(a0)
00076A3E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00076A44 6600                       		bne.s	loc_72E02
00076A46 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00076A4E                            
00076A4E                            loc_72E02:
00076A4E 504F                       		addq.w	#8,sp
00076A50 4E75                       		rts	
00076A52                            ; ===========================================================================
00076A52                            
00076A52                            loc_72E06:				; XREF: loc_72A64
00076A52 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00076A58 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00076A5C 0815 0002                  		btst	#2,(a5)
00076A60 6600                       		bne.s	locret_72E1E
00076A62 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00076A6A                            
00076A6A                            locret_72E1E:
00076A6A 4E75                       		rts	
00076A6C                            ; ===========================================================================
00076A6C                            
00076A6C                            loc_72E20:				; XREF: loc_72A64
00076A6C 0895 0003                  		bclr	#3,(a5)
00076A70 4E75                       		rts	
00076A72                            ; ===========================================================================
00076A72                            
00076A72                            loc_72E26:				; XREF: loc_72A64
00076A72 1B5C 000B                  		move.b	(a4)+,$B(a5)
00076A76 4E75                       		rts	
00076A78                            ; ===========================================================================
00076A78                            
00076A78                            loc_72E2C:				; XREF: loc_72A64
00076A78 101C                       		move.b	(a4)+,d0
00076A7A E148                       		lsl.w	#8,d0
00076A7C 101C                       		move.b	(a4)+,d0
00076A7E D8C0                       		adda.w	d0,a4
00076A80 534C                       		subq.w	#1,a4
00076A82 4E75                       		rts	
00076A84                            ; ===========================================================================
00076A84                            
00076A84                            loc_72E38:				; XREF: loc_72A64
00076A84 7000                       		moveq	#0,d0
00076A86 101C                       		move.b	(a4)+,d0
00076A88 121C                       		move.b	(a4)+,d1
00076A8A 4A35 0024                  		tst.b	$24(a5,d0.w)
00076A8E 6600                       		bne.s	loc_72E48
00076A90 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00076A94                            
00076A94                            loc_72E48:
00076A94 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00076A98 66DE                       		bne.s	loc_72E2C
00076A9A 544C                       		addq.w	#2,a4
00076A9C 4E75                       		rts	
00076A9E                            ; ===========================================================================
00076A9E                            
00076A9E                            loc_72E52:				; XREF: loc_72A64
00076A9E 7000                       		moveq	#0,d0
00076AA0 102D 000D                  		move.b	$D(a5),d0
00076AA4 5900                       		subq.b	#4,d0
00076AA6 2B8C 0000                  		move.l	a4,(a5,d0.w)
00076AAA 1B40 000D                  		move.b	d0,$D(a5)
00076AAE 60C8                       		bra.s	loc_72E2C
00076AB0                            ; ===========================================================================
00076AB0                            
00076AB0                            loc_72E64:				; XREF: loc_72A64
00076AB0 103C 0088                  		move.b	#$88,d0
00076AB4 123C 000F                  		move.b	#$F,d1
00076AB8 4EBA F8C2                  		jsr	sub_7272E(pc)
00076ABC 103C 008C                  		move.b	#$8C,d0
00076AC0 123C 000F                  		move.b	#$F,d1
00076AC4 6000 F8B6                  		bra.w	sub_7272E
00076AC8                            ; ===========================================================================
00076AC8                            Kos_Z80:	incbin	sound\z80_1.bin
00076B78 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076B7A 21                         		dc.b $21
00076B7B 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076B7D                            		incbin	sound\z80_2.bin
00078228                            		even
00078228                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007EA28                            		even
0007EA28                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
000882C6                            		even
000882C6                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0008BEE6 00                         		even
0008BEE6                            Music84:	include	sound\music84.asm ; Star Light Act 1
0008BEE6                            music84_Header:
0008BEE6 =00000001                  smpsHeaderStartSong = 1
0008BEE6 0000                       	smpsHeaderVoice     music84_Voices
0008BEE8 0603                       	smpsHeaderChan      $06, $03
0008BEEA 0205                       	smpsHeaderTempo     $02, $05
0008BEEC                            
0008BEF0 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0008BEF4 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0008BEF8 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
0008BEFC 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0008BF00 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0008BF04 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
0008BF0A 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0008BF10 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0008BF16                            
0008BF16                            ; FM1 Data
0008BF16                            music84_FM1:
0008BF16 E0C0                       	smpsPan             panCenter, $00
0008BF1A E107                       	smpsAlterNote       $07
0008BF1C 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0008BF20 E106                       	smpsAlterNote       $06
0008BF22 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0008BF26 E10B                       	smpsAlterNote       $0B
0008BF28 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0008BF2E E10C                       	smpsAlterNote       $0C
0008BF30 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008BF33 E10B                       	smpsAlterNote       $0B
0008BF35 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BF38 E109                       	smpsAlterNote       $09
0008BF3A E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0008BF3F E108                       	smpsAlterNote       $08
0008BF41 8001                       	dc.b	nRst, $01
0008BF43 E10B                       	smpsAlterNote       $0B
0008BF45 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
0008BF4B E107                       	smpsAlterNote       $07
0008BF4D 9B03                       	dc.b	nD2, $03
0008BF4F                            
0008BF4F                            music84_Jump04:
0008BF4F E107                       	smpsAlterNote       $07
0008BF51 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008BF55 E10B                       	smpsAlterNote       $0B
0008BF57 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008BF5B E107                       	smpsAlterNote       $07
0008BF5D 9B03                       	dc.b	nD2, $03
0008BF5F E11A                       	smpsAlterNote       $1A
0008BF61 A301                       	dc.b	nBb2, $01
0008BF63 E1F2                       	smpsAlterNote       $F2
0008BF65 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BF68 E1FF                       	smpsAlterNote       $FF
0008BF6A E701                       	dc.b	smpsNoAttack, $01
0008BF6C E111                       	smpsAlterNote       $11
0008BF6E E701                       	dc.b	smpsNoAttack, $01
0008BF70 E106                       	smpsAlterNote       $06
0008BF72 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008BF75 E107                       	smpsAlterNote       $07
0008BF77 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008BF7B E108                       	smpsAlterNote       $08
0008BF7D 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008BF85 E109                       	smpsAlterNote       $09
0008BF87 A003                       	dc.b	nG2, $03
0008BF89 E10C                       	smpsAlterNote       $0C
0008BF8B A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008BF8F E1FD                       	smpsAlterNote       $FD
0008BF91 A401                       	dc.b	nB2, $01
0008BF93 E109                       	smpsAlterNote       $09
0008BF95 E701                       	dc.b	smpsNoAttack, $01
0008BF97 E106                       	smpsAlterNote       $06
0008BF99 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008BF9C E109                       	smpsAlterNote       $09
0008BF9E A007                       	dc.b	nG2, $07
0008BFA0 E108                       	smpsAlterNote       $08
0008BFA2 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008BFA6 E107                       	smpsAlterNote       $07
0008BFA8 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008BFAE E10B                       	smpsAlterNote       $0B
0008BFB0 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008BFB4 E107                       	smpsAlterNote       $07
0008BFB6 9B03                       	dc.b	nD2, $03
0008BFB8 E11A                       	smpsAlterNote       $1A
0008BFBA A301                       	dc.b	nBb2, $01
0008BFBC E1F9                       	smpsAlterNote       $F9
0008BFBE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BFC1 E107                       	smpsAlterNote       $07
0008BFC3 E701                       	dc.b	smpsNoAttack, $01
0008BFC5 E111                       	smpsAlterNote       $11
0008BFC7 E701                       	dc.b	smpsNoAttack, $01
0008BFC9 E106                       	smpsAlterNote       $06
0008BFCB E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008BFD0 E107                       	smpsAlterNote       $07
0008BFD2 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008BFDA E1EC                       	smpsAlterNote       $EC
0008BFDC A101                       	dc.b	nAb2, $01
0008BFDE E108                       	smpsAlterNote       $08
0008BFE0 E701                       	dc.b	smpsNoAttack, $01
0008BFE2 E116                       	smpsAlterNote       $16
0008BFE4 E701                       	dc.b	smpsNoAttack, $01
0008BFE6 E1F5                       	smpsAlterNote       $F5
0008BFE8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BFEB E10B                       	smpsAlterNote       $0B
0008BFED E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BFF1 E107                       	smpsAlterNote       $07
0008BFF3 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008BFF9 E109                       	smpsAlterNote       $09
0008BFFB 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008BFFF E10B                       	smpsAlterNote       $0B
0008C001 9603                       	dc.b	nA1, $03
0008C003 E107                       	smpsAlterNote       $07
0008C005 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C00B E10B                       	smpsAlterNote       $0B
0008C00D A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C011 E107                       	smpsAlterNote       $07
0008C013 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C017 E11A                       	smpsAlterNote       $1A
0008C019 A301                       	dc.b	nBb2, $01
0008C01B E1F9                       	smpsAlterNote       $F9
0008C01D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C020 E107                       	smpsAlterNote       $07
0008C022 E701                       	dc.b	smpsNoAttack, $01
0008C024 E1FB                       	smpsAlterNote       $FB
0008C026 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C029 E106                       	smpsAlterNote       $06
0008C02B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C02F E107                       	smpsAlterNote       $07
0008C031 9B03                       	dc.b	nD2, $03
0008C033 E108                       	smpsAlterNote       $08
0008C035 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C03B E109                       	smpsAlterNote       $09
0008C03D A002 8001                  	dc.b	nG2, $02, nRst, $01
0008C041 E10C                       	smpsAlterNote       $0C
0008C043 A303                       	dc.b	nBb2, $03
0008C045 E1F0                       	smpsAlterNote       $F0
0008C047 A401                       	dc.b	nB2, $01
0008C049 E1FD                       	smpsAlterNote       $FD
0008C04B E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008C050 E106                       	smpsAlterNote       $06
0008C052 8001                       	dc.b	nRst, $01
0008C054 E109                       	smpsAlterNote       $09
0008C056 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C05A E108                       	smpsAlterNote       $08
0008C05C 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008C060 E107                       	smpsAlterNote       $07
0008C062 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C068 E10B                       	smpsAlterNote       $0B
0008C06A A203                       	dc.b	nA2, $03
0008C06C E107                       	smpsAlterNote       $07
0008C06E 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C072 E1F2                       	smpsAlterNote       $F2
0008C074 A401                       	dc.b	nB2, $01
0008C076 E1FF                       	smpsAlterNote       $FF
0008C078 E701                       	dc.b	smpsNoAttack, $01
0008C07A E107                       	smpsAlterNote       $07
0008C07C E701                       	dc.b	smpsNoAttack, $01
0008C07E E1FB                       	smpsAlterNote       $FB
0008C080 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C083 E106                       	smpsAlterNote       $06
0008C085 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C089 E107                       	smpsAlterNote       $07
0008C08B 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0008C095 E117                       	smpsAlterNote       $17
0008C097 A001                       	dc.b	nG2, $01
0008C099 E1FA                       	smpsAlterNote       $FA
0008C09B E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C09E E108                       	smpsAlterNote       $08
0008C0A0 E701                       	dc.b	smpsNoAttack, $01
0008C0A2 E1E7                       	smpsAlterNote       $E7
0008C0A4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C0A7 E103                       	smpsAlterNote       $03
0008C0A9 E701                       	dc.b	smpsNoAttack, $01
0008C0AB E10B                       	smpsAlterNote       $0B
0008C0AD E702                       	dc.b	smpsNoAttack, $02
0008C0AF E107                       	smpsAlterNote       $07
0008C0B1 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
0008C0B9 E106                       	smpsAlterNote       $06
0008C0BB 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0008C0C1 E10C                       	smpsAlterNote       $0C
0008C0C3 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0008C0C9 E109                       	smpsAlterNote       $09
0008C0CB 9E03                       	dc.b	nF2, $03
0008C0CD E10C                       	smpsAlterNote       $0C
0008C0CF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C0D3 E1EA                       	smpsAlterNote       $EA
0008C0D5 A201                       	dc.b	nA2, $01
0008C0D7 E106                       	smpsAlterNote       $06
0008C0D9 E701                       	dc.b	smpsNoAttack, $01
0008C0DB E1E2                       	smpsAlterNote       $E2
0008C0DD E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C0E0 E1F0                       	smpsAlterNote       $F0
0008C0E2 E701                       	dc.b	smpsNoAttack, $01
0008C0E4 E10C                       	smpsAlterNote       $0C
0008C0E6 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C0F2 E116                       	smpsAlterNote       $16
0008C0F4 9C01                       	dc.b	nEb2, $01
0008C0F6 E105                       	smpsAlterNote       $05
0008C0F8 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C0FB E1F1                       	smpsAlterNote       $F1
0008C0FD E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C100 E1FF                       	smpsAlterNote       $FF
0008C102 E701                       	dc.b	smpsNoAttack, $01
0008C104 E109                       	smpsAlterNote       $09
0008C106 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C10A E10C                       	smpsAlterNote       $0C
0008C10C 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C118 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008C11E E109                       	smpsAlterNote       $09
0008C120 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C124 E10C                       	smpsAlterNote       $0C
0008C126 9703                       	dc.b	nBb1, $03
0008C128 E11A                       	smpsAlterNote       $1A
0008C12A A101                       	dc.b	nAb2, $01
0008C12C E1FB                       	smpsAlterNote       $FB
0008C12E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C131 E10A                       	smpsAlterNote       $0A
0008C133 E701                       	dc.b	smpsNoAttack, $01
0008C135 E1E8                       	smpsAlterNote       $E8
0008C137 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C13A E106                       	smpsAlterNote       $06
0008C13C E701                       	dc.b	smpsNoAttack, $01
0008C13E E10C                       	smpsAlterNote       $0C
0008C140 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
0008C14C E1F9                       	smpsAlterNote       $F9
0008C14E 9D01                       	dc.b	nE2, $01
0008C150 E108                       	smpsAlterNote       $08
0008C152 E701                       	dc.b	smpsNoAttack, $01
0008C154 E1F6                       	smpsAlterNote       $F6
0008C156 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C159 E109                       	smpsAlterNote       $09
0008C15B E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008C15F E10C                       	smpsAlterNote       $0C
0008C161 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
0008C16D E108                       	smpsAlterNote       $08
0008C16F 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008C175 E106                       	smpsAlterNote       $06
0008C177 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C17B E108                       	smpsAlterNote       $08
0008C17D 9D03                       	dc.b	nE2, $03
0008C17F E1EB                       	smpsAlterNote       $EB
0008C181 A801                       	dc.b	nEb3, $01
0008C183 E109                       	smpsAlterNote       $09
0008C185 E701                       	dc.b	smpsNoAttack, $01
0008C187 E1FA                       	smpsAlterNote       $FA
0008C189 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C18C E108                       	smpsAlterNote       $08
0008C18E E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
0008C19A E1E9                       	smpsAlterNote       $E9
0008C19C A301                       	dc.b	nBb2, $01
0008C19E E107                       	smpsAlterNote       $07
0008C1A0 E701                       	dc.b	smpsNoAttack, $01
0008C1A2 E1F0                       	smpsAlterNote       $F0
0008C1A4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C1A7 E1F7                       	smpsAlterNote       $F7
0008C1A9 E701                       	dc.b	smpsNoAttack, $01
0008C1AB E107                       	smpsAlterNote       $07
0008C1AD E701                       	dc.b	smpsNoAttack, $01
0008C1AF E106                       	smpsAlterNote       $06
0008C1B1 E701                       	dc.b	smpsNoAttack, $01
0008C1B3 E108                       	smpsAlterNote       $08
0008C1B5 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008C1BB E106                       	smpsAlterNote       $06
0008C1BD A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C1C1 E108                       	smpsAlterNote       $08
0008C1C3 9D03                       	dc.b	nE2, $03
0008C1C5 E10B                       	smpsAlterNote       $0B
0008C1C7 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0008C1CF E108                       	smpsAlterNote       $08
0008C1D1 9D03                       	dc.b	nE2, $03
0008C1D3 E10B                       	smpsAlterNote       $0B
0008C1D5 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C1D9 E113                       	smpsAlterNote       $13
0008C1DB A001                       	dc.b	nG2, $01
0008C1DD E118                       	smpsAlterNote       $18
0008C1DF E701                       	dc.b	smpsNoAttack, $01
0008C1E1 E1E9                       	smpsAlterNote       $E9
0008C1E3 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C1E6 E1F3                       	smpsAlterNote       $F3
0008C1E8 E701                       	dc.b	smpsNoAttack, $01
0008C1EA E1FD                       	smpsAlterNote       $FD
0008C1EC E701                       	dc.b	smpsNoAttack, $01
0008C1EE E102                       	smpsAlterNote       $02
0008C1F0 E701                       	dc.b	smpsNoAttack, $01
0008C1F2 E107                       	smpsAlterNote       $07
0008C1F4 8001                       	dc.b	nRst, $01
0008C1F6 E10B                       	smpsAlterNote       $0B
0008C1F8 9603                       	dc.b	nA1, $03
0008C1FA E10C                       	smpsAlterNote       $0C
0008C1FC 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008C202 E10B                       	smpsAlterNote       $0B
0008C204 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C210 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0008C216 E107                       	smpsAlterNote       $07
0008C218 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C21E E10B                       	smpsAlterNote       $0B
0008C220 A203                       	dc.b	nA2, $03
0008C222 E107                       	smpsAlterNote       $07
0008C224 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C228 E1F2                       	smpsAlterNote       $F2
0008C22A A401                       	dc.b	nB2, $01
0008C22C E1FF                       	smpsAlterNote       $FF
0008C22E E701                       	dc.b	smpsNoAttack, $01
0008C230 E107                       	smpsAlterNote       $07
0008C232 E701                       	dc.b	smpsNoAttack, $01
0008C234 E1FB                       	smpsAlterNote       $FB
0008C236 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C239 E106                       	smpsAlterNote       $06
0008C23B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C23F E107                       	smpsAlterNote       $07
0008C241 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C245 E108                       	smpsAlterNote       $08
0008C247 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C24D E109                       	smpsAlterNote       $09
0008C24F A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C253 E10C                       	smpsAlterNote       $0C
0008C255 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008C259 E1F0                       	smpsAlterNote       $F0
0008C25B A401                       	dc.b	nB2, $01
0008C25D E109                       	smpsAlterNote       $09
0008C25F E701                       	dc.b	smpsNoAttack, $01
0008C261 E106                       	smpsAlterNote       $06
0008C263 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C266 E109                       	smpsAlterNote       $09
0008C268 A007                       	dc.b	nG2, $07
0008C26A E108                       	smpsAlterNote       $08
0008C26C 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C270 E107                       	smpsAlterNote       $07
0008C272 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C278 E10B                       	smpsAlterNote       $0B
0008C27A A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C27E E107                       	smpsAlterNote       $07
0008C280 9B03                       	dc.b	nD2, $03
0008C282 E11A                       	smpsAlterNote       $1A
0008C284 A301                       	dc.b	nBb2, $01
0008C286 E1F2                       	smpsAlterNote       $F2
0008C288 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C28B E1FF                       	smpsAlterNote       $FF
0008C28D E701                       	dc.b	smpsNoAttack, $01
0008C28F E111                       	smpsAlterNote       $11
0008C291 E701                       	dc.b	smpsNoAttack, $01
0008C293 E106                       	smpsAlterNote       $06
0008C295 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C298 E107                       	smpsAlterNote       $07
0008C29A 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C2A6 E117                       	smpsAlterNote       $17
0008C2A8 A001                       	dc.b	nG2, $01
0008C2AA E1FA                       	smpsAlterNote       $FA
0008C2AC E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C2AF E116                       	smpsAlterNote       $16
0008C2B1 E701                       	dc.b	smpsNoAttack, $01
0008C2B3 E1F5                       	smpsAlterNote       $F5
0008C2B5 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C2B8 E103                       	smpsAlterNote       $03
0008C2BA E701                       	dc.b	smpsNoAttack, $01
0008C2BC E10B                       	smpsAlterNote       $0B
0008C2BE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C2C2 E107                       	smpsAlterNote       $07
0008C2C4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C2CA E109                       	smpsAlterNote       $09
0008C2CC 9E03                       	dc.b	nF2, $03
0008C2CE E10B                       	smpsAlterNote       $0B
0008C2D0 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C2D4 E107                       	smpsAlterNote       $07
0008C2D6 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C2DC E10B                       	smpsAlterNote       $0B
0008C2DE A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C2E2 E107                       	smpsAlterNote       $07
0008C2E4 9B03                       	dc.b	nD2, $03
0008C2E6 E11A                       	smpsAlterNote       $1A
0008C2E8 A301                       	dc.b	nBb2, $01
0008C2EA E1F9                       	smpsAlterNote       $F9
0008C2EC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C2EF E107                       	smpsAlterNote       $07
0008C2F1 E701                       	dc.b	smpsNoAttack, $01
0008C2F3 E111                       	smpsAlterNote       $11
0008C2F5 E701                       	dc.b	smpsNoAttack, $01
0008C2F7 E106                       	smpsAlterNote       $06
0008C2F9 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008C2FE E107                       	smpsAlterNote       $07
0008C300 9B03                       	dc.b	nD2, $03
0008C302 E108                       	smpsAlterNote       $08
0008C304 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C30A E109                       	smpsAlterNote       $09
0008C30C A003                       	dc.b	nG2, $03
0008C30E E10C                       	smpsAlterNote       $0C
0008C310 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C314 E1FD                       	smpsAlterNote       $FD
0008C316 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
0008C31B E106                       	smpsAlterNote       $06
0008C31D 8001                       	dc.b	nRst, $01
0008C31F E109                       	smpsAlterNote       $09
0008C321 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C325 E108                       	smpsAlterNote       $08
0008C327 9C03                       	dc.b	nEb2, $03
0008C329 E107                       	smpsAlterNote       $07
0008C32B 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C331 E10B                       	smpsAlterNote       $0B
0008C333 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C337 E107                       	smpsAlterNote       $07
0008C339 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C33D E11A                       	smpsAlterNote       $1A
0008C33F A301                       	dc.b	nBb2, $01
0008C341 E1F9                       	smpsAlterNote       $F9
0008C343 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C346 E107                       	smpsAlterNote       $07
0008C348 E701                       	dc.b	smpsNoAttack, $01
0008C34A E1FB                       	smpsAlterNote       $FB
0008C34C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C34F E106                       	smpsAlterNote       $06
0008C351 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C355 E107                       	smpsAlterNote       $07
0008C357 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C35F E1EC                       	smpsAlterNote       $EC
0008C361 A101                       	dc.b	nAb2, $01
0008C363 E108                       	smpsAlterNote       $08
0008C365 E701                       	dc.b	smpsNoAttack, $01
0008C367 E1E7                       	smpsAlterNote       $E7
0008C369 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C36C E1F5                       	smpsAlterNote       $F5
0008C36E E701                       	dc.b	smpsNoAttack, $01
0008C370 E10B                       	smpsAlterNote       $0B
0008C372 E702                       	dc.b	smpsNoAttack, $02
0008C374 E107                       	smpsAlterNote       $07
0008C376 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C37C E106                       	smpsAlterNote       $06
0008C37E 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C384 E10C                       	smpsAlterNote       $0C
0008C386 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C38E E109                       	smpsAlterNote       $09
0008C390 9E03                       	dc.b	nF2, $03
0008C392 E10C                       	smpsAlterNote       $0C
0008C394 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C398 E1EA                       	smpsAlterNote       $EA
0008C39A A201                       	dc.b	nA2, $01
0008C39C E106                       	smpsAlterNote       $06
0008C39E E701                       	dc.b	smpsNoAttack, $01
0008C3A0 E114                       	smpsAlterNote       $14
0008C3A2 E701                       	dc.b	smpsNoAttack, $01
0008C3A4 E1F0                       	smpsAlterNote       $F0
0008C3A6 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C3A9 E10C                       	smpsAlterNote       $0C
0008C3AB E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C3B7 9703                       	dc.b	nBb1, $03
0008C3B9 E116                       	smpsAlterNote       $16
0008C3BB 9C01                       	dc.b	nEb2, $01
0008C3BD E105                       	smpsAlterNote       $05
0008C3BF E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C3C2 E113                       	smpsAlterNote       $13
0008C3C4 E701                       	dc.b	smpsNoAttack, $01
0008C3C6 E1FF                       	smpsAlterNote       $FF
0008C3C8 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C3CB E109                       	smpsAlterNote       $09
0008C3CD E703                       	dc.b	smpsNoAttack, $03
0008C3CF E10C                       	smpsAlterNote       $0C
0008C3D1 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C3DD 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C3E5 E109                       	smpsAlterNote       $09
0008C3E7 9E03                       	dc.b	nF2, $03
0008C3E9 E10C                       	smpsAlterNote       $0C
0008C3EB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C3EF E1EC                       	smpsAlterNote       $EC
0008C3F1 A201                       	dc.b	nA2, $01
0008C3F3 E10A                       	smpsAlterNote       $0A
0008C3F5 E701                       	dc.b	smpsNoAttack, $01
0008C3F7 E1E8                       	smpsAlterNote       $E8
0008C3F9 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C3FC E1F7                       	smpsAlterNote       $F7
0008C3FE E701                       	dc.b	smpsNoAttack, $01
0008C400 E10C                       	smpsAlterNote       $0C
0008C402 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C40E E1EA                       	smpsAlterNote       $EA
0008C410 9D01                       	dc.b	nE2, $01
0008C412 E108                       	smpsAlterNote       $08
0008C414 E701                       	dc.b	smpsNoAttack, $01
0008C416 E1F6                       	smpsAlterNote       $F6
0008C418 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C41B E105                       	smpsAlterNote       $05
0008C41D E701                       	dc.b	smpsNoAttack, $01
0008C41F E109                       	smpsAlterNote       $09
0008C421 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C425 E10C                       	smpsAlterNote       $0C
0008C427 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C433 E108                       	smpsAlterNote       $08
0008C435 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
0008C43B E106                       	smpsAlterNote       $06
0008C43D A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C441 E108                       	smpsAlterNote       $08
0008C443 9D03                       	dc.b	nE2, $03
0008C445 E1EB                       	smpsAlterNote       $EB
0008C447 A801                       	dc.b	nEb3, $01
0008C449 E109                       	smpsAlterNote       $09
0008C44B E701                       	dc.b	smpsNoAttack, $01
0008C44D E1EB                       	smpsAlterNote       $EB
0008C44F E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C452 E108                       	smpsAlterNote       $08
0008C454 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0008C460 E1E9                       	smpsAlterNote       $E9
0008C462 A301                       	dc.b	nBb2, $01
0008C464 E1F8                       	smpsAlterNote       $F8
0008C466 E701                       	dc.b	smpsNoAttack, $01
0008C468 E116                       	smpsAlterNote       $16
0008C46A E701                       	dc.b	smpsNoAttack, $01
0008C46C E1F7                       	smpsAlterNote       $F7
0008C46E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C471 E107                       	smpsAlterNote       $07
0008C473 E701                       	dc.b	smpsNoAttack, $01
0008C475 E1EE                       	smpsAlterNote       $EE
0008C477 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C47A E106                       	smpsAlterNote       $06
0008C47C 8001                       	dc.b	nRst, $01
0008C47E E108                       	smpsAlterNote       $08
0008C480 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
0008C486 E106                       	smpsAlterNote       $06
0008C488 A402 8001                  	dc.b	nB2, $02, nRst, $01
0008C48C E108                       	smpsAlterNote       $08
0008C48E 9D03                       	dc.b	nE2, $03
0008C490 E10B                       	smpsAlterNote       $0B
0008C492 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
0008C498 E108                       	smpsAlterNote       $08
0008C49A 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0008C49E E10B                       	smpsAlterNote       $0B
0008C4A0 9603                       	dc.b	nA1, $03
0008C4A2 E10E                       	smpsAlterNote       $0E
0008C4A4 A001                       	dc.b	nG2, $01
0008C4A6 E118                       	smpsAlterNote       $18
0008C4A8 E701                       	dc.b	smpsNoAttack, $01
0008C4AA E1E9                       	smpsAlterNote       $E9
0008C4AC E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C4AF E1EE                       	smpsAlterNote       $EE
0008C4B1 E701                       	dc.b	smpsNoAttack, $01
0008C4B3 E1F8                       	smpsAlterNote       $F8
0008C4B5 E701                       	dc.b	smpsNoAttack, $01
0008C4B7 E102                       	smpsAlterNote       $02
0008C4B9 E701                       	dc.b	smpsNoAttack, $01
0008C4BB E107                       	smpsAlterNote       $07
0008C4BD 8001                       	dc.b	nRst, $01
0008C4BF E10B                       	smpsAlterNote       $0B
0008C4C1 9603                       	dc.b	nA1, $03
0008C4C3 E10C                       	smpsAlterNote       $0C
0008C4C5 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
0008C4CB E10B                       	smpsAlterNote       $0B
0008C4CD 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C4D9 8001 9603                  	dc.b	nRst, $01, nA1, $03
0008C4DD E10C                       	smpsAlterNote       $0C
0008C4DF 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
0008C4EB 8001                       	dc.b	nRst, $01
0008C4ED E10B                       	smpsAlterNote       $0B
0008C4EF 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C4F7 E107                       	smpsAlterNote       $07
0008C4F9 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C4FD E10B                       	smpsAlterNote       $0B
0008C4FF 9603                       	dc.b	nA1, $03
0008C501 E109                       	smpsAlterNote       $09
0008C503 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C507 E108                       	smpsAlterNote       $08
0008C509 9D06                       	dc.b	nE2, $06
0008C50B E107                       	smpsAlterNote       $07
0008C50D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C511 E106                       	smpsAlterNote       $06
0008C513 9903                       	dc.b	nC2, $03
0008C515 E10C                       	smpsAlterNote       $0C
0008C517 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C51B E10B                       	smpsAlterNote       $0B
0008C51D 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C529 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C533 E10C                       	smpsAlterNote       $0C
0008C535 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0008C541 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C54D 8001                       	dc.b	nRst, $01
0008C54F E10B                       	smpsAlterNote       $0B
0008C551 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C55D 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
0008C569 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
0008C575 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C57F E10C                       	smpsAlterNote       $0C
0008C581 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
0008C58D E10B                       	smpsAlterNote       $0B
0008C58F 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C597 E107                       	smpsAlterNote       $07
0008C599 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C59D E10B                       	smpsAlterNote       $0B
0008C59F 9603                       	dc.b	nA1, $03
0008C5A1 E109                       	smpsAlterNote       $09
0008C5A3 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C5A7 E108                       	smpsAlterNote       $08
0008C5A9 9D06 8001                  	dc.b	nE2, $06, nRst, $01
0008C5AD E107                       	smpsAlterNote       $07
0008C5AF 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C5B3 E106                       	smpsAlterNote       $06
0008C5B5 9903                       	dc.b	nC2, $03
0008C5B7 E10C                       	smpsAlterNote       $0C
0008C5B9 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C5BD E10B                       	smpsAlterNote       $0B
0008C5BF 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C5CB 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C5D5 E10C                       	smpsAlterNote       $0C
0008C5D7 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
0008C5E3 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C5EF 8001                       	dc.b	nRst, $01
0008C5F1 E10B                       	smpsAlterNote       $0B
0008C5F3 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C5FF 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C609 E10C                       	smpsAlterNote       $0C
0008C60B 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C617 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0008C623 E10B                       	smpsAlterNote       $0B
0008C625 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C631 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C63B E10C                       	smpsAlterNote       $0C
0008C63D 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C649 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0008C655 E10B                       	smpsAlterNote       $0B
0008C657 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0008C663 8001                       	dc.b	nRst, $01
0008C665 E1EC                       	smpsAlterNote       $EC
0008C667 A101                       	dc.b	nAb2, $01
0008C669 E1FA                       	smpsAlterNote       $FA
0008C66B E701                       	dc.b	smpsNoAttack, $01
0008C66D E116                       	smpsAlterNote       $16
0008C66F E701                       	dc.b	smpsNoAttack, $01
0008C671 E1F5                       	smpsAlterNote       $F5
0008C673 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C676 E10B                       	smpsAlterNote       $0B
0008C678 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0008C684 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0008C690 E107                       	smpsAlterNote       $07
0008C692 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C698 E10B                       	smpsAlterNote       $0B
0008C69A A203                       	dc.b	nA2, $03
0008C69C E107                       	smpsAlterNote       $07
0008C69E 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C6A2 E1F3                       	smpsAlterNote       $F3
0008C6A4 A401                       	dc.b	nB2, $01
0008C6A6 E102                       	smpsAlterNote       $02
0008C6A8 E701                       	dc.b	smpsNoAttack, $01
0008C6AA E109                       	smpsAlterNote       $09
0008C6AC E701                       	dc.b	smpsNoAttack, $01
0008C6AE E102                       	smpsAlterNote       $02
0008C6B0 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C6B3 E106                       	smpsAlterNote       $06
0008C6B5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C6B9 E107                       	smpsAlterNote       $07
0008C6BB 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C6BF E108                       	smpsAlterNote       $08
0008C6C1 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C6C7 E109                       	smpsAlterNote       $09
0008C6C9 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C6CD E1F2                       	smpsAlterNote       $F2
0008C6CF A401                       	dc.b	nB2, $01
0008C6D1 E1FF                       	smpsAlterNote       $FF
0008C6D3 E701                       	dc.b	smpsNoAttack, $01
0008C6D5 E111                       	smpsAlterNote       $11
0008C6D7 E701                       	dc.b	smpsNoAttack, $01
0008C6D9 E1FB                       	smpsAlterNote       $FB
0008C6DB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C6DE E106                       	smpsAlterNote       $06
0008C6E0 E702                       	dc.b	smpsNoAttack, $02
0008C6E2 E109                       	smpsAlterNote       $09
0008C6E4 A007                       	dc.b	nG2, $07
0008C6E6 E108                       	smpsAlterNote       $08
0008C6E8 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C6EC E107                       	smpsAlterNote       $07
0008C6EE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C6F4 E10B                       	smpsAlterNote       $0B
0008C6F6 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C6FA E107                       	smpsAlterNote       $07
0008C6FC 9B03                       	dc.b	nD2, $03
0008C6FE E11A                       	smpsAlterNote       $1A
0008C700 A301                       	dc.b	nBb2, $01
0008C702 E1F2                       	smpsAlterNote       $F2
0008C704 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C707 E1FF                       	smpsAlterNote       $FF
0008C709 E701                       	dc.b	smpsNoAttack, $01
0008C70B E111                       	smpsAlterNote       $11
0008C70D E701                       	dc.b	smpsNoAttack, $01
0008C70F E106                       	smpsAlterNote       $06
0008C711 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C714 E107                       	smpsAlterNote       $07
0008C716 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C722 E117                       	smpsAlterNote       $17
0008C724 A001                       	dc.b	nG2, $01
0008C726 E1FA                       	smpsAlterNote       $FA
0008C728 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C72B E116                       	smpsAlterNote       $16
0008C72D E701                       	dc.b	smpsNoAttack, $01
0008C72F E1F5                       	smpsAlterNote       $F5
0008C731 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C734 E103                       	smpsAlterNote       $03
0008C736 E701                       	dc.b	smpsNoAttack, $01
0008C738 E10B                       	smpsAlterNote       $0B
0008C73A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C73E E107                       	smpsAlterNote       $07
0008C740 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C746 E109                       	smpsAlterNote       $09
0008C748 9E03                       	dc.b	nF2, $03
0008C74A E10B                       	smpsAlterNote       $0B
0008C74C 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C750 E107                       	smpsAlterNote       $07
0008C752 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C758 E10B                       	smpsAlterNote       $0B
0008C75A A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C75E E107                       	smpsAlterNote       $07
0008C760 9B03                       	dc.b	nD2, $03
0008C762 E11A                       	smpsAlterNote       $1A
0008C764 A301                       	dc.b	nBb2, $01
0008C766 E1F9                       	smpsAlterNote       $F9
0008C768 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C76B E1FF                       	smpsAlterNote       $FF
0008C76D E701                       	dc.b	smpsNoAttack, $01
0008C76F E111                       	smpsAlterNote       $11
0008C771 E701                       	dc.b	smpsNoAttack, $01
0008C773 E106                       	smpsAlterNote       $06
0008C775 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C778 E107                       	smpsAlterNote       $07
0008C77A 9B03                       	dc.b	nD2, $03
0008C77C E108                       	smpsAlterNote       $08
0008C77E 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C784 E109                       	smpsAlterNote       $09
0008C786 A003                       	dc.b	nG2, $03
0008C788 E1F0                       	smpsAlterNote       $F0
0008C78A A501                       	dc.b	nC3, $01
0008C78C E106                       	smpsAlterNote       $06
0008C78E E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0008C792 E109                       	smpsAlterNote       $09
0008C794 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C798 E108                       	smpsAlterNote       $08
0008C79A 9C03                       	dc.b	nEb2, $03
0008C79C E107                       	smpsAlterNote       $07
0008C79E 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C7A4 E10B                       	smpsAlterNote       $0B
0008C7A6 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C7AA E107                       	smpsAlterNote       $07
0008C7AC 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C7B0 E11A                       	smpsAlterNote       $1A
0008C7B2 A301                       	dc.b	nBb2, $01
0008C7B4 E1F9                       	smpsAlterNote       $F9
0008C7B6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C7B9 E107                       	smpsAlterNote       $07
0008C7BB E701                       	dc.b	smpsNoAttack, $01
0008C7BD E1FB                       	smpsAlterNote       $FB
0008C7BF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C7C2 E106                       	smpsAlterNote       $06
0008C7C4 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C7C8 E107                       	smpsAlterNote       $07
0008C7CA 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C7D2 E1EC                       	smpsAlterNote       $EC
0008C7D4 A101                       	dc.b	nAb2, $01
0008C7D6 E108                       	smpsAlterNote       $08
0008C7D8 E701                       	dc.b	smpsNoAttack, $01
0008C7DA E1E7                       	smpsAlterNote       $E7
0008C7DC E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C7DF E1F5                       	smpsAlterNote       $F5
0008C7E1 E701                       	dc.b	smpsNoAttack, $01
0008C7E3 E10B                       	smpsAlterNote       $0B
0008C7E5 E702                       	dc.b	smpsNoAttack, $02
0008C7E7 E107                       	smpsAlterNote       $07
0008C7E9 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C7EF E106                       	smpsAlterNote       $06
0008C7F1 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C7F7 E10C                       	smpsAlterNote       $0C
0008C7F9 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C801 E109                       	smpsAlterNote       $09
0008C803 9E03                       	dc.b	nF2, $03
0008C805 E10C                       	smpsAlterNote       $0C
0008C807 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C80B E1EA                       	smpsAlterNote       $EA
0008C80D A201                       	dc.b	nA2, $01
0008C80F E106                       	smpsAlterNote       $06
0008C811 E701                       	dc.b	smpsNoAttack, $01
0008C813 E114                       	smpsAlterNote       $14
0008C815 E701                       	dc.b	smpsNoAttack, $01
0008C817 E1F0                       	smpsAlterNote       $F0
0008C819 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C81C E10C                       	smpsAlterNote       $0C
0008C81E E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C82A 9703                       	dc.b	nBb1, $03
0008C82C E116                       	smpsAlterNote       $16
0008C82E 9C01                       	dc.b	nEb2, $01
0008C830 E105                       	smpsAlterNote       $05
0008C832 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C835 E113                       	smpsAlterNote       $13
0008C837 E701                       	dc.b	smpsNoAttack, $01
0008C839 E1FF                       	smpsAlterNote       $FF
0008C83B E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C83E E109                       	smpsAlterNote       $09
0008C840 E703                       	dc.b	smpsNoAttack, $03
0008C842 E10C                       	smpsAlterNote       $0C
0008C844 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C850 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C858 E109                       	smpsAlterNote       $09
0008C85A 9E03                       	dc.b	nF2, $03
0008C85C E10C                       	smpsAlterNote       $0C
0008C85E 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C862 E1EA                       	smpsAlterNote       $EA
0008C864 A201                       	dc.b	nA2, $01
0008C866 E106                       	smpsAlterNote       $06
0008C868 E701                       	dc.b	smpsNoAttack, $01
0008C86A E1E2                       	smpsAlterNote       $E2
0008C86C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C86F E1F0                       	smpsAlterNote       $F0
0008C871 E701                       	dc.b	smpsNoAttack, $01
0008C873 E10C                       	smpsAlterNote       $0C
0008C875 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C881 E116                       	smpsAlterNote       $16
0008C883 9C01                       	dc.b	nEb2, $01
0008C885 E105                       	smpsAlterNote       $05
0008C887 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C88A E1F1                       	smpsAlterNote       $F1
0008C88C E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C88F E1FF                       	smpsAlterNote       $FF
0008C891 E701                       	dc.b	smpsNoAttack, $01
0008C893 E109                       	smpsAlterNote       $09
0008C895 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C899 E10C                       	smpsAlterNote       $0C
0008C89B 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
0008C8A7 E106                       	smpsAlterNote       $06
0008C8A9 9903                       	dc.b	nC2, $03
0008C8AB E107                       	smpsAlterNote       $07
0008C8AD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C8B1 E109                       	smpsAlterNote       $09
0008C8B3 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
0008C8B9 E107                       	smpsAlterNote       $07
0008C8BB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C8BF E108                       	smpsAlterNote       $08
0008C8C1 9D03                       	dc.b	nE2, $03
0008C8C3 E10B                       	smpsAlterNote       $0B
0008C8C5 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
0008C8CB E109                       	smpsAlterNote       $09
0008C8CD 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0008C8D3 E10C                       	smpsAlterNote       $0C
0008C8D5 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
0008C8DB E106                       	smpsAlterNote       $06
0008C8DD 9903                       	dc.b	nC2, $03
0008C8DF E11A                       	smpsAlterNote       $1A
0008C8E1 A301                       	dc.b	nBb2, $01
0008C8E3 E1F9                       	smpsAlterNote       $F9
0008C8E5 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C8E8 E1FF                       	smpsAlterNote       $FF
0008C8EA E701                       	dc.b	smpsNoAttack, $01
0008C8EC E111                       	smpsAlterNote       $11
0008C8EE E701                       	dc.b	smpsNoAttack, $01
0008C8F0 E106                       	smpsAlterNote       $06
0008C8F2 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
0008C8F9 E109                       	smpsAlterNote       $09
0008C8FB A003                       	dc.b	nG2, $03
0008C8FD E106                       	smpsAlterNote       $06
0008C8FF 9907                       	dc.b	nC2, $07
0008C901 E107                       	smpsAlterNote       $07
0008C903 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
0008C90B E10B                       	smpsAlterNote       $0B
0008C90D A203                       	dc.b	nA2, $03
0008C90F E107                       	smpsAlterNote       $07
0008C911 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C915 E1F2                       	smpsAlterNote       $F2
0008C917 A401                       	dc.b	nB2, $01
0008C919 E1F9                       	smpsAlterNote       $F9
0008C91B E701                       	dc.b	smpsNoAttack, $01
0008C91D E107                       	smpsAlterNote       $07
0008C91F E701                       	dc.b	smpsNoAttack, $01
0008C921 E1FB                       	smpsAlterNote       $FB
0008C923 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C926 E106                       	smpsAlterNote       $06
0008C928 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C92C E107                       	smpsAlterNote       $07
0008C92E 9B03                       	dc.b	nD2, $03
0008C930 E108                       	smpsAlterNote       $08
0008C932 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008C938 E109                       	smpsAlterNote       $09
0008C93A A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C93E E1F2                       	smpsAlterNote       $F2
0008C940 A401                       	dc.b	nB2, $01
0008C942 E1F9                       	smpsAlterNote       $F9
0008C944 E701                       	dc.b	smpsNoAttack, $01
0008C946 E107                       	smpsAlterNote       $07
0008C948 E701                       	dc.b	smpsNoAttack, $01
0008C94A E1FB                       	smpsAlterNote       $FB
0008C94C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C94F E106                       	smpsAlterNote       $06
0008C951 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C955 E108                       	smpsAlterNote       $08
0008C957 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
0008C95B E10C                       	smpsAlterNote       $0C
0008C95D A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008C961 E107                       	smpsAlterNote       $07
0008C963 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C969 E10B                       	smpsAlterNote       $0B
0008C96B A203                       	dc.b	nA2, $03
0008C96D E107                       	smpsAlterNote       $07
0008C96F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C973 E1F2                       	smpsAlterNote       $F2
0008C975 A401                       	dc.b	nB2, $01
0008C977 E1FF                       	smpsAlterNote       $FF
0008C979 E701                       	dc.b	smpsNoAttack, $01
0008C97B E107                       	smpsAlterNote       $07
0008C97D E701                       	dc.b	smpsNoAttack, $01
0008C97F E1FB                       	smpsAlterNote       $FB
0008C981 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C984 E106                       	smpsAlterNote       $06
0008C986 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C98A E107                       	smpsAlterNote       $07
0008C98C 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C990 E108                       	smpsAlterNote       $08
0008C992 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008C998 E109                       	smpsAlterNote       $09
0008C99A A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C99E E1F2                       	smpsAlterNote       $F2
0008C9A0 A401                       	dc.b	nB2, $01
0008C9A2 E1FF                       	smpsAlterNote       $FF
0008C9A4 E701                       	dc.b	smpsNoAttack, $01
0008C9A6 E111                       	smpsAlterNote       $11
0008C9A8 E701                       	dc.b	smpsNoAttack, $01
0008C9AA E1FB                       	smpsAlterNote       $FB
0008C9AC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C9AF E106                       	smpsAlterNote       $06
0008C9B1 E702                       	dc.b	smpsNoAttack, $02
0008C9B3 E108                       	smpsAlterNote       $08
0008C9B5 9C07                       	dc.b	nEb2, $07
0008C9B7 E10C                       	smpsAlterNote       $0C
0008C9B9 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C9BD E107                       	smpsAlterNote       $07
0008C9BF 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C9C5 E10B                       	smpsAlterNote       $0B
0008C9C7 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C9CB E107                       	smpsAlterNote       $07
0008C9CD 9B03                       	dc.b	nD2, $03
0008C9CF E11A                       	smpsAlterNote       $1A
0008C9D1 A301                       	dc.b	nBb2, $01
0008C9D3 E1F2                       	smpsAlterNote       $F2
0008C9D5 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C9D8 E1FF                       	smpsAlterNote       $FF
0008C9DA E701                       	dc.b	smpsNoAttack, $01
0008C9DC E111                       	smpsAlterNote       $11
0008C9DE E701                       	dc.b	smpsNoAttack, $01
0008C9E0 E106                       	smpsAlterNote       $06
0008C9E2 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C9E5 E107                       	smpsAlterNote       $07
0008C9E7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C9EB E108                       	smpsAlterNote       $08
0008C9ED 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008C9F5 E109                       	smpsAlterNote       $09
0008C9F7 A003                       	dc.b	nG2, $03
0008C9F9 E11A                       	smpsAlterNote       $1A
0008C9FB A301                       	dc.b	nBb2, $01
0008C9FD E1F2                       	smpsAlterNote       $F2
0008C9FF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CA02 E1FF                       	smpsAlterNote       $FF
0008CA04 E701                       	dc.b	smpsNoAttack, $01
0008CA06 E111                       	smpsAlterNote       $11
0008CA08 E701                       	dc.b	smpsNoAttack, $01
0008CA0A E106                       	smpsAlterNote       $06
0008CA0C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CA0F E108                       	smpsAlterNote       $08
0008CA11 9C07                       	dc.b	nEb2, $07
0008CA13 E10C                       	smpsAlterNote       $0C
0008CA15 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008CA19 E107                       	smpsAlterNote       $07
0008CA1B 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
0008CA27 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0008CA31 E108                       	smpsAlterNote       $08
0008CA33 9C06                       	dc.b	nEb2, $06
0008CA35 E10C                       	smpsAlterNote       $0C
0008CA37 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008CA3B E108                       	smpsAlterNote       $08
0008CA3D 9C03                       	dc.b	nEb2, $03
0008CA3F E109                       	smpsAlterNote       $09
0008CA41 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CA45 E10C                       	smpsAlterNote       $0C
0008CA47 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
0008CA4F E107                       	smpsAlterNote       $07
0008CA51 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CA55 F6F4 F8                    	smpsJump            music84_Jump04
0008CA58                            
0008CA58                            ; FM2 Data
0008CA58                            music84_FM2:
0008CA58 E0C0                       	smpsPan             panCenter, $00
0008CA5C E10B                       	smpsAlterNote       $0B
0008CA5E C603 8007                  	dc.b	nA5, $03, nRst, $07
0008CA62 E109                       	smpsAlterNote       $09
0008CA64 C403 800B                  	dc.b	nG5, $03, nRst, $0B
0008CA68 E108                       	smpsAlterNote       $08
0008CA6A C103 8004                  	dc.b	nE5, $03, nRst, $04
0008CA70 E080                       	smpsPan             panLeft, $00
0008CA72 E10C                       	smpsAlterNote       $0C
0008CA74 E6F9                       	smpsAlterVol        $F9
0008CA76 C703                       	dc.b	nBb5, $03
0008CA78 E10B                       	smpsAlterNote       $0B
0008CA7A C603 8001                  	dc.b	nA5, $03, nRst, $01
0008CA7E E109                       	smpsAlterNote       $09
0008CA80 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008CA86 E108                       	smpsAlterNote       $08
0008CA88 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CA8C E106                       	smpsAlterNote       $06
0008CA8E BD03                       	dc.b	nC5, $03
0008CA90 E10B                       	smpsAlterNote       $0B
0008CA92 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008CA98 E0C0                       	smpsPan             panCenter, $00
0008CA9A E107                       	smpsAlterNote       $07
0008CA9C E606                       	smpsAlterVol        $06
0008CA9E BF03                       	dc.b	nD5, $03
0008CAA0                            
0008CAA0                            music84_Jump03:
0008CAA0 E108                       	smpsAlterNote       $08
0008CAA2 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CAA6 E109                       	smpsAlterNote       $09
0008CAA8 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
0008CAAE E10B                       	smpsAlterNote       $0B
0008CAB0 C607                       	dc.b	nA5, $07
0008CAB2 E107                       	smpsAlterNote       $07
0008CAB4 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008CAB8 E106                       	smpsAlterNote       $06
0008CABA C90D                       	dc.b	nC6, $0D
0008CABC E100                       	smpsAlterNote       $00
0008CABE E701                       	dc.b	smpsNoAttack, $01
0008CAC0 E1FF                       	smpsAlterNote       $FF
0008CAC2 E701                       	dc.b	smpsNoAttack, $01
0008CAC4 E103                       	smpsAlterNote       $03
0008CAC6 E701                       	dc.b	smpsNoAttack, $01
0008CAC8 E109                       	smpsAlterNote       $09
0008CACA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CACE E106                       	smpsAlterNote       $06
0008CAD0 E701                       	dc.b	smpsNoAttack, $01
0008CAD2 E100                       	smpsAlterNote       $00
0008CAD4 E701                       	dc.b	smpsNoAttack, $01
0008CAD6 E10C                       	smpsAlterNote       $0C
0008CAD8 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008CADC E10B                       	smpsAlterNote       $0B
0008CADE C603                       	dc.b	nA5, $03
0008CAE0 E109                       	smpsAlterNote       $09
0008CAE2 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CAE6 E10B                       	smpsAlterNote       $0B
0008CAE8 C60D                       	dc.b	nA5, $0D
0008CAEA E105                       	smpsAlterNote       $05
0008CAEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAF0 E10B                       	smpsAlterNote       $0B
0008CAF2 E701                       	dc.b	smpsNoAttack, $01
0008CAF4 E10E                       	smpsAlterNote       $0E
0008CAF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAFA E108                       	smpsAlterNote       $08
0008CAFC E701                       	dc.b	smpsNoAttack, $01
0008CAFE E104                       	smpsAlterNote       $04
0008CB00 E701                       	dc.b	smpsNoAttack, $01
0008CB02 E105                       	smpsAlterNote       $05
0008CB04 E701                       	dc.b	smpsNoAttack, $01
0008CB06 E10B                       	smpsAlterNote       $0B
0008CB08 E701                       	dc.b	smpsNoAttack, $01
0008CB0A E10F                       	smpsAlterNote       $0F
0008CB0C E701                       	dc.b	smpsNoAttack, $01
0008CB0E E10B                       	smpsAlterNote       $0B
0008CB10 E701                       	dc.b	smpsNoAttack, $01
0008CB12 E108                       	smpsAlterNote       $08
0008CB14 E701                       	dc.b	smpsNoAttack, $01
0008CB16 E104                       	smpsAlterNote       $04
0008CB18 E701                       	dc.b	smpsNoAttack, $01
0008CB1A E108                       	smpsAlterNote       $08
0008CB1C E701                       	dc.b	smpsNoAttack, $01
0008CB1E E10E                       	smpsAlterNote       $0E
0008CB20 E701                       	dc.b	smpsNoAttack, $01
0008CB22 E10F                       	smpsAlterNote       $0F
0008CB24 E701                       	dc.b	smpsNoAttack, $01
0008CB26 E10B                       	smpsAlterNote       $0B
0008CB28 E701                       	dc.b	smpsNoAttack, $01
0008CB2A E105                       	smpsAlterNote       $05
0008CB2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB30 E108                       	smpsAlterNote       $08
0008CB32 E701                       	dc.b	smpsNoAttack, $01
0008CB34 E10E                       	smpsAlterNote       $0E
0008CB36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB3A E108                       	smpsAlterNote       $08
0008CB3C E701                       	dc.b	smpsNoAttack, $01
0008CB3E E105                       	smpsAlterNote       $05
0008CB40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB44 E10B                       	smpsAlterNote       $0B
0008CB46 E701                       	dc.b	smpsNoAttack, $01
0008CB48 E10F                       	smpsAlterNote       $0F
0008CB4A E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008CB4E E107                       	smpsAlterNote       $07
0008CB50 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008CB54 E108                       	smpsAlterNote       $08
0008CB56 C103                       	dc.b	nE5, $03
0008CB58 E109                       	smpsAlterNote       $09
0008CB5A C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008CB62 E10B                       	smpsAlterNote       $0B
0008CB64 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CB68 E107                       	smpsAlterNote       $07
0008CB6A BF03                       	dc.b	nD5, $03
0008CB6C E106                       	smpsAlterNote       $06
0008CB6E C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008CB72 E107                       	smpsAlterNote       $07
0008CB74 CB03                       	dc.b	nD6, $03
0008CB76 E10C                       	smpsAlterNote       $0C
0008CB78 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008CB7C E10B                       	smpsAlterNote       $0B
0008CB7E C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CB82 E109                       	smpsAlterNote       $09
0008CB84 C404                       	dc.b	nG5, $04
0008CB86 E10B                       	smpsAlterNote       $0B
0008CB88 C60D                       	dc.b	nA5, $0D
0008CB8A E108                       	smpsAlterNote       $08
0008CB8C E701                       	dc.b	smpsNoAttack, $01
0008CB8E E104                       	smpsAlterNote       $04
0008CB90 E701                       	dc.b	smpsNoAttack, $01
0008CB92 E108                       	smpsAlterNote       $08
0008CB94 E701                       	dc.b	smpsNoAttack, $01
0008CB96 E10B                       	smpsAlterNote       $0B
0008CB98 E701                       	dc.b	smpsNoAttack, $01
0008CB9A E10F                       	smpsAlterNote       $0F
0008CB9C E701                       	dc.b	smpsNoAttack, $01
0008CB9E E10B                       	smpsAlterNote       $0B
0008CBA0 E701                       	dc.b	smpsNoAttack, $01
0008CBA2 E105                       	smpsAlterNote       $05
0008CBA4 E701                       	dc.b	smpsNoAttack, $01
0008CBA6 E104                       	smpsAlterNote       $04
0008CBA8 E701                       	dc.b	smpsNoAttack, $01
0008CBAA E108                       	smpsAlterNote       $08
0008CBAC E701                       	dc.b	smpsNoAttack, $01
0008CBAE E10E                       	smpsAlterNote       $0E
0008CBB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CBB4 E10B                       	smpsAlterNote       $0B
0008CBB6 E701                       	dc.b	smpsNoAttack, $01
0008CBB8 E105                       	smpsAlterNote       $05
0008CBBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CBBE E10B                       	smpsAlterNote       $0B
0008CBC0 E701                       	dc.b	smpsNoAttack, $01
0008CBC2 E10E                       	smpsAlterNote       $0E
0008CBC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CBC8 E108                       	smpsAlterNote       $08
0008CBCA E701                       	dc.b	smpsNoAttack, $01
0008CBCC E104                       	smpsAlterNote       $04
0008CBCE E701                       	dc.b	smpsNoAttack, $01
0008CBD0 E105                       	smpsAlterNote       $05
0008CBD2 E701                       	dc.b	smpsNoAttack, $01
0008CBD4 E10B                       	smpsAlterNote       $0B
0008CBD6 E701                       	dc.b	smpsNoAttack, $01
0008CBD8 E10F                       	smpsAlterNote       $0F
0008CBDA E701                       	dc.b	smpsNoAttack, $01
0008CBDC E10B                       	smpsAlterNote       $0B
0008CBDE E701                       	dc.b	smpsNoAttack, $01
0008CBE0 E108                       	smpsAlterNote       $08
0008CBE2 E701                       	dc.b	smpsNoAttack, $01
0008CBE4 E105                       	smpsAlterNote       $05
0008CBE6 8001                       	dc.b	nRst, $01
0008CBE8 E109                       	smpsAlterNote       $09
0008CBEA C401                       	dc.b	nG5, $01
0008CBEC E10B                       	smpsAlterNote       $0B
0008CBEE E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
0008CBF7 E109                       	smpsAlterNote       $09
0008CBF9 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008CBFD E10B                       	smpsAlterNote       $0B
0008CBFF C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CC03 E107                       	smpsAlterNote       $07
0008CC05 BF0D                       	dc.b	nD5, $0D
0008CC07 E101                       	smpsAlterNote       $01
0008CC09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC0D E104                       	smpsAlterNote       $04
0008CC0F E701                       	dc.b	smpsNoAttack, $01
0008CC11 E10A                       	smpsAlterNote       $0A
0008CC13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC17 E104                       	smpsAlterNote       $04
0008CC19 E701                       	dc.b	smpsNoAttack, $01
0008CC1B E101                       	smpsAlterNote       $01
0008CC1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC21 E107                       	smpsAlterNote       $07
0008CC23 E701                       	dc.b	smpsNoAttack, $01
0008CC25 E10B                       	smpsAlterNote       $0B
0008CC27 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CC2B E108                       	smpsAlterNote       $08
0008CC2D C101                       	dc.b	nE5, $01
0008CC2F E109                       	smpsAlterNote       $09
0008CC31 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008CC36 E10B                       	smpsAlterNote       $0B
0008CC38 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008CC40 E108                       	smpsAlterNote       $08
0008CC42 CD06                       	dc.b	nE6, $06
0008CC44 E109                       	smpsAlterNote       $09
0008CC46 CE07                       	dc.b	nF6, $07
0008CC48 E108                       	smpsAlterNote       $08
0008CC4A CD03 8001                  	dc.b	nE6, $03, nRst, $01
0008CC4E E106                       	smpsAlterNote       $06
0008CC50 C903                       	dc.b	nC6, $03
0008CC52 E109                       	smpsAlterNote       $09
0008CC54 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CC58 E10C                       	smpsAlterNote       $0C
0008CC5A C70D                       	dc.b	nBb5, $0D
0008CC5C E106                       	smpsAlterNote       $06
0008CC5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC62 E109                       	smpsAlterNote       $09
0008CC64 E701                       	dc.b	smpsNoAttack, $01
0008CC66 E10F                       	smpsAlterNote       $0F
0008CC68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC6C E109                       	smpsAlterNote       $09
0008CC6E E701                       	dc.b	smpsNoAttack, $01
0008CC70 E106                       	smpsAlterNote       $06
0008CC72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC76 E10C                       	smpsAlterNote       $0C
0008CC78 E701                       	dc.b	smpsNoAttack, $01
0008CC7A E110                       	smpsAlterNote       $10
0008CC7C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CC80 E10B                       	smpsAlterNote       $0B
0008CC82 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008CC86 E105                       	smpsAlterNote       $05
0008CC88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC8C E10B                       	smpsAlterNote       $0B
0008CC8E E701                       	dc.b	smpsNoAttack, $01
0008CC90 E10E                       	smpsAlterNote       $0E
0008CC92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC96 E108                       	smpsAlterNote       $08
0008CC98 E701                       	dc.b	smpsNoAttack, $01
0008CC9A E104                       	smpsAlterNote       $04
0008CC9C E701                       	dc.b	smpsNoAttack, $01
0008CC9E E105                       	smpsAlterNote       $05
0008CCA0 E701                       	dc.b	smpsNoAttack, $01
0008CCA2 E10B                       	smpsAlterNote       $0B
0008CCA4 E701                       	dc.b	smpsNoAttack, $01
0008CCA6 E10F                       	smpsAlterNote       $0F
0008CCA8 E701                       	dc.b	smpsNoAttack, $01
0008CCAA E10B                       	smpsAlterNote       $0B
0008CCAC E701                       	dc.b	smpsNoAttack, $01
0008CCAE E108                       	smpsAlterNote       $08
0008CCB0 E701                       	dc.b	smpsNoAttack, $01
0008CCB2 E104                       	smpsAlterNote       $04
0008CCB4 E701                       	dc.b	smpsNoAttack, $01
0008CCB6 E108                       	smpsAlterNote       $08
0008CCB8 E701                       	dc.b	smpsNoAttack, $01
0008CCBA E10E                       	smpsAlterNote       $0E
0008CCBC E701                       	dc.b	smpsNoAttack, $01
0008CCBE E10F                       	smpsAlterNote       $0F
0008CCC0 E701                       	dc.b	smpsNoAttack, $01
0008CCC2 E10B                       	smpsAlterNote       $0B
0008CCC4 E701                       	dc.b	smpsNoAttack, $01
0008CCC6 E105                       	smpsAlterNote       $05
0008CCC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCCC E108                       	smpsAlterNote       $08
0008CCCE E701                       	dc.b	smpsNoAttack, $01
0008CCD0 E10E                       	smpsAlterNote       $0E
0008CCD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCD6 E108                       	smpsAlterNote       $08
0008CCD8 E701                       	dc.b	smpsNoAttack, $01
0008CCDA E105                       	smpsAlterNote       $05
0008CCDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCE0 E10B                       	smpsAlterNote       $0B
0008CCE2 E701                       	dc.b	smpsNoAttack, $01
0008CCE4 E10F                       	smpsAlterNote       $0F
0008CCE6 E701                       	dc.b	smpsNoAttack, $01
0008CCE8 E10E                       	smpsAlterNote       $0E
0008CCEA E701                       	dc.b	smpsNoAttack, $01
0008CCEC E108                       	smpsAlterNote       $08
0008CCEE E701                       	dc.b	smpsNoAttack, $01
0008CCF0 E104                       	smpsAlterNote       $04
0008CCF2 E701                       	dc.b	smpsNoAttack, $01
0008CCF4 E108                       	smpsAlterNote       $08
0008CCF6 E701                       	dc.b	smpsNoAttack, $01
0008CCF8 E10E                       	smpsAlterNote       $0E
0008CCFA E701                       	dc.b	smpsNoAttack, $01
0008CCFC E10F                       	smpsAlterNote       $0F
0008CCFE E701                       	dc.b	smpsNoAttack, $01
0008CD00 E10B                       	smpsAlterNote       $0B
0008CD02 E701                       	dc.b	smpsNoAttack, $01
0008CD04 E105                       	smpsAlterNote       $05
0008CD06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD0A E108                       	smpsAlterNote       $08
0008CD0C E701                       	dc.b	smpsNoAttack, $01
0008CD0E E10E                       	smpsAlterNote       $0E
0008CD10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD14 E108                       	smpsAlterNote       $08
0008CD16 E701                       	dc.b	smpsNoAttack, $01
0008CD18 E105                       	smpsAlterNote       $05
0008CD1A E701                       	dc.b	smpsNoAttack, $01
0008CD1C E10B                       	smpsAlterNote       $0B
0008CD1E C60D                       	dc.b	nA5, $0D
0008CD20 E108                       	smpsAlterNote       $08
0008CD22 E701                       	dc.b	smpsNoAttack, $01
0008CD24 E104                       	smpsAlterNote       $04
0008CD26 E701                       	dc.b	smpsNoAttack, $01
0008CD28 E105                       	smpsAlterNote       $05
0008CD2A E701                       	dc.b	smpsNoAttack, $01
0008CD2C E10B                       	smpsAlterNote       $0B
0008CD2E E701                       	dc.b	smpsNoAttack, $01
0008CD30 E10F                       	smpsAlterNote       $0F
0008CD32 E701                       	dc.b	smpsNoAttack, $01
0008CD34 E10B                       	smpsAlterNote       $0B
0008CD36 E701                       	dc.b	smpsNoAttack, $01
0008CD38 E108                       	smpsAlterNote       $08
0008CD3A E701                       	dc.b	smpsNoAttack, $01
0008CD3C E104                       	smpsAlterNote       $04
0008CD3E E701                       	dc.b	smpsNoAttack, $01
0008CD40 E108                       	smpsAlterNote       $08
0008CD42 E701                       	dc.b	smpsNoAttack, $01
0008CD44 E10E                       	smpsAlterNote       $0E
0008CD46 E701                       	dc.b	smpsNoAttack, $01
0008CD48 E10F                       	smpsAlterNote       $0F
0008CD4A E701                       	dc.b	smpsNoAttack, $01
0008CD4E E109                       	smpsAlterNote       $09
0008CD50 E6FF                       	smpsAlterVol        $FF
0008CD52 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
0008CD5C E108                       	smpsAlterNote       $08
0008CD5E C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008CD64 E107                       	smpsAlterNote       $07
0008CD66 E601                       	smpsAlterVol        $01
0008CD68 BF03                       	dc.b	nD5, $03
0008CD6A E108                       	smpsAlterNote       $08
0008CD6C C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CD70 E109                       	smpsAlterNote       $09
0008CD72 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008CD78 E10B                       	smpsAlterNote       $0B
0008CD7A C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CD7E E107                       	smpsAlterNote       $07
0008CD80 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008CD84 E106                       	smpsAlterNote       $06
0008CD86 C90D                       	dc.b	nC6, $0D
0008CD88 E103                       	smpsAlterNote       $03
0008CD8A E701                       	dc.b	smpsNoAttack, $01
0008CD8C E1FF                       	smpsAlterNote       $FF
0008CD8E E701                       	dc.b	smpsNoAttack, $01
0008CD90 E103                       	smpsAlterNote       $03
0008CD92 E701                       	dc.b	smpsNoAttack, $01
0008CD94 E109                       	smpsAlterNote       $09
0008CD96 E701                       	dc.b	smpsNoAttack, $01
0008CD98 E10A                       	smpsAlterNote       $0A
0008CD9A E701                       	dc.b	smpsNoAttack, $01
0008CD9C E106                       	smpsAlterNote       $06
0008CD9E E701                       	dc.b	smpsNoAttack, $01
0008CDA0 E100                       	smpsAlterNote       $00
0008CDA2 E701                       	dc.b	smpsNoAttack, $01
0008CDA4 E10C                       	smpsAlterNote       $0C
0008CDA6 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008CDAA E10B                       	smpsAlterNote       $0B
0008CDAC C603                       	dc.b	nA5, $03
0008CDAE E109                       	smpsAlterNote       $09
0008CDB0 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CDB4 E10B                       	smpsAlterNote       $0B
0008CDB6 C60D                       	dc.b	nA5, $0D
0008CDB8 E105                       	smpsAlterNote       $05
0008CDBA E701                       	dc.b	smpsNoAttack, $01
0008CDBC E104                       	smpsAlterNote       $04
0008CDBE E701                       	dc.b	smpsNoAttack, $01
0008CDC0 E108                       	smpsAlterNote       $08
0008CDC2 E701                       	dc.b	smpsNoAttack, $01
0008CDC4 E10E                       	smpsAlterNote       $0E
0008CDC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDCA E10B                       	smpsAlterNote       $0B
0008CDCC E701                       	dc.b	smpsNoAttack, $01
0008CDCE E105                       	smpsAlterNote       $05
0008CDD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDD4 E10B                       	smpsAlterNote       $0B
0008CDD6 E701                       	dc.b	smpsNoAttack, $01
0008CDD8 E10E                       	smpsAlterNote       $0E
0008CDDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDDE E108                       	smpsAlterNote       $08
0008CDE0 E701                       	dc.b	smpsNoAttack, $01
0008CDE2 E104                       	smpsAlterNote       $04
0008CDE4 E701                       	dc.b	smpsNoAttack, $01
0008CDE6 E105                       	smpsAlterNote       $05
0008CDE8 E701                       	dc.b	smpsNoAttack, $01
0008CDEA E10B                       	smpsAlterNote       $0B
0008CDEC E701                       	dc.b	smpsNoAttack, $01
0008CDEE E10F                       	smpsAlterNote       $0F
0008CDF0 E701                       	dc.b	smpsNoAttack, $01
0008CDF2 E10B                       	smpsAlterNote       $0B
0008CDF4 E701                       	dc.b	smpsNoAttack, $01
0008CDF6 E108                       	smpsAlterNote       $08
0008CDF8 E701                       	dc.b	smpsNoAttack, $01
0008CDFA E104                       	smpsAlterNote       $04
0008CDFC E701                       	dc.b	smpsNoAttack, $01
0008CDFE E108                       	smpsAlterNote       $08
0008CE00 E701                       	dc.b	smpsNoAttack, $01
0008CE02 E10E                       	smpsAlterNote       $0E
0008CE04 E701                       	dc.b	smpsNoAttack, $01
0008CE06 E10F                       	smpsAlterNote       $0F
0008CE08 E701                       	dc.b	smpsNoAttack, $01
0008CE0A E10B                       	smpsAlterNote       $0B
0008CE0C E701                       	dc.b	smpsNoAttack, $01
0008CE0E E105                       	smpsAlterNote       $05
0008CE10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE14 E108                       	smpsAlterNote       $08
0008CE16 E701                       	dc.b	smpsNoAttack, $01
0008CE18 E10E                       	smpsAlterNote       $0E
0008CE1A E701                       	dc.b	smpsNoAttack, $01
0008CE1C E10F                       	smpsAlterNote       $0F
0008CE1E 800F                       	dc.b	nRst, $0F
0008CE20 E107                       	smpsAlterNote       $07
0008CE22 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008CE26 E108                       	smpsAlterNote       $08
0008CE28 C103                       	dc.b	nE5, $03
0008CE2A E109                       	smpsAlterNote       $09
0008CE2C C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008CE32 E10B                       	smpsAlterNote       $0B
0008CE34 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CE38 E107                       	smpsAlterNote       $07
0008CE3A BF03                       	dc.b	nD5, $03
0008CE3C E106                       	smpsAlterNote       $06
0008CE3E C90E                       	dc.b	nC6, $0E
0008CE40 E107                       	smpsAlterNote       $07
0008CE42 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008CE46 E10C                       	smpsAlterNote       $0C
0008CE48 C704                       	dc.b	nBb5, $04
0008CE4A E10B                       	smpsAlterNote       $0B
0008CE4C C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CE50 E109                       	smpsAlterNote       $09
0008CE52 C404                       	dc.b	nG5, $04
0008CE54 E10B                       	smpsAlterNote       $0B
0008CE56 C60D                       	dc.b	nA5, $0D
0008CE58 E108                       	smpsAlterNote       $08
0008CE5A E701                       	dc.b	smpsNoAttack, $01
0008CE5C E105                       	smpsAlterNote       $05
0008CE5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE62 E10B                       	smpsAlterNote       $0B
0008CE64 E701                       	dc.b	smpsNoAttack, $01
0008CE66 E10F                       	smpsAlterNote       $0F
0008CE68 E701                       	dc.b	smpsNoAttack, $01
0008CE6A E10E                       	smpsAlterNote       $0E
0008CE6C E701                       	dc.b	smpsNoAttack, $01
0008CE6E E108                       	smpsAlterNote       $08
0008CE70 E701                       	dc.b	smpsNoAttack, $01
0008CE72 E104                       	smpsAlterNote       $04
0008CE74 E701                       	dc.b	smpsNoAttack, $01
0008CE76 E108                       	smpsAlterNote       $08
0008CE78 E701                       	dc.b	smpsNoAttack, $01
0008CE7A E10B                       	smpsAlterNote       $0B
0008CE7C E701                       	dc.b	smpsNoAttack, $01
0008CE7E E10F                       	smpsAlterNote       $0F
0008CE80 E701                       	dc.b	smpsNoAttack, $01
0008CE82 E10B                       	smpsAlterNote       $0B
0008CE84 E701                       	dc.b	smpsNoAttack, $01
0008CE86 E105                       	smpsAlterNote       $05
0008CE88 E701                       	dc.b	smpsNoAttack, $01
0008CE8A E104                       	smpsAlterNote       $04
0008CE8C E701                       	dc.b	smpsNoAttack, $01
0008CE8E E108                       	smpsAlterNote       $08
0008CE90 E701                       	dc.b	smpsNoAttack, $01
0008CE92 E10E                       	smpsAlterNote       $0E
0008CE94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE98 E10B                       	smpsAlterNote       $0B
0008CE9A E701                       	dc.b	smpsNoAttack, $01
0008CE9C E105                       	smpsAlterNote       $05
0008CE9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEA2 E10B                       	smpsAlterNote       $0B
0008CEA4 E701                       	dc.b	smpsNoAttack, $01
0008CEA6 E10E                       	smpsAlterNote       $0E
0008CEA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEAC E108                       	smpsAlterNote       $08
0008CEAE E701                       	dc.b	smpsNoAttack, $01
0008CEB0 E105                       	smpsAlterNote       $05
0008CEB2 8001                       	dc.b	nRst, $01
0008CEB4 E109                       	smpsAlterNote       $09
0008CEB6 C402                       	dc.b	nG5, $02
0008CEB8 E10B                       	smpsAlterNote       $0B
0008CEBA E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008CEC3 E109                       	smpsAlterNote       $09
0008CEC5 C404                       	dc.b	nG5, $04
0008CEC7 E10B                       	smpsAlterNote       $0B
0008CEC9 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CECD E107                       	smpsAlterNote       $07
0008CECF BF0D                       	dc.b	nD5, $0D
0008CED1 E101                       	smpsAlterNote       $01
0008CED3 E701                       	dc.b	smpsNoAttack, $01
0008CED5 E100                       	smpsAlterNote       $00
0008CED7 E701                       	dc.b	smpsNoAttack, $01
0008CED9 E104                       	smpsAlterNote       $04
0008CEDB E701                       	dc.b	smpsNoAttack, $01
0008CEDD E10A                       	smpsAlterNote       $0A
0008CEDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEE3 E107                       	smpsAlterNote       $07
0008CEE5 E701                       	dc.b	smpsNoAttack, $01
0008CEE7 E101                       	smpsAlterNote       $01
0008CEE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEED E107                       	smpsAlterNote       $07
0008CEEF E701                       	dc.b	smpsNoAttack, $01
0008CEF1 E10A                       	smpsAlterNote       $0A
0008CEF3 E701                       	dc.b	smpsNoAttack, $01
0008CEF5 E10B                       	smpsAlterNote       $0B
0008CEF7 8001                       	dc.b	nRst, $01
0008CEF9 E108                       	smpsAlterNote       $08
0008CEFB C101                       	dc.b	nE5, $01
0008CEFD E109                       	smpsAlterNote       $09
0008CEFF E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008CF04 E10B                       	smpsAlterNote       $0B
0008CF06 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008CF0E E108                       	smpsAlterNote       $08
0008CF10 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008CF14 E109                       	smpsAlterNote       $09
0008CF16 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008CF1A E108                       	smpsAlterNote       $08
0008CF1C CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008CF20 E106                       	smpsAlterNote       $06
0008CF22 C903                       	dc.b	nC6, $03
0008CF24 E109                       	smpsAlterNote       $09
0008CF26 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CF2A E10C                       	smpsAlterNote       $0C
0008CF2C C70D                       	dc.b	nBb5, $0D
0008CF2E E109                       	smpsAlterNote       $09
0008CF30 E701                       	dc.b	smpsNoAttack, $01
0008CF32 E105                       	smpsAlterNote       $05
0008CF34 E701                       	dc.b	smpsNoAttack, $01
0008CF36 E109                       	smpsAlterNote       $09
0008CF38 E701                       	dc.b	smpsNoAttack, $01
0008CF3A E10F                       	smpsAlterNote       $0F
0008CF3C E701                       	dc.b	smpsNoAttack, $01
0008CF3E E110                       	smpsAlterNote       $10
0008CF40 E701                       	dc.b	smpsNoAttack, $01
0008CF42 E10C                       	smpsAlterNote       $0C
0008CF44 E701                       	dc.b	smpsNoAttack, $01
0008CF46 E106                       	smpsAlterNote       $06
0008CF48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF4C E109                       	smpsAlterNote       $09
0008CF4E E701                       	dc.b	smpsNoAttack, $01
0008CF50 E10F                       	smpsAlterNote       $0F
0008CF52 E701                       	dc.b	smpsNoAttack, $01
0008CF54 E110                       	smpsAlterNote       $10
0008CF56 8001                       	dc.b	nRst, $01
0008CF58 E10B                       	smpsAlterNote       $0B
0008CF5A C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008CF60 E105                       	smpsAlterNote       $05
0008CF62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF66 E108                       	smpsAlterNote       $08
0008CF68 E701                       	dc.b	smpsNoAttack, $01
0008CF6A E10E                       	smpsAlterNote       $0E
0008CF6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF70 E108                       	smpsAlterNote       $08
0008CF72 E701                       	dc.b	smpsNoAttack, $01
0008CF74 E105                       	smpsAlterNote       $05
0008CF76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF7A E10B                       	smpsAlterNote       $0B
0008CF7C E701                       	dc.b	smpsNoAttack, $01
0008CF7E E10F                       	smpsAlterNote       $0F
0008CF80 E701                       	dc.b	smpsNoAttack, $01
0008CF82 E10E                       	smpsAlterNote       $0E
0008CF84 E701                       	dc.b	smpsNoAttack, $01
0008CF86 E108                       	smpsAlterNote       $08
0008CF88 E701                       	dc.b	smpsNoAttack, $01
0008CF8A E104                       	smpsAlterNote       $04
0008CF8C E701                       	dc.b	smpsNoAttack, $01
0008CF8E E108                       	smpsAlterNote       $08
0008CF90 E701                       	dc.b	smpsNoAttack, $01
0008CF92 E10B                       	smpsAlterNote       $0B
0008CF94 E701                       	dc.b	smpsNoAttack, $01
0008CF96 E10F                       	smpsAlterNote       $0F
0008CF98 E701                       	dc.b	smpsNoAttack, $01
0008CF9A E10B                       	smpsAlterNote       $0B
0008CF9C E701                       	dc.b	smpsNoAttack, $01
0008CF9E E105                       	smpsAlterNote       $05
0008CFA0 E701                       	dc.b	smpsNoAttack, $01
0008CFA2 E104                       	smpsAlterNote       $04
0008CFA4 E701                       	dc.b	smpsNoAttack, $01
0008CFA6 E108                       	smpsAlterNote       $08
0008CFA8 E701                       	dc.b	smpsNoAttack, $01
0008CFAA E10E                       	smpsAlterNote       $0E
0008CFAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFB0 E10B                       	smpsAlterNote       $0B
0008CFB2 E701                       	dc.b	smpsNoAttack, $01
0008CFB4 E105                       	smpsAlterNote       $05
0008CFB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFBA E10B                       	smpsAlterNote       $0B
0008CFBC E701                       	dc.b	smpsNoAttack, $01
0008CFBE E10E                       	smpsAlterNote       $0E
0008CFC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFC4 E108                       	smpsAlterNote       $08
0008CFC6 E701                       	dc.b	smpsNoAttack, $01
0008CFC8 E104                       	smpsAlterNote       $04
0008CFCA E701                       	dc.b	smpsNoAttack, $01
0008CFCC E105                       	smpsAlterNote       $05
0008CFCE E701                       	dc.b	smpsNoAttack, $01
0008CFD0 E10B                       	smpsAlterNote       $0B
0008CFD2 E701                       	dc.b	smpsNoAttack, $01
0008CFD4 E10F                       	smpsAlterNote       $0F
0008CFD6 E701                       	dc.b	smpsNoAttack, $01
0008CFD8 E10B                       	smpsAlterNote       $0B
0008CFDA E701                       	dc.b	smpsNoAttack, $01
0008CFDC E108                       	smpsAlterNote       $08
0008CFDE E701                       	dc.b	smpsNoAttack, $01
0008CFE0 E104                       	smpsAlterNote       $04
0008CFE2 E701                       	dc.b	smpsNoAttack, $01
0008CFE4 E108                       	smpsAlterNote       $08
0008CFE6 E701                       	dc.b	smpsNoAttack, $01
0008CFE8 E10E                       	smpsAlterNote       $0E
0008CFEA E701                       	dc.b	smpsNoAttack, $01
0008CFEC E10F                       	smpsAlterNote       $0F
0008CFEE E701                       	dc.b	smpsNoAttack, $01
0008CFF0 E10B                       	smpsAlterNote       $0B
0008CFF2 E701                       	dc.b	smpsNoAttack, $01
0008CFF4 E105                       	smpsAlterNote       $05
0008CFF6 E701                       	dc.b	smpsNoAttack, $01
0008CFF8 E10B                       	smpsAlterNote       $0B
0008CFFA C60E                       	dc.b	nA5, $0E
0008CFFC E105                       	smpsAlterNote       $05
0008CFFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D002 E10B                       	smpsAlterNote       $0B
0008D004 E701                       	dc.b	smpsNoAttack, $01
0008D006 E10E                       	smpsAlterNote       $0E
0008D008 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D00C E108                       	smpsAlterNote       $08
0008D00E E701                       	dc.b	smpsNoAttack, $01
0008D010 E104                       	smpsAlterNote       $04
0008D012 E701                       	dc.b	smpsNoAttack, $01
0008D014 E105                       	smpsAlterNote       $05
0008D016 E701                       	dc.b	smpsNoAttack, $01
0008D018 E10B                       	smpsAlterNote       $0B
0008D01A E701                       	dc.b	smpsNoAttack, $01
0008D01C E10F                       	smpsAlterNote       $0F
0008D01E E701                       	dc.b	smpsNoAttack, $01
0008D020 E10B                       	smpsAlterNote       $0B
0008D022 E701                       	dc.b	smpsNoAttack, $01
0008D024 E108                       	smpsAlterNote       $08
0008D026 E701                       	dc.b	smpsNoAttack, $01
0008D028 E104                       	smpsAlterNote       $04
0008D02A E701                       	dc.b	smpsNoAttack, $01
0008D02C E108                       	smpsAlterNote       $08
0008D02E E701                       	dc.b	smpsNoAttack, $01
0008D030 E10E                       	smpsAlterNote       $0E
0008D032 E701                       	dc.b	smpsNoAttack, $01
0008D034 E10F                       	smpsAlterNote       $0F
0008D036 E701                       	dc.b	smpsNoAttack, $01
0008D038 E10B                       	smpsAlterNote       $0B
0008D03A E701                       	dc.b	smpsNoAttack, $01
0008D03C E105                       	smpsAlterNote       $05
0008D03E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D042 E108                       	smpsAlterNote       $08
0008D044 E701                       	dc.b	smpsNoAttack, $01
0008D046 E10E                       	smpsAlterNote       $0E
0008D048 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D04C E108                       	smpsAlterNote       $08
0008D04E E701                       	dc.b	smpsNoAttack, $01
0008D050 E105                       	smpsAlterNote       $05
0008D052 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D056 E10B                       	smpsAlterNote       $0B
0008D058 E701                       	dc.b	smpsNoAttack, $01
0008D05A E10F                       	smpsAlterNote       $0F
0008D05C E701                       	dc.b	smpsNoAttack, $01
0008D05E E10E                       	smpsAlterNote       $0E
0008D060 E701                       	dc.b	smpsNoAttack, $01
0008D062 E108                       	smpsAlterNote       $08
0008D064 E701                       	dc.b	smpsNoAttack, $01
0008D066 E104                       	smpsAlterNote       $04
0008D068 E701                       	dc.b	smpsNoAttack, $01
0008D06A E108                       	smpsAlterNote       $08
0008D06C E701                       	dc.b	smpsNoAttack, $01
0008D06E E10E                       	smpsAlterNote       $0E
0008D070 E701                       	dc.b	smpsNoAttack, $01
0008D072 E10F                       	smpsAlterNote       $0F
0008D074 E701                       	dc.b	smpsNoAttack, $01
0008D076 E10B                       	smpsAlterNote       $0B
0008D078 E701                       	dc.b	smpsNoAttack, $01
0008D07A E105                       	smpsAlterNote       $05
0008D07C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D080 E108                       	smpsAlterNote       $08
0008D082 E701                       	dc.b	smpsNoAttack, $01
0008D084 E10E                       	smpsAlterNote       $0E
0008D086 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D08A E108                       	smpsAlterNote       $08
0008D08C E701                       	dc.b	smpsNoAttack, $01
0008D08E E105                       	smpsAlterNote       $05
0008D090 E701                       	dc.b	smpsNoAttack, $01
0008D094 E10B                       	smpsAlterNote       $0B
0008D096 E6FD                       	smpsAlterVol        $FD
0008D098 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D09C E109                       	smpsAlterNote       $09
0008D09E C404                       	dc.b	nG5, $04
0008D0A0 E10B                       	smpsAlterNote       $0B
0008D0A2 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D0A6 E107                       	smpsAlterNote       $07
0008D0A8 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D0AE E10B                       	smpsAlterNote       $0B
0008D0B0 C604                       	dc.b	nA5, $04
0008D0B2 E109                       	smpsAlterNote       $09
0008D0B4 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D0B8 E10B                       	smpsAlterNote       $0B
0008D0BA C604                       	dc.b	nA5, $04
0008D0BC E108                       	smpsAlterNote       $08
0008D0BE C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0008D0C6 E106                       	smpsAlterNote       $06
0008D0C8 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D0CC E10C                       	smpsAlterNote       $0C
0008D0CE C704                       	dc.b	nBb5, $04
0008D0D0 E10B                       	smpsAlterNote       $0B
0008D0D2 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D0D6 E109                       	smpsAlterNote       $09
0008D0D8 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D0E2 E10B                       	smpsAlterNote       $0B
0008D0E4 C60D                       	dc.b	nA5, $0D
0008D0E6 E108                       	smpsAlterNote       $08
0008D0E8 E701                       	dc.b	smpsNoAttack, $01
0008D0EA E104                       	smpsAlterNote       $04
0008D0EC E701                       	dc.b	smpsNoAttack, $01
0008D0EE E108                       	smpsAlterNote       $08
0008D0F0 E701                       	dc.b	smpsNoAttack, $01
0008D0F2 E10E                       	smpsAlterNote       $0E
0008D0F4 E701                       	dc.b	smpsNoAttack, $01
0008D0F6 E10F                       	smpsAlterNote       $0F
0008D0F8 E701                       	dc.b	smpsNoAttack, $01
0008D0FA E10B                       	smpsAlterNote       $0B
0008D0FC E701                       	dc.b	smpsNoAttack, $01
0008D0FE E105                       	smpsAlterNote       $05
0008D100 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D104 E108                       	smpsAlterNote       $08
0008D106 E701                       	dc.b	smpsNoAttack, $01
0008D108 E10E                       	smpsAlterNote       $0E
0008D10A E701                       	dc.b	smpsNoAttack, $01
0008D10C E10F                       	smpsAlterNote       $0F
0008D10E 8001                       	dc.b	nRst, $01
0008D110 E109                       	smpsAlterNote       $09
0008D112 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D118 E108                       	smpsAlterNote       $08
0008D11A C10D                       	dc.b	nE5, $0D
0008D11C E102                       	smpsAlterNote       $02
0008D11E E701                       	dc.b	smpsNoAttack, $01
0008D120 E101                       	smpsAlterNote       $01
0008D122 E701                       	dc.b	smpsNoAttack, $01
0008D124 E105                       	smpsAlterNote       $05
0008D126 E701                       	dc.b	smpsNoAttack, $01
0008D128 E10B                       	smpsAlterNote       $0B
0008D12A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D12E E108                       	smpsAlterNote       $08
0008D130 E701                       	dc.b	smpsNoAttack, $01
0008D132 E102                       	smpsAlterNote       $02
0008D134 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D138 E108                       	smpsAlterNote       $08
0008D13A E701                       	dc.b	smpsNoAttack, $01
0008D13C E10B                       	smpsAlterNote       $0B
0008D13E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D142 E105                       	smpsAlterNote       $05
0008D144 E701                       	dc.b	smpsNoAttack, $01
0008D146 E101                       	smpsAlterNote       $01
0008D148 E701                       	dc.b	smpsNoAttack, $01
0008D14A E102                       	smpsAlterNote       $02
0008D14C E701                       	dc.b	smpsNoAttack, $01
0008D14E E108                       	smpsAlterNote       $08
0008D150 E701                       	dc.b	smpsNoAttack, $01
0008D152 E10C                       	smpsAlterNote       $0C
0008D154 E701                       	dc.b	smpsNoAttack, $01
0008D156 E108                       	smpsAlterNote       $08
0008D158 E701                       	dc.b	smpsNoAttack, $01
0008D15A E105                       	smpsAlterNote       $05
0008D15C E701                       	dc.b	smpsNoAttack, $01
0008D15E E101                       	smpsAlterNote       $01
0008D160 E701                       	dc.b	smpsNoAttack, $01
0008D162 E105                       	smpsAlterNote       $05
0008D164 E701                       	dc.b	smpsNoAttack, $01
0008D166 E10B                       	smpsAlterNote       $0B
0008D168 E701                       	dc.b	smpsNoAttack, $01
0008D16A E10C                       	smpsAlterNote       $0C
0008D16C E701                       	dc.b	smpsNoAttack, $01
0008D16E E108                       	smpsAlterNote       $08
0008D170 E701                       	dc.b	smpsNoAttack, $01
0008D172 E102                       	smpsAlterNote       $02
0008D174 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D178 E105                       	smpsAlterNote       $05
0008D17A E701                       	dc.b	smpsNoAttack, $01
0008D17C E10B                       	smpsAlterNote       $0B
0008D17E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D182 E105                       	smpsAlterNote       $05
0008D184 E701                       	dc.b	smpsNoAttack, $01
0008D186 E102                       	smpsAlterNote       $02
0008D188 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D18C E108                       	smpsAlterNote       $08
0008D18E E701                       	dc.b	smpsNoAttack, $01
0008D190 E10C                       	smpsAlterNote       $0C
0008D192 E701                       	dc.b	smpsNoAttack, $01
0008D194 E10B                       	smpsAlterNote       $0B
0008D196 E701                       	dc.b	smpsNoAttack, $01
0008D198 E105                       	smpsAlterNote       $05
0008D19A E701                       	dc.b	smpsNoAttack, $01
0008D19C E101                       	smpsAlterNote       $01
0008D19E E701                       	dc.b	smpsNoAttack, $01
0008D1A0 E105                       	smpsAlterNote       $05
0008D1A2 E701                       	dc.b	smpsNoAttack, $01
0008D1A4 E108                       	smpsAlterNote       $08
0008D1A6 E701                       	dc.b	smpsNoAttack, $01
0008D1A8 E10C                       	smpsAlterNote       $0C
0008D1AA E701                       	dc.b	smpsNoAttack, $01
0008D1AC E108                       	smpsAlterNote       $08
0008D1AE E701                       	dc.b	smpsNoAttack, $01
0008D1B0 E102                       	smpsAlterNote       $02
0008D1B2 E701                       	dc.b	smpsNoAttack, $01
0008D1B4 E101                       	smpsAlterNote       $01
0008D1B6 E701                       	dc.b	smpsNoAttack, $01
0008D1B8 E105                       	smpsAlterNote       $05
0008D1BA E701                       	dc.b	smpsNoAttack, $01
0008D1BC E10B                       	smpsAlterNote       $0B
0008D1BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1C2 E108                       	smpsAlterNote       $08
0008D1C4 E701                       	dc.b	smpsNoAttack, $01
0008D1C6 E102                       	smpsAlterNote       $02
0008D1C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1CC E108                       	smpsAlterNote       $08
0008D1CE E701                       	dc.b	smpsNoAttack, $01
0008D1D0 E10B                       	smpsAlterNote       $0B
0008D1D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1D6 E105                       	smpsAlterNote       $05
0008D1D8 E701                       	dc.b	smpsNoAttack, $01
0008D1DA E101                       	smpsAlterNote       $01
0008D1DC E701                       	dc.b	smpsNoAttack, $01
0008D1DE E102                       	smpsAlterNote       $02
0008D1E0 E701                       	dc.b	smpsNoAttack, $01
0008D1E2 E108                       	smpsAlterNote       $08
0008D1E4 E701                       	dc.b	smpsNoAttack, $01
0008D1E6 E10C                       	smpsAlterNote       $0C
0008D1E8 E701                       	dc.b	smpsNoAttack, $01
0008D1EA E108                       	smpsAlterNote       $08
0008D1EC E701                       	dc.b	smpsNoAttack, $01
0008D1EE E105                       	smpsAlterNote       $05
0008D1F0 E701                       	dc.b	smpsNoAttack, $01
0008D1F2 E101                       	smpsAlterNote       $01
0008D1F4 E701                       	dc.b	smpsNoAttack, $01
0008D1F6 E105                       	smpsAlterNote       $05
0008D1F8 E701                       	dc.b	smpsNoAttack, $01
0008D1FA E10B                       	smpsAlterNote       $0B
0008D1FC E701                       	dc.b	smpsNoAttack, $01
0008D1FE E10C                       	smpsAlterNote       $0C
0008D200 E701                       	dc.b	smpsNoAttack, $01
0008D202 E108                       	smpsAlterNote       $08
0008D204 E701                       	dc.b	smpsNoAttack, $01
0008D206 E102                       	smpsAlterNote       $02
0008D208 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D20C E105                       	smpsAlterNote       $05
0008D20E E701                       	dc.b	smpsNoAttack, $01
0008D210 E10B                       	smpsAlterNote       $0B
0008D212 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D216 E105                       	smpsAlterNote       $05
0008D218 E701                       	dc.b	smpsNoAttack, $01
0008D21A E101                       	smpsAlterNote       $01
0008D21C E701                       	dc.b	smpsNoAttack, $01
0008D21E E102                       	smpsAlterNote       $02
0008D220 E701                       	dc.b	smpsNoAttack, $01
0008D222 E108                       	smpsAlterNote       $08
0008D224 E701                       	dc.b	smpsNoAttack, $01
0008D226 E10C                       	smpsAlterNote       $0C
0008D228 E701                       	dc.b	smpsNoAttack, $01
0008D22A E108                       	smpsAlterNote       $08
0008D22C E701                       	dc.b	smpsNoAttack, $01
0008D22E E105                       	smpsAlterNote       $05
0008D230 E701                       	dc.b	smpsNoAttack, $01
0008D232 E101                       	smpsAlterNote       $01
0008D234 E701                       	dc.b	smpsNoAttack, $01
0008D236 E105                       	smpsAlterNote       $05
0008D238 E701                       	dc.b	smpsNoAttack, $01
0008D23A E10B                       	smpsAlterNote       $0B
0008D23C E701                       	dc.b	smpsNoAttack, $01
0008D23E E10C                       	smpsAlterNote       $0C
0008D240 E701                       	dc.b	smpsNoAttack, $01
0008D242 E108                       	smpsAlterNote       $08
0008D244 E701                       	dc.b	smpsNoAttack, $01
0008D246 E102                       	smpsAlterNote       $02
0008D248 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D24C E105                       	smpsAlterNote       $05
0008D24E E701                       	dc.b	smpsNoAttack, $01
0008D250 E10B                       	smpsAlterNote       $0B
0008D252 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D256 E105                       	smpsAlterNote       $05
0008D258 E701                       	dc.b	smpsNoAttack, $01
0008D25A E102                       	smpsAlterNote       $02
0008D25C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D260 E108                       	smpsAlterNote       $08
0008D262 E701                       	dc.b	smpsNoAttack, $01
0008D264 E10C                       	smpsAlterNote       $0C
0008D266 E701                       	dc.b	smpsNoAttack, $01
0008D268 E10B                       	smpsAlterNote       $0B
0008D26A E701                       	dc.b	smpsNoAttack, $01
0008D26C E105                       	smpsAlterNote       $05
0008D26E E701                       	dc.b	smpsNoAttack, $01
0008D270 E101                       	smpsAlterNote       $01
0008D272 E701                       	dc.b	smpsNoAttack, $01
0008D274 E105                       	smpsAlterNote       $05
0008D276 E701                       	dc.b	smpsNoAttack, $01
0008D278 E108                       	smpsAlterNote       $08
0008D27A E701                       	dc.b	smpsNoAttack, $01
0008D27C E10C                       	smpsAlterNote       $0C
0008D27E E701                       	dc.b	smpsNoAttack, $01
0008D282 E10B                       	smpsAlterNote       $0B
0008D284 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D288 E109                       	smpsAlterNote       $09
0008D28A C404                       	dc.b	nG5, $04
0008D28C E10B                       	smpsAlterNote       $0B
0008D28E C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D292 E107                       	smpsAlterNote       $07
0008D294 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D29A E10B                       	smpsAlterNote       $0B
0008D29C C604                       	dc.b	nA5, $04
0008D29E E109                       	smpsAlterNote       $09
0008D2A0 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D2A4 E10B                       	smpsAlterNote       $0B
0008D2A6 C604                       	dc.b	nA5, $04
0008D2A8 E108                       	smpsAlterNote       $08
0008D2AA C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0008D2B0 E106                       	smpsAlterNote       $06
0008D2B2 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D2B6 E10C                       	smpsAlterNote       $0C
0008D2B8 C704                       	dc.b	nBb5, $04
0008D2BA E10B                       	smpsAlterNote       $0B
0008D2BC C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D2C0 E109                       	smpsAlterNote       $09
0008D2C2 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D2CC E10B                       	smpsAlterNote       $0B
0008D2CE C60D                       	dc.b	nA5, $0D
0008D2D0 E108                       	smpsAlterNote       $08
0008D2D2 E701                       	dc.b	smpsNoAttack, $01
0008D2D4 E104                       	smpsAlterNote       $04
0008D2D6 E701                       	dc.b	smpsNoAttack, $01
0008D2D8 E108                       	smpsAlterNote       $08
0008D2DA E701                       	dc.b	smpsNoAttack, $01
0008D2DC E10B                       	smpsAlterNote       $0B
0008D2DE E701                       	dc.b	smpsNoAttack, $01
0008D2E0 E10F                       	smpsAlterNote       $0F
0008D2E2 E701                       	dc.b	smpsNoAttack, $01
0008D2E4 E10B                       	smpsAlterNote       $0B
0008D2E6 E701                       	dc.b	smpsNoAttack, $01
0008D2E8 E105                       	smpsAlterNote       $05
0008D2EA E701                       	dc.b	smpsNoAttack, $01
0008D2EC E104                       	smpsAlterNote       $04
0008D2EE E701                       	dc.b	smpsNoAttack, $01
0008D2F0 E108                       	smpsAlterNote       $08
0008D2F2 E701                       	dc.b	smpsNoAttack, $01
0008D2F4 E10E                       	smpsAlterNote       $0E
0008D2F6 E701                       	dc.b	smpsNoAttack, $01
0008D2F8 E10F                       	smpsAlterNote       $0F
0008D2FA 8001                       	dc.b	nRst, $01
0008D2FC E109                       	smpsAlterNote       $09
0008D2FE C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D304 E108                       	smpsAlterNote       $08
0008D306 C10D                       	dc.b	nE5, $0D
0008D308 E105                       	smpsAlterNote       $05
0008D30A E701                       	dc.b	smpsNoAttack, $01
0008D30C E101                       	smpsAlterNote       $01
0008D30E E701                       	dc.b	smpsNoAttack, $01
0008D310 E105                       	smpsAlterNote       $05
0008D312 E701                       	dc.b	smpsNoAttack, $01
0008D314 E10B                       	smpsAlterNote       $0B
0008D316 E701                       	dc.b	smpsNoAttack, $01
0008D318 E10C                       	smpsAlterNote       $0C
0008D31A E701                       	dc.b	smpsNoAttack, $01
0008D31C E108                       	smpsAlterNote       $08
0008D31E E701                       	dc.b	smpsNoAttack, $01
0008D320 E102                       	smpsAlterNote       $02
0008D322 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D326 E105                       	smpsAlterNote       $05
0008D328 E701                       	dc.b	smpsNoAttack, $01
0008D32A E10B                       	smpsAlterNote       $0B
0008D32C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D330 E105                       	smpsAlterNote       $05
0008D332 E701                       	dc.b	smpsNoAttack, $01
0008D334 E102                       	smpsAlterNote       $02
0008D336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D33A E108                       	smpsAlterNote       $08
0008D33C E701                       	dc.b	smpsNoAttack, $01
0008D33E E10C                       	smpsAlterNote       $0C
0008D340 E701                       	dc.b	smpsNoAttack, $01
0008D342 E10B                       	smpsAlterNote       $0B
0008D344 E701                       	dc.b	smpsNoAttack, $01
0008D346 E105                       	smpsAlterNote       $05
0008D348 E701                       	dc.b	smpsNoAttack, $01
0008D34A E101                       	smpsAlterNote       $01
0008D34C E701                       	dc.b	smpsNoAttack, $01
0008D34E E105                       	smpsAlterNote       $05
0008D350 E701                       	dc.b	smpsNoAttack, $01
0008D352 E108                       	smpsAlterNote       $08
0008D354 E701                       	dc.b	smpsNoAttack, $01
0008D356 E10C                       	smpsAlterNote       $0C
0008D358 E701                       	dc.b	smpsNoAttack, $01
0008D35A E108                       	smpsAlterNote       $08
0008D35C E701                       	dc.b	smpsNoAttack, $01
0008D35E E102                       	smpsAlterNote       $02
0008D360 E701                       	dc.b	smpsNoAttack, $01
0008D362 E101                       	smpsAlterNote       $01
0008D364 E701                       	dc.b	smpsNoAttack, $01
0008D366 E105                       	smpsAlterNote       $05
0008D368 E701                       	dc.b	smpsNoAttack, $01
0008D36A E10B                       	smpsAlterNote       $0B
0008D36C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D370 E108                       	smpsAlterNote       $08
0008D372 E701                       	dc.b	smpsNoAttack, $01
0008D374 E102                       	smpsAlterNote       $02
0008D376 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D37A E108                       	smpsAlterNote       $08
0008D37C E701                       	dc.b	smpsNoAttack, $01
0008D37E E10B                       	smpsAlterNote       $0B
0008D380 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D384 E105                       	smpsAlterNote       $05
0008D386 E701                       	dc.b	smpsNoAttack, $01
0008D388 E101                       	smpsAlterNote       $01
0008D38A E701                       	dc.b	smpsNoAttack, $01
0008D38C E102                       	smpsAlterNote       $02
0008D38E E701                       	dc.b	smpsNoAttack, $01
0008D390 E108                       	smpsAlterNote       $08
0008D392 E701                       	dc.b	smpsNoAttack, $01
0008D394 E10C                       	smpsAlterNote       $0C
0008D396 E701                       	dc.b	smpsNoAttack, $01
0008D398 E108                       	smpsAlterNote       $08
0008D39A E701                       	dc.b	smpsNoAttack, $01
0008D39C E105                       	smpsAlterNote       $05
0008D39E E701                       	dc.b	smpsNoAttack, $01
0008D3A0 E101                       	smpsAlterNote       $01
0008D3A2 E701                       	dc.b	smpsNoAttack, $01
0008D3A4 E105                       	smpsAlterNote       $05
0008D3A6 E701                       	dc.b	smpsNoAttack, $01
0008D3A8 E10B                       	smpsAlterNote       $0B
0008D3AA E701                       	dc.b	smpsNoAttack, $01
0008D3AC E10C                       	smpsAlterNote       $0C
0008D3AE E701                       	dc.b	smpsNoAttack, $01
0008D3B0 E108                       	smpsAlterNote       $08
0008D3B2 E701                       	dc.b	smpsNoAttack, $01
0008D3B4 E102                       	smpsAlterNote       $02
0008D3B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3BA E108                       	smpsAlterNote       $08
0008D3BC E701                       	dc.b	smpsNoAttack, $01
0008D3BE E10B                       	smpsAlterNote       $0B
0008D3C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3C4 E105                       	smpsAlterNote       $05
0008D3C6 E701                       	dc.b	smpsNoAttack, $01
0008D3C8 E101                       	smpsAlterNote       $01
0008D3CA E701                       	dc.b	smpsNoAttack, $01
0008D3CC E102                       	smpsAlterNote       $02
0008D3CE E701                       	dc.b	smpsNoAttack, $01
0008D3D0 E108                       	smpsAlterNote       $08
0008D3D2 E701                       	dc.b	smpsNoAttack, $01
0008D3D4 E10C                       	smpsAlterNote       $0C
0008D3D6 E701                       	dc.b	smpsNoAttack, $01
0008D3D8 E108                       	smpsAlterNote       $08
0008D3DA E701                       	dc.b	smpsNoAttack, $01
0008D3DC E105                       	smpsAlterNote       $05
0008D3DE E701                       	dc.b	smpsNoAttack, $01
0008D3E0 E101                       	smpsAlterNote       $01
0008D3E2 E701                       	dc.b	smpsNoAttack, $01
0008D3E4 E105                       	smpsAlterNote       $05
0008D3E6 E701                       	dc.b	smpsNoAttack, $01
0008D3E8 E10B                       	smpsAlterNote       $0B
0008D3EA E701                       	dc.b	smpsNoAttack, $01
0008D3EC E10C                       	smpsAlterNote       $0C
0008D3EE E701                       	dc.b	smpsNoAttack, $01
0008D3F0 E108                       	smpsAlterNote       $08
0008D3F2 E701                       	dc.b	smpsNoAttack, $01
0008D3F4 E102                       	smpsAlterNote       $02
0008D3F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3FA E105                       	smpsAlterNote       $05
0008D3FC E701                       	dc.b	smpsNoAttack, $01
0008D3FE E10B                       	smpsAlterNote       $0B
0008D400 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D404 E105                       	smpsAlterNote       $05
0008D406 E701                       	dc.b	smpsNoAttack, $01
0008D408 E102                       	smpsAlterNote       $02
0008D40A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D40E E108                       	smpsAlterNote       $08
0008D410 E701                       	dc.b	smpsNoAttack, $01
0008D412 E10C                       	smpsAlterNote       $0C
0008D414 E701                       	dc.b	smpsNoAttack, $01
0008D416 E10B                       	smpsAlterNote       $0B
0008D418 E701                       	dc.b	smpsNoAttack, $01
0008D41A E105                       	smpsAlterNote       $05
0008D41C E701                       	dc.b	smpsNoAttack, $01
0008D41E E101                       	smpsAlterNote       $01
0008D420 E701                       	dc.b	smpsNoAttack, $01
0008D422 E105                       	smpsAlterNote       $05
0008D424 E701                       	dc.b	smpsNoAttack, $01
0008D426 E108                       	smpsAlterNote       $08
0008D428 E701                       	dc.b	smpsNoAttack, $01
0008D42A E10C                       	smpsAlterNote       $0C
0008D42C E701                       	dc.b	smpsNoAttack, $01
0008D42E E108                       	smpsAlterNote       $08
0008D430 E701                       	dc.b	smpsNoAttack, $01
0008D432 E102                       	smpsAlterNote       $02
0008D434 E701                       	dc.b	smpsNoAttack, $01
0008D436 E101                       	smpsAlterNote       $01
0008D438 E701                       	dc.b	smpsNoAttack, $01
0008D43A E105                       	smpsAlterNote       $05
0008D43C E701                       	dc.b	smpsNoAttack, $01
0008D43E E10B                       	smpsAlterNote       $0B
0008D440 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D444 E108                       	smpsAlterNote       $08
0008D446 E701                       	dc.b	smpsNoAttack, $01
0008D448 E102                       	smpsAlterNote       $02
0008D44A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D44E E108                       	smpsAlterNote       $08
0008D450 E701                       	dc.b	smpsNoAttack, $01
0008D452 E10B                       	smpsAlterNote       $0B
0008D454 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D458 E105                       	smpsAlterNote       $05
0008D45A E701                       	dc.b	smpsNoAttack, $01
0008D45C E102                       	smpsAlterNote       $02
0008D45E 8001                       	dc.b	nRst, $01
0008D460 E107                       	smpsAlterNote       $07
0008D462 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008D466 E108                       	smpsAlterNote       $08
0008D468 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
0008D46C E102                       	smpsAlterNote       $02
0008D46E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D472 E108                       	smpsAlterNote       $08
0008D474 E701                       	dc.b	smpsNoAttack, $01
0008D476 E10B                       	smpsAlterNote       $0B
0008D478 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D47C E105                       	smpsAlterNote       $05
0008D47E E701                       	dc.b	smpsNoAttack, $01
0008D480 E101                       	smpsAlterNote       $01
0008D482 E701                       	dc.b	smpsNoAttack, $01
0008D484 E102                       	smpsAlterNote       $02
0008D486 E701                       	dc.b	smpsNoAttack, $01
0008D488 E108                       	smpsAlterNote       $08
0008D48A E701                       	dc.b	smpsNoAttack, $01
0008D48C E10C                       	smpsAlterNote       $0C
0008D48E E701                       	dc.b	smpsNoAttack, $01
0008D490 E108                       	smpsAlterNote       $08
0008D492 E701                       	dc.b	smpsNoAttack, $01
0008D494 E105                       	smpsAlterNote       $05
0008D496 E701                       	dc.b	smpsNoAttack, $01
0008D498 E101                       	smpsAlterNote       $01
0008D49A E701                       	dc.b	smpsNoAttack, $01
0008D49C E105                       	smpsAlterNote       $05
0008D49E E701                       	dc.b	smpsNoAttack, $01
0008D4A0 E10B                       	smpsAlterNote       $0B
0008D4A2 E701                       	dc.b	smpsNoAttack, $01
0008D4A4 E10C                       	smpsAlterNote       $0C
0008D4A6 E701                       	dc.b	smpsNoAttack, $01
0008D4A8 E108                       	smpsAlterNote       $08
0008D4AA E701                       	dc.b	smpsNoAttack, $01
0008D4AC E102                       	smpsAlterNote       $02
0008D4AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4B2 E105                       	smpsAlterNote       $05
0008D4B4 E701                       	dc.b	smpsNoAttack, $01
0008D4B6 E10B                       	smpsAlterNote       $0B
0008D4B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4BC E105                       	smpsAlterNote       $05
0008D4BE E701                       	dc.b	smpsNoAttack, $01
0008D4C0 E102                       	smpsAlterNote       $02
0008D4C2 E701                       	dc.b	smpsNoAttack, $01
0008D4C4 E109                       	smpsAlterNote       $09
0008D4C6 C40A C207                  	dc.b	nG5, $0A, nF5, $07
0008D4CA E108                       	smpsAlterNote       $08
0008D4CC C10D                       	dc.b	nE5, $0D
0008D4CE E105                       	smpsAlterNote       $05
0008D4D0 E701                       	dc.b	smpsNoAttack, $01
0008D4D2 E101                       	smpsAlterNote       $01
0008D4D4 E701                       	dc.b	smpsNoAttack, $01
0008D4D6 E102                       	smpsAlterNote       $02
0008D4D8 E701                       	dc.b	smpsNoAttack, $01
0008D4DA E108                       	smpsAlterNote       $08
0008D4DC E701                       	dc.b	smpsNoAttack, $01
0008D4DE E10C                       	smpsAlterNote       $0C
0008D4E0 E701                       	dc.b	smpsNoAttack, $01
0008D4E2 E108                       	smpsAlterNote       $08
0008D4E4 E701                       	dc.b	smpsNoAttack, $01
0008D4E6 E105                       	smpsAlterNote       $05
0008D4E8 E701                       	dc.b	smpsNoAttack, $01
0008D4EA E101                       	smpsAlterNote       $01
0008D4EC E701                       	dc.b	smpsNoAttack, $01
0008D4EE E105                       	smpsAlterNote       $05
0008D4F0 E701                       	dc.b	smpsNoAttack, $01
0008D4F2 E10B                       	smpsAlterNote       $0B
0008D4F4 E701                       	dc.b	smpsNoAttack, $01
0008D4F6 E10C                       	smpsAlterNote       $0C
0008D4F8 E701                       	dc.b	smpsNoAttack, $01
0008D4FA E108                       	smpsAlterNote       $08
0008D4FC E701                       	dc.b	smpsNoAttack, $01
0008D4FE E102                       	smpsAlterNote       $02
0008D500 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0008D508 E10B                       	smpsAlterNote       $0B
0008D50A BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008D50E E10C                       	smpsAlterNote       $0C
0008D510 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008D514 E10B                       	smpsAlterNote       $0B
0008D516 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0008D51C E107                       	smpsAlterNote       $07
0008D51E BF03                       	dc.b	nD5, $03
0008D520 E108                       	smpsAlterNote       $08
0008D522 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D526 E109                       	smpsAlterNote       $09
0008D528 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008D52E E10B                       	smpsAlterNote       $0B
0008D530 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D534 E107                       	smpsAlterNote       $07
0008D536 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D53A E106                       	smpsAlterNote       $06
0008D53C C90D                       	dc.b	nC6, $0D
0008D53E E103                       	smpsAlterNote       $03
0008D540 E701                       	dc.b	smpsNoAttack, $01
0008D542 E1FF                       	smpsAlterNote       $FF
0008D544 E701                       	dc.b	smpsNoAttack, $01
0008D546 E103                       	smpsAlterNote       $03
0008D548 E701                       	dc.b	smpsNoAttack, $01
0008D54A E109                       	smpsAlterNote       $09
0008D54C E701                       	dc.b	smpsNoAttack, $01
0008D54E E10A                       	smpsAlterNote       $0A
0008D550 E701                       	dc.b	smpsNoAttack, $01
0008D552 E106                       	smpsAlterNote       $06
0008D554 E701                       	dc.b	smpsNoAttack, $01
0008D556 E100                       	smpsAlterNote       $00
0008D558 E701                       	dc.b	smpsNoAttack, $01
0008D55A E10C                       	smpsAlterNote       $0C
0008D55C C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008D560 E10B                       	smpsAlterNote       $0B
0008D562 C603                       	dc.b	nA5, $03
0008D564 E109                       	smpsAlterNote       $09
0008D566 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D56A E10B                       	smpsAlterNote       $0B
0008D56C C60D                       	dc.b	nA5, $0D
0008D56E E105                       	smpsAlterNote       $05
0008D570 E701                       	dc.b	smpsNoAttack, $01
0008D572 E104                       	smpsAlterNote       $04
0008D574 E701                       	dc.b	smpsNoAttack, $01
0008D576 E108                       	smpsAlterNote       $08
0008D578 E701                       	dc.b	smpsNoAttack, $01
0008D57A E10E                       	smpsAlterNote       $0E
0008D57C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D580 E10B                       	smpsAlterNote       $0B
0008D582 E701                       	dc.b	smpsNoAttack, $01
0008D584 E105                       	smpsAlterNote       $05
0008D586 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D58A E10B                       	smpsAlterNote       $0B
0008D58C E701                       	dc.b	smpsNoAttack, $01
0008D58E E10E                       	smpsAlterNote       $0E
0008D590 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D594 E108                       	smpsAlterNote       $08
0008D596 E701                       	dc.b	smpsNoAttack, $01
0008D598 E104                       	smpsAlterNote       $04
0008D59A E701                       	dc.b	smpsNoAttack, $01
0008D59C E105                       	smpsAlterNote       $05
0008D59E E701                       	dc.b	smpsNoAttack, $01
0008D5A0 E10B                       	smpsAlterNote       $0B
0008D5A2 E701                       	dc.b	smpsNoAttack, $01
0008D5A4 E10F                       	smpsAlterNote       $0F
0008D5A6 E701                       	dc.b	smpsNoAttack, $01
0008D5A8 E10B                       	smpsAlterNote       $0B
0008D5AA E701                       	dc.b	smpsNoAttack, $01
0008D5AC E108                       	smpsAlterNote       $08
0008D5AE E701                       	dc.b	smpsNoAttack, $01
0008D5B0 E104                       	smpsAlterNote       $04
0008D5B2 E701                       	dc.b	smpsNoAttack, $01
0008D5B4 E108                       	smpsAlterNote       $08
0008D5B6 E701                       	dc.b	smpsNoAttack, $01
0008D5B8 E10E                       	smpsAlterNote       $0E
0008D5BA E701                       	dc.b	smpsNoAttack, $01
0008D5BC E10F                       	smpsAlterNote       $0F
0008D5BE E701                       	dc.b	smpsNoAttack, $01
0008D5C0 E10B                       	smpsAlterNote       $0B
0008D5C2 E701                       	dc.b	smpsNoAttack, $01
0008D5C4 E105                       	smpsAlterNote       $05
0008D5C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5CA E108                       	smpsAlterNote       $08
0008D5CC E701                       	dc.b	smpsNoAttack, $01
0008D5CE E10E                       	smpsAlterNote       $0E
0008D5D0 E701                       	dc.b	smpsNoAttack, $01
0008D5D2 E10F                       	smpsAlterNote       $0F
0008D5D4 800F                       	dc.b	nRst, $0F
0008D5D6 E107                       	smpsAlterNote       $07
0008D5D8 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D5DC E108                       	smpsAlterNote       $08
0008D5DE C103                       	dc.b	nE5, $03
0008D5E0 E109                       	smpsAlterNote       $09
0008D5E2 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008D5E8 E10B                       	smpsAlterNote       $0B
0008D5EA C607                       	dc.b	nA5, $07
0008D5EC E107                       	smpsAlterNote       $07
0008D5EE BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008D5F2 E106                       	smpsAlterNote       $06
0008D5F4 C90D                       	dc.b	nC6, $0D
0008D5F6 E107                       	smpsAlterNote       $07
0008D5F8 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008D5FC E10C                       	smpsAlterNote       $0C
0008D5FE C704                       	dc.b	nBb5, $04
0008D600 E10B                       	smpsAlterNote       $0B
0008D602 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D606 E109                       	smpsAlterNote       $09
0008D608 C404                       	dc.b	nG5, $04
0008D60A E10B                       	smpsAlterNote       $0B
0008D60C C60D                       	dc.b	nA5, $0D
0008D60E E108                       	smpsAlterNote       $08
0008D610 E701                       	dc.b	smpsNoAttack, $01
0008D612 E105                       	smpsAlterNote       $05
0008D614 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D618 E10B                       	smpsAlterNote       $0B
0008D61A E701                       	dc.b	smpsNoAttack, $01
0008D61C E10F                       	smpsAlterNote       $0F
0008D61E E701                       	dc.b	smpsNoAttack, $01
0008D620 E10E                       	smpsAlterNote       $0E
0008D622 E701                       	dc.b	smpsNoAttack, $01
0008D624 E108                       	smpsAlterNote       $08
0008D626 E701                       	dc.b	smpsNoAttack, $01
0008D628 E104                       	smpsAlterNote       $04
0008D62A E701                       	dc.b	smpsNoAttack, $01
0008D62C E108                       	smpsAlterNote       $08
0008D62E E701                       	dc.b	smpsNoAttack, $01
0008D630 E10B                       	smpsAlterNote       $0B
0008D632 E701                       	dc.b	smpsNoAttack, $01
0008D634 E10F                       	smpsAlterNote       $0F
0008D636 E701                       	dc.b	smpsNoAttack, $01
0008D638 E10B                       	smpsAlterNote       $0B
0008D63A E701                       	dc.b	smpsNoAttack, $01
0008D63C E105                       	smpsAlterNote       $05
0008D63E E701                       	dc.b	smpsNoAttack, $01
0008D640 E104                       	smpsAlterNote       $04
0008D642 E701                       	dc.b	smpsNoAttack, $01
0008D644 E108                       	smpsAlterNote       $08
0008D646 E701                       	dc.b	smpsNoAttack, $01
0008D648 E10E                       	smpsAlterNote       $0E
0008D64A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D64E E10B                       	smpsAlterNote       $0B
0008D650 E701                       	dc.b	smpsNoAttack, $01
0008D652 E105                       	smpsAlterNote       $05
0008D654 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D658 E10B                       	smpsAlterNote       $0B
0008D65A E701                       	dc.b	smpsNoAttack, $01
0008D65C E10E                       	smpsAlterNote       $0E
0008D65E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D662 E108                       	smpsAlterNote       $08
0008D664 E701                       	dc.b	smpsNoAttack, $01
0008D666 E105                       	smpsAlterNote       $05
0008D668 8001                       	dc.b	nRst, $01
0008D66A E109                       	smpsAlterNote       $09
0008D66C C401 8001                  	dc.b	nG5, $01, nRst, $01
0008D670 E10B                       	smpsAlterNote       $0B
0008D672 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008D67A E109                       	smpsAlterNote       $09
0008D67C C404                       	dc.b	nG5, $04
0008D67E E10B                       	smpsAlterNote       $0B
0008D680 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D684 E107                       	smpsAlterNote       $07
0008D686 BF0D                       	dc.b	nD5, $0D
0008D688 E101                       	smpsAlterNote       $01
0008D68A E701                       	dc.b	smpsNoAttack, $01
0008D68C E100                       	smpsAlterNote       $00
0008D68E E701                       	dc.b	smpsNoAttack, $01
0008D690 E104                       	smpsAlterNote       $04
0008D692 E701                       	dc.b	smpsNoAttack, $01
0008D694 E10A                       	smpsAlterNote       $0A
0008D696 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D69A E107                       	smpsAlterNote       $07
0008D69C E701                       	dc.b	smpsNoAttack, $01
0008D69E E101                       	smpsAlterNote       $01
0008D6A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6A4 E107                       	smpsAlterNote       $07
0008D6A6 E701                       	dc.b	smpsNoAttack, $01
0008D6A8 E10A                       	smpsAlterNote       $0A
0008D6AA E701                       	dc.b	smpsNoAttack, $01
0008D6AC E10B                       	smpsAlterNote       $0B
0008D6AE 8001                       	dc.b	nRst, $01
0008D6B0 E108                       	smpsAlterNote       $08
0008D6B2 8001                       	dc.b	nRst, $01
0008D6B4 E109                       	smpsAlterNote       $09
0008D6B6 8001 C401                  	dc.b	nRst, $01, nG5, $01
0008D6BA E10B                       	smpsAlterNote       $0B
0008D6BC C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008D6C4 E108                       	smpsAlterNote       $08
0008D6C6 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008D6CA E109                       	smpsAlterNote       $09
0008D6CC CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008D6D0 E108                       	smpsAlterNote       $08
0008D6D2 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008D6D6 E106                       	smpsAlterNote       $06
0008D6D8 C903                       	dc.b	nC6, $03
0008D6DA E109                       	smpsAlterNote       $09
0008D6DC C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D6E0 E10C                       	smpsAlterNote       $0C
0008D6E2 C70D                       	dc.b	nBb5, $0D
0008D6E4 E109                       	smpsAlterNote       $09
0008D6E6 E701                       	dc.b	smpsNoAttack, $01
0008D6E8 E105                       	smpsAlterNote       $05
0008D6EA E701                       	dc.b	smpsNoAttack, $01
0008D6EC E109                       	smpsAlterNote       $09
0008D6EE E701                       	dc.b	smpsNoAttack, $01
0008D6F0 E10F                       	smpsAlterNote       $0F
0008D6F2 E701                       	dc.b	smpsNoAttack, $01
0008D6F4 E110                       	smpsAlterNote       $10
0008D6F6 E701                       	dc.b	smpsNoAttack, $01
0008D6F8 E10C                       	smpsAlterNote       $0C
0008D6FA E701                       	dc.b	smpsNoAttack, $01
0008D6FC E106                       	smpsAlterNote       $06
0008D6FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D702 E109                       	smpsAlterNote       $09
0008D704 E701                       	dc.b	smpsNoAttack, $01
0008D706 E10F                       	smpsAlterNote       $0F
0008D708 E701                       	dc.b	smpsNoAttack, $01
0008D70A E110                       	smpsAlterNote       $10
0008D70C 8001                       	dc.b	nRst, $01
0008D70E E10B                       	smpsAlterNote       $0B
0008D710 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D714 E109                       	smpsAlterNote       $09
0008D716 C40D                       	dc.b	nG5, $0D
0008D718 E103                       	smpsAlterNote       $03
0008D71A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D71E E106                       	smpsAlterNote       $06
0008D720 E701                       	dc.b	smpsNoAttack, $01
0008D722 E10C                       	smpsAlterNote       $0C
0008D724 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D728 E106                       	smpsAlterNote       $06
0008D72A E701                       	dc.b	smpsNoAttack, $01
0008D72C E103                       	smpsAlterNote       $03
0008D72E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D732 E109                       	smpsAlterNote       $09
0008D734 E701                       	dc.b	smpsNoAttack, $01
0008D736 E10D                       	smpsAlterNote       $0D
0008D738 E701                       	dc.b	smpsNoAttack, $01
0008D73A E10C                       	smpsAlterNote       $0C
0008D73C E701                       	dc.b	smpsNoAttack, $01
0008D73E E106                       	smpsAlterNote       $06
0008D740 E701                       	dc.b	smpsNoAttack, $01
0008D742 E102                       	smpsAlterNote       $02
0008D744 E701                       	dc.b	smpsNoAttack, $01
0008D746 E103                       	smpsAlterNote       $03
0008D748 8001                       	dc.b	nRst, $01
0008D74A E10B                       	smpsAlterNote       $0B
0008D74C C60D                       	dc.b	nA5, $0D
0008D74E E108                       	smpsAlterNote       $08
0008D750 E701                       	dc.b	smpsNoAttack, $01
0008D752 E104                       	smpsAlterNote       $04
0008D754 E701                       	dc.b	smpsNoAttack, $01
0008D756 E108                       	smpsAlterNote       $08
0008D758 E701                       	dc.b	smpsNoAttack, $01
0008D75A E10B                       	smpsAlterNote       $0B
0008D75C E701                       	dc.b	smpsNoAttack, $01
0008D75E E10F                       	smpsAlterNote       $0F
0008D760 E701                       	dc.b	smpsNoAttack, $01
0008D762 E10B                       	smpsAlterNote       $0B
0008D764 E701                       	dc.b	smpsNoAttack, $01
0008D766 E105                       	smpsAlterNote       $05
0008D768 E701                       	dc.b	smpsNoAttack, $01
0008D76A E104                       	smpsAlterNote       $04
0008D76C E701                       	dc.b	smpsNoAttack, $01
0008D76E E108                       	smpsAlterNote       $08
0008D770 E701                       	dc.b	smpsNoAttack, $01
0008D772 E10E                       	smpsAlterNote       $0E
0008D774 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D778 E10B                       	smpsAlterNote       $0B
0008D77A E701                       	dc.b	smpsNoAttack, $01
0008D77C E105                       	smpsAlterNote       $05
0008D77E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D782 E10C                       	smpsAlterNote       $0C
0008D784 C70E                       	dc.b	nBb5, $0E
0008D786 E106                       	smpsAlterNote       $06
0008D788 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D78C E10C                       	smpsAlterNote       $0C
0008D78E E701                       	dc.b	smpsNoAttack, $01
0008D790 E10F                       	smpsAlterNote       $0F
0008D792 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D796 E109                       	smpsAlterNote       $09
0008D798 E701                       	dc.b	smpsNoAttack, $01
0008D79A E105                       	smpsAlterNote       $05
0008D79C E701                       	dc.b	smpsNoAttack, $01
0008D79E E106                       	smpsAlterNote       $06
0008D7A0 E701                       	dc.b	smpsNoAttack, $01
0008D7A2 E10C                       	smpsAlterNote       $0C
0008D7A4 E701                       	dc.b	smpsNoAttack, $01
0008D7A6 E110                       	smpsAlterNote       $10
0008D7A8 E701                       	dc.b	smpsNoAttack, $01
0008D7AA E10C                       	smpsAlterNote       $0C
0008D7AC E701                       	dc.b	smpsNoAttack, $01
0008D7AE E109                       	smpsAlterNote       $09
0008D7B0 E701                       	dc.b	smpsNoAttack, $01
0008D7B2 E105                       	smpsAlterNote       $05
0008D7B4 E701                       	dc.b	smpsNoAttack, $01
0008D7B6 E106                       	smpsAlterNote       $06
0008D7B8 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
0008D7BC E107                       	smpsAlterNote       $07
0008D7BE CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0008D7C3 E108                       	smpsAlterNote       $08
0008D7C5 CD0D                       	dc.b	nE6, $0D
0008D7C7 E107                       	smpsAlterNote       $07
0008D7C9 CB0D                       	dc.b	nD6, $0D
0008D7CB E104                       	smpsAlterNote       $04
0008D7CD E701                       	dc.b	smpsNoAttack, $01
0008D7CF E100                       	smpsAlterNote       $00
0008D7D1 E701                       	dc.b	smpsNoAttack, $01
0008D7D3 E101                       	smpsAlterNote       $01
0008D7D5 E701                       	dc.b	smpsNoAttack, $01
0008D7D7 E107                       	smpsAlterNote       $07
0008D7D9 E701                       	dc.b	smpsNoAttack, $01
0008D7DB E10B                       	smpsAlterNote       $0B
0008D7DD E701                       	dc.b	smpsNoAttack, $01
0008D7DF E107                       	smpsAlterNote       $07
0008D7E1 E701                       	dc.b	smpsNoAttack, $01
0008D7E3 E104                       	smpsAlterNote       $04
0008D7E5 E701                       	dc.b	smpsNoAttack, $01
0008D7E7 E100                       	smpsAlterNote       $00
0008D7E9 E701                       	dc.b	smpsNoAttack, $01
0008D7EB E104                       	smpsAlterNote       $04
0008D7ED E701                       	dc.b	smpsNoAttack, $01
0008D7EF E10A                       	smpsAlterNote       $0A
0008D7F1 E701                       	dc.b	smpsNoAttack, $01
0008D7F3 E10B                       	smpsAlterNote       $0B
0008D7F5 E701                       	dc.b	smpsNoAttack, $01
0008D7F7 E108                       	smpsAlterNote       $08
0008D7F9 CC0D                       	dc.b	nEb6, $0D
0008D7FB E105                       	smpsAlterNote       $05
0008D7FD E701                       	dc.b	smpsNoAttack, $01
0008D7FF E101                       	smpsAlterNote       $01
0008D801 E701                       	dc.b	smpsNoAttack, $01
0008D803 E102                       	smpsAlterNote       $02
0008D805 E701                       	dc.b	smpsNoAttack, $01
0008D807 E108                       	smpsAlterNote       $08
0008D809 E701                       	dc.b	smpsNoAttack, $01
0008D80B E106                       	smpsAlterNote       $06
0008D80D C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
0008D819 8001                       	dc.b	nRst, $01
0008D81B E107                       	smpsAlterNote       $07
0008D81D CB0D                       	dc.b	nD6, $0D
0008D81F E104                       	smpsAlterNote       $04
0008D821 E701                       	dc.b	smpsNoAttack, $01
0008D823 E100                       	smpsAlterNote       $00
0008D825 E701                       	dc.b	smpsNoAttack, $01
0008D827 E104                       	smpsAlterNote       $04
0008D829 E701                       	dc.b	smpsNoAttack, $01
0008D82B E107                       	smpsAlterNote       $07
0008D82D E701                       	dc.b	smpsNoAttack, $01
0008D82F E10B                       	smpsAlterNote       $0B
0008D831 E701                       	dc.b	smpsNoAttack, $01
0008D833 E107                       	smpsAlterNote       $07
0008D835 E701                       	dc.b	smpsNoAttack, $01
0008D837 E101                       	smpsAlterNote       $01
0008D839 E701                       	dc.b	smpsNoAttack, $01
0008D83B E100                       	smpsAlterNote       $00
0008D83D E701                       	dc.b	smpsNoAttack, $01
0008D83F E104                       	smpsAlterNote       $04
0008D841 E701                       	dc.b	smpsNoAttack, $01
0008D843 E10A                       	smpsAlterNote       $0A
0008D845 E701                       	dc.b	smpsNoAttack, $01
0008D847 E10B                       	smpsAlterNote       $0B
0008D849 8001                       	dc.b	nRst, $01
0008D84B E109                       	smpsAlterNote       $09
0008D84D CE0A                       	dc.b	nF6, $0A
0008D84F E108                       	smpsAlterNote       $08
0008D851 CC07                       	dc.b	nEb6, $07
0008D853 E106                       	smpsAlterNote       $06
0008D855 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0008D861 E107                       	smpsAlterNote       $07
0008D863 CB0D                       	dc.b	nD6, $0D
0008D865 E101                       	smpsAlterNote       $01
0008D867 E701                       	dc.b	smpsNoAttack, $01
0008D869 E100                       	smpsAlterNote       $00
0008D86B E701                       	dc.b	smpsNoAttack, $01
0008D86D E104                       	smpsAlterNote       $04
0008D86F E701                       	dc.b	smpsNoAttack, $01
0008D871 E10A                       	smpsAlterNote       $0A
0008D873 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D877 E107                       	smpsAlterNote       $07
0008D879 E701                       	dc.b	smpsNoAttack, $01
0008D87B E101                       	smpsAlterNote       $01
0008D87D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D881 E107                       	smpsAlterNote       $07
0008D883 E701                       	dc.b	smpsNoAttack, $01
0008D885 E10A                       	smpsAlterNote       $0A
0008D887 E701                       	dc.b	smpsNoAttack, $01
0008D889 E10B                       	smpsAlterNote       $0B
0008D88B 8001                       	dc.b	nRst, $01
0008D88D E108                       	smpsAlterNote       $08
0008D88F CC0D                       	dc.b	nEb6, $0D
0008D891 E102                       	smpsAlterNote       $02
0008D893 E701                       	dc.b	smpsNoAttack, $01
0008D895 E101                       	smpsAlterNote       $01
0008D897 E701                       	dc.b	smpsNoAttack, $01
0008D899 E105                       	smpsAlterNote       $05
0008D89B E701                       	dc.b	smpsNoAttack, $01
0008D89D E108                       	smpsAlterNote       $08
0008D89F 8001                       	dc.b	nRst, $01
0008D8A1 E106                       	smpsAlterNote       $06
0008D8A3 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008D8AF 8001                       	dc.b	nRst, $01
0008D8B1 E107                       	smpsAlterNote       $07
0008D8B3 CB0D                       	dc.b	nD6, $0D
0008D8B5 E101                       	smpsAlterNote       $01
0008D8B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8BB E104                       	smpsAlterNote       $04
0008D8BD E701                       	dc.b	smpsNoAttack, $01
0008D8BF E10A                       	smpsAlterNote       $0A
0008D8C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8C5 E104                       	smpsAlterNote       $04
0008D8C7 E701                       	dc.b	smpsNoAttack, $01
0008D8C9 E101                       	smpsAlterNote       $01
0008D8CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8CF E107                       	smpsAlterNote       $07
0008D8D1 E701                       	dc.b	smpsNoAttack, $01
0008D8D3 E10B                       	smpsAlterNote       $0B
0008D8D5 E701                       	dc.b	smpsNoAttack, $01
0008D8D7 E10A                       	smpsAlterNote       $0A
0008D8D9 E701                       	dc.b	smpsNoAttack, $01
0008D8DB E104                       	smpsAlterNote       $04
0008D8DD E701                       	dc.b	smpsNoAttack, $01
0008D8DF E100                       	smpsAlterNote       $00
0008D8E1 E701                       	dc.b	smpsNoAttack, $01
0008D8E3 E101                       	smpsAlterNote       $01
0008D8E5 801C                       	dc.b	nRst, $1C
0008D8E9 E107                       	smpsAlterNote       $07
0008D8EB BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008D8EF E603                       	smpsAlterVol        $03
0008D8F1 F6F1 AD                    	smpsJump            music84_Jump03
0008D8F4                            
0008D8F4                            ; FM3 Data
0008D8F4                            music84_FM3:
0008D8F4 E0C0                       	smpsPan             panCenter, $00
0008D8F8 E109                       	smpsAlterNote       $09
0008D8FA C203 8007                  	dc.b	nF5, $03, nRst, $07
0008D8FE E108                       	smpsAlterNote       $08
0008D900 C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008D904 E10B                       	smpsAlterNote       $0B
0008D906 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008D90C E040                       	smpsPan             panRight, $00
0008D90E E110                       	smpsAlterNote       $10
0008D910 E6F9                       	smpsAlterVol        $F9
0008D912 C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008D916 E10F                       	smpsAlterNote       $0F
0008D918 C603                       	dc.b	nA5, $03
0008D91A E10D                       	smpsAlterNote       $0D
0008D91C C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008D922 E10C                       	smpsAlterNote       $0C
0008D924 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D928 E10A                       	smpsAlterNote       $0A
0008D92A BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008D92E E10F                       	smpsAlterNote       $0F
0008D930 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008D934 E0C0                       	smpsPan             panCenter, $00
0008D938 E109                       	smpsAlterNote       $09
0008D93A E609                       	smpsAlterVol        $09
0008D93C B603                       	dc.b	nF4, $03
0008D93E                            
0008D93E                            music84_Jump02:
0008D93E E70A                       	dc.b	smpsNoAttack, $0A
0008D940 E103                       	smpsAlterNote       $03
0008D942 E701                       	dc.b	smpsNoAttack, $01
0008D944 E102                       	smpsAlterNote       $02
0008D946 E701                       	dc.b	smpsNoAttack, $01
0008D948 E106                       	smpsAlterNote       $06
0008D94A E701                       	dc.b	smpsNoAttack, $01
0008D94C E10C                       	smpsAlterNote       $0C
0008D94E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D952 E109                       	smpsAlterNote       $09
0008D954 E701                       	dc.b	smpsNoAttack, $01
0008D956 E103                       	smpsAlterNote       $03
0008D958 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D95C E109                       	smpsAlterNote       $09
0008D95E E701                       	dc.b	smpsNoAttack, $01
0008D960 E10C                       	smpsAlterNote       $0C
0008D962 E701                       	dc.b	smpsNoAttack, $01
0008D964 E10D                       	smpsAlterNote       $0D
0008D966 8001                       	dc.b	nRst, $01
0008D968 E109                       	smpsAlterNote       $09
0008D96A B80D                       	dc.b	nG4, $0D
0008D96C E103                       	smpsAlterNote       $03
0008D96E E701                       	dc.b	smpsNoAttack, $01
0008D970 E102                       	smpsAlterNote       $02
0008D972 E701                       	dc.b	smpsNoAttack, $01
0008D974 E106                       	smpsAlterNote       $06
0008D976 E701                       	dc.b	smpsNoAttack, $01
0008D978 E10C                       	smpsAlterNote       $0C
0008D97A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D97E E109                       	smpsAlterNote       $09
0008D980 E701                       	dc.b	smpsNoAttack, $01
0008D982 E103                       	smpsAlterNote       $03
0008D984 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D988 E109                       	smpsAlterNote       $09
0008D98A E701                       	dc.b	smpsNoAttack, $01
0008D98C E10C                       	smpsAlterNote       $0C
0008D98E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D992 E106                       	smpsAlterNote       $06
0008D994 E701                       	dc.b	smpsNoAttack, $01
0008D996 E102                       	smpsAlterNote       $02
0008D998 E701                       	dc.b	smpsNoAttack, $01
0008D99A E103                       	smpsAlterNote       $03
0008D99C E701                       	dc.b	smpsNoAttack, $01
0008D99E E109                       	smpsAlterNote       $09
0008D9A0 E701                       	dc.b	smpsNoAttack, $01
0008D9A2 E10D                       	smpsAlterNote       $0D
0008D9A4 E701                       	dc.b	smpsNoAttack, $01
0008D9A6 E109                       	smpsAlterNote       $09
0008D9A8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008D9AC E10B                       	smpsAlterNote       $0B
0008D9AE BA0D                       	dc.b	nA4, $0D
0008D9B0 E105                       	smpsAlterNote       $05
0008D9B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9B6 E108                       	smpsAlterNote       $08
0008D9B8 E701                       	dc.b	smpsNoAttack, $01
0008D9BA E10E                       	smpsAlterNote       $0E
0008D9BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9C0 E108                       	smpsAlterNote       $08
0008D9C2 E701                       	dc.b	smpsNoAttack, $01
0008D9C4 E104                       	smpsAlterNote       $04
0008D9C6 E701                       	dc.b	smpsNoAttack, $01
0008D9C8 E105                       	smpsAlterNote       $05
0008D9CA E701                       	dc.b	smpsNoAttack, $01
0008D9CC E10B                       	smpsAlterNote       $0B
0008D9CE E701                       	dc.b	smpsNoAttack, $01
0008D9D0 E10F                       	smpsAlterNote       $0F
0008D9D2 E701                       	dc.b	smpsNoAttack, $01
0008D9D4 E10B                       	smpsAlterNote       $0B
0008D9D6 E701                       	dc.b	smpsNoAttack, $01
0008D9D8 E108                       	smpsAlterNote       $08
0008D9DA E701                       	dc.b	smpsNoAttack, $01
0008D9DC E104                       	smpsAlterNote       $04
0008D9DE E701                       	dc.b	smpsNoAttack, $01
0008D9E0 E108                       	smpsAlterNote       $08
0008D9E2 E701                       	dc.b	smpsNoAttack, $01
0008D9E4 E10E                       	smpsAlterNote       $0E
0008D9E6 E701                       	dc.b	smpsNoAttack, $01
0008D9E8 E10F                       	smpsAlterNote       $0F
0008D9EA E701                       	dc.b	smpsNoAttack, $01
0008D9EC E10B                       	smpsAlterNote       $0B
0008D9EE E701                       	dc.b	smpsNoAttack, $01
0008D9F0 E105                       	smpsAlterNote       $05
0008D9F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9F6 E108                       	smpsAlterNote       $08
0008D9F8 E701                       	dc.b	smpsNoAttack, $01
0008D9FA E10E                       	smpsAlterNote       $0E
0008D9FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA00 E108                       	smpsAlterNote       $08
0008DA02 E701                       	dc.b	smpsNoAttack, $01
0008DA04 E105                       	smpsAlterNote       $05
0008DA06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA0A E10B                       	smpsAlterNote       $0B
0008DA0C E701                       	dc.b	smpsNoAttack, $01
0008DA0E E10F                       	smpsAlterNote       $0F
0008DA10 E701                       	dc.b	smpsNoAttack, $01
0008DA12 E10E                       	smpsAlterNote       $0E
0008DA14 E701                       	dc.b	smpsNoAttack, $01
0008DA16 E108                       	smpsAlterNote       $08
0008DA18 E701                       	dc.b	smpsNoAttack, $01
0008DA1A E104                       	smpsAlterNote       $04
0008DA1C E701                       	dc.b	smpsNoAttack, $01
0008DA1E E105                       	smpsAlterNote       $05
0008DA20 8001                       	dc.b	nRst, $01
0008DA22 E108                       	smpsAlterNote       $08
0008DA24 B50A                       	dc.b	nE4, $0A
0008DA26 E109                       	smpsAlterNote       $09
0008DA28 B60D                       	dc.b	nF4, $0D
0008DA2A E106                       	smpsAlterNote       $06
0008DA2C E701                       	dc.b	smpsNoAttack, $01
0008DA2E E103                       	smpsAlterNote       $03
0008DA30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA34 E109                       	smpsAlterNote       $09
0008DA36 E701                       	dc.b	smpsNoAttack, $01
0008DA38 E10D                       	smpsAlterNote       $0D
0008DA3A E701                       	dc.b	smpsNoAttack, $01
0008DA3C E10C                       	smpsAlterNote       $0C
0008DA3E E701                       	dc.b	smpsNoAttack, $01
0008DA40 E106                       	smpsAlterNote       $06
0008DA42 E701                       	dc.b	smpsNoAttack, $01
0008DA44 E102                       	smpsAlterNote       $02
0008DA46 E701                       	dc.b	smpsNoAttack, $01
0008DA48 E106                       	smpsAlterNote       $06
0008DA4A E701                       	dc.b	smpsNoAttack, $01
0008DA4C E109                       	smpsAlterNote       $09
0008DA4E E701                       	dc.b	smpsNoAttack, $01
0008DA50 E10D                       	smpsAlterNote       $0D
0008DA52 E701                       	dc.b	smpsNoAttack, $01
0008DA54 E109                       	smpsAlterNote       $09
0008DA56 B80D                       	dc.b	nG4, $0D
0008DA58 E106                       	smpsAlterNote       $06
0008DA5A E701                       	dc.b	smpsNoAttack, $01
0008DA5C E103                       	smpsAlterNote       $03
0008DA5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA62 E109                       	smpsAlterNote       $09
0008DA64 E701                       	dc.b	smpsNoAttack, $01
0008DA66 E10D                       	smpsAlterNote       $0D
0008DA68 E701                       	dc.b	smpsNoAttack, $01
0008DA6A E10C                       	smpsAlterNote       $0C
0008DA6C E701                       	dc.b	smpsNoAttack, $01
0008DA6E E106                       	smpsAlterNote       $06
0008DA70 E701                       	dc.b	smpsNoAttack, $01
0008DA72 E102                       	smpsAlterNote       $02
0008DA74 E701                       	dc.b	smpsNoAttack, $01
0008DA76 E106                       	smpsAlterNote       $06
0008DA78 E701                       	dc.b	smpsNoAttack, $01
0008DA7A E109                       	smpsAlterNote       $09
0008DA7C E701                       	dc.b	smpsNoAttack, $01
0008DA7E E10D                       	smpsAlterNote       $0D
0008DA80 E701                       	dc.b	smpsNoAttack, $01
0008DA82 E109                       	smpsAlterNote       $09
0008DA84 E701                       	dc.b	smpsNoAttack, $01
0008DA86 E103                       	smpsAlterNote       $03
0008DA88 E701                       	dc.b	smpsNoAttack, $01
0008DA8A E102                       	smpsAlterNote       $02
0008DA8C E701                       	dc.b	smpsNoAttack, $01
0008DA8E E106                       	smpsAlterNote       $06
0008DA90 E701                       	dc.b	smpsNoAttack, $01
0008DA92 E10C                       	smpsAlterNote       $0C
0008DA94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA98 E109                       	smpsAlterNote       $09
0008DA9A E701                       	dc.b	smpsNoAttack, $01
0008DA9C E10B                       	smpsAlterNote       $0B
0008DA9E BA0D                       	dc.b	nA4, $0D
0008DAA0 E108                       	smpsAlterNote       $08
0008DAA2 E701                       	dc.b	smpsNoAttack, $01
0008DAA4 E104                       	smpsAlterNote       $04
0008DAA6 E701                       	dc.b	smpsNoAttack, $01
0008DAA8 E108                       	smpsAlterNote       $08
0008DAAA E701                       	dc.b	smpsNoAttack, $01
0008DAAC E10B                       	smpsAlterNote       $0B
0008DAAE E701                       	dc.b	smpsNoAttack, $01
0008DAB0 E10F                       	smpsAlterNote       $0F
0008DAB2 E701                       	dc.b	smpsNoAttack, $01
0008DAB4 E10B                       	smpsAlterNote       $0B
0008DAB6 E701                       	dc.b	smpsNoAttack, $01
0008DAB8 E105                       	smpsAlterNote       $05
0008DABA E701                       	dc.b	smpsNoAttack, $01
0008DABC E104                       	smpsAlterNote       $04
0008DABE E701                       	dc.b	smpsNoAttack, $01
0008DAC0 E108                       	smpsAlterNote       $08
0008DAC2 E701                       	dc.b	smpsNoAttack, $01
0008DAC4 E10E                       	smpsAlterNote       $0E
0008DAC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DACA E10B                       	smpsAlterNote       $0B
0008DACC E701                       	dc.b	smpsNoAttack, $01
0008DACE E105                       	smpsAlterNote       $05
0008DAD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAD4 E10B                       	smpsAlterNote       $0B
0008DAD6 E701                       	dc.b	smpsNoAttack, $01
0008DAD8 E10E                       	smpsAlterNote       $0E
0008DADA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DADE E108                       	smpsAlterNote       $08
0008DAE0 E701                       	dc.b	smpsNoAttack, $01
0008DAE2 E104                       	smpsAlterNote       $04
0008DAE4 E701                       	dc.b	smpsNoAttack, $01
0008DAE6 E105                       	smpsAlterNote       $05
0008DAE8 E701                       	dc.b	smpsNoAttack, $01
0008DAEA E10B                       	smpsAlterNote       $0B
0008DAEC E701                       	dc.b	smpsNoAttack, $01
0008DAEE E10F                       	smpsAlterNote       $0F
0008DAF0 E701                       	dc.b	smpsNoAttack, $01
0008DAF2 E10B                       	smpsAlterNote       $0B
0008DAF4 E701                       	dc.b	smpsNoAttack, $01
0008DAF6 E108                       	smpsAlterNote       $08
0008DAF8 E701                       	dc.b	smpsNoAttack, $01
0008DAFA E105                       	smpsAlterNote       $05
0008DAFC 8001                       	dc.b	nRst, $01
0008DAFE E109                       	smpsAlterNote       $09
0008DB00 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008DB04 E108                       	smpsAlterNote       $08
0008DB06 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008DB0A E107                       	smpsAlterNote       $07
0008DB0C B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008DB10 E108                       	smpsAlterNote       $08
0008DB12 B502 8001                  	dc.b	nE4, $02, nRst, $01
0008DB16 E109                       	smpsAlterNote       $09
0008DB18 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008DB1E E10B                       	smpsAlterNote       $0B
0008DB20 BA0D                       	dc.b	nA4, $0D
0008DB22 E108                       	smpsAlterNote       $08
0008DB24 E701                       	dc.b	smpsNoAttack, $01
0008DB26 E104                       	smpsAlterNote       $04
0008DB28 E701                       	dc.b	smpsNoAttack, $01
0008DB2A E108                       	smpsAlterNote       $08
0008DB2C E701                       	dc.b	smpsNoAttack, $01
0008DB2E E10E                       	smpsAlterNote       $0E
0008DB30 E701                       	dc.b	smpsNoAttack, $01
0008DB32 E10F                       	smpsAlterNote       $0F
0008DB34 E701                       	dc.b	smpsNoAttack, $01
0008DB36 E10B                       	smpsAlterNote       $0B
0008DB38 E701                       	dc.b	smpsNoAttack, $01
0008DB3A E105                       	smpsAlterNote       $05
0008DB3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB40 E108                       	smpsAlterNote       $08
0008DB42 E701                       	dc.b	smpsNoAttack, $01
0008DB44 E10E                       	smpsAlterNote       $0E
0008DB46 E701                       	dc.b	smpsNoAttack, $01
0008DB48 E10F                       	smpsAlterNote       $0F
0008DB4A 8001                       	dc.b	nRst, $01
0008DB4C E109                       	smpsAlterNote       $09
0008DB4E C20D                       	dc.b	nF5, $0D
0008DB50 E103                       	smpsAlterNote       $03
0008DB52 E701                       	dc.b	smpsNoAttack, $01
0008DB54 E102                       	smpsAlterNote       $02
0008DB56 E701                       	dc.b	smpsNoAttack, $01
0008DB58 E106                       	smpsAlterNote       $06
0008DB5A E701                       	dc.b	smpsNoAttack, $01
0008DB5C E10C                       	smpsAlterNote       $0C
0008DB5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB62 E109                       	smpsAlterNote       $09
0008DB64 E701                       	dc.b	smpsNoAttack, $01
0008DB66 E103                       	smpsAlterNote       $03
0008DB68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB6C E109                       	smpsAlterNote       $09
0008DB6E E701                       	dc.b	smpsNoAttack, $01
0008DB70 E10C                       	smpsAlterNote       $0C
0008DB72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB76 E106                       	smpsAlterNote       $06
0008DB78 E701                       	dc.b	smpsNoAttack, $01
0008DB7A E102                       	smpsAlterNote       $02
0008DB7C E701                       	dc.b	smpsNoAttack, $01
0008DB7E E103                       	smpsAlterNote       $03
0008DB80 E701                       	dc.b	smpsNoAttack, $01
0008DB82 E109                       	smpsAlterNote       $09
0008DB84 E701                       	dc.b	smpsNoAttack, $01
0008DB86 E10D                       	smpsAlterNote       $0D
0008DB88 E701                       	dc.b	smpsNoAttack, $01
0008DB8A E109                       	smpsAlterNote       $09
0008DB8C E701                       	dc.b	smpsNoAttack, $01
0008DB8E E106                       	smpsAlterNote       $06
0008DB90 E701                       	dc.b	smpsNoAttack, $01
0008DB92 E102                       	smpsAlterNote       $02
0008DB94 E701                       	dc.b	smpsNoAttack, $01
0008DB96 E106                       	smpsAlterNote       $06
0008DB98 E701                       	dc.b	smpsNoAttack, $01
0008DB9A E10C                       	smpsAlterNote       $0C
0008DB9C E701                       	dc.b	smpsNoAttack, $01
0008DB9E E10D                       	smpsAlterNote       $0D
0008DBA0 E701                       	dc.b	smpsNoAttack, $01
0008DBA2 E109                       	smpsAlterNote       $09
0008DBA4 E701                       	dc.b	smpsNoAttack, $01
0008DBA6 E103                       	smpsAlterNote       $03
0008DBA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBAC E106                       	smpsAlterNote       $06
0008DBAE E701                       	dc.b	smpsNoAttack, $01
0008DBB0 E10C                       	smpsAlterNote       $0C
0008DBB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBB6 E106                       	smpsAlterNote       $06
0008DBB8 E701                       	dc.b	smpsNoAttack, $01
0008DBBA E103                       	smpsAlterNote       $03
0008DBBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBC0 E109                       	smpsAlterNote       $09
0008DBC2 E701                       	dc.b	smpsNoAttack, $01
0008DBC4 E10D                       	smpsAlterNote       $0D
0008DBC6 E701                       	dc.b	smpsNoAttack, $01
0008DBC8 E10C                       	smpsAlterNote       $0C
0008DBCA E701                       	dc.b	smpsNoAttack, $01
0008DBCC E106                       	smpsAlterNote       $06
0008DBCE E701                       	dc.b	smpsNoAttack, $01
0008DBD0 E102                       	smpsAlterNote       $02
0008DBD2 E701                       	dc.b	smpsNoAttack, $01
0008DBD4 E106                       	smpsAlterNote       $06
0008DBD6 E701                       	dc.b	smpsNoAttack, $01
0008DBD8 E109                       	smpsAlterNote       $09
0008DBDA E701                       	dc.b	smpsNoAttack, $01
0008DBDC E10D                       	smpsAlterNote       $0D
0008DBDE E701                       	dc.b	smpsNoAttack, $01
0008DBE0 E109                       	smpsAlterNote       $09
0008DBE2 E701                       	dc.b	smpsNoAttack, $01
0008DBE4 E103                       	smpsAlterNote       $03
0008DBE6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008DBEA E109                       	smpsAlterNote       $09
0008DBEC C206                       	dc.b	nF5, $06
0008DBEE E108                       	smpsAlterNote       $08
0008DBF0 C10E                       	dc.b	nE5, $0E
0008DBF2 E102                       	smpsAlterNote       $02
0008DBF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBF8 E108                       	smpsAlterNote       $08
0008DBFA E701                       	dc.b	smpsNoAttack, $01
0008DBFC E10B                       	smpsAlterNote       $0B
0008DBFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC02 E105                       	smpsAlterNote       $05
0008DC04 E701                       	dc.b	smpsNoAttack, $01
0008DC06 E101                       	smpsAlterNote       $01
0008DC08 E701                       	dc.b	smpsNoAttack, $01
0008DC0A E102                       	smpsAlterNote       $02
0008DC0C E701                       	dc.b	smpsNoAttack, $01
0008DC0E E108                       	smpsAlterNote       $08
0008DC10 E701                       	dc.b	smpsNoAttack, $01
0008DC12 E10C                       	smpsAlterNote       $0C
0008DC14 E701                       	dc.b	smpsNoAttack, $01
0008DC16 E107                       	smpsAlterNote       $07
0008DC18 BF0E                       	dc.b	nD5, $0E
0008DC1A E101                       	smpsAlterNote       $01
0008DC1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC20 E107                       	smpsAlterNote       $07
0008DC22 E701                       	dc.b	smpsNoAttack, $01
0008DC24 E10A                       	smpsAlterNote       $0A
0008DC26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC2A E104                       	smpsAlterNote       $04
0008DC2C E701                       	dc.b	smpsNoAttack, $01
0008DC2E E100                       	smpsAlterNote       $00
0008DC30 E701                       	dc.b	smpsNoAttack, $01
0008DC32 E104                       	smpsAlterNote       $04
0008DC34 E701                       	dc.b	smpsNoAttack, $01
0008DC36 E107                       	smpsAlterNote       $07
0008DC38 E701                       	dc.b	smpsNoAttack, $01
0008DC3A E10B                       	smpsAlterNote       $0B
0008DC3C E701                       	dc.b	smpsNoAttack, $01
0008DC3E E107                       	smpsAlterNote       $07
0008DC40 E701                       	dc.b	smpsNoAttack, $01
0008DC42 E101                       	smpsAlterNote       $01
0008DC44 E701                       	dc.b	smpsNoAttack, $01
0008DC46 E100                       	smpsAlterNote       $00
0008DC48 E701                       	dc.b	smpsNoAttack, $01
0008DC4A E104                       	smpsAlterNote       $04
0008DC4C E701                       	dc.b	smpsNoAttack, $01
0008DC4E E10A                       	smpsAlterNote       $0A
0008DC50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC54 E107                       	smpsAlterNote       $07
0008DC56 E701                       	dc.b	smpsNoAttack, $01
0008DC58 E101                       	smpsAlterNote       $01
0008DC5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC5E E107                       	smpsAlterNote       $07
0008DC60 E701                       	dc.b	smpsNoAttack, $01
0008DC62 E10A                       	smpsAlterNote       $0A
0008DC64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC68 E104                       	smpsAlterNote       $04
0008DC6A E701                       	dc.b	smpsNoAttack, $01
0008DC6C E100                       	smpsAlterNote       $00
0008DC6E E701                       	dc.b	smpsNoAttack, $01
0008DC70 E101                       	smpsAlterNote       $01
0008DC72 E701                       	dc.b	smpsNoAttack, $01
0008DC74 E107                       	smpsAlterNote       $07
0008DC76 E701                       	dc.b	smpsNoAttack, $01
0008DC78 E10B                       	smpsAlterNote       $0B
0008DC7A E701                       	dc.b	smpsNoAttack, $01
0008DC7C E107                       	smpsAlterNote       $07
0008DC7E E701                       	dc.b	smpsNoAttack, $01
0008DC80 E104                       	smpsAlterNote       $04
0008DC82 E701                       	dc.b	smpsNoAttack, $01
0008DC84 E100                       	smpsAlterNote       $00
0008DC86 E701                       	dc.b	smpsNoAttack, $01
0008DC88 E104                       	smpsAlterNote       $04
0008DC8A E701                       	dc.b	smpsNoAttack, $01
0008DC8C E10A                       	smpsAlterNote       $0A
0008DC8E E701                       	dc.b	smpsNoAttack, $01
0008DC90 E10B                       	smpsAlterNote       $0B
0008DC92 E701                       	dc.b	smpsNoAttack, $01
0008DC94 E107                       	smpsAlterNote       $07
0008DC96 E701                       	dc.b	smpsNoAttack, $01
0008DC98 E101                       	smpsAlterNote       $01
0008DC9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC9E E104                       	smpsAlterNote       $04
0008DCA0 E701                       	dc.b	smpsNoAttack, $01
0008DCA2 E10A                       	smpsAlterNote       $0A
0008DCA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCA8 E104                       	smpsAlterNote       $04
0008DCAA E701                       	dc.b	smpsNoAttack, $01
0008DCAC E101                       	smpsAlterNote       $01
0008DCAE E701                       	dc.b	smpsNoAttack, $01
0008DCB2 E107                       	smpsAlterNote       $07
0008DCB4 E6FF                       	smpsAlterVol        $FF
0008DCB6 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008DCC2 8004                       	dc.b	nRst, $04
0008DCC6 E109                       	smpsAlterNote       $09
0008DCC8 E602                       	smpsAlterVol        $02
0008DCCA B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0008DCD0 E108                       	smpsAlterNote       $08
0008DCD2 B502 8001                  	dc.b	nE4, $02, nRst, $01
0008DCD6 E109                       	smpsAlterNote       $09
0008DCD8 B60D                       	dc.b	nF4, $0D
0008DCDA E106                       	smpsAlterNote       $06
0008DCDC E701                       	dc.b	smpsNoAttack, $01
0008DCDE E102                       	smpsAlterNote       $02
0008DCE0 E701                       	dc.b	smpsNoAttack, $01
0008DCE2 E106                       	smpsAlterNote       $06
0008DCE4 E701                       	dc.b	smpsNoAttack, $01
0008DCE6 E109                       	smpsAlterNote       $09
0008DCE8 E701                       	dc.b	smpsNoAttack, $01
0008DCEA E10D                       	smpsAlterNote       $0D
0008DCEC E701                       	dc.b	smpsNoAttack, $01
0008DCEE E109                       	smpsAlterNote       $09
0008DCF0 E701                       	dc.b	smpsNoAttack, $01
0008DCF2 E103                       	smpsAlterNote       $03
0008DCF4 E701                       	dc.b	smpsNoAttack, $01
0008DCF6 E102                       	smpsAlterNote       $02
0008DCF8 E701                       	dc.b	smpsNoAttack, $01
0008DCFA E106                       	smpsAlterNote       $06
0008DCFC E701                       	dc.b	smpsNoAttack, $01
0008DCFE E10C                       	smpsAlterNote       $0C
0008DD00 E701                       	dc.b	smpsNoAttack, $01
0008DD02 E10D                       	smpsAlterNote       $0D
0008DD04 8001                       	dc.b	nRst, $01
0008DD06 E109                       	smpsAlterNote       $09
0008DD08 B80D                       	dc.b	nG4, $0D
0008DD0A E106                       	smpsAlterNote       $06
0008DD0C E701                       	dc.b	smpsNoAttack, $01
0008DD0E E102                       	smpsAlterNote       $02
0008DD10 E701                       	dc.b	smpsNoAttack, $01
0008DD12 E106                       	smpsAlterNote       $06
0008DD14 E701                       	dc.b	smpsNoAttack, $01
0008DD16 E10C                       	smpsAlterNote       $0C
0008DD18 E701                       	dc.b	smpsNoAttack, $01
0008DD1A E10D                       	smpsAlterNote       $0D
0008DD1C E701                       	dc.b	smpsNoAttack, $01
0008DD1E E109                       	smpsAlterNote       $09
0008DD20 E701                       	dc.b	smpsNoAttack, $01
0008DD22 E103                       	smpsAlterNote       $03
0008DD24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD28 E106                       	smpsAlterNote       $06
0008DD2A E701                       	dc.b	smpsNoAttack, $01
0008DD2C E10C                       	smpsAlterNote       $0C
0008DD2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD32 E106                       	smpsAlterNote       $06
0008DD34 E701                       	dc.b	smpsNoAttack, $01
0008DD36 E103                       	smpsAlterNote       $03
0008DD38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD3C E109                       	smpsAlterNote       $09
0008DD3E E701                       	dc.b	smpsNoAttack, $01
0008DD40 E10D                       	smpsAlterNote       $0D
0008DD42 E701                       	dc.b	smpsNoAttack, $01
0008DD44 E10C                       	smpsAlterNote       $0C
0008DD46 E701                       	dc.b	smpsNoAttack, $01
0008DD48 E109                       	smpsAlterNote       $09
0008DD4A 8001                       	dc.b	nRst, $01
0008DD4C E10B                       	smpsAlterNote       $0B
0008DD4E BA03                       	dc.b	nA4, $03
0008DD50 E10C                       	smpsAlterNote       $0C
0008DD52 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008DD56 E10B                       	smpsAlterNote       $0B
0008DD58 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008DD5E E10C                       	smpsAlterNote       $0C
0008DD60 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008DD64 E10B                       	smpsAlterNote       $0B
0008DD66 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008DD6C E10C                       	smpsAlterNote       $0C
0008DD6E D303                       	dc.b	nBb6, $03
0008DD70 E10B                       	smpsAlterNote       $0B
0008DD72 D20D                       	dc.b	nA6, $0D
0008DD74 E108                       	smpsAlterNote       $08
0008DD76 E701                       	dc.b	smpsNoAttack, $01
0008DD78 E104                       	smpsAlterNote       $04
0008DD7A E701                       	dc.b	smpsNoAttack, $01
0008DD7C E105                       	smpsAlterNote       $05
0008DD7E E701                       	dc.b	smpsNoAttack, $01
0008DD80 E10B                       	smpsAlterNote       $0B
0008DD82 E701                       	dc.b	smpsNoAttack, $01
0008DD84 E10F                       	smpsAlterNote       $0F
0008DD86 E701                       	dc.b	smpsNoAttack, $01
0008DD88 E10B                       	smpsAlterNote       $0B
0008DD8A E701                       	dc.b	smpsNoAttack, $01
0008DD8C E108                       	smpsAlterNote       $08
0008DD8E E701                       	dc.b	smpsNoAttack, $01
0008DD90 E104                       	smpsAlterNote       $04
0008DD92 E701                       	dc.b	smpsNoAttack, $01
0008DD94 E108                       	smpsAlterNote       $08
0008DD96 E701                       	dc.b	smpsNoAttack, $01
0008DD98 E10E                       	smpsAlterNote       $0E
0008DD9A E701                       	dc.b	smpsNoAttack, $01
0008DD9C E10F                       	smpsAlterNote       $0F
0008DD9E E701                       	dc.b	smpsNoAttack, $01
0008DDA0 E10B                       	smpsAlterNote       $0B
0008DDA2 E701                       	dc.b	smpsNoAttack, $01
0008DDA4 E105                       	smpsAlterNote       $05
0008DDA6 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008DDAC E109                       	smpsAlterNote       $09
0008DDAE CE07                       	dc.b	nF6, $07
0008DDB0 E108                       	smpsAlterNote       $08
0008DDB2 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008DDB6 E109                       	smpsAlterNote       $09
0008DDB8 CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008DDBC E108                       	smpsAlterNote       $08
0008DDBE CC0D                       	dc.b	nEb6, $0D
0008DDC0 E102                       	smpsAlterNote       $02
0008DDC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDC6 E108                       	smpsAlterNote       $08
0008DDC8 E701                       	dc.b	smpsNoAttack, $01
0008DDCA E10B                       	smpsAlterNote       $0B
0008DDCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDD0 E105                       	smpsAlterNote       $05
0008DDD2 E701                       	dc.b	smpsNoAttack, $01
0008DDD4 E101                       	smpsAlterNote       $01
0008DDD6 E701                       	dc.b	smpsNoAttack, $01
0008DDD8 E102                       	smpsAlterNote       $02
0008DDDA E701                       	dc.b	smpsNoAttack, $01
0008DDDC E108                       	smpsAlterNote       $08
0008DDDE E701                       	dc.b	smpsNoAttack, $01
0008DDE0 E10C                       	smpsAlterNote       $0C
0008DDE2 E701                       	dc.b	smpsNoAttack, $01
0008DDE4 E108                       	smpsAlterNote       $08
0008DDE6 E701                       	dc.b	smpsNoAttack, $01
0008DDE8 E105                       	smpsAlterNote       $05
0008DDEA E701                       	dc.b	smpsNoAttack, $01
0008DDEC E101                       	smpsAlterNote       $01
0008DDEE E701                       	dc.b	smpsNoAttack, $01
0008DDF0 E105                       	smpsAlterNote       $05
0008DDF2 E701                       	dc.b	smpsNoAttack, $01
0008DDF4 E10B                       	smpsAlterNote       $0B
0008DDF6 E701                       	dc.b	smpsNoAttack, $01
0008DDF8 E10C                       	smpsAlterNote       $0C
0008DDFA E701                       	dc.b	smpsNoAttack, $01
0008DDFC E108                       	smpsAlterNote       $08
0008DDFE E701                       	dc.b	smpsNoAttack, $01
0008DE00 E107                       	smpsAlterNote       $07
0008DE02 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008DE0C E10B                       	smpsAlterNote       $0B
0008DE0E C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008DE18 E109                       	smpsAlterNote       $09
0008DE1A C203                       	dc.b	nF5, $03
0008DE1C E108                       	smpsAlterNote       $08
0008DE1E C103 8001                  	dc.b	nE5, $03, nRst, $01
0008DE22 E109                       	smpsAlterNote       $09
0008DE24 C20D                       	dc.b	nF5, $0D
0008DE26 E108                       	smpsAlterNote       $08
0008DE28 C10E                       	dc.b	nE5, $0E
0008DE2A E107                       	smpsAlterNote       $07
0008DE2C BF0D                       	dc.b	nD5, $0D
0008DE2E E104                       	smpsAlterNote       $04
0008DE30 E701                       	dc.b	smpsNoAttack, $01
0008DE32 E100                       	smpsAlterNote       $00
0008DE34 E701                       	dc.b	smpsNoAttack, $01
0008DE36 E104                       	smpsAlterNote       $04
0008DE38 E701                       	dc.b	smpsNoAttack, $01
0008DE3A E107                       	smpsAlterNote       $07
0008DE3C E701                       	dc.b	smpsNoAttack, $01
0008DE3E E10B                       	smpsAlterNote       $0B
0008DE40 E701                       	dc.b	smpsNoAttack, $01
0008DE42 E107                       	smpsAlterNote       $07
0008DE44 E701                       	dc.b	smpsNoAttack, $01
0008DE46 E101                       	smpsAlterNote       $01
0008DE48 E701                       	dc.b	smpsNoAttack, $01
0008DE4A E100                       	smpsAlterNote       $00
0008DE4C E701                       	dc.b	smpsNoAttack, $01
0008DE4E E104                       	smpsAlterNote       $04
0008DE50 E701                       	dc.b	smpsNoAttack, $01
0008DE52 E10A                       	smpsAlterNote       $0A
0008DE54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE58 E107                       	smpsAlterNote       $07
0008DE5A E701                       	dc.b	smpsNoAttack, $01
0008DE5C E101                       	smpsAlterNote       $01
0008DE5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE62 E107                       	smpsAlterNote       $07
0008DE64 E701                       	dc.b	smpsNoAttack, $01
0008DE66 E10A                       	smpsAlterNote       $0A
0008DE68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE6C E104                       	smpsAlterNote       $04
0008DE6E E701                       	dc.b	smpsNoAttack, $01
0008DE70 E100                       	smpsAlterNote       $00
0008DE72 E701                       	dc.b	smpsNoAttack, $01
0008DE74 E101                       	smpsAlterNote       $01
0008DE76 E701                       	dc.b	smpsNoAttack, $01
0008DE78 E107                       	smpsAlterNote       $07
0008DE7A E701                       	dc.b	smpsNoAttack, $01
0008DE7C E10B                       	smpsAlterNote       $0B
0008DE7E E701                       	dc.b	smpsNoAttack, $01
0008DE80 E107                       	smpsAlterNote       $07
0008DE82 E701                       	dc.b	smpsNoAttack, $01
0008DE84 E104                       	smpsAlterNote       $04
0008DE86 E701                       	dc.b	smpsNoAttack, $01
0008DE88 E100                       	smpsAlterNote       $00
0008DE8A E701                       	dc.b	smpsNoAttack, $01
0008DE8C E104                       	smpsAlterNote       $04
0008DE8E E701                       	dc.b	smpsNoAttack, $01
0008DE90 E10A                       	smpsAlterNote       $0A
0008DE92 E701                       	dc.b	smpsNoAttack, $01
0008DE94 E10B                       	smpsAlterNote       $0B
0008DE96 E701                       	dc.b	smpsNoAttack, $01
0008DE98 E107                       	smpsAlterNote       $07
0008DE9A E701                       	dc.b	smpsNoAttack, $01
0008DE9C E101                       	smpsAlterNote       $01
0008DE9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEA2 E104                       	smpsAlterNote       $04
0008DEA4 E701                       	dc.b	smpsNoAttack, $01
0008DEA6 E10A                       	smpsAlterNote       $0A
0008DEA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEAC E104                       	smpsAlterNote       $04
0008DEAE E701                       	dc.b	smpsNoAttack, $01
0008DEB0 E101                       	smpsAlterNote       $01
0008DEB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEB6 E107                       	smpsAlterNote       $07
0008DEB8 E701                       	dc.b	smpsNoAttack, $01
0008DEBA E10B                       	smpsAlterNote       $0B
0008DEBC E701                       	dc.b	smpsNoAttack, $01
0008DEBE E10A                       	smpsAlterNote       $0A
0008DEC0 E701                       	dc.b	smpsNoAttack, $01
0008DEC2 E104                       	smpsAlterNote       $04
0008DEC4 E701                       	dc.b	smpsNoAttack, $01
0008DEC6 E100                       	smpsAlterNote       $00
0008DEC8 E701                       	dc.b	smpsNoAttack, $01
0008DECA E104                       	smpsAlterNote       $04
0008DECC E701                       	dc.b	smpsNoAttack, $01
0008DECE E107                       	smpsAlterNote       $07
0008DED0 E701                       	dc.b	smpsNoAttack, $01
0008DED2 E10B                       	smpsAlterNote       $0B
0008DED4 E701                       	dc.b	smpsNoAttack, $01
0008DED6 E107                       	smpsAlterNote       $07
0008DED8 E701                       	dc.b	smpsNoAttack, $01
0008DEDA E101                       	smpsAlterNote       $01
0008DEDC E701                       	dc.b	smpsNoAttack, $01
0008DEDE E100                       	smpsAlterNote       $00
0008DEE0 E701                       	dc.b	smpsNoAttack, $01
0008DEE2 E104                       	smpsAlterNote       $04
0008DEE4 E701                       	dc.b	smpsNoAttack, $01
0008DEE6 E10A                       	smpsAlterNote       $0A
0008DEE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEEC E107                       	smpsAlterNote       $07
0008DEEE E701                       	dc.b	smpsNoAttack, $01
0008DEF0 E101                       	smpsAlterNote       $01
0008DEF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEF6 E107                       	smpsAlterNote       $07
0008DEF8 E701                       	dc.b	smpsNoAttack, $01
0008DEFA E10A                       	smpsAlterNote       $0A
0008DEFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF00 E104                       	smpsAlterNote       $04
0008DF02 E701                       	dc.b	smpsNoAttack, $01
0008DF04 E100                       	smpsAlterNote       $00
0008DF06 E701                       	dc.b	smpsNoAttack, $01
0008DF08 E101                       	smpsAlterNote       $01
0008DF0A E701                       	dc.b	smpsNoAttack, $01
0008DF0C E107                       	smpsAlterNote       $07
0008DF0E E701                       	dc.b	smpsNoAttack, $01
0008DF10 E10B                       	smpsAlterNote       $0B
0008DF12 E701                       	dc.b	smpsNoAttack, $01
0008DF14 E107                       	smpsAlterNote       $07
0008DF16 E701                       	dc.b	smpsNoAttack, $01
0008DF18 E104                       	smpsAlterNote       $04
0008DF1A E701                       	dc.b	smpsNoAttack, $01
0008DF1C E100                       	smpsAlterNote       $00
0008DF1E E701                       	dc.b	smpsNoAttack, $01
0008DF20 E101                       	smpsAlterNote       $01
0008DF22 8001                       	dc.b	nRst, $01
0008DF24 E109                       	smpsAlterNote       $09
0008DF26 C20D                       	dc.b	nF5, $0D
0008DF28 E106                       	smpsAlterNote       $06
0008DF2A E701                       	dc.b	smpsNoAttack, $01
0008DF2C E102                       	smpsAlterNote       $02
0008DF2E E701                       	dc.b	smpsNoAttack, $01
0008DF30 E106                       	smpsAlterNote       $06
0008DF32 E701                       	dc.b	smpsNoAttack, $01
0008DF34 E10C                       	smpsAlterNote       $0C
0008DF36 E701                       	dc.b	smpsNoAttack, $01
0008DF38 E10D                       	smpsAlterNote       $0D
0008DF3A E701                       	dc.b	smpsNoAttack, $01
0008DF3C E109                       	smpsAlterNote       $09
0008DF3E E701                       	dc.b	smpsNoAttack, $01
0008DF40 E103                       	smpsAlterNote       $03
0008DF42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF46 E106                       	smpsAlterNote       $06
0008DF48 E701                       	dc.b	smpsNoAttack, $01
0008DF4A E10C                       	smpsAlterNote       $0C
0008DF4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF50 E106                       	smpsAlterNote       $06
0008DF52 E701                       	dc.b	smpsNoAttack, $01
0008DF54 E103                       	smpsAlterNote       $03
0008DF56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF5A E109                       	smpsAlterNote       $09
0008DF5C E701                       	dc.b	smpsNoAttack, $01
0008DF5E E10D                       	smpsAlterNote       $0D
0008DF60 E701                       	dc.b	smpsNoAttack, $01
0008DF62 E10C                       	smpsAlterNote       $0C
0008DF64 E701                       	dc.b	smpsNoAttack, $01
0008DF66 E109                       	smpsAlterNote       $09
0008DF68 8001                       	dc.b	nRst, $01
0008DF6A E108                       	smpsAlterNote       $08
0008DF6C C10D                       	dc.b	nE5, $0D
0008DF6E E109                       	smpsAlterNote       $09
0008DF70 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008DF74 E108                       	smpsAlterNote       $08
0008DF76 C10D                       	dc.b	nE5, $0D
0008DF78 E102                       	smpsAlterNote       $02
0008DF7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF7E E105                       	smpsAlterNote       $05
0008DF80 E701                       	dc.b	smpsNoAttack, $01
0008DF82 E108                       	smpsAlterNote       $08
0008DF84 8001                       	dc.b	nRst, $01
0008DF86 E107                       	smpsAlterNote       $07
0008DF88 BF0D                       	dc.b	nD5, $0D
0008DF8A E108                       	smpsAlterNote       $08
0008DF8C C107                       	dc.b	nE5, $07
0008DF8E E109                       	smpsAlterNote       $09
0008DF90 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008DF96 E10B                       	smpsAlterNote       $0B
0008DF98 C603                       	dc.b	nA5, $03
0008DF9A E10C                       	smpsAlterNote       $0C
0008DF9C C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008DFA2 E10B                       	smpsAlterNote       $0B
0008DFA4 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008DFAA E109                       	smpsAlterNote       $09
0008DFAC D003                       	dc.b	nG6, $03
0008DFAE E108                       	smpsAlterNote       $08
0008DFB0 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008DFB4 E10B                       	smpsAlterNote       $0B
0008DFB6 C601 8001                  	dc.b	nA5, $01, nRst, $01
0008DFBA E108                       	smpsAlterNote       $08
0008DFBC C102                       	dc.b	nE5, $02
0008DFC0 E10C                       	smpsAlterNote       $0C
0008DFC2 E6FB                       	smpsAlterVol        $FB
0008DFC4 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008DFD0 8001                       	dc.b	nRst, $01
0008DFD2 E10B                       	smpsAlterNote       $0B
0008DFD4 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008DFDC E107                       	smpsAlterNote       $07
0008DFDE A706 8001                  	dc.b	nD3, $06, nRst, $01
0008DFE2 E10B                       	smpsAlterNote       $0B
0008DFE4 A203                       	dc.b	nA2, $03
0008DFE6 E109                       	smpsAlterNote       $09
0008DFE8 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008DFEC E108                       	smpsAlterNote       $08
0008DFEE A906                       	dc.b	nE3, $06
0008DFF0 E107                       	smpsAlterNote       $07
0008DFF2 A703 8001                  	dc.b	nD3, $03, nRst, $01
0008DFF6 E106                       	smpsAlterNote       $06
0008DFF8 A503                       	dc.b	nC3, $03
0008DFFA E10C                       	smpsAlterNote       $0C
0008DFFC A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E000 E10B                       	smpsAlterNote       $0B
0008E002 A203 8004                  	dc.b	nA2, $03, nRst, $04
0008E006 E11B                       	smpsAlterNote       $1B
0008E008 C401                       	dc.b	nG5, $01
0008E00A E1F4                       	smpsAlterNote       $F4
0008E00C E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008E00F E106                       	smpsAlterNote       $06
0008E011 E701                       	dc.b	smpsNoAttack, $01
0008E013 E10F                       	smpsAlterNote       $0F
0008E015 E701                       	dc.b	smpsNoAttack, $01
0008E017 E1E4                       	smpsAlterNote       $E4
0008E019 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008E01C E1F6                       	smpsAlterNote       $F6
0008E01E E701                       	dc.b	smpsNoAttack, $01
0008E020 E108                       	smpsAlterNote       $08
0008E022 E701                       	dc.b	smpsNoAttack, $01
0008E024 E10B                       	smpsAlterNote       $0B
0008E026 E706                       	dc.b	smpsNoAttack, $06
0008E028 E105                       	smpsAlterNote       $05
0008E02A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E02E E108                       	smpsAlterNote       $08
0008E030 E701                       	dc.b	smpsNoAttack, $01
0008E032 E10E                       	smpsAlterNote       $0E
0008E034 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E038 E108                       	smpsAlterNote       $08
0008E03A E701                       	dc.b	smpsNoAttack, $01
0008E03C E105                       	smpsAlterNote       $05
0008E03E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E042 E10B                       	smpsAlterNote       $0B
0008E044 E701                       	dc.b	smpsNoAttack, $01
0008E046 E10F                       	smpsAlterNote       $0F
0008E048 E701                       	dc.b	smpsNoAttack, $01
0008E04A E10E                       	smpsAlterNote       $0E
0008E04C E701                       	dc.b	smpsNoAttack, $01
0008E04E E108                       	smpsAlterNote       $08
0008E050 E701                       	dc.b	smpsNoAttack, $01
0008E052 E104                       	smpsAlterNote       $04
0008E054 E701                       	dc.b	smpsNoAttack, $01
0008E056 E108                       	smpsAlterNote       $08
0008E058 E701                       	dc.b	smpsNoAttack, $01
0008E05A E10B                       	smpsAlterNote       $0B
0008E05C E701                       	dc.b	smpsNoAttack, $01
0008E05E E10F                       	smpsAlterNote       $0F
0008E060 E701                       	dc.b	smpsNoAttack, $01
0008E062 E10B                       	smpsAlterNote       $0B
0008E064 E701                       	dc.b	smpsNoAttack, $01
0008E066 E105                       	smpsAlterNote       $05
0008E068 E701                       	dc.b	smpsNoAttack, $01
0008E06A E104                       	smpsAlterNote       $04
0008E06C E701                       	dc.b	smpsNoAttack, $01
0008E06E E108                       	smpsAlterNote       $08
0008E070 E701                       	dc.b	smpsNoAttack, $01
0008E072 E10E                       	smpsAlterNote       $0E
0008E074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E078 E10B                       	smpsAlterNote       $0B
0008E07A E701                       	dc.b	smpsNoAttack, $01
0008E07C E105                       	smpsAlterNote       $05
0008E07E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E082 E10B                       	smpsAlterNote       $0B
0008E084 E701                       	dc.b	smpsNoAttack, $01
0008E086 E10E                       	smpsAlterNote       $0E
0008E088 E701                       	dc.b	smpsNoAttack, $01
0008E08A E10F                       	smpsAlterNote       $0F
0008E08C 8001                       	dc.b	nRst, $01
0008E08E E109                       	smpsAlterNote       $09
0008E090 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008E096 E108                       	smpsAlterNote       $08
0008E098 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008E09C E109                       	smpsAlterNote       $09
0008E09E C202                       	dc.b	nF5, $02
0008E0A0 E108                       	smpsAlterNote       $08
0008E0A2 C102                       	dc.b	nE5, $02
0008E0A4 E107                       	smpsAlterNote       $07
0008E0A6 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008E0AA E108                       	smpsAlterNote       $08
0008E0AC C101 8001                  	dc.b	nE5, $01, nRst, $01
0008E0B0 E107                       	smpsAlterNote       $07
0008E0B2 BF02                       	dc.b	nD5, $02
0008E0B4 E106                       	smpsAlterNote       $06
0008E0B6 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008E0BA E107                       	smpsAlterNote       $07
0008E0BC BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008E0C0 E106                       	smpsAlterNote       $06
0008E0C2 BD02                       	dc.b	nC5, $02
0008E0C4 E10C                       	smpsAlterNote       $0C
0008E0C6 BB02                       	dc.b	nBb4, $02
0008E0C8 E106                       	smpsAlterNote       $06
0008E0CA BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008E0CE E10C                       	smpsAlterNote       $0C
0008E0D0 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008E0D4 E10B                       	smpsAlterNote       $0B
0008E0D6 BA02                       	dc.b	nA4, $02
0008E0D8 E10C                       	smpsAlterNote       $0C
0008E0DA BB02                       	dc.b	nBb4, $02
0008E0DC E10B                       	smpsAlterNote       $0B
0008E0DE BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008E0E8 E108                       	smpsAlterNote       $08
0008E0EA B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008E0F2 E107                       	smpsAlterNote       $07
0008E0F4 BE02                       	dc.b	nCs5, $02
0008E0F6 E10B                       	smpsAlterNote       $0B
0008E0F8 BA02                       	dc.b	nA4, $02
0008E0FA E109                       	smpsAlterNote       $09
0008E0FC B802 8001                  	dc.b	nG4, $02, nRst, $01
0008E100 E108                       	smpsAlterNote       $08
0008E102 B501 8001                  	dc.b	nE4, $01, nRst, $01
0008E106 E10B                       	smpsAlterNote       $0B
0008E108 AE02                       	dc.b	nA3, $02
0008E10A E10C                       	smpsAlterNote       $0C
0008E10C A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008E118 E10B                       	smpsAlterNote       $0B
0008E11A A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008E122 E107                       	smpsAlterNote       $07
0008E124 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008E128 E10B                       	smpsAlterNote       $0B
0008E12A A203                       	dc.b	nA2, $03
0008E12C E109                       	smpsAlterNote       $09
0008E12E AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008E132 E108                       	smpsAlterNote       $08
0008E134 A906 8001                  	dc.b	nE3, $06, nRst, $01
0008E138 E107                       	smpsAlterNote       $07
0008E13A A702 8001                  	dc.b	nD3, $02, nRst, $01
0008E13E E106                       	smpsAlterNote       $06
0008E140 A503                       	dc.b	nC3, $03
0008E142 E10C                       	smpsAlterNote       $0C
0008E144 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E14A E107                       	smpsAlterNote       $07
0008E14C B20D                       	dc.b	nCs4, $0D
0008E14E E104                       	smpsAlterNote       $04
0008E150 E701                       	dc.b	smpsNoAttack, $01
0008E152 E100                       	smpsAlterNote       $00
0008E154 E701                       	dc.b	smpsNoAttack, $01
0008E156 E104                       	smpsAlterNote       $04
0008E158 E701                       	dc.b	smpsNoAttack, $01
0008E15A E10A                       	smpsAlterNote       $0A
0008E15C E701                       	dc.b	smpsNoAttack, $01
0008E15E E10B                       	smpsAlterNote       $0B
0008E160 E701                       	dc.b	smpsNoAttack, $01
0008E162 E107                       	smpsAlterNote       $07
0008E164 E701                       	dc.b	smpsNoAttack, $01
0008E166 E101                       	smpsAlterNote       $01
0008E168 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E16C E104                       	smpsAlterNote       $04
0008E16E E701                       	dc.b	smpsNoAttack, $01
0008E170 E10A                       	smpsAlterNote       $0A
0008E172 E701                       	dc.b	smpsNoAttack, $01
0008E174 E10B                       	smpsAlterNote       $0B
0008E176 8001                       	dc.b	nRst, $01
0008E178 E107                       	smpsAlterNote       $07
0008E17A B30D                       	dc.b	nD4, $0D
0008E17C E104                       	smpsAlterNote       $04
0008E17E E701                       	dc.b	smpsNoAttack, $01
0008E180 E100                       	smpsAlterNote       $00
0008E182 E701                       	dc.b	smpsNoAttack, $01
0008E184 E104                       	smpsAlterNote       $04
0008E186 E701                       	dc.b	smpsNoAttack, $01
0008E188 E10A                       	smpsAlterNote       $0A
0008E18A E701                       	dc.b	smpsNoAttack, $01
0008E18C E10B                       	smpsAlterNote       $0B
0008E18E E701                       	dc.b	smpsNoAttack, $01
0008E190 E107                       	smpsAlterNote       $07
0008E192 E701                       	dc.b	smpsNoAttack, $01
0008E194 E101                       	smpsAlterNote       $01
0008E196 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E19A E104                       	smpsAlterNote       $04
0008E19C E701                       	dc.b	smpsNoAttack, $01
0008E19E E10A                       	smpsAlterNote       $0A
0008E1A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1A4 E104                       	smpsAlterNote       $04
0008E1A6 E701                       	dc.b	smpsNoAttack, $01
0008E1A8 E101                       	smpsAlterNote       $01
0008E1AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1AE E107                       	smpsAlterNote       $07
0008E1B0 E701                       	dc.b	smpsNoAttack, $01
0008E1B2 E10B                       	smpsAlterNote       $0B
0008E1B4 E701                       	dc.b	smpsNoAttack, $01
0008E1B6 E10A                       	smpsAlterNote       $0A
0008E1B8 E701                       	dc.b	smpsNoAttack, $01
0008E1BA E107                       	smpsAlterNote       $07
0008E1BC 8001                       	dc.b	nRst, $01
0008E1BE E108                       	smpsAlterNote       $08
0008E1C0 B50D                       	dc.b	nE4, $0D
0008E1C2 E102                       	smpsAlterNote       $02
0008E1C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1C8 E105                       	smpsAlterNote       $05
0008E1CA E701                       	dc.b	smpsNoAttack, $01
0008E1CC E10B                       	smpsAlterNote       $0B
0008E1CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1D2 E105                       	smpsAlterNote       $05
0008E1D4 E701                       	dc.b	smpsNoAttack, $01
0008E1D6 E102                       	smpsAlterNote       $02
0008E1D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1DC E108                       	smpsAlterNote       $08
0008E1DE E701                       	dc.b	smpsNoAttack, $01
0008E1E0 E10C                       	smpsAlterNote       $0C
0008E1E2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E1E6 E107                       	smpsAlterNote       $07
0008E1E8 B30D                       	dc.b	nD4, $0D
0008E1EA E101                       	smpsAlterNote       $01
0008E1EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1F0 E104                       	smpsAlterNote       $04
0008E1F2 E701                       	dc.b	smpsNoAttack, $01
0008E1F4 E10A                       	smpsAlterNote       $0A
0008E1F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1FA E104                       	smpsAlterNote       $04
0008E1FC E701                       	dc.b	smpsNoAttack, $01
0008E1FE E101                       	smpsAlterNote       $01
0008E200 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E204 E107                       	smpsAlterNote       $07
0008E206 E701                       	dc.b	smpsNoAttack, $01
0008E208 E10B                       	smpsAlterNote       $0B
0008E20A E701                       	dc.b	smpsNoAttack, $01
0008E20C E10A                       	smpsAlterNote       $0A
0008E20E E701                       	dc.b	smpsNoAttack, $01
0008E210 E104                       	smpsAlterNote       $04
0008E212 E701                       	dc.b	smpsNoAttack, $01
0008E214 E100                       	smpsAlterNote       $00
0008E216 E701                       	dc.b	smpsNoAttack, $01
0008E218 E104                       	smpsAlterNote       $04
0008E21A E701                       	dc.b	smpsNoAttack, $01
0008E21C E107                       	smpsAlterNote       $07
0008E21E E701                       	dc.b	smpsNoAttack, $01
0008E220 E10B                       	smpsAlterNote       $0B
0008E222 E701                       	dc.b	smpsNoAttack, $01
0008E224 E107                       	smpsAlterNote       $07
0008E226 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008E22A E101                       	smpsAlterNote       $01
0008E22C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E230 E107                       	smpsAlterNote       $07
0008E232 E701                       	dc.b	smpsNoAttack, $01
0008E234 E10A                       	smpsAlterNote       $0A
0008E236 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E23A E104                       	smpsAlterNote       $04
0008E23C E701                       	dc.b	smpsNoAttack, $01
0008E23E E100                       	smpsAlterNote       $00
0008E240 E701                       	dc.b	smpsNoAttack, $01
0008E242 E101                       	smpsAlterNote       $01
0008E244 E701                       	dc.b	smpsNoAttack, $01
0008E246 E107                       	smpsAlterNote       $07
0008E248 E701                       	dc.b	smpsNoAttack, $01
0008E24A E10B                       	smpsAlterNote       $0B
0008E24C E701                       	dc.b	smpsNoAttack, $01
0008E24E E107                       	smpsAlterNote       $07
0008E250 B30E                       	dc.b	nD4, $0E
0008E252 E101                       	smpsAlterNote       $01
0008E254 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E258 E107                       	smpsAlterNote       $07
0008E25A E701                       	dc.b	smpsNoAttack, $01
0008E25C E10A                       	smpsAlterNote       $0A
0008E25E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E262 E104                       	smpsAlterNote       $04
0008E264 E701                       	dc.b	smpsNoAttack, $01
0008E266 E100                       	smpsAlterNote       $00
0008E268 E701                       	dc.b	smpsNoAttack, $01
0008E26A E101                       	smpsAlterNote       $01
0008E26C E701                       	dc.b	smpsNoAttack, $01
0008E26E E107                       	smpsAlterNote       $07
0008E270 E701                       	dc.b	smpsNoAttack, $01
0008E272 E10B                       	smpsAlterNote       $0B
0008E274 E701                       	dc.b	smpsNoAttack, $01
0008E276 E107                       	smpsAlterNote       $07
0008E278 E701                       	dc.b	smpsNoAttack, $01
0008E27A E104                       	smpsAlterNote       $04
0008E27C E701                       	dc.b	smpsNoAttack, $01
0008E27E E100                       	smpsAlterNote       $00
0008E280 E701                       	dc.b	smpsNoAttack, $01
0008E282 E104                       	smpsAlterNote       $04
0008E284 E701                       	dc.b	smpsNoAttack, $01
0008E286 E10A                       	smpsAlterNote       $0A
0008E288 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E28C E107                       	smpsAlterNote       $07
0008E28E E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008E292 E104                       	smpsAlterNote       $04
0008E294 E701                       	dc.b	smpsNoAttack, $01
0008E296 E100                       	smpsAlterNote       $00
0008E298 E701                       	dc.b	smpsNoAttack, $01
0008E29A E101                       	smpsAlterNote       $01
0008E29C E701                       	dc.b	smpsNoAttack, $01
0008E29E E107                       	smpsAlterNote       $07
0008E2A0 E701                       	dc.b	smpsNoAttack, $01
0008E2A2 E10B                       	smpsAlterNote       $0B
0008E2A4 E701                       	dc.b	smpsNoAttack, $01
0008E2A6 E107                       	smpsAlterNote       $07
0008E2A8 E701                       	dc.b	smpsNoAttack, $01
0008E2AA E104                       	smpsAlterNote       $04
0008E2AC E701                       	dc.b	smpsNoAttack, $01
0008E2AE E100                       	smpsAlterNote       $00
0008E2B0 E701                       	dc.b	smpsNoAttack, $01
0008E2B2 E104                       	smpsAlterNote       $04
0008E2B4 E701                       	dc.b	smpsNoAttack, $01
0008E2B6 E10A                       	smpsAlterNote       $0A
0008E2B8 E701                       	dc.b	smpsNoAttack, $01
0008E2BA E10B                       	smpsAlterNote       $0B
0008E2BC E701                       	dc.b	smpsNoAttack, $01
0008E2C0 E6FF                       	smpsAlterVol        $FF
0008E2C2 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008E2CE 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008E2D6 E109                       	smpsAlterNote       $09
0008E2D8 E601                       	smpsAlterVol        $01
0008E2DA B60D                       	dc.b	nF4, $0D
0008E2DC E106                       	smpsAlterNote       $06
0008E2DE E701                       	dc.b	smpsNoAttack, $01
0008E2E0 E102                       	smpsAlterNote       $02
0008E2E2 E701                       	dc.b	smpsNoAttack, $01
0008E2E4 E106                       	smpsAlterNote       $06
0008E2E6 E701                       	dc.b	smpsNoAttack, $01
0008E2E8 E109                       	smpsAlterNote       $09
0008E2EA E701                       	dc.b	smpsNoAttack, $01
0008E2EC E10D                       	smpsAlterNote       $0D
0008E2EE E701                       	dc.b	smpsNoAttack, $01
0008E2F0 E109                       	smpsAlterNote       $09
0008E2F2 E701                       	dc.b	smpsNoAttack, $01
0008E2F4 E103                       	smpsAlterNote       $03
0008E2F6 E701                       	dc.b	smpsNoAttack, $01
0008E2F8 E102                       	smpsAlterNote       $02
0008E2FA E701                       	dc.b	smpsNoAttack, $01
0008E2FC E106                       	smpsAlterNote       $06
0008E2FE E701                       	dc.b	smpsNoAttack, $01
0008E300 E10C                       	smpsAlterNote       $0C
0008E302 E701                       	dc.b	smpsNoAttack, $01
0008E304 E10D                       	smpsAlterNote       $0D
0008E306 8001                       	dc.b	nRst, $01
0008E308 E109                       	smpsAlterNote       $09
0008E30A B80D                       	dc.b	nG4, $0D
0008E30C E106                       	smpsAlterNote       $06
0008E30E E701                       	dc.b	smpsNoAttack, $01
0008E310 E102                       	smpsAlterNote       $02
0008E312 E701                       	dc.b	smpsNoAttack, $01
0008E314 E106                       	smpsAlterNote       $06
0008E316 E701                       	dc.b	smpsNoAttack, $01
0008E318 E109                       	smpsAlterNote       $09
0008E31A E701                       	dc.b	smpsNoAttack, $01
0008E31C E10D                       	smpsAlterNote       $0D
0008E31E E701                       	dc.b	smpsNoAttack, $01
0008E320 E109                       	smpsAlterNote       $09
0008E322 E701                       	dc.b	smpsNoAttack, $01
0008E324 E103                       	smpsAlterNote       $03
0008E326 E701                       	dc.b	smpsNoAttack, $01
0008E328 E102                       	smpsAlterNote       $02
0008E32A E701                       	dc.b	smpsNoAttack, $01
0008E32C E106                       	smpsAlterNote       $06
0008E32E E701                       	dc.b	smpsNoAttack, $01
0008E330 E10C                       	smpsAlterNote       $0C
0008E332 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E336 E106                       	smpsAlterNote       $06
0008E338 E701                       	dc.b	smpsNoAttack, $01
0008E33A E103                       	smpsAlterNote       $03
0008E33C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E340 E109                       	smpsAlterNote       $09
0008E342 E701                       	dc.b	smpsNoAttack, $01
0008E344 E10D                       	smpsAlterNote       $0D
0008E346 E701                       	dc.b	smpsNoAttack, $01
0008E348 E10C                       	smpsAlterNote       $0C
0008E34A E701                       	dc.b	smpsNoAttack, $01
0008E34C E109                       	smpsAlterNote       $09
0008E34E 8001                       	dc.b	nRst, $01
0008E350 E10B                       	smpsAlterNote       $0B
0008E352 BA0D                       	dc.b	nA4, $0D
0008E354 E105                       	smpsAlterNote       $05
0008E356 E701                       	dc.b	smpsNoAttack, $01
0008E358 E104                       	smpsAlterNote       $04
0008E35A E701                       	dc.b	smpsNoAttack, $01
0008E35C E108                       	smpsAlterNote       $08
0008E35E E701                       	dc.b	smpsNoAttack, $01
0008E360 E10E                       	smpsAlterNote       $0E
0008E362 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E366 E10B                       	smpsAlterNote       $0B
0008E368 E701                       	dc.b	smpsNoAttack, $01
0008E36A E105                       	smpsAlterNote       $05
0008E36C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E370 E10B                       	smpsAlterNote       $0B
0008E372 E701                       	dc.b	smpsNoAttack, $01
0008E374 E10E                       	smpsAlterNote       $0E
0008E376 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E37A E108                       	smpsAlterNote       $08
0008E37C E701                       	dc.b	smpsNoAttack, $01
0008E37E E104                       	smpsAlterNote       $04
0008E380 E701                       	dc.b	smpsNoAttack, $01
0008E382 E105                       	smpsAlterNote       $05
0008E384 E701                       	dc.b	smpsNoAttack, $01
0008E386 E10B                       	smpsAlterNote       $0B
0008E388 E701                       	dc.b	smpsNoAttack, $01
0008E38A E10F                       	smpsAlterNote       $0F
0008E38C E701                       	dc.b	smpsNoAttack, $01
0008E38E E10B                       	smpsAlterNote       $0B
0008E390 E701                       	dc.b	smpsNoAttack, $01
0008E392 E108                       	smpsAlterNote       $08
0008E394 E701                       	dc.b	smpsNoAttack, $01
0008E396 E104                       	smpsAlterNote       $04
0008E398 E701                       	dc.b	smpsNoAttack, $01
0008E39A E108                       	smpsAlterNote       $08
0008E39C E701                       	dc.b	smpsNoAttack, $01
0008E39E E10E                       	smpsAlterNote       $0E
0008E3A0 E701                       	dc.b	smpsNoAttack, $01
0008E3A2 E10F                       	smpsAlterNote       $0F
0008E3A4 E701                       	dc.b	smpsNoAttack, $01
0008E3A6 E10B                       	smpsAlterNote       $0B
0008E3A8 E701                       	dc.b	smpsNoAttack, $01
0008E3AA E105                       	smpsAlterNote       $05
0008E3AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3B0 E108                       	smpsAlterNote       $08
0008E3B2 E701                       	dc.b	smpsNoAttack, $01
0008E3B4 E10E                       	smpsAlterNote       $0E
0008E3B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3BA E108                       	smpsAlterNote       $08
0008E3BC E701                       	dc.b	smpsNoAttack, $01
0008E3BE E105                       	smpsAlterNote       $05
0008E3C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3C4 E108                       	smpsAlterNote       $08
0008E3C6 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008E3CA E109                       	smpsAlterNote       $09
0008E3CC B60D                       	dc.b	nF4, $0D
0008E3CE E103                       	smpsAlterNote       $03
0008E3D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3D4 E106                       	smpsAlterNote       $06
0008E3D6 E701                       	dc.b	smpsNoAttack, $01
0008E3D8 E10C                       	smpsAlterNote       $0C
0008E3DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3DE E106                       	smpsAlterNote       $06
0008E3E0 E701                       	dc.b	smpsNoAttack, $01
0008E3E2 E103                       	smpsAlterNote       $03
0008E3E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3E8 E109                       	smpsAlterNote       $09
0008E3EA E701                       	dc.b	smpsNoAttack, $01
0008E3EC E10D                       	smpsAlterNote       $0D
0008E3EE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E3F2 E109                       	smpsAlterNote       $09
0008E3F4 B80D                       	dc.b	nG4, $0D
0008E3F6 E103                       	smpsAlterNote       $03
0008E3F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3FC E109                       	smpsAlterNote       $09
0008E3FE E701                       	dc.b	smpsNoAttack, $01
0008E400 E10C                       	smpsAlterNote       $0C
0008E402 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E406 E106                       	smpsAlterNote       $06
0008E408 E701                       	dc.b	smpsNoAttack, $01
0008E40A E102                       	smpsAlterNote       $02
0008E40C E701                       	dc.b	smpsNoAttack, $01
0008E40E E103                       	smpsAlterNote       $03
0008E410 E701                       	dc.b	smpsNoAttack, $01
0008E412 E109                       	smpsAlterNote       $09
0008E414 E701                       	dc.b	smpsNoAttack, $01
0008E416 E10D                       	smpsAlterNote       $0D
0008E418 E701                       	dc.b	smpsNoAttack, $01
0008E41A E109                       	smpsAlterNote       $09
0008E41C E701                       	dc.b	smpsNoAttack, $01
0008E41E E106                       	smpsAlterNote       $06
0008E420 E701                       	dc.b	smpsNoAttack, $01
0008E422 E102                       	smpsAlterNote       $02
0008E424 E701                       	dc.b	smpsNoAttack, $01
0008E426 E106                       	smpsAlterNote       $06
0008E428 E701                       	dc.b	smpsNoAttack, $01
0008E42A E10C                       	smpsAlterNote       $0C
0008E42C E701                       	dc.b	smpsNoAttack, $01
0008E42E E10D                       	smpsAlterNote       $0D
0008E430 E701                       	dc.b	smpsNoAttack, $01
0008E432 E109                       	smpsAlterNote       $09
0008E434 E701                       	dc.b	smpsNoAttack, $01
0008E436 E10B                       	smpsAlterNote       $0B
0008E438 BA0D                       	dc.b	nA4, $0D
0008E43A E108                       	smpsAlterNote       $08
0008E43C E701                       	dc.b	smpsNoAttack, $01
0008E43E E105                       	smpsAlterNote       $05
0008E440 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E444 E10B                       	smpsAlterNote       $0B
0008E446 E701                       	dc.b	smpsNoAttack, $01
0008E448 E10F                       	smpsAlterNote       $0F
0008E44A E701                       	dc.b	smpsNoAttack, $01
0008E44C E10E                       	smpsAlterNote       $0E
0008E44E E701                       	dc.b	smpsNoAttack, $01
0008E450 E108                       	smpsAlterNote       $08
0008E452 E701                       	dc.b	smpsNoAttack, $01
0008E454 E104                       	smpsAlterNote       $04
0008E456 E701                       	dc.b	smpsNoAttack, $01
0008E458 E108                       	smpsAlterNote       $08
0008E45A E701                       	dc.b	smpsNoAttack, $01
0008E45C E10B                       	smpsAlterNote       $0B
0008E45E E701                       	dc.b	smpsNoAttack, $01
0008E460 E10F                       	smpsAlterNote       $0F
0008E462 E701                       	dc.b	smpsNoAttack, $01
0008E464 E10B                       	smpsAlterNote       $0B
0008E466 E701                       	dc.b	smpsNoAttack, $01
0008E468 E105                       	smpsAlterNote       $05
0008E46A E701                       	dc.b	smpsNoAttack, $01
0008E46C E104                       	smpsAlterNote       $04
0008E46E E701                       	dc.b	smpsNoAttack, $01
0008E470 E108                       	smpsAlterNote       $08
0008E472 E701                       	dc.b	smpsNoAttack, $01
0008E474 E10E                       	smpsAlterNote       $0E
0008E476 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E47A E10B                       	smpsAlterNote       $0B
0008E47C E701                       	dc.b	smpsNoAttack, $01
0008E47E E105                       	smpsAlterNote       $05
0008E480 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E484 E10B                       	smpsAlterNote       $0B
0008E486 E701                       	dc.b	smpsNoAttack, $01
0008E488 E10E                       	smpsAlterNote       $0E
0008E48A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E48E E108                       	smpsAlterNote       $08
0008E490 E701                       	dc.b	smpsNoAttack, $01
0008E492 E105                       	smpsAlterNote       $05
0008E494 8001                       	dc.b	nRst, $01
0008E496 E109                       	smpsAlterNote       $09
0008E498 B60A                       	dc.b	nF4, $0A
0008E49A E108                       	smpsAlterNote       $08
0008E49C B507                       	dc.b	nE4, $07
0008E49E E107                       	smpsAlterNote       $07
0008E4A0 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008E4A4 E108                       	smpsAlterNote       $08
0008E4A6 B503                       	dc.b	nE4, $03
0008E4A8 E109                       	smpsAlterNote       $09
0008E4AA B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008E4B2 E10B                       	smpsAlterNote       $0B
0008E4B4 BA0D                       	dc.b	nA4, $0D
0008E4B6 E108                       	smpsAlterNote       $08
0008E4B8 E701                       	dc.b	smpsNoAttack, $01
0008E4BA E104                       	smpsAlterNote       $04
0008E4BC E701                       	dc.b	smpsNoAttack, $01
0008E4BE E108                       	smpsAlterNote       $08
0008E4C0 E701                       	dc.b	smpsNoAttack, $01
0008E4C2 E10B                       	smpsAlterNote       $0B
0008E4C4 E701                       	dc.b	smpsNoAttack, $01
0008E4C6 E10F                       	smpsAlterNote       $0F
0008E4C8 E701                       	dc.b	smpsNoAttack, $01
0008E4CA E10B                       	smpsAlterNote       $0B
0008E4CC E701                       	dc.b	smpsNoAttack, $01
0008E4CE E105                       	smpsAlterNote       $05
0008E4D0 E701                       	dc.b	smpsNoAttack, $01
0008E4D2 E104                       	smpsAlterNote       $04
0008E4D4 E701                       	dc.b	smpsNoAttack, $01
0008E4D6 E108                       	smpsAlterNote       $08
0008E4D8 E701                       	dc.b	smpsNoAttack, $01
0008E4DA E10E                       	smpsAlterNote       $0E
0008E4DC E701                       	dc.b	smpsNoAttack, $01
0008E4DE E10F                       	smpsAlterNote       $0F
0008E4E0 8001                       	dc.b	nRst, $01
0008E4E2 E109                       	smpsAlterNote       $09
0008E4E4 C20D                       	dc.b	nF5, $0D
0008E4E6 E106                       	smpsAlterNote       $06
0008E4E8 E701                       	dc.b	smpsNoAttack, $01
0008E4EA E102                       	smpsAlterNote       $02
0008E4EC E701                       	dc.b	smpsNoAttack, $01
0008E4EE E106                       	smpsAlterNote       $06
0008E4F0 E701                       	dc.b	smpsNoAttack, $01
0008E4F2 E109                       	smpsAlterNote       $09
0008E4F4 E701                       	dc.b	smpsNoAttack, $01
0008E4F6 E10D                       	smpsAlterNote       $0D
0008E4F8 E701                       	dc.b	smpsNoAttack, $01
0008E4FA E109                       	smpsAlterNote       $09
0008E4FC E701                       	dc.b	smpsNoAttack, $01
0008E4FE E103                       	smpsAlterNote       $03
0008E500 E701                       	dc.b	smpsNoAttack, $01
0008E502 E102                       	smpsAlterNote       $02
0008E504 E701                       	dc.b	smpsNoAttack, $01
0008E506 E106                       	smpsAlterNote       $06
0008E508 E701                       	dc.b	smpsNoAttack, $01
0008E50A E10C                       	smpsAlterNote       $0C
0008E50C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E510 E109                       	smpsAlterNote       $09
0008E512 E701                       	dc.b	smpsNoAttack, $01
0008E514 E103                       	smpsAlterNote       $03
0008E516 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E51A E109                       	smpsAlterNote       $09
0008E51C E701                       	dc.b	smpsNoAttack, $01
0008E51E E10C                       	smpsAlterNote       $0C
0008E520 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E524 E106                       	smpsAlterNote       $06
0008E526 E701                       	dc.b	smpsNoAttack, $01
0008E528 E102                       	smpsAlterNote       $02
0008E52A E701                       	dc.b	smpsNoAttack, $01
0008E52C E103                       	smpsAlterNote       $03
0008E52E E701                       	dc.b	smpsNoAttack, $01
0008E530 E109                       	smpsAlterNote       $09
0008E532 E701                       	dc.b	smpsNoAttack, $01
0008E534 E10D                       	smpsAlterNote       $0D
0008E536 E701                       	dc.b	smpsNoAttack, $01
0008E538 E109                       	smpsAlterNote       $09
0008E53A E701                       	dc.b	smpsNoAttack, $01
0008E53C E106                       	smpsAlterNote       $06
0008E53E E701                       	dc.b	smpsNoAttack, $01
0008E540 E102                       	smpsAlterNote       $02
0008E542 E701                       	dc.b	smpsNoAttack, $01
0008E544 E106                       	smpsAlterNote       $06
0008E546 E701                       	dc.b	smpsNoAttack, $01
0008E548 E10C                       	smpsAlterNote       $0C
0008E54A E701                       	dc.b	smpsNoAttack, $01
0008E54C E10D                       	smpsAlterNote       $0D
0008E54E E701                       	dc.b	smpsNoAttack, $01
0008E550 E109                       	smpsAlterNote       $09
0008E552 E701                       	dc.b	smpsNoAttack, $01
0008E554 E103                       	smpsAlterNote       $03
0008E556 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E55A E106                       	smpsAlterNote       $06
0008E55C E701                       	dc.b	smpsNoAttack, $01
0008E55E E10C                       	smpsAlterNote       $0C
0008E560 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E564 E106                       	smpsAlterNote       $06
0008E566 E701                       	dc.b	smpsNoAttack, $01
0008E568 E103                       	smpsAlterNote       $03
0008E56A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E56E E109                       	smpsAlterNote       $09
0008E570 E701                       	dc.b	smpsNoAttack, $01
0008E572 E10D                       	smpsAlterNote       $0D
0008E574 E701                       	dc.b	smpsNoAttack, $01
0008E576 E10C                       	smpsAlterNote       $0C
0008E578 E701                       	dc.b	smpsNoAttack, $01
0008E57A E106                       	smpsAlterNote       $06
0008E57C E701                       	dc.b	smpsNoAttack, $01
0008E57E E103                       	smpsAlterNote       $03
0008E580 8001                       	dc.b	nRst, $01
0008E582 E109                       	smpsAlterNote       $09
0008E584 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008E58A E10C                       	smpsAlterNote       $0C
0008E58C E601                       	smpsAlterVol        $01
0008E58E BB0D                       	dc.b	nBb4, $0D
0008E590 E106                       	smpsAlterNote       $06
0008E592 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E596 E109                       	smpsAlterNote       $09
0008E598 E701                       	dc.b	smpsNoAttack, $01
0008E59A E10F                       	smpsAlterNote       $0F
0008E59C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5A0 E109                       	smpsAlterNote       $09
0008E5A2 E701                       	dc.b	smpsNoAttack, $01
0008E5A4 E106                       	smpsAlterNote       $06
0008E5A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5AA E10C                       	smpsAlterNote       $0C
0008E5AC E701                       	dc.b	smpsNoAttack, $01
0008E5AE E110                       	smpsAlterNote       $10
0008E5B0 E701                       	dc.b	smpsNoAttack, $01
0008E5B2 E10F                       	smpsAlterNote       $0F
0008E5B4 E701                       	dc.b	smpsNoAttack, $01
0008E5B6 E109                       	smpsAlterNote       $09
0008E5B8 E701                       	dc.b	smpsNoAttack, $01
0008E5BA E105                       	smpsAlterNote       $05
0008E5BC E701                       	dc.b	smpsNoAttack, $01
0008E5BE E106                       	smpsAlterNote       $06
0008E5C0 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008E5C4 E103                       	smpsAlterNote       $03
0008E5C6 E701                       	dc.b	smpsNoAttack, $01
0008E5C8 E1FF                       	smpsAlterNote       $FF
0008E5CA E701                       	dc.b	smpsNoAttack, $01
0008E5CC E103                       	smpsAlterNote       $03
0008E5CE E701                       	dc.b	smpsNoAttack, $01
0008E5D0 E106                       	smpsAlterNote       $06
0008E5D2 E701                       	dc.b	smpsNoAttack, $01
0008E5D4 E10A                       	smpsAlterNote       $0A
0008E5D6 E701                       	dc.b	smpsNoAttack, $01
0008E5D8 E106                       	smpsAlterNote       $06
0008E5DA E701                       	dc.b	smpsNoAttack, $01
0008E5DC E100                       	smpsAlterNote       $00
0008E5DE E701                       	dc.b	smpsNoAttack, $01
0008E5E0 E1FF                       	smpsAlterNote       $FF
0008E5E2 E701                       	dc.b	smpsNoAttack, $01
0008E5E4 E103                       	smpsAlterNote       $03
0008E5E6 E701                       	dc.b	smpsNoAttack, $01
0008E5E8 E109                       	smpsAlterNote       $09
0008E5EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5EE E106                       	smpsAlterNote       $06
0008E5F0 E701                       	dc.b	smpsNoAttack, $01
0008E5F2 E100                       	smpsAlterNote       $00
0008E5F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5F8 E107                       	smpsAlterNote       $07
0008E5FA BF0E                       	dc.b	nD5, $0E
0008E5FC E101                       	smpsAlterNote       $01
0008E5FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E602 E107                       	smpsAlterNote       $07
0008E604 E701                       	dc.b	smpsNoAttack, $01
0008E606 E10A                       	smpsAlterNote       $0A
0008E608 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E60C E104                       	smpsAlterNote       $04
0008E60E E701                       	dc.b	smpsNoAttack, $01
0008E610 E100                       	smpsAlterNote       $00
0008E612 E701                       	dc.b	smpsNoAttack, $01
0008E614 E101                       	smpsAlterNote       $01
0008E616 E701                       	dc.b	smpsNoAttack, $01
0008E618 E107                       	smpsAlterNote       $07
0008E61A E701                       	dc.b	smpsNoAttack, $01
0008E61C E10B                       	smpsAlterNote       $0B
0008E61E E701                       	dc.b	smpsNoAttack, $01
0008E620 E107                       	smpsAlterNote       $07
0008E622 E701                       	dc.b	smpsNoAttack, $01
0008E624 E104                       	smpsAlterNote       $04
0008E626 E701                       	dc.b	smpsNoAttack, $01
0008E628 E100                       	smpsAlterNote       $00
0008E62A E701                       	dc.b	smpsNoAttack, $01
0008E62C E101                       	smpsAlterNote       $01
0008E62E 8001                       	dc.b	nRst, $01
0008E630 E108                       	smpsAlterNote       $08
0008E632 C10C                       	dc.b	nE5, $0C
0008E634 E109                       	smpsAlterNote       $09
0008E636 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008E63A E10A                       	smpsAlterNote       $0A
0008E63C 8001                       	dc.b	nRst, $01
0008E63E E109                       	smpsAlterNote       $09
0008E640 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008E644 E106                       	smpsAlterNote       $06
0008E646 E701                       	dc.b	smpsNoAttack, $01
0008E648 E102                       	smpsAlterNote       $02
0008E64A E701                       	dc.b	smpsNoAttack, $01
0008E64C E103                       	smpsAlterNote       $03
0008E64E E701                       	dc.b	smpsNoAttack, $01
0008E650 E109                       	smpsAlterNote       $09
0008E652 E701                       	dc.b	smpsNoAttack, $01
0008E654 E10D                       	smpsAlterNote       $0D
0008E656 E701                       	dc.b	smpsNoAttack, $01
0008E658 E109                       	smpsAlterNote       $09
0008E65A E701                       	dc.b	smpsNoAttack, $01
0008E65C E106                       	smpsAlterNote       $06
0008E65E E701                       	dc.b	smpsNoAttack, $01
0008E660 E102                       	smpsAlterNote       $02
0008E662 E701                       	dc.b	smpsNoAttack, $01
0008E664 E106                       	smpsAlterNote       $06
0008E666 E701                       	dc.b	smpsNoAttack, $01
0008E668 E10C                       	smpsAlterNote       $0C
0008E66A E701                       	dc.b	smpsNoAttack, $01
0008E66C E10D                       	smpsAlterNote       $0D
0008E66E E701                       	dc.b	smpsNoAttack, $01
0008E670 E109                       	smpsAlterNote       $09
0008E672 C40D                       	dc.b	nG5, $0D
0008E674 E106                       	smpsAlterNote       $06
0008E676 E701                       	dc.b	smpsNoAttack, $01
0008E678 E102                       	smpsAlterNote       $02
0008E67A E701                       	dc.b	smpsNoAttack, $01
0008E67C E103                       	smpsAlterNote       $03
0008E67E E701                       	dc.b	smpsNoAttack, $01
0008E680 E109                       	smpsAlterNote       $09
0008E682 E701                       	dc.b	smpsNoAttack, $01
0008E684 E108                       	smpsAlterNote       $08
0008E686 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008E692 E109                       	smpsAlterNote       $09
0008E694 C20D                       	dc.b	nF5, $0D
0008E696 E106                       	smpsAlterNote       $06
0008E698 E701                       	dc.b	smpsNoAttack, $01
0008E69A E102                       	smpsAlterNote       $02
0008E69C E701                       	dc.b	smpsNoAttack, $01
0008E69E E106                       	smpsAlterNote       $06
0008E6A0 E701                       	dc.b	smpsNoAttack, $01
0008E6A2 E109                       	smpsAlterNote       $09
0008E6A4 E701                       	dc.b	smpsNoAttack, $01
0008E6A6 E10D                       	smpsAlterNote       $0D
0008E6A8 E701                       	dc.b	smpsNoAttack, $01
0008E6AA E109                       	smpsAlterNote       $09
0008E6AC E701                       	dc.b	smpsNoAttack, $01
0008E6AE E103                       	smpsAlterNote       $03
0008E6B0 E701                       	dc.b	smpsNoAttack, $01
0008E6B2 E102                       	smpsAlterNote       $02
0008E6B4 E701                       	dc.b	smpsNoAttack, $01
0008E6B6 E106                       	smpsAlterNote       $06
0008E6B8 E701                       	dc.b	smpsNoAttack, $01
0008E6BA E10C                       	smpsAlterNote       $0C
0008E6BC E701                       	dc.b	smpsNoAttack, $01
0008E6BE E10D                       	smpsAlterNote       $0D
0008E6C0 8001                       	dc.b	nRst, $01
0008E6C2 E112                       	smpsAlterNote       $12
0008E6C4 C401                       	dc.b	nG5, $01
0008E6C6 E1EB                       	smpsAlterNote       $EB
0008E6C8 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008E6CB E1FD                       	smpsAlterNote       $FD
0008E6CD E701                       	dc.b	smpsNoAttack, $01
0008E6CF E10F                       	smpsAlterNote       $0F
0008E6D1 E701                       	dc.b	smpsNoAttack, $01
0008E6D3 E118                       	smpsAlterNote       $18
0008E6D5 E701                       	dc.b	smpsNoAttack, $01
0008E6D7 E1ED                       	smpsAlterNote       $ED
0008E6D9 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008E6DC E1FF                       	smpsAlterNote       $FF
0008E6DE E701                       	dc.b	smpsNoAttack, $01
0008E6E0 E10B                       	smpsAlterNote       $0B
0008E6E2 E703                       	dc.b	smpsNoAttack, $03
0008E6E4 E109                       	smpsAlterNote       $09
0008E6E6 C407                       	dc.b	nG5, $07
0008E6E8 E108                       	smpsAlterNote       $08
0008E6EA C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008E6F6 E109                       	smpsAlterNote       $09
0008E6F8 C20D                       	dc.b	nF5, $0D
0008E6FA E103                       	smpsAlterNote       $03
0008E6FC E701                       	dc.b	smpsNoAttack, $01
0008E6FE E102                       	smpsAlterNote       $02
0008E700 E701                       	dc.b	smpsNoAttack, $01
0008E702 E106                       	smpsAlterNote       $06
0008E704 E701                       	dc.b	smpsNoAttack, $01
0008E706 E10C                       	smpsAlterNote       $0C
0008E708 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E70C E109                       	smpsAlterNote       $09
0008E70E E701                       	dc.b	smpsNoAttack, $01
0008E710 E103                       	smpsAlterNote       $03
0008E712 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E716 E109                       	smpsAlterNote       $09
0008E718 E701                       	dc.b	smpsNoAttack, $01
0008E71A E10C                       	smpsAlterNote       $0C
0008E71C E701                       	dc.b	smpsNoAttack, $01
0008E71E E10D                       	smpsAlterNote       $0D
0008E720 8001                       	dc.b	nRst, $01
0008E722 E10B                       	smpsAlterNote       $0B
0008E724 C609 8001                  	dc.b	nA5, $09, nRst, $01
0008E728 E109                       	smpsAlterNote       $09
0008E72A B806 8001                  	dc.b	nG4, $06, nRst, $01
0008E72E E108                       	smpsAlterNote       $08
0008E730 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008E73C 8001                       	dc.b	nRst, $01
0008E73E E109                       	smpsAlterNote       $09
0008E740 C20D                       	dc.b	nF5, $0D
0008E742 E103                       	smpsAlterNote       $03
0008E744 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E748 E106                       	smpsAlterNote       $06
0008E74A E701                       	dc.b	smpsNoAttack, $01
0008E74C E10C                       	smpsAlterNote       $0C
0008E74E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E752 E106                       	smpsAlterNote       $06
0008E754 E701                       	dc.b	smpsNoAttack, $01
0008E756 E103                       	smpsAlterNote       $03
0008E758 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E75C E109                       	smpsAlterNote       $09
0008E75E E701                       	dc.b	smpsNoAttack, $01
0008E760 E10D                       	smpsAlterNote       $0D
0008E762 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E768 E108                       	smpsAlterNote       $08
0008E76A E6FF                       	smpsAlterVol        $FF
0008E76C A806                       	dc.b	nEb3, $06
0008E76E E10C                       	smpsAlterNote       $0C
0008E770 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E774 E108                       	smpsAlterNote       $08
0008E776 A803                       	dc.b	nEb3, $03
0008E778 E109                       	smpsAlterNote       $09
0008E77A AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008E77E E10C                       	smpsAlterNote       $0C
0008E780 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008E78A E109                       	smpsAlterNote       $09
0008E78C E602                       	smpsAlterVol        $02
0008E78E B604                       	dc.b	nF4, $04
0008E790 E602                       	smpsAlterVol        $02
0008E792 F6F1 AA                    	smpsJump            music84_Jump02
0008E795                            
0008E795                            ; FM4 Data
0008E795                            music84_FM4:
0008E797 E040                       	smpsPan             panRight, $00
0008E799 8003                       	dc.b	nRst, $03
0008E79B E10F                       	smpsAlterNote       $0F
0008E79D C603 8008                  	dc.b	nA5, $03, nRst, $08
0008E7A1 E10D                       	smpsAlterNote       $0D
0008E7A3 C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008E7A7 E10C                       	smpsAlterNote       $0C
0008E7A9 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008E7AF E6FE                       	smpsAlterVol        $FE
0008E7B1 E110                       	smpsAlterNote       $10
0008E7B3 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008E7B7 E10F                       	smpsAlterNote       $0F
0008E7B9 C602 8001                  	dc.b	nA5, $02, nRst, $01
0008E7BD E10D                       	smpsAlterNote       $0D
0008E7BF C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008E7C8 E10C                       	smpsAlterNote       $0C
0008E7CA C103                       	dc.b	nE5, $03
0008E7CC E10A                       	smpsAlterNote       $0A
0008E7CE BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008E7D4 03                         	dc.b	$03
0008E7D5                            
0008E7D5                            music84_Jump01:
0008E7D5 E10B                       	smpsAlterNote       $0B
0008E7D7 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008E7DB E10C                       	smpsAlterNote       $0C
0008E7DD C102 8001                  	dc.b	nE5, $02, nRst, $01
0008E7E1 E10D                       	smpsAlterNote       $0D
0008E7E3 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008E7ED E10B                       	smpsAlterNote       $0B
0008E7EF BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008E7F3 E107                       	smpsAlterNote       $07
0008E7F5 E701                       	dc.b	smpsNoAttack, $01
0008E7F7 E103                       	smpsAlterNote       $03
0008E7F9 E701                       	dc.b	smpsNoAttack, $01
0008E7FB E104                       	smpsAlterNote       $04
0008E7FD E701                       	dc.b	smpsNoAttack, $01
0008E7FF E10A                       	smpsAlterNote       $0A
0008E801 E701                       	dc.b	smpsNoAttack, $01
0008E803 E10E                       	smpsAlterNote       $0E
0008E805 E701                       	dc.b	smpsNoAttack, $01
0008E807 E10A                       	smpsAlterNote       $0A
0008E809 E701                       	dc.b	smpsNoAttack, $01
0008E80B E107                       	smpsAlterNote       $07
0008E80D E701                       	dc.b	smpsNoAttack, $01
0008E80F E104                       	smpsAlterNote       $04
0008E811 8001                       	dc.b	nRst, $01
0008E813 E110                       	smpsAlterNote       $10
0008E815 C703                       	dc.b	nBb5, $03
0008E817 E10F                       	smpsAlterNote       $0F
0008E819 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008E81D E10D                       	smpsAlterNote       $0D
0008E81F C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008E825 E10C                       	smpsAlterNote       $0C
0008E827 E701                       	dc.b	smpsNoAttack, $01
0008E829 E108                       	smpsAlterNote       $08
0008E82B E701                       	dc.b	smpsNoAttack, $01
0008E82D E10C                       	smpsAlterNote       $0C
0008E82F E701                       	dc.b	smpsNoAttack, $01
0008E831 E10F                       	smpsAlterNote       $0F
0008E833 E701                       	dc.b	smpsNoAttack, $01
0008E835 E113                       	smpsAlterNote       $13
0008E837 E701                       	dc.b	smpsNoAttack, $01
0008E839 E10F                       	smpsAlterNote       $0F
0008E83B E701                       	dc.b	smpsNoAttack, $01
0008E83D E109                       	smpsAlterNote       $09
0008E83F E701                       	dc.b	smpsNoAttack, $01
0008E841 E108                       	smpsAlterNote       $08
0008E843 E701                       	dc.b	smpsNoAttack, $01
0008E845 E10C                       	smpsAlterNote       $0C
0008E847 E701                       	dc.b	smpsNoAttack, $01
0008E849 E112                       	smpsAlterNote       $12
0008E84B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E84F E10C                       	smpsAlterNote       $0C
0008E851 E701                       	dc.b	smpsNoAttack, $01
0008E853 E109                       	smpsAlterNote       $09
0008E855 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E859 E10F                       	smpsAlterNote       $0F
0008E85B E701                       	dc.b	smpsNoAttack, $01
0008E85D E113                       	smpsAlterNote       $13
0008E85F E701                       	dc.b	smpsNoAttack, $01
0008E861 E112                       	smpsAlterNote       $12
0008E863 E701                       	dc.b	smpsNoAttack, $01
0008E865 E10C                       	smpsAlterNote       $0C
0008E867 E701                       	dc.b	smpsNoAttack, $01
0008E869 E108                       	smpsAlterNote       $08
0008E86B E701                       	dc.b	smpsNoAttack, $01
0008E86D E10C                       	smpsAlterNote       $0C
0008E86F E701                       	dc.b	smpsNoAttack, $01
0008E871 E10F                       	smpsAlterNote       $0F
0008E873 E701                       	dc.b	smpsNoAttack, $01
0008E875 E113                       	smpsAlterNote       $13
0008E877 E701                       	dc.b	smpsNoAttack, $01
0008E879 E10F                       	smpsAlterNote       $0F
0008E87B E701                       	dc.b	smpsNoAttack, $01
0008E87D E109                       	smpsAlterNote       $09
0008E87F E701                       	dc.b	smpsNoAttack, $01
0008E881 E108                       	smpsAlterNote       $08
0008E883 E701                       	dc.b	smpsNoAttack, $01
0008E885 E10C                       	smpsAlterNote       $0C
0008E887 E701                       	dc.b	smpsNoAttack, $01
0008E889 E112                       	smpsAlterNote       $12
0008E88B E701                       	dc.b	smpsNoAttack, $01
0008E88D E113                       	smpsAlterNote       $13
0008E88F 800F                       	dc.b	nRst, $0F
0008E891 E10B                       	smpsAlterNote       $0B
0008E893 BF03                       	dc.b	nD5, $03
0008E895 E10C                       	smpsAlterNote       $0C
0008E897 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008E89B E10D                       	smpsAlterNote       $0D
0008E89D C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008E8A5 E10B                       	smpsAlterNote       $0B
0008E8A7 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008E8B1 E110                       	smpsAlterNote       $10
0008E8B3 C704                       	dc.b	nBb5, $04
0008E8B5 E10F                       	smpsAlterNote       $0F
0008E8B7 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008E8BB E10D                       	smpsAlterNote       $0D
0008E8BD C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008E8C3 E109                       	smpsAlterNote       $09
0008E8C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8C9 E10F                       	smpsAlterNote       $0F
0008E8CB E701                       	dc.b	smpsNoAttack, $01
0008E8CD E112                       	smpsAlterNote       $12
0008E8CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8D3 E10C                       	smpsAlterNote       $0C
0008E8D5 E701                       	dc.b	smpsNoAttack, $01
0008E8D7 E108                       	smpsAlterNote       $08
0008E8D9 E701                       	dc.b	smpsNoAttack, $01
0008E8DB E109                       	smpsAlterNote       $09
0008E8DD E701                       	dc.b	smpsNoAttack, $01
0008E8DF E10F                       	smpsAlterNote       $0F
0008E8E1 E701                       	dc.b	smpsNoAttack, $01
0008E8E3 E113                       	smpsAlterNote       $13
0008E8E5 E701                       	dc.b	smpsNoAttack, $01
0008E8E7 E10F                       	smpsAlterNote       $0F
0008E8E9 E701                       	dc.b	smpsNoAttack, $01
0008E8EB E10C                       	smpsAlterNote       $0C
0008E8ED E701                       	dc.b	smpsNoAttack, $01
0008E8EF E108                       	smpsAlterNote       $08
0008E8F1 E701                       	dc.b	smpsNoAttack, $01
0008E8F3 E10C                       	smpsAlterNote       $0C
0008E8F5 E701                       	dc.b	smpsNoAttack, $01
0008E8F7 E112                       	smpsAlterNote       $12
0008E8F9 E701                       	dc.b	smpsNoAttack, $01
0008E8FB E113                       	smpsAlterNote       $13
0008E8FD E701                       	dc.b	smpsNoAttack, $01
0008E8FF E10F                       	smpsAlterNote       $0F
0008E901 E701                       	dc.b	smpsNoAttack, $01
0008E903 E109                       	smpsAlterNote       $09
0008E905 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E909 E10C                       	smpsAlterNote       $0C
0008E90B E701                       	dc.b	smpsNoAttack, $01
0008E90D E112                       	smpsAlterNote       $12
0008E90F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E913 E10C                       	smpsAlterNote       $0C
0008E915 E701                       	dc.b	smpsNoAttack, $01
0008E917 E109                       	smpsAlterNote       $09
0008E919 E701                       	dc.b	smpsNoAttack, $01
0008E91B E10D                       	smpsAlterNote       $0D
0008E91D C401 8001                  	dc.b	nG5, $01, nRst, $01
0008E921 E10F                       	smpsAlterNote       $0F
0008E923 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008E92D E10D                       	smpsAlterNote       $0D
0008E92F C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008E935 E10B                       	smpsAlterNote       $0B
0008E937 BF0D                       	dc.b	nD5, $0D
0008E939 E108                       	smpsAlterNote       $08
0008E93B E701                       	dc.b	smpsNoAttack, $01
0008E93D E104                       	smpsAlterNote       $04
0008E93F E701                       	dc.b	smpsNoAttack, $01
0008E941 E108                       	smpsAlterNote       $08
0008E943 E701                       	dc.b	smpsNoAttack, $01
0008E945 E10B                       	smpsAlterNote       $0B
0008E947 E701                       	dc.b	smpsNoAttack, $01
0008E949 E10F                       	smpsAlterNote       $0F
0008E94B E701                       	dc.b	smpsNoAttack, $01
0008E94D E10B                       	smpsAlterNote       $0B
0008E94F E701                       	dc.b	smpsNoAttack, $01
0008E951 E105                       	smpsAlterNote       $05
0008E953 E701                       	dc.b	smpsNoAttack, $01
0008E955 E104                       	smpsAlterNote       $04
0008E957 E701                       	dc.b	smpsNoAttack, $01
0008E959 E108                       	smpsAlterNote       $08
0008E95B E701                       	dc.b	smpsNoAttack, $01
0008E95D E10E                       	smpsAlterNote       $0E
0008E95F E701                       	dc.b	smpsNoAttack, $01
0008E961 E10F                       	smpsAlterNote       $0F
0008E963 8001                       	dc.b	nRst, $01
0008E965 E10C                       	smpsAlterNote       $0C
0008E967 C101                       	dc.b	nE5, $01
0008E969 E10D                       	smpsAlterNote       $0D
0008E96B C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008E971 E10F                       	smpsAlterNote       $0F
0008E973 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008E977 E10C                       	smpsAlterNote       $0C
0008E979 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008E97D E10D                       	smpsAlterNote       $0D
0008E97F CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008E983 E10C                       	smpsAlterNote       $0C
0008E985 CD03                       	dc.b	nE6, $03
0008E987 E10A                       	smpsAlterNote       $0A
0008E989 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008E98D E10D                       	smpsAlterNote       $0D
0008E98F C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008E997 E109                       	smpsAlterNote       $09
0008E999 E701                       	dc.b	smpsNoAttack, $01
0008E99B E10D                       	smpsAlterNote       $0D
0008E99D E701                       	dc.b	smpsNoAttack, $01
0008E99F E110                       	smpsAlterNote       $10
0008E9A1 E701                       	dc.b	smpsNoAttack, $01
0008E9A3 E114                       	smpsAlterNote       $14
0008E9A5 E701                       	dc.b	smpsNoAttack, $01
0008E9A7 E110                       	smpsAlterNote       $10
0008E9A9 E701                       	dc.b	smpsNoAttack, $01
0008E9AB E10A                       	smpsAlterNote       $0A
0008E9AD E701                       	dc.b	smpsNoAttack, $01
0008E9AF E109                       	smpsAlterNote       $09
0008E9B1 E701                       	dc.b	smpsNoAttack, $01
0008E9B3 E10D                       	smpsAlterNote       $0D
0008E9B5 E701                       	dc.b	smpsNoAttack, $01
0008E9B7 E113                       	smpsAlterNote       $13
0008E9B9 E701                       	dc.b	smpsNoAttack, $01
0008E9BB E114                       	smpsAlterNote       $14
0008E9BD 8001                       	dc.b	nRst, $01
0008E9BF E10F                       	smpsAlterNote       $0F
0008E9C1 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008E9C7 E10C                       	smpsAlterNote       $0C
0008E9C9 E701                       	dc.b	smpsNoAttack, $01
0008E9CB E108                       	smpsAlterNote       $08
0008E9CD E701                       	dc.b	smpsNoAttack, $01
0008E9CF E10C                       	smpsAlterNote       $0C
0008E9D1 E701                       	dc.b	smpsNoAttack, $01
0008E9D3 E112                       	smpsAlterNote       $12
0008E9D5 E701                       	dc.b	smpsNoAttack, $01
0008E9D7 E113                       	smpsAlterNote       $13
0008E9D9 E701                       	dc.b	smpsNoAttack, $01
0008E9DB E10F                       	smpsAlterNote       $0F
0008E9DD E701                       	dc.b	smpsNoAttack, $01
0008E9DF E109                       	smpsAlterNote       $09
0008E9E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9E5 E10C                       	smpsAlterNote       $0C
0008E9E7 E701                       	dc.b	smpsNoAttack, $01
0008E9E9 E112                       	smpsAlterNote       $12
0008E9EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9EF E10C                       	smpsAlterNote       $0C
0008E9F1 E701                       	dc.b	smpsNoAttack, $01
0008E9F3 E109                       	smpsAlterNote       $09
0008E9F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9F9 E10F                       	smpsAlterNote       $0F
0008E9FB E701                       	dc.b	smpsNoAttack, $01
0008E9FD E113                       	smpsAlterNote       $13
0008E9FF E701                       	dc.b	smpsNoAttack, $01
0008EA01 E112                       	smpsAlterNote       $12
0008EA03 E701                       	dc.b	smpsNoAttack, $01
0008EA05 E10C                       	smpsAlterNote       $0C
0008EA07 E701                       	dc.b	smpsNoAttack, $01
0008EA09 E108                       	smpsAlterNote       $08
0008EA0B E701                       	dc.b	smpsNoAttack, $01
0008EA0D E10C                       	smpsAlterNote       $0C
0008EA0F E701                       	dc.b	smpsNoAttack, $01
0008EA11 E10F                       	smpsAlterNote       $0F
0008EA13 E701                       	dc.b	smpsNoAttack, $01
0008EA15 E113                       	smpsAlterNote       $13
0008EA17 E701                       	dc.b	smpsNoAttack, $01
0008EA19 E10F                       	smpsAlterNote       $0F
0008EA1B E701                       	dc.b	smpsNoAttack, $01
0008EA1D E109                       	smpsAlterNote       $09
0008EA1F E701                       	dc.b	smpsNoAttack, $01
0008EA21 E108                       	smpsAlterNote       $08
0008EA23 E701                       	dc.b	smpsNoAttack, $01
0008EA25 E10C                       	smpsAlterNote       $0C
0008EA27 E701                       	dc.b	smpsNoAttack, $01
0008EA29 E112                       	smpsAlterNote       $12
0008EA2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA2F E10F                       	smpsAlterNote       $0F
0008EA31 E701                       	dc.b	smpsNoAttack, $01
0008EA33 E109                       	smpsAlterNote       $09
0008EA35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA39 E10F                       	smpsAlterNote       $0F
0008EA3B E701                       	dc.b	smpsNoAttack, $01
0008EA3D E113                       	smpsAlterNote       $13
0008EA3F E701                       	dc.b	smpsNoAttack, $01
0008EA41 E112                       	smpsAlterNote       $12
0008EA43 E701                       	dc.b	smpsNoAttack, $01
0008EA45 E10C                       	smpsAlterNote       $0C
0008EA47 E701                       	dc.b	smpsNoAttack, $01
0008EA49 E108                       	smpsAlterNote       $08
0008EA4B E701                       	dc.b	smpsNoAttack, $01
0008EA4D E10C                       	smpsAlterNote       $0C
0008EA4F E701                       	dc.b	smpsNoAttack, $01
0008EA51 E10F                       	smpsAlterNote       $0F
0008EA53 E701                       	dc.b	smpsNoAttack, $01
0008EA55 E113                       	smpsAlterNote       $13
0008EA57 E701                       	dc.b	smpsNoAttack, $01
0008EA59 E10F                       	smpsAlterNote       $0F
0008EA5B E701                       	dc.b	smpsNoAttack, $01
0008EA5D E109                       	smpsAlterNote       $09
0008EA5F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EA63 E10F                       	smpsAlterNote       $0F
0008EA65 C60D                       	dc.b	nA5, $0D
0008EA67 E109                       	smpsAlterNote       $09
0008EA69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA6D E10C                       	smpsAlterNote       $0C
0008EA6F E701                       	dc.b	smpsNoAttack, $01
0008EA71 E112                       	smpsAlterNote       $12
0008EA73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA77 E10C                       	smpsAlterNote       $0C
0008EA79 E701                       	dc.b	smpsNoAttack, $01
0008EA7B E109                       	smpsAlterNote       $09
0008EA7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA81 E10F                       	smpsAlterNote       $0F
0008EA83 E701                       	dc.b	smpsNoAttack, $01
0008EA85 E113                       	smpsAlterNote       $13
0008EA87 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EA8D E10D                       	smpsAlterNote       $0D
0008EA8F C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008EA97 E10C                       	smpsAlterNote       $0C
0008EA99 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008EA9F E6FF                       	smpsAlterVol        $FF
0008EAA1 E10B                       	smpsAlterNote       $0B
0008EAA3 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008EAA7 E10C                       	smpsAlterNote       $0C
0008EAA9 C103                       	dc.b	nE5, $03
0008EAAB E10D                       	smpsAlterNote       $0D
0008EAAD C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008EAB7 E10B                       	smpsAlterNote       $0B
0008EAB9 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008EABD E107                       	smpsAlterNote       $07
0008EABF E701                       	dc.b	smpsNoAttack, $01
0008EAC1 E104                       	smpsAlterNote       $04
0008EAC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EAC7 E10A                       	smpsAlterNote       $0A
0008EAC9 E701                       	dc.b	smpsNoAttack, $01
0008EACB E10D                       	smpsAlterNote       $0D
0008EACD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EAD1 E107                       	smpsAlterNote       $07
0008EAD3 E701                       	dc.b	smpsNoAttack, $01
0008EAD5 E104                       	smpsAlterNote       $04
0008EAD7 8001                       	dc.b	nRst, $01
0008EAD9 E110                       	smpsAlterNote       $10
0008EADB C703                       	dc.b	nBb5, $03
0008EADD E10F                       	smpsAlterNote       $0F
0008EADF C603 8001                  	dc.b	nA5, $03, nRst, $01
0008EAE3 E10D                       	smpsAlterNote       $0D
0008EAE5 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008EAE9 E10C                       	smpsAlterNote       $0C
0008EAEB E701                       	dc.b	smpsNoAttack, $01
0008EAED E108                       	smpsAlterNote       $08
0008EAEF E701                       	dc.b	smpsNoAttack, $01
0008EAF1 E109                       	smpsAlterNote       $09
0008EAF3 E701                       	dc.b	smpsNoAttack, $01
0008EAF5 E10F                       	smpsAlterNote       $0F
0008EAF7 E701                       	dc.b	smpsNoAttack, $01
0008EAF9 E113                       	smpsAlterNote       $13
0008EAFB E701                       	dc.b	smpsNoAttack, $01
0008EAFD E10F                       	smpsAlterNote       $0F
0008EAFF E701                       	dc.b	smpsNoAttack, $01
0008EB01 E10C                       	smpsAlterNote       $0C
0008EB03 E701                       	dc.b	smpsNoAttack, $01
0008EB05 E108                       	smpsAlterNote       $08
0008EB07 E701                       	dc.b	smpsNoAttack, $01
0008EB09 E10C                       	smpsAlterNote       $0C
0008EB0B E701                       	dc.b	smpsNoAttack, $01
0008EB0D E112                       	smpsAlterNote       $12
0008EB0F E701                       	dc.b	smpsNoAttack, $01
0008EB11 E113                       	smpsAlterNote       $13
0008EB13 E701                       	dc.b	smpsNoAttack, $01
0008EB15 E10F                       	smpsAlterNote       $0F
0008EB17 E701                       	dc.b	smpsNoAttack, $01
0008EB19 E109                       	smpsAlterNote       $09
0008EB1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB1F E10C                       	smpsAlterNote       $0C
0008EB21 E701                       	dc.b	smpsNoAttack, $01
0008EB23 E112                       	smpsAlterNote       $12
0008EB25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB29 E10C                       	smpsAlterNote       $0C
0008EB2B E701                       	dc.b	smpsNoAttack, $01
0008EB2D E109                       	smpsAlterNote       $09
0008EB2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB33 E10F                       	smpsAlterNote       $0F
0008EB35 E701                       	dc.b	smpsNoAttack, $01
0008EB37 E113                       	smpsAlterNote       $13
0008EB39 E701                       	dc.b	smpsNoAttack, $01
0008EB3B E112                       	smpsAlterNote       $12
0008EB3D E701                       	dc.b	smpsNoAttack, $01
0008EB3F E10C                       	smpsAlterNote       $0C
0008EB41 E701                       	dc.b	smpsNoAttack, $01
0008EB43 E108                       	smpsAlterNote       $08
0008EB45 E701                       	dc.b	smpsNoAttack, $01
0008EB47 E10C                       	smpsAlterNote       $0C
0008EB49 E701                       	dc.b	smpsNoAttack, $01
0008EB4B E10F                       	smpsAlterNote       $0F
0008EB4D E701                       	dc.b	smpsNoAttack, $01
0008EB4F E113                       	smpsAlterNote       $13
0008EB51 E701                       	dc.b	smpsNoAttack, $01
0008EB53 E10F                       	smpsAlterNote       $0F
0008EB55 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008EB59 E110                       	smpsAlterNote       $10
0008EB5B BB03                       	dc.b	nBb4, $03
0008EB5D E10F                       	smpsAlterNote       $0F
0008EB5F BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008EB63 E10B                       	smpsAlterNote       $0B
0008EB65 BF03                       	dc.b	nD5, $03
0008EB67 E10C                       	smpsAlterNote       $0C
0008EB69 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008EB6D E10D                       	smpsAlterNote       $0D
0008EB6F C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008EB79 E10B                       	smpsAlterNote       $0B
0008EB7B BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008EB87 E110                       	smpsAlterNote       $10
0008EB89 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EB8D E10F                       	smpsAlterNote       $0F
0008EB8F C604                       	dc.b	nA5, $04
0008EB91 E10D                       	smpsAlterNote       $0D
0008EB93 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008EB99 E109                       	smpsAlterNote       $09
0008EB9B E701                       	dc.b	smpsNoAttack, $01
0008EB9D E108                       	smpsAlterNote       $08
0008EB9F E701                       	dc.b	smpsNoAttack, $01
0008EBA1 E10C                       	smpsAlterNote       $0C
0008EBA3 E701                       	dc.b	smpsNoAttack, $01
0008EBA5 E112                       	smpsAlterNote       $12
0008EBA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBAB E10F                       	smpsAlterNote       $0F
0008EBAD E701                       	dc.b	smpsNoAttack, $01
0008EBAF E109                       	smpsAlterNote       $09
0008EBB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBB5 E10F                       	smpsAlterNote       $0F
0008EBB7 E701                       	dc.b	smpsNoAttack, $01
0008EBB9 E112                       	smpsAlterNote       $12
0008EBBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBBF E10C                       	smpsAlterNote       $0C
0008EBC1 E701                       	dc.b	smpsNoAttack, $01
0008EBC3 E108                       	smpsAlterNote       $08
0008EBC5 E701                       	dc.b	smpsNoAttack, $01
0008EBC7 E109                       	smpsAlterNote       $09
0008EBC9 E701                       	dc.b	smpsNoAttack, $01
0008EBCB E10F                       	smpsAlterNote       $0F
0008EBCD E701                       	dc.b	smpsNoAttack, $01
0008EBCF E113                       	smpsAlterNote       $13
0008EBD1 E701                       	dc.b	smpsNoAttack, $01
0008EBD3 E10F                       	smpsAlterNote       $0F
0008EBD5 E701                       	dc.b	smpsNoAttack, $01
0008EBD7 E10C                       	smpsAlterNote       $0C
0008EBD9 E701                       	dc.b	smpsNoAttack, $01
0008EBDB E108                       	smpsAlterNote       $08
0008EBDD E701                       	dc.b	smpsNoAttack, $01
0008EBDF E10C                       	smpsAlterNote       $0C
0008EBE1 E701                       	dc.b	smpsNoAttack, $01
0008EBE3 E112                       	smpsAlterNote       $12
0008EBE5 E701                       	dc.b	smpsNoAttack, $01
0008EBE7 E113                       	smpsAlterNote       $13
0008EBE9 E701                       	dc.b	smpsNoAttack, $01
0008EBEB E10F                       	smpsAlterNote       $0F
0008EBED E701                       	dc.b	smpsNoAttack, $01
0008EBEF E109                       	smpsAlterNote       $09
0008EBF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBF5 E10C                       	smpsAlterNote       $0C
0008EBF7 E701                       	dc.b	smpsNoAttack, $01
0008EBF9 E112                       	smpsAlterNote       $12
0008EBFB E701                       	dc.b	smpsNoAttack, $01
0008EBFD E113                       	smpsAlterNote       $13
0008EBFF 8001                       	dc.b	nRst, $01
0008EC01 E10F                       	smpsAlterNote       $0F
0008EC03 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008EC0F C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008EC17 E10D                       	smpsAlterNote       $0D
0008EC19 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EC1F E10B                       	smpsAlterNote       $0B
0008EC21 BF0D                       	dc.b	nD5, $0D
0008EC23 E108                       	smpsAlterNote       $08
0008EC25 E701                       	dc.b	smpsNoAttack, $01
0008EC27 E104                       	smpsAlterNote       $04
0008EC29 E701                       	dc.b	smpsNoAttack, $01
0008EC2B E105                       	smpsAlterNote       $05
0008EC2D E701                       	dc.b	smpsNoAttack, $01
0008EC2F E10B                       	smpsAlterNote       $0B
0008EC31 E701                       	dc.b	smpsNoAttack, $01
0008EC33 E10F                       	smpsAlterNote       $0F
0008EC35 E701                       	dc.b	smpsNoAttack, $01
0008EC37 E10B                       	smpsAlterNote       $0B
0008EC39 E701                       	dc.b	smpsNoAttack, $01
0008EC3B E108                       	smpsAlterNote       $08
0008EC3D E701                       	dc.b	smpsNoAttack, $01
0008EC3F E104                       	smpsAlterNote       $04
0008EC41 E701                       	dc.b	smpsNoAttack, $01
0008EC43 E108                       	smpsAlterNote       $08
0008EC45 E701                       	dc.b	smpsNoAttack, $01
0008EC47 E10E                       	smpsAlterNote       $0E
0008EC49 E701                       	dc.b	smpsNoAttack, $01
0008EC4B E10F                       	smpsAlterNote       $0F
0008EC4D E701                       	dc.b	smpsNoAttack, $01
0008EC4F E10C                       	smpsAlterNote       $0C
0008EC51 C101                       	dc.b	nE5, $01
0008EC53 E10D                       	smpsAlterNote       $0D
0008EC55 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008EC5D E10F                       	smpsAlterNote       $0F
0008EC5F C607                       	dc.b	nA5, $07
0008EC61 E10C                       	smpsAlterNote       $0C
0008EC63 CD07                       	dc.b	nE6, $07
0008EC65 E10D                       	smpsAlterNote       $0D
0008EC67 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008EC6B E10C                       	smpsAlterNote       $0C
0008EC6D CD03                       	dc.b	nE6, $03
0008EC6F E10A                       	smpsAlterNote       $0A
0008EC71 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008EC75 E10D                       	smpsAlterNote       $0D
0008EC77 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008EC7D E10A                       	smpsAlterNote       $0A
0008EC7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC83 E110                       	smpsAlterNote       $10
0008EC85 E701                       	dc.b	smpsNoAttack, $01
0008EC87 E114                       	smpsAlterNote       $14
0008EC89 E701                       	dc.b	smpsNoAttack, $01
0008EC8B E113                       	smpsAlterNote       $13
0008EC8D E701                       	dc.b	smpsNoAttack, $01
0008EC8F E10D                       	smpsAlterNote       $0D
0008EC91 E701                       	dc.b	smpsNoAttack, $01
0008EC93 E109                       	smpsAlterNote       $09
0008EC95 E701                       	dc.b	smpsNoAttack, $01
0008EC97 E10D                       	smpsAlterNote       $0D
0008EC99 E701                       	dc.b	smpsNoAttack, $01
0008EC9B E110                       	smpsAlterNote       $10
0008EC9D E701                       	dc.b	smpsNoAttack, $01
0008EC9F E114                       	smpsAlterNote       $14
0008ECA1 E701                       	dc.b	smpsNoAttack, $01
0008ECA3 E10F                       	smpsAlterNote       $0F
0008ECA5 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008ECA9 E10C                       	smpsAlterNote       $0C
0008ECAB E701                       	dc.b	smpsNoAttack, $01
0008ECAD E108                       	smpsAlterNote       $08
0008ECAF E701                       	dc.b	smpsNoAttack, $01
0008ECB1 E10C                       	smpsAlterNote       $0C
0008ECB3 E701                       	dc.b	smpsNoAttack, $01
0008ECB5 E10F                       	smpsAlterNote       $0F
0008ECB7 E701                       	dc.b	smpsNoAttack, $01
0008ECB9 E113                       	smpsAlterNote       $13
0008ECBB E701                       	dc.b	smpsNoAttack, $01
0008ECBD E10F                       	smpsAlterNote       $0F
0008ECBF E701                       	dc.b	smpsNoAttack, $01
0008ECC1 E109                       	smpsAlterNote       $09
0008ECC3 E701                       	dc.b	smpsNoAttack, $01
0008ECC5 E108                       	smpsAlterNote       $08
0008ECC7 E701                       	dc.b	smpsNoAttack, $01
0008ECC9 E10C                       	smpsAlterNote       $0C
0008ECCB E701                       	dc.b	smpsNoAttack, $01
0008ECCD E112                       	smpsAlterNote       $12
0008ECCF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECD3 E10F                       	smpsAlterNote       $0F
0008ECD5 E701                       	dc.b	smpsNoAttack, $01
0008ECD7 E109                       	smpsAlterNote       $09
0008ECD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECDD E10F                       	smpsAlterNote       $0F
0008ECDF E701                       	dc.b	smpsNoAttack, $01
0008ECE1 E112                       	smpsAlterNote       $12
0008ECE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECE7 E10C                       	smpsAlterNote       $0C
0008ECE9 E701                       	dc.b	smpsNoAttack, $01
0008ECEB E108                       	smpsAlterNote       $08
0008ECED E701                       	dc.b	smpsNoAttack, $01
0008ECEF E109                       	smpsAlterNote       $09
0008ECF1 E701                       	dc.b	smpsNoAttack, $01
0008ECF3 E10F                       	smpsAlterNote       $0F
0008ECF5 E701                       	dc.b	smpsNoAttack, $01
0008ECF7 E113                       	smpsAlterNote       $13
0008ECF9 E701                       	dc.b	smpsNoAttack, $01
0008ECFB E10F                       	smpsAlterNote       $0F
0008ECFD E701                       	dc.b	smpsNoAttack, $01
0008ECFF E10C                       	smpsAlterNote       $0C
0008ED01 E701                       	dc.b	smpsNoAttack, $01
0008ED03 E108                       	smpsAlterNote       $08
0008ED05 E701                       	dc.b	smpsNoAttack, $01
0008ED07 E10C                       	smpsAlterNote       $0C
0008ED09 E701                       	dc.b	smpsNoAttack, $01
0008ED0B E112                       	smpsAlterNote       $12
0008ED0D E701                       	dc.b	smpsNoAttack, $01
0008ED0F E113                       	smpsAlterNote       $13
0008ED11 E701                       	dc.b	smpsNoAttack, $01
0008ED13 E10F                       	smpsAlterNote       $0F
0008ED15 E701                       	dc.b	smpsNoAttack, $01
0008ED17 E109                       	smpsAlterNote       $09
0008ED19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED1D E10C                       	smpsAlterNote       $0C
0008ED1F E701                       	dc.b	smpsNoAttack, $01
0008ED21 E112                       	smpsAlterNote       $12
0008ED23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED27 E10C                       	smpsAlterNote       $0C
0008ED29 E701                       	dc.b	smpsNoAttack, $01
0008ED2B E109                       	smpsAlterNote       $09
0008ED2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED31 E10F                       	smpsAlterNote       $0F
0008ED33 E701                       	dc.b	smpsNoAttack, $01
0008ED35 E113                       	smpsAlterNote       $13
0008ED37 E701                       	dc.b	smpsNoAttack, $01
0008ED39 E112                       	smpsAlterNote       $12
0008ED3B E701                       	dc.b	smpsNoAttack, $01
0008ED3D E10C                       	smpsAlterNote       $0C
0008ED3F E701                       	dc.b	smpsNoAttack, $01
0008ED41 E109                       	smpsAlterNote       $09
0008ED43 8001                       	dc.b	nRst, $01
0008ED45 E10F                       	smpsAlterNote       $0F
0008ED47 C60D                       	dc.b	nA5, $0D
0008ED49 E10C                       	smpsAlterNote       $0C
0008ED4B E701                       	dc.b	smpsNoAttack, $01
0008ED4D E108                       	smpsAlterNote       $08
0008ED4F E701                       	dc.b	smpsNoAttack, $01
0008ED51 E10C                       	smpsAlterNote       $0C
0008ED53 E701                       	dc.b	smpsNoAttack, $01
0008ED55 E112                       	smpsAlterNote       $12
0008ED57 E701                       	dc.b	smpsNoAttack, $01
0008ED59 E113                       	smpsAlterNote       $13
0008ED5B E701                       	dc.b	smpsNoAttack, $01
0008ED5D E10F                       	smpsAlterNote       $0F
0008ED5F E701                       	dc.b	smpsNoAttack, $01
0008ED61 E109                       	smpsAlterNote       $09
0008ED63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED67 E10C                       	smpsAlterNote       $0C
0008ED69 E701                       	dc.b	smpsNoAttack, $01
0008ED6B E112                       	smpsAlterNote       $12
0008ED6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED71 E10C                       	smpsAlterNote       $0C
0008ED73 E701                       	dc.b	smpsNoAttack, $01
0008ED75 E109                       	smpsAlterNote       $09
0008ED77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED7B E10F                       	smpsAlterNote       $0F
0008ED7D E701                       	dc.b	smpsNoAttack, $01
0008ED7F E113                       	smpsAlterNote       $13
0008ED81 E701                       	dc.b	smpsNoAttack, $01
0008ED83 E112                       	smpsAlterNote       $12
0008ED85 E701                       	dc.b	smpsNoAttack, $01
0008ED87 E10C                       	smpsAlterNote       $0C
0008ED89 E701                       	dc.b	smpsNoAttack, $01
0008ED8B E108                       	smpsAlterNote       $08
0008ED8D E701                       	dc.b	smpsNoAttack, $01
0008ED8F E10C                       	smpsAlterNote       $0C
0008ED91 E701                       	dc.b	smpsNoAttack, $01
0008ED93 E10F                       	smpsAlterNote       $0F
0008ED95 E701                       	dc.b	smpsNoAttack, $01
0008ED97 E113                       	smpsAlterNote       $13
0008ED99 E701                       	dc.b	smpsNoAttack, $01
0008ED9B E10F                       	smpsAlterNote       $0F
0008ED9D E701                       	dc.b	smpsNoAttack, $01
0008ED9F E109                       	smpsAlterNote       $09
0008EDA1 E701                       	dc.b	smpsNoAttack, $01
0008EDA3 E108                       	smpsAlterNote       $08
0008EDA5 E701                       	dc.b	smpsNoAttack, $01
0008EDA7 E10C                       	smpsAlterNote       $0C
0008EDA9 E701                       	dc.b	smpsNoAttack, $01
0008EDAB E112                       	smpsAlterNote       $12
0008EDAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDB1 E10F                       	smpsAlterNote       $0F
0008EDB3 E701                       	dc.b	smpsNoAttack, $01
0008EDB5 E109                       	smpsAlterNote       $09
0008EDB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDBB E10F                       	smpsAlterNote       $0F
0008EDBD E701                       	dc.b	smpsNoAttack, $01
0008EDBF E112                       	smpsAlterNote       $12
0008EDC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDC5 E10C                       	smpsAlterNote       $0C
0008EDC7 E701                       	dc.b	smpsNoAttack, $01
0008EDC9 E108                       	smpsAlterNote       $08
0008EDCB E701                       	dc.b	smpsNoAttack, $01
0008EDCD E10C                       	smpsAlterNote       $0C
0008EDCF E701                       	dc.b	smpsNoAttack, $01
0008EDD1 E10F                       	smpsAlterNote       $0F
0008EDD3 E701                       	dc.b	smpsNoAttack, $01
0008EDD5 E113                       	smpsAlterNote       $13
0008EDD7 E701                       	dc.b	smpsNoAttack, $01
0008EDD9 E10F                       	smpsAlterNote       $0F
0008EDDB E701                       	dc.b	smpsNoAttack, $01
0008EDDD E109                       	smpsAlterNote       $09
0008EDDF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EDE5 E601                       	smpsAlterVol        $01
0008EDE7 E10F                       	smpsAlterNote       $0F
0008EDE9 C604                       	dc.b	nA5, $04
0008EDEB E10D                       	smpsAlterNote       $0D
0008EDED C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EDF3 E10B                       	smpsAlterNote       $0B
0008EDF5 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008EDFD E10F                       	smpsAlterNote       $0F
0008EDFF C604 8001                  	dc.b	nA5, $04, nRst, $01
0008EE03 E10D                       	smpsAlterNote       $0D
0008EE05 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008EE0B E10C                       	smpsAlterNote       $0C
0008EE0D C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008EE13 E10A                       	smpsAlterNote       $0A
0008EE15 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008EE19 E110                       	smpsAlterNote       $10
0008EE1B C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EE1F E10F                       	smpsAlterNote       $0F
0008EE21 C604                       	dc.b	nA5, $04
0008EE23 E10D                       	smpsAlterNote       $0D
0008EE25 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008EE31 E109                       	smpsAlterNote       $09
0008EE33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE37 E10F                       	smpsAlterNote       $0F
0008EE39 E701                       	dc.b	smpsNoAttack, $01
0008EE3B E112                       	smpsAlterNote       $12
0008EE3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE41 E10C                       	smpsAlterNote       $0C
0008EE43 E701                       	dc.b	smpsNoAttack, $01
0008EE45 E108                       	smpsAlterNote       $08
0008EE47 E701                       	dc.b	smpsNoAttack, $01
0008EE49 E10C                       	smpsAlterNote       $0C
0008EE4B E701                       	dc.b	smpsNoAttack, $01
0008EE4D E10F                       	smpsAlterNote       $0F
0008EE4F E701                       	dc.b	smpsNoAttack, $01
0008EE51 E113                       	smpsAlterNote       $13
0008EE53 E701                       	dc.b	smpsNoAttack, $01
0008EE55 E10D                       	smpsAlterNote       $0D
0008EE57 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008EE5D E10C                       	smpsAlterNote       $0C
0008EE5F C10D                       	dc.b	nE5, $0D
0008EE61 E109                       	smpsAlterNote       $09
0008EE63 E701                       	dc.b	smpsNoAttack, $01
0008EE65 E105                       	smpsAlterNote       $05
0008EE67 E701                       	dc.b	smpsNoAttack, $01
0008EE69 E106                       	smpsAlterNote       $06
0008EE6B E701                       	dc.b	smpsNoAttack, $01
0008EE6D E10C                       	smpsAlterNote       $0C
0008EE6F E701                       	dc.b	smpsNoAttack, $01
0008EE71 E110                       	smpsAlterNote       $10
0008EE73 E701                       	dc.b	smpsNoAttack, $01
0008EE75 E10C                       	smpsAlterNote       $0C
0008EE77 E701                       	dc.b	smpsNoAttack, $01
0008EE79 E109                       	smpsAlterNote       $09
0008EE7B E701                       	dc.b	smpsNoAttack, $01
0008EE7D E105                       	smpsAlterNote       $05
0008EE7F E701                       	dc.b	smpsNoAttack, $01
0008EE81 E109                       	smpsAlterNote       $09
0008EE83 E701                       	dc.b	smpsNoAttack, $01
0008EE85 E10F                       	smpsAlterNote       $0F
0008EE87 E701                       	dc.b	smpsNoAttack, $01
0008EE89 E110                       	smpsAlterNote       $10
0008EE8B E701                       	dc.b	smpsNoAttack, $01
0008EE8D E10C                       	smpsAlterNote       $0C
0008EE8F E701                       	dc.b	smpsNoAttack, $01
0008EE91 E106                       	smpsAlterNote       $06
0008EE93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE97 E109                       	smpsAlterNote       $09
0008EE99 E701                       	dc.b	smpsNoAttack, $01
0008EE9B E10F                       	smpsAlterNote       $0F
0008EE9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEA1 E109                       	smpsAlterNote       $09
0008EEA3 E701                       	dc.b	smpsNoAttack, $01
0008EEA5 E106                       	smpsAlterNote       $06
0008EEA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEAB E10C                       	smpsAlterNote       $0C
0008EEAD E701                       	dc.b	smpsNoAttack, $01
0008EEAF E110                       	smpsAlterNote       $10
0008EEB1 E701                       	dc.b	smpsNoAttack, $01
0008EEB3 E10F                       	smpsAlterNote       $0F
0008EEB5 E701                       	dc.b	smpsNoAttack, $01
0008EEB7 E109                       	smpsAlterNote       $09
0008EEB9 E701                       	dc.b	smpsNoAttack, $01
0008EEBB E105                       	smpsAlterNote       $05
0008EEBD E701                       	dc.b	smpsNoAttack, $01
0008EEBF E109                       	smpsAlterNote       $09
0008EEC1 E701                       	dc.b	smpsNoAttack, $01
0008EEC3 E10C                       	smpsAlterNote       $0C
0008EEC5 E701                       	dc.b	smpsNoAttack, $01
0008EEC7 E110                       	smpsAlterNote       $10
0008EEC9 E701                       	dc.b	smpsNoAttack, $01
0008EECB E10C                       	smpsAlterNote       $0C
0008EECD E701                       	dc.b	smpsNoAttack, $01
0008EECF E106                       	smpsAlterNote       $06
0008EED1 E701                       	dc.b	smpsNoAttack, $01
0008EED3 E105                       	smpsAlterNote       $05
0008EED5 E701                       	dc.b	smpsNoAttack, $01
0008EED7 E109                       	smpsAlterNote       $09
0008EED9 E701                       	dc.b	smpsNoAttack, $01
0008EEDB E10F                       	smpsAlterNote       $0F
0008EEDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEE1 E10C                       	smpsAlterNote       $0C
0008EEE3 E701                       	dc.b	smpsNoAttack, $01
0008EEE5 E106                       	smpsAlterNote       $06
0008EEE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEEB E10C                       	smpsAlterNote       $0C
0008EEED E701                       	dc.b	smpsNoAttack, $01
0008EEEF E10F                       	smpsAlterNote       $0F
0008EEF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEF5 E109                       	smpsAlterNote       $09
0008EEF7 E701                       	dc.b	smpsNoAttack, $01
0008EEF9 E105                       	smpsAlterNote       $05
0008EEFB E701                       	dc.b	smpsNoAttack, $01
0008EEFD E106                       	smpsAlterNote       $06
0008EEFF E701                       	dc.b	smpsNoAttack, $01
0008EF01 E10C                       	smpsAlterNote       $0C
0008EF03 E701                       	dc.b	smpsNoAttack, $01
0008EF05 E110                       	smpsAlterNote       $10
0008EF07 E701                       	dc.b	smpsNoAttack, $01
0008EF09 E10C                       	smpsAlterNote       $0C
0008EF0B E701                       	dc.b	smpsNoAttack, $01
0008EF0D E109                       	smpsAlterNote       $09
0008EF0F E701                       	dc.b	smpsNoAttack, $01
0008EF11 E105                       	smpsAlterNote       $05
0008EF13 E701                       	dc.b	smpsNoAttack, $01
0008EF15 E109                       	smpsAlterNote       $09
0008EF17 E701                       	dc.b	smpsNoAttack, $01
0008EF19 E10F                       	smpsAlterNote       $0F
0008EF1B E701                       	dc.b	smpsNoAttack, $01
0008EF1D E110                       	smpsAlterNote       $10
0008EF1F E701                       	dc.b	smpsNoAttack, $01
0008EF21 E10C                       	smpsAlterNote       $0C
0008EF23 E701                       	dc.b	smpsNoAttack, $01
0008EF25 E106                       	smpsAlterNote       $06
0008EF27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF2B E109                       	smpsAlterNote       $09
0008EF2D E701                       	dc.b	smpsNoAttack, $01
0008EF2F E10F                       	smpsAlterNote       $0F
0008EF31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF35 E109                       	smpsAlterNote       $09
0008EF37 E701                       	dc.b	smpsNoAttack, $01
0008EF39 E106                       	smpsAlterNote       $06
0008EF3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF3F E10C                       	smpsAlterNote       $0C
0008EF41 E701                       	dc.b	smpsNoAttack, $01
0008EF43 E110                       	smpsAlterNote       $10
0008EF45 E701                       	dc.b	smpsNoAttack, $01
0008EF47 E10F                       	smpsAlterNote       $0F
0008EF49 E701                       	dc.b	smpsNoAttack, $01
0008EF4B E109                       	smpsAlterNote       $09
0008EF4D E701                       	dc.b	smpsNoAttack, $01
0008EF4F E105                       	smpsAlterNote       $05
0008EF51 E701                       	dc.b	smpsNoAttack, $01
0008EF53 E109                       	smpsAlterNote       $09
0008EF55 E701                       	dc.b	smpsNoAttack, $01
0008EF57 E10C                       	smpsAlterNote       $0C
0008EF59 E701                       	dc.b	smpsNoAttack, $01
0008EF5B E110                       	smpsAlterNote       $10
0008EF5D E701                       	dc.b	smpsNoAttack, $01
0008EF5F E10C                       	smpsAlterNote       $0C
0008EF61 E701                       	dc.b	smpsNoAttack, $01
0008EF63 E106                       	smpsAlterNote       $06
0008EF65 E701                       	dc.b	smpsNoAttack, $01
0008EF67 E105                       	smpsAlterNote       $05
0008EF69 E701                       	dc.b	smpsNoAttack, $01
0008EF6B E109                       	smpsAlterNote       $09
0008EF6D E701                       	dc.b	smpsNoAttack, $01
0008EF6F E10F                       	smpsAlterNote       $0F
0008EF71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF75 E109                       	smpsAlterNote       $09
0008EF77 E701                       	dc.b	smpsNoAttack, $01
0008EF79 E106                       	smpsAlterNote       $06
0008EF7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF7F E10C                       	smpsAlterNote       $0C
0008EF81 E701                       	dc.b	smpsNoAttack, $01
0008EF83 E110                       	smpsAlterNote       $10
0008EF85 E701                       	dc.b	smpsNoAttack, $01
0008EF87 E10F                       	smpsAlterNote       $0F
0008EF89 E701                       	dc.b	smpsNoAttack, $01
0008EF8B E109                       	smpsAlterNote       $09
0008EF8D E701                       	dc.b	smpsNoAttack, $01
0008EF8F E105                       	smpsAlterNote       $05
0008EF91 E701                       	dc.b	smpsNoAttack, $01
0008EF93 E109                       	smpsAlterNote       $09
0008EF95 E701                       	dc.b	smpsNoAttack, $01
0008EF97 E10C                       	smpsAlterNote       $0C
0008EF99 E701                       	dc.b	smpsNoAttack, $01
0008EF9B E110                       	smpsAlterNote       $10
0008EF9D E701                       	dc.b	smpsNoAttack, $01
0008EF9F E10C                       	smpsAlterNote       $0C
0008EFA1 E701                       	dc.b	smpsNoAttack, $01
0008EFA3 E106                       	smpsAlterNote       $06
0008EFA5 E701                       	dc.b	smpsNoAttack, $01
0008EFA7 E105                       	smpsAlterNote       $05
0008EFA9 E701                       	dc.b	smpsNoAttack, $01
0008EFAB E109                       	smpsAlterNote       $09
0008EFAD E701                       	dc.b	smpsNoAttack, $01
0008EFAF E10F                       	smpsAlterNote       $0F
0008EFB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFB5 E10C                       	smpsAlterNote       $0C
0008EFB7 E701                       	dc.b	smpsNoAttack, $01
0008EFB9 E106                       	smpsAlterNote       $06
0008EFBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFBF E10C                       	smpsAlterNote       $0C
0008EFC1 E701                       	dc.b	smpsNoAttack, $01
0008EFC3 E10F                       	smpsAlterNote       $0F
0008EFC5 E701                       	dc.b	smpsNoAttack, $01
0008EFC7 E110                       	smpsAlterNote       $10
0008EFC9 8001                       	dc.b	nRst, $01
0008EFCB E10F                       	smpsAlterNote       $0F
0008EFCD C604                       	dc.b	nA5, $04
0008EFCF E10D                       	smpsAlterNote       $0D
0008EFD1 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EFD7 E10B                       	smpsAlterNote       $0B
0008EFD9 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008EFDF E10F                       	smpsAlterNote       $0F
0008EFE1 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008EFE5 E10D                       	smpsAlterNote       $0D
0008EFE7 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008EFED E10C                       	smpsAlterNote       $0C
0008EFEF C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008EFF5 E10A                       	smpsAlterNote       $0A
0008EFF7 C904                       	dc.b	nC6, $04
0008EFF9 E110                       	smpsAlterNote       $10
0008EFFB C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EFFF E10F                       	smpsAlterNote       $0F
0008F001 C604                       	dc.b	nA5, $04
0008F003 E10D                       	smpsAlterNote       $0D
0008F005 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008F011 E109                       	smpsAlterNote       $09
0008F013 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F017 E10F                       	smpsAlterNote       $0F
0008F019 E701                       	dc.b	smpsNoAttack, $01
0008F01B E112                       	smpsAlterNote       $12
0008F01D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F021 E10C                       	smpsAlterNote       $0C
0008F023 E701                       	dc.b	smpsNoAttack, $01
0008F025 E108                       	smpsAlterNote       $08
0008F027 E701                       	dc.b	smpsNoAttack, $01
0008F029 E109                       	smpsAlterNote       $09
0008F02B E701                       	dc.b	smpsNoAttack, $01
0008F02D E10F                       	smpsAlterNote       $0F
0008F02F E701                       	dc.b	smpsNoAttack, $01
0008F031 E113                       	smpsAlterNote       $13
0008F033 E701                       	dc.b	smpsNoAttack, $01
0008F035 E10D                       	smpsAlterNote       $0D
0008F037 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008F03D E10C                       	smpsAlterNote       $0C
0008F03F C10D                       	dc.b	nE5, $0D
0008F041 E109                       	smpsAlterNote       $09
0008F043 E701                       	dc.b	smpsNoAttack, $01
0008F045 E106                       	smpsAlterNote       $06
0008F047 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F04B E10C                       	smpsAlterNote       $0C
0008F04D E701                       	dc.b	smpsNoAttack, $01
0008F04F E110                       	smpsAlterNote       $10
0008F051 E701                       	dc.b	smpsNoAttack, $01
0008F053 E10F                       	smpsAlterNote       $0F
0008F055 E701                       	dc.b	smpsNoAttack, $01
0008F057 E109                       	smpsAlterNote       $09
0008F059 E701                       	dc.b	smpsNoAttack, $01
0008F05B E105                       	smpsAlterNote       $05
0008F05D E701                       	dc.b	smpsNoAttack, $01
0008F05F E109                       	smpsAlterNote       $09
0008F061 E701                       	dc.b	smpsNoAttack, $01
0008F063 E10C                       	smpsAlterNote       $0C
0008F065 E701                       	dc.b	smpsNoAttack, $01
0008F067 E110                       	smpsAlterNote       $10
0008F069 E701                       	dc.b	smpsNoAttack, $01
0008F06B E10C                       	smpsAlterNote       $0C
0008F06D E701                       	dc.b	smpsNoAttack, $01
0008F06F E106                       	smpsAlterNote       $06
0008F071 E701                       	dc.b	smpsNoAttack, $01
0008F073 E105                       	smpsAlterNote       $05
0008F075 E701                       	dc.b	smpsNoAttack, $01
0008F077 E109                       	smpsAlterNote       $09
0008F079 E701                       	dc.b	smpsNoAttack, $01
0008F07B E10F                       	smpsAlterNote       $0F
0008F07D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F081 E10C                       	smpsAlterNote       $0C
0008F083 E701                       	dc.b	smpsNoAttack, $01
0008F085 E106                       	smpsAlterNote       $06
0008F087 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F08B E10C                       	smpsAlterNote       $0C
0008F08D E701                       	dc.b	smpsNoAttack, $01
0008F08F E10F                       	smpsAlterNote       $0F
0008F091 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F095 E109                       	smpsAlterNote       $09
0008F097 E701                       	dc.b	smpsNoAttack, $01
0008F099 E105                       	smpsAlterNote       $05
0008F09B E701                       	dc.b	smpsNoAttack, $01
0008F09D E106                       	smpsAlterNote       $06
0008F09F E701                       	dc.b	smpsNoAttack, $01
0008F0A1 E10C                       	smpsAlterNote       $0C
0008F0A3 E701                       	dc.b	smpsNoAttack, $01
0008F0A5 E110                       	smpsAlterNote       $10
0008F0A7 E701                       	dc.b	smpsNoAttack, $01
0008F0A9 E10C                       	smpsAlterNote       $0C
0008F0AB E701                       	dc.b	smpsNoAttack, $01
0008F0AD E109                       	smpsAlterNote       $09
0008F0AF E701                       	dc.b	smpsNoAttack, $01
0008F0B1 E105                       	smpsAlterNote       $05
0008F0B3 E701                       	dc.b	smpsNoAttack, $01
0008F0B5 E109                       	smpsAlterNote       $09
0008F0B7 E701                       	dc.b	smpsNoAttack, $01
0008F0B9 E10F                       	smpsAlterNote       $0F
0008F0BB E701                       	dc.b	smpsNoAttack, $01
0008F0BD E110                       	smpsAlterNote       $10
0008F0BF E701                       	dc.b	smpsNoAttack, $01
0008F0C1 E10C                       	smpsAlterNote       $0C
0008F0C3 E701                       	dc.b	smpsNoAttack, $01
0008F0C5 E106                       	smpsAlterNote       $06
0008F0C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0CB E109                       	smpsAlterNote       $09
0008F0CD E701                       	dc.b	smpsNoAttack, $01
0008F0CF E10F                       	smpsAlterNote       $0F
0008F0D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0D5 E109                       	smpsAlterNote       $09
0008F0D7 E701                       	dc.b	smpsNoAttack, $01
0008F0D9 E106                       	smpsAlterNote       $06
0008F0DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0DF E10C                       	smpsAlterNote       $0C
0008F0E1 E701                       	dc.b	smpsNoAttack, $01
0008F0E3 E110                       	smpsAlterNote       $10
0008F0E5 E701                       	dc.b	smpsNoAttack, $01
0008F0E7 E10F                       	smpsAlterNote       $0F
0008F0E9 E701                       	dc.b	smpsNoAttack, $01
0008F0EB E109                       	smpsAlterNote       $09
0008F0ED E701                       	dc.b	smpsNoAttack, $01
0008F0EF E105                       	smpsAlterNote       $05
0008F0F1 E701                       	dc.b	smpsNoAttack, $01
0008F0F3 E109                       	smpsAlterNote       $09
0008F0F5 E701                       	dc.b	smpsNoAttack, $01
0008F0F7 E10F                       	smpsAlterNote       $0F
0008F0F9 E701                       	dc.b	smpsNoAttack, $01
0008F0FB E110                       	smpsAlterNote       $10
0008F0FD E701                       	dc.b	smpsNoAttack, $01
0008F0FF E10C                       	smpsAlterNote       $0C
0008F101 E701                       	dc.b	smpsNoAttack, $01
0008F103 E106                       	smpsAlterNote       $06
0008F105 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F109 E109                       	smpsAlterNote       $09
0008F10B E701                       	dc.b	smpsNoAttack, $01
0008F10D E10F                       	smpsAlterNote       $0F
0008F10F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F113 E109                       	smpsAlterNote       $09
0008F115 E701                       	dc.b	smpsNoAttack, $01
0008F117 E106                       	smpsAlterNote       $06
0008F119 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F11D E10C                       	smpsAlterNote       $0C
0008F11F E701                       	dc.b	smpsNoAttack, $01
0008F121 E110                       	smpsAlterNote       $10
0008F123 E701                       	dc.b	smpsNoAttack, $01
0008F125 E10F                       	smpsAlterNote       $0F
0008F127 E701                       	dc.b	smpsNoAttack, $01
0008F129 E109                       	smpsAlterNote       $09
0008F12B E701                       	dc.b	smpsNoAttack, $01
0008F12D E105                       	smpsAlterNote       $05
0008F12F E701                       	dc.b	smpsNoAttack, $01
0008F131 E109                       	smpsAlterNote       $09
0008F133 E701                       	dc.b	smpsNoAttack, $01
0008F135 E10C                       	smpsAlterNote       $0C
0008F137 E701                       	dc.b	smpsNoAttack, $01
0008F139 E110                       	smpsAlterNote       $10
0008F13B E701                       	dc.b	smpsNoAttack, $01
0008F13D E10C                       	smpsAlterNote       $0C
0008F13F E701                       	dc.b	smpsNoAttack, $01
0008F141 E106                       	smpsAlterNote       $06
0008F143 E701                       	dc.b	smpsNoAttack, $01
0008F145 E105                       	smpsAlterNote       $05
0008F147 E701                       	dc.b	smpsNoAttack, $01
0008F149 E109                       	smpsAlterNote       $09
0008F14B E701                       	dc.b	smpsNoAttack, $01
0008F14D E10F                       	smpsAlterNote       $0F
0008F14F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F153 E10C                       	smpsAlterNote       $0C
0008F155 E701                       	dc.b	smpsNoAttack, $01
0008F157 E106                       	smpsAlterNote       $06
0008F159 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F15D E10C                       	smpsAlterNote       $0C
0008F15F E701                       	dc.b	smpsNoAttack, $01
0008F161 E10F                       	smpsAlterNote       $0F
0008F163 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F167 E109                       	smpsAlterNote       $09
0008F169 E701                       	dc.b	smpsNoAttack, $01
0008F16B E105                       	smpsAlterNote       $05
0008F16D E701                       	dc.b	smpsNoAttack, $01
0008F16F E106                       	smpsAlterNote       $06
0008F171 E701                       	dc.b	smpsNoAttack, $01
0008F173 E10C                       	smpsAlterNote       $0C
0008F175 E701                       	dc.b	smpsNoAttack, $01
0008F177 E110                       	smpsAlterNote       $10
0008F179 E701                       	dc.b	smpsNoAttack, $01
0008F17B E10C                       	smpsAlterNote       $0C
0008F17D E701                       	dc.b	smpsNoAttack, $01
0008F17F E109                       	smpsAlterNote       $09
0008F181 E701                       	dc.b	smpsNoAttack, $01
0008F183 E105                       	smpsAlterNote       $05
0008F185 E701                       	dc.b	smpsNoAttack, $01
0008F187 E109                       	smpsAlterNote       $09
0008F189 E701                       	dc.b	smpsNoAttack, $01
0008F18B E10F                       	smpsAlterNote       $0F
0008F18D E701                       	dc.b	smpsNoAttack, $01
0008F18F E110                       	smpsAlterNote       $10
0008F191 E701                       	dc.b	smpsNoAttack, $01
0008F193 E10C                       	smpsAlterNote       $0C
0008F195 E701                       	dc.b	smpsNoAttack, $01
0008F197 E106                       	smpsAlterNote       $06
0008F199 E701                       	dc.b	smpsNoAttack, $01
0008F19B E10B                       	smpsAlterNote       $0B
0008F19D BF02                       	dc.b	nD5, $02
0008F19F E10C                       	smpsAlterNote       $0C
0008F1A1 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008F1A7 E109                       	smpsAlterNote       $09
0008F1A9 E701                       	dc.b	smpsNoAttack, $01
0008F1AB E105                       	smpsAlterNote       $05
0008F1AD E701                       	dc.b	smpsNoAttack, $01
0008F1AF E109                       	smpsAlterNote       $09
0008F1B1 E701                       	dc.b	smpsNoAttack, $01
0008F1B3 E10F                       	smpsAlterNote       $0F
0008F1B5 E701                       	dc.b	smpsNoAttack, $01
0008F1B7 E110                       	smpsAlterNote       $10
0008F1B9 E701                       	dc.b	smpsNoAttack, $01
0008F1BB E10C                       	smpsAlterNote       $0C
0008F1BD E701                       	dc.b	smpsNoAttack, $01
0008F1BF E106                       	smpsAlterNote       $06
0008F1C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1C5 E109                       	smpsAlterNote       $09
0008F1C7 E701                       	dc.b	smpsNoAttack, $01
0008F1C9 E10F                       	smpsAlterNote       $0F
0008F1CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1CF E109                       	smpsAlterNote       $09
0008F1D1 E701                       	dc.b	smpsNoAttack, $01
0008F1D3 E106                       	smpsAlterNote       $06
0008F1D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1D9 E10C                       	smpsAlterNote       $0C
0008F1DB E701                       	dc.b	smpsNoAttack, $01
0008F1DD E110                       	smpsAlterNote       $10
0008F1DF E701                       	dc.b	smpsNoAttack, $01
0008F1E1 E10F                       	smpsAlterNote       $0F
0008F1E3 E701                       	dc.b	smpsNoAttack, $01
0008F1E5 E109                       	smpsAlterNote       $09
0008F1E7 E701                       	dc.b	smpsNoAttack, $01
0008F1E9 E105                       	smpsAlterNote       $05
0008F1EB E701                       	dc.b	smpsNoAttack, $01
0008F1ED E109                       	smpsAlterNote       $09
0008F1EF E701                       	dc.b	smpsNoAttack, $01
0008F1F1 E10C                       	smpsAlterNote       $0C
0008F1F3 E701                       	dc.b	smpsNoAttack, $01
0008F1F5 E110                       	smpsAlterNote       $10
0008F1F7 E701                       	dc.b	smpsNoAttack, $01
0008F1F9 E10C                       	smpsAlterNote       $0C
0008F1FB E701                       	dc.b	smpsNoAttack, $01
0008F1FD E106                       	smpsAlterNote       $06
0008F1FF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F203 E10D                       	smpsAlterNote       $0D
0008F205 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008F20D E10C                       	smpsAlterNote       $0C
0008F20F C10D                       	dc.b	nE5, $0D
0008F211 E106                       	smpsAlterNote       $06
0008F213 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F217 E109                       	smpsAlterNote       $09
0008F219 E701                       	dc.b	smpsNoAttack, $01
0008F21B E10F                       	smpsAlterNote       $0F
0008F21D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F221 E109                       	smpsAlterNote       $09
0008F223 E701                       	dc.b	smpsNoAttack, $01
0008F225 E106                       	smpsAlterNote       $06
0008F227 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F22B E10C                       	smpsAlterNote       $0C
0008F22D E701                       	dc.b	smpsNoAttack, $01
0008F22F E110                       	smpsAlterNote       $10
0008F231 E701                       	dc.b	smpsNoAttack, $01
0008F233 E10F                       	smpsAlterNote       $0F
0008F235 E701                       	dc.b	smpsNoAttack, $01
0008F237 E109                       	smpsAlterNote       $09
0008F239 E701                       	dc.b	smpsNoAttack, $01
0008F23B E105                       	smpsAlterNote       $05
0008F23D E701                       	dc.b	smpsNoAttack, $01
0008F23F E106                       	smpsAlterNote       $06
0008F241 800F                       	dc.b	nRst, $0F
0008F245 E6FF                       	smpsAlterVol        $FF
0008F247 E10F                       	smpsAlterNote       $0F
0008F249 BA01                       	dc.b	nA4, $01
0008F24B E110                       	smpsAlterNote       $10
0008F24D BB02                       	dc.b	nBb4, $02
0008F24F E10F                       	smpsAlterNote       $0F
0008F251 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008F257 E10B                       	smpsAlterNote       $0B
0008F259 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008F25D E10C                       	smpsAlterNote       $0C
0008F25F C103                       	dc.b	nE5, $03
0008F261 E10D                       	smpsAlterNote       $0D
0008F263 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008F26D E10B                       	smpsAlterNote       $0B
0008F26F BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008F273 E104                       	smpsAlterNote       $04
0008F275 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F279 E10A                       	smpsAlterNote       $0A
0008F27B E701                       	dc.b	smpsNoAttack, $01
0008F27D E10D                       	smpsAlterNote       $0D
0008F27F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F283 E107                       	smpsAlterNote       $07
0008F285 E701                       	dc.b	smpsNoAttack, $01
0008F287 E104                       	smpsAlterNote       $04
0008F289 8001                       	dc.b	nRst, $01
0008F28B E110                       	smpsAlterNote       $10
0008F28D C703                       	dc.b	nBb5, $03
0008F28F E10F                       	smpsAlterNote       $0F
0008F291 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008F295 E10D                       	smpsAlterNote       $0D
0008F297 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008F29B E10C                       	smpsAlterNote       $0C
0008F29D E701                       	dc.b	smpsNoAttack, $01
0008F29F E108                       	smpsAlterNote       $08
0008F2A1 E701                       	dc.b	smpsNoAttack, $01
0008F2A3 E109                       	smpsAlterNote       $09
0008F2A5 E701                       	dc.b	smpsNoAttack, $01
0008F2A7 E10F                       	smpsAlterNote       $0F
0008F2A9 E701                       	dc.b	smpsNoAttack, $01
0008F2AB E113                       	smpsAlterNote       $13
0008F2AD E701                       	dc.b	smpsNoAttack, $01
0008F2AF E10F                       	smpsAlterNote       $0F
0008F2B1 E701                       	dc.b	smpsNoAttack, $01
0008F2B3 E10C                       	smpsAlterNote       $0C
0008F2B5 E701                       	dc.b	smpsNoAttack, $01
0008F2B7 E108                       	smpsAlterNote       $08
0008F2B9 E701                       	dc.b	smpsNoAttack, $01
0008F2BB E10C                       	smpsAlterNote       $0C
0008F2BD E701                       	dc.b	smpsNoAttack, $01
0008F2BF E112                       	smpsAlterNote       $12
0008F2C1 E701                       	dc.b	smpsNoAttack, $01
0008F2C3 E113                       	smpsAlterNote       $13
0008F2C5 E701                       	dc.b	smpsNoAttack, $01
0008F2C7 E10F                       	smpsAlterNote       $0F
0008F2C9 E701                       	dc.b	smpsNoAttack, $01
0008F2CB E109                       	smpsAlterNote       $09
0008F2CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2D1 E10C                       	smpsAlterNote       $0C
0008F2D3 E701                       	dc.b	smpsNoAttack, $01
0008F2D5 E112                       	smpsAlterNote       $12
0008F2D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2DB E10C                       	smpsAlterNote       $0C
0008F2DD E701                       	dc.b	smpsNoAttack, $01
0008F2DF E109                       	smpsAlterNote       $09
0008F2E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2E5 E10F                       	smpsAlterNote       $0F
0008F2E7 E701                       	dc.b	smpsNoAttack, $01
0008F2E9 E113                       	smpsAlterNote       $13
0008F2EB E701                       	dc.b	smpsNoAttack, $01
0008F2ED E112                       	smpsAlterNote       $12
0008F2EF E701                       	dc.b	smpsNoAttack, $01
0008F2F1 E10C                       	smpsAlterNote       $0C
0008F2F3 E701                       	dc.b	smpsNoAttack, $01
0008F2F5 E108                       	smpsAlterNote       $08
0008F2F7 E701                       	dc.b	smpsNoAttack, $01
0008F2F9 E10C                       	smpsAlterNote       $0C
0008F2FB E701                       	dc.b	smpsNoAttack, $01
0008F2FD E10F                       	smpsAlterNote       $0F
0008F2FF E701                       	dc.b	smpsNoAttack, $01
0008F301 E113                       	smpsAlterNote       $13
0008F303 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008F307 E10B                       	smpsAlterNote       $0B
0008F309 BF03                       	dc.b	nD5, $03
0008F30B E10C                       	smpsAlterNote       $0C
0008F30D C103 8001                  	dc.b	nE5, $03, nRst, $01
0008F311 E10D                       	smpsAlterNote       $0D
0008F313 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008F31D E10B                       	smpsAlterNote       $0B
0008F31F BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008F32B E110                       	smpsAlterNote       $10
0008F32D C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F331 E10F                       	smpsAlterNote       $0F
0008F333 C604                       	dc.b	nA5, $04
0008F335 E10D                       	smpsAlterNote       $0D
0008F337 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008F33D E109                       	smpsAlterNote       $09
0008F33F E701                       	dc.b	smpsNoAttack, $01
0008F341 E108                       	smpsAlterNote       $08
0008F343 E701                       	dc.b	smpsNoAttack, $01
0008F345 E10C                       	smpsAlterNote       $0C
0008F347 E701                       	dc.b	smpsNoAttack, $01
0008F349 E112                       	smpsAlterNote       $12
0008F34B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F34F E10F                       	smpsAlterNote       $0F
0008F351 E701                       	dc.b	smpsNoAttack, $01
0008F353 E109                       	smpsAlterNote       $09
0008F355 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F359 E10F                       	smpsAlterNote       $0F
0008F35B E701                       	dc.b	smpsNoAttack, $01
0008F35D E112                       	smpsAlterNote       $12
0008F35F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F363 E10C                       	smpsAlterNote       $0C
0008F365 E701                       	dc.b	smpsNoAttack, $01
0008F367 E108                       	smpsAlterNote       $08
0008F369 E701                       	dc.b	smpsNoAttack, $01
0008F36B E109                       	smpsAlterNote       $09
0008F36D E701                       	dc.b	smpsNoAttack, $01
0008F36F E10F                       	smpsAlterNote       $0F
0008F371 E701                       	dc.b	smpsNoAttack, $01
0008F373 E113                       	smpsAlterNote       $13
0008F375 E701                       	dc.b	smpsNoAttack, $01
0008F377 E10F                       	smpsAlterNote       $0F
0008F379 E701                       	dc.b	smpsNoAttack, $01
0008F37B E10C                       	smpsAlterNote       $0C
0008F37D E701                       	dc.b	smpsNoAttack, $01
0008F37F E108                       	smpsAlterNote       $08
0008F381 E701                       	dc.b	smpsNoAttack, $01
0008F383 E10C                       	smpsAlterNote       $0C
0008F385 E701                       	dc.b	smpsNoAttack, $01
0008F387 E112                       	smpsAlterNote       $12
0008F389 E701                       	dc.b	smpsNoAttack, $01
0008F38B E113                       	smpsAlterNote       $13
0008F38D E701                       	dc.b	smpsNoAttack, $01
0008F38F E10F                       	smpsAlterNote       $0F
0008F391 E701                       	dc.b	smpsNoAttack, $01
0008F393 E109                       	smpsAlterNote       $09
0008F395 E701                       	dc.b	smpsNoAttack, $01
0008F397 E10D                       	smpsAlterNote       $0D
0008F399 C402                       	dc.b	nG5, $02
0008F39B E10F                       	smpsAlterNote       $0F
0008F39D C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008F3A7 E10D                       	smpsAlterNote       $0D
0008F3A9 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F3AF E10B                       	smpsAlterNote       $0B
0008F3B1 BF0D                       	dc.b	nD5, $0D
0008F3B3 E108                       	smpsAlterNote       $08
0008F3B5 E701                       	dc.b	smpsNoAttack, $01
0008F3B7 E104                       	smpsAlterNote       $04
0008F3B9 E701                       	dc.b	smpsNoAttack, $01
0008F3BB E105                       	smpsAlterNote       $05
0008F3BD E701                       	dc.b	smpsNoAttack, $01
0008F3BF E10B                       	smpsAlterNote       $0B
0008F3C1 E701                       	dc.b	smpsNoAttack, $01
0008F3C3 E10F                       	smpsAlterNote       $0F
0008F3C5 E701                       	dc.b	smpsNoAttack, $01
0008F3C7 E10B                       	smpsAlterNote       $0B
0008F3C9 E701                       	dc.b	smpsNoAttack, $01
0008F3CB E108                       	smpsAlterNote       $08
0008F3CD E701                       	dc.b	smpsNoAttack, $01
0008F3CF E104                       	smpsAlterNote       $04
0008F3D1 E701                       	dc.b	smpsNoAttack, $01
0008F3D3 E108                       	smpsAlterNote       $08
0008F3D5 E701                       	dc.b	smpsNoAttack, $01
0008F3D7 E10E                       	smpsAlterNote       $0E
0008F3D9 E701                       	dc.b	smpsNoAttack, $01
0008F3DB E10F                       	smpsAlterNote       $0F
0008F3DD E701                       	dc.b	smpsNoAttack, $01
0008F3DF E10C                       	smpsAlterNote       $0C
0008F3E1 C101                       	dc.b	nE5, $01
0008F3E3 E10D                       	smpsAlterNote       $0D
0008F3E5 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008F3ED E10F                       	smpsAlterNote       $0F
0008F3EF C607                       	dc.b	nA5, $07
0008F3F1 E10C                       	smpsAlterNote       $0C
0008F3F3 CD07                       	dc.b	nE6, $07
0008F3F5 E10D                       	smpsAlterNote       $0D
0008F3F7 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008F3FB E10C                       	smpsAlterNote       $0C
0008F3FD CD03                       	dc.b	nE6, $03
0008F3FF E10A                       	smpsAlterNote       $0A
0008F401 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008F405 E10D                       	smpsAlterNote       $0D
0008F407 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008F40D E10A                       	smpsAlterNote       $0A
0008F40F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F413 E110                       	smpsAlterNote       $10
0008F415 E701                       	dc.b	smpsNoAttack, $01
0008F417 E114                       	smpsAlterNote       $14
0008F419 E701                       	dc.b	smpsNoAttack, $01
0008F41B E113                       	smpsAlterNote       $13
0008F41D E701                       	dc.b	smpsNoAttack, $01
0008F41F E10D                       	smpsAlterNote       $0D
0008F421 E701                       	dc.b	smpsNoAttack, $01
0008F423 E109                       	smpsAlterNote       $09
0008F425 E701                       	dc.b	smpsNoAttack, $01
0008F427 E10D                       	smpsAlterNote       $0D
0008F429 E701                       	dc.b	smpsNoAttack, $01
0008F42B E110                       	smpsAlterNote       $10
0008F42D E701                       	dc.b	smpsNoAttack, $01
0008F42F E114                       	smpsAlterNote       $14
0008F431 E701                       	dc.b	smpsNoAttack, $01
0008F433 E10F                       	smpsAlterNote       $0F
0008F435 C607                       	dc.b	nA5, $07
0008F437 E10D                       	smpsAlterNote       $0D
0008F439 C40D                       	dc.b	nG5, $0D
0008F43B E10A                       	smpsAlterNote       $0A
0008F43D E701                       	dc.b	smpsNoAttack, $01
0008F43F E106                       	smpsAlterNote       $06
0008F441 E701                       	dc.b	smpsNoAttack, $01
0008F443 E10A                       	smpsAlterNote       $0A
0008F445 E701                       	dc.b	smpsNoAttack, $01
0008F447 E10D                       	smpsAlterNote       $0D
0008F449 E701                       	dc.b	smpsNoAttack, $01
0008F44B E111                       	smpsAlterNote       $11
0008F44D E701                       	dc.b	smpsNoAttack, $01
0008F44F E10D                       	smpsAlterNote       $0D
0008F451 E701                       	dc.b	smpsNoAttack, $01
0008F453 E107                       	smpsAlterNote       $07
0008F455 E701                       	dc.b	smpsNoAttack, $01
0008F457 E106                       	smpsAlterNote       $06
0008F459 E701                       	dc.b	smpsNoAttack, $01
0008F45B E10A                       	smpsAlterNote       $0A
0008F45D E701                       	dc.b	smpsNoAttack, $01
0008F45F E110                       	smpsAlterNote       $10
0008F461 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F465 E10D                       	smpsAlterNote       $0D
0008F467 E701                       	dc.b	smpsNoAttack, $01
0008F469 E107                       	smpsAlterNote       $07
0008F46B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F46F E10F                       	smpsAlterNote       $0F
0008F471 C60E                       	dc.b	nA5, $0E
0008F473 E109                       	smpsAlterNote       $09
0008F475 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F479 E10F                       	smpsAlterNote       $0F
0008F47B E701                       	dc.b	smpsNoAttack, $01
0008F47D E112                       	smpsAlterNote       $12
0008F47F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F483 E10C                       	smpsAlterNote       $0C
0008F485 E701                       	dc.b	smpsNoAttack, $01
0008F487 E108                       	smpsAlterNote       $08
0008F489 E701                       	dc.b	smpsNoAttack, $01
0008F48B E109                       	smpsAlterNote       $09
0008F48D E701                       	dc.b	smpsNoAttack, $01
0008F48F E10F                       	smpsAlterNote       $0F
0008F491 E701                       	dc.b	smpsNoAttack, $01
0008F493 E113                       	smpsAlterNote       $13
0008F495 E701                       	dc.b	smpsNoAttack, $01
0008F497 E10F                       	smpsAlterNote       $0F
0008F499 E701                       	dc.b	smpsNoAttack, $01
0008F49B E10C                       	smpsAlterNote       $0C
0008F49D E701                       	dc.b	smpsNoAttack, $01
0008F49F E108                       	smpsAlterNote       $08
0008F4A1 E701                       	dc.b	smpsNoAttack, $01
0008F4A3 E109                       	smpsAlterNote       $09
0008F4A5 8001                       	dc.b	nRst, $01
0008F4A7 E110                       	smpsAlterNote       $10
0008F4A9 C70D                       	dc.b	nBb5, $0D
0008F4AB E10D                       	smpsAlterNote       $0D
0008F4AD E701                       	dc.b	smpsNoAttack, $01
0008F4AF E109                       	smpsAlterNote       $09
0008F4B1 E701                       	dc.b	smpsNoAttack, $01
0008F4B3 E10D                       	smpsAlterNote       $0D
0008F4B5 E701                       	dc.b	smpsNoAttack, $01
0008F4B7 E113                       	smpsAlterNote       $13
0008F4B9 E701                       	dc.b	smpsNoAttack, $01
0008F4BB E114                       	smpsAlterNote       $14
0008F4BD E701                       	dc.b	smpsNoAttack, $01
0008F4BF E110                       	smpsAlterNote       $10
0008F4C1 E701                       	dc.b	smpsNoAttack, $01
0008F4C3 E10A                       	smpsAlterNote       $0A
0008F4C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4C9 E10D                       	smpsAlterNote       $0D
0008F4CB E701                       	dc.b	smpsNoAttack, $01
0008F4CD E113                       	smpsAlterNote       $13
0008F4CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4D3 E10D                       	smpsAlterNote       $0D
0008F4D5 E701                       	dc.b	smpsNoAttack, $01
0008F4D7 E10A                       	smpsAlterNote       $0A
0008F4D9 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008F4E3 E10B                       	smpsAlterNote       $0B
0008F4E5 8001                       	dc.b	nRst, $01
0008F4E7 E10C                       	smpsAlterNote       $0C
0008F4E9 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008F4ED E10B                       	smpsAlterNote       $0B
0008F4EF CB0D                       	dc.b	nD6, $0D
0008F4F1 E105                       	smpsAlterNote       $05
0008F4F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4F7 E108                       	smpsAlterNote       $08
0008F4F9 E701                       	dc.b	smpsNoAttack, $01
0008F4FB E10E                       	smpsAlterNote       $0E
0008F4FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F501 E108                       	smpsAlterNote       $08
0008F503 E701                       	dc.b	smpsNoAttack, $01
0008F505 E105                       	smpsAlterNote       $05
0008F507 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F50B E10B                       	smpsAlterNote       $0B
0008F50D E701                       	dc.b	smpsNoAttack, $01
0008F50F E10F                       	smpsAlterNote       $0F
0008F511 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F515 E10C                       	smpsAlterNote       $0C
0008F517 CC0D                       	dc.b	nEb6, $0D
0008F519 E106                       	smpsAlterNote       $06
0008F51B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F51F E109                       	smpsAlterNote       $09
0008F521 E701                       	dc.b	smpsNoAttack, $01
0008F523 E10C                       	smpsAlterNote       $0C
0008F525 8001                       	dc.b	nRst, $01
0008F527 E10A                       	smpsAlterNote       $0A
0008F529 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008F535 CB0E                       	dc.b	nD6, $0E
0008F537 E105                       	smpsAlterNote       $05
0008F539 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F53D E10B                       	smpsAlterNote       $0B
0008F53F E701                       	dc.b	smpsNoAttack, $01
0008F541 E10E                       	smpsAlterNote       $0E
0008F543 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F547 E108                       	smpsAlterNote       $08
0008F549 E701                       	dc.b	smpsNoAttack, $01
0008F54B E104                       	smpsAlterNote       $04
0008F54D E701                       	dc.b	smpsNoAttack, $01
0008F54F E105                       	smpsAlterNote       $05
0008F551 E701                       	dc.b	smpsNoAttack, $01
0008F553 E10B                       	smpsAlterNote       $0B
0008F555 E701                       	dc.b	smpsNoAttack, $01
0008F557 E10F                       	smpsAlterNote       $0F
0008F559 E701                       	dc.b	smpsNoAttack, $01
0008F55B E10D                       	smpsAlterNote       $0D
0008F55D CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008F561 E10C                       	smpsAlterNote       $0C
0008F563 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008F567 E10A                       	smpsAlterNote       $0A
0008F569 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008F575 CB0D                       	dc.b	nD6, $0D
0008F577 E108                       	smpsAlterNote       $08
0008F579 E701                       	dc.b	smpsNoAttack, $01
0008F57B E104                       	smpsAlterNote       $04
0008F57D E701                       	dc.b	smpsNoAttack, $01
0008F57F E105                       	smpsAlterNote       $05
0008F581 E701                       	dc.b	smpsNoAttack, $01
0008F583 E10B                       	smpsAlterNote       $0B
0008F585 E701                       	dc.b	smpsNoAttack, $01
0008F587 E10F                       	smpsAlterNote       $0F
0008F589 E701                       	dc.b	smpsNoAttack, $01
0008F58B E10B                       	smpsAlterNote       $0B
0008F58D E701                       	dc.b	smpsNoAttack, $01
0008F58F E108                       	smpsAlterNote       $08
0008F591 E701                       	dc.b	smpsNoAttack, $01
0008F593 E104                       	smpsAlterNote       $04
0008F595 E701                       	dc.b	smpsNoAttack, $01
0008F597 E108                       	smpsAlterNote       $08
0008F599 E701                       	dc.b	smpsNoAttack, $01
0008F59B E10E                       	smpsAlterNote       $0E
0008F59D E701                       	dc.b	smpsNoAttack, $01
0008F59F E10F                       	smpsAlterNote       $0F
0008F5A1 E701                       	dc.b	smpsNoAttack, $01
0008F5A3 E10C                       	smpsAlterNote       $0C
0008F5A5 CC0D                       	dc.b	nEb6, $0D
0008F5A7 E109                       	smpsAlterNote       $09
0008F5A9 E701                       	dc.b	smpsNoAttack, $01
0008F5AB E105                       	smpsAlterNote       $05
0008F5AD E701                       	dc.b	smpsNoAttack, $01
0008F5AF E106                       	smpsAlterNote       $06
0008F5B1 E701                       	dc.b	smpsNoAttack, $01
0008F5B3 E10C                       	smpsAlterNote       $0C
0008F5B5 E701                       	dc.b	smpsNoAttack, $01
0008F5B7 E10A                       	smpsAlterNote       $0A
0008F5B9 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008F5C5 CB0D                       	dc.b	nD6, $0D
0008F5C7 E108                       	smpsAlterNote       $08
0008F5C9 E701                       	dc.b	smpsNoAttack, $01
0008F5CB E104                       	smpsAlterNote       $04
0008F5CD E701                       	dc.b	smpsNoAttack, $01
0008F5CF E108                       	smpsAlterNote       $08
0008F5D1 E701                       	dc.b	smpsNoAttack, $01
0008F5D3 E10B                       	smpsAlterNote       $0B
0008F5D5 E701                       	dc.b	smpsNoAttack, $01
0008F5D7 E10F                       	smpsAlterNote       $0F
0008F5D9 E701                       	dc.b	smpsNoAttack, $01
0008F5DB E10B                       	smpsAlterNote       $0B
0008F5DD E701                       	dc.b	smpsNoAttack, $01
0008F5DF E105                       	smpsAlterNote       $05
0008F5E1 E701                       	dc.b	smpsNoAttack, $01
0008F5E3 E104                       	smpsAlterNote       $04
0008F5E5 E701                       	dc.b	smpsNoAttack, $01
0008F5E7 E108                       	smpsAlterNote       $08
0008F5E9 E701                       	dc.b	smpsNoAttack, $01
0008F5EB E10E                       	smpsAlterNote       $0E
0008F5ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5F1 E10B                       	smpsAlterNote       $0B
0008F5F3 E701                       	dc.b	smpsNoAttack, $01
0008F5F5 E105                       	smpsAlterNote       $05
0008F5F7 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008F5FF 03                         	dc.b	$03
0008F600 E601                       	smpsAlterVol        $01
0008F602 F6F1 D1                    	smpsJump            music84_Jump01
0008F605                            
0008F605                            ; FM5 Data
0008F605                            music84_FM5:
0008F607 E080                       	smpsPan             panLeft, $00
0008F609 8003                       	dc.b	nRst, $03
0008F60B E10D                       	smpsAlterNote       $0D
0008F60D C203 8008                  	dc.b	nF5, $03, nRst, $08
0008F611 E10C                       	smpsAlterNote       $0C
0008F613 C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008F617 E10F                       	smpsAlterNote       $0F
0008F619 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008F61F E6FE                       	smpsAlterVol        $FE
0008F621 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008F627 E10D                       	smpsAlterNote       $0D
0008F629 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008F62F E10C                       	smpsAlterNote       $0C
0008F631 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008F635 E10A                       	smpsAlterNote       $0A
0008F637 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008F63D 03                         	dc.b	$03
0008F63E                            
0008F63E                            music84_Jump00:
0008F63E 8004                       	dc.b	nRst, $04
0008F640 E602                       	smpsAlterVol        $02
0008F642 E10D                       	smpsAlterNote       $0D
0008F644 B60D                       	dc.b	nF4, $0D
0008F646 E107                       	smpsAlterNote       $07
0008F648 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F64C E10A                       	smpsAlterNote       $0A
0008F64E E701                       	dc.b	smpsNoAttack, $01
0008F650 E110                       	smpsAlterNote       $10
0008F652 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F656 E10A                       	smpsAlterNote       $0A
0008F658 E701                       	dc.b	smpsNoAttack, $01
0008F65A E107                       	smpsAlterNote       $07
0008F65C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F660 E10D                       	smpsAlterNote       $0D
0008F662 E701                       	dc.b	smpsNoAttack, $01
0008F664 E111                       	smpsAlterNote       $11
0008F666 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F66A E10D                       	smpsAlterNote       $0D
0008F66C B80D                       	dc.b	nG4, $0D
0008F66E E107                       	smpsAlterNote       $07
0008F670 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F674 E10A                       	smpsAlterNote       $0A
0008F676 E701                       	dc.b	smpsNoAttack, $01
0008F678 E110                       	smpsAlterNote       $10
0008F67A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F67E E10A                       	smpsAlterNote       $0A
0008F680 E701                       	dc.b	smpsNoAttack, $01
0008F682 E107                       	smpsAlterNote       $07
0008F684 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F688 E10D                       	smpsAlterNote       $0D
0008F68A E701                       	dc.b	smpsNoAttack, $01
0008F68C E111                       	smpsAlterNote       $11
0008F68E E701                       	dc.b	smpsNoAttack, $01
0008F690 E110                       	smpsAlterNote       $10
0008F692 E701                       	dc.b	smpsNoAttack, $01
0008F694 E10A                       	smpsAlterNote       $0A
0008F696 E701                       	dc.b	smpsNoAttack, $01
0008F698 E106                       	smpsAlterNote       $06
0008F69A E701                       	dc.b	smpsNoAttack, $01
0008F69C E10A                       	smpsAlterNote       $0A
0008F69E E701                       	dc.b	smpsNoAttack, $01
0008F6A0 E10D                       	smpsAlterNote       $0D
0008F6A2 E701                       	dc.b	smpsNoAttack, $01
0008F6A4 E111                       	smpsAlterNote       $11
0008F6A6 E701                       	dc.b	smpsNoAttack, $01
0008F6A8 E10D                       	smpsAlterNote       $0D
0008F6AA E701                       	dc.b	smpsNoAttack, $01
0008F6AC E10F                       	smpsAlterNote       $0F
0008F6AE BA0E                       	dc.b	nA4, $0E
0008F6B0 E109                       	smpsAlterNote       $09
0008F6B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6B6 E10F                       	smpsAlterNote       $0F
0008F6B8 E701                       	dc.b	smpsNoAttack, $01
0008F6BA E112                       	smpsAlterNote       $12
0008F6BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6C0 E10C                       	smpsAlterNote       $0C
0008F6C2 E701                       	dc.b	smpsNoAttack, $01
0008F6C4 E108                       	smpsAlterNote       $08
0008F6C6 E701                       	dc.b	smpsNoAttack, $01
0008F6C8 E109                       	smpsAlterNote       $09
0008F6CA E701                       	dc.b	smpsNoAttack, $01
0008F6CC E10F                       	smpsAlterNote       $0F
0008F6CE E701                       	dc.b	smpsNoAttack, $01
0008F6D0 E113                       	smpsAlterNote       $13
0008F6D2 E701                       	dc.b	smpsNoAttack, $01
0008F6D4 E10F                       	smpsAlterNote       $0F
0008F6D6 E701                       	dc.b	smpsNoAttack, $01
0008F6D8 E109                       	smpsAlterNote       $09
0008F6DA E701                       	dc.b	smpsNoAttack, $01
0008F6DC E108                       	smpsAlterNote       $08
0008F6DE E701                       	dc.b	smpsNoAttack, $01
0008F6E0 E10C                       	smpsAlterNote       $0C
0008F6E2 E701                       	dc.b	smpsNoAttack, $01
0008F6E4 E112                       	smpsAlterNote       $12
0008F6E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6EA E10F                       	smpsAlterNote       $0F
0008F6EC E701                       	dc.b	smpsNoAttack, $01
0008F6EE E109                       	smpsAlterNote       $09
0008F6F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6F4 E10F                       	smpsAlterNote       $0F
0008F6F6 E701                       	dc.b	smpsNoAttack, $01
0008F6F8 E112                       	smpsAlterNote       $12
0008F6FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6FE E10C                       	smpsAlterNote       $0C
0008F700 E701                       	dc.b	smpsNoAttack, $01
0008F702 E108                       	smpsAlterNote       $08
0008F704 E701                       	dc.b	smpsNoAttack, $01
0008F706 E109                       	smpsAlterNote       $09
0008F708 E701                       	dc.b	smpsNoAttack, $01
0008F70A E10F                       	smpsAlterNote       $0F
0008F70C E701                       	dc.b	smpsNoAttack, $01
0008F70E E113                       	smpsAlterNote       $13
0008F710 E701                       	dc.b	smpsNoAttack, $01
0008F712 E10F                       	smpsAlterNote       $0F
0008F714 E701                       	dc.b	smpsNoAttack, $01
0008F716 E10C                       	smpsAlterNote       $0C
0008F718 E701                       	dc.b	smpsNoAttack, $01
0008F71A E108                       	smpsAlterNote       $08
0008F71C E701                       	dc.b	smpsNoAttack, $01
0008F71E E109                       	smpsAlterNote       $09
0008F720 8001                       	dc.b	nRst, $01
0008F722 E10C                       	smpsAlterNote       $0C
0008F724 B50A                       	dc.b	nE4, $0A
0008F726 E10D                       	smpsAlterNote       $0D
0008F728 B60D                       	dc.b	nF4, $0D
0008F72A E10A                       	smpsAlterNote       $0A
0008F72C E701                       	dc.b	smpsNoAttack, $01
0008F72E E106                       	smpsAlterNote       $06
0008F730 E701                       	dc.b	smpsNoAttack, $01
0008F732 E107                       	smpsAlterNote       $07
0008F734 E701                       	dc.b	smpsNoAttack, $01
0008F736 E10D                       	smpsAlterNote       $0D
0008F738 E701                       	dc.b	smpsNoAttack, $01
0008F73A E111                       	smpsAlterNote       $11
0008F73C E701                       	dc.b	smpsNoAttack, $01
0008F73E E10D                       	smpsAlterNote       $0D
0008F740 E701                       	dc.b	smpsNoAttack, $01
0008F742 E10A                       	smpsAlterNote       $0A
0008F744 E701                       	dc.b	smpsNoAttack, $01
0008F746 E106                       	smpsAlterNote       $06
0008F748 E701                       	dc.b	smpsNoAttack, $01
0008F74A E10A                       	smpsAlterNote       $0A
0008F74C E701                       	dc.b	smpsNoAttack, $01
0008F74E E110                       	smpsAlterNote       $10
0008F750 E701                       	dc.b	smpsNoAttack, $01
0008F752 E111                       	smpsAlterNote       $11
0008F754 E701                       	dc.b	smpsNoAttack, $01
0008F756 E10D                       	smpsAlterNote       $0D
0008F758 B80D                       	dc.b	nG4, $0D
0008F75A E10A                       	smpsAlterNote       $0A
0008F75C E701                       	dc.b	smpsNoAttack, $01
0008F75E E106                       	smpsAlterNote       $06
0008F760 E701                       	dc.b	smpsNoAttack, $01
0008F762 E107                       	smpsAlterNote       $07
0008F764 E701                       	dc.b	smpsNoAttack, $01
0008F766 E10D                       	smpsAlterNote       $0D
0008F768 E701                       	dc.b	smpsNoAttack, $01
0008F76A E111                       	smpsAlterNote       $11
0008F76C E701                       	dc.b	smpsNoAttack, $01
0008F76E E10D                       	smpsAlterNote       $0D
0008F770 E701                       	dc.b	smpsNoAttack, $01
0008F772 E10A                       	smpsAlterNote       $0A
0008F774 E701                       	dc.b	smpsNoAttack, $01
0008F776 E106                       	smpsAlterNote       $06
0008F778 E701                       	dc.b	smpsNoAttack, $01
0008F77A E10A                       	smpsAlterNote       $0A
0008F77C E701                       	dc.b	smpsNoAttack, $01
0008F77E E110                       	smpsAlterNote       $10
0008F780 E701                       	dc.b	smpsNoAttack, $01
0008F782 E111                       	smpsAlterNote       $11
0008F784 E701                       	dc.b	smpsNoAttack, $01
0008F786 E10D                       	smpsAlterNote       $0D
0008F788 E701                       	dc.b	smpsNoAttack, $01
0008F78A E107                       	smpsAlterNote       $07
0008F78C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F790 E10A                       	smpsAlterNote       $0A
0008F792 E701                       	dc.b	smpsNoAttack, $01
0008F794 E110                       	smpsAlterNote       $10
0008F796 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F79A E10D                       	smpsAlterNote       $0D
0008F79C 8001                       	dc.b	nRst, $01
0008F79E E10F                       	smpsAlterNote       $0F
0008F7A0 BA0D                       	dc.b	nA4, $0D
0008F7A2 E10C                       	smpsAlterNote       $0C
0008F7A4 E701                       	dc.b	smpsNoAttack, $01
0008F7A6 E108                       	smpsAlterNote       $08
0008F7A8 E701                       	dc.b	smpsNoAttack, $01
0008F7AA E10C                       	smpsAlterNote       $0C
0008F7AC E701                       	dc.b	smpsNoAttack, $01
0008F7AE E112                       	smpsAlterNote       $12
0008F7B0 E701                       	dc.b	smpsNoAttack, $01
0008F7B2 E113                       	smpsAlterNote       $13
0008F7B4 E701                       	dc.b	smpsNoAttack, $01
0008F7B6 E10F                       	smpsAlterNote       $0F
0008F7B8 E701                       	dc.b	smpsNoAttack, $01
0008F7BA E109                       	smpsAlterNote       $09
0008F7BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7C0 E10C                       	smpsAlterNote       $0C
0008F7C2 E701                       	dc.b	smpsNoAttack, $01
0008F7C4 E112                       	smpsAlterNote       $12
0008F7C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7CA E10C                       	smpsAlterNote       $0C
0008F7CC E701                       	dc.b	smpsNoAttack, $01
0008F7CE E109                       	smpsAlterNote       $09
0008F7D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7D4 E10F                       	smpsAlterNote       $0F
0008F7D6 E701                       	dc.b	smpsNoAttack, $01
0008F7D8 E113                       	smpsAlterNote       $13
0008F7DA E701                       	dc.b	smpsNoAttack, $01
0008F7DC E112                       	smpsAlterNote       $12
0008F7DE E701                       	dc.b	smpsNoAttack, $01
0008F7E0 E10C                       	smpsAlterNote       $0C
0008F7E2 E701                       	dc.b	smpsNoAttack, $01
0008F7E4 E108                       	smpsAlterNote       $08
0008F7E6 E701                       	dc.b	smpsNoAttack, $01
0008F7E8 E10C                       	smpsAlterNote       $0C
0008F7EA E701                       	dc.b	smpsNoAttack, $01
0008F7EC E10F                       	smpsAlterNote       $0F
0008F7EE E701                       	dc.b	smpsNoAttack, $01
0008F7F0 E113                       	smpsAlterNote       $13
0008F7F2 E701                       	dc.b	smpsNoAttack, $01
0008F7F4 E10F                       	smpsAlterNote       $0F
0008F7F6 E701                       	dc.b	smpsNoAttack, $01
0008F7F8 E109                       	smpsAlterNote       $09
0008F7FA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F7FE E10D                       	smpsAlterNote       $0D
0008F800 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008F804 E10C                       	smpsAlterNote       $0C
0008F806 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008F80A E10B                       	smpsAlterNote       $0B
0008F80C B30D                       	dc.b	nD4, $0D
0008F80E E10C                       	smpsAlterNote       $0C
0008F810 B503 8001                  	dc.b	nE4, $03, nRst, $01
0008F814 E10D                       	smpsAlterNote       $0D
0008F816 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008F81E E109                       	smpsAlterNote       $09
0008F820 E701                       	dc.b	smpsNoAttack, $01
0008F822 E108                       	smpsAlterNote       $08
0008F824 E701                       	dc.b	smpsNoAttack, $01
0008F826 E10C                       	smpsAlterNote       $0C
0008F828 E701                       	dc.b	smpsNoAttack, $01
0008F82A E112                       	smpsAlterNote       $12
0008F82C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F830 E10F                       	smpsAlterNote       $0F
0008F832 E701                       	dc.b	smpsNoAttack, $01
0008F834 E109                       	smpsAlterNote       $09
0008F836 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F83A E10F                       	smpsAlterNote       $0F
0008F83C E701                       	dc.b	smpsNoAttack, $01
0008F83E E112                       	smpsAlterNote       $12
0008F840 E701                       	dc.b	smpsNoAttack, $01
0008F842 E113                       	smpsAlterNote       $13
0008F844 8001                       	dc.b	nRst, $01
0008F846 E10D                       	smpsAlterNote       $0D
0008F848 C20D                       	dc.b	nF5, $0D
0008F84A E107                       	smpsAlterNote       $07
0008F84C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F850 E10A                       	smpsAlterNote       $0A
0008F852 E701                       	dc.b	smpsNoAttack, $01
0008F854 E110                       	smpsAlterNote       $10
0008F856 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F85A E10A                       	smpsAlterNote       $0A
0008F85C E701                       	dc.b	smpsNoAttack, $01
0008F85E E107                       	smpsAlterNote       $07
0008F860 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F864 E10D                       	smpsAlterNote       $0D
0008F866 E701                       	dc.b	smpsNoAttack, $01
0008F868 E111                       	smpsAlterNote       $11
0008F86A E701                       	dc.b	smpsNoAttack, $01
0008F86C E110                       	smpsAlterNote       $10
0008F86E E701                       	dc.b	smpsNoAttack, $01
0008F870 E10A                       	smpsAlterNote       $0A
0008F872 E701                       	dc.b	smpsNoAttack, $01
0008F874 E106                       	smpsAlterNote       $06
0008F876 E701                       	dc.b	smpsNoAttack, $01
0008F878 E10A                       	smpsAlterNote       $0A
0008F87A E701                       	dc.b	smpsNoAttack, $01
0008F87C E10D                       	smpsAlterNote       $0D
0008F87E E701                       	dc.b	smpsNoAttack, $01
0008F880 E111                       	smpsAlterNote       $11
0008F882 E701                       	dc.b	smpsNoAttack, $01
0008F884 E10D                       	smpsAlterNote       $0D
0008F886 E701                       	dc.b	smpsNoAttack, $01
0008F888 E107                       	smpsAlterNote       $07
0008F88A E701                       	dc.b	smpsNoAttack, $01
0008F88C E106                       	smpsAlterNote       $06
0008F88E E701                       	dc.b	smpsNoAttack, $01
0008F890 E10A                       	smpsAlterNote       $0A
0008F892 E701                       	dc.b	smpsNoAttack, $01
0008F894 E110                       	smpsAlterNote       $10
0008F896 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F89A E10D                       	smpsAlterNote       $0D
0008F89C E701                       	dc.b	smpsNoAttack, $01
0008F89E E107                       	smpsAlterNote       $07
0008F8A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8A4 E10D                       	smpsAlterNote       $0D
0008F8A6 E701                       	dc.b	smpsNoAttack, $01
0008F8A8 E110                       	smpsAlterNote       $10
0008F8AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8AE E10A                       	smpsAlterNote       $0A
0008F8B0 E701                       	dc.b	smpsNoAttack, $01
0008F8B2 E106                       	smpsAlterNote       $06
0008F8B4 E701                       	dc.b	smpsNoAttack, $01
0008F8B6 E107                       	smpsAlterNote       $07
0008F8B8 E701                       	dc.b	smpsNoAttack, $01
0008F8BA E10D                       	smpsAlterNote       $0D
0008F8BC E701                       	dc.b	smpsNoAttack, $01
0008F8BE E111                       	smpsAlterNote       $11
0008F8C0 E701                       	dc.b	smpsNoAttack, $01
0008F8C2 E10D                       	smpsAlterNote       $0D
0008F8C4 E701                       	dc.b	smpsNoAttack, $01
0008F8C6 E10A                       	smpsAlterNote       $0A
0008F8C8 E701                       	dc.b	smpsNoAttack, $01
0008F8CA E106                       	smpsAlterNote       $06
0008F8CC E701                       	dc.b	smpsNoAttack, $01
0008F8CE E10A                       	smpsAlterNote       $0A
0008F8D0 E701                       	dc.b	smpsNoAttack, $01
0008F8D2 E110                       	smpsAlterNote       $10
0008F8D4 E701                       	dc.b	smpsNoAttack, $01
0008F8D6 E111                       	smpsAlterNote       $11
0008F8D8 E701                       	dc.b	smpsNoAttack, $01
0008F8DA E10D                       	smpsAlterNote       $0D
0008F8DC E701                       	dc.b	smpsNoAttack, $01
0008F8DE E107                       	smpsAlterNote       $07
0008F8E0 E701                       	dc.b	smpsNoAttack, $01
0008F8E2 E10D                       	smpsAlterNote       $0D
0008F8E4 C207                       	dc.b	nF5, $07
0008F8E6 E10C                       	smpsAlterNote       $0C
0008F8E8 C10D                       	dc.b	nE5, $0D
0008F8EA E109                       	smpsAlterNote       $09
0008F8EC E701                       	dc.b	smpsNoAttack, $01
0008F8EE E106                       	smpsAlterNote       $06
0008F8F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8F4 E10C                       	smpsAlterNote       $0C
0008F8F6 E701                       	dc.b	smpsNoAttack, $01
0008F8F8 E110                       	smpsAlterNote       $10
0008F8FA E701                       	dc.b	smpsNoAttack, $01
0008F8FC E10F                       	smpsAlterNote       $0F
0008F8FE E701                       	dc.b	smpsNoAttack, $01
0008F900 E109                       	smpsAlterNote       $09
0008F902 E701                       	dc.b	smpsNoAttack, $01
0008F904 E105                       	smpsAlterNote       $05
0008F906 E701                       	dc.b	smpsNoAttack, $01
0008F908 E109                       	smpsAlterNote       $09
0008F90A E701                       	dc.b	smpsNoAttack, $01
0008F90C E10C                       	smpsAlterNote       $0C
0008F90E E701                       	dc.b	smpsNoAttack, $01
0008F910 E110                       	smpsAlterNote       $10
0008F912 E701                       	dc.b	smpsNoAttack, $01
0008F914 E10B                       	smpsAlterNote       $0B
0008F916 BF0D                       	dc.b	nD5, $0D
0008F918 E108                       	smpsAlterNote       $08
0008F91A E701                       	dc.b	smpsNoAttack, $01
0008F91C E105                       	smpsAlterNote       $05
0008F91E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F922 E10B                       	smpsAlterNote       $0B
0008F924 E701                       	dc.b	smpsNoAttack, $01
0008F926 E10F                       	smpsAlterNote       $0F
0008F928 E701                       	dc.b	smpsNoAttack, $01
0008F92A E10E                       	smpsAlterNote       $0E
0008F92C E701                       	dc.b	smpsNoAttack, $01
0008F92E E108                       	smpsAlterNote       $08
0008F930 E701                       	dc.b	smpsNoAttack, $01
0008F932 E104                       	smpsAlterNote       $04
0008F934 E701                       	dc.b	smpsNoAttack, $01
0008F936 E108                       	smpsAlterNote       $08
0008F938 E701                       	dc.b	smpsNoAttack, $01
0008F93A E10E                       	smpsAlterNote       $0E
0008F93C E701                       	dc.b	smpsNoAttack, $01
0008F93E E10F                       	smpsAlterNote       $0F
0008F940 E701                       	dc.b	smpsNoAttack, $01
0008F942 E10B                       	smpsAlterNote       $0B
0008F944 E701                       	dc.b	smpsNoAttack, $01
0008F946 E105                       	smpsAlterNote       $05
0008F948 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F94C E108                       	smpsAlterNote       $08
0008F94E E701                       	dc.b	smpsNoAttack, $01
0008F950 E10E                       	smpsAlterNote       $0E
0008F952 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F956 E108                       	smpsAlterNote       $08
0008F958 E701                       	dc.b	smpsNoAttack, $01
0008F95A E105                       	smpsAlterNote       $05
0008F95C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F960 E10B                       	smpsAlterNote       $0B
0008F962 E701                       	dc.b	smpsNoAttack, $01
0008F964 E10F                       	smpsAlterNote       $0F
0008F966 E701                       	dc.b	smpsNoAttack, $01
0008F968 E10E                       	smpsAlterNote       $0E
0008F96A E701                       	dc.b	smpsNoAttack, $01
0008F96C E108                       	smpsAlterNote       $08
0008F96E E701                       	dc.b	smpsNoAttack, $01
0008F970 E104                       	smpsAlterNote       $04
0008F972 E701                       	dc.b	smpsNoAttack, $01
0008F974 E108                       	smpsAlterNote       $08
0008F976 E701                       	dc.b	smpsNoAttack, $01
0008F978 E10B                       	smpsAlterNote       $0B
0008F97A E701                       	dc.b	smpsNoAttack, $01
0008F97C E10F                       	smpsAlterNote       $0F
0008F97E E701                       	dc.b	smpsNoAttack, $01
0008F980 E10B                       	smpsAlterNote       $0B
0008F982 E701                       	dc.b	smpsNoAttack, $01
0008F984 E105                       	smpsAlterNote       $05
0008F986 E701                       	dc.b	smpsNoAttack, $01
0008F988 E104                       	smpsAlterNote       $04
0008F98A E701                       	dc.b	smpsNoAttack, $01
0008F98C E108                       	smpsAlterNote       $08
0008F98E E701                       	dc.b	smpsNoAttack, $01
0008F990 E10E                       	smpsAlterNote       $0E
0008F992 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F996 E10B                       	smpsAlterNote       $0B
0008F998 E701                       	dc.b	smpsNoAttack, $01
0008F99A E105                       	smpsAlterNote       $05
0008F99C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9A0 E10B                       	smpsAlterNote       $0B
0008F9A2 E701                       	dc.b	smpsNoAttack, $01
0008F9A4 E10E                       	smpsAlterNote       $0E
0008F9A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9AA E108                       	smpsAlterNote       $08
0008F9AC E701                       	dc.b	smpsNoAttack, $01
0008F9AE E105                       	smpsAlterNote       $05
0008F9B0 8001                       	dc.b	nRst, $01
0008F9B4 E601                       	smpsAlterVol        $01
0008F9B6 E10B                       	smpsAlterNote       $0B
0008F9B8 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008F9C4 8004                       	dc.b	nRst, $04
0008F9C8 E6FF                       	smpsAlterVol        $FF
0008F9CA E10D                       	smpsAlterNote       $0D
0008F9CC B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008F9D4 E10C                       	smpsAlterNote       $0C
0008F9D6 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008F9DB E10D                       	smpsAlterNote       $0D
0008F9DD B60D                       	dc.b	nF4, $0D
0008F9DF E10A                       	smpsAlterNote       $0A
0008F9E1 E701                       	dc.b	smpsNoAttack, $01
0008F9E3 E106                       	smpsAlterNote       $06
0008F9E5 E701                       	dc.b	smpsNoAttack, $01
0008F9E7 E10A                       	smpsAlterNote       $0A
0008F9E9 E701                       	dc.b	smpsNoAttack, $01
0008F9EB E110                       	smpsAlterNote       $10
0008F9ED E701                       	dc.b	smpsNoAttack, $01
0008F9EF E111                       	smpsAlterNote       $11
0008F9F1 E701                       	dc.b	smpsNoAttack, $01
0008F9F3 E10D                       	smpsAlterNote       $0D
0008F9F5 E701                       	dc.b	smpsNoAttack, $01
0008F9F7 E107                       	smpsAlterNote       $07
0008F9F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9FD E10A                       	smpsAlterNote       $0A
0008F9FF E701                       	dc.b	smpsNoAttack, $01
0008FA01 E110                       	smpsAlterNote       $10
0008FA03 E701                       	dc.b	smpsNoAttack, $01
0008FA05 E111                       	smpsAlterNote       $11
0008FA07 8001                       	dc.b	nRst, $01
0008FA09 E10D                       	smpsAlterNote       $0D
0008FA0B B80D                       	dc.b	nG4, $0D
0008FA0D E10A                       	smpsAlterNote       $0A
0008FA0F E701                       	dc.b	smpsNoAttack, $01
0008FA11 E106                       	smpsAlterNote       $06
0008FA13 E701                       	dc.b	smpsNoAttack, $01
0008FA15 E10A                       	smpsAlterNote       $0A
0008FA17 E701                       	dc.b	smpsNoAttack, $01
0008FA19 E110                       	smpsAlterNote       $10
0008FA1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA1F E10D                       	smpsAlterNote       $0D
0008FA21 E701                       	dc.b	smpsNoAttack, $01
0008FA23 E107                       	smpsAlterNote       $07
0008FA25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA29 E10D                       	smpsAlterNote       $0D
0008FA2B E701                       	dc.b	smpsNoAttack, $01
0008FA2D E110                       	smpsAlterNote       $10
0008FA2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA33 E10A                       	smpsAlterNote       $0A
0008FA35 E701                       	dc.b	smpsNoAttack, $01
0008FA37 E106                       	smpsAlterNote       $06
0008FA39 E701                       	dc.b	smpsNoAttack, $01
0008FA3B E107                       	smpsAlterNote       $07
0008FA3D E701                       	dc.b	smpsNoAttack, $01
0008FA3F E10D                       	smpsAlterNote       $0D
0008FA41 E701                       	dc.b	smpsNoAttack, $01
0008FA43 E111                       	smpsAlterNote       $11
0008FA45 E701                       	dc.b	smpsNoAttack, $01
0008FA47 E10D                       	smpsAlterNote       $0D
0008FA49 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FA4D E10F                       	smpsAlterNote       $0F
0008FA4F BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008FA53 E110                       	smpsAlterNote       $10
0008FA55 BB03                       	dc.b	nBb4, $03
0008FA57 E10F                       	smpsAlterNote       $0F
0008FA59 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008FA5F E110                       	smpsAlterNote       $10
0008FA61 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008FA65 E10F                       	smpsAlterNote       $0F
0008FA67 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008FA6D E110                       	smpsAlterNote       $10
0008FA6F D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008FA73 E10F                       	smpsAlterNote       $0F
0008FA75 D20D                       	dc.b	nA6, $0D
0008FA77 E10C                       	smpsAlterNote       $0C
0008FA79 E701                       	dc.b	smpsNoAttack, $01
0008FA7B E108                       	smpsAlterNote       $08
0008FA7D E701                       	dc.b	smpsNoAttack, $01
0008FA7F E10C                       	smpsAlterNote       $0C
0008FA81 E701                       	dc.b	smpsNoAttack, $01
0008FA83 E10F                       	smpsAlterNote       $0F
0008FA85 E701                       	dc.b	smpsNoAttack, $01
0008FA87 E113                       	smpsAlterNote       $13
0008FA89 E701                       	dc.b	smpsNoAttack, $01
0008FA8B E10F                       	smpsAlterNote       $0F
0008FA8D E701                       	dc.b	smpsNoAttack, $01
0008FA8F E109                       	smpsAlterNote       $09
0008FA91 E701                       	dc.b	smpsNoAttack, $01
0008FA93 E108                       	smpsAlterNote       $08
0008FA95 E701                       	dc.b	smpsNoAttack, $01
0008FA97 E10C                       	smpsAlterNote       $0C
0008FA99 E701                       	dc.b	smpsNoAttack, $01
0008FA9B E112                       	smpsAlterNote       $12
0008FA9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAA1 E10F                       	smpsAlterNote       $0F
0008FAA3 E701                       	dc.b	smpsNoAttack, $01
0008FAA5 E109                       	smpsAlterNote       $09
0008FAA7 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008FAAD E10D                       	smpsAlterNote       $0D
0008FAAF CE07                       	dc.b	nF6, $07
0008FAB1 E10C                       	smpsAlterNote       $0C
0008FAB3 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008FAB7 E10D                       	smpsAlterNote       $0D
0008FAB9 CE03                       	dc.b	nF6, $03
0008FABB E10C                       	smpsAlterNote       $0C
0008FABD CC0D                       	dc.b	nEb6, $0D
0008FABF E109                       	smpsAlterNote       $09
0008FAC1 E701                       	dc.b	smpsNoAttack, $01
0008FAC3 E106                       	smpsAlterNote       $06
0008FAC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAC9 E10C                       	smpsAlterNote       $0C
0008FACB E701                       	dc.b	smpsNoAttack, $01
0008FACD E110                       	smpsAlterNote       $10
0008FACF E701                       	dc.b	smpsNoAttack, $01
0008FAD1 E10F                       	smpsAlterNote       $0F
0008FAD3 E701                       	dc.b	smpsNoAttack, $01
0008FAD5 E109                       	smpsAlterNote       $09
0008FAD7 E701                       	dc.b	smpsNoAttack, $01
0008FAD9 E105                       	smpsAlterNote       $05
0008FADB E701                       	dc.b	smpsNoAttack, $01
0008FADD E109                       	smpsAlterNote       $09
0008FADF E701                       	dc.b	smpsNoAttack, $01
0008FAE1 E10C                       	smpsAlterNote       $0C
0008FAE3 E701                       	dc.b	smpsNoAttack, $01
0008FAE5 E110                       	smpsAlterNote       $10
0008FAE7 E701                       	dc.b	smpsNoAttack, $01
0008FAE9 E10C                       	smpsAlterNote       $0C
0008FAEB E701                       	dc.b	smpsNoAttack, $01
0008FAED E106                       	smpsAlterNote       $06
0008FAEF E701                       	dc.b	smpsNoAttack, $01
0008FAF1 E105                       	smpsAlterNote       $05
0008FAF3 E701                       	dc.b	smpsNoAttack, $01
0008FAF5 E109                       	smpsAlterNote       $09
0008FAF7 E701                       	dc.b	smpsNoAttack, $01
0008FAF9 E10F                       	smpsAlterNote       $0F
0008FAFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAFF E10C                       	smpsAlterNote       $0C
0008FB01 E701                       	dc.b	smpsNoAttack, $01
0008FB03 E10B                       	smpsAlterNote       $0B
0008FB05 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008FB0F E10F                       	smpsAlterNote       $0F
0008FB11 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008FB1B E10D                       	smpsAlterNote       $0D
0008FB1D C203                       	dc.b	nF5, $03
0008FB1F E10C                       	smpsAlterNote       $0C
0008FB21 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008FB25 E10D                       	smpsAlterNote       $0D
0008FB27 C20D                       	dc.b	nF5, $0D
0008FB29 E10C                       	smpsAlterNote       $0C
0008FB2B C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008FB2F E10B                       	smpsAlterNote       $0B
0008FB31 BF0D                       	dc.b	nD5, $0D
0008FB33 E108                       	smpsAlterNote       $08
0008FB35 E701                       	dc.b	smpsNoAttack, $01
0008FB37 E104                       	smpsAlterNote       $04
0008FB39 E701                       	dc.b	smpsNoAttack, $01
0008FB3B E108                       	smpsAlterNote       $08
0008FB3D E701                       	dc.b	smpsNoAttack, $01
0008FB3F E10E                       	smpsAlterNote       $0E
0008FB41 E701                       	dc.b	smpsNoAttack, $01
0008FB43 E10F                       	smpsAlterNote       $0F
0008FB45 E701                       	dc.b	smpsNoAttack, $01
0008FB47 E10B                       	smpsAlterNote       $0B
0008FB49 E701                       	dc.b	smpsNoAttack, $01
0008FB4B E105                       	smpsAlterNote       $05
0008FB4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB51 E108                       	smpsAlterNote       $08
0008FB53 E701                       	dc.b	smpsNoAttack, $01
0008FB55 E10E                       	smpsAlterNote       $0E
0008FB57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB5B E108                       	smpsAlterNote       $08
0008FB5D E701                       	dc.b	smpsNoAttack, $01
0008FB5F E105                       	smpsAlterNote       $05
0008FB61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB65 E10B                       	smpsAlterNote       $0B
0008FB67 E701                       	dc.b	smpsNoAttack, $01
0008FB69 E10F                       	smpsAlterNote       $0F
0008FB6B E701                       	dc.b	smpsNoAttack, $01
0008FB6D E10E                       	smpsAlterNote       $0E
0008FB6F E701                       	dc.b	smpsNoAttack, $01
0008FB71 E108                       	smpsAlterNote       $08
0008FB73 E701                       	dc.b	smpsNoAttack, $01
0008FB75 E104                       	smpsAlterNote       $04
0008FB77 E701                       	dc.b	smpsNoAttack, $01
0008FB79 E108                       	smpsAlterNote       $08
0008FB7B E701                       	dc.b	smpsNoAttack, $01
0008FB7D E10B                       	smpsAlterNote       $0B
0008FB7F E701                       	dc.b	smpsNoAttack, $01
0008FB81 E10F                       	smpsAlterNote       $0F
0008FB83 E701                       	dc.b	smpsNoAttack, $01
0008FB85 E10B                       	smpsAlterNote       $0B
0008FB87 E701                       	dc.b	smpsNoAttack, $01
0008FB89 E105                       	smpsAlterNote       $05
0008FB8B E701                       	dc.b	smpsNoAttack, $01
0008FB8D E104                       	smpsAlterNote       $04
0008FB8F E701                       	dc.b	smpsNoAttack, $01
0008FB91 E108                       	smpsAlterNote       $08
0008FB93 E701                       	dc.b	smpsNoAttack, $01
0008FB95 E10E                       	smpsAlterNote       $0E
0008FB97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB9B E10B                       	smpsAlterNote       $0B
0008FB9D E701                       	dc.b	smpsNoAttack, $01
0008FB9F E105                       	smpsAlterNote       $05
0008FBA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBA5 E10B                       	smpsAlterNote       $0B
0008FBA7 E701                       	dc.b	smpsNoAttack, $01
0008FBA9 E10E                       	smpsAlterNote       $0E
0008FBAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBAF E108                       	smpsAlterNote       $08
0008FBB1 E701                       	dc.b	smpsNoAttack, $01
0008FBB3 E104                       	smpsAlterNote       $04
0008FBB5 E701                       	dc.b	smpsNoAttack, $01
0008FBB7 E105                       	smpsAlterNote       $05
0008FBB9 E701                       	dc.b	smpsNoAttack, $01
0008FBBB E10B                       	smpsAlterNote       $0B
0008FBBD E701                       	dc.b	smpsNoAttack, $01
0008FBBF E10F                       	smpsAlterNote       $0F
0008FBC1 E701                       	dc.b	smpsNoAttack, $01
0008FBC3 E10B                       	smpsAlterNote       $0B
0008FBC5 E701                       	dc.b	smpsNoAttack, $01
0008FBC7 E108                       	smpsAlterNote       $08
0008FBC9 E701                       	dc.b	smpsNoAttack, $01
0008FBCB E104                       	smpsAlterNote       $04
0008FBCD E701                       	dc.b	smpsNoAttack, $01
0008FBCF E108                       	smpsAlterNote       $08
0008FBD1 E701                       	dc.b	smpsNoAttack, $01
0008FBD3 E10E                       	smpsAlterNote       $0E
0008FBD5 E701                       	dc.b	smpsNoAttack, $01
0008FBD7 E10F                       	smpsAlterNote       $0F
0008FBD9 E701                       	dc.b	smpsNoAttack, $01
0008FBDB E10B                       	smpsAlterNote       $0B
0008FBDD E701                       	dc.b	smpsNoAttack, $01
0008FBDF E105                       	smpsAlterNote       $05
0008FBE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBE5 E108                       	smpsAlterNote       $08
0008FBE7 E701                       	dc.b	smpsNoAttack, $01
0008FBE9 E10E                       	smpsAlterNote       $0E
0008FBEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBEF E108                       	smpsAlterNote       $08
0008FBF1 E701                       	dc.b	smpsNoAttack, $01
0008FBF3 E105                       	smpsAlterNote       $05
0008FBF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBF9 E10B                       	smpsAlterNote       $0B
0008FBFB E701                       	dc.b	smpsNoAttack, $01
0008FBFD E10F                       	smpsAlterNote       $0F
0008FBFF E701                       	dc.b	smpsNoAttack, $01
0008FC01 E10E                       	smpsAlterNote       $0E
0008FC03 E701                       	dc.b	smpsNoAttack, $01
0008FC05 E108                       	smpsAlterNote       $08
0008FC07 E701                       	dc.b	smpsNoAttack, $01
0008FC09 E104                       	smpsAlterNote       $04
0008FC0B E701                       	dc.b	smpsNoAttack, $01
0008FC0D E108                       	smpsAlterNote       $08
0008FC0F E701                       	dc.b	smpsNoAttack, $01
0008FC11 E10B                       	smpsAlterNote       $0B
0008FC13 E701                       	dc.b	smpsNoAttack, $01
0008FC15 E10F                       	smpsAlterNote       $0F
0008FC17 E701                       	dc.b	smpsNoAttack, $01
0008FC19 E10B                       	smpsAlterNote       $0B
0008FC1B E701                       	dc.b	smpsNoAttack, $01
0008FC1D E105                       	smpsAlterNote       $05
0008FC1F E701                       	dc.b	smpsNoAttack, $01
0008FC21 E104                       	smpsAlterNote       $04
0008FC23 E701                       	dc.b	smpsNoAttack, $01
0008FC25 E105                       	smpsAlterNote       $05
0008FC27 8001                       	dc.b	nRst, $01
0008FC29 E10D                       	smpsAlterNote       $0D
0008FC2B C20D                       	dc.b	nF5, $0D
0008FC2D E107                       	smpsAlterNote       $07
0008FC2F E701                       	dc.b	smpsNoAttack, $01
0008FC31 E106                       	smpsAlterNote       $06
0008FC33 E701                       	dc.b	smpsNoAttack, $01
0008FC35 E10A                       	smpsAlterNote       $0A
0008FC37 E701                       	dc.b	smpsNoAttack, $01
0008FC39 E110                       	smpsAlterNote       $10
0008FC3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC3F E10D                       	smpsAlterNote       $0D
0008FC41 E701                       	dc.b	smpsNoAttack, $01
0008FC43 E107                       	smpsAlterNote       $07
0008FC45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC49 E10D                       	smpsAlterNote       $0D
0008FC4B E701                       	dc.b	smpsNoAttack, $01
0008FC4D E110                       	smpsAlterNote       $10
0008FC4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC53 E10A                       	smpsAlterNote       $0A
0008FC55 E701                       	dc.b	smpsNoAttack, $01
0008FC57 E106                       	smpsAlterNote       $06
0008FC59 E701                       	dc.b	smpsNoAttack, $01
0008FC5B E107                       	smpsAlterNote       $07
0008FC5D E701                       	dc.b	smpsNoAttack, $01
0008FC5F E10D                       	smpsAlterNote       $0D
0008FC61 E701                       	dc.b	smpsNoAttack, $01
0008FC63 E111                       	smpsAlterNote       $11
0008FC65 E701                       	dc.b	smpsNoAttack, $01
0008FC67 E10D                       	smpsAlterNote       $0D
0008FC69 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FC6D E10C                       	smpsAlterNote       $0C
0008FC6F C10D                       	dc.b	nE5, $0D
0008FC71 E10D                       	smpsAlterNote       $0D
0008FC73 C20A                       	dc.b	nF5, $0A
0008FC75 E10C                       	smpsAlterNote       $0C
0008FC77 C10E                       	dc.b	nE5, $0E
0008FC79 E106                       	smpsAlterNote       $06
0008FC7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC7F E10C                       	smpsAlterNote       $0C
0008FC81 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FC85 E10B                       	smpsAlterNote       $0B
0008FC87 BF0D                       	dc.b	nD5, $0D
0008FC89 E10C                       	smpsAlterNote       $0C
0008FC8B C107                       	dc.b	nE5, $07
0008FC8D E10D                       	smpsAlterNote       $0D
0008FC8F C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008FC99 E110                       	smpsAlterNote       $10
0008FC9B C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008FCA1 E10F                       	smpsAlterNote       $0F
0008FCA3 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008FCAB E10D                       	smpsAlterNote       $0D
0008FCAD D003                       	dc.b	nG6, $03
0008FCB1 E0C0                       	smpsPan             panCenter, $00
0008FCB3 E6FF                       	smpsAlterVol        $FF
0008FCB5 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008FCC1 8001                       	dc.b	nRst, $01
0008FCC3 E10C                       	smpsAlterNote       $0C
0008FCC5 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008FCCF E604                       	smpsAlterVol        $04
0008FCD1 E10B                       	smpsAlterNote       $0B
0008FCD3 B306 8001                  	dc.b	nD4, $06, nRst, $01
0008FCD7 E10F                       	smpsAlterNote       $0F
0008FCD9 AE03                       	dc.b	nA3, $03
0008FCDB E10D                       	smpsAlterNote       $0D
0008FCDD B603 8001                  	dc.b	nF4, $03, nRst, $01
0008FCE1 E10C                       	smpsAlterNote       $0C
0008FCE3 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FCE7 E10B                       	smpsAlterNote       $0B
0008FCE9 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008FCED E10A                       	smpsAlterNote       $0A
0008FCEF B103                       	dc.b	nC4, $03
0008FCF1 E110                       	smpsAlterNote       $10
0008FCF3 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008FCF7 E10F                       	smpsAlterNote       $0F
0008FCF9 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008FCFD E080                       	smpsPan             panLeft, $00
0008FCFF 01                         	dc.b	$01
0008FD02 E6FB                       	smpsAlterVol        $FB
0008FD04 E1E4                       	smpsAlterNote       $E4
0008FD06 C501                       	dc.b	nAb5, $01
0008FD08 E1F4                       	smpsAlterNote       $F4
0008FD0A E701                       	dc.b	smpsNoAttack, $01
0008FD0C E104                       	smpsAlterNote       $04
0008FD0E E701                       	dc.b	smpsNoAttack, $01
0008FD10 E114                       	smpsAlterNote       $14
0008FD12 E701                       	dc.b	smpsNoAttack, $01
0008FD14 E11C                       	smpsAlterNote       $1C
0008FD16 E701                       	dc.b	smpsNoAttack, $01
0008FD18 E1EF                       	smpsAlterNote       $EF
0008FD1A E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008FD1D E1FF                       	smpsAlterNote       $FF
0008FD1F E701                       	dc.b	smpsNoAttack, $01
0008FD21 E10F                       	smpsAlterNote       $0F
0008FD23 C606                       	dc.b	nA5, $06
0008FD25 E109                       	smpsAlterNote       $09
0008FD27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD2B E10F                       	smpsAlterNote       $0F
0008FD2D E701                       	dc.b	smpsNoAttack, $01
0008FD2F E112                       	smpsAlterNote       $12
0008FD31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD35 E10C                       	smpsAlterNote       $0C
0008FD37 E701                       	dc.b	smpsNoAttack, $01
0008FD39 E108                       	smpsAlterNote       $08
0008FD3B E701                       	dc.b	smpsNoAttack, $01
0008FD3D E109                       	smpsAlterNote       $09
0008FD3F E701                       	dc.b	smpsNoAttack, $01
0008FD41 E10F                       	smpsAlterNote       $0F
0008FD43 E701                       	dc.b	smpsNoAttack, $01
0008FD45 E113                       	smpsAlterNote       $13
0008FD47 E701                       	dc.b	smpsNoAttack, $01
0008FD49 E10F                       	smpsAlterNote       $0F
0008FD4B E701                       	dc.b	smpsNoAttack, $01
0008FD4D E10C                       	smpsAlterNote       $0C
0008FD4F E701                       	dc.b	smpsNoAttack, $01
0008FD51 E108                       	smpsAlterNote       $08
0008FD53 E701                       	dc.b	smpsNoAttack, $01
0008FD55 E10C                       	smpsAlterNote       $0C
0008FD57 E701                       	dc.b	smpsNoAttack, $01
0008FD59 E112                       	smpsAlterNote       $12
0008FD5B E701                       	dc.b	smpsNoAttack, $01
0008FD5D E113                       	smpsAlterNote       $13
0008FD5F E701                       	dc.b	smpsNoAttack, $01
0008FD61 E10F                       	smpsAlterNote       $0F
0008FD63 E701                       	dc.b	smpsNoAttack, $01
0008FD65 E109                       	smpsAlterNote       $09
0008FD67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD6B E10C                       	smpsAlterNote       $0C
0008FD6D E701                       	dc.b	smpsNoAttack, $01
0008FD6F E112                       	smpsAlterNote       $12
0008FD71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD75 E10C                       	smpsAlterNote       $0C
0008FD77 E701                       	dc.b	smpsNoAttack, $01
0008FD79 E109                       	smpsAlterNote       $09
0008FD7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD7F E10F                       	smpsAlterNote       $0F
0008FD81 E701                       	dc.b	smpsNoAttack, $01
0008FD83 E113                       	smpsAlterNote       $13
0008FD85 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FD89 E10D                       	smpsAlterNote       $0D
0008FD8B C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008FD91 E10C                       	smpsAlterNote       $0C
0008FD93 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008FD97 E10D                       	smpsAlterNote       $0D
0008FD99 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008FD9D E10C                       	smpsAlterNote       $0C
0008FD9F C102                       	dc.b	nE5, $02
0008FDA1 E10B                       	smpsAlterNote       $0B
0008FDA3 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008FDA7 E10C                       	smpsAlterNote       $0C
0008FDA9 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008FDAD E10B                       	smpsAlterNote       $0B
0008FDAF BF02                       	dc.b	nD5, $02
0008FDB1 E10A                       	smpsAlterNote       $0A
0008FDB3 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008FDBD E110                       	smpsAlterNote       $10
0008FDBF BB02                       	dc.b	nBb4, $02
0008FDC1 E10A                       	smpsAlterNote       $0A
0008FDC3 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008FDC7 E110                       	smpsAlterNote       $10
0008FDC9 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008FDCD E10F                       	smpsAlterNote       $0F
0008FDCF BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008FDD3 E110                       	smpsAlterNote       $10
0008FDD5 BB02                       	dc.b	nBb4, $02
0008FDD7 E10F                       	smpsAlterNote       $0F
0008FDD9 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008FDE3 E10C                       	smpsAlterNote       $0C
0008FDE5 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008FDED E10B                       	smpsAlterNote       $0B
0008FDEF BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008FDF3 E10F                       	smpsAlterNote       $0F
0008FDF5 BA02                       	dc.b	nA4, $02
0008FDF9 E0C0                       	smpsPan             panCenter, $00
0008FDFB E601                       	smpsAlterVol        $01
0008FDFD E109                       	smpsAlterNote       $09
0008FDFF AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008FE0B E108                       	smpsAlterNote       $08
0008FE0D A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008FE13 E107                       	smpsAlterNote       $07
0008FE15 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008FE1B E109                       	smpsAlterNote       $09
0008FE1D B603 8001                  	dc.b	nF4, $03, nRst, $01
0008FE21 E108                       	smpsAlterNote       $08
0008FE23 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FE27 E107                       	smpsAlterNote       $07
0008FE29 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008FE2D E106                       	smpsAlterNote       $06
0008FE2F B103                       	dc.b	nC4, $03
0008FE31 E10C                       	smpsAlterNote       $0C
0008FE33 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008FE39 E080                       	smpsPan             panLeft, $00
0008FE3B 07                         	dc.b	$07
0008FE3C E6FE                       	smpsAlterVol        $FE
0008FE3E E10B                       	smpsAlterNote       $0B
0008FE40 B20D                       	dc.b	nCs4, $0D
0008FE42 E105                       	smpsAlterNote       $05
0008FE44 E701                       	dc.b	smpsNoAttack, $01
0008FE46 E104                       	smpsAlterNote       $04
0008FE48 E701                       	dc.b	smpsNoAttack, $01
0008FE4A E108                       	smpsAlterNote       $08
0008FE4C E701                       	dc.b	smpsNoAttack, $01
0008FE4E E10E                       	smpsAlterNote       $0E
0008FE50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE54 E10B                       	smpsAlterNote       $0B
0008FE56 E701                       	dc.b	smpsNoAttack, $01
0008FE58 E105                       	smpsAlterNote       $05
0008FE5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE5E E10B                       	smpsAlterNote       $0B
0008FE60 E701                       	dc.b	smpsNoAttack, $01
0008FE62 E10E                       	smpsAlterNote       $0E
0008FE64 E701                       	dc.b	smpsNoAttack, $01
0008FE66 E10F                       	smpsAlterNote       $0F
0008FE68 8001                       	dc.b	nRst, $01
0008FE6A E10B                       	smpsAlterNote       $0B
0008FE6C B30D                       	dc.b	nD4, $0D
0008FE6E E105                       	smpsAlterNote       $05
0008FE70 E701                       	dc.b	smpsNoAttack, $01
0008FE72 E104                       	smpsAlterNote       $04
0008FE74 E701                       	dc.b	smpsNoAttack, $01
0008FE76 E108                       	smpsAlterNote       $08
0008FE78 E701                       	dc.b	smpsNoAttack, $01
0008FE7A E10E                       	smpsAlterNote       $0E
0008FE7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE80 E10B                       	smpsAlterNote       $0B
0008FE82 E701                       	dc.b	smpsNoAttack, $01
0008FE84 E105                       	smpsAlterNote       $05
0008FE86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE8A E10B                       	smpsAlterNote       $0B
0008FE8C E701                       	dc.b	smpsNoAttack, $01
0008FE8E E10E                       	smpsAlterNote       $0E
0008FE90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE94 E108                       	smpsAlterNote       $08
0008FE96 E701                       	dc.b	smpsNoAttack, $01
0008FE98 E104                       	smpsAlterNote       $04
0008FE9A E701                       	dc.b	smpsNoAttack, $01
0008FE9C E105                       	smpsAlterNote       $05
0008FE9E E701                       	dc.b	smpsNoAttack, $01
0008FEA0 E10B                       	smpsAlterNote       $0B
0008FEA2 E701                       	dc.b	smpsNoAttack, $01
0008FEA4 E10F                       	smpsAlterNote       $0F
0008FEA6 E701                       	dc.b	smpsNoAttack, $01
0008FEA8 E10B                       	smpsAlterNote       $0B
0008FEAA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FEAE E10C                       	smpsAlterNote       $0C
0008FEB0 B50D                       	dc.b	nE4, $0D
0008FEB2 E106                       	smpsAlterNote       $06
0008FEB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEB8 E10C                       	smpsAlterNote       $0C
0008FEBA E701                       	dc.b	smpsNoAttack, $01
0008FEBC E10F                       	smpsAlterNote       $0F
0008FEBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEC2 E109                       	smpsAlterNote       $09
0008FEC4 E701                       	dc.b	smpsNoAttack, $01
0008FEC6 E105                       	smpsAlterNote       $05
0008FEC8 E701                       	dc.b	smpsNoAttack, $01
0008FECA E106                       	smpsAlterNote       $06
0008FECC E701                       	dc.b	smpsNoAttack, $01
0008FECE E10C                       	smpsAlterNote       $0C
0008FED0 E701                       	dc.b	smpsNoAttack, $01
0008FED2 E110                       	smpsAlterNote       $10
0008FED4 E701                       	dc.b	smpsNoAttack, $01
0008FED6 E10B                       	smpsAlterNote       $0B
0008FED8 B30E                       	dc.b	nD4, $0E
0008FEDA E105                       	smpsAlterNote       $05
0008FEDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEE0 E10B                       	smpsAlterNote       $0B
0008FEE2 E701                       	dc.b	smpsNoAttack, $01
0008FEE4 E10E                       	smpsAlterNote       $0E
0008FEE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEEA E108                       	smpsAlterNote       $08
0008FEEC E701                       	dc.b	smpsNoAttack, $01
0008FEEE E104                       	smpsAlterNote       $04
0008FEF0 E701                       	dc.b	smpsNoAttack, $01
0008FEF2 E105                       	smpsAlterNote       $05
0008FEF4 E701                       	dc.b	smpsNoAttack, $01
0008FEF6 E10B                       	smpsAlterNote       $0B
0008FEF8 E701                       	dc.b	smpsNoAttack, $01
0008FEFA E10F                       	smpsAlterNote       $0F
0008FEFC E701                       	dc.b	smpsNoAttack, $01
0008FEFE E10B                       	smpsAlterNote       $0B
0008FF00 E701                       	dc.b	smpsNoAttack, $01
0008FF02 E108                       	smpsAlterNote       $08
0008FF04 E701                       	dc.b	smpsNoAttack, $01
0008FF06 E104                       	smpsAlterNote       $04
0008FF08 E701                       	dc.b	smpsNoAttack, $01
0008FF0A E108                       	smpsAlterNote       $08
0008FF0C E701                       	dc.b	smpsNoAttack, $01
0008FF0E E10E                       	smpsAlterNote       $0E
0008FF10 E701                       	dc.b	smpsNoAttack, $01
0008FF12 E10F                       	smpsAlterNote       $0F
0008FF14 E701                       	dc.b	smpsNoAttack, $01
0008FF16 E10B                       	smpsAlterNote       $0B
0008FF18 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008FF1C E108                       	smpsAlterNote       $08
0008FF1E E701                       	dc.b	smpsNoAttack, $01
0008FF20 E105                       	smpsAlterNote       $05
0008FF22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF26 E10B                       	smpsAlterNote       $0B
0008FF28 E701                       	dc.b	smpsNoAttack, $01
0008FF2A E10F                       	smpsAlterNote       $0F
0008FF2C E701                       	dc.b	smpsNoAttack, $01
0008FF2E E10E                       	smpsAlterNote       $0E
0008FF30 E701                       	dc.b	smpsNoAttack, $01
0008FF32 E108                       	smpsAlterNote       $08
0008FF34 E701                       	dc.b	smpsNoAttack, $01
0008FF36 E104                       	smpsAlterNote       $04
0008FF38 E701                       	dc.b	smpsNoAttack, $01
0008FF3A E108                       	smpsAlterNote       $08
0008FF3C E701                       	dc.b	smpsNoAttack, $01
0008FF3E E10B                       	smpsAlterNote       $0B
0008FF40 E701                       	dc.b	smpsNoAttack, $01
0008FF42 E10F                       	smpsAlterNote       $0F
0008FF44 E701                       	dc.b	smpsNoAttack, $01
0008FF46 E10B                       	smpsAlterNote       $0B
0008FF48 B30D                       	dc.b	nD4, $0D
0008FF4A E108                       	smpsAlterNote       $08
0008FF4C E701                       	dc.b	smpsNoAttack, $01
0008FF4E E105                       	smpsAlterNote       $05
0008FF50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF54 E10B                       	smpsAlterNote       $0B
0008FF56 E701                       	dc.b	smpsNoAttack, $01
0008FF58 E10F                       	smpsAlterNote       $0F
0008FF5A E701                       	dc.b	smpsNoAttack, $01
0008FF5C E10E                       	smpsAlterNote       $0E
0008FF5E E701                       	dc.b	smpsNoAttack, $01
0008FF60 E108                       	smpsAlterNote       $08
0008FF62 E701                       	dc.b	smpsNoAttack, $01
0008FF64 E104                       	smpsAlterNote       $04
0008FF66 E701                       	dc.b	smpsNoAttack, $01
0008FF68 E108                       	smpsAlterNote       $08
0008FF6A E701                       	dc.b	smpsNoAttack, $01
0008FF6C E10B                       	smpsAlterNote       $0B
0008FF6E E701                       	dc.b	smpsNoAttack, $01
0008FF70 E10F                       	smpsAlterNote       $0F
0008FF72 E701                       	dc.b	smpsNoAttack, $01
0008FF74 E10B                       	smpsAlterNote       $0B
0008FF76 E701                       	dc.b	smpsNoAttack, $01
0008FF78 E105                       	smpsAlterNote       $05
0008FF7A E701                       	dc.b	smpsNoAttack, $01
0008FF7C E104                       	smpsAlterNote       $04
0008FF7E E701                       	dc.b	smpsNoAttack, $01
0008FF80 E108                       	smpsAlterNote       $08
0008FF82 E701                       	dc.b	smpsNoAttack, $01
0008FF84 E10E                       	smpsAlterNote       $0E
0008FF86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF8A E10B                       	smpsAlterNote       $0B
0008FF8C 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008FF90 E108                       	smpsAlterNote       $08
0008FF92 E701                       	dc.b	smpsNoAttack, $01
0008FF94 E104                       	smpsAlterNote       $04
0008FF96 E701                       	dc.b	smpsNoAttack, $01
0008FF98 E108                       	smpsAlterNote       $08
0008FF9A E701                       	dc.b	smpsNoAttack, $01
0008FF9C E10B                       	smpsAlterNote       $0B
0008FF9E E701                       	dc.b	smpsNoAttack, $01
0008FFA2 E0C0                       	smpsPan             panCenter, $00
0008FFA4 E601                       	smpsAlterVol        $01
0008FFA6 E108                       	smpsAlterNote       $08
0008FFA8 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008FFB4 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008FFBC E080                       	smpsPan             panLeft, $00
0008FFBE 07                         	dc.b	$07
0008FFBF E6FF                       	smpsAlterVol        $FF
0008FFC1 E10D                       	smpsAlterNote       $0D
0008FFC3 B60D                       	dc.b	nF4, $0D
0008FFC5 E10A                       	smpsAlterNote       $0A
0008FFC7 E701                       	dc.b	smpsNoAttack, $01
0008FFC9 E106                       	smpsAlterNote       $06
0008FFCB E701                       	dc.b	smpsNoAttack, $01
0008FFCD E10A                       	smpsAlterNote       $0A
0008FFCF E701                       	dc.b	smpsNoAttack, $01
0008FFD1 E110                       	smpsAlterNote       $10
0008FFD3 E701                       	dc.b	smpsNoAttack, $01
0008FFD5 E111                       	smpsAlterNote       $11
0008FFD7 E701                       	dc.b	smpsNoAttack, $01
0008FFD9 E10D                       	smpsAlterNote       $0D
0008FFDB E701                       	dc.b	smpsNoAttack, $01
0008FFDD E107                       	smpsAlterNote       $07
0008FFDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFE3 E10A                       	smpsAlterNote       $0A
0008FFE5 E701                       	dc.b	smpsNoAttack, $01
0008FFE7 E110                       	smpsAlterNote       $10
0008FFE9 E701                       	dc.b	smpsNoAttack, $01
0008FFEB E111                       	smpsAlterNote       $11
0008FFED 8001                       	dc.b	nRst, $01
0008FFEF E10D                       	smpsAlterNote       $0D
0008FFF1 B80D                       	dc.b	nG4, $0D
0008FFF3 E10A                       	smpsAlterNote       $0A
0008FFF5 E701                       	dc.b	smpsNoAttack, $01
0008FFF7 E106                       	smpsAlterNote       $06
0008FFF9 E701                       	dc.b	smpsNoAttack, $01
0008FFFB E10A                       	smpsAlterNote       $0A
0008FFFD E701                       	dc.b	smpsNoAttack, $01
0008FFFF E110                       	smpsAlterNote       $10
00090001 E701                       	dc.b	smpsNoAttack, $01
00090003 E111                       	smpsAlterNote       $11
00090005 E701                       	dc.b	smpsNoAttack, $01
00090007 E10D                       	smpsAlterNote       $0D
00090009 E701                       	dc.b	smpsNoAttack, $01
0009000B E107                       	smpsAlterNote       $07
0009000D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090011 E10D                       	smpsAlterNote       $0D
00090013 E701                       	dc.b	smpsNoAttack, $01
00090015 E110                       	smpsAlterNote       $10
00090017 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009001B E10A                       	smpsAlterNote       $0A
0009001D E701                       	dc.b	smpsNoAttack, $01
0009001F E106                       	smpsAlterNote       $06
00090021 E701                       	dc.b	smpsNoAttack, $01
00090023 E107                       	smpsAlterNote       $07
00090025 E701                       	dc.b	smpsNoAttack, $01
00090027 E10D                       	smpsAlterNote       $0D
00090029 E701                       	dc.b	smpsNoAttack, $01
0009002B E111                       	smpsAlterNote       $11
0009002D E701                       	dc.b	smpsNoAttack, $01
0009002F E10D                       	smpsAlterNote       $0D
00090031 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090035 E10F                       	smpsAlterNote       $0F
00090037 BA0D                       	dc.b	nA4, $0D
00090039 E109                       	smpsAlterNote       $09
0009003B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009003F E10C                       	smpsAlterNote       $0C
00090041 E701                       	dc.b	smpsNoAttack, $01
00090043 E112                       	smpsAlterNote       $12
00090045 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090049 E10C                       	smpsAlterNote       $0C
0009004B E701                       	dc.b	smpsNoAttack, $01
0009004D E109                       	smpsAlterNote       $09
0009004F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090053 E10F                       	smpsAlterNote       $0F
00090055 E701                       	dc.b	smpsNoAttack, $01
00090057 E113                       	smpsAlterNote       $13
00090059 E701                       	dc.b	smpsNoAttack, $01
0009005B E112                       	smpsAlterNote       $12
0009005D E701                       	dc.b	smpsNoAttack, $01
0009005F E10C                       	smpsAlterNote       $0C
00090061 E701                       	dc.b	smpsNoAttack, $01
00090063 E108                       	smpsAlterNote       $08
00090065 E701                       	dc.b	smpsNoAttack, $01
00090067 E10C                       	smpsAlterNote       $0C
00090069 E701                       	dc.b	smpsNoAttack, $01
0009006B E10F                       	smpsAlterNote       $0F
0009006D E701                       	dc.b	smpsNoAttack, $01
0009006F E113                       	smpsAlterNote       $13
00090071 E701                       	dc.b	smpsNoAttack, $01
00090073 E10F                       	smpsAlterNote       $0F
00090075 E701                       	dc.b	smpsNoAttack, $01
00090077 E109                       	smpsAlterNote       $09
00090079 E701                       	dc.b	smpsNoAttack, $01
0009007B E108                       	smpsAlterNote       $08
0009007D E701                       	dc.b	smpsNoAttack, $01
0009007F E10C                       	smpsAlterNote       $0C
00090081 E701                       	dc.b	smpsNoAttack, $01
00090083 E112                       	smpsAlterNote       $12
00090085 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090089 E10F                       	smpsAlterNote       $0F
0009008B E701                       	dc.b	smpsNoAttack, $01
0009008D E109                       	smpsAlterNote       $09
0009008F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090093 E10F                       	smpsAlterNote       $0F
00090095 E701                       	dc.b	smpsNoAttack, $01
00090097 E112                       	smpsAlterNote       $12
00090099 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009009D E10C                       	smpsAlterNote       $0C
0009009F E701                       	dc.b	smpsNoAttack, $01
000900A1 E108                       	smpsAlterNote       $08
000900A3 E701                       	dc.b	smpsNoAttack, $01
000900A5 E109                       	smpsAlterNote       $09
000900A7 E701                       	dc.b	smpsNoAttack, $01
000900A9 E10C                       	smpsAlterNote       $0C
000900AB B50A                       	dc.b	nE4, $0A
000900AD E10D                       	smpsAlterNote       $0D
000900AF B60E                       	dc.b	nF4, $0E
000900B1 E107                       	smpsAlterNote       $07
000900B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900B7 E10D                       	smpsAlterNote       $0D
000900B9 E701                       	dc.b	smpsNoAttack, $01
000900BB E110                       	smpsAlterNote       $10
000900BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900C1 E10A                       	smpsAlterNote       $0A
000900C3 E701                       	dc.b	smpsNoAttack, $01
000900C5 E106                       	smpsAlterNote       $06
000900C7 E701                       	dc.b	smpsNoAttack, $01
000900C9 E107                       	smpsAlterNote       $07
000900CB E701                       	dc.b	smpsNoAttack, $01
000900CD E10D                       	smpsAlterNote       $0D
000900CF E701                       	dc.b	smpsNoAttack, $01
000900D1 E111                       	smpsAlterNote       $11
000900D3 E701                       	dc.b	smpsNoAttack, $01
000900D5 E10D                       	smpsAlterNote       $0D
000900D7 B80D                       	dc.b	nG4, $0D
000900D9 E10A                       	smpsAlterNote       $0A
000900DB E701                       	dc.b	smpsNoAttack, $01
000900DD E107                       	smpsAlterNote       $07
000900DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900E3 E10D                       	smpsAlterNote       $0D
000900E5 E701                       	dc.b	smpsNoAttack, $01
000900E7 E111                       	smpsAlterNote       $11
000900E9 E701                       	dc.b	smpsNoAttack, $01
000900EB E110                       	smpsAlterNote       $10
000900ED E701                       	dc.b	smpsNoAttack, $01
000900EF E10A                       	smpsAlterNote       $0A
000900F1 E701                       	dc.b	smpsNoAttack, $01
000900F3 E106                       	smpsAlterNote       $06
000900F5 E701                       	dc.b	smpsNoAttack, $01
000900F7 E10A                       	smpsAlterNote       $0A
000900F9 E701                       	dc.b	smpsNoAttack, $01
000900FB E10D                       	smpsAlterNote       $0D
000900FD E701                       	dc.b	smpsNoAttack, $01
000900FF E111                       	smpsAlterNote       $11
00090101 E701                       	dc.b	smpsNoAttack, $01
00090103 E10D                       	smpsAlterNote       $0D
00090105 E701                       	dc.b	smpsNoAttack, $01
00090107 E107                       	smpsAlterNote       $07
00090109 E701                       	dc.b	smpsNoAttack, $01
0009010B E106                       	smpsAlterNote       $06
0009010D E701                       	dc.b	smpsNoAttack, $01
0009010F E10A                       	smpsAlterNote       $0A
00090111 E701                       	dc.b	smpsNoAttack, $01
00090113 E110                       	smpsAlterNote       $10
00090115 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090119 E10D                       	smpsAlterNote       $0D
0009011B E701                       	dc.b	smpsNoAttack, $01
0009011D E10F                       	smpsAlterNote       $0F
0009011F BA0D                       	dc.b	nA4, $0D
00090121 E10C                       	smpsAlterNote       $0C
00090123 E701                       	dc.b	smpsNoAttack, $01
00090125 E108                       	smpsAlterNote       $08
00090127 E701                       	dc.b	smpsNoAttack, $01
00090129 E109                       	smpsAlterNote       $09
0009012B E701                       	dc.b	smpsNoAttack, $01
0009012D E10F                       	smpsAlterNote       $0F
0009012F E701                       	dc.b	smpsNoAttack, $01
00090131 E113                       	smpsAlterNote       $13
00090133 E701                       	dc.b	smpsNoAttack, $01
00090135 E10F                       	smpsAlterNote       $0F
00090137 E701                       	dc.b	smpsNoAttack, $01
00090139 E10C                       	smpsAlterNote       $0C
0009013B E701                       	dc.b	smpsNoAttack, $01
0009013D E108                       	smpsAlterNote       $08
0009013F E701                       	dc.b	smpsNoAttack, $01
00090141 E10C                       	smpsAlterNote       $0C
00090143 E701                       	dc.b	smpsNoAttack, $01
00090145 E112                       	smpsAlterNote       $12
00090147 E701                       	dc.b	smpsNoAttack, $01
00090149 E113                       	smpsAlterNote       $13
0009014B E701                       	dc.b	smpsNoAttack, $01
0009014D E10F                       	smpsAlterNote       $0F
0009014F E701                       	dc.b	smpsNoAttack, $01
00090151 E109                       	smpsAlterNote       $09
00090153 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090157 E10C                       	smpsAlterNote       $0C
00090159 E701                       	dc.b	smpsNoAttack, $01
0009015B E112                       	smpsAlterNote       $12
0009015D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090161 E10C                       	smpsAlterNote       $0C
00090163 E701                       	dc.b	smpsNoAttack, $01
00090165 E109                       	smpsAlterNote       $09
00090167 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009016B E10F                       	smpsAlterNote       $0F
0009016D E701                       	dc.b	smpsNoAttack, $01
0009016F E113                       	smpsAlterNote       $13
00090171 E701                       	dc.b	smpsNoAttack, $01
00090173 E112                       	smpsAlterNote       $12
00090175 E701                       	dc.b	smpsNoAttack, $01
00090177 E10C                       	smpsAlterNote       $0C
00090179 E701                       	dc.b	smpsNoAttack, $01
0009017B E109                       	smpsAlterNote       $09
0009017D 8001                       	dc.b	nRst, $01
0009017F E10D                       	smpsAlterNote       $0D
00090181 B60A                       	dc.b	nF4, $0A
00090183 E10C                       	smpsAlterNote       $0C
00090185 B506 8001                  	dc.b	nE4, $06, nRst, $01
00090189 E10B                       	smpsAlterNote       $0B
0009018B B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0009018F E10C                       	smpsAlterNote       $0C
00090191 B503                       	dc.b	nE4, $03
00090193 E10D                       	smpsAlterNote       $0D
00090195 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0009019F E10C                       	smpsAlterNote       $0C
000901A1 E701                       	dc.b	smpsNoAttack, $01
000901A3 E108                       	smpsAlterNote       $08
000901A5 E701                       	dc.b	smpsNoAttack, $01
000901A7 E10C                       	smpsAlterNote       $0C
000901A9 E701                       	dc.b	smpsNoAttack, $01
000901AB E112                       	smpsAlterNote       $12
000901AD E701                       	dc.b	smpsNoAttack, $01
000901AF E113                       	smpsAlterNote       $13
000901B1 E701                       	dc.b	smpsNoAttack, $01
000901B3 E10F                       	smpsAlterNote       $0F
000901B5 E701                       	dc.b	smpsNoAttack, $01
000901B7 E109                       	smpsAlterNote       $09
000901B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901BD E10C                       	smpsAlterNote       $0C
000901BF E701                       	dc.b	smpsNoAttack, $01
000901C1 E112                       	smpsAlterNote       $12
000901C3 E701                       	dc.b	smpsNoAttack, $01
000901C5 E113                       	smpsAlterNote       $13
000901C7 8001                       	dc.b	nRst, $01
000901C9 E10D                       	smpsAlterNote       $0D
000901CB C20D                       	dc.b	nF5, $0D
000901CD E10A                       	smpsAlterNote       $0A
000901CF E701                       	dc.b	smpsNoAttack, $01
000901D1 E106                       	smpsAlterNote       $06
000901D3 E701                       	dc.b	smpsNoAttack, $01
000901D5 E10A                       	smpsAlterNote       $0A
000901D7 E701                       	dc.b	smpsNoAttack, $01
000901D9 E110                       	smpsAlterNote       $10
000901DB E701                       	dc.b	smpsNoAttack, $01
000901DD E111                       	smpsAlterNote       $11
000901DF E701                       	dc.b	smpsNoAttack, $01
000901E1 E10D                       	smpsAlterNote       $0D
000901E3 E701                       	dc.b	smpsNoAttack, $01
000901E5 E107                       	smpsAlterNote       $07
000901E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901EB E10A                       	smpsAlterNote       $0A
000901ED E701                       	dc.b	smpsNoAttack, $01
000901EF E110                       	smpsAlterNote       $10
000901F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901F5 E10A                       	smpsAlterNote       $0A
000901F7 E701                       	dc.b	smpsNoAttack, $01
000901F9 E107                       	smpsAlterNote       $07
000901FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901FF E10D                       	smpsAlterNote       $0D
00090201 E701                       	dc.b	smpsNoAttack, $01
00090203 E111                       	smpsAlterNote       $11
00090205 E701                       	dc.b	smpsNoAttack, $01
00090207 E110                       	smpsAlterNote       $10
00090209 E701                       	dc.b	smpsNoAttack, $01
0009020B E10A                       	smpsAlterNote       $0A
0009020D E701                       	dc.b	smpsNoAttack, $01
0009020F E106                       	smpsAlterNote       $06
00090211 E701                       	dc.b	smpsNoAttack, $01
00090213 E10A                       	smpsAlterNote       $0A
00090215 E701                       	dc.b	smpsNoAttack, $01
00090217 E10D                       	smpsAlterNote       $0D
00090219 E701                       	dc.b	smpsNoAttack, $01
0009021B E111                       	smpsAlterNote       $11
0009021D E701                       	dc.b	smpsNoAttack, $01
0009021F E10D                       	smpsAlterNote       $0D
00090221 E701                       	dc.b	smpsNoAttack, $01
00090223 E107                       	smpsAlterNote       $07
00090225 E701                       	dc.b	smpsNoAttack, $01
00090227 E106                       	smpsAlterNote       $06
00090229 E701                       	dc.b	smpsNoAttack, $01
0009022B E10A                       	smpsAlterNote       $0A
0009022D E701                       	dc.b	smpsNoAttack, $01
0009022F E110                       	smpsAlterNote       $10
00090231 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090235 E10D                       	smpsAlterNote       $0D
00090237 E701                       	dc.b	smpsNoAttack, $01
00090239 E107                       	smpsAlterNote       $07
0009023B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009023F E10D                       	smpsAlterNote       $0D
00090241 E701                       	dc.b	smpsNoAttack, $01
00090243 E110                       	smpsAlterNote       $10
00090245 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090249 E10A                       	smpsAlterNote       $0A
0009024B E701                       	dc.b	smpsNoAttack, $01
0009024D E106                       	smpsAlterNote       $06
0009024F E701                       	dc.b	smpsNoAttack, $01
00090251 E107                       	smpsAlterNote       $07
00090253 E701                       	dc.b	smpsNoAttack, $01
00090255 E10D                       	smpsAlterNote       $0D
00090257 E701                       	dc.b	smpsNoAttack, $01
00090259 E111                       	smpsAlterNote       $11
0009025B E701                       	dc.b	smpsNoAttack, $01
0009025D E10D                       	smpsAlterNote       $0D
0009025F E701                       	dc.b	smpsNoAttack, $01
00090261 E10A                       	smpsAlterNote       $0A
00090263 E701                       	dc.b	smpsNoAttack, $01
00090265 E107                       	smpsAlterNote       $07
00090267 8001                       	dc.b	nRst, $01
00090269 E10D                       	smpsAlterNote       $0D
0009026B C206 8001                  	dc.b	nF5, $06, nRst, $01
00090271 E601                       	smpsAlterVol        $01
00090273 E110                       	smpsAlterNote       $10
00090275 BB0D                       	dc.b	nBb4, $0D
00090277 E10A                       	smpsAlterNote       $0A
00090279 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009027D E110                       	smpsAlterNote       $10
0009027F E701                       	dc.b	smpsNoAttack, $01
00090281 E113                       	smpsAlterNote       $13
00090283 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090287 E10D                       	smpsAlterNote       $0D
00090289 E701                       	dc.b	smpsNoAttack, $01
0009028B E109                       	smpsAlterNote       $09
0009028D E701                       	dc.b	smpsNoAttack, $01
0009028F E10A                       	smpsAlterNote       $0A
00090291 E701                       	dc.b	smpsNoAttack, $01
00090293 E110                       	smpsAlterNote       $10
00090295 E701                       	dc.b	smpsNoAttack, $01
00090297 E114                       	smpsAlterNote       $14
00090299 E701                       	dc.b	smpsNoAttack, $01
0009029B E110                       	smpsAlterNote       $10
0009029D E701                       	dc.b	smpsNoAttack, $01
0009029F E10D                       	smpsAlterNote       $0D
000902A1 E701                       	dc.b	smpsNoAttack, $01
000902A3 E109                       	smpsAlterNote       $09
000902A5 E701                       	dc.b	smpsNoAttack, $01
000902A7 E10A                       	smpsAlterNote       $0A
000902A9 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000902AD E107                       	smpsAlterNote       $07
000902AF E701                       	dc.b	smpsNoAttack, $01
000902B1 E103                       	smpsAlterNote       $03
000902B3 E701                       	dc.b	smpsNoAttack, $01
000902B5 E107                       	smpsAlterNote       $07
000902B7 E701                       	dc.b	smpsNoAttack, $01
000902B9 E10D                       	smpsAlterNote       $0D
000902BB E701                       	dc.b	smpsNoAttack, $01
000902BD E10E                       	smpsAlterNote       $0E
000902BF E701                       	dc.b	smpsNoAttack, $01
000902C1 E10A                       	smpsAlterNote       $0A
000902C3 E701                       	dc.b	smpsNoAttack, $01
000902C5 E104                       	smpsAlterNote       $04
000902C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902CB E107                       	smpsAlterNote       $07
000902CD E701                       	dc.b	smpsNoAttack, $01
000902CF E10D                       	smpsAlterNote       $0D
000902D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902D5 E107                       	smpsAlterNote       $07
000902D7 E701                       	dc.b	smpsNoAttack, $01
000902D9 E104                       	smpsAlterNote       $04
000902DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902DF E10B                       	smpsAlterNote       $0B
000902E1 BF0D                       	dc.b	nD5, $0D
000902E3 E108                       	smpsAlterNote       $08
000902E5 E701                       	dc.b	smpsNoAttack, $01
000902E7 E105                       	smpsAlterNote       $05
000902E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902ED E10B                       	smpsAlterNote       $0B
000902EF E701                       	dc.b	smpsNoAttack, $01
000902F1 E10F                       	smpsAlterNote       $0F
000902F3 E701                       	dc.b	smpsNoAttack, $01
000902F5 E10E                       	smpsAlterNote       $0E
000902F7 E701                       	dc.b	smpsNoAttack, $01
000902F9 E108                       	smpsAlterNote       $08
000902FB E701                       	dc.b	smpsNoAttack, $01
000902FD E104                       	smpsAlterNote       $04
000902FF E701                       	dc.b	smpsNoAttack, $01
00090301 E108                       	smpsAlterNote       $08
00090303 E701                       	dc.b	smpsNoAttack, $01
00090305 E10B                       	smpsAlterNote       $0B
00090307 E701                       	dc.b	smpsNoAttack, $01
00090309 E10F                       	smpsAlterNote       $0F
0009030B E701                       	dc.b	smpsNoAttack, $01
0009030D E10B                       	smpsAlterNote       $0B
0009030F E701                       	dc.b	smpsNoAttack, $01
00090311 E105                       	smpsAlterNote       $05
00090313 E701                       	dc.b	smpsNoAttack, $01
00090315 E104                       	smpsAlterNote       $04
00090317 E701                       	dc.b	smpsNoAttack, $01
00090319 E105                       	smpsAlterNote       $05
0009031B 8001                       	dc.b	nRst, $01
0009031D E10C                       	smpsAlterNote       $0C
0009031F C10C                       	dc.b	nE5, $0C
00090321 E10D                       	smpsAlterNote       $0D
00090323 C201                       	dc.b	nF5, $01
00090325 E10E                       	smpsAlterNote       $0E
00090327 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0009032B E10D                       	smpsAlterNote       $0D
0009032D C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00090331 E10A                       	smpsAlterNote       $0A
00090333 E701                       	dc.b	smpsNoAttack, $01
00090335 E106                       	smpsAlterNote       $06
00090337 E701                       	dc.b	smpsNoAttack, $01
00090339 E10A                       	smpsAlterNote       $0A
0009033B E701                       	dc.b	smpsNoAttack, $01
0009033D E10D                       	smpsAlterNote       $0D
0009033F E701                       	dc.b	smpsNoAttack, $01
00090341 E111                       	smpsAlterNote       $11
00090343 E701                       	dc.b	smpsNoAttack, $01
00090345 E10D                       	smpsAlterNote       $0D
00090347 E701                       	dc.b	smpsNoAttack, $01
00090349 E107                       	smpsAlterNote       $07
0009034B E701                       	dc.b	smpsNoAttack, $01
0009034D E106                       	smpsAlterNote       $06
0009034F E701                       	dc.b	smpsNoAttack, $01
00090351 E10A                       	smpsAlterNote       $0A
00090353 E701                       	dc.b	smpsNoAttack, $01
00090355 E110                       	smpsAlterNote       $10
00090357 E701                       	dc.b	smpsNoAttack, $01
00090359 E111                       	smpsAlterNote       $11
0009035B 8001                       	dc.b	nRst, $01
0009035D E10D                       	smpsAlterNote       $0D
0009035F C40D                       	dc.b	nG5, $0D
00090361 E10A                       	smpsAlterNote       $0A
00090363 E701                       	dc.b	smpsNoAttack, $01
00090365 E106                       	smpsAlterNote       $06
00090367 E701                       	dc.b	smpsNoAttack, $01
00090369 E10A                       	smpsAlterNote       $0A
0009036B E701                       	dc.b	smpsNoAttack, $01
0009036D E10D                       	smpsAlterNote       $0D
0009036F E701                       	dc.b	smpsNoAttack, $01
00090371 E10C                       	smpsAlterNote       $0C
00090373 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0009037F 8001                       	dc.b	nRst, $01
00090381 E10D                       	smpsAlterNote       $0D
00090383 C20D                       	dc.b	nF5, $0D
00090385 E10A                       	smpsAlterNote       $0A
00090387 E701                       	dc.b	smpsNoAttack, $01
00090389 E106                       	smpsAlterNote       $06
0009038B E701                       	dc.b	smpsNoAttack, $01
0009038D E10A                       	smpsAlterNote       $0A
0009038F E701                       	dc.b	smpsNoAttack, $01
00090391 E110                       	smpsAlterNote       $10
00090393 E701                       	dc.b	smpsNoAttack, $01
00090395 E111                       	smpsAlterNote       $11
00090397 E701                       	dc.b	smpsNoAttack, $01
00090399 E10D                       	smpsAlterNote       $0D
0009039B E701                       	dc.b	smpsNoAttack, $01
0009039D E107                       	smpsAlterNote       $07
0009039F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903A3 E10A                       	smpsAlterNote       $0A
000903A5 E701                       	dc.b	smpsNoAttack, $01
000903A7 E110                       	smpsAlterNote       $10
000903A9 E701                       	dc.b	smpsNoAttack, $01
000903AB E111                       	smpsAlterNote       $11
000903AD 8001                       	dc.b	nRst, $01
000903AF E10F                       	smpsAlterNote       $0F
000903B1 C60A                       	dc.b	nA5, $0A
000903B3 E10D                       	smpsAlterNote       $0D
000903B5 C406 8001                  	dc.b	nG5, $06, nRst, $01
000903B9 E10C                       	smpsAlterNote       $0C
000903BB C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000903C7 8001                       	dc.b	nRst, $01
000903C9 E10D                       	smpsAlterNote       $0D
000903CB C20D                       	dc.b	nF5, $0D
000903CD E107                       	smpsAlterNote       $07
000903CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903D3 E10A                       	smpsAlterNote       $0A
000903D5 E701                       	dc.b	smpsNoAttack, $01
000903D7 E110                       	smpsAlterNote       $10
000903D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903DD E10A                       	smpsAlterNote       $0A
000903DF E701                       	dc.b	smpsNoAttack, $01
000903E1 E107                       	smpsAlterNote       $07
000903E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903E7 E10D                       	smpsAlterNote       $0D
000903E9 E701                       	dc.b	smpsNoAttack, $01
000903EB E111                       	smpsAlterNote       $11
000903ED E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000903F1 E10D                       	smpsAlterNote       $0D
000903F3 C40D                       	dc.b	nG5, $0D
000903F5 E107                       	smpsAlterNote       $07
000903F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903FB E10A                       	smpsAlterNote       $0A
000903FD E701                       	dc.b	smpsNoAttack, $01
000903FF E10D                       	smpsAlterNote       $0D
00090401 8001                       	dc.b	nRst, $01
00090403 E10C                       	smpsAlterNote       $0C
00090405 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00090411 E10D                       	smpsAlterNote       $0D
00090413 C20E                       	dc.b	nF5, $0E
00090415 E107                       	smpsAlterNote       $07
00090417 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009041B E10D                       	smpsAlterNote       $0D
0009041D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090423 E0C0                       	smpsPan             panCenter, $00
00090425 E603                       	smpsAlterVol        $03
00090427 E108                       	smpsAlterNote       $08
00090429 B406                       	dc.b	nEb4, $06
0009042B E10C                       	smpsAlterNote       $0C
0009042D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00090431 E108                       	smpsAlterNote       $08
00090433 B403                       	dc.b	nEb4, $03
00090435 E109                       	smpsAlterNote       $09
00090437 B803 8001                  	dc.b	nG4, $03, nRst, $01
0009043B E10C                       	smpsAlterNote       $0C
0009043D BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00090445 03                         	dc.b	$03
00090446 E6FD                       	smpsAlterVol        $FD
00090448 F6F1 F4                    	smpsJump            music84_Jump00
0009044B                            
0009044B                            ; PSG1 Data
0009044B                            music84_PSG1:
0009044B E1FD                       	smpsAlterNote       $FD
0009044D EC04                       	smpsPSGAlterVol     $04
0009044F 9203                       	dc.b	nF1, $03
00090451 E1FE                       	smpsAlterNote       $FE
00090453 9603                       	dc.b	nA1, $03
00090455 EC04                       	smpsPSGAlterVol     $04
00090457 E701                       	dc.b	smpsNoAttack, $01
00090459 E1FF                       	smpsAlterNote       $FF
0009045B ECFC                       	smpsPSGAlterVol     $FC
0009045D 9B03                       	dc.b	nD2, $03
0009045F E1FD                       	smpsAlterNote       $FD
00090461 9403                       	dc.b	nG1, $03
00090463 EC04                       	smpsPSGAlterVol     $04
00090465 E701                       	dc.b	smpsNoAttack, $01
00090467 E1FE                       	smpsAlterNote       $FE
00090469 ECFC                       	smpsPSGAlterVol     $FC
0009046B 9703                       	dc.b	nBb1, $03
0009046D E1FF                       	smpsAlterNote       $FF
0009046F 9B03                       	dc.b	nD2, $03
00090471 EC04                       	smpsPSGAlterVol     $04
00090473 E701                       	dc.b	smpsNoAttack, $01
00090475 E1FE                       	smpsAlterNote       $FE
00090477 ECFC                       	smpsPSGAlterVol     $FC
00090479 A002                       	dc.b	nG2, $02
0009047B EC04                       	smpsPSGAlterVol     $04
0009047D E701                       	dc.b	smpsNoAttack, $01
0009047F E1FF                       	smpsAlterNote       $FF
00090481 ECFC                       	smpsPSGAlterVol     $FC
00090483 A203                       	dc.b	nA2, $03
00090485 EC0B                       	smpsPSGAlterVol     $0B
00090487 800A                       	dc.b	nRst, $0A
00090489 E105                       	smpsAlterNote       $05
0009048B 01                         	dc.b	$01
0009048C E1FC                       	smpsAlterNote       $FC
0009048E 01                         	dc.b	$01
0009048F E105                       	smpsAlterNote       $05
00090491 01                         	dc.b	$01
00090492 E1FD                       	smpsAlterNote       $FD
00090494 01                         	dc.b	$01
00090495 E105                       	smpsAlterNote       $05
00090497 01                         	dc.b	$01
00090498 E1FD                       	smpsAlterNote       $FD
0009049A 01                         	dc.b	$01
0009049B E1FA                       	smpsAlterNote       $FA
0009049D 01                         	dc.b	$01
0009049E E1FC                       	smpsAlterNote       $FC
000904A0 01                         	dc.b	$01
000904A1 E105                       	smpsAlterNote       $05
000904A3 01                         	dc.b	$01
000904A4 E108                       	smpsAlterNote       $08
000904A6 0101                       	dc.b	$01, $01
000904A8 E105                       	smpsAlterNote       $05
000904AA 01                         	dc.b	$01
000904AB E1FA                       	smpsAlterNote       $FA
000904AD 0101                       	dc.b	$01, $01
000904AF E1FD                       	smpsAlterNote       $FD
000904B1 01                         	dc.b	$01
000904B2 E105                       	smpsAlterNote       $05
000904B4 01                         	dc.b	$01
000904B5 E108                       	smpsAlterNote       $08
000904B7 01                         	dc.b	$01
000904B8 E105                       	smpsAlterNote       $05
000904BA 01                         	dc.b	$01
000904BB E1FC                       	smpsAlterNote       $FC
000904BD 01                         	dc.b	$01
000904BE E105                       	smpsAlterNote       $05
000904C0 01                         	dc.b	$01
000904C1 E1FD                       	smpsAlterNote       $FD
000904C3 01                         	dc.b	$01
000904C4                            
000904C4                            music84_Jump07:
000904C4 E105                       	smpsAlterNote       $05
000904C6 8001                       	dc.b	nRst, $01
000904C8 E1FD                       	smpsAlterNote       $FD
000904CA 01                         	dc.b	$01
000904CB E1FA                       	smpsAlterNote       $FA
000904CD 01                         	dc.b	$01
000904CE E1FC                       	smpsAlterNote       $FC
000904D0 01                         	dc.b	$01
000904D1 E1FD                       	smpsAlterNote       $FD
000904D3 ECF5                       	smpsPSGAlterVol     $F5
000904D5 9206                       	dc.b	nF1, $06
000904D7 EC04                       	smpsPSGAlterVol     $04
000904D9 E701                       	dc.b	smpsNoAttack, $01
000904DB EC07                       	smpsPSGAlterVol     $07
000904DD 8003                       	dc.b	nRst, $03
000904DF ECF5                       	smpsPSGAlterVol     $F5
000904E1 9206                       	dc.b	nF1, $06
000904E3 EC04                       	smpsPSGAlterVol     $04
000904E5 E701                       	dc.b	smpsNoAttack, $01
000904E7 EC07                       	smpsPSGAlterVol     $07
000904E9 8006                       	dc.b	nRst, $06
000904EB E100                       	smpsAlterNote       $00
000904ED 01                         	dc.b	$01
000904EE E104                       	smpsAlterNote       $04
000904F0 01                         	dc.b	$01
000904F1 E100                       	smpsAlterNote       $00
000904F3 01                         	dc.b	$01
000904F4 E1FB                       	smpsAlterNote       $FB
000904F6 01                         	dc.b	$01
000904F7 E1FD                       	smpsAlterNote       $FD
000904F9 ECF5                       	smpsPSGAlterVol     $F5
000904FB 9406                       	dc.b	nG1, $06
000904FD EC04                       	smpsPSGAlterVol     $04
000904FF E701                       	dc.b	smpsNoAttack, $01
00090501 EC07                       	smpsPSGAlterVol     $07
00090503 8003                       	dc.b	nRst, $03
00090505 ECF5                       	smpsPSGAlterVol     $F5
00090507 9407                       	dc.b	nG1, $07
00090509 EC0B                       	smpsPSGAlterVol     $0B
0009050B 8006                       	dc.b	nRst, $06
0009050D E100                       	smpsAlterNote       $00
0009050F 01                         	dc.b	$01
00090510 E103                       	smpsAlterNote       $03
00090512 0101                       	dc.b	$01, $01
00090514 E1FD                       	smpsAlterNote       $FD
00090516 01                         	dc.b	$01
00090517 ECF5                       	smpsPSGAlterVol     $F5
00090519 9207                       	dc.b	nF1, $07
0009051B EC0B                       	smpsPSGAlterVol     $0B
0009051D 8004                       	dc.b	nRst, $04
0009051F ECF5                       	smpsPSGAlterVol     $F5
00090521 9206                       	dc.b	nF1, $06
00090523 EC04                       	smpsPSGAlterVol     $04
00090525 E701                       	dc.b	smpsNoAttack, $01
00090527 EC07                       	smpsPSGAlterVol     $07
00090529 8006                       	dc.b	nRst, $06
0009052B E103                       	smpsAlterNote       $03
0009052D 01                         	dc.b	$01
0009052E E104                       	smpsAlterNote       $04
00090530 01                         	dc.b	$01
00090531 E100                       	smpsAlterNote       $00
00090533 01                         	dc.b	$01
00090534 E1FA                       	smpsAlterNote       $FA
00090536 01                         	dc.b	$01
00090537 E1FD                       	smpsAlterNote       $FD
00090539 ECF5                       	smpsPSGAlterVol     $F5
0009053B 9206                       	dc.b	nF1, $06
0009053D EC04                       	smpsPSGAlterVol     $04
0009053F E701                       	dc.b	smpsNoAttack, $01
00090541 EC07                       	smpsPSGAlterVol     $07
00090543 8003                       	dc.b	nRst, $03
00090545 ECF5                       	smpsPSGAlterVol     $F5
00090547 9106                       	dc.b	nE1, $06
00090549 EC04                       	smpsPSGAlterVol     $04
0009054B E701                       	dc.b	smpsNoAttack, $01
0009054D EC07                       	smpsPSGAlterVol     $07
0009054F 8006                       	dc.b	nRst, $06
00090551 E100                       	smpsAlterNote       $00
00090553 01                         	dc.b	$01
00090554 E104                       	smpsAlterNote       $04
00090556 01                         	dc.b	$01
00090557 E100                       	smpsAlterNote       $00
00090559 01                         	dc.b	$01
0009055A E1FD                       	smpsAlterNote       $FD
0009055C 01                         	dc.b	$01
0009055D ECF5                       	smpsPSGAlterVol     $F5
0009055F 9206                       	dc.b	nF1, $06
00090561 EC04                       	smpsPSGAlterVol     $04
00090563 E701                       	dc.b	smpsNoAttack, $01
00090565 EC07                       	smpsPSGAlterVol     $07
00090567 8003                       	dc.b	nRst, $03
00090569 ECF5                       	smpsPSGAlterVol     $F5
0009056B 9207                       	dc.b	nF1, $07
0009056D EC0B                       	smpsPSGAlterVol     $0B
0009056F 8007                       	dc.b	nRst, $07
00090571 E103                       	smpsAlterNote       $03
00090573 0101                       	dc.b	$01, $01
00090575 E1FD                       	smpsAlterNote       $FD
00090577 01                         	dc.b	$01
00090578 E1FB                       	smpsAlterNote       $FB
0009057A 01                         	dc.b	$01
0009057B E1FD                       	smpsAlterNote       $FD
0009057D ECF5                       	smpsPSGAlterVol     $F5
0009057F 9406                       	dc.b	nG1, $06
00090581 EC0B                       	smpsPSGAlterVol     $0B
00090583 8004                       	dc.b	nRst, $04
00090585 ECF5                       	smpsPSGAlterVol     $F5
00090587 9406                       	dc.b	nG1, $06
00090589 EC04                       	smpsPSGAlterVol     $04
0009058B E701                       	dc.b	smpsNoAttack, $01
0009058D EC07                       	smpsPSGAlterVol     $07
0009058F 8006                       	dc.b	nRst, $06
00090591 E100                       	smpsAlterNote       $00
00090593 01                         	dc.b	$01
00090594 E104                       	smpsAlterNote       $04
00090596 01                         	dc.b	$01
00090597 E100                       	smpsAlterNote       $00
00090599 01                         	dc.b	$01
0009059A E1F9                       	smpsAlterNote       $F9
0009059C 01                         	dc.b	$01
0009059D E1FD                       	smpsAlterNote       $FD
0009059F ECF5                       	smpsPSGAlterVol     $F5
000905A1 9206                       	dc.b	nF1, $06
000905A3 EC04                       	smpsPSGAlterVol     $04
000905A5 E701                       	dc.b	smpsNoAttack, $01
000905A7 EC07                       	smpsPSGAlterVol     $07
000905A9 8003                       	dc.b	nRst, $03
000905AB ECF5                       	smpsPSGAlterVol     $F5
000905AD 9207                       	dc.b	nF1, $07
000905AF EC0B                       	smpsPSGAlterVol     $0B
000905B1 8006                       	dc.b	nRst, $06
000905B3 E100                       	smpsAlterNote       $00
000905B5 01                         	dc.b	$01
000905B6 E104                       	smpsAlterNote       $04
000905B8 01                         	dc.b	$01
000905B9 E103                       	smpsAlterNote       $03
000905BB 01                         	dc.b	$01
000905BC E1FD                       	smpsAlterNote       $FD
000905BE 01                         	dc.b	$01
000905BF ECF5                       	smpsPSGAlterVol     $F5
000905C1 9207                       	dc.b	nF1, $07
000905C3 EC0B                       	smpsPSGAlterVol     $0B
000905C5 8004                       	dc.b	nRst, $04
000905C7 ECF5                       	smpsPSGAlterVol     $F5
000905C9 9206                       	dc.b	nF1, $06
000905CB EC0B                       	smpsPSGAlterVol     $0B
000905CD 8007                       	dc.b	nRst, $07
000905CF E103                       	smpsAlterNote       $03
000905D1 0101                       	dc.b	$01, $01
000905D3 E100                       	smpsAlterNote       $00
000905D5 01                         	dc.b	$01
000905D6 E1FA                       	smpsAlterNote       $FA
000905D8 01                         	dc.b	$01
000905D9 E1FD                       	smpsAlterNote       $FD
000905DB ECF5                       	smpsPSGAlterVol     $F5
000905DD 9206                       	dc.b	nF1, $06
000905DF EC04                       	smpsPSGAlterVol     $04
000905E1 E701                       	dc.b	smpsNoAttack, $01
000905E3 EC07                       	smpsPSGAlterVol     $07
000905E5 8003                       	dc.b	nRst, $03
000905E7 ECF5                       	smpsPSGAlterVol     $F5
000905E9 9206                       	dc.b	nF1, $06
000905EB EC04                       	smpsPSGAlterVol     $04
000905ED E701                       	dc.b	smpsNoAttack, $01
000905EF EC07                       	smpsPSGAlterVol     $07
000905F1 8006                       	dc.b	nRst, $06
000905F3 E100                       	smpsAlterNote       $00
000905F5 01                         	dc.b	$01
000905F6 E104                       	smpsAlterNote       $04
000905F8 01                         	dc.b	$01
000905F9 E100                       	smpsAlterNote       $00
000905FB 01                         	dc.b	$01
000905FC E1FD                       	smpsAlterNote       $FD
000905FE 01                         	dc.b	$01
000905FF ECF5                       	smpsPSGAlterVol     $F5
00090601 9206                       	dc.b	nF1, $06
00090603 EC04                       	smpsPSGAlterVol     $04
00090605 E701                       	dc.b	smpsNoAttack, $01
00090607 EC07                       	smpsPSGAlterVol     $07
00090609 8003                       	dc.b	nRst, $03
0009060B ECF5                       	smpsPSGAlterVol     $F5
0009060D 9207                       	dc.b	nF1, $07
0009060F EC0B                       	smpsPSGAlterVol     $0B
00090611 8007                       	dc.b	nRst, $07
00090613 E103                       	smpsAlterNote       $03
00090615 0101                       	dc.b	$01, $01
00090617 E1FD                       	smpsAlterNote       $FD
00090619 01                         	dc.b	$01
0009061A E1FA                       	smpsAlterNote       $FA
0009061C 01                         	dc.b	$01
0009061D E1FD                       	smpsAlterNote       $FD
0009061F ECF5                       	smpsPSGAlterVol     $F5
00090621 9206                       	dc.b	nF1, $06
00090623 EC0B                       	smpsPSGAlterVol     $0B
00090625 8004                       	dc.b	nRst, $04
00090627 ECF5                       	smpsPSGAlterVol     $F5
00090629 9206                       	dc.b	nF1, $06
0009062B EC04                       	smpsPSGAlterVol     $04
0009062D E701                       	dc.b	smpsNoAttack, $01
0009062F EC07                       	smpsPSGAlterVol     $07
00090631 8006                       	dc.b	nRst, $06
00090633 E103                       	smpsAlterNote       $03
00090635 01                         	dc.b	$01
00090636 E104                       	smpsAlterNote       $04
00090638 01                         	dc.b	$01
00090639 E100                       	smpsAlterNote       $00
0009063B 01                         	dc.b	$01
0009063C E1FA                       	smpsAlterNote       $FA
0009063E 01                         	dc.b	$01
0009063F E1FD                       	smpsAlterNote       $FD
00090641 ECF5                       	smpsPSGAlterVol     $F5
00090643 9206                       	dc.b	nF1, $06
00090645 EC04                       	smpsPSGAlterVol     $04
00090647 E701                       	dc.b	smpsNoAttack, $01
00090649 EC07                       	smpsPSGAlterVol     $07
0009064B 8003                       	dc.b	nRst, $03
0009064D ECF5                       	smpsPSGAlterVol     $F5
0009064F 9206                       	dc.b	nF1, $06
00090651 EC04                       	smpsPSGAlterVol     $04
00090653 E701                       	dc.b	smpsNoAttack, $01
00090655 EC07                       	smpsPSGAlterVol     $07
00090657 8006                       	dc.b	nRst, $06
00090659 E100                       	smpsAlterNote       $00
0009065B 01                         	dc.b	$01
0009065C E104                       	smpsAlterNote       $04
0009065E 01                         	dc.b	$01
0009065F E103                       	smpsAlterNote       $03
00090661 01                         	dc.b	$01
00090662 E1FD                       	smpsAlterNote       $FD
00090664 01                         	dc.b	$01
00090665 ECF5                       	smpsPSGAlterVol     $F5
00090667 9107                       	dc.b	nE1, $07
00090669 EC0B                       	smpsPSGAlterVol     $0B
0009066B 8004                       	dc.b	nRst, $04
0009066D ECF5                       	smpsPSGAlterVol     $F5
0009066F 9106                       	dc.b	nE1, $06
00090671 EC0B                       	smpsPSGAlterVol     $0B
00090673 8007                       	dc.b	nRst, $07
00090675 E103                       	smpsAlterNote       $03
00090677 0101                       	dc.b	$01, $01
00090679 E100                       	smpsAlterNote       $00
0009067B 01                         	dc.b	$01
0009067C E1FA                       	smpsAlterNote       $FA
0009067E 01                         	dc.b	$01
0009067F E1FD                       	smpsAlterNote       $FD
00090681 ECF5                       	smpsPSGAlterVol     $F5
00090683 9106                       	dc.b	nE1, $06
00090685 EC04                       	smpsPSGAlterVol     $04
00090687 E701                       	dc.b	smpsNoAttack, $01
00090689 EC07                       	smpsPSGAlterVol     $07
0009068B 8003                       	dc.b	nRst, $03
0009068D ECF5                       	smpsPSGAlterVol     $F5
0009068F 9106                       	dc.b	nE1, $06
00090691 EC04                       	smpsPSGAlterVol     $04
00090693 E701                       	dc.b	smpsNoAttack, $01
00090695 EC07                       	smpsPSGAlterVol     $07
00090697 8006                       	dc.b	nRst, $06
00090699 E100                       	smpsAlterNote       $00
0009069B 01                         	dc.b	$01
0009069C E104                       	smpsAlterNote       $04
0009069E 01                         	dc.b	$01
0009069F E100                       	smpsAlterNote       $00
000906A1 01                         	dc.b	$01
000906A2 E1FA                       	smpsAlterNote       $FA
000906A4 01                         	dc.b	$01
000906A5 E1FD                       	smpsAlterNote       $FD
000906A7 ECF5                       	smpsPSGAlterVol     $F5
000906A9 9106                       	dc.b	nE1, $06
000906AB EC04                       	smpsPSGAlterVol     $04
000906AD E701                       	dc.b	smpsNoAttack, $01
000906AF EC07                       	smpsPSGAlterVol     $07
000906B1 8003                       	dc.b	nRst, $03
000906B3 ECF5                       	smpsPSGAlterVol     $F5
000906B5 9107 9106                  	dc.b	nE1, $07, nE1, $06
000906B9 EC04                       	smpsPSGAlterVol     $04
000906BB E701                       	dc.b	smpsNoAttack, $01
000906BD ECFC                       	smpsPSGAlterVol     $FC
000906BF 9103 9103                  	dc.b	nE1, $03, nE1, $03
000906C3 EC04                       	smpsPSGAlterVol     $04
000906C5 E701                       	dc.b	smpsNoAttack, $01
000906C7 ECFC                       	smpsPSGAlterVol     $FC
000906C9 9106                       	dc.b	nE1, $06
000906CB EC04                       	smpsPSGAlterVol     $04
000906CD E701                       	dc.b	smpsNoAttack, $01
000906CF EC07                       	smpsPSGAlterVol     $07
000906D1 8006                       	dc.b	nRst, $06
000906D3 E100                       	smpsAlterNote       $00
000906D5 01                         	dc.b	$01
000906D6 E104                       	smpsAlterNote       $04
000906D8 01                         	dc.b	$01
000906D9 E100                       	smpsAlterNote       $00
000906DB 01                         	dc.b	$01
000906DC E1FA                       	smpsAlterNote       $FA
000906DE 01                         	dc.b	$01
000906DF E1F9                       	smpsAlterNote       $F9
000906E1 01                         	dc.b	$01
000906E2 E1FD                       	smpsAlterNote       $FD
000906E4 01                         	dc.b	$01
000906E5 E103                       	smpsAlterNote       $03
000906E7 01                         	dc.b	$01
000906E8 E104                       	smpsAlterNote       $04
000906EA 01                         	dc.b	$01
000906EB E100                       	smpsAlterNote       $00
000906ED 01                         	dc.b	$01
000906EE E1FA                       	smpsAlterNote       $FA
000906F0 0101                       	dc.b	$01, $01
000906F2 E1FD                       	smpsAlterNote       $FD
000906F4 ECF5                       	smpsPSGAlterVol     $F5
000906F6 9206                       	dc.b	nF1, $06
000906F8 EC04                       	smpsPSGAlterVol     $04
000906FA E701                       	dc.b	smpsNoAttack, $01
000906FC EC07                       	smpsPSGAlterVol     $07
000906FE 8003                       	dc.b	nRst, $03
00090700 ECF5                       	smpsPSGAlterVol     $F5
00090702 9206                       	dc.b	nF1, $06
00090704 EC04                       	smpsPSGAlterVol     $04
00090706 E701                       	dc.b	smpsNoAttack, $01
00090708 EC07                       	smpsPSGAlterVol     $07
0009070A 8006                       	dc.b	nRst, $06
0009070C E100                       	smpsAlterNote       $00
0009070E 01                         	dc.b	$01
0009070F E104                       	smpsAlterNote       $04
00090711 01                         	dc.b	$01
00090712 E103                       	smpsAlterNote       $03
00090714 01                         	dc.b	$01
00090715 E1FD                       	smpsAlterNote       $FD
00090717 01                         	dc.b	$01
00090718 ECF5                       	smpsPSGAlterVol     $F5
0009071A 9407                       	dc.b	nG1, $07
0009071C EC0B                       	smpsPSGAlterVol     $0B
0009071E 8004                       	dc.b	nRst, $04
00090720 ECF5                       	smpsPSGAlterVol     $F5
00090722 9406                       	dc.b	nG1, $06
00090724 EC0B                       	smpsPSGAlterVol     $0B
00090726 8007                       	dc.b	nRst, $07
00090728 E103                       	smpsAlterNote       $03
0009072A 0101                       	dc.b	$01, $01
0009072C E1FD                       	smpsAlterNote       $FD
0009072E 01                         	dc.b	$01
0009072F E1F9                       	smpsAlterNote       $F9
00090731 01                         	dc.b	$01
00090732 E1FD                       	smpsAlterNote       $FD
00090734 ECF5                       	smpsPSGAlterVol     $F5
00090736 9206                       	dc.b	nF1, $06
00090738 EC04                       	smpsPSGAlterVol     $04
0009073A E701                       	dc.b	smpsNoAttack, $01
0009073C EC07                       	smpsPSGAlterVol     $07
0009073E 8003                       	dc.b	nRst, $03
00090740 ECF5                       	smpsPSGAlterVol     $F5
00090742 9206                       	dc.b	nF1, $06
00090744 EC04                       	smpsPSGAlterVol     $04
00090746 E701                       	dc.b	smpsNoAttack, $01
00090748 EC07                       	smpsPSGAlterVol     $07
0009074A 8006                       	dc.b	nRst, $06
0009074C E100                       	smpsAlterNote       $00
0009074E 01                         	dc.b	$01
0009074F E104                       	smpsAlterNote       $04
00090751 01                         	dc.b	$01
00090752 E100                       	smpsAlterNote       $00
00090754 01                         	dc.b	$01
00090755 E1FA                       	smpsAlterNote       $FA
00090757 01                         	dc.b	$01
00090758 E1FD                       	smpsAlterNote       $FD
0009075A ECF5                       	smpsPSGAlterVol     $F5
0009075C 9206                       	dc.b	nF1, $06
0009075E EC04                       	smpsPSGAlterVol     $04
00090760 E701                       	dc.b	smpsNoAttack, $01
00090762 EC07                       	smpsPSGAlterVol     $07
00090764 8003                       	dc.b	nRst, $03
00090766 ECF5                       	smpsPSGAlterVol     $F5
00090768 9107                       	dc.b	nE1, $07
0009076A EC0B                       	smpsPSGAlterVol     $0B
0009076C 8006                       	dc.b	nRst, $06
0009076E E100                       	smpsAlterNote       $00
00090770 01                         	dc.b	$01
00090771 E103                       	smpsAlterNote       $03
00090773 0101                       	dc.b	$01, $01
00090775 E1FD                       	smpsAlterNote       $FD
00090777 01                         	dc.b	$01
00090778 ECF5                       	smpsPSGAlterVol     $F5
0009077A 9207                       	dc.b	nF1, $07
0009077C EC0B                       	smpsPSGAlterVol     $0B
0009077E 8004                       	dc.b	nRst, $04
00090780 ECF5                       	smpsPSGAlterVol     $F5
00090782 9206                       	dc.b	nF1, $06
00090784 EC04                       	smpsPSGAlterVol     $04
00090786 E701                       	dc.b	smpsNoAttack, $01
00090788 EC07                       	smpsPSGAlterVol     $07
0009078A 8006                       	dc.b	nRst, $06
0009078C E103                       	smpsAlterNote       $03
0009078E 01                         	dc.b	$01
0009078F E104                       	smpsAlterNote       $04
00090791 01                         	dc.b	$01
00090792 E100                       	smpsAlterNote       $00
00090794 01                         	dc.b	$01
00090795 E1FB                       	smpsAlterNote       $FB
00090797 01                         	dc.b	$01
00090798 E1FD                       	smpsAlterNote       $FD
0009079A ECF5                       	smpsPSGAlterVol     $F5
0009079C 9406                       	dc.b	nG1, $06
0009079E EC04                       	smpsPSGAlterVol     $04
000907A0 E701                       	dc.b	smpsNoAttack, $01
000907A2 EC07                       	smpsPSGAlterVol     $07
000907A4 8003                       	dc.b	nRst, $03
000907A6 ECF5                       	smpsPSGAlterVol     $F5
000907A8 9406                       	dc.b	nG1, $06
000907AA EC04                       	smpsPSGAlterVol     $04
000907AC E701                       	dc.b	smpsNoAttack, $01
000907AE EC07                       	smpsPSGAlterVol     $07
000907B0 8006                       	dc.b	nRst, $06
000907B2 E100                       	smpsAlterNote       $00
000907B4 01                         	dc.b	$01
000907B5 E104                       	smpsAlterNote       $04
000907B7 01                         	dc.b	$01
000907B8 E100                       	smpsAlterNote       $00
000907BA 01                         	dc.b	$01
000907BB E1FD                       	smpsAlterNote       $FD
000907BD 01                         	dc.b	$01
000907BE ECF5                       	smpsPSGAlterVol     $F5
000907C0 9206                       	dc.b	nF1, $06
000907C2 EC04                       	smpsPSGAlterVol     $04
000907C4 E701                       	dc.b	smpsNoAttack, $01
000907C6 EC07                       	smpsPSGAlterVol     $07
000907C8 8003                       	dc.b	nRst, $03
000907CA ECF5                       	smpsPSGAlterVol     $F5
000907CC 9207                       	dc.b	nF1, $07
000907CE EC0B                       	smpsPSGAlterVol     $0B
000907D0 8007                       	dc.b	nRst, $07
000907D2 E103                       	smpsAlterNote       $03
000907D4 0101                       	dc.b	$01, $01
000907D6 E1FD                       	smpsAlterNote       $FD
000907D8 01                         	dc.b	$01
000907D9 E1FA                       	smpsAlterNote       $FA
000907DB 01                         	dc.b	$01
000907DC E1FD                       	smpsAlterNote       $FD
000907DE ECF5                       	smpsPSGAlterVol     $F5
000907E0 9206                       	dc.b	nF1, $06
000907E2 EC0B                       	smpsPSGAlterVol     $0B
000907E4 8004                       	dc.b	nRst, $04
000907E6 ECF5                       	smpsPSGAlterVol     $F5
000907E8 9206                       	dc.b	nF1, $06
000907EA EC04                       	smpsPSGAlterVol     $04
000907EC E701                       	dc.b	smpsNoAttack, $01
000907EE EC07                       	smpsPSGAlterVol     $07
000907F0 8006                       	dc.b	nRst, $06
000907F2 E100                       	smpsAlterNote       $00
000907F4 01                         	dc.b	$01
000907F5 E104                       	smpsAlterNote       $04
000907F7 01                         	dc.b	$01
000907F8 E100                       	smpsAlterNote       $00
000907FA 01                         	dc.b	$01
000907FB E1FA                       	smpsAlterNote       $FA
000907FD 01                         	dc.b	$01
000907FE E1FD                       	smpsAlterNote       $FD
00090800 ECF5                       	smpsPSGAlterVol     $F5
00090802 9206                       	dc.b	nF1, $06
00090804 EC04                       	smpsPSGAlterVol     $04
00090806 E704                       	dc.b	smpsNoAttack, $04
00090808 ECFC                       	smpsPSGAlterVol     $FC
0009080A 9207                       	dc.b	nF1, $07
0009080C EC0B                       	smpsPSGAlterVol     $0B
0009080E 8006                       	dc.b	nRst, $06
00090810 E100                       	smpsAlterNote       $00
00090812 01                         	dc.b	$01
00090813 E104                       	smpsAlterNote       $04
00090815 01                         	dc.b	$01
00090816 E103                       	smpsAlterNote       $03
00090818 01                         	dc.b	$01
00090819 E1FD                       	smpsAlterNote       $FD
0009081B 01                         	dc.b	$01
0009081C ECF5                       	smpsPSGAlterVol     $F5
0009081E 9207                       	dc.b	nF1, $07
00090820 EC0B                       	smpsPSGAlterVol     $0B
00090822 8004                       	dc.b	nRst, $04
00090824 ECF5                       	smpsPSGAlterVol     $F5
00090826 9206                       	dc.b	nF1, $06
00090828 EC0B                       	smpsPSGAlterVol     $0B
0009082A 8007                       	dc.b	nRst, $07
0009082C E103                       	smpsAlterNote       $03
0009082E 0101                       	dc.b	$01, $01
00090830 E100                       	smpsAlterNote       $00
00090832 01                         	dc.b	$01
00090833 E1FA                       	smpsAlterNote       $FA
00090835 01                         	dc.b	$01
00090836 E1FD                       	smpsAlterNote       $FD
00090838 ECF5                       	smpsPSGAlterVol     $F5
0009083A 9206                       	dc.b	nF1, $06
0009083C EC04                       	smpsPSGAlterVol     $04
0009083E E704                       	dc.b	smpsNoAttack, $04
00090840 ECFC                       	smpsPSGAlterVol     $FC
00090842 9206                       	dc.b	nF1, $06
00090844 EC04                       	smpsPSGAlterVol     $04
00090846 E701                       	dc.b	smpsNoAttack, $01
00090848 EC07                       	smpsPSGAlterVol     $07
0009084A 8006                       	dc.b	nRst, $06
0009084C E100                       	smpsAlterNote       $00
0009084E 01                         	dc.b	$01
0009084F E104                       	smpsAlterNote       $04
00090851 01                         	dc.b	$01
00090852 E100                       	smpsAlterNote       $00
00090854 01                         	dc.b	$01
00090855 E1FD                       	smpsAlterNote       $FD
00090857 01                         	dc.b	$01
00090858 ECF5                       	smpsPSGAlterVol     $F5
0009085A 9206                       	dc.b	nF1, $06
0009085C EC04                       	smpsPSGAlterVol     $04
0009085E E701                       	dc.b	smpsNoAttack, $01
00090860 EC07                       	smpsPSGAlterVol     $07
00090862 8003                       	dc.b	nRst, $03
00090864 ECF5                       	smpsPSGAlterVol     $F5
00090866 9207                       	dc.b	nF1, $07
00090868 EC0B                       	smpsPSGAlterVol     $0B
0009086A 8007                       	dc.b	nRst, $07
0009086C E103                       	smpsAlterNote       $03
0009086E 0101                       	dc.b	$01, $01
00090870 E1FD                       	smpsAlterNote       $FD
00090872 01                         	dc.b	$01
00090873 E1FA                       	smpsAlterNote       $FA
00090875 01                         	dc.b	$01
00090876 E1FD                       	smpsAlterNote       $FD
00090878 ECF5                       	smpsPSGAlterVol     $F5
0009087A 9106                       	dc.b	nE1, $06
0009087C EC0B                       	smpsPSGAlterVol     $0B
0009087E 8004                       	dc.b	nRst, $04
00090880 ECF5                       	smpsPSGAlterVol     $F5
00090882 9106                       	dc.b	nE1, $06
00090884 EC04                       	smpsPSGAlterVol     $04
00090886 E701                       	dc.b	smpsNoAttack, $01
00090888 EC07                       	smpsPSGAlterVol     $07
0009088A 8006                       	dc.b	nRst, $06
0009088C E100                       	smpsAlterNote       $00
0009088E 01                         	dc.b	$01
0009088F E104                       	smpsAlterNote       $04
00090891 01                         	dc.b	$01
00090892 E100                       	smpsAlterNote       $00
00090894 01                         	dc.b	$01
00090895 E1FA                       	smpsAlterNote       $FA
00090897 01                         	dc.b	$01
00090898 E1FD                       	smpsAlterNote       $FD
0009089A ECF5                       	smpsPSGAlterVol     $F5
0009089C 9106                       	dc.b	nE1, $06
0009089E EC04                       	smpsPSGAlterVol     $04
000908A0 E701                       	dc.b	smpsNoAttack, $01
000908A2 EC07                       	smpsPSGAlterVol     $07
000908A4 8003                       	dc.b	nRst, $03
000908A6 ECF5                       	smpsPSGAlterVol     $F5
000908A8 9106                       	dc.b	nE1, $06
000908AA EC04                       	smpsPSGAlterVol     $04
000908AC E701                       	dc.b	smpsNoAttack, $01
000908AE EC07                       	smpsPSGAlterVol     $07
000908B0 8006                       	dc.b	nRst, $06
000908B2 E100                       	smpsAlterNote       $00
000908B4 01                         	dc.b	$01
000908B5 E104                       	smpsAlterNote       $04
000908B7 01                         	dc.b	$01
000908B8 E103                       	smpsAlterNote       $03
000908BA 01                         	dc.b	$01
000908BB E1FD                       	smpsAlterNote       $FD
000908BD 01                         	dc.b	$01
000908BE ECF5                       	smpsPSGAlterVol     $F5
000908C0 9107                       	dc.b	nE1, $07
000908C2 EC0B                       	smpsPSGAlterVol     $0B
000908C4 8004                       	dc.b	nRst, $04
000908C6 ECF5                       	smpsPSGAlterVol     $F5
000908C8 9106                       	dc.b	nE1, $06
000908CA EC0B                       	smpsPSGAlterVol     $0B
000908CC 8007                       	dc.b	nRst, $07
000908CE E103                       	smpsAlterNote       $03
000908D0 0101                       	dc.b	$01, $01
000908D2 E100                       	smpsAlterNote       $00
000908D4 01                         	dc.b	$01
000908D5 E1FA                       	smpsAlterNote       $FA
000908D7 01                         	dc.b	$01
000908D8 E1FD                       	smpsAlterNote       $FD
000908DA ECF5                       	smpsPSGAlterVol     $F5
000908DC 9106                       	dc.b	nE1, $06
000908DE EC04                       	smpsPSGAlterVol     $04
000908E0 E701                       	dc.b	smpsNoAttack, $01
000908E2 EC07                       	smpsPSGAlterVol     $07
000908E4 8003                       	dc.b	nRst, $03
000908E6 ECF5                       	smpsPSGAlterVol     $F5
000908E8 9106                       	dc.b	nE1, $06
000908EA EC04                       	smpsPSGAlterVol     $04
000908EC E701                       	dc.b	smpsNoAttack, $01
000908EE EC07                       	smpsPSGAlterVol     $07
000908F0 8003                       	dc.b	nRst, $03
000908F2 ECF5                       	smpsPSGAlterVol     $F5
000908F4 9207                       	dc.b	nF1, $07
000908F6 EC0B                       	smpsPSGAlterVol     $0B
000908F8 8006                       	dc.b	nRst, $06
000908FA E100                       	smpsAlterNote       $00
000908FC 01                         	dc.b	$01
000908FD E104                       	smpsAlterNote       $04
000908FF 01                         	dc.b	$01
00090900 E103                       	smpsAlterNote       $03
00090902 01                         	dc.b	$01
00090903 E1FD                       	smpsAlterNote       $FD
00090905 01                         	dc.b	$01
00090906 E1F9                       	smpsAlterNote       $F9
00090908 01                         	dc.b	$01
00090909 E1FD                       	smpsAlterNote       $FD
0009090B 01                         	dc.b	$01
0009090C E100                       	smpsAlterNote       $00
0009090E 01                         	dc.b	$01
0009090F E104                       	smpsAlterNote       $04
00090911 01                         	dc.b	$01
00090912 E1FD                       	smpsAlterNote       $FD
00090914 ECF5                       	smpsPSGAlterVol     $F5
00090916 9203 9203                  	dc.b	nF1, $03, nF1, $03
0009091A EC04                       	smpsPSGAlterVol     $04
0009091C E701                       	dc.b	smpsNoAttack, $01
0009091E EC07                       	smpsPSGAlterVol     $07
00090920 8009                       	dc.b	nRst, $09
00090922 E100                       	smpsAlterNote       $00
00090924 01                         	dc.b	$01
00090925 E104                       	smpsAlterNote       $04
00090927 01                         	dc.b	$01
00090928 E103                       	smpsAlterNote       $03
0009092A 01                         	dc.b	$01
0009092B E1FD                       	smpsAlterNote       $FD
0009092D 01                         	dc.b	$01
0009092E E1F9                       	smpsAlterNote       $F9
00090930 01                         	dc.b	$01
00090931 E1FD                       	smpsAlterNote       $FD
00090933 01                         	dc.b	$01
00090934 E100                       	smpsAlterNote       $00
00090936 01                         	dc.b	$01
00090937 E104                       	smpsAlterNote       $04
00090939 01                         	dc.b	$01
0009093A E100                       	smpsAlterNote       $00
0009093C 01                         	dc.b	$01
0009093D E1FA                       	smpsAlterNote       $FA
0009093F 01                         	dc.b	$01
00090940 E1F9                       	smpsAlterNote       $F9
00090942 01                         	dc.b	$01
00090943 E1FD                       	smpsAlterNote       $FD
00090945 01                         	dc.b	$01
00090946 E103                       	smpsAlterNote       $03
00090948 0101                       	dc.b	$01, $01
0009094A E100                       	smpsAlterNote       $00
0009094C 01                         	dc.b	$01
0009094D E1FD                       	smpsAlterNote       $FD
0009094F ECF5                       	smpsPSGAlterVol     $F5
00090951 9202                       	dc.b	nF1, $02
00090953 EC04                       	smpsPSGAlterVol     $04
00090955 E701                       	dc.b	smpsNoAttack, $01
00090957 ECFC                       	smpsPSGAlterVol     $FC
00090959 9106                       	dc.b	nE1, $06
0009095B EC04                       	smpsPSGAlterVol     $04
0009095D E701                       	dc.b	smpsNoAttack, $01
0009095F EC07                       	smpsPSGAlterVol     $07
00090961 8006                       	dc.b	nRst, $06
00090963 E100                       	smpsAlterNote       $00
00090965 01                         	dc.b	$01
00090966 E104                       	smpsAlterNote       $04
00090968 01                         	dc.b	$01
00090969 E100                       	smpsAlterNote       $00
0009096B 01                         	dc.b	$01
0009096C E1FD                       	smpsAlterNote       $FD
0009096E 01                         	dc.b	$01
0009096F E1F9                       	smpsAlterNote       $F9
00090971 01                         	dc.b	$01
00090972 E1FD                       	smpsAlterNote       $FD
00090974 01                         	dc.b	$01
00090975 E103                       	smpsAlterNote       $03
00090977 01                         	dc.b	$01
00090978 E104                       	smpsAlterNote       $04
0009097A 01                         	dc.b	$01
0009097B E1FD                       	smpsAlterNote       $FD
0009097D ECF5                       	smpsPSGAlterVol     $F5
0009097F 9102                       	dc.b	nE1, $02
00090981 EC04                       	smpsPSGAlterVol     $04
00090983 E701                       	dc.b	smpsNoAttack, $01
00090985 ECFC                       	smpsPSGAlterVol     $FC
00090987 920D                       	dc.b	nF1, $0D
00090989 E100                       	smpsAlterNote       $00
0009098B E701                       	dc.b	smpsNoAttack, $01
0009098D E104                       	smpsAlterNote       $04
0009098F E701                       	dc.b	smpsNoAttack, $01
00090991 E100                       	smpsAlterNote       $00
00090993 E701                       	dc.b	smpsNoAttack, $01
00090995 E1FD                       	smpsAlterNote       $FD
00090997 E701                       	dc.b	smpsNoAttack, $01
00090999 E1F9                       	smpsAlterNote       $F9
0009099B E701                       	dc.b	smpsNoAttack, $01
0009099D E1FD                       	smpsAlterNote       $FD
0009099F E701                       	dc.b	smpsNoAttack, $01
000909A1 E103                       	smpsAlterNote       $03
000909A3 E701                       	dc.b	smpsNoAttack, $01
000909A5 E104                       	smpsAlterNote       $04
000909A7 E701                       	dc.b	smpsNoAttack, $01
000909A9 E100                       	smpsAlterNote       $00
000909AB E701                       	dc.b	smpsNoAttack, $01
000909AD E1FA                       	smpsAlterNote       $FA
000909AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000909B3 E1FD                       	smpsAlterNote       $FD
000909B5 E701                       	dc.b	smpsNoAttack, $01
000909B7 E103                       	smpsAlterNote       $03
000909B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000909BD E1FD                       	smpsAlterNote       $FD
000909BF E701                       	dc.b	smpsNoAttack, $01
000909C1 E1F9                       	smpsAlterNote       $F9
000909C3 E701                       	dc.b	smpsNoAttack, $01
000909C5 E1FA                       	smpsAlterNote       $FA
000909C7 E701                       	dc.b	smpsNoAttack, $01
000909C9 E100                       	smpsAlterNote       $00
000909CB EC04                       	smpsPSGAlterVol     $04
000909CD E701                       	dc.b	smpsNoAttack, $01
000909CF EC07                       	smpsPSGAlterVol     $07
000909D1 E104                       	smpsAlterNote       $04
000909D3 8001                       	dc.b	nRst, $01
000909D5 E100                       	smpsAlterNote       $00
000909D7 01                         	dc.b	$01
000909D8 E1FD                       	smpsAlterNote       $FD
000909DA 01                         	dc.b	$01
000909DB E1F9                       	smpsAlterNote       $F9
000909DD 01                         	dc.b	$01
000909DE E1FD                       	smpsAlterNote       $FD
000909E0 01                         	dc.b	$01
000909E1 E103                       	smpsAlterNote       $03
000909E3 01                         	dc.b	$01
000909E4 E104                       	smpsAlterNote       $04
000909E6 01                         	dc.b	$01
000909E7 E1FD                       	smpsAlterNote       $FD
000909E9 ECF5                       	smpsPSGAlterVol     $F5
000909EB 9106                       	dc.b	nE1, $06
000909ED EC04                       	smpsPSGAlterVol     $04
000909EF E701                       	dc.b	smpsNoAttack, $01
000909F1 EC07                       	smpsPSGAlterVol     $07
000909F3 8003                       	dc.b	nRst, $03
000909F5 ECF5                       	smpsPSGAlterVol     $F5
000909F7 9106                       	dc.b	nE1, $06
000909F9 EC04                       	smpsPSGAlterVol     $04
000909FB E701                       	dc.b	smpsNoAttack, $01
000909FD EC07                       	smpsPSGAlterVol     $07
000909FF 8006                       	dc.b	nRst, $06
00090A01 E100                       	smpsAlterNote       $00
00090A03 01                         	dc.b	$01
00090A04 E104                       	smpsAlterNote       $04
00090A06 01                         	dc.b	$01
00090A07 E100                       	smpsAlterNote       $00
00090A09 01                         	dc.b	$01
00090A0A E1FA                       	smpsAlterNote       $FA
00090A0C 01                         	dc.b	$01
00090A0D E1FD                       	smpsAlterNote       $FD
00090A0F ECF5                       	smpsPSGAlterVol     $F5
00090A11 9206                       	dc.b	nF1, $06
00090A13 EC04                       	smpsPSGAlterVol     $04
00090A15 E701                       	dc.b	smpsNoAttack, $01
00090A17 EC07                       	smpsPSGAlterVol     $07
00090A19 8003                       	dc.b	nRst, $03
00090A1B ECF5                       	smpsPSGAlterVol     $F5
00090A1D 9207                       	dc.b	nF1, $07
00090A1F EC0B                       	smpsPSGAlterVol     $0B
00090A21 8006                       	dc.b	nRst, $06
00090A23 E100                       	smpsAlterNote       $00
00090A25 01                         	dc.b	$01
00090A26 E103                       	smpsAlterNote       $03
00090A28 0101                       	dc.b	$01, $01
00090A2A E1FD                       	smpsAlterNote       $FD
00090A2C 01                         	dc.b	$01
00090A2D ECF5                       	smpsPSGAlterVol     $F5
00090A2F 9107                       	dc.b	nE1, $07
00090A31 EC0B                       	smpsPSGAlterVol     $0B
00090A33 8004                       	dc.b	nRst, $04
00090A35 ECF5                       	smpsPSGAlterVol     $F5
00090A37 9106                       	dc.b	nE1, $06
00090A39 EC04                       	smpsPSGAlterVol     $04
00090A3B E701                       	dc.b	smpsNoAttack, $01
00090A3D EC07                       	smpsPSGAlterVol     $07
00090A3F 8006                       	dc.b	nRst, $06
00090A41 E103                       	smpsAlterNote       $03
00090A43 01                         	dc.b	$01
00090A44 E104                       	smpsAlterNote       $04
00090A46 01                         	dc.b	$01
00090A47 E100                       	smpsAlterNote       $00
00090A49 01                         	dc.b	$01
00090A4A E1FA                       	smpsAlterNote       $FA
00090A4C 01                         	dc.b	$01
00090A4D E1FD                       	smpsAlterNote       $FD
00090A4F ECF5                       	smpsPSGAlterVol     $F5
00090A51 9106                       	dc.b	nE1, $06
00090A53 EC04                       	smpsPSGAlterVol     $04
00090A55 E701                       	dc.b	smpsNoAttack, $01
00090A57 EC07                       	smpsPSGAlterVol     $07
00090A59 8003                       	dc.b	nRst, $03
00090A5B ECF5                       	smpsPSGAlterVol     $F5
00090A5D 9106                       	dc.b	nE1, $06
00090A5F EC04                       	smpsPSGAlterVol     $04
00090A61 E701                       	dc.b	smpsNoAttack, $01
00090A63 EC07                       	smpsPSGAlterVol     $07
00090A65 8003                       	dc.b	nRst, $03
00090A67 ECF5                       	smpsPSGAlterVol     $F5
00090A69 9207                       	dc.b	nF1, $07
00090A6B EC0B                       	smpsPSGAlterVol     $0B
00090A6D 8006                       	dc.b	nRst, $06
00090A6F E100                       	smpsAlterNote       $00
00090A71 01                         	dc.b	$01
00090A72 E103                       	smpsAlterNote       $03
00090A74 0101                       	dc.b	$01, $01
00090A76 E1FD                       	smpsAlterNote       $FD
00090A78 01                         	dc.b	$01
00090A79 E1F9                       	smpsAlterNote       $F9
00090A7B 01                         	dc.b	$01
00090A7C E1FA                       	smpsAlterNote       $FA
00090A7E 01                         	dc.b	$01
00090A7F E100                       	smpsAlterNote       $00
00090A81 01                         	dc.b	$01
00090A82 E104                       	smpsAlterNote       $04
00090A84 01                         	dc.b	$01
00090A85 E1FD                       	smpsAlterNote       $FD
00090A87 ECF5                       	smpsPSGAlterVol     $F5
00090A89 9203 9203                  	dc.b	nF1, $03, nF1, $03
00090A8D EC04                       	smpsPSGAlterVol     $04
00090A8F E701                       	dc.b	smpsNoAttack, $01
00090A91 EC07                       	smpsPSGAlterVol     $07
00090A93 8009                       	dc.b	nRst, $09
00090A95 E100                       	smpsAlterNote       $00
00090A97 01                         	dc.b	$01
00090A98 E103                       	smpsAlterNote       $03
00090A9A 0101                       	dc.b	$01, $01
00090A9C E1FD                       	smpsAlterNote       $FD
00090A9E 01                         	dc.b	$01
00090A9F E1F9                       	smpsAlterNote       $F9
00090AA1 01                         	dc.b	$01
00090AA2 E1FA                       	smpsAlterNote       $FA
00090AA4 01                         	dc.b	$01
00090AA5 E100                       	smpsAlterNote       $00
00090AA7 01                         	dc.b	$01
00090AA8 E104                       	smpsAlterNote       $04
00090AAA 01                         	dc.b	$01
00090AAB E100                       	smpsAlterNote       $00
00090AAD 01                         	dc.b	$01
00090AAE E1FD                       	smpsAlterNote       $FD
00090AB0 01                         	dc.b	$01
00090AB1 E1F9                       	smpsAlterNote       $F9
00090AB3 01                         	dc.b	$01
00090AB4 E1FD                       	smpsAlterNote       $FD
00090AB6 01                         	dc.b	$01
00090AB7 E103                       	smpsAlterNote       $03
00090AB9 01                         	dc.b	$01
00090ABA E104                       	smpsAlterNote       $04
00090ABC 01                         	dc.b	$01
00090ABD E100                       	smpsAlterNote       $00
00090ABF 01                         	dc.b	$01
00090AC0 E1FD                       	smpsAlterNote       $FD
00090AC2 ECF5                       	smpsPSGAlterVol     $F5
00090AC4 9203 9106                  	dc.b	nF1, $03, nE1, $06
00090AC8 EC04                       	smpsPSGAlterVol     $04
00090ACA E701                       	dc.b	smpsNoAttack, $01
00090ACC EC07                       	smpsPSGAlterVol     $07
00090ACE 8006                       	dc.b	nRst, $06
00090AD0 E100                       	smpsAlterNote       $00
00090AD2 01                         	dc.b	$01
00090AD3 E104                       	smpsAlterNote       $04
00090AD5 01                         	dc.b	$01
00090AD6 E103                       	smpsAlterNote       $03
00090AD8 01                         	dc.b	$01
00090AD9 E1FD                       	smpsAlterNote       $FD
00090ADB 01                         	dc.b	$01
00090ADC E1F9                       	smpsAlterNote       $F9
00090ADE 01                         	dc.b	$01
00090ADF E1FD                       	smpsAlterNote       $FD
00090AE1 01                         	dc.b	$01
00090AE2 E100                       	smpsAlterNote       $00
00090AE4 01                         	dc.b	$01
00090AE5 E104                       	smpsAlterNote       $04
00090AE7 01                         	dc.b	$01
00090AE8 E1FD                       	smpsAlterNote       $FD
00090AEA ECF5                       	smpsPSGAlterVol     $F5
00090AEC 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00090AF0 E100                       	smpsAlterNote       $00
00090AF2 E701                       	dc.b	smpsNoAttack, $01
00090AF4 E104                       	smpsAlterNote       $04
00090AF6 E701                       	dc.b	smpsNoAttack, $01
00090AF8 E100                       	smpsAlterNote       $00
00090AFA E701                       	dc.b	smpsNoAttack, $01
00090AFC E1FD                       	smpsAlterNote       $FD
00090AFE E701                       	dc.b	smpsNoAttack, $01
00090B00 E1F9                       	smpsAlterNote       $F9
00090B02 E701                       	dc.b	smpsNoAttack, $01
00090B04 E1FD                       	smpsAlterNote       $FD
00090B06 E701                       	dc.b	smpsNoAttack, $01
00090B08 E103                       	smpsAlterNote       $03
00090B0A E701                       	dc.b	smpsNoAttack, $01
00090B0C E104                       	smpsAlterNote       $04
00090B0E E701                       	dc.b	smpsNoAttack, $01
00090B10 E100                       	smpsAlterNote       $00
00090B12 E701                       	dc.b	smpsNoAttack, $01
00090B14 E1FA                       	smpsAlterNote       $FA
00090B16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090B1A E1FD                       	smpsAlterNote       $FD
00090B1C E701                       	dc.b	smpsNoAttack, $01
00090B1E E103                       	smpsAlterNote       $03
00090B20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090B24 E100                       	smpsAlterNote       $00
00090B26 E701                       	dc.b	smpsNoAttack, $01
00090B28 E1FA                       	smpsAlterNote       $FA
00090B2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090B2E E100                       	smpsAlterNote       $00
00090B30 EC04                       	smpsPSGAlterVol     $04
00090B32 E701                       	dc.b	smpsNoAttack, $01
00090B34 EC07                       	smpsPSGAlterVol     $07
00090B36 E104                       	smpsAlterNote       $04
00090B38 8001                       	dc.b	nRst, $01
00090B3A E103                       	smpsAlterNote       $03
00090B3C 01                         	dc.b	$01
00090B3D E1FD                       	smpsAlterNote       $FD
00090B3F 01                         	dc.b	$01
00090B40 E1F9                       	smpsAlterNote       $F9
00090B42 01                         	dc.b	$01
00090B43 E1FD                       	smpsAlterNote       $FD
00090B45 01                         	dc.b	$01
00090B46 E100                       	smpsAlterNote       $00
00090B48 01                         	dc.b	$01
00090B49 E104                       	smpsAlterNote       $04
00090B4B 01                         	dc.b	$01
00090B4C E1FD                       	smpsAlterNote       $FD
00090B4E ECF5                       	smpsPSGAlterVol     $F5
00090B50 9106                       	dc.b	nE1, $06
00090B52 EC04                       	smpsPSGAlterVol     $04
00090B54 E701                       	dc.b	smpsNoAttack, $01
00090B56 EC07                       	smpsPSGAlterVol     $07
00090B58 8003                       	dc.b	nRst, $03
00090B5A ECF5                       	smpsPSGAlterVol     $F5
00090B5C 9106                       	dc.b	nE1, $06
00090B5E EC04                       	smpsPSGAlterVol     $04
00090B60 E701                       	dc.b	smpsNoAttack, $01
00090B62 EC07                       	smpsPSGAlterVol     $07
00090B64 8006                       	dc.b	nRst, $06
00090B66 E100                       	smpsAlterNote       $00
00090B68 01                         	dc.b	$01
00090B69 E104                       	smpsAlterNote       $04
00090B6B 01                         	dc.b	$01
00090B6C E100                       	smpsAlterNote       $00
00090B6E 01                         	dc.b	$01
00090B6F E1FD                       	smpsAlterNote       $FD
00090B71 01                         	dc.b	$01
00090B72 ECF5                       	smpsPSGAlterVol     $F5
00090B74 9206                       	dc.b	nF1, $06
00090B76 EC04                       	smpsPSGAlterVol     $04
00090B78 E701                       	dc.b	smpsNoAttack, $01
00090B7A EC07                       	smpsPSGAlterVol     $07
00090B7C 8003                       	dc.b	nRst, $03
00090B7E ECF5                       	smpsPSGAlterVol     $F5
00090B80 9207                       	dc.b	nF1, $07
00090B82 EC0B                       	smpsPSGAlterVol     $0B
00090B84 8007                       	dc.b	nRst, $07
00090B86 E103                       	smpsAlterNote       $03
00090B88 0101                       	dc.b	$01, $01
00090B8A E1FD                       	smpsAlterNote       $FD
00090B8C 01                         	dc.b	$01
00090B8D E1FA                       	smpsAlterNote       $FA
00090B8F 01                         	dc.b	$01
00090B90 E1FD                       	smpsAlterNote       $FD
00090B92 ECF5                       	smpsPSGAlterVol     $F5
00090B94 9106                       	dc.b	nE1, $06
00090B96 EC0B                       	smpsPSGAlterVol     $0B
00090B98 8004                       	dc.b	nRst, $04
00090B9A ECF5                       	smpsPSGAlterVol     $F5
00090B9C 9106                       	dc.b	nE1, $06
00090B9E EC04                       	smpsPSGAlterVol     $04
00090BA0 E701                       	dc.b	smpsNoAttack, $01
00090BA2 EC07                       	smpsPSGAlterVol     $07
00090BA4 8006                       	dc.b	nRst, $06
00090BA6 E100                       	smpsAlterNote       $00
00090BA8 01                         	dc.b	$01
00090BA9 E104                       	smpsAlterNote       $04
00090BAB 01                         	dc.b	$01
00090BAC E100                       	smpsAlterNote       $00
00090BAE 01                         	dc.b	$01
00090BAF E1FA                       	smpsAlterNote       $FA
00090BB1 01                         	dc.b	$01
00090BB2 E1FD                       	smpsAlterNote       $FD
00090BB4 ECF5                       	smpsPSGAlterVol     $F5
00090BB6 9206                       	dc.b	nF1, $06
00090BB8 EC04                       	smpsPSGAlterVol     $04
00090BBA E701                       	dc.b	smpsNoAttack, $01
00090BBC EC07                       	smpsPSGAlterVol     $07
00090BBE 8003                       	dc.b	nRst, $03
00090BC0 ECF5                       	smpsPSGAlterVol     $F5
00090BC2 9206                       	dc.b	nF1, $06
00090BC4 EC04                       	smpsPSGAlterVol     $04
00090BC6 E701                       	dc.b	smpsNoAttack, $01
00090BC8 EC07                       	smpsPSGAlterVol     $07
00090BCA 8006                       	dc.b	nRst, $06
00090BCC E100                       	smpsAlterNote       $00
00090BCE 01                         	dc.b	$01
00090BCF E104                       	smpsAlterNote       $04
00090BD1 01                         	dc.b	$01
00090BD2 E103                       	smpsAlterNote       $03
00090BD4 01                         	dc.b	$01
00090BD5 E1FD                       	smpsAlterNote       $FD
00090BD7 01                         	dc.b	$01
00090BD8 ECF5                       	smpsPSGAlterVol     $F5
00090BDA 9107                       	dc.b	nE1, $07
00090BDC EC0B                       	smpsPSGAlterVol     $0B
00090BDE 8004                       	dc.b	nRst, $04
00090BE0 ECF5                       	smpsPSGAlterVol     $F5
00090BE2 9106                       	dc.b	nE1, $06
00090BE4 EC0B                       	smpsPSGAlterVol     $0B
00090BE6 8007                       	dc.b	nRst, $07
00090BE8 E103                       	smpsAlterNote       $03
00090BEA 0101                       	dc.b	$01, $01
00090BEC E100                       	smpsAlterNote       $00
00090BEE 01                         	dc.b	$01
00090BEF E1FA                       	smpsAlterNote       $FA
00090BF1 01                         	dc.b	$01
00090BF2 E1FD                       	smpsAlterNote       $FD
00090BF4 ECF5                       	smpsPSGAlterVol     $F5
00090BF6 9206                       	dc.b	nF1, $06
00090BF8 EC04                       	smpsPSGAlterVol     $04
00090BFA E701                       	dc.b	smpsNoAttack, $01
00090BFC EC07                       	smpsPSGAlterVol     $07
00090BFE 8003                       	dc.b	nRst, $03
00090C00 ECF5                       	smpsPSGAlterVol     $F5
00090C02 9206                       	dc.b	nF1, $06
00090C04 EC04                       	smpsPSGAlterVol     $04
00090C06 E701                       	dc.b	smpsNoAttack, $01
00090C08 EC07                       	smpsPSGAlterVol     $07
00090C0A 8006                       	dc.b	nRst, $06
00090C0C E100                       	smpsAlterNote       $00
00090C0E 01                         	dc.b	$01
00090C0F E104                       	smpsAlterNote       $04
00090C11 01                         	dc.b	$01
00090C12 E100                       	smpsAlterNote       $00
00090C14 01                         	dc.b	$01
00090C15 E1FD                       	smpsAlterNote       $FD
00090C17 01                         	dc.b	$01
00090C18 ECF5                       	smpsPSGAlterVol     $F5
00090C1A 9106                       	dc.b	nE1, $06
00090C1C EC04                       	smpsPSGAlterVol     $04
00090C1E E701                       	dc.b	smpsNoAttack, $01
00090C20 EC07                       	smpsPSGAlterVol     $07
00090C22 8003                       	dc.b	nRst, $03
00090C24 ECF5                       	smpsPSGAlterVol     $F5
00090C26 9107 9106                  	dc.b	nE1, $07, nE1, $06
00090C2A EC04                       	smpsPSGAlterVol     $04
00090C2C E701                       	dc.b	smpsNoAttack, $01
00090C2E ECFC                       	smpsPSGAlterVol     $FC
00090C30 9103                       	dc.b	nE1, $03
00090C32 EC04                       	smpsPSGAlterVol     $04
00090C34 E701                       	dc.b	smpsNoAttack, $01
00090C36 ECFC                       	smpsPSGAlterVol     $FC
00090C38 9102                       	dc.b	nE1, $02
00090C3A EC04                       	smpsPSGAlterVol     $04
00090C3C E701                       	dc.b	smpsNoAttack, $01
00090C3E ECFC                       	smpsPSGAlterVol     $FC
00090C40 9103                       	dc.b	nE1, $03
00090C42 EC0B                       	smpsPSGAlterVol     $0B
00090C44 800A                       	dc.b	nRst, $0A
00090C46 E100                       	smpsAlterNote       $00
00090C48 01                         	dc.b	$01
00090C49 E104                       	smpsAlterNote       $04
00090C4B 01                         	dc.b	$01
00090C4C E100                       	smpsAlterNote       $00
00090C4E 01                         	dc.b	$01
00090C4F E1FA                       	smpsAlterNote       $FA
00090C51 01                         	dc.b	$01
00090C52 E1F9                       	smpsAlterNote       $F9
00090C54 01                         	dc.b	$01
00090C55 E1FD                       	smpsAlterNote       $FD
00090C57 01                         	dc.b	$01
00090C58 E103                       	smpsAlterNote       $03
00090C5A 0101                       	dc.b	$01, $01
00090C5C E100                       	smpsAlterNote       $00
00090C5E 01                         	dc.b	$01
00090C5F E1FA                       	smpsAlterNote       $FA
00090C61 0101                       	dc.b	$01, $01
00090C63 E1FD                       	smpsAlterNote       $FD
00090C65 ECF5                       	smpsPSGAlterVol     $F5
00090C67 9206                       	dc.b	nF1, $06
00090C69 EC04                       	smpsPSGAlterVol     $04
00090C6B E704                       	dc.b	smpsNoAttack, $04
00090C6D ECFC                       	smpsPSGAlterVol     $FC
00090C6F 9206                       	dc.b	nF1, $06
00090C71 EC04                       	smpsPSGAlterVol     $04
00090C73 E701                       	dc.b	smpsNoAttack, $01
00090C75 EC07                       	smpsPSGAlterVol     $07
00090C77 8006                       	dc.b	nRst, $06
00090C79 E100                       	smpsAlterNote       $00
00090C7B 01                         	dc.b	$01
00090C7C E104                       	smpsAlterNote       $04
00090C7E 01                         	dc.b	$01
00090C7F E103                       	smpsAlterNote       $03
00090C81 01                         	dc.b	$01
00090C82 E1FD                       	smpsAlterNote       $FD
00090C84 01                         	dc.b	$01
00090C85 ECF5                       	smpsPSGAlterVol     $F5
00090C87 9407                       	dc.b	nG1, $07
00090C89 EC0B                       	smpsPSGAlterVol     $0B
00090C8B 8004                       	dc.b	nRst, $04
00090C8D ECF5                       	smpsPSGAlterVol     $F5
00090C8F 9406                       	dc.b	nG1, $06
00090C91 EC0B                       	smpsPSGAlterVol     $0B
00090C93 8007                       	dc.b	nRst, $07
00090C95 E103                       	smpsAlterNote       $03
00090C97 0101                       	dc.b	$01, $01
00090C99 E1FD                       	smpsAlterNote       $FD
00090C9B 01                         	dc.b	$01
00090C9C E1F9                       	smpsAlterNote       $F9
00090C9E 01                         	dc.b	$01
00090C9F E1FD                       	smpsAlterNote       $FD
00090CA1 ECF5                       	smpsPSGAlterVol     $F5
00090CA3 9206                       	dc.b	nF1, $06
00090CA5 EC04                       	smpsPSGAlterVol     $04
00090CA7 E701                       	dc.b	smpsNoAttack, $01
00090CA9 EC07                       	smpsPSGAlterVol     $07
00090CAB 8003                       	dc.b	nRst, $03
00090CAD ECF5                       	smpsPSGAlterVol     $F5
00090CAF 9206                       	dc.b	nF1, $06
00090CB1 EC04                       	smpsPSGAlterVol     $04
00090CB3 E701                       	dc.b	smpsNoAttack, $01
00090CB5 EC07                       	smpsPSGAlterVol     $07
00090CB7 8006                       	dc.b	nRst, $06
00090CB9 E100                       	smpsAlterNote       $00
00090CBB 01                         	dc.b	$01
00090CBC E104                       	smpsAlterNote       $04
00090CBE 01                         	dc.b	$01
00090CBF E100                       	smpsAlterNote       $00
00090CC1 01                         	dc.b	$01
00090CC2 E1FA                       	smpsAlterNote       $FA
00090CC4 01                         	dc.b	$01
00090CC5 E1FD                       	smpsAlterNote       $FD
00090CC7 ECF5                       	smpsPSGAlterVol     $F5
00090CC9 9206                       	dc.b	nF1, $06
00090CCB EC04                       	smpsPSGAlterVol     $04
00090CCD E701                       	dc.b	smpsNoAttack, $01
00090CCF EC07                       	smpsPSGAlterVol     $07
00090CD1 8003                       	dc.b	nRst, $03
00090CD3 ECF5                       	smpsPSGAlterVol     $F5
00090CD5 9107                       	dc.b	nE1, $07
00090CD7 EC0B                       	smpsPSGAlterVol     $0B
00090CD9 8006                       	dc.b	nRst, $06
00090CDB E100                       	smpsAlterNote       $00
00090CDD 01                         	dc.b	$01
00090CDE E103                       	smpsAlterNote       $03
00090CE0 0101                       	dc.b	$01, $01
00090CE2 E1FD                       	smpsAlterNote       $FD
00090CE4 01                         	dc.b	$01
00090CE5 ECF5                       	smpsPSGAlterVol     $F5
00090CE7 9207                       	dc.b	nF1, $07
00090CE9 EC0B                       	smpsPSGAlterVol     $0B
00090CEB 8004                       	dc.b	nRst, $04
00090CED ECF5                       	smpsPSGAlterVol     $F5
00090CEF 9206                       	dc.b	nF1, $06
00090CF1 EC04                       	smpsPSGAlterVol     $04
00090CF3 E701                       	dc.b	smpsNoAttack, $01
00090CF5 EC07                       	smpsPSGAlterVol     $07
00090CF7 8006                       	dc.b	nRst, $06
00090CF9 E103                       	smpsAlterNote       $03
00090CFB 01                         	dc.b	$01
00090CFC E104                       	smpsAlterNote       $04
00090CFE 01                         	dc.b	$01
00090CFF E100                       	smpsAlterNote       $00
00090D01 01                         	dc.b	$01
00090D02 E1FB                       	smpsAlterNote       $FB
00090D04 01                         	dc.b	$01
00090D05 E1FD                       	smpsAlterNote       $FD
00090D07 ECF5                       	smpsPSGAlterVol     $F5
00090D09 9406                       	dc.b	nG1, $06
00090D0B EC04                       	smpsPSGAlterVol     $04
00090D0D E701                       	dc.b	smpsNoAttack, $01
00090D0F EC07                       	smpsPSGAlterVol     $07
00090D11 8003                       	dc.b	nRst, $03
00090D13 ECF5                       	smpsPSGAlterVol     $F5
00090D15 9406                       	dc.b	nG1, $06
00090D17 EC04                       	smpsPSGAlterVol     $04
00090D19 E701                       	dc.b	smpsNoAttack, $01
00090D1B EC07                       	smpsPSGAlterVol     $07
00090D1D 8006                       	dc.b	nRst, $06
00090D1F E100                       	smpsAlterNote       $00
00090D21 01                         	dc.b	$01
00090D22 E104                       	smpsAlterNote       $04
00090D24 01                         	dc.b	$01
00090D25 E100                       	smpsAlterNote       $00
00090D27 01                         	dc.b	$01
00090D28 E1FD                       	smpsAlterNote       $FD
00090D2A 01                         	dc.b	$01
00090D2B ECF5                       	smpsPSGAlterVol     $F5
00090D2D 9206                       	dc.b	nF1, $06
00090D2F EC04                       	smpsPSGAlterVol     $04
00090D31 E701                       	dc.b	smpsNoAttack, $01
00090D33 EC07                       	smpsPSGAlterVol     $07
00090D35 8003                       	dc.b	nRst, $03
00090D37 ECF5                       	smpsPSGAlterVol     $F5
00090D39 9207                       	dc.b	nF1, $07
00090D3B EC0B                       	smpsPSGAlterVol     $0B
00090D3D 8007                       	dc.b	nRst, $07
00090D3F E103                       	smpsAlterNote       $03
00090D41 0101                       	dc.b	$01, $01
00090D43 E1FD                       	smpsAlterNote       $FD
00090D45 01                         	dc.b	$01
00090D46 E1FA                       	smpsAlterNote       $FA
00090D48 01                         	dc.b	$01
00090D49 E1FD                       	smpsAlterNote       $FD
00090D4B ECF5                       	smpsPSGAlterVol     $F5
00090D4D 9206                       	dc.b	nF1, $06
00090D4F EC0B                       	smpsPSGAlterVol     $0B
00090D51 8004                       	dc.b	nRst, $04
00090D53 ECF5                       	smpsPSGAlterVol     $F5
00090D55 9206                       	dc.b	nF1, $06
00090D57 EC04                       	smpsPSGAlterVol     $04
00090D59 E701                       	dc.b	smpsNoAttack, $01
00090D5B EC07                       	smpsPSGAlterVol     $07
00090D5D 8006                       	dc.b	nRst, $06
00090D5F E100                       	smpsAlterNote       $00
00090D61 01                         	dc.b	$01
00090D62 E104                       	smpsAlterNote       $04
00090D64 01                         	dc.b	$01
00090D65 E100                       	smpsAlterNote       $00
00090D67 01                         	dc.b	$01
00090D68 E1FA                       	smpsAlterNote       $FA
00090D6A 01                         	dc.b	$01
00090D6B E1FD                       	smpsAlterNote       $FD
00090D6D ECF5                       	smpsPSGAlterVol     $F5
00090D6F 9206                       	dc.b	nF1, $06
00090D71 EC04                       	smpsPSGAlterVol     $04
00090D73 E701                       	dc.b	smpsNoAttack, $01
00090D75 EC07                       	smpsPSGAlterVol     $07
00090D77 8003                       	dc.b	nRst, $03
00090D79 ECF5                       	smpsPSGAlterVol     $F5
00090D7B 9207                       	dc.b	nF1, $07
00090D7D EC0B                       	smpsPSGAlterVol     $0B
00090D7F 8006                       	dc.b	nRst, $06
00090D81 E100                       	smpsAlterNote       $00
00090D83 01                         	dc.b	$01
00090D84 E103                       	smpsAlterNote       $03
00090D86 0101                       	dc.b	$01, $01
00090D88 E1FD                       	smpsAlterNote       $FD
00090D8A 01                         	dc.b	$01
00090D8B ECF5                       	smpsPSGAlterVol     $F5
00090D8D 9207                       	dc.b	nF1, $07
00090D8F EC0B                       	smpsPSGAlterVol     $0B
00090D91 8004                       	dc.b	nRst, $04
00090D93 ECF5                       	smpsPSGAlterVol     $F5
00090D95 9206                       	dc.b	nF1, $06
00090D97 EC0B                       	smpsPSGAlterVol     $0B
00090D99 8007                       	dc.b	nRst, $07
00090D9B E103                       	smpsAlterNote       $03
00090D9D 0101                       	dc.b	$01, $01
00090D9F E100                       	smpsAlterNote       $00
00090DA1 01                         	dc.b	$01
00090DA2 E1FA                       	smpsAlterNote       $FA
00090DA4 01                         	dc.b	$01
00090DA5 E1FD                       	smpsAlterNote       $FD
00090DA7 ECF5                       	smpsPSGAlterVol     $F5
00090DA9 9206                       	dc.b	nF1, $06
00090DAB EC04                       	smpsPSGAlterVol     $04
00090DAD E701                       	dc.b	smpsNoAttack, $01
00090DAF EC07                       	smpsPSGAlterVol     $07
00090DB1 8003                       	dc.b	nRst, $03
00090DB3 ECF5                       	smpsPSGAlterVol     $F5
00090DB5 9206                       	dc.b	nF1, $06
00090DB7 EC04                       	smpsPSGAlterVol     $04
00090DB9 E701                       	dc.b	smpsNoAttack, $01
00090DBB EC07                       	smpsPSGAlterVol     $07
00090DBD 8006                       	dc.b	nRst, $06
00090DBF E100                       	smpsAlterNote       $00
00090DC1 01                         	dc.b	$01
00090DC2 E104                       	smpsAlterNote       $04
00090DC4 01                         	dc.b	$01
00090DC5 E100                       	smpsAlterNote       $00
00090DC7 01                         	dc.b	$01
00090DC8 E1FD                       	smpsAlterNote       $FD
00090DCA 01                         	dc.b	$01
00090DCB ECF5                       	smpsPSGAlterVol     $F5
00090DCD 9206                       	dc.b	nF1, $06
00090DCF EC04                       	smpsPSGAlterVol     $04
00090DD1 E701                       	dc.b	smpsNoAttack, $01
00090DD3 EC07                       	smpsPSGAlterVol     $07
00090DD5 8003                       	dc.b	nRst, $03
00090DD7 ECF5                       	smpsPSGAlterVol     $F5
00090DD9 9207                       	dc.b	nF1, $07
00090DDB EC0B                       	smpsPSGAlterVol     $0B
00090DDD 8007                       	dc.b	nRst, $07
00090DDF E104                       	smpsAlterNote       $04
00090DE1 0101                       	dc.b	$01, $01
00090DE3 E1FB                       	smpsAlterNote       $FB
00090DE5 01                         	dc.b	$01
00090DE6 E1F6                       	smpsAlterNote       $F6
00090DE8 0101                       	dc.b	$01, $01
00090DEA E1FF                       	smpsAlterNote       $FF
00090DEC 01                         	dc.b	$01
00090DED E105                       	smpsAlterNote       $05
00090DEF 01                         	dc.b	$01
00090DF0 E104                       	smpsAlterNote       $04
00090DF2 01                         	dc.b	$01
00090DF3 E1FB                       	smpsAlterNote       $FB
00090DF5 01                         	dc.b	$01
00090DF6 E1F5                       	smpsAlterNote       $F5
00090DF8 01                         	dc.b	$01
00090DF9 E1FC                       	smpsAlterNote       $FC
00090DFB ECF5                       	smpsPSGAlterVol     $F5
00090DFD 8B0E                       	dc.b	nBb0, $0E
00090DFF E102                       	smpsAlterNote       $02
00090E01 EC0B                       	smpsPSGAlterVol     $0B
00090E03 8001                       	dc.b	nRst, $01
00090E05 E101                       	smpsAlterNote       $01
00090E07 01                         	dc.b	$01
00090E08 E1FC                       	smpsAlterNote       $FC
00090E0A 01                         	dc.b	$01
00090E0B E1F9                       	smpsAlterNote       $F9
00090E0D 0101                       	dc.b	$01, $01
00090E0F E1FF                       	smpsAlterNote       $FF
00090E11 01                         	dc.b	$01
00090E12 E102                       	smpsAlterNote       $02
00090E14 01                         	dc.b	$01
00090E15 E1FF                       	smpsAlterNote       $FF
00090E17 01                         	dc.b	$01
00090E18 E1FC                       	smpsAlterNote       $FC
00090E1A 01                         	dc.b	$01
00090E1B E1F8                       	smpsAlterNote       $F8
00090E1D 01                         	dc.b	$01
00090E1E E1FC                       	smpsAlterNote       $FC
00090E20 01                         	dc.b	$01
00090E21 E101                       	smpsAlterNote       $01
00090E23 01                         	dc.b	$01
00090E24 E102                       	smpsAlterNote       $02
00090E26 01                         	dc.b	$01
00090E27 E1FF                       	smpsAlterNote       $FF
00090E29 01                         	dc.b	$01
00090E2A E1FB                       	smpsAlterNote       $FB
00090E2C ECF5                       	smpsPSGAlterVol     $F5
00090E2E 8D0D                       	dc.b	nC1, $0D
00090E30 E101                       	smpsAlterNote       $01
00090E32 EC0B                       	smpsPSGAlterVol     $0B
00090E34 8001                       	dc.b	nRst, $01
00090E36 E102                       	smpsAlterNote       $02
00090E38 01                         	dc.b	$01
00090E39 E1FF                       	smpsAlterNote       $FF
00090E3B 01                         	dc.b	$01
00090E3C E1F9                       	smpsAlterNote       $F9
00090E3E 0101                       	dc.b	$01, $01
00090E40 E1FC                       	smpsAlterNote       $FC
00090E42 01                         	dc.b	$01
00090E43 E101                       	smpsAlterNote       $01
00090E45 0101                       	dc.b	$01, $01
00090E47 E1FC                       	smpsAlterNote       $FC
00090E49 01                         	dc.b	$01
00090E4A E1F9                       	smpsAlterNote       $F9
00090E4C 0101                       	dc.b	$01, $01
00090E4E E1FF                       	smpsAlterNote       $FF
00090E50 01                         	dc.b	$01
00090E51 E102                       	smpsAlterNote       $02
00090E53 01                         	dc.b	$01
00090E54 E101                       	smpsAlterNote       $01
00090E56 01                         	dc.b	$01
00090E57 E1FC                       	smpsAlterNote       $FC
00090E59 ECF5                       	smpsPSGAlterVol     $F5
00090E5B 8F0D                       	dc.b	nD1, $0D
00090E5D E1FF                       	smpsAlterNote       $FF
00090E5F EC04                       	smpsPSGAlterVol     $04
00090E61 E701                       	dc.b	smpsNoAttack, $01
00090E63 EC07                       	smpsPSGAlterVol     $07
00090E65 E103                       	smpsAlterNote       $03
00090E67 8001                       	dc.b	nRst, $01
00090E69 E102                       	smpsAlterNote       $02
00090E6B 01                         	dc.b	$01
00090E6C E1FD                       	smpsAlterNote       $FD
00090E6E 01                         	dc.b	$01
00090E6F E1F9                       	smpsAlterNote       $F9
00090E71 01                         	dc.b	$01
00090E72 E1FD                       	smpsAlterNote       $FD
00090E74 01                         	dc.b	$01
00090E75 E100                       	smpsAlterNote       $00
00090E77 01                         	dc.b	$01
00090E78 E103                       	smpsAlterNote       $03
00090E7A 01                         	dc.b	$01
00090E7B E100                       	smpsAlterNote       $00
00090E7D 01                         	dc.b	$01
00090E7E E1FA                       	smpsAlterNote       $FA
00090E80 01                         	dc.b	$01
00090E81 E1F9                       	smpsAlterNote       $F9
00090E83 01                         	dc.b	$01
00090E84 E1FD                       	smpsAlterNote       $FD
00090E86 01                         	dc.b	$01
00090E87 E102                       	smpsAlterNote       $02
00090E89 0101                       	dc.b	$01, $01
00090E8B E100                       	smpsAlterNote       $00
00090E8D 01                         	dc.b	$01
00090E8E E1FD                       	smpsAlterNote       $FD
00090E90 ECF5                       	smpsPSGAlterVol     $F5
00090E92 910D                       	dc.b	nE1, $0D
00090E94 E103                       	smpsAlterNote       $03
00090E96 EC0B                       	smpsPSGAlterVol     $0B
00090E98 8001 01                    	dc.b	nRst, $01, $01
00090E9B E100                       	smpsAlterNote       $00
00090E9D 01                         	dc.b	$01
00090E9E E1FA                       	smpsAlterNote       $FA
00090EA0 0101                       	dc.b	$01, $01
00090EA2 E100                       	smpsAlterNote       $00
00090EA4 01                         	dc.b	$01
00090EA5 E103                       	smpsAlterNote       $03
00090EA7 01                         	dc.b	$01
00090EA8 E1FD                       	smpsAlterNote       $FD
00090EAA ECF5                       	smpsPSGAlterVol     $F5
00090EAC 9206                       	dc.b	nF1, $06
00090EAE EC04                       	smpsPSGAlterVol     $04
00090EB0 E701                       	dc.b	smpsNoAttack, $01
00090EB2 EC07                       	smpsPSGAlterVol     $07
00090EB4 8003                       	dc.b	nRst, $03
00090EB6 ECF5                       	smpsPSGAlterVol     $F5
00090EB8 9207                       	dc.b	nF1, $07
00090EBA EC0B                       	smpsPSGAlterVol     $0B
00090EBC 8006                       	dc.b	nRst, $06
00090EBE E100                       	smpsAlterNote       $00
00090EC0 01                         	dc.b	$01
00090EC1 E103                       	smpsAlterNote       $03
00090EC3 0101                       	dc.b	$01, $01
00090EC5 E1FD                       	smpsAlterNote       $FD
00090EC7 01                         	dc.b	$01
00090EC8 ECF5                       	smpsPSGAlterVol     $F5
00090ECA 9407                       	dc.b	nG1, $07
00090ECC EC0B                       	smpsPSGAlterVol     $0B
00090ECE 8004                       	dc.b	nRst, $04
00090ED0 ECF5                       	smpsPSGAlterVol     $F5
00090ED2 9406                       	dc.b	nG1, $06
00090ED4 EC04                       	smpsPSGAlterVol     $04
00090ED6 E701                       	dc.b	smpsNoAttack, $01
00090ED8 EC07                       	smpsPSGAlterVol     $07
00090EDA 8006                       	dc.b	nRst, $06
00090EDC E103                       	smpsAlterNote       $03
00090EDE 01                         	dc.b	$01
00090EDF E104                       	smpsAlterNote       $04
00090EE1 01                         	dc.b	$01
00090EE2 E100                       	smpsAlterNote       $00
00090EE4 01                         	dc.b	$01
00090EE5 E1F9                       	smpsAlterNote       $F9
00090EE7 01                         	dc.b	$01
00090EE8 E1FD                       	smpsAlterNote       $FD
00090EEA ECF5                       	smpsPSGAlterVol     $F5
00090EEC 9206                       	dc.b	nF1, $06
00090EEE EC04                       	smpsPSGAlterVol     $04
00090EF0 E701                       	dc.b	smpsNoAttack, $01
00090EF2 EC07                       	smpsPSGAlterVol     $07
00090EF4 8003                       	dc.b	nRst, $03
00090EF6 ECF5                       	smpsPSGAlterVol     $F5
00090EF8 9206                       	dc.b	nF1, $06
00090EFA EC04                       	smpsPSGAlterVol     $04
00090EFC E701                       	dc.b	smpsNoAttack, $01
00090EFE EC07                       	smpsPSGAlterVol     $07
00090F00 8006                       	dc.b	nRst, $06
00090F02 E100                       	smpsAlterNote       $00
00090F04 01                         	dc.b	$01
00090F05 E104                       	smpsAlterNote       $04
00090F07 01                         	dc.b	$01
00090F08 E103                       	smpsAlterNote       $03
00090F0A 01                         	dc.b	$01
00090F0B E1FD                       	smpsAlterNote       $FD
00090F0D 01                         	dc.b	$01
00090F0E ECF5                       	smpsPSGAlterVol     $F5
00090F10 9407                       	dc.b	nG1, $07
00090F12 EC0B                       	smpsPSGAlterVol     $0B
00090F14 8004                       	dc.b	nRst, $04
00090F16 ECF5                       	smpsPSGAlterVol     $F5
00090F18 9406                       	dc.b	nG1, $06
00090F1A EC0B                       	smpsPSGAlterVol     $0B
00090F1C 8007                       	dc.b	nRst, $07
00090F1E E103                       	smpsAlterNote       $03
00090F20 0101                       	dc.b	$01, $01
00090F22 E100                       	smpsAlterNote       $00
00090F24 01                         	dc.b	$01
00090F25 E1F9                       	smpsAlterNote       $F9
00090F27 01                         	dc.b	$01
00090F28 E1FD                       	smpsAlterNote       $FD
00090F2A ECF5                       	smpsPSGAlterVol     $F5
00090F2C 9206                       	dc.b	nF1, $06
00090F2E EC04                       	smpsPSGAlterVol     $04
00090F30 E701                       	dc.b	smpsNoAttack, $01
00090F32 EC07                       	smpsPSGAlterVol     $07
00090F34 8003                       	dc.b	nRst, $03
00090F36 ECF5                       	smpsPSGAlterVol     $F5
00090F38 9206                       	dc.b	nF1, $06
00090F3A EC04                       	smpsPSGAlterVol     $04
00090F3C E701                       	dc.b	smpsNoAttack, $01
00090F3E EC07                       	smpsPSGAlterVol     $07
00090F40 8006                       	dc.b	nRst, $06
00090F42 E100                       	smpsAlterNote       $00
00090F44 01                         	dc.b	$01
00090F45 E104                       	smpsAlterNote       $04
00090F47 01                         	dc.b	$01
00090F48 E100                       	smpsAlterNote       $00
00090F4A 01                         	dc.b	$01
00090F4B E1FB                       	smpsAlterNote       $FB
00090F4D 01                         	dc.b	$01
00090F4E E1FD                       	smpsAlterNote       $FD
00090F50 ECF5                       	smpsPSGAlterVol     $F5
00090F52 9406                       	dc.b	nG1, $06
00090F54 EC04                       	smpsPSGAlterVol     $04
00090F56 E701                       	dc.b	smpsNoAttack, $01
00090F58 EC07                       	smpsPSGAlterVol     $07
00090F5A 8003                       	dc.b	nRst, $03
00090F5C ECF5                       	smpsPSGAlterVol     $F5
00090F5E 9407                       	dc.b	nG1, $07
00090F60 EC0B                       	smpsPSGAlterVol     $0B
00090F62 8006                       	dc.b	nRst, $06
00090F64 E100                       	smpsAlterNote       $00
00090F66 01                         	dc.b	$01
00090F67 E103                       	smpsAlterNote       $03
00090F69 0101                       	dc.b	$01, $01
00090F6B E1FD                       	smpsAlterNote       $FD
00090F6D 01                         	dc.b	$01
00090F6E ECF5                       	smpsPSGAlterVol     $F5
00090F70 9207                       	dc.b	nF1, $07
00090F72 EC0B                       	smpsPSGAlterVol     $0B
00090F74 8004                       	dc.b	nRst, $04
00090F76 ECF5                       	smpsPSGAlterVol     $F5
00090F78 9206                       	dc.b	nF1, $06
00090F7A EC04                       	smpsPSGAlterVol     $04
00090F7C E701                       	dc.b	smpsNoAttack, $01
00090F7E ECFC                       	smpsPSGAlterVol     $FC
00090F80 E1FC                       	smpsAlterNote       $FC
00090F82 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00090F86 EC04                       	smpsPSGAlterVol     $04
00090F88 E701                       	dc.b	smpsNoAttack, $01
00090F8A ECFC                       	smpsPSGAlterVol     $FC
00090F8C 9003                       	dc.b	nEb1, $03
00090F8E E1FD                       	smpsAlterNote       $FD
00090F90 9403                       	dc.b	nG1, $03
00090F92 EC04                       	smpsPSGAlterVol     $04
00090F94 E701                       	dc.b	smpsNoAttack, $01
00090F96 E1FE                       	smpsAlterNote       $FE
00090F98 ECFC                       	smpsPSGAlterVol     $FC
00090F9A 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00090F9E EC04                       	smpsPSGAlterVol     $04
00090FA0 E701                       	dc.b	smpsNoAttack, $01
00090FA2 EC07                       	smpsPSGAlterVol     $07
00090FA4 8009                       	dc.b	nRst, $09
00090FA6 E100                       	smpsAlterNote       $00
00090FA8 01                         	dc.b	$01
00090FA9 F6F5 19                    	smpsJump            music84_Jump07
00090FAC                            
00090FAC                            ; PSG2 Data
00090FAC                            music84_PSG2:
00090FAC E1FC                       	smpsAlterNote       $FC
00090FAE EC04                       	smpsPSGAlterVol     $04
00090FB0 8F03                       	dc.b	nD1, $03
00090FB2 E1FD                       	smpsAlterNote       $FD
00090FB4 9203                       	dc.b	nF1, $03
00090FB6 EC04                       	smpsPSGAlterVol     $04
00090FB8 E701                       	dc.b	smpsNoAttack, $01
00090FBA E1FE                       	smpsAlterNote       $FE
00090FBC ECFC                       	smpsPSGAlterVol     $FC
00090FBE 9603                       	dc.b	nA1, $03
00090FC0 E1FD                       	smpsAlterNote       $FD
00090FC2 9103                       	dc.b	nE1, $03
00090FC4 EC04                       	smpsPSGAlterVol     $04
00090FC6 E701                       	dc.b	smpsNoAttack, $01
00090FC8 ECFC                       	smpsPSGAlterVol     $FC
00090FCA 9403                       	dc.b	nG1, $03
00090FCC E1FE                       	smpsAlterNote       $FE
00090FCE 9703                       	dc.b	nBb1, $03
00090FD0 EC04                       	smpsPSGAlterVol     $04
00090FD2 E701                       	dc.b	smpsNoAttack, $01
00090FD4 E1FF                       	smpsAlterNote       $FF
00090FD6 ECFC                       	smpsPSGAlterVol     $FC
00090FD8 9B02                       	dc.b	nD2, $02
00090FDA EC04                       	smpsPSGAlterVol     $04
00090FDC E701                       	dc.b	smpsNoAttack, $01
00090FDE ECFC                       	smpsPSGAlterVol     $FC
00090FE0 E1FE                       	smpsAlterNote       $FE
00090FE2 9A03                       	dc.b	nCs2, $03
00090FE4 EC0B                       	smpsPSGAlterVol     $0B
00090FE6 800A                       	dc.b	nRst, $0A
00090FE8 E102                       	smpsAlterNote       $02
00090FEA 01                         	dc.b	$01
00090FEB E10A                       	smpsAlterNote       $0A
00090FED 01                         	dc.b	$01
00090FEE E102                       	smpsAlterNote       $02
00090FF0 01                         	dc.b	$01
00090FF1 E1FC                       	smpsAlterNote       $FC
00090FF3 01                         	dc.b	$01
00090FF4 E10A                       	smpsAlterNote       $0A
00090FF6 01                         	dc.b	$01
00090FF7 E1FC                       	smpsAlterNote       $FC
00090FF9 01                         	dc.b	$01
00090FFA E108                       	smpsAlterNote       $08
00090FFC 01                         	dc.b	$01
00090FFD E10A                       	smpsAlterNote       $0A
00090FFF 01                         	dc.b	$01
00091000 E102                       	smpsAlterNote       $02
00091002 01                         	dc.b	$01
00091003 E1F7                       	smpsAlterNote       $F7
00091005 0101                       	dc.b	$01, $01
00091007 E102                       	smpsAlterNote       $02
00091009 01                         	dc.b	$01
0009100A E108                       	smpsAlterNote       $08
0009100C 0101                       	dc.b	$01, $01
0009100E E1FC                       	smpsAlterNote       $FC
00091010 01                         	dc.b	$01
00091011 E10A                       	smpsAlterNote       $0A
00091013 01                         	dc.b	$01
00091014 E1F7                       	smpsAlterNote       $F7
00091016 01                         	dc.b	$01
00091017 E102                       	smpsAlterNote       $02
00091019 01                         	dc.b	$01
0009101A E10A                       	smpsAlterNote       $0A
0009101C 01                         	dc.b	$01
0009101D E102                       	smpsAlterNote       $02
0009101F 01                         	dc.b	$01
00091020 E1FC                       	smpsAlterNote       $FC
00091022 01                         	dc.b	$01
00091023                            
00091023                            music84_Jump06:
00091023 E10A                       	smpsAlterNote       $0A
00091025 8001                       	dc.b	nRst, $01
00091027 E1FC                       	smpsAlterNote       $FC
00091029 01                         	dc.b	$01
0009102A E108                       	smpsAlterNote       $08
0009102C 01                         	dc.b	$01
0009102D E10A                       	smpsAlterNote       $0A
0009102F 01                         	dc.b	$01
00091030 E1FC                       	smpsAlterNote       $FC
00091032 ECF5                       	smpsPSGAlterVol     $F5
00091034 8F06                       	dc.b	nD1, $06
00091036 EC04                       	smpsPSGAlterVol     $04
00091038 E701                       	dc.b	smpsNoAttack, $01
0009103A EC07                       	smpsPSGAlterVol     $07
0009103C 8003                       	dc.b	nRst, $03
0009103E ECF5                       	smpsPSGAlterVol     $F5
00091040 8F06                       	dc.b	nD1, $06
00091042 EC04                       	smpsPSGAlterVol     $04
00091044 E701                       	dc.b	smpsNoAttack, $01
00091046 EC07                       	smpsPSGAlterVol     $07
00091048 8006                       	dc.b	nRst, $06
0009104A E1FF                       	smpsAlterNote       $FF
0009104C 01                         	dc.b	$01
0009104D E102                       	smpsAlterNote       $02
0009104F 01                         	dc.b	$01
00091050 E1FF                       	smpsAlterNote       $FF
00091052 01                         	dc.b	$01
00091053 E1F9                       	smpsAlterNote       $F9
00091055 01                         	dc.b	$01
00091056 E1FC                       	smpsAlterNote       $FC
00091058 ECF5                       	smpsPSGAlterVol     $F5
0009105A 9006                       	dc.b	nEb1, $06
0009105C EC04                       	smpsPSGAlterVol     $04
0009105E E701                       	dc.b	smpsNoAttack, $01
00091060 EC07                       	smpsPSGAlterVol     $07
00091062 8003                       	dc.b	nRst, $03
00091064 ECF5                       	smpsPSGAlterVol     $F5
00091066 9007                       	dc.b	nEb1, $07
00091068 EC0B                       	smpsPSGAlterVol     $0B
0009106A 8006                       	dc.b	nRst, $06
0009106C E1FF                       	smpsAlterNote       $FF
0009106E 01                         	dc.b	$01
0009106F E103                       	smpsAlterNote       $03
00091071 0101                       	dc.b	$01, $01
00091073 E1FC                       	smpsAlterNote       $FC
00091075 01                         	dc.b	$01
00091076 ECF5                       	smpsPSGAlterVol     $F5
00091078 8F07                       	dc.b	nD1, $07
0009107A EC0B                       	smpsPSGAlterVol     $0B
0009107C 8004                       	dc.b	nRst, $04
0009107E ECF5                       	smpsPSGAlterVol     $F5
00091080 8F06                       	dc.b	nD1, $06
00091082 EC04                       	smpsPSGAlterVol     $04
00091084 E701                       	dc.b	smpsNoAttack, $01
00091086 EC07                       	smpsPSGAlterVol     $07
00091088 8006                       	dc.b	nRst, $06
0009108A E102                       	smpsAlterNote       $02
0009108C 01                         	dc.b	$01
0009108D E103                       	smpsAlterNote       $03
0009108F 01                         	dc.b	$01
00091090 E1FF                       	smpsAlterNote       $FF
00091092 01                         	dc.b	$01
00091093 E1F9                       	smpsAlterNote       $F9
00091095 01                         	dc.b	$01
00091096 E1FC                       	smpsAlterNote       $FC
00091098 ECF5                       	smpsPSGAlterVol     $F5
0009109A 8F06                       	dc.b	nD1, $06
0009109C EC04                       	smpsPSGAlterVol     $04
0009109E E701                       	dc.b	smpsNoAttack, $01
000910A0 EC07                       	smpsPSGAlterVol     $07
000910A2 8003                       	dc.b	nRst, $03
000910A4 ECF5                       	smpsPSGAlterVol     $F5
000910A6 8F06                       	dc.b	nD1, $06
000910A8 EC04                       	smpsPSGAlterVol     $04
000910AA E701                       	dc.b	smpsNoAttack, $01
000910AC EC07                       	smpsPSGAlterVol     $07
000910AE 8006                       	dc.b	nRst, $06
000910B0 E1FF                       	smpsAlterNote       $FF
000910B2 01                         	dc.b	$01
000910B3 E103                       	smpsAlterNote       $03
000910B5 01                         	dc.b	$01
000910B6 E1FF                       	smpsAlterNote       $FF
000910B8 01                         	dc.b	$01
000910B9 E1FC                       	smpsAlterNote       $FC
000910BB 01                         	dc.b	$01
000910BC ECF5                       	smpsPSGAlterVol     $F5
000910BE 8F06                       	dc.b	nD1, $06
000910C0 EC04                       	smpsPSGAlterVol     $04
000910C2 E701                       	dc.b	smpsNoAttack, $01
000910C4 EC07                       	smpsPSGAlterVol     $07
000910C6 8003                       	dc.b	nRst, $03
000910C8 ECF5                       	smpsPSGAlterVol     $F5
000910CA 8F07                       	dc.b	nD1, $07
000910CC EC0B                       	smpsPSGAlterVol     $0B
000910CE 8007                       	dc.b	nRst, $07
000910D0 E101                       	smpsAlterNote       $01
000910D2 0101                       	dc.b	$01, $01
000910D4 E1FC                       	smpsAlterNote       $FC
000910D6 01                         	dc.b	$01
000910D7 E1F9                       	smpsAlterNote       $F9
000910D9 01                         	dc.b	$01
000910DA E1FC                       	smpsAlterNote       $FC
000910DC ECF5                       	smpsPSGAlterVol     $F5
000910DE 9006                       	dc.b	nEb1, $06
000910E0 EC0B                       	smpsPSGAlterVol     $0B
000910E2 8004                       	dc.b	nRst, $04
000910E4 ECF5                       	smpsPSGAlterVol     $F5
000910E6 9006                       	dc.b	nEb1, $06
000910E8 EC04                       	smpsPSGAlterVol     $04
000910EA E701                       	dc.b	smpsNoAttack, $01
000910EC EC07                       	smpsPSGAlterVol     $07
000910EE 8006                       	dc.b	nRst, $06
000910F0 E100                       	smpsAlterNote       $00
000910F2 01                         	dc.b	$01
000910F3 E102                       	smpsAlterNote       $02
000910F5 01                         	dc.b	$01
000910F6 E100                       	smpsAlterNote       $00
000910F8 01                         	dc.b	$01
000910F9 E1FD                       	smpsAlterNote       $FD
000910FB 01                         	dc.b	$01
000910FC E1FF                       	smpsAlterNote       $FF
000910FE ECF5                       	smpsPSGAlterVol     $F5
00091100 9B06                       	dc.b	nD2, $06
00091102 EC04                       	smpsPSGAlterVol     $04
00091104 E701                       	dc.b	smpsNoAttack, $01
00091106 EC07                       	smpsPSGAlterVol     $07
00091108 8003                       	dc.b	nRst, $03
0009110A ECF5                       	smpsPSGAlterVol     $F5
0009110C 9B07                       	dc.b	nD2, $07
0009110E EC0B                       	smpsPSGAlterVol     $0B
00091110 8006                       	dc.b	nRst, $06
00091112 E102                       	smpsAlterNote       $02
00091114 01                         	dc.b	$01
00091115 E106                       	smpsAlterNote       $06
00091117 01                         	dc.b	$01
00091118 E105                       	smpsAlterNote       $05
0009111A 01                         	dc.b	$01
0009111B E1FF                       	smpsAlterNote       $FF
0009111D 01                         	dc.b	$01
0009111E ECF5                       	smpsPSGAlterVol     $F5
00091120 9B07                       	dc.b	nD2, $07
00091122 EC0B                       	smpsPSGAlterVol     $0B
00091124 8004                       	dc.b	nRst, $04
00091126 ECF5                       	smpsPSGAlterVol     $F5
00091128 9B06                       	dc.b	nD2, $06
0009112A EC0B                       	smpsPSGAlterVol     $0B
0009112C 8007                       	dc.b	nRst, $07
0009112E E105                       	smpsAlterNote       $05
00091130 0101                       	dc.b	$01, $01
00091132 E102                       	smpsAlterNote       $02
00091134 01                         	dc.b	$01
00091135 E1FC                       	smpsAlterNote       $FC
00091137 01                         	dc.b	$01
00091138 E1FF                       	smpsAlterNote       $FF
0009113A ECF5                       	smpsPSGAlterVol     $F5
0009113C 9B06                       	dc.b	nD2, $06
0009113E EC04                       	smpsPSGAlterVol     $04
00091140 E701                       	dc.b	smpsNoAttack, $01
00091142 EC07                       	smpsPSGAlterVol     $07
00091144 8003                       	dc.b	nRst, $03
00091146 ECF5                       	smpsPSGAlterVol     $F5
00091148 9B06                       	dc.b	nD2, $06
0009114A EC04                       	smpsPSGAlterVol     $04
0009114C E701                       	dc.b	smpsNoAttack, $01
0009114E EC07                       	smpsPSGAlterVol     $07
00091150 8006                       	dc.b	nRst, $06
00091152 E102                       	smpsAlterNote       $02
00091154 01                         	dc.b	$01
00091155 E106                       	smpsAlterNote       $06
00091157 01                         	dc.b	$01
00091158 E102                       	smpsAlterNote       $02
0009115A 01                         	dc.b	$01
0009115B E1FF                       	smpsAlterNote       $FF
0009115D 01                         	dc.b	$01
0009115E ECF5                       	smpsPSGAlterVol     $F5
00091160 9B06                       	dc.b	nD2, $06
00091162 EC04                       	smpsPSGAlterVol     $04
00091164 E701                       	dc.b	smpsNoAttack, $01
00091166 EC07                       	smpsPSGAlterVol     $07
00091168 8003                       	dc.b	nRst, $03
0009116A ECF5                       	smpsPSGAlterVol     $F5
0009116C 9B07                       	dc.b	nD2, $07
0009116E EC0B                       	smpsPSGAlterVol     $0B
00091170 8007                       	dc.b	nRst, $07
00091172 E105                       	smpsAlterNote       $05
00091174 0101                       	dc.b	$01, $01
00091176 E1FF                       	smpsAlterNote       $FF
00091178 01                         	dc.b	$01
00091179 E1FC                       	smpsAlterNote       $FC
0009117B 01                         	dc.b	$01
0009117C E1FF                       	smpsAlterNote       $FF
0009117E ECF5                       	smpsPSGAlterVol     $F5
00091180 9B06                       	dc.b	nD2, $06
00091182 EC0B                       	smpsPSGAlterVol     $0B
00091184 8004                       	dc.b	nRst, $04
00091186 ECF5                       	smpsPSGAlterVol     $F5
00091188 9B06                       	dc.b	nD2, $06
0009118A EC04                       	smpsPSGAlterVol     $04
0009118C E701                       	dc.b	smpsNoAttack, $01
0009118E EC07                       	smpsPSGAlterVol     $07
00091190 8006                       	dc.b	nRst, $06
00091192 E105                       	smpsAlterNote       $05
00091194 01                         	dc.b	$01
00091195 E106                       	smpsAlterNote       $06
00091197 01                         	dc.b	$01
00091198 E102                       	smpsAlterNote       $02
0009119A 01                         	dc.b	$01
0009119B E1FC                       	smpsAlterNote       $FC
0009119D 01                         	dc.b	$01
0009119E E1FF                       	smpsAlterNote       $FF
000911A0 ECF5                       	smpsPSGAlterVol     $F5
000911A2 9B06                       	dc.b	nD2, $06
000911A4 EC04                       	smpsPSGAlterVol     $04
000911A6 E701                       	dc.b	smpsNoAttack, $01
000911A8 EC07                       	smpsPSGAlterVol     $07
000911AA 8003                       	dc.b	nRst, $03
000911AC ECF5                       	smpsPSGAlterVol     $F5
000911AE 9B06                       	dc.b	nD2, $06
000911B0 EC04                       	smpsPSGAlterVol     $04
000911B2 E701                       	dc.b	smpsNoAttack, $01
000911B4 EC07                       	smpsPSGAlterVol     $07
000911B6 8006                       	dc.b	nRst, $06
000911B8 E102                       	smpsAlterNote       $02
000911BA 01                         	dc.b	$01
000911BB E106                       	smpsAlterNote       $06
000911BD 01                         	dc.b	$01
000911BE E105                       	smpsAlterNote       $05
000911C0 01                         	dc.b	$01
000911C1 E1FF                       	smpsAlterNote       $FF
000911C3 01                         	dc.b	$01
000911C4 ECF5                       	smpsPSGAlterVol     $F5
000911C6 9B07                       	dc.b	nD2, $07
000911C8 EC0B                       	smpsPSGAlterVol     $0B
000911CA 8004                       	dc.b	nRst, $04
000911CC ECF5                       	smpsPSGAlterVol     $F5
000911CE 9B06                       	dc.b	nD2, $06
000911D0 EC0B                       	smpsPSGAlterVol     $0B
000911D2 8007                       	dc.b	nRst, $07
000911D4 E105                       	smpsAlterNote       $05
000911D6 0101                       	dc.b	$01, $01
000911D8 E102                       	smpsAlterNote       $02
000911DA 01                         	dc.b	$01
000911DB E1FC                       	smpsAlterNote       $FC
000911DD 01                         	dc.b	$01
000911DE E1FF                       	smpsAlterNote       $FF
000911E0 ECF5                       	smpsPSGAlterVol     $F5
000911E2 9B06                       	dc.b	nD2, $06
000911E4 EC04                       	smpsPSGAlterVol     $04
000911E6 E701                       	dc.b	smpsNoAttack, $01
000911E8 EC07                       	smpsPSGAlterVol     $07
000911EA 8003                       	dc.b	nRst, $03
000911EC ECF5                       	smpsPSGAlterVol     $F5
000911EE 9B06                       	dc.b	nD2, $06
000911F0 EC04                       	smpsPSGAlterVol     $04
000911F2 E701                       	dc.b	smpsNoAttack, $01
000911F4 EC07                       	smpsPSGAlterVol     $07
000911F6 8006                       	dc.b	nRst, $06
000911F8 E102                       	smpsAlterNote       $02
000911FA 01                         	dc.b	$01
000911FB E106                       	smpsAlterNote       $06
000911FD 01                         	dc.b	$01
000911FE E102                       	smpsAlterNote       $02
00091200 01                         	dc.b	$01
00091201 E1FF                       	smpsAlterNote       $FF
00091203 01                         	dc.b	$01
00091204 ECF5                       	smpsPSGAlterVol     $F5
00091206 9B06                       	dc.b	nD2, $06
00091208 EC04                       	smpsPSGAlterVol     $04
0009120A E701                       	dc.b	smpsNoAttack, $01
0009120C EC07                       	smpsPSGAlterVol     $07
0009120E 8003                       	dc.b	nRst, $03
00091210 ECF5                       	smpsPSGAlterVol     $F5
00091212 9B07                       	dc.b	nD2, $07
00091214 E1FE                       	smpsAlterNote       $FE
00091216 9706                       	dc.b	nBb1, $06
00091218 EC04                       	smpsPSGAlterVol     $04
0009121A E701                       	dc.b	smpsNoAttack, $01
0009121C ECFC                       	smpsPSGAlterVol     $FC
0009121E 9703                       	dc.b	nBb1, $03
00091220 EC04                       	smpsPSGAlterVol     $04
00091222 E701                       	dc.b	smpsNoAttack, $01
00091224 ECFC                       	smpsPSGAlterVol     $FC
00091226 9702                       	dc.b	nBb1, $02
00091228 EC04                       	smpsPSGAlterVol     $04
0009122A E701                       	dc.b	smpsNoAttack, $01
0009122C ECFC                       	smpsPSGAlterVol     $FC
0009122E 9606                       	dc.b	nA1, $06
00091230 EC04                       	smpsPSGAlterVol     $04
00091232 E701                       	dc.b	smpsNoAttack, $01
00091234 EC07                       	smpsPSGAlterVol     $07
00091236 8006                       	dc.b	nRst, $06
00091238 E101                       	smpsAlterNote       $01
0009123A 01                         	dc.b	$01
0009123B E107                       	smpsAlterNote       $07
0009123D 01                         	dc.b	$01
0009123E E101                       	smpsAlterNote       $01
00091240 01                         	dc.b	$01
00091241 E1F8                       	smpsAlterNote       $F8
00091243 01                         	dc.b	$01
00091244 E1F7                       	smpsAlterNote       $F7
00091246 01                         	dc.b	$01
00091247 E1FC                       	smpsAlterNote       $FC
00091249 01                         	dc.b	$01
0009124A E106                       	smpsAlterNote       $06
0009124C 01                         	dc.b	$01
0009124D E107                       	smpsAlterNote       $07
0009124F 01                         	dc.b	$01
00091250 E101                       	smpsAlterNote       $01
00091252 01                         	dc.b	$01
00091253 E1F8                       	smpsAlterNote       $F8
00091255 0101                       	dc.b	$01, $01
00091257 E1FC                       	smpsAlterNote       $FC
00091259 ECF5                       	smpsPSGAlterVol     $F5
0009125B 8F06                       	dc.b	nD1, $06
0009125D EC04                       	smpsPSGAlterVol     $04
0009125F E701                       	dc.b	smpsNoAttack, $01
00091261 EC07                       	smpsPSGAlterVol     $07
00091263 8003                       	dc.b	nRst, $03
00091265 ECF5                       	smpsPSGAlterVol     $F5
00091267 8F06                       	dc.b	nD1, $06
00091269 EC04                       	smpsPSGAlterVol     $04
0009126B E701                       	dc.b	smpsNoAttack, $01
0009126D EC07                       	smpsPSGAlterVol     $07
0009126F 8006                       	dc.b	nRst, $06
00091271 E1FF                       	smpsAlterNote       $FF
00091273 01                         	dc.b	$01
00091274 E102                       	smpsAlterNote       $02
00091276 01                         	dc.b	$01
00091277 E101                       	smpsAlterNote       $01
00091279 01                         	dc.b	$01
0009127A E1FC                       	smpsAlterNote       $FC
0009127C 01                         	dc.b	$01
0009127D ECF5                       	smpsPSGAlterVol     $F5
0009127F 9007                       	dc.b	nEb1, $07
00091281 EC0B                       	smpsPSGAlterVol     $0B
00091283 8004                       	dc.b	nRst, $04
00091285 ECF5                       	smpsPSGAlterVol     $F5
00091287 9006                       	dc.b	nEb1, $06
00091289 EC0B                       	smpsPSGAlterVol     $0B
0009128B 8007                       	dc.b	nRst, $07
0009128D E103                       	smpsAlterNote       $03
0009128F 0101                       	dc.b	$01, $01
00091291 E1FC                       	smpsAlterNote       $FC
00091293 01                         	dc.b	$01
00091294 E1F9                       	smpsAlterNote       $F9
00091296 01                         	dc.b	$01
00091297 E1FC                       	smpsAlterNote       $FC
00091299 ECF5                       	smpsPSGAlterVol     $F5
0009129B 8F06                       	dc.b	nD1, $06
0009129D EC04                       	smpsPSGAlterVol     $04
0009129F E701                       	dc.b	smpsNoAttack, $01
000912A1 EC07                       	smpsPSGAlterVol     $07
000912A3 8003                       	dc.b	nRst, $03
000912A5 ECF5                       	smpsPSGAlterVol     $F5
000912A7 8F06                       	dc.b	nD1, $06
000912A9 EC04                       	smpsPSGAlterVol     $04
000912AB E701                       	dc.b	smpsNoAttack, $01
000912AD EC07                       	smpsPSGAlterVol     $07
000912AF 8006                       	dc.b	nRst, $06
000912B1 E1FF                       	smpsAlterNote       $FF
000912B3 01                         	dc.b	$01
000912B4 E103                       	smpsAlterNote       $03
000912B6 01                         	dc.b	$01
000912B7 E1FF                       	smpsAlterNote       $FF
000912B9 01                         	dc.b	$01
000912BA E1F9                       	smpsAlterNote       $F9
000912BC 01                         	dc.b	$01
000912BD E1FC                       	smpsAlterNote       $FC
000912BF ECF5                       	smpsPSGAlterVol     $F5
000912C1 8F06                       	dc.b	nD1, $06
000912C3 EC04                       	smpsPSGAlterVol     $04
000912C5 E701                       	dc.b	smpsNoAttack, $01
000912C7 EC07                       	smpsPSGAlterVol     $07
000912C9 8003                       	dc.b	nRst, $03
000912CB ECF5                       	smpsPSGAlterVol     $F5
000912CD 8F07                       	dc.b	nD1, $07
000912CF EC0B                       	smpsPSGAlterVol     $0B
000912D1 8006                       	dc.b	nRst, $06
000912D3 E1FF                       	smpsAlterNote       $FF
000912D5 01                         	dc.b	$01
000912D6 E102                       	smpsAlterNote       $02
000912D8 0101                       	dc.b	$01, $01
000912DA E1FC                       	smpsAlterNote       $FC
000912DC 01                         	dc.b	$01
000912DD ECF5                       	smpsPSGAlterVol     $F5
000912DF 8F07                       	dc.b	nD1, $07
000912E1 EC0B                       	smpsPSGAlterVol     $0B
000912E3 8004                       	dc.b	nRst, $04
000912E5 ECF5                       	smpsPSGAlterVol     $F5
000912E7 8F06                       	dc.b	nD1, $06
000912E9 EC04                       	smpsPSGAlterVol     $04
000912EB E701                       	dc.b	smpsNoAttack, $01
000912ED EC07                       	smpsPSGAlterVol     $07
000912EF 8006                       	dc.b	nRst, $06
000912F1 E101                       	smpsAlterNote       $01
000912F3 01                         	dc.b	$01
000912F4 E102                       	smpsAlterNote       $02
000912F6 01                         	dc.b	$01
000912F7 E1FF                       	smpsAlterNote       $FF
000912F9 01                         	dc.b	$01
000912FA E1F9                       	smpsAlterNote       $F9
000912FC 01                         	dc.b	$01
000912FD E1FC                       	smpsAlterNote       $FC
000912FF ECF5                       	smpsPSGAlterVol     $F5
00091301 9006                       	dc.b	nEb1, $06
00091303 EC04                       	smpsPSGAlterVol     $04
00091305 E701                       	dc.b	smpsNoAttack, $01
00091307 EC07                       	smpsPSGAlterVol     $07
00091309 8003                       	dc.b	nRst, $03
0009130B ECF5                       	smpsPSGAlterVol     $F5
0009130D 9006                       	dc.b	nEb1, $06
0009130F EC04                       	smpsPSGAlterVol     $04
00091311 E701                       	dc.b	smpsNoAttack, $01
00091313 EC07                       	smpsPSGAlterVol     $07
00091315 8006                       	dc.b	nRst, $06
00091317 E100                       	smpsAlterNote       $00
00091319 01                         	dc.b	$01
0009131A E102                       	smpsAlterNote       $02
0009131C 01                         	dc.b	$01
0009131D E100                       	smpsAlterNote       $00
0009131F 01                         	dc.b	$01
00091320 E1FF                       	smpsAlterNote       $FF
00091322 01                         	dc.b	$01
00091323 ECF5                       	smpsPSGAlterVol     $F5
00091325 9B06                       	dc.b	nD2, $06
00091327 EC04                       	smpsPSGAlterVol     $04
00091329 E701                       	dc.b	smpsNoAttack, $01
0009132B EC07                       	smpsPSGAlterVol     $07
0009132D 8003                       	dc.b	nRst, $03
0009132F ECF5                       	smpsPSGAlterVol     $F5
00091331 9B07                       	dc.b	nD2, $07
00091333 EC0B                       	smpsPSGAlterVol     $0B
00091335 8007                       	dc.b	nRst, $07
00091337 E105                       	smpsAlterNote       $05
00091339 0101                       	dc.b	$01, $01
0009133B E1FF                       	smpsAlterNote       $FF
0009133D 01                         	dc.b	$01
0009133E E1FC                       	smpsAlterNote       $FC
00091340 01                         	dc.b	$01
00091341 E1FF                       	smpsAlterNote       $FF
00091343 ECF5                       	smpsPSGAlterVol     $F5
00091345 9B06                       	dc.b	nD2, $06
00091347 EC0B                       	smpsPSGAlterVol     $0B
00091349 8004                       	dc.b	nRst, $04
0009134B ECF5                       	smpsPSGAlterVol     $F5
0009134D 9B06                       	dc.b	nD2, $06
0009134F EC04                       	smpsPSGAlterVol     $04
00091351 E701                       	dc.b	smpsNoAttack, $01
00091353 EC07                       	smpsPSGAlterVol     $07
00091355 8006                       	dc.b	nRst, $06
00091357 E102                       	smpsAlterNote       $02
00091359 01                         	dc.b	$01
0009135A E106                       	smpsAlterNote       $06
0009135C 01                         	dc.b	$01
0009135D E102                       	smpsAlterNote       $02
0009135F 01                         	dc.b	$01
00091360 E1FC                       	smpsAlterNote       $FC
00091362 01                         	dc.b	$01
00091363 E1FF                       	smpsAlterNote       $FF
00091365 ECF5                       	smpsPSGAlterVol     $F5
00091367 9B06                       	dc.b	nD2, $06
00091369 EC04                       	smpsPSGAlterVol     $04
0009136B E701                       	dc.b	smpsNoAttack, $01
0009136D EC07                       	smpsPSGAlterVol     $07
0009136F 8003                       	dc.b	nRst, $03
00091371 ECF5                       	smpsPSGAlterVol     $F5
00091373 9B07                       	dc.b	nD2, $07
00091375 EC0B                       	smpsPSGAlterVol     $0B
00091377 8006                       	dc.b	nRst, $06
00091379 E102                       	smpsAlterNote       $02
0009137B 01                         	dc.b	$01
0009137C E105                       	smpsAlterNote       $05
0009137E 0101                       	dc.b	$01, $01
00091380 E1FF                       	smpsAlterNote       $FF
00091382 01                         	dc.b	$01
00091383 ECF5                       	smpsPSGAlterVol     $F5
00091385 9B07                       	dc.b	nD2, $07
00091387 EC0B                       	smpsPSGAlterVol     $0B
00091389 8004                       	dc.b	nRst, $04
0009138B ECF5                       	smpsPSGAlterVol     $F5
0009138D 9B06                       	dc.b	nD2, $06
0009138F EC0B                       	smpsPSGAlterVol     $0B
00091391 8007                       	dc.b	nRst, $07
00091393 E105                       	smpsAlterNote       $05
00091395 0101                       	dc.b	$01, $01
00091397 E102                       	smpsAlterNote       $02
00091399 01                         	dc.b	$01
0009139A E1FC                       	smpsAlterNote       $FC
0009139C 01                         	dc.b	$01
0009139D E1FF                       	smpsAlterNote       $FF
0009139F ECF5                       	smpsPSGAlterVol     $F5
000913A1 9B06                       	dc.b	nD2, $06
000913A3 EC04                       	smpsPSGAlterVol     $04
000913A5 E701                       	dc.b	smpsNoAttack, $01
000913A7 EC07                       	smpsPSGAlterVol     $07
000913A9 8003                       	dc.b	nRst, $03
000913AB ECF5                       	smpsPSGAlterVol     $F5
000913AD 9B06                       	dc.b	nD2, $06
000913AF EC04                       	smpsPSGAlterVol     $04
000913B1 E701                       	dc.b	smpsNoAttack, $01
000913B3 EC07                       	smpsPSGAlterVol     $07
000913B5 8006                       	dc.b	nRst, $06
000913B7 E102                       	smpsAlterNote       $02
000913B9 01                         	dc.b	$01
000913BA E106                       	smpsAlterNote       $06
000913BC 01                         	dc.b	$01
000913BD E102                       	smpsAlterNote       $02
000913BF 01                         	dc.b	$01
000913C0 E1FF                       	smpsAlterNote       $FF
000913C2 01                         	dc.b	$01
000913C3 ECF5                       	smpsPSGAlterVol     $F5
000913C5 9B06                       	dc.b	nD2, $06
000913C7 EC04                       	smpsPSGAlterVol     $04
000913C9 E701                       	dc.b	smpsNoAttack, $01
000913CB EC07                       	smpsPSGAlterVol     $07
000913CD 8003                       	dc.b	nRst, $03
000913CF ECF5                       	smpsPSGAlterVol     $F5
000913D1 9B07                       	dc.b	nD2, $07
000913D3 EC0B                       	smpsPSGAlterVol     $0B
000913D5 8007                       	dc.b	nRst, $07
000913D7 E105                       	smpsAlterNote       $05
000913D9 0101                       	dc.b	$01, $01
000913DB E1FF                       	smpsAlterNote       $FF
000913DD 01                         	dc.b	$01
000913DE E1FC                       	smpsAlterNote       $FC
000913E0 01                         	dc.b	$01
000913E1 E1FF                       	smpsAlterNote       $FF
000913E3 ECF5                       	smpsPSGAlterVol     $F5
000913E5 9B06                       	dc.b	nD2, $06
000913E7 EC0B                       	smpsPSGAlterVol     $0B
000913E9 8004                       	dc.b	nRst, $04
000913EB ECF5                       	smpsPSGAlterVol     $F5
000913ED 9B06                       	dc.b	nD2, $06
000913EF EC04                       	smpsPSGAlterVol     $04
000913F1 E701                       	dc.b	smpsNoAttack, $01
000913F3 EC07                       	smpsPSGAlterVol     $07
000913F5 8006                       	dc.b	nRst, $06
000913F7 E102                       	smpsAlterNote       $02
000913F9 01                         	dc.b	$01
000913FA E106                       	smpsAlterNote       $06
000913FC 01                         	dc.b	$01
000913FD E102                       	smpsAlterNote       $02
000913FF 01                         	dc.b	$01
00091400 E1FC                       	smpsAlterNote       $FC
00091402 01                         	dc.b	$01
00091403 E1FF                       	smpsAlterNote       $FF
00091405 ECF5                       	smpsPSGAlterVol     $F5
00091407 9B06                       	dc.b	nD2, $06
00091409 EC04                       	smpsPSGAlterVol     $04
0009140B E701                       	dc.b	smpsNoAttack, $01
0009140D EC07                       	smpsPSGAlterVol     $07
0009140F 8003                       	dc.b	nRst, $03
00091411 ECF5                       	smpsPSGAlterVol     $F5
00091413 9B06                       	dc.b	nD2, $06
00091415 EC04                       	smpsPSGAlterVol     $04
00091417 E701                       	dc.b	smpsNoAttack, $01
00091419 EC07                       	smpsPSGAlterVol     $07
0009141B 8006                       	dc.b	nRst, $06
0009141D E102                       	smpsAlterNote       $02
0009141F 01                         	dc.b	$01
00091420 E106                       	smpsAlterNote       $06
00091422 01                         	dc.b	$01
00091423 E105                       	smpsAlterNote       $05
00091425 01                         	dc.b	$01
00091426 E1FF                       	smpsAlterNote       $FF
00091428 01                         	dc.b	$01
00091429 ECF5                       	smpsPSGAlterVol     $F5
0009142B 9B07                       	dc.b	nD2, $07
0009142D EC0B                       	smpsPSGAlterVol     $0B
0009142F 8004                       	dc.b	nRst, $04
00091431 ECF5                       	smpsPSGAlterVol     $F5
00091433 9B06                       	dc.b	nD2, $06
00091435 EC0B                       	smpsPSGAlterVol     $0B
00091437 8007                       	dc.b	nRst, $07
00091439 E105                       	smpsAlterNote       $05
0009143B 0101                       	dc.b	$01, $01
0009143D E101                       	smpsAlterNote       $01
0009143F 01                         	dc.b	$01
00091440 E1FB                       	smpsAlterNote       $FB
00091442 01                         	dc.b	$01
00091443 E1FE                       	smpsAlterNote       $FE
00091445 ECF5                       	smpsPSGAlterVol     $F5
00091447 9A06                       	dc.b	nCs2, $06
00091449 EC04                       	smpsPSGAlterVol     $04
0009144B E701                       	dc.b	smpsNoAttack, $01
0009144D EC07                       	smpsPSGAlterVol     $07
0009144F 8003                       	dc.b	nRst, $03
00091451 ECF5                       	smpsPSGAlterVol     $F5
00091453 9A06                       	dc.b	nCs2, $06
00091455 EC04                       	smpsPSGAlterVol     $04
00091457 E701                       	dc.b	smpsNoAttack, $01
00091459 EC07                       	smpsPSGAlterVol     $07
0009145B 8003                       	dc.b	nRst, $03
0009145D E1FC                       	smpsAlterNote       $FC
0009145F ECF5                       	smpsPSGAlterVol     $F5
00091461 8F07                       	dc.b	nD1, $07
00091463 EC0B                       	smpsPSGAlterVol     $0B
00091465 8006                       	dc.b	nRst, $06
00091467 E1FF                       	smpsAlterNote       $FF
00091469 01                         	dc.b	$01
0009146A E103                       	smpsAlterNote       $03
0009146C 01                         	dc.b	$01
0009146D E102                       	smpsAlterNote       $02
0009146F 01                         	dc.b	$01
00091470 E1FC                       	smpsAlterNote       $FC
00091472 01                         	dc.b	$01
00091473 E1F8                       	smpsAlterNote       $F8
00091475 01                         	dc.b	$01
00091476 E1FC                       	smpsAlterNote       $FC
00091478 01                         	dc.b	$01
00091479 E1FF                       	smpsAlterNote       $FF
0009147B 01                         	dc.b	$01
0009147C E103                       	smpsAlterNote       $03
0009147E 01                         	dc.b	$01
0009147F E1FC                       	smpsAlterNote       $FC
00091481 ECF5                       	smpsPSGAlterVol     $F5
00091483 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00091487 EC04                       	smpsPSGAlterVol     $04
00091489 E701                       	dc.b	smpsNoAttack, $01
0009148B EC07                       	smpsPSGAlterVol     $07
0009148D 8009                       	dc.b	nRst, $09
0009148F E1FF                       	smpsAlterNote       $FF
00091491 01                         	dc.b	$01
00091492 E103                       	smpsAlterNote       $03
00091494 01                         	dc.b	$01
00091495 E102                       	smpsAlterNote       $02
00091497 01                         	dc.b	$01
00091498 E1FC                       	smpsAlterNote       $FC
0009149A 01                         	dc.b	$01
0009149B E1F8                       	smpsAlterNote       $F8
0009149D 01                         	dc.b	$01
0009149E E1FC                       	smpsAlterNote       $FC
000914A0 01                         	dc.b	$01
000914A1 E1FF                       	smpsAlterNote       $FF
000914A3 01                         	dc.b	$01
000914A4 E103                       	smpsAlterNote       $03
000914A6 01                         	dc.b	$01
000914A7 E1FF                       	smpsAlterNote       $FF
000914A9 01                         	dc.b	$01
000914AA E1F9                       	smpsAlterNote       $F9
000914AC 01                         	dc.b	$01
000914AD E1F8                       	smpsAlterNote       $F8
000914AF 01                         	dc.b	$01
000914B0 E1FC                       	smpsAlterNote       $FC
000914B2 01                         	dc.b	$01
000914B3 E102                       	smpsAlterNote       $02
000914B5 0101                       	dc.b	$01, $01
000914B7 E1FF                       	smpsAlterNote       $FF
000914B9 01                         	dc.b	$01
000914BA E1FC                       	smpsAlterNote       $FC
000914BC ECF5                       	smpsPSGAlterVol     $F5
000914BE 8F02                       	dc.b	nD1, $02
000914C0 EC04                       	smpsPSGAlterVol     $04
000914C2 E701                       	dc.b	smpsNoAttack, $01
000914C4 ECFC                       	smpsPSGAlterVol     $FC
000914C6 E1FB                       	smpsAlterNote       $FB
000914C8 8D06                       	dc.b	nC1, $06
000914CA EC04                       	smpsPSGAlterVol     $04
000914CC E701                       	dc.b	smpsNoAttack, $01
000914CE EC07                       	smpsPSGAlterVol     $07
000914D0 8006                       	dc.b	nRst, $06
000914D2 E1FE                       	smpsAlterNote       $FE
000914D4 01                         	dc.b	$01
000914D5 E102                       	smpsAlterNote       $02
000914D7 01                         	dc.b	$01
000914D8 E1FE                       	smpsAlterNote       $FE
000914DA 01                         	dc.b	$01
000914DB E1FB                       	smpsAlterNote       $FB
000914DD 01                         	dc.b	$01
000914DE E1F7                       	smpsAlterNote       $F7
000914E0 01                         	dc.b	$01
000914E1 E1FB                       	smpsAlterNote       $FB
000914E3 01                         	dc.b	$01
000914E4 E101                       	smpsAlterNote       $01
000914E6 01                         	dc.b	$01
000914E7 E102                       	smpsAlterNote       $02
000914E9 01                         	dc.b	$01
000914EA E1FB                       	smpsAlterNote       $FB
000914EC ECF5                       	smpsPSGAlterVol     $F5
000914EE 8D02                       	dc.b	nC1, $02
000914F0 EC04                       	smpsPSGAlterVol     $04
000914F2 E701                       	dc.b	smpsNoAttack, $01
000914F4 E1FC                       	smpsAlterNote       $FC
000914F6 ECFC                       	smpsPSGAlterVol     $FC
000914F8 8F0D                       	dc.b	nD1, $0D
000914FA E1FF                       	smpsAlterNote       $FF
000914FC E701                       	dc.b	smpsNoAttack, $01
000914FE E103                       	smpsAlterNote       $03
00091500 E701                       	dc.b	smpsNoAttack, $01
00091502 E1FF                       	smpsAlterNote       $FF
00091504 E701                       	dc.b	smpsNoAttack, $01
00091506 E1FC                       	smpsAlterNote       $FC
00091508 E701                       	dc.b	smpsNoAttack, $01
0009150A E1F8                       	smpsAlterNote       $F8
0009150C E701                       	dc.b	smpsNoAttack, $01
0009150E E1FC                       	smpsAlterNote       $FC
00091510 E701                       	dc.b	smpsNoAttack, $01
00091512 E102                       	smpsAlterNote       $02
00091514 E701                       	dc.b	smpsNoAttack, $01
00091516 E103                       	smpsAlterNote       $03
00091518 E701                       	dc.b	smpsNoAttack, $01
0009151A E1FF                       	smpsAlterNote       $FF
0009151C E701                       	dc.b	smpsNoAttack, $01
0009151E E1F9                       	smpsAlterNote       $F9
00091520 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091524 E1FC                       	smpsAlterNote       $FC
00091526 E701                       	dc.b	smpsNoAttack, $01
00091528 E102                       	smpsAlterNote       $02
0009152A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009152E E1FC                       	smpsAlterNote       $FC
00091530 E701                       	dc.b	smpsNoAttack, $01
00091532 E1F9                       	smpsAlterNote       $F9
00091534 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091538 E1FF                       	smpsAlterNote       $FF
0009153A EC04                       	smpsPSGAlterVol     $04
0009153C E701                       	dc.b	smpsNoAttack, $01
0009153E EC07                       	smpsPSGAlterVol     $07
00091540 E103                       	smpsAlterNote       $03
00091542 8001                       	dc.b	nRst, $01
00091544 E102                       	smpsAlterNote       $02
00091546 01                         	dc.b	$01
00091547 E1FB                       	smpsAlterNote       $FB
00091549 01                         	dc.b	$01
0009154A E1F7                       	smpsAlterNote       $F7
0009154C 01                         	dc.b	$01
0009154D E1FB                       	smpsAlterNote       $FB
0009154F 01                         	dc.b	$01
00091550 E102                       	smpsAlterNote       $02
00091552 01                         	dc.b	$01
00091553 E103                       	smpsAlterNote       $03
00091555 01                         	dc.b	$01
00091556 E1FB                       	smpsAlterNote       $FB
00091558 ECF5                       	smpsPSGAlterVol     $F5
0009155A 8E06                       	dc.b	nCs1, $06
0009155C EC04                       	smpsPSGAlterVol     $04
0009155E E701                       	dc.b	smpsNoAttack, $01
00091560 EC07                       	smpsPSGAlterVol     $07
00091562 8003                       	dc.b	nRst, $03
00091564 ECF5                       	smpsPSGAlterVol     $F5
00091566 8E06                       	dc.b	nCs1, $06
00091568 EC04                       	smpsPSGAlterVol     $04
0009156A E701                       	dc.b	smpsNoAttack, $01
0009156C EC07                       	smpsPSGAlterVol     $07
0009156E 8006                       	dc.b	nRst, $06
00091570 E1FE                       	smpsAlterNote       $FE
00091572 01                         	dc.b	$01
00091573 E102                       	smpsAlterNote       $02
00091575 01                         	dc.b	$01
00091576 E1FE                       	smpsAlterNote       $FE
00091578 01                         	dc.b	$01
00091579 E1F9                       	smpsAlterNote       $F9
0009157B 01                         	dc.b	$01
0009157C E1FC                       	smpsAlterNote       $FC
0009157E ECF5                       	smpsPSGAlterVol     $F5
00091580 8F06                       	dc.b	nD1, $06
00091582 EC04                       	smpsPSGAlterVol     $04
00091584 E701                       	dc.b	smpsNoAttack, $01
00091586 EC07                       	smpsPSGAlterVol     $07
00091588 8003                       	dc.b	nRst, $03
0009158A ECF5                       	smpsPSGAlterVol     $F5
0009158C 8F07                       	dc.b	nD1, $07
0009158E EC0B                       	smpsPSGAlterVol     $0B
00091590 8006                       	dc.b	nRst, $06
00091592 E1FF                       	smpsAlterNote       $FF
00091594 01                         	dc.b	$01
00091595 E102                       	smpsAlterNote       $02
00091597 0101                       	dc.b	$01, $01
00091599 E1FB                       	smpsAlterNote       $FB
0009159B 01                         	dc.b	$01
0009159C ECF5                       	smpsPSGAlterVol     $F5
0009159E 8E07                       	dc.b	nCs1, $07
000915A0 EC0B                       	smpsPSGAlterVol     $0B
000915A2 8004                       	dc.b	nRst, $04
000915A4 ECF5                       	smpsPSGAlterVol     $F5
000915A6 8E06                       	dc.b	nCs1, $06
000915A8 EC04                       	smpsPSGAlterVol     $04
000915AA E701                       	dc.b	smpsNoAttack, $01
000915AC EC07                       	smpsPSGAlterVol     $07
000915AE 8006                       	dc.b	nRst, $06
000915B0 E101                       	smpsAlterNote       $01
000915B2 01                         	dc.b	$01
000915B3 E102                       	smpsAlterNote       $02
000915B5 01                         	dc.b	$01
000915B6 E1FE                       	smpsAlterNote       $FE
000915B8 01                         	dc.b	$01
000915B9 E1F8                       	smpsAlterNote       $F8
000915BB 01                         	dc.b	$01
000915BC E1FB                       	smpsAlterNote       $FB
000915BE ECF5                       	smpsPSGAlterVol     $F5
000915C0 8E06                       	dc.b	nCs1, $06
000915C2 EC04                       	smpsPSGAlterVol     $04
000915C4 E701                       	dc.b	smpsNoAttack, $01
000915C6 EC07                       	smpsPSGAlterVol     $07
000915C8 8003                       	dc.b	nRst, $03
000915CA ECF5                       	smpsPSGAlterVol     $F5
000915CC 8E06                       	dc.b	nCs1, $06
000915CE EC04                       	smpsPSGAlterVol     $04
000915D0 E701                       	dc.b	smpsNoAttack, $01
000915D2 EC07                       	smpsPSGAlterVol     $07
000915D4 8004                       	dc.b	nRst, $04
000915D6 E1FC                       	smpsAlterNote       $FC
000915D8 ECF5                       	smpsPSGAlterVol     $F5
000915DA 8F06                       	dc.b	nD1, $06
000915DC EC0B                       	smpsPSGAlterVol     $0B
000915DE 8006                       	dc.b	nRst, $06
000915E0 E1FF                       	smpsAlterNote       $FF
000915E2 01                         	dc.b	$01
000915E3 E102                       	smpsAlterNote       $02
000915E5 0101                       	dc.b	$01, $01
000915E7 E1FC                       	smpsAlterNote       $FC
000915E9 01                         	dc.b	$01
000915EA E1F8                       	smpsAlterNote       $F8
000915EC 01                         	dc.b	$01
000915ED E1F9                       	smpsAlterNote       $F9
000915EF 01                         	dc.b	$01
000915F0 E1FF                       	smpsAlterNote       $FF
000915F2 01                         	dc.b	$01
000915F3 E103                       	smpsAlterNote       $03
000915F5 01                         	dc.b	$01
000915F6 E1FC                       	smpsAlterNote       $FC
000915F8 ECF5                       	smpsPSGAlterVol     $F5
000915FA 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000915FE EC04                       	smpsPSGAlterVol     $04
00091600 E701                       	dc.b	smpsNoAttack, $01
00091602 EC07                       	smpsPSGAlterVol     $07
00091604 8009                       	dc.b	nRst, $09
00091606 E1FF                       	smpsAlterNote       $FF
00091608 01                         	dc.b	$01
00091609 E102                       	smpsAlterNote       $02
0009160B 0101                       	dc.b	$01, $01
0009160D E1FC                       	smpsAlterNote       $FC
0009160F 01                         	dc.b	$01
00091610 E1F8                       	smpsAlterNote       $F8
00091612 01                         	dc.b	$01
00091613 E1F9                       	smpsAlterNote       $F9
00091615 01                         	dc.b	$01
00091616 E1FF                       	smpsAlterNote       $FF
00091618 01                         	dc.b	$01
00091619 E103                       	smpsAlterNote       $03
0009161B 01                         	dc.b	$01
0009161C E1FF                       	smpsAlterNote       $FF
0009161E 01                         	dc.b	$01
0009161F E1FC                       	smpsAlterNote       $FC
00091621 01                         	dc.b	$01
00091622 E1F8                       	smpsAlterNote       $F8
00091624 01                         	dc.b	$01
00091625 E1FC                       	smpsAlterNote       $FC
00091627 01                         	dc.b	$01
00091628 E102                       	smpsAlterNote       $02
0009162A 01                         	dc.b	$01
0009162B E103                       	smpsAlterNote       $03
0009162D 01                         	dc.b	$01
0009162E E1FF                       	smpsAlterNote       $FF
00091630 01                         	dc.b	$01
00091631 E1FC                       	smpsAlterNote       $FC
00091633 ECF5                       	smpsPSGAlterVol     $F5
00091635 8F03                       	dc.b	nD1, $03
00091637 E1FB                       	smpsAlterNote       $FB
00091639 8D06                       	dc.b	nC1, $06
0009163B EC04                       	smpsPSGAlterVol     $04
0009163D E701                       	dc.b	smpsNoAttack, $01
0009163F EC07                       	smpsPSGAlterVol     $07
00091641 8006                       	dc.b	nRst, $06
00091643 E1FE                       	smpsAlterNote       $FE
00091645 01                         	dc.b	$01
00091646 E102                       	smpsAlterNote       $02
00091648 01                         	dc.b	$01
00091649 E101                       	smpsAlterNote       $01
0009164B 01                         	dc.b	$01
0009164C E1FB                       	smpsAlterNote       $FB
0009164E 01                         	dc.b	$01
0009164F E1F7                       	smpsAlterNote       $F7
00091651 01                         	dc.b	$01
00091652 E1FB                       	smpsAlterNote       $FB
00091654 01                         	dc.b	$01
00091655 E1FE                       	smpsAlterNote       $FE
00091657 01                         	dc.b	$01
00091658 E102                       	smpsAlterNote       $02
0009165A 01                         	dc.b	$01
0009165B E1FB                       	smpsAlterNote       $FB
0009165D ECF5                       	smpsPSGAlterVol     $F5
0009165F 8D03                       	dc.b	nC1, $03
00091661 E1FC                       	smpsAlterNote       $FC
00091663 8F0D                       	dc.b	nD1, $0D
00091665 E1FF                       	smpsAlterNote       $FF
00091667 E701                       	dc.b	smpsNoAttack, $01
00091669 E103                       	smpsAlterNote       $03
0009166B E701                       	dc.b	smpsNoAttack, $01
0009166D E1FF                       	smpsAlterNote       $FF
0009166F E701                       	dc.b	smpsNoAttack, $01
00091671 E1FC                       	smpsAlterNote       $FC
00091673 E701                       	dc.b	smpsNoAttack, $01
00091675 E1F8                       	smpsAlterNote       $F8
00091677 E701                       	dc.b	smpsNoAttack, $01
00091679 E1FC                       	smpsAlterNote       $FC
0009167B E701                       	dc.b	smpsNoAttack, $01
0009167D E102                       	smpsAlterNote       $02
0009167F E701                       	dc.b	smpsNoAttack, $01
00091681 E103                       	smpsAlterNote       $03
00091683 E701                       	dc.b	smpsNoAttack, $01
00091685 E1FF                       	smpsAlterNote       $FF
00091687 E701                       	dc.b	smpsNoAttack, $01
00091689 E1F9                       	smpsAlterNote       $F9
0009168B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009168F E1FC                       	smpsAlterNote       $FC
00091691 E701                       	dc.b	smpsNoAttack, $01
00091693 E102                       	smpsAlterNote       $02
00091695 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091699 E1FF                       	smpsAlterNote       $FF
0009169B E701                       	dc.b	smpsNoAttack, $01
0009169D E1F9                       	smpsAlterNote       $F9
0009169F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000916A3 E1FF                       	smpsAlterNote       $FF
000916A5 EC04                       	smpsPSGAlterVol     $04
000916A7 E701                       	dc.b	smpsNoAttack, $01
000916A9 EC07                       	smpsPSGAlterVol     $07
000916AB E103                       	smpsAlterNote       $03
000916AD 8001                       	dc.b	nRst, $01
000916AF E102                       	smpsAlterNote       $02
000916B1 01                         	dc.b	$01
000916B2 E1FB                       	smpsAlterNote       $FB
000916B4 01                         	dc.b	$01
000916B5 E1F7                       	smpsAlterNote       $F7
000916B7 01                         	dc.b	$01
000916B8 E1FB                       	smpsAlterNote       $FB
000916BA 01                         	dc.b	$01
000916BB E1FF                       	smpsAlterNote       $FF
000916BD 01                         	dc.b	$01
000916BE E103                       	smpsAlterNote       $03
000916C0 01                         	dc.b	$01
000916C1 E1FB                       	smpsAlterNote       $FB
000916C3 ECF5                       	smpsPSGAlterVol     $F5
000916C5 8E06                       	dc.b	nCs1, $06
000916C7 EC04                       	smpsPSGAlterVol     $04
000916C9 E701                       	dc.b	smpsNoAttack, $01
000916CB EC07                       	smpsPSGAlterVol     $07
000916CD 8003                       	dc.b	nRst, $03
000916CF ECF5                       	smpsPSGAlterVol     $F5
000916D1 8E06                       	dc.b	nCs1, $06
000916D3 EC04                       	smpsPSGAlterVol     $04
000916D5 E701                       	dc.b	smpsNoAttack, $01
000916D7 EC07                       	smpsPSGAlterVol     $07
000916D9 8006                       	dc.b	nRst, $06
000916DB E1FE                       	smpsAlterNote       $FE
000916DD 01                         	dc.b	$01
000916DE E102                       	smpsAlterNote       $02
000916E0 01                         	dc.b	$01
000916E1 E1FE                       	smpsAlterNote       $FE
000916E3 01                         	dc.b	$01
000916E4 E1FC                       	smpsAlterNote       $FC
000916E6 01                         	dc.b	$01
000916E7 ECF5                       	smpsPSGAlterVol     $F5
000916E9 8F06                       	dc.b	nD1, $06
000916EB EC04                       	smpsPSGAlterVol     $04
000916ED E701                       	dc.b	smpsNoAttack, $01
000916EF EC07                       	smpsPSGAlterVol     $07
000916F1 8003                       	dc.b	nRst, $03
000916F3 ECF5                       	smpsPSGAlterVol     $F5
000916F5 8F07                       	dc.b	nD1, $07
000916F7 EC0B                       	smpsPSGAlterVol     $0B
000916F9 8007                       	dc.b	nRst, $07
000916FB E102                       	smpsAlterNote       $02
000916FD 0101                       	dc.b	$01, $01
000916FF E1FB                       	smpsAlterNote       $FB
00091701 01                         	dc.b	$01
00091702 E1F8                       	smpsAlterNote       $F8
00091704 01                         	dc.b	$01
00091705 E1FB                       	smpsAlterNote       $FB
00091707 ECF5                       	smpsPSGAlterVol     $F5
00091709 8E06                       	dc.b	nCs1, $06
0009170B EC0B                       	smpsPSGAlterVol     $0B
0009170D 8004                       	dc.b	nRst, $04
0009170F ECF5                       	smpsPSGAlterVol     $F5
00091711 8E06                       	dc.b	nCs1, $06
00091713 EC04                       	smpsPSGAlterVol     $04
00091715 E701                       	dc.b	smpsNoAttack, $01
00091717 EC07                       	smpsPSGAlterVol     $07
00091719 8006                       	dc.b	nRst, $06
0009171B E1FE                       	smpsAlterNote       $FE
0009171D 01                         	dc.b	$01
0009171E E102                       	smpsAlterNote       $02
00091720 01                         	dc.b	$01
00091721 E1FE                       	smpsAlterNote       $FE
00091723 01                         	dc.b	$01
00091724 E1F9                       	smpsAlterNote       $F9
00091726 01                         	dc.b	$01
00091727 E1FC                       	smpsAlterNote       $FC
00091729 ECF5                       	smpsPSGAlterVol     $F5
0009172B 8F06                       	dc.b	nD1, $06
0009172D EC04                       	smpsPSGAlterVol     $04
0009172F E701                       	dc.b	smpsNoAttack, $01
00091731 EC07                       	smpsPSGAlterVol     $07
00091733 8003                       	dc.b	nRst, $03
00091735 ECF5                       	smpsPSGAlterVol     $F5
00091737 8F06                       	dc.b	nD1, $06
00091739 EC04                       	smpsPSGAlterVol     $04
0009173B E701                       	dc.b	smpsNoAttack, $01
0009173D EC07                       	smpsPSGAlterVol     $07
0009173F 8006                       	dc.b	nRst, $06
00091741 E1FF                       	smpsAlterNote       $FF
00091743 01                         	dc.b	$01
00091744 E103                       	smpsAlterNote       $03
00091746 01                         	dc.b	$01
00091747 E102                       	smpsAlterNote       $02
00091749 01                         	dc.b	$01
0009174A E1FB                       	smpsAlterNote       $FB
0009174C 01                         	dc.b	$01
0009174D ECF5                       	smpsPSGAlterVol     $F5
0009174F 8E07                       	dc.b	nCs1, $07
00091751 EC0B                       	smpsPSGAlterVol     $0B
00091753 8004                       	dc.b	nRst, $04
00091755 ECF5                       	smpsPSGAlterVol     $F5
00091757 8E06                       	dc.b	nCs1, $06
00091759 EC0B                       	smpsPSGAlterVol     $0B
0009175B 8007                       	dc.b	nRst, $07
0009175D E101                       	smpsAlterNote       $01
0009175F 0101                       	dc.b	$01, $01
00091761 E1FE                       	smpsAlterNote       $FE
00091763 01                         	dc.b	$01
00091764 E1F9                       	smpsAlterNote       $F9
00091766 01                         	dc.b	$01
00091767 E1FC                       	smpsAlterNote       $FC
00091769 ECF5                       	smpsPSGAlterVol     $F5
0009176B 8F06                       	dc.b	nD1, $06
0009176D EC04                       	smpsPSGAlterVol     $04
0009176F E701                       	dc.b	smpsNoAttack, $01
00091771 EC07                       	smpsPSGAlterVol     $07
00091773 8003                       	dc.b	nRst, $03
00091775 ECF5                       	smpsPSGAlterVol     $F5
00091777 8F06                       	dc.b	nD1, $06
00091779 EC04                       	smpsPSGAlterVol     $04
0009177B E701                       	dc.b	smpsNoAttack, $01
0009177D EC07                       	smpsPSGAlterVol     $07
0009177F 8006                       	dc.b	nRst, $06
00091781 E1FF                       	smpsAlterNote       $FF
00091783 01                         	dc.b	$01
00091784 E103                       	smpsAlterNote       $03
00091786 01                         	dc.b	$01
00091787 E1FF                       	smpsAlterNote       $FF
00091789 01                         	dc.b	$01
0009178A E1FB                       	smpsAlterNote       $FB
0009178C 01                         	dc.b	$01
0009178D ECF5                       	smpsPSGAlterVol     $F5
0009178F 8E06                       	dc.b	nCs1, $06
00091791 EC04                       	smpsPSGAlterVol     $04
00091793 E701                       	dc.b	smpsNoAttack, $01
00091795 EC07                       	smpsPSGAlterVol     $07
00091797 8003                       	dc.b	nRst, $03
00091799 ECF5                       	smpsPSGAlterVol     $F5
0009179B 8E07                       	dc.b	nCs1, $07
0009179D E1FF                       	smpsAlterNote       $FF
0009179F 9B06                       	dc.b	nD2, $06
000917A1 EC04                       	smpsPSGAlterVol     $04
000917A3 E701                       	dc.b	smpsNoAttack, $01
000917A5 ECFC                       	smpsPSGAlterVol     $FC
000917A7 9B03                       	dc.b	nD2, $03
000917A9 EC04                       	smpsPSGAlterVol     $04
000917AB E701                       	dc.b	smpsNoAttack, $01
000917AD ECFC                       	smpsPSGAlterVol     $FC
000917AF 9B02                       	dc.b	nD2, $02
000917B1 EC04                       	smpsPSGAlterVol     $04
000917B3 E701                       	dc.b	smpsNoAttack, $01
000917B5 ECFC                       	smpsPSGAlterVol     $FC
000917B7 E1FE                       	smpsAlterNote       $FE
000917B9 9A03                       	dc.b	nCs2, $03
000917BB EC0B                       	smpsPSGAlterVol     $0B
000917BD 800A                       	dc.b	nRst, $0A
000917BF E102                       	smpsAlterNote       $02
000917C1 01                         	dc.b	$01
000917C2 E10A                       	smpsAlterNote       $0A
000917C4 01                         	dc.b	$01
000917C5 E102                       	smpsAlterNote       $02
000917C7 01                         	dc.b	$01
000917C8 E1F7                       	smpsAlterNote       $F7
000917CA 01                         	dc.b	$01
000917CB E10A                       	smpsAlterNote       $0A
000917CD 01                         	dc.b	$01
000917CE E1FC                       	smpsAlterNote       $FC
000917D0 01                         	dc.b	$01
000917D1 E108                       	smpsAlterNote       $08
000917D3 0101                       	dc.b	$01, $01
000917D5 E102                       	smpsAlterNote       $02
000917D7 01                         	dc.b	$01
000917D8 E1F7                       	smpsAlterNote       $F7
000917DA 0101                       	dc.b	$01, $01
000917DC E1FC                       	smpsAlterNote       $FC
000917DE ECF5                       	smpsPSGAlterVol     $F5
000917E0 8F06                       	dc.b	nD1, $06
000917E2 EC04                       	smpsPSGAlterVol     $04
000917E4 E701                       	dc.b	smpsNoAttack, $01
000917E6 EC07                       	smpsPSGAlterVol     $07
000917E8 8003                       	dc.b	nRst, $03
000917EA ECF5                       	smpsPSGAlterVol     $F5
000917EC 8F06                       	dc.b	nD1, $06
000917EE EC04                       	smpsPSGAlterVol     $04
000917F0 E701                       	dc.b	smpsNoAttack, $01
000917F2 EC07                       	smpsPSGAlterVol     $07
000917F4 8006                       	dc.b	nRst, $06
000917F6 E1FF                       	smpsAlterNote       $FF
000917F8 01                         	dc.b	$01
000917F9 E102                       	smpsAlterNote       $02
000917FB 01                         	dc.b	$01
000917FC E101                       	smpsAlterNote       $01
000917FE 01                         	dc.b	$01
000917FF E1FC                       	smpsAlterNote       $FC
00091801 01                         	dc.b	$01
00091802 ECF5                       	smpsPSGAlterVol     $F5
00091804 9007                       	dc.b	nEb1, $07
00091806 EC0B                       	smpsPSGAlterVol     $0B
00091808 8004                       	dc.b	nRst, $04
0009180A ECF5                       	smpsPSGAlterVol     $F5
0009180C 9006                       	dc.b	nEb1, $06
0009180E EC0B                       	smpsPSGAlterVol     $0B
00091810 8007                       	dc.b	nRst, $07
00091812 E103                       	smpsAlterNote       $03
00091814 0101                       	dc.b	$01, $01
00091816 E1FF                       	smpsAlterNote       $FF
00091818 01                         	dc.b	$01
00091819 E1F9                       	smpsAlterNote       $F9
0009181B 01                         	dc.b	$01
0009181C E1FC                       	smpsAlterNote       $FC
0009181E ECF5                       	smpsPSGAlterVol     $F5
00091820 8F06                       	dc.b	nD1, $06
00091822 EC04                       	smpsPSGAlterVol     $04
00091824 E701                       	dc.b	smpsNoAttack, $01
00091826 EC07                       	smpsPSGAlterVol     $07
00091828 8003                       	dc.b	nRst, $03
0009182A ECF5                       	smpsPSGAlterVol     $F5
0009182C 8F06                       	dc.b	nD1, $06
0009182E EC04                       	smpsPSGAlterVol     $04
00091830 E701                       	dc.b	smpsNoAttack, $01
00091832 EC07                       	smpsPSGAlterVol     $07
00091834 8006                       	dc.b	nRst, $06
00091836 E1FF                       	smpsAlterNote       $FF
00091838 01                         	dc.b	$01
00091839 E103                       	smpsAlterNote       $03
0009183B 01                         	dc.b	$01
0009183C E1FF                       	smpsAlterNote       $FF
0009183E 01                         	dc.b	$01
0009183F E1F9                       	smpsAlterNote       $F9
00091841 01                         	dc.b	$01
00091842 E1FC                       	smpsAlterNote       $FC
00091844 ECF5                       	smpsPSGAlterVol     $F5
00091846 8F06                       	dc.b	nD1, $06
00091848 EC04                       	smpsPSGAlterVol     $04
0009184A E701                       	dc.b	smpsNoAttack, $01
0009184C EC07                       	smpsPSGAlterVol     $07
0009184E 8003                       	dc.b	nRst, $03
00091850 ECF5                       	smpsPSGAlterVol     $F5
00091852 8F07                       	dc.b	nD1, $07
00091854 EC0B                       	smpsPSGAlterVol     $0B
00091856 8006                       	dc.b	nRst, $06
00091858 E1FF                       	smpsAlterNote       $FF
0009185A 01                         	dc.b	$01
0009185B E102                       	smpsAlterNote       $02
0009185D 0101                       	dc.b	$01, $01
0009185F E1FC                       	smpsAlterNote       $FC
00091861 01                         	dc.b	$01
00091862 ECF5                       	smpsPSGAlterVol     $F5
00091864 8F07                       	dc.b	nD1, $07
00091866 EC0B                       	smpsPSGAlterVol     $0B
00091868 8004                       	dc.b	nRst, $04
0009186A ECF5                       	smpsPSGAlterVol     $F5
0009186C 8F06                       	dc.b	nD1, $06
0009186E EC04                       	smpsPSGAlterVol     $04
00091870 E701                       	dc.b	smpsNoAttack, $01
00091872 EC07                       	smpsPSGAlterVol     $07
00091874 8006                       	dc.b	nRst, $06
00091876 E101                       	smpsAlterNote       $01
00091878 01                         	dc.b	$01
00091879 E102                       	smpsAlterNote       $02
0009187B 01                         	dc.b	$01
0009187C E1FF                       	smpsAlterNote       $FF
0009187E 01                         	dc.b	$01
0009187F E1F9                       	smpsAlterNote       $F9
00091881 01                         	dc.b	$01
00091882 E1FC                       	smpsAlterNote       $FC
00091884 ECF5                       	smpsPSGAlterVol     $F5
00091886 9006                       	dc.b	nEb1, $06
00091888 EC04                       	smpsPSGAlterVol     $04
0009188A E701                       	dc.b	smpsNoAttack, $01
0009188C EC07                       	smpsPSGAlterVol     $07
0009188E 8003                       	dc.b	nRst, $03
00091890 ECF5                       	smpsPSGAlterVol     $F5
00091892 9006                       	dc.b	nEb1, $06
00091894 EC04                       	smpsPSGAlterVol     $04
00091896 E701                       	dc.b	smpsNoAttack, $01
00091898 EC07                       	smpsPSGAlterVol     $07
0009189A 8006                       	dc.b	nRst, $06
0009189C E100                       	smpsAlterNote       $00
0009189E 01                         	dc.b	$01
0009189F E102                       	smpsAlterNote       $02
000918A1 01                         	dc.b	$01
000918A2 E100                       	smpsAlterNote       $00
000918A4 01                         	dc.b	$01
000918A5 E1FF                       	smpsAlterNote       $FF
000918A7 01                         	dc.b	$01
000918A8 ECF5                       	smpsPSGAlterVol     $F5
000918AA 9B06                       	dc.b	nD2, $06
000918AC EC04                       	smpsPSGAlterVol     $04
000918AE E701                       	dc.b	smpsNoAttack, $01
000918B0 EC07                       	smpsPSGAlterVol     $07
000918B2 8003                       	dc.b	nRst, $03
000918B4 ECF5                       	smpsPSGAlterVol     $F5
000918B6 9B07                       	dc.b	nD2, $07
000918B8 EC0B                       	smpsPSGAlterVol     $0B
000918BA 8007                       	dc.b	nRst, $07
000918BC E105                       	smpsAlterNote       $05
000918BE 0101                       	dc.b	$01, $01
000918C0 E1FF                       	smpsAlterNote       $FF
000918C2 01                         	dc.b	$01
000918C3 E1FC                       	smpsAlterNote       $FC
000918C5 01                         	dc.b	$01
000918C6 E1FF                       	smpsAlterNote       $FF
000918C8 ECF5                       	smpsPSGAlterVol     $F5
000918CA 9B06                       	dc.b	nD2, $06
000918CC EC0B                       	smpsPSGAlterVol     $0B
000918CE 8004                       	dc.b	nRst, $04
000918D0 ECF5                       	smpsPSGAlterVol     $F5
000918D2 9B06                       	dc.b	nD2, $06
000918D4 EC04                       	smpsPSGAlterVol     $04
000918D6 E701                       	dc.b	smpsNoAttack, $01
000918D8 EC07                       	smpsPSGAlterVol     $07
000918DA 8006                       	dc.b	nRst, $06
000918DC E102                       	smpsAlterNote       $02
000918DE 01                         	dc.b	$01
000918DF E106                       	smpsAlterNote       $06
000918E1 01                         	dc.b	$01
000918E2 E102                       	smpsAlterNote       $02
000918E4 01                         	dc.b	$01
000918E5 E1FC                       	smpsAlterNote       $FC
000918E7 01                         	dc.b	$01
000918E8 E1FF                       	smpsAlterNote       $FF
000918EA ECF5                       	smpsPSGAlterVol     $F5
000918EC 9B06                       	dc.b	nD2, $06
000918EE EC04                       	smpsPSGAlterVol     $04
000918F0 E701                       	dc.b	smpsNoAttack, $01
000918F2 EC07                       	smpsPSGAlterVol     $07
000918F4 8003                       	dc.b	nRst, $03
000918F6 ECF5                       	smpsPSGAlterVol     $F5
000918F8 9B07                       	dc.b	nD2, $07
000918FA EC0B                       	smpsPSGAlterVol     $0B
000918FC 8006                       	dc.b	nRst, $06
000918FE E102                       	smpsAlterNote       $02
00091900 01                         	dc.b	$01
00091901 E105                       	smpsAlterNote       $05
00091903 0101                       	dc.b	$01, $01
00091905 E1FF                       	smpsAlterNote       $FF
00091907 01                         	dc.b	$01
00091908 ECF5                       	smpsPSGAlterVol     $F5
0009190A 9B07                       	dc.b	nD2, $07
0009190C EC0B                       	smpsPSGAlterVol     $0B
0009190E 8004                       	dc.b	nRst, $04
00091910 ECF5                       	smpsPSGAlterVol     $F5
00091912 9B06                       	dc.b	nD2, $06
00091914 EC04                       	smpsPSGAlterVol     $04
00091916 E701                       	dc.b	smpsNoAttack, $01
00091918 EC07                       	smpsPSGAlterVol     $07
0009191A 8006                       	dc.b	nRst, $06
0009191C E105                       	smpsAlterNote       $05
0009191E 0101                       	dc.b	$01, $01
00091920 E102                       	smpsAlterNote       $02
00091922 01                         	dc.b	$01
00091923 E1FC                       	smpsAlterNote       $FC
00091925 01                         	dc.b	$01
00091926 E1FF                       	smpsAlterNote       $FF
00091928 ECF5                       	smpsPSGAlterVol     $F5
0009192A 9B06                       	dc.b	nD2, $06
0009192C EC04                       	smpsPSGAlterVol     $04
0009192E E701                       	dc.b	smpsNoAttack, $01
00091930 EC07                       	smpsPSGAlterVol     $07
00091932 8003                       	dc.b	nRst, $03
00091934 ECF5                       	smpsPSGAlterVol     $F5
00091936 9B06                       	dc.b	nD2, $06
00091938 EC04                       	smpsPSGAlterVol     $04
0009193A E701                       	dc.b	smpsNoAttack, $01
0009193C EC07                       	smpsPSGAlterVol     $07
0009193E 8006                       	dc.b	nRst, $06
00091940 E102                       	smpsAlterNote       $02
00091942 01                         	dc.b	$01
00091943 E106                       	smpsAlterNote       $06
00091945 01                         	dc.b	$01
00091946 E102                       	smpsAlterNote       $02
00091948 01                         	dc.b	$01
00091949 E1FF                       	smpsAlterNote       $FF
0009194B 01                         	dc.b	$01
0009194C ECF5                       	smpsPSGAlterVol     $F5
0009194E 9B06                       	dc.b	nD2, $06
00091950 EC04                       	smpsPSGAlterVol     $04
00091952 E701                       	dc.b	smpsNoAttack, $01
00091954 EC07                       	smpsPSGAlterVol     $07
00091956 8003                       	dc.b	nRst, $03
00091958 ECF5                       	smpsPSGAlterVol     $F5
0009195A 9B07                       	dc.b	nD2, $07
0009195C EC0B                       	smpsPSGAlterVol     $0B
0009195E 8007                       	dc.b	nRst, $07
00091960 E107                       	smpsAlterNote       $07
00091962 0101                       	dc.b	$01, $01
00091964 E1FE                       	smpsAlterNote       $FE
00091966 01                         	dc.b	$01
00091967 E1FA                       	smpsAlterNote       $FA
00091969 0101                       	dc.b	$01, $01
0009196B E103                       	smpsAlterNote       $03
0009196D 01                         	dc.b	$01
0009196E E109                       	smpsAlterNote       $09
00091970 01                         	dc.b	$01
00091971 E107                       	smpsAlterNote       $07
00091973 01                         	dc.b	$01
00091974 E1FE                       	smpsAlterNote       $FE
00091976 01                         	dc.b	$01
00091977 E108                       	smpsAlterNote       $08
00091979 01                         	dc.b	$01
0009197A E1FD                       	smpsAlterNote       $FD
0009197C ECF5                       	smpsPSGAlterVol     $F5
0009197E 940E                       	dc.b	nG1, $0E
00091980 E103                       	smpsAlterNote       $03
00091982 EC0B                       	smpsPSGAlterVol     $0B
00091984 8001 01                    	dc.b	nRst, $01, $01
00091987 E1FD                       	smpsAlterNote       $FD
00091989 01                         	dc.b	$01
0009198A E1FB                       	smpsAlterNote       $FB
0009198C 0101                       	dc.b	$01, $01
0009198E E100                       	smpsAlterNote       $00
00091990 01                         	dc.b	$01
00091991 E103                       	smpsAlterNote       $03
00091993 01                         	dc.b	$01
00091994 E100                       	smpsAlterNote       $00
00091996 01                         	dc.b	$01
00091997 E1FD                       	smpsAlterNote       $FD
00091999 01                         	dc.b	$01
0009199A E1FA                       	smpsAlterNote       $FA
0009199C 01                         	dc.b	$01
0009199D E1FD                       	smpsAlterNote       $FD
0009199F 01                         	dc.b	$01
000919A0 E103                       	smpsAlterNote       $03
000919A2 0101                       	dc.b	$01, $01
000919A4 E100                       	smpsAlterNote       $00
000919A6 01                         	dc.b	$01
000919A7 E1FE                       	smpsAlterNote       $FE
000919A9 ECF5                       	smpsPSGAlterVol     $F5
000919AB 960D                       	dc.b	nA1, $0D
000919AD E104                       	smpsAlterNote       $04
000919AF EC0B                       	smpsPSGAlterVol     $0B
000919B1 8001 01                    	dc.b	nRst, $01, $01
000919B4 E101                       	smpsAlterNote       $01
000919B6 01                         	dc.b	$01
000919B7 E1FB                       	smpsAlterNote       $FB
000919B9 0101                       	dc.b	$01, $01
000919BB E1FE                       	smpsAlterNote       $FE
000919BD 01                         	dc.b	$01
000919BE E104                       	smpsAlterNote       $04
000919C0 0101                       	dc.b	$01, $01
000919C2 E1FE                       	smpsAlterNote       $FE
000919C4 01                         	dc.b	$01
000919C5 E1FB                       	smpsAlterNote       $FB
000919C7 0101                       	dc.b	$01, $01
000919C9 E101                       	smpsAlterNote       $01
000919CB 01                         	dc.b	$01
000919CC E104                       	smpsAlterNote       $04
000919CE 0101                       	dc.b	$01, $01
000919D0 E1FE                       	smpsAlterNote       $FE
000919D2 ECF5                       	smpsPSGAlterVol     $F5
000919D4 970D                       	dc.b	nBb1, $0D
000919D6 E101                       	smpsAlterNote       $01
000919D8 EC04                       	smpsPSGAlterVol     $04
000919DA E701                       	dc.b	smpsNoAttack, $01
000919DC EC07                       	smpsPSGAlterVol     $07
000919DE E104                       	smpsAlterNote       $04
000919E0 8001                       	dc.b	nRst, $01
000919E2 E103                       	smpsAlterNote       $03
000919E4 01                         	dc.b	$01
000919E5 E1FE                       	smpsAlterNote       $FE
000919E7 01                         	dc.b	$01
000919E8 E1FA                       	smpsAlterNote       $FA
000919EA 01                         	dc.b	$01
000919EB E1FE                       	smpsAlterNote       $FE
000919ED 01                         	dc.b	$01
000919EE E101                       	smpsAlterNote       $01
000919F0 01                         	dc.b	$01
000919F1 E104                       	smpsAlterNote       $04
000919F3 01                         	dc.b	$01
000919F4 E101                       	smpsAlterNote       $01
000919F6 01                         	dc.b	$01
000919F7 E1FB                       	smpsAlterNote       $FB
000919F9 01                         	dc.b	$01
000919FA E1FA                       	smpsAlterNote       $FA
000919FC 01                         	dc.b	$01
000919FD E1FE                       	smpsAlterNote       $FE
000919FF 01                         	dc.b	$01
00091A00 E103                       	smpsAlterNote       $03
00091A02 0101                       	dc.b	$01, $01
00091A04 E101                       	smpsAlterNote       $01
00091A06 01                         	dc.b	$01
00091A07 E1FE                       	smpsAlterNote       $FE
00091A09 ECF5                       	smpsPSGAlterVol     $F5
00091A0B 990D                       	dc.b	nC2, $0D
00091A0D E104                       	smpsAlterNote       $04
00091A0F EC0B                       	smpsPSGAlterVol     $0B
00091A11 8001 01                    	dc.b	nRst, $01, $01
00091A14 E102                       	smpsAlterNote       $02
00091A16 01                         	dc.b	$01
00091A17 E1FC                       	smpsAlterNote       $FC
00091A19 0101                       	dc.b	$01, $01
00091A1B E102                       	smpsAlterNote       $02
00091A1D 01                         	dc.b	$01
00091A1E E104                       	smpsAlterNote       $04
00091A20 01                         	dc.b	$01
00091A21 E1FF                       	smpsAlterNote       $FF
00091A23 ECF5                       	smpsPSGAlterVol     $F5
00091A25 9B06                       	dc.b	nD2, $06
00091A27 EC04                       	smpsPSGAlterVol     $04
00091A29 E701                       	dc.b	smpsNoAttack, $01
00091A2B EC07                       	smpsPSGAlterVol     $07
00091A2D 8003                       	dc.b	nRst, $03
00091A2F ECF5                       	smpsPSGAlterVol     $F5
00091A31 9B07                       	dc.b	nD2, $07
00091A33 EC0B                       	smpsPSGAlterVol     $0B
00091A35 8006                       	dc.b	nRst, $06
00091A37 E101                       	smpsAlterNote       $01
00091A39 01                         	dc.b	$01
00091A3A E104                       	smpsAlterNote       $04
00091A3C 0101                       	dc.b	$01, $01
00091A3E E1FE                       	smpsAlterNote       $FE
00091A40 01                         	dc.b	$01
00091A41 E1FC                       	smpsAlterNote       $FC
00091A43 01                         	dc.b	$01
00091A44 E1FE                       	smpsAlterNote       $FE
00091A46 ECF5                       	smpsPSGAlterVol     $F5
00091A48 9C06                       	dc.b	nEb2, $06
00091A4A EC0B                       	smpsPSGAlterVol     $0B
00091A4C 8004                       	dc.b	nRst, $04
00091A4E ECF5                       	smpsPSGAlterVol     $F5
00091A50 9C06                       	dc.b	nEb2, $06
00091A52 EC04                       	smpsPSGAlterVol     $04
00091A54 E701                       	dc.b	smpsNoAttack, $01
00091A56 EC07                       	smpsPSGAlterVol     $07
00091A58 8006                       	dc.b	nRst, $06
00091A5A E105                       	smpsAlterNote       $05
00091A5C 01                         	dc.b	$01
00091A5D E106                       	smpsAlterNote       $06
00091A5F 01                         	dc.b	$01
00091A60 E102                       	smpsAlterNote       $02
00091A62 01                         	dc.b	$01
00091A63 E1FB                       	smpsAlterNote       $FB
00091A65 01                         	dc.b	$01
00091A66 E1FF                       	smpsAlterNote       $FF
00091A68 ECF5                       	smpsPSGAlterVol     $F5
00091A6A 9B06                       	dc.b	nD2, $06
00091A6C EC04                       	smpsPSGAlterVol     $04
00091A6E E701                       	dc.b	smpsNoAttack, $01
00091A70 EC07                       	smpsPSGAlterVol     $07
00091A72 8003                       	dc.b	nRst, $03
00091A74 ECF5                       	smpsPSGAlterVol     $F5
00091A76 9B06                       	dc.b	nD2, $06
00091A78 EC04                       	smpsPSGAlterVol     $04
00091A7A E701                       	dc.b	smpsNoAttack, $01
00091A7C EC07                       	smpsPSGAlterVol     $07
00091A7E 8006                       	dc.b	nRst, $06
00091A80 E101                       	smpsAlterNote       $01
00091A82 01                         	dc.b	$01
00091A83 E105                       	smpsAlterNote       $05
00091A85 01                         	dc.b	$01
00091A86 E104                       	smpsAlterNote       $04
00091A88 01                         	dc.b	$01
00091A89 E1FE                       	smpsAlterNote       $FE
00091A8B 01                         	dc.b	$01
00091A8C ECF5                       	smpsPSGAlterVol     $F5
00091A8E 9C07                       	dc.b	nEb2, $07
00091A90 EC0B                       	smpsPSGAlterVol     $0B
00091A92 8004                       	dc.b	nRst, $04
00091A94 ECF5                       	smpsPSGAlterVol     $F5
00091A96 9C06                       	dc.b	nEb2, $06
00091A98 EC0B                       	smpsPSGAlterVol     $0B
00091A9A 8007                       	dc.b	nRst, $07
00091A9C E105                       	smpsAlterNote       $05
00091A9E 0101                       	dc.b	$01, $01
00091AA0 E102                       	smpsAlterNote       $02
00091AA2 01                         	dc.b	$01
00091AA3 E1FB                       	smpsAlterNote       $FB
00091AA5 01                         	dc.b	$01
00091AA6 E1FF                       	smpsAlterNote       $FF
00091AA8 ECF5                       	smpsPSGAlterVol     $F5
00091AAA 9B06                       	dc.b	nD2, $06
00091AAC EC04                       	smpsPSGAlterVol     $04
00091AAE E701                       	dc.b	smpsNoAttack, $01
00091AB0 EC07                       	smpsPSGAlterVol     $07
00091AB2 8003                       	dc.b	nRst, $03
00091AB4 ECF5                       	smpsPSGAlterVol     $F5
00091AB6 9B06                       	dc.b	nD2, $06
00091AB8 EC04                       	smpsPSGAlterVol     $04
00091ABA E701                       	dc.b	smpsNoAttack, $01
00091ABC EC07                       	smpsPSGAlterVol     $07
00091ABE 8006                       	dc.b	nRst, $06
00091AC0 E101                       	smpsAlterNote       $01
00091AC2 01                         	dc.b	$01
00091AC3 E105                       	smpsAlterNote       $05
00091AC5 01                         	dc.b	$01
00091AC6 E101                       	smpsAlterNote       $01
00091AC8 01                         	dc.b	$01
00091AC9 E1FC                       	smpsAlterNote       $FC
00091ACB 01                         	dc.b	$01
00091ACC E1FE                       	smpsAlterNote       $FE
00091ACE ECF5                       	smpsPSGAlterVol     $F5
00091AD0 9C06                       	dc.b	nEb2, $06
00091AD2 EC04                       	smpsPSGAlterVol     $04
00091AD4 E701                       	dc.b	smpsNoAttack, $01
00091AD6 EC07                       	smpsPSGAlterVol     $07
00091AD8 8003                       	dc.b	nRst, $03
00091ADA ECF5                       	smpsPSGAlterVol     $F5
00091ADC 9C07                       	dc.b	nEb2, $07
00091ADE EC0B                       	smpsPSGAlterVol     $0B
00091AE0 8006                       	dc.b	nRst, $06
00091AE2 E102                       	smpsAlterNote       $02
00091AE4 01                         	dc.b	$01
00091AE5 E105                       	smpsAlterNote       $05
00091AE7 0101                       	dc.b	$01, $01
00091AE9 E1FF                       	smpsAlterNote       $FF
00091AEB 01                         	dc.b	$01
00091AEC ECF5                       	smpsPSGAlterVol     $F5
00091AEE 9B07                       	dc.b	nD2, $07
00091AF0 EC0B                       	smpsPSGAlterVol     $0B
00091AF2 8004                       	dc.b	nRst, $04
00091AF4 ECF5                       	smpsPSGAlterVol     $F5
00091AF6 9B06                       	dc.b	nD2, $06
00091AF8 EC04                       	smpsPSGAlterVol     $04
00091AFA E701                       	dc.b	smpsNoAttack, $01
00091AFC EC07                       	smpsPSGAlterVol     $07
00091AFE 8002                       	dc.b	nRst, $02
00091B00 E1FC                       	smpsAlterNote       $FC
00091B02 ECF5                       	smpsPSGAlterVol     $F5
00091B04 9006                       	dc.b	nEb1, $06
00091B06 EC04                       	smpsPSGAlterVol     $04
00091B08 E701                       	dc.b	smpsNoAttack, $01
00091B0A ECFC                       	smpsPSGAlterVol     $FC
00091B0C 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00091B10 EC04                       	smpsPSGAlterVol     $04
00091B12 E701                       	dc.b	smpsNoAttack, $01
00091B14 E1FD                       	smpsAlterNote       $FD
00091B16 ECFC                       	smpsPSGAlterVol     $FC
00091B18 9402                       	dc.b	nG1, $02
00091B1A EC04                       	smpsPSGAlterVol     $04
00091B1C E701                       	dc.b	smpsNoAttack, $01
00091B1E E1FE                       	smpsAlterNote       $FE
00091B20 ECFC                       	smpsPSGAlterVol     $FC
00091B22 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00091B26 EC04                       	smpsPSGAlterVol     $04
00091B28 E701                       	dc.b	smpsNoAttack, $01
00091B2A EC07                       	smpsPSGAlterVol     $07
00091B2C 8008                       	dc.b	nRst, $08
00091B2E F6F4 F3                    	smpsJump            music84_Jump06
00091B31                            
00091B31                            ; PSG3 Data
00091B31                            music84_PSG3:
00091B31 F500                       	smpsPSGvoice        $00
00091B33 E1FF                       	smpsAlterNote       $FF
00091B35 EC0F                       	smpsPSGAlterVol     $0F
00091B37 803A                       	dc.b	nRst, $3A
00091B39                            
00091B39                            music84_Jump05:
00091B39 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00091B45 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00091B4F F6FF E8                    	smpsJump            music84_Jump05
00091B52                            
00091B52                            ; DAC Data
00091B52                            music84_DAC:
00091B52 E0C0                       	smpsPan             panCenter, $00
00091B54 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00091B60 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00091B6C 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00091B78 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00091B84 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00091B90 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00091B9C 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00091BA8 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00091BB4 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00091BC0 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00091BCC 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00091BD8 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00091BE4 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00091BF0 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00091BFC 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00091C08 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00091C14 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00091C20 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00091C2C 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00091C38 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00091C44 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091C50 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00091C5C 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00091C68 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00091C74 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00091C80 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00091C8C 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00091C98 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091CA4 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00091CB0 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00091CBC 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091CC8 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00091CD4 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00091CE0 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00091CEC 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00091CF8 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091D04 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00091D10 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00091D1C 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00091D28 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00091D34 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00091D40 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00091D4C 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091D58 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00091D64 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00091D70 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091D7C 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00091D88 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00091D94 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00091DA0 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00091DAC 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00091DB8 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00091DC4 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00091DD0 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00091DDC 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091DE8 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00091DF4 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00091E00 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00091E0C 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00091E18 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091E24 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00091E30 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00091E3C 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00091E48 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00091E54 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00091E60 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00091E6C 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00091E78 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00091E84 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00091E90 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00091E9C 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00091EA8 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091EB4 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00091EC0 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00091ECC 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00091ED8 E0C0                       	smpsPan             panCenter, $00
00091EDA F2                         	smpsStop
00091EDB                            
00091EDB                            music84_Voices:
00091EDB                            ;	Voice $00
00091EDB                            ;	$3D
00091EDB                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00091EDB                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00091EDB                            	smpsVcAlgorithm     $05
00091EDB                            	smpsVcFeedback      $07
00091EDB                            	smpsVcUnusedBits    $00
00091EDB                            	smpsVcDetune        $05, $04, $03, $04
00091EDB                            	smpsVcCoarseFreq    $01, $01, $01, $01
00091EDB                            	smpsVcRateScale     $00, $00, $00, $00
00091EDB                            	smpsVcAttackRate    $11, $11, $11, $11
00091EDB                            	smpsVcAmpMod        $00, $00, $00, $00
00091EDB                            	smpsVcDecayRate1    $00, $00, $00, $0A
00091EDB                            	smpsVcDecayRate2    $00, $00, $00, $0B
00091EDB                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00091EDB                            	smpsVcReleaseRate   $08, $08, $08, $07
00091EDB 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00091EF4                            
00091EF4                            ;	Voice $01
00091EF4                            ;	$04
00091EF4                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00091EF4                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00091EF4                            	smpsVcAlgorithm     $04
00091EF4                            	smpsVcFeedback      $00
00091EF4                            	smpsVcUnusedBits    $00
00091EF4                            	smpsVcDetune        $04, $03, $04, $05
00091EF4                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00091EF4                            	smpsVcRateScale     $00, $01, $00, $01
00091EF4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00091EF4                            	smpsVcAmpMod        $00, $00, $00, $00
00091EF4                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00091EF4                            	smpsVcDecayRate2    $05, $00, $05, $00
00091EF4                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00091EF4                            	smpsVcReleaseRate   $06, $06, $06, $06
00091EF4 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00091F0D                            
00091F0D                            ;	Voice $02
00091F0D                            ;	$30
00091F0D                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00091F0D                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00091F0D                            	smpsVcAlgorithm     $00
00091F0D                            	smpsVcFeedback      $06
00091F0D                            	smpsVcUnusedBits    $00
00091F0D                            	smpsVcDetune        $04, $02, $00, $06
00091F0D                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00091F0D                            	smpsVcRateScale     $00, $00, $00, $00
00091F0D                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00091F0D                            	smpsVcAmpMod        $00, $00, $00, $00
00091F0D                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00091F0D                            	smpsVcDecayRate2    $01, $01, $01, $01
00091F0D                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00091F0D                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00091F0D 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
00091F26                            
00091F26                            ;	Voice $03
00091F26                            ;	$3A
00091F26                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
00091F26                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
00091F26                            	smpsVcAlgorithm     $02
00091F26                            	smpsVcFeedback      $07
00091F26                            	smpsVcUnusedBits    $00
00091F26                            	smpsVcDetune        $04, $06, $02, $00
00091F26                            	smpsVcCoarseFreq    $01, $01, $01, $01
00091F26                            	smpsVcRateScale     $00, $00, $00, $00
00091F26                            	smpsVcAttackRate    $18, $19, $14, $14
00091F26                            	smpsVcAmpMod        $00, $00, $00, $00
00091F26                            	smpsVcDecayRate1    $09, $0D, $09, $09
00091F26                            	smpsVcDecayRate2    $00, $00, $00, $00
00091F26                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
00091F26                            	smpsVcReleaseRate   $08, $0F, $0F, $07
00091F26 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00091F3F                            
00091F3F                            ;	Voice $04
00091F3F                            ;	$3C
00091F3F                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00091F3F                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00091F3F                            	smpsVcAlgorithm     $04
00091F3F                            	smpsVcFeedback      $07
00091F3F                            	smpsVcUnusedBits    $00
00091F3F                            	smpsVcDetune        $07, $00, $00, $03
00091F3F                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00091F3F                            	smpsVcRateScale     $00, $00, $00, $00
00091F3F                            	smpsVcAttackRate    $10, $1F, $10, $1F
00091F3F                            	smpsVcAmpMod        $00, $00, $00, $00
00091F3F                            	smpsVcDecayRate1    $00, $00, $00, $00
00091F3F                            	smpsVcDecayRate2    $00, $00, $00, $00
00091F3F                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00091F3F                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00091F3F 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00091F58                            
00091F58                            ;	Voice $05
00091F58                            ;	$38
00091F58                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00091F58                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00091F58                            	smpsVcAlgorithm     $00
00091F58                            	smpsVcFeedback      $07
00091F58                            	smpsVcUnusedBits    $00
00091F58                            	smpsVcDetune        $04, $06, $02, $00
00091F58                            	smpsVcCoarseFreq    $01, $01, $01, $00
00091F58                            	smpsVcRateScale     $00, $00, $00, $00
00091F58                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00091F58                            	smpsVcAmpMod        $00, $00, $00, $00
00091F58                            	smpsVcDecayRate1    $00, $03, $00, $17
00091F58                            	smpsVcDecayRate2    $00, $08, $08, $0B
00091F58                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00091F58                            	smpsVcReleaseRate   $08, $05, $05, $05
00091F58 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00091F71                            
00091F71                            
00091F72 00                         		even
00091F72                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
00096182                            		even
00096182                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00099CDA 00                         		even
00099CDA                            Music87:	include	sound\music87.asm; Invincibility
00099CDA                            triple_Header:
00099CDA =00000001                  smpsHeaderStartSong = 1
00099CDA 0000                       	smpsHeaderVoice     triple_Voices
00099CDC 0501                       	smpsHeaderChan      $05, $01
00099CDE 0200                       	smpsHeaderTempo     $02, $00
00099CE0                            
00099CE4 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00099CE8 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00099CEC 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00099CF0 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00099CF4 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00099CFA                            
00099CFA                            ; DAC Data
00099CFA                            triple_DAC:
00099CFA E0C0                       	smpsPan             panCenter, $00
00099CFC 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00099D02                            
00099D02                            triple_Loop01:
00099D02 8282 82                    	dc.b	dSnare, dSnare, dSnare
00099D05                            
00099D05                            triple_Loop00:
00099D05 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00099D11 06                         	dc.b	$06
00099D12 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00099D17 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00099D23 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00099D2A F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00099D2F 0303 1B                    	dc.b	$03, $03, $1B
00099D32 E0C0                       	smpsPan             panCenter, $00
00099D34 F6FF C4                    	smpsJump triple_DAC
00099D37                            
00099D37                            ; FM1 Data
00099D37                            triple_FM1:
00099D37 E0C0                       	smpsPan             panCenter, $00
00099D3B 8018                       	dc.b	nRst, $18
00099D3D                            
00099D3D                            triple_Loop0B:
00099D3D AC06 B8                    	dc.b	nG3, $06, nG4
00099D40 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00099D45                            
00099D45                            triple_Loop0C:
00099D45 A7B3                       	dc.b	nD3, nD4
00099D47 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00099D4C                            
00099D4C                            triple_Loop0D:
00099D4C A9B5                       	dc.b	nE3, nE4
00099D4E F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00099D53 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00099D5B F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00099D60 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00099D6C 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00099D78 AD                         	dc.b	nAb3
00099D79 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00099D7E 8018                       	dc.b	nRst, $18
00099D80 E0C0                       	smpsPan             panCenter, $00
00099D84 F6FF B1                    	smpsJump triple_FM1
00099D87                            
00099D87                            ; FM2 Data
00099D87                            triple_FM2:
00099D87 E0C0                       	smpsPan             panCenter, $00
00099D8B 8018                       	dc.b	nRst, $18
00099D8D                            
00099D8D                            triple_Loop07:
00099D8D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099D99 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099DA5 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00099DAA 8003                       	dc.b	nRst, $03
00099DAC                            
00099DAC                            triple_Loop08:
00099DAC B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099DB2 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00099DB7 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00099DBD                            
00099DBD                            triple_Loop09:
00099DBD C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099DC9 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099DD5 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00099DDA 8003                       	dc.b	nRst, $03
00099DDC                            
00099DDC                            triple_Loop0A:
00099DDC B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099DE2 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00099DE7 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00099DED E0C0                       	smpsPan             panCenter, $00
00099DF1 F6FF 94                    	smpsJump triple_FM2
00099DF4                            
00099DF4                            ; FM3 Data
00099DF4                            triple_FM3:
00099DF4 E0C0                       	smpsPan             panCenter, $00
00099DF8 8018                       	dc.b	nRst, $18
00099DFA                            
00099DFA                            triple_Loop06:
00099DFA B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00099E01 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00099E06 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00099E12 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00099E1E C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00099E21 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00099E26 8018                       	dc.b	nRst, $18
00099E28 E0C0                       	smpsPan             panCenter, $00
00099E2C F6FF C6                    	smpsJump triple_FM3
00099E2F                            
00099E2F                            ; FM4 Data
00099E2F                            triple_FM4:
00099E2F E103                       	smpsAlterNote       $03
00099E33 E0C0                       	smpsPan             panCenter, $00
00099E35 8018                       	dc.b	nRst, $18
00099E37                            
00099E37                            triple_Loop02:
00099E37 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099E43 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099E4F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00099E54 8003                       	dc.b	nRst, $03
00099E56                            
00099E56                            triple_Loop03:
00099E56 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099E5C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00099E61 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00099E67                            
00099E67                            triple_Loop04:
00099E67 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099E73 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099E7F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00099E84 8003                       	dc.b	nRst, $03
00099E86                            
00099E86                            triple_Loop05:
00099E86 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099E8C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00099E91 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00099E97 E0C0                       	smpsPan             panCenter, $00
00099E99 F6FF 94                    	smpsJump triple_FM4
00099E9C                            
00099E9C                            ; PSG1 Data
00099E9C                            triple_PSG1:
00099E9C 8018                       	dc.b	nRst, $18
00099E9E                            
00099E9E                            triple_Loop0E:
00099E9E A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099EAA 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099EB6 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099EC2 9402 8004                  	dc.b	nG1, $02, nRst, $04
00099EC6 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00099ECB A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099ED7 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099EE3 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099EEF 9402 8007                  	dc.b	nG1, $02, nRst, $07
00099EF3                            
00099EF3                            triple_Loop0F:
00099EF3 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00099EF9 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00099EFE 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00099F04                            
00099F04                            triple_Loop10:
00099F04 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099F10 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099F1C 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099F28 9402 8004                  	dc.b	nG1, $02, nRst, $04
00099F2C F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00099F31 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099F3D 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099F49 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099F55 9402 8007                  	dc.b	nG1, $02, nRst, $07
00099F59                            
00099F59                            triple_Loop11:
00099F59 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00099F5F F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00099F64 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00099F6A F500                       	smpsPSGvoice        $00
00099F6C F6FF 2E                    	smpsJump triple_PSG1
00099F6F                            
00099F6F                            triple_Voices:
00099F6F                            ;	Voice $00
00099F6F                            ;	$3A
00099F6F                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00099F6F                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00099F6F                            	smpsVcAlgorithm     $02
00099F6F                            	smpsVcFeedback      $07
00099F6F                            	smpsVcUnusedBits    $00
00099F6F                            	smpsVcDetune        $00, $00, $00, $00
00099F6F                            	smpsVcCoarseFreq    $01, $01, $07, $01
00099F6F                            	smpsVcRateScale     $01, $02, $02, $02
00099F6F                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00099F6F                            	smpsVcAmpMod        $00, $00, $00, $00
00099F6F                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00099F6F                            	smpsVcDecayRate2    $00, $00, $00, $00
00099F6F                            	smpsVcDecayLevel    $00, $01, $0F, $01
00099F6F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00099F6F 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00099F88                            
00099F88                            ;	Voice $01
00099F88                            ;	$20
00099F88                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00099F88                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00099F88                            	smpsVcAlgorithm     $00
00099F88                            	smpsVcFeedback      $04
00099F88                            	smpsVcUnusedBits    $00
00099F88                            	smpsVcDetune        $00, $00, $03, $07
00099F88                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00099F88                            	smpsVcRateScale     $03, $03, $03, $02
00099F88                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00099F88                            	smpsVcAmpMod        $00, $00, $00, $00
00099F88                            	smpsVcDecayRate1    $04, $04, $0A, $10
00099F88                            	smpsVcDecayRate2    $08, $08, $08, $0F
00099F88                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00099F88                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00099F88 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00099F88 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00099FA2 00                         		even
00099FA2                            Music88:	incbin	sound\music88.bin; Extra Life
0009A090                            		even
0009A090                            Music89:	incbin	sound\music89.bin; Special Stage
0009DF58 00                         		even
0009DF58                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009E122                            		even
0009E122                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009E3BC                            		even
0009E3BC                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009E65A                            		even
0009E65A                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009E876                            		even
0009E876                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009ECE4 00                         		even
0009ECE4                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009F324 00                         		even
0009F324                            Music90:	incbin	sound\music90.bin ; Continue
0009F6BE 00                         		even
0009F6BE                            Music91:	incbin	sound\music91.bin ; Credits
000A098C                            		even
000A098C                            Music92:	incbin	sound\music92.bin ; Drowning
000A0CCE 00                         		even
000A0CCE                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A0D9E                            		even
000A0D9E                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A1A74 00                         		even
000A1A74                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A1BC4 00                         		even
000A1BC4                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A1BFE 00                         		even
000A1BFE                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A1C38 00                         		even
000A1C38                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A1C72 00                         		even
000A1C72                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A1CAC 00                         		even
000A1CAC                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A1CE6 00                         		even
000A1CE6                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A1D20 00                         		even
000A1D20                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A1D5A 00                         		even
000A1D5A                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A1D94 00                         		even
000A1D94                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A2284                            		even
000A2284                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A2284                            GentleBreeze_Header:
000A2284 =00000001                  smpsHeaderStartSong = 1
000A2284 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A2286 0603                       	smpsHeaderChan      $06, $03
000A2288 0100                       	smpsHeaderTempo     $01, $00
000A228A                            
000A228E 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A2292 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A2296 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A229A 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A229E 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A22A2 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A22A8 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A22AE 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A22B4                            
000A22B4                            ; PSG3 Data
000A22B4                            GentleBreeze_PSG3:
000A22B4 F2                         	smpsStop
000A22B5                            
000A22B5                            ; FM1 Data
000A22B5                            GentleBreeze_FM1:
000A22B7 E0C0                       	smpsPan             panCenter, $00
000A22B9 E1FF                       	smpsAlterNote       $FF
000A22BB C410                       	dc.b	nG5, $10
000A22BD E60F                       	smpsAlterVol        $0F
000A22BF C4                         	dc.b	nG5
000A22C0 E6F1                       	smpsAlterVol        $F1
000A22C2 E100                       	smpsAlterNote       $00
000A22C4 C2                         	dc.b	nF5
000A22C5 E60F                       	smpsAlterVol        $0F
000A22C7 08                         	dc.b	$08
000A22C8 E6F1                       	smpsAlterVol        $F1
000A22CA C010                       	dc.b	nEb5, $10
000A22CC E60F                       	smpsAlterVol        $0F
000A22CE C0                         	dc.b	nEb5
000A22CF E6F1                       	smpsAlterVol        $F1
000A22D1 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A22D7 E60F                       	smpsAlterVol        $0F
000A22D9 C9                         	dc.b	nC6
000A22DA E6F1                       	smpsAlterVol        $F1
000A22DC C5                         	dc.b	nAb5
000A22DD E60F                       	smpsAlterVol        $0F
000A22DF 08                         	dc.b	$08
000A22E0 E6F1                       	smpsAlterVol        $F1
000A22E2 C010                       	dc.b	nEb5, $10
000A22E4 E60F                       	smpsAlterVol        $0F
000A22E6 C0                         	dc.b	nEb5
000A22E7 E6F1                       	smpsAlterVol        $F1
000A22E9 C208                       	dc.b	nF5, $08
000A22EB E1FF                       	smpsAlterNote       $FF
000A22ED C410                       	dc.b	nG5, $10
000A22EF E100                       	smpsAlterNote       $00
000A22F1 C5C7                       	dc.b	nAb5, nBb5
000A22F3 E60F                       	smpsAlterVol        $0F
000A22F5 C7                         	dc.b	nBb5
000A22F6 E6F1                       	smpsAlterVol        $F1
000A22F8 C5                         	dc.b	nAb5
000A22F9 E60F                       	smpsAlterVol        $0F
000A22FB 08                         	dc.b	$08
000A22FC E6F1                       	smpsAlterVol        $F1
000A22FE E1FF                       	smpsAlterNote       $FF
000A2300 C410                       	dc.b	nG5, $10
000A2302 E60F                       	smpsAlterVol        $0F
000A2304 C4                         	dc.b	nG5
000A2305 E6F1                       	smpsAlterVol        $F1
000A2307 C4                         	dc.b	nG5
000A2308 E100                       	smpsAlterNote       $00
000A230A C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A230F E60F                       	smpsAlterVol        $0F
000A2311 C2                         	dc.b	nF5
000A2312 E6F1                       	smpsAlterVol        $F1
000A2314 E1FF                       	smpsAlterNote       $FF
000A2316 C4                         	dc.b	nG5
000A2317 E60F                       	smpsAlterVol        $0F
000A2319 08                         	dc.b	$08
000A231A E6F1                       	smpsAlterVol        $F1
000A231C 10                         	dc.b	$10
000A231D E60F                       	smpsAlterVol        $0F
000A231F 38                         	dc.b	$38
000A2320 E6F1                       	smpsAlterVol        $F1
000A2322 10                         	dc.b	$10
000A2323 E60F                       	smpsAlterVol        $0F
000A2325 C4                         	dc.b	nG5
000A2326 E6F1                       	smpsAlterVol        $F1
000A2328 E100                       	smpsAlterNote       $00
000A232A C2                         	dc.b	nF5
000A232B E60F                       	smpsAlterVol        $0F
000A232D 08                         	dc.b	$08
000A232E E6F1                       	smpsAlterVol        $F1
000A2330 C010                       	dc.b	nEb5, $10
000A2332 E60F                       	smpsAlterVol        $0F
000A2334 C0                         	dc.b	nEb5
000A2335 E6F1                       	smpsAlterVol        $F1
000A2337 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A233D E60F                       	smpsAlterVol        $0F
000A233F C9                         	dc.b	nC6
000A2340 E6F1                       	smpsAlterVol        $F1
000A2342 C5                         	dc.b	nAb5
000A2343 E60F                       	smpsAlterVol        $0F
000A2345 08                         	dc.b	$08
000A2346 E6F1                       	smpsAlterVol        $F1
000A2348 C010                       	dc.b	nEb5, $10
000A234A E60F                       	smpsAlterVol        $0F
000A234C C0                         	dc.b	nEb5
000A234D E6F1                       	smpsAlterVol        $F1
000A234F C208                       	dc.b	nF5, $08
000A2351 E1FF                       	smpsAlterNote       $FF
000A2353 C410                       	dc.b	nG5, $10
000A2355 E100                       	smpsAlterNote       $00
000A2357 C5C7                       	dc.b	nAb5, nBb5
000A2359 E60F                       	smpsAlterVol        $0F
000A235B C7                         	dc.b	nBb5
000A235C E6F1                       	smpsAlterVol        $F1
000A235E C5                         	dc.b	nAb5
000A235F E60F                       	smpsAlterVol        $0F
000A2361 08                         	dc.b	$08
000A2362 E6F1                       	smpsAlterVol        $F1
000A2364 E1FF                       	smpsAlterNote       $FF
000A2366 C410                       	dc.b	nG5, $10
000A2368 E60F                       	smpsAlterVol        $0F
000A236A C4                         	dc.b	nG5
000A236B E6F1                       	smpsAlterVol        $F1
000A236D C4                         	dc.b	nG5
000A236E E100                       	smpsAlterNote       $00
000A2370 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A2375 E60F                       	smpsAlterVol        $0F
000A2377 28                         	dc.b	$28
000A2378 E6F1                       	smpsAlterVol        $F1
000A237A C008 10                    	dc.b	nEb5, $08, $10
000A237D E60F                       	smpsAlterVol        $0F
000A237F 21                         	dc.b	$21
000A2380                            
000A2380                            GentleBreeze_Loop12:
000A2380 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A2383 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A2388 E717                       	dc.b	smpsNoAttack, $17
000A238A E6F1                       	smpsAlterVol        $F1
000A238C E1FF                       	smpsAlterNote       $FF
000A238E C410                       	dc.b	nG5, $10
000A2390 E60F                       	smpsAlterVol        $0F
000A2392 C4                         	dc.b	nG5
000A2393 E6F1                       	smpsAlterVol        $F1
000A2395 E100                       	smpsAlterNote       $00
000A2397 C2                         	dc.b	nF5
000A2398 E60F                       	smpsAlterVol        $0F
000A239A 08                         	dc.b	$08
000A239B E6F1                       	smpsAlterVol        $F1
000A239D C010                       	dc.b	nEb5, $10
000A239F E60F                       	smpsAlterVol        $0F
000A23A1 C0                         	dc.b	nEb5
000A23A2 E6F1                       	smpsAlterVol        $F1
000A23A4 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A23AA E60F                       	smpsAlterVol        $0F
000A23AC C9                         	dc.b	nC6
000A23AD E6F1                       	smpsAlterVol        $F1
000A23AF C5                         	dc.b	nAb5
000A23B0 E60F                       	smpsAlterVol        $0F
000A23B2 08                         	dc.b	$08
000A23B3 E6F1                       	smpsAlterVol        $F1
000A23B5 C010                       	dc.b	nEb5, $10
000A23B7 E60F                       	smpsAlterVol        $0F
000A23B9 C0                         	dc.b	nEb5
000A23BA E6F1                       	smpsAlterVol        $F1
000A23BC C208                       	dc.b	nF5, $08
000A23BE E1FF                       	smpsAlterNote       $FF
000A23C0 C410                       	dc.b	nG5, $10
000A23C2 E100                       	smpsAlterNote       $00
000A23C4 C5C7                       	dc.b	nAb5, nBb5
000A23C6 E60F                       	smpsAlterVol        $0F
000A23C8 C7                         	dc.b	nBb5
000A23C9 E6F1                       	smpsAlterVol        $F1
000A23CB C5                         	dc.b	nAb5
000A23CC E60F                       	smpsAlterVol        $0F
000A23CE 08                         	dc.b	$08
000A23CF E6F1                       	smpsAlterVol        $F1
000A23D1 E1FF                       	smpsAlterNote       $FF
000A23D3 C410                       	dc.b	nG5, $10
000A23D5 E60F                       	smpsAlterVol        $0F
000A23D7 C4                         	dc.b	nG5
000A23D8 E6F1                       	smpsAlterVol        $F1
000A23DA C4                         	dc.b	nG5
000A23DB E100                       	smpsAlterNote       $00
000A23DD C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A23E2 E60F                       	smpsAlterVol        $0F
000A23E4 C2                         	dc.b	nF5
000A23E5 E6F1                       	smpsAlterVol        $F1
000A23E7 E1FF                       	smpsAlterNote       $FF
000A23E9 C4                         	dc.b	nG5
000A23EA E60F                       	smpsAlterVol        $0F
000A23EC 08                         	dc.b	$08
000A23ED E6F1                       	smpsAlterVol        $F1
000A23EF 10                         	dc.b	$10
000A23F0 E60F                       	smpsAlterVol        $0F
000A23F2 38                         	dc.b	$38
000A23F3 E6F1                       	smpsAlterVol        $F1
000A23F5 10                         	dc.b	$10
000A23F6 E60F                       	smpsAlterVol        $0F
000A23F8 C4                         	dc.b	nG5
000A23F9 E6F1                       	smpsAlterVol        $F1
000A23FB E100                       	smpsAlterNote       $00
000A23FD C2                         	dc.b	nF5
000A23FE E60F                       	smpsAlterVol        $0F
000A2400 08                         	dc.b	$08
000A2401 E6F1                       	smpsAlterVol        $F1
000A2403 C010                       	dc.b	nEb5, $10
000A2405 E60F                       	smpsAlterVol        $0F
000A2407 C0                         	dc.b	nEb5
000A2408 E6F1                       	smpsAlterVol        $F1
000A240A BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A2410 E60F                       	smpsAlterVol        $0F
000A2412 C9                         	dc.b	nC6
000A2413 E6F1                       	smpsAlterVol        $F1
000A2415 C5                         	dc.b	nAb5
000A2416 E60F                       	smpsAlterVol        $0F
000A2418 08                         	dc.b	$08
000A2419 E6F1                       	smpsAlterVol        $F1
000A241B C010                       	dc.b	nEb5, $10
000A241D E60F                       	smpsAlterVol        $0F
000A241F C0                         	dc.b	nEb5
000A2420 E6F1                       	smpsAlterVol        $F1
000A2422 C208                       	dc.b	nF5, $08
000A2424 E1FF                       	smpsAlterNote       $FF
000A2426 C410                       	dc.b	nG5, $10
000A2428 E100                       	smpsAlterNote       $00
000A242A C5C7                       	dc.b	nAb5, nBb5
000A242C E60F                       	smpsAlterVol        $0F
000A242E C7                         	dc.b	nBb5
000A242F E6F1                       	smpsAlterVol        $F1
000A2431 C5                         	dc.b	nAb5
000A2432 E60F                       	smpsAlterVol        $0F
000A2434 08                         	dc.b	$08
000A2435 E6F1                       	smpsAlterVol        $F1
000A2437 E1FF                       	smpsAlterNote       $FF
000A2439 C410                       	dc.b	nG5, $10
000A243B E60F                       	smpsAlterVol        $0F
000A243D C4                         	dc.b	nG5
000A243E E6F1                       	smpsAlterVol        $F1
000A2440 C4                         	dc.b	nG5
000A2441 E100                       	smpsAlterNote       $00
000A2443 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A2448 E60F                       	smpsAlterVol        $0F
000A244A 28                         	dc.b	$28
000A244B E6F1                       	smpsAlterVol        $F1
000A244D C008 10                    	dc.b	nEb5, $08, $10
000A2450 E60F                       	smpsAlterVol        $0F
000A2452 21                         	dc.b	$21
000A2453 E0C0                       	smpsPan             panCenter, $00
000A2455 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A2458                            
000A2458                            ; FM2 Data
000A2458                            GentleBreeze_FM2:
000A245A E60C                       	smpsAlterVol        $0C
000A245C E0C0                       	smpsPan             panCenter, $00
000A245E 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A246A A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A2476 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A2482 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A248E 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A249A A039                       	dc.b	nG2, $39
000A249C                            
000A249C                            GentleBreeze_Jump04:
000A249C E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A249F                            
000A249F                            GentleBreeze_Loop11:
000A249F A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A24AB A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A24B7 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A24C3 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A24CF A3                         	dc.b	nBb2
000A24D0 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A24D5 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A24E1 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A24ED 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A24F9 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A2505 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A2511 A039                       	dc.b	nG2, $39
000A2513 E0C0                       	smpsPan             panCenter, $00
000A2515 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A2518                            
000A2518                            ; FM3 Data
000A2518                            GentleBreeze_FM3:
000A251A E0C0                       	smpsPan             panCenter, $00
000A251C 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A2524 E616                       	smpsAlterVol        $16
000A2526 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A252B                            
000A252B                            GentleBreeze_Loop0F:
000A252B C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A252F E1FF                       	smpsAlterNote       $FF
000A2531 C4                         	dc.b	nG5
000A2532 E100                       	smpsAlterNote       $00
000A2534 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A2539 E608                       	smpsAlterVol        $08
000A253B C080 08                    	dc.b	nEb5, nRst, $08
000A253E E6F8                       	smpsAlterVol        $F8
000A2540 C7                         	dc.b	nBb5
000A2541 E1FF                       	smpsAlterNote       $FF
000A2543 C4                         	dc.b	nG5
000A2544 E100                       	smpsAlterNote       $00
000A2546 C0BB                       	dc.b	nEb5, nBb4
000A2548 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A254D C0BD C9                    	dc.b	nEb5, nC5, nC6
000A2550 E1FF                       	smpsAlterNote       $FF
000A2552 C4                         	dc.b	nG5
000A2553 E100                       	smpsAlterNote       $00
000A2555 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A255A E608                       	smpsAlterVol        $08
000A255C C080 08                    	dc.b	nEb5, nRst, $08
000A255F E6F8                       	smpsAlterVol        $F8
000A2561 E1FF                       	smpsAlterNote       $FF
000A2563 C4                         	dc.b	nG5
000A2564 E100                       	smpsAlterNote       $00
000A2566 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A256D E1FF                       	smpsAlterNote       $FF
000A256F C4                         	dc.b	nG5
000A2570 E100                       	smpsAlterNote       $00
000A2572 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A2577 E1FF                       	smpsAlterNote       $FF
000A2579 C4                         	dc.b	nG5
000A257A E100                       	smpsAlterNote       $00
000A257C C7                         	dc.b	nBb5
000A257D E1FF                       	smpsAlterNote       $FF
000A257F C4                         	dc.b	nG5
000A2580 E100                       	smpsAlterNote       $00
000A2582 C2C0 01                    	dc.b	nF5, nEb5, $01
000A2585                            
000A2585                            GentleBreeze_Jump03:
000A2585 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A258C E6FA                       	smpsAlterVol        $FA
000A258E F4                         	smpsModOff
000A258F E1FF                       	smpsAlterNote       $FF
000A2591 B850                       	dc.b	nG4, $50
000A2593 E100                       	smpsAlterNote       $00
000A2595 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A25A1 E1FF                       	smpsAlterNote       $FF
000A25A3 B810                       	dc.b	nG4, $10
000A25A5 E100                       	smpsAlterNote       $00
000A25A7 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A25AC E1FF                       	smpsAlterNote       $FF
000A25AE B8                         	dc.b	nG4
000A25AF E100                       	smpsAlterNote       $00
000A25B1 B610                       	dc.b	nF4, $10
000A25B3 E1FF                       	smpsAlterNote       $FF
000A25B5 B850                       	dc.b	nG4, $50
000A25B7 E100                       	smpsAlterNote       $00
000A25B9 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A25C1 E1FF                       	smpsAlterNote       $FF
000A25C3 AC08                       	dc.b	nG3, $08
000A25C5 E100                       	smpsAlterNote       $00
000A25C7 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A25CC E1FF                       	smpsAlterNote       $FF
000A25CE B850                       	dc.b	nG4, $50
000A25D0 E100                       	smpsAlterNote       $00
000A25D2 BB08                       	dc.b	nBb4, $08
000A25D4 E1FF                       	smpsAlterNote       $FF
000A25D6 B8                         	dc.b	nG4
000A25D7 E100                       	smpsAlterNote       $00
000A25D9 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A25DC E1FF                       	smpsAlterNote       $FF
000A25DE B810 08                    	dc.b	nG4, $10, $08
000A25E1 E100                       	smpsAlterNote       $00
000A25E3 B6                         	dc.b	nF4
000A25E4 E1FF                       	smpsAlterNote       $FF
000A25E6 B880                       	dc.b	nG4, nRst
000A25E8 E100                       	smpsAlterNote       $00
000A25EA BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A25ED E1FF                       	smpsAlterNote       $FF
000A25EF B810                       	dc.b	nG4, $10
000A25F1 E100                       	smpsAlterNote       $00
000A25F3 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A25FA E1FF                       	smpsAlterNote       $FF
000A25FC B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A260A E606                       	smpsAlterVol        $06
000A260C F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A2611 E100                       	smpsAlterNote       $00
000A2613                            
000A2613                            GentleBreeze_Loop10:
000A2613 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A2617 E1FF                       	smpsAlterNote       $FF
000A2619 C4                         	dc.b	nG5
000A261A E100                       	smpsAlterNote       $00
000A261C C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A2621 E608                       	smpsAlterVol        $08
000A2623 C080 08                    	dc.b	nEb5, nRst, $08
000A2626 E6F8                       	smpsAlterVol        $F8
000A2628 C7                         	dc.b	nBb5
000A2629 E1FF                       	smpsAlterNote       $FF
000A262B C4                         	dc.b	nG5
000A262C E100                       	smpsAlterNote       $00
000A262E C0BB                       	dc.b	nEb5, nBb4
000A2630 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A2635 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A2638 E1FF                       	smpsAlterNote       $FF
000A263A C4                         	dc.b	nG5
000A263B E100                       	smpsAlterNote       $00
000A263D C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A2642 E608                       	smpsAlterVol        $08
000A2644 C080 08                    	dc.b	nEb5, nRst, $08
000A2647 E6F8                       	smpsAlterVol        $F8
000A2649 E1FF                       	smpsAlterNote       $FF
000A264B C4                         	dc.b	nG5
000A264C E100                       	smpsAlterNote       $00
000A264E C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A2655 E1FF                       	smpsAlterNote       $FF
000A2657 C4                         	dc.b	nG5
000A2658 E100                       	smpsAlterNote       $00
000A265A C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A265F E1FF                       	smpsAlterNote       $FF
000A2661 C4                         	dc.b	nG5
000A2662 E100                       	smpsAlterNote       $00
000A2664 C7                         	dc.b	nBb5
000A2665 E1FF                       	smpsAlterNote       $FF
000A2667 C4                         	dc.b	nG5
000A2668 E100                       	smpsAlterNote       $00
000A266A C2C0 01                    	dc.b	nF5, nEb5, $01
000A266D E0C0                       	smpsPan             panCenter, $00
000A266F F1                         	smpsModOn
000A2670 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A2673                            
000A2673                            ; FM4 Data
000A2673                            GentleBreeze_FM4:
000A2675 E0C0                       	smpsPan             panCenter, $00
000A2677 80                         	dc.b	nRst
000A2678                            
000A2678                            GentleBreeze_Loop0D:
000A2678 7F                         	dc.b	$7F
000A2679 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A267E 77                         	dc.b	$77
000A2681 E609                       	smpsAlterVol        $09
000A2683 C001                       	dc.b	nEb5, $01
000A2685                            
000A2685                            GentleBreeze_Jump02:
000A2685 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A268A E607                       	smpsAlterVol        $07
000A268C E1FF                       	smpsAlterNote       $FF
000A268E C450                       	dc.b	nG5, $50
000A2690 E100                       	smpsAlterNote       $00
000A2692 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A269E E1FF                       	smpsAlterNote       $FF
000A26A0 C410                       	dc.b	nG5, $10
000A26A2 E100                       	smpsAlterNote       $00
000A26A4 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A26A9 E1FF                       	smpsAlterNote       $FF
000A26AB C4                         	dc.b	nG5
000A26AC E100                       	smpsAlterNote       $00
000A26AE C210                       	dc.b	nF5, $10
000A26B0 E1FF                       	smpsAlterNote       $FF
000A26B2 C450                       	dc.b	nG5, $50
000A26B4 E100                       	smpsAlterNote       $00
000A26B6 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A26BE E1FF                       	smpsAlterNote       $FF
000A26C0 B808                       	dc.b	nG4, $08
000A26C2 E100                       	smpsAlterNote       $00
000A26C4 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A26C9 E1FF                       	smpsAlterNote       $FF
000A26CB C450                       	dc.b	nG5, $50
000A26CD E100                       	smpsAlterNote       $00
000A26CF C708                       	dc.b	nBb5, $08
000A26D1 E1FF                       	smpsAlterNote       $FF
000A26D3 C4                         	dc.b	nG5
000A26D4 E100                       	smpsAlterNote       $00
000A26D6 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A26D9 E1FF                       	smpsAlterNote       $FF
000A26DB C410 08                    	dc.b	nG5, $10, $08
000A26DE E100                       	smpsAlterNote       $00
000A26E0 C2                         	dc.b	nF5
000A26E1 E1FF                       	smpsAlterNote       $FF
000A26E3 C480                       	dc.b	nG5, nRst
000A26E5 E100                       	smpsAlterNote       $00
000A26E7 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A26EA E1FF                       	smpsAlterNote       $FF
000A26EC C410                       	dc.b	nG5, $10
000A26EE E100                       	smpsAlterNote       $00
000A26F0 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A26F7 E1FF                       	smpsAlterNote       $FF
000A26F9 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A2701                            
000A2701                            GentleBreeze_Loop0E:
000A2701 7F                         	dc.b	$7F
000A2702 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A2707 77                         	dc.b	$77
000A2708 E100                       	smpsAlterNote       $00
000A270A C001                       	dc.b	nEb5, $01
000A270C E6F9                       	smpsAlterVol        $F9
000A270E E0C0                       	smpsPan             panCenter, $00
000A2710 E100                       	smpsAlterNote       $00
000A2712 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A2715                            
000A2715                            ; FM5 Data
000A2715                            GentleBreeze_FM5:
000A2717 E0C0                       	smpsPan             panCenter, $00
000A2719 A5                         	dc.b	nC3
000A271A                            
000A271A                            GentleBreeze_Loop06:
000A271A 10                         	dc.b	$10
000A271B E607                       	smpsAlterVol        $07
000A271D A5                         	dc.b	nC3
000A271E E6F9                       	smpsAlterVol        $F9
000A2720 08                         	dc.b	$08
000A2721 E607                       	smpsAlterVol        $07
000A2723 A5                         	dc.b	nC3
000A2724 E608                       	smpsAlterVol        $08
000A2726 A5                         	dc.b	nC3
000A2727 E6F1                       	smpsAlterVol        $F1
000A2729 18                         	dc.b	$18
000A272A E607                       	smpsAlterVol        $07
000A272C 10                         	dc.b	$10
000A272D E608                       	smpsAlterVol        $08
000A272F A5                         	dc.b	nC3
000A2730 E6F1                       	smpsAlterVol        $F1
000A2732 A5                         	dc.b	nC3
000A2733 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A2738 A5                         	dc.b	nC3
000A2739                            
000A2739                            GentleBreeze_Loop07:
000A2739 E607                       	smpsAlterVol        $07
000A273B A5                         	dc.b	nC3
000A273C E6F9                       	smpsAlterVol        $F9
000A273E 08                         	dc.b	$08
000A273F E607                       	smpsAlterVol        $07
000A2741 A5                         	dc.b	nC3
000A2742 E608                       	smpsAlterVol        $08
000A2744 A5                         	dc.b	nC3
000A2745 E6F1                       	smpsAlterVol        $F1
000A2747 10                         	dc.b	$10
000A2748 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A274D                            
000A274D                            GentleBreeze_Loop08:
000A274D A5                         	dc.b	nC3
000A274E E607                       	smpsAlterVol        $07
000A2750 A5                         	dc.b	nC3
000A2751 E6F9                       	smpsAlterVol        $F9
000A2753 08                         	dc.b	$08
000A2754 E607                       	smpsAlterVol        $07
000A2756 A5                         	dc.b	nC3
000A2757 E608                       	smpsAlterVol        $08
000A2759 A5                         	dc.b	nC3
000A275A E6F1                       	smpsAlterVol        $F1
000A275C 18                         	dc.b	$18
000A275D E607                       	smpsAlterVol        $07
000A275F 10                         	dc.b	$10
000A2760 E608                       	smpsAlterVol        $08
000A2762 A5                         	dc.b	nC3
000A2763 E6F1                       	smpsAlterVol        $F1
000A2765 A5                         	dc.b	nC3
000A2766 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A276B A5                         	dc.b	nC3
000A276C E607                       	smpsAlterVol        $07
000A276E A5                         	dc.b	nC3
000A276F E6F9                       	smpsAlterVol        $F9
000A2771 08                         	dc.b	$08
000A2772 E607                       	smpsAlterVol        $07
000A2774 A5                         	dc.b	nC3
000A2775 E608                       	smpsAlterVol        $08
000A2777 A5                         	dc.b	nC3
000A2778 E6F1                       	smpsAlterVol        $F1
000A277A 10                         	dc.b	$10
000A277B E607                       	smpsAlterVol        $07
000A277D A5                         	dc.b	nC3
000A277E E6F9                       	smpsAlterVol        $F9
000A2780 08                         	dc.b	$08
000A2781 E607                       	smpsAlterVol        $07
000A2783 A5                         	dc.b	nC3
000A2784 E608                       	smpsAlterVol        $08
000A2786 A5                         	dc.b	nC3
000A2787 E6F1                       	smpsAlterVol        $F1
000A2789 01                         	dc.b	$01
000A278A                            
000A278A                            GentleBreeze_Jump01:
000A278A E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A278D E607                       	smpsAlterVol        $07
000A278F                            
000A278F                            GentleBreeze_Loop09:
000A278F 10                         	dc.b	$10
000A2790 E608                       	smpsAlterVol        $08
000A2792 A5                         	dc.b	nC3
000A2793 E6F1                       	smpsAlterVol        $F1
000A2795 08                         	dc.b	$08
000A2796 E60F                       	smpsAlterVol        $0F
000A2798 18                         	dc.b	$18
000A2799 E6F8                       	smpsAlterVol        $F8
000A279B F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A27A0 10                         	dc.b	$10
000A27A1 E608                       	smpsAlterVol        $08
000A27A3 A5                         	dc.b	nC3
000A27A4 E6F1                       	smpsAlterVol        $F1
000A27A6 08                         	dc.b	$08
000A27A7 E60F                       	smpsAlterVol        $0F
000A27A9 18                         	dc.b	$18
000A27AA E6F1                       	smpsAlterVol        $F1
000A27AC                            
000A27AC                            GentleBreeze_Loop0A:
000A27AC 10                         	dc.b	$10
000A27AD E607                       	smpsAlterVol        $07
000A27AF A5                         	dc.b	nC3
000A27B0 E6F9                       	smpsAlterVol        $F9
000A27B2 08                         	dc.b	$08
000A27B3 E607                       	smpsAlterVol        $07
000A27B5 A5                         	dc.b	nC3
000A27B6 E608                       	smpsAlterVol        $08
000A27B8 A5                         	dc.b	nC3
000A27B9 E6F1                       	smpsAlterVol        $F1
000A27BB 18                         	dc.b	$18
000A27BC E607                       	smpsAlterVol        $07
000A27BE 10                         	dc.b	$10
000A27BF E608                       	smpsAlterVol        $08
000A27C1 A5                         	dc.b	nC3
000A27C2 E6F1                       	smpsAlterVol        $F1
000A27C4 A5                         	dc.b	nC3
000A27C5 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A27CA A5                         	dc.b	nC3
000A27CB                            
000A27CB                            GentleBreeze_Loop0B:
000A27CB E607                       	smpsAlterVol        $07
000A27CD A5                         	dc.b	nC3
000A27CE E6F9                       	smpsAlterVol        $F9
000A27D0 08                         	dc.b	$08
000A27D1 E607                       	smpsAlterVol        $07
000A27D3 A5                         	dc.b	nC3
000A27D4 E608                       	smpsAlterVol        $08
000A27D6 A5                         	dc.b	nC3
000A27D7 E6F1                       	smpsAlterVol        $F1
000A27D9 10                         	dc.b	$10
000A27DA F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A27DF                            
000A27DF                            GentleBreeze_Loop0C:
000A27DF A5                         	dc.b	nC3
000A27E0 E607                       	smpsAlterVol        $07
000A27E2 A5                         	dc.b	nC3
000A27E3 E6F9                       	smpsAlterVol        $F9
000A27E5 08                         	dc.b	$08
000A27E6 E607                       	smpsAlterVol        $07
000A27E8 A5                         	dc.b	nC3
000A27E9 E608                       	smpsAlterVol        $08
000A27EB A5                         	dc.b	nC3
000A27EC E6F1                       	smpsAlterVol        $F1
000A27EE 18                         	dc.b	$18
000A27EF E607                       	smpsAlterVol        $07
000A27F1 10                         	dc.b	$10
000A27F2 E608                       	smpsAlterVol        $08
000A27F4 A5                         	dc.b	nC3
000A27F5 E6F1                       	smpsAlterVol        $F1
000A27F7 A5                         	dc.b	nC3
000A27F8 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A27FD A5                         	dc.b	nC3
000A27FE E607                       	smpsAlterVol        $07
000A2800 A5                         	dc.b	nC3
000A2801 E6F9                       	smpsAlterVol        $F9
000A2803 08                         	dc.b	$08
000A2804 E607                       	smpsAlterVol        $07
000A2806 A5                         	dc.b	nC3
000A2807 E608                       	smpsAlterVol        $08
000A2809 A5                         	dc.b	nC3
000A280A E6F1                       	smpsAlterVol        $F1
000A280C 10                         	dc.b	$10
000A280D E607                       	smpsAlterVol        $07
000A280F A5                         	dc.b	nC3
000A2810 E6F9                       	smpsAlterVol        $F9
000A2812 08                         	dc.b	$08
000A2813 E607                       	smpsAlterVol        $07
000A2815 A5                         	dc.b	nC3
000A2816 E608                       	smpsAlterVol        $08
000A2818 A5                         	dc.b	nC3
000A2819 E6F1                       	smpsAlterVol        $F1
000A281B 01                         	dc.b	$01
000A281C E0C0                       	smpsPan             panCenter, $00
000A281E F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A2821                            
000A2821                            ; DAC Data
000A2821                            GentleBreeze_DAC:
000A2821 81                         	dc.b	dKick
000A2822                            
000A2822                            GentleBreeze_Loop00:
000A2822 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2828 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A282D 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A2838                            
000A2838                            GentleBreeze_Loop01:
000A2838 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A283E F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A2843 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A284D                            
000A284D                            GentleBreeze_Jump00:
000A284D 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A2851                            
000A2851                            GentleBreeze_Loop02:
000A2851 81                         	dc.b	dKick
000A2852                            
000A2852                            GentleBreeze_Loop03:
000A2852 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A285E 088A                       	dc.b	$08, dLowTimpani
000A2860 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A2865 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A2871 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A2876 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A287B                            
000A287B                            GentleBreeze_Loop04:
000A287B 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2881 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A2886 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A2891                            
000A2891                            GentleBreeze_Loop05:
000A2891 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2897 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A289C 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A28A6 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A28A9                            
000A28A9                            ; PSG 1 Data
000A28A9                            GentleBreeze_PSG1:
000A28A9 80                         	dc.b	nRst
000A28AA                            
000A28AA                            GentleBreeze_LoopPSG02:
000A28AA 7F                         	dc.b	$7F
000A28AB F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A28B0 08                         	dc.b	$08
000A28B1 EC04                       	smpsPSGAlterVol     $04
000A28B3                            
000A28B3                            GentleBreeze_JumpPSG01:
000A28B3 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A28BF A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A28C7                            
000A28C7                            GentleBreeze_LoopPSG03:
000A28C7 7F                         	dc.b	$7F
000A28C8 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A28CD 08A3 01                    	dc.b	$08, nBb2, $01
000A28D0 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A28D3                            
000A28D3                            ; PSG2 Data
000A28D3                            GentleBreeze_PSG2:
000A28D3 80                         	dc.b	nRst
000A28D4                            
000A28D4                            GentleBreeze_LoopPSG00:
000A28D4 7F                         	dc.b	$7F
000A28D5 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A28DA 08                         	dc.b	$08
000A28DB EC04                       	smpsPSGAlterVol     $04
000A28DD                            
000A28DD                            GentleBreeze_JumpPSG00:
000A28DD A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A28E9 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A28F1                            
000A28F1                            GentleBreeze_LoopPSG01:
000A28F1 7F                         	dc.b	$7F
000A28F2 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A28F7 08A8 01                    	dc.b	$08, nEb3, $01
000A28FA F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A28FD                            
000A28FD                            GentleBreeze_Voices:
000A28FD                            ;	Voice $00
000A28FD                            ;	$0C
000A28FD                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A28FD                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A28FD                            	smpsVcAlgorithm     $04
000A28FD                            	smpsVcFeedback      $01
000A28FD                            	smpsVcUnusedBits    $00
000A28FD                            	smpsVcDetune        $07, $02, $07, $02
000A28FD                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A28FD                            	smpsVcRateScale     $00, $00, $00, $00
000A28FD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A28FD                            	smpsVcAmpMod        $00, $00, $00, $00
000A28FD                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A28FD                            	smpsVcDecayRate2    $01, $00, $00, $00
000A28FD                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A28FD                            	smpsVcReleaseRate   $09, $01, $04, $03
000A28FD 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A2916                            
000A2916                            ;	Voice $01
000A2916                            ;	$38
000A2916                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A2916                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A2916                            	smpsVcAlgorithm     $00
000A2916                            	smpsVcFeedback      $07
000A2916                            	smpsVcUnusedBits    $00
000A2916                            	smpsVcDetune        $03, $07, $01, $05
000A2916                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A2916                            	smpsVcRateScale     $00, $02, $00, $02
000A2916                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2916                            	smpsVcAmpMod        $00, $00, $00, $00
000A2916                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A2916                            	smpsVcDecayRate2    $00, $00, $10, $00
000A2916                            	smpsVcDecayLevel    $00, $00, $00, $00
000A2916                            	smpsVcReleaseRate   $08, $05, $05, $05
000A2916 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A292F                            
000A292F                            ;	Voice $02
000A292F                            ;	$00
000A292F                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A292F                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A292F                            	smpsVcAlgorithm     $00
000A292F                            	smpsVcFeedback      $00
000A292F                            	smpsVcUnusedBits    $00
000A292F                            	smpsVcDetune        $00, $00, $00, $00
000A292F                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A292F                            	smpsVcRateScale     $00, $00, $00, $00
000A292F                            	smpsVcAttackRate    $00, $00, $00, $00
000A292F                            	smpsVcAmpMod        $00, $00, $00, $00
000A292F                            	smpsVcDecayRate1    $00, $00, $00, $00
000A292F                            	smpsVcDecayRate2    $00, $00, $00, $00
000A292F                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A292F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A292F 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2948                            
000A2948                            ;	Voice $03
000A2948                            ;	$36
000A2948                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A2948                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A2948                            	smpsVcAlgorithm     $06
000A2948                            	smpsVcFeedback      $06
000A2948                            	smpsVcUnusedBits    $00
000A2948                            	smpsVcDetune        $00, $00, $00, $00
000A2948                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A2948                            	smpsVcRateScale     $00, $00, $00, $00
000A2948                            	smpsVcAttackRate    $1F, $00, $18, $16
000A2948                            	smpsVcAmpMod        $00, $00, $00, $00
000A2948                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A2948                            	smpsVcDecayRate2    $00, $00, $12, $00
000A2948                            	smpsVcDecayLevel    $04, $04, $02, $00
000A2948                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A2948 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A2961                            
000A2961                            ;	Voice $04
000A2961                            ;	$07
000A2961                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A2961                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A2961                            	smpsVcAlgorithm     $07
000A2961                            	smpsVcFeedback      $00
000A2961                            	smpsVcUnusedBits    $00
000A2961                            	smpsVcDetune        $07, $06, $05, $00
000A2961                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A2961                            	smpsVcRateScale     $00, $01, $01, $01
000A2961                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A2961                            	smpsVcAmpMod        $00, $00, $00, $00
000A2961                            	smpsVcDecayRate1    $17, $17, $17, $17
000A2961                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2961                            	smpsVcDecayLevel    $02, $02, $02, $02
000A2961                            	smpsVcReleaseRate   $06, $06, $06, $06
000A2961 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A297A                            
000A297A                            ;	Voice $05
000A297A                            ;	$3C
000A297A                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A297A                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A297A                            	smpsVcAlgorithm     $04
000A297A                            	smpsVcFeedback      $07
000A297A                            	smpsVcUnusedBits    $00
000A297A                            	smpsVcDetune        $06, $06, $02, $02
000A297A                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A297A                            	smpsVcRateScale     $00, $00, $00, $00
000A297A                            	smpsVcAttackRate    $0E, $14, $10, $13
000A297A                            	smpsVcAmpMod        $00, $00, $00, $00
000A297A                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A297A                            	smpsVcDecayRate2    $04, $04, $04, $04
000A297A                            	smpsVcDecayLevel    $02, $01, $01, $01
000A297A                            	smpsVcReleaseRate   $07, $07, $07, $07
000A297A 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A2993                            
000A2993                            
000A2994 00                         		even
000A2994                            ; ---------------------------------------------------------------------------
000A2994                            ; Sound	effect pointers
000A2994                            ; ---------------------------------------------------------------------------
000A2994 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A29A0 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A29AC 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A29B8 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A29C4 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A29D0 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A29DC 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A29E8 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A29F4 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A2A00 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A2A0C 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A2A18 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A2A24 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A2A30 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A2A3C 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A2A48 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A2A54 0000 0000                  SoundD0Index:	dc.l SoundD0
000A2A58                            SoundA0:	include	sound\jump.asm
000A2A58                            jump_Header:
000A2A58 =00000001                  smpsHeaderStartSong = 1
000A2A58 0000                       	smpsHeaderVoice     jump_Voices
000A2A5A 01                         	smpsHeaderTempoSFX  $01
000A2A5B 01                         	smpsHeaderChanSFX   $01
000A2A5C                            
000A2A68                            
000A2A68                            ; FM4 Data
000A2A68                            jump_FM4:
000A2A6A E000                       	smpsPan             panNone, $00
000A2A6C E607                       	smpsAlterVol        $07
000A2A6E E0C0                       	smpsPan             panCenter, $00
000A2A70 9903 B1                    	dc.b	nC2, $03, nC4
000A2A73 E607                       	smpsAlterVol        $07
000A2A75 E040                       	smpsPan             panRight, $00
000A2A77 99B1                       	dc.b	nC2, nC4
000A2A79 E60A                       	smpsAlterVol        $0A
000A2A7B E080                       	smpsPan             panLeft, $00
000A2A7D 99B1                       	dc.b	nC2, nC4
000A2A7F E603                       	smpsAlterVol        $03
000A2A81 E0C0                       	smpsPan             panCenter, $00
000A2A83 99B1                       	dc.b	nC2, nC4
000A2A85 E000                       	smpsPan             panNone, $00
000A2A87 803D                       	dc.b	nRst, $3D
000A2A89 F2                         	smpsStop
000A2A8A                            
000A2A8A                            ; PSG3 Data
000A2A8A                            jump_PSG3:
000A2A8A F3E7                       	smpsPSGform         $E7
000A2A8C 8056                       	dc.b	nRst, $56
000A2A8E F2                         	smpsStop
000A2A8F                            
000A2A8F                            jump_Voices:
000A2A8F                            ;	Voice $00
000A2A8F                            ;	$3C
000A2A8F                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A2A8F                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A2A8F                            	smpsVcAlgorithm     $04
000A2A8F                            	smpsVcFeedback      $07
000A2A8F                            	smpsVcUnusedBits    $00
000A2A8F                            	smpsVcDetune        $00, $00, $00, $00
000A2A8F                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A2A8F                            	smpsVcRateScale     $00, $00, $00, $00
000A2A8F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2A8F                            	smpsVcAmpMod        $00, $00, $00, $00
000A2A8F                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A2A8F                            	smpsVcDecayRate2    $11, $00, $11, $00
000A2A8F                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A2A8F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2A8F 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2AA8                            
000A2AA8                            
000A2AA8                            		even
000A2AA8                            SoundA1:	incbin	sound\soundA1.bin
000A2AD2                            		even
000A2AD2                            SoundA2:	incbin	sound\soundA2.bin
000A2AF2                            		even
000A2AF2                            SoundA3:	incbin	sound\soundA3.bin
000A2B24                            		even
000A2B24                            SoundA4:	incbin	sound\soundA4.bin
000A2B5A                            		even
000A2B5A                            SoundA5:	include	sound\fart.asm
000A2B5A                            Fart_Header:
000A2B5A =00000001                  smpsHeaderStartSong = 1
000A2B5A 0000                       	smpsHeaderVoice     Fart_Voices
000A2B5C 01                         	smpsHeaderTempoSFX  $01
000A2B5D 04                         	smpsHeaderChanSFX   $04
000A2B5E                            
000A2B76                            
000A2B76                            Fart_FM3:
000A2B78 E607                       	smpsAlterVol        $07
000A2B7A E0C0                       	smpsPan             panCenter, $00
000A2B7C F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2B81 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A2B84 E1FE                       	smpsAlterNote       $FE
000A2B86 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A2B89 E100                       	smpsAlterNote       $00
000A2B8B A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A2B90 F2                         	smpsStop
000A2B91                            
000A2B91                            ; FM4 Data
000A2B91                            Fart_FM4:
000A2B93 E0C0                       	smpsPan             panCenter, $00
000A2B95 8006                       	dc.b	nRst, $06
000A2B99 E616                       	smpsAlterVol        $16
000A2B9B E080                       	smpsPan             panLeft, $00
000A2B9D F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2BA2 A212                       	dc.b	nA2, $12
000A2BA4 E60A                       	smpsAlterVol        $0A
000A2BA6 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2BA9 E603                       	smpsAlterVol        $03
000A2BAB E7A2                       	dc.b	smpsNoAttack, nA2
000A2BAD E603                       	smpsAlterVol        $03
000A2BAF E7A2                       	dc.b	smpsNoAttack, nA2
000A2BB1 E604                       	smpsAlterVol        $04
000A2BB3 E7A2                       	dc.b	smpsNoAttack, nA2
000A2BB5 E606                       	smpsAlterVol        $06
000A2BB7 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A2BBA E610                       	smpsAlterVol        $10
000A2BBC E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2BBF E610                       	smpsAlterVol        $10
000A2BC1 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A2BC6 F2                         	smpsStop
000A2BC7                            
000A2BC7                            ; FM5 Data
000A2BC7                            Fart_FM5:
000A2BC9 E0C0                       	smpsPan             panCenter, $00
000A2BCB 8009                       	dc.b	nRst, $09
000A2BCF E616                       	smpsAlterVol        $16
000A2BD1 E040                       	smpsPan             panRight, $00
000A2BD3 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2BD8 A215                       	dc.b	nA2, $15
000A2BDA E60A                       	smpsAlterVol        $0A
000A2BDC E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2BDF E603                       	smpsAlterVol        $03
000A2BE1 E7A2                       	dc.b	smpsNoAttack, nA2
000A2BE3 E603                       	smpsAlterVol        $03
000A2BE5 E7A2                       	dc.b	smpsNoAttack, nA2
000A2BE7 E604                       	smpsAlterVol        $04
000A2BE9 E7A2                       	dc.b	smpsNoAttack, nA2
000A2BEB E606                       	smpsAlterVol        $06
000A2BED E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A2BF0 E610                       	smpsAlterVol        $10
000A2BF2 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2BF5 E610                       	smpsAlterVol        $10
000A2BF7 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A2BFC F2                         	smpsStop
000A2BFD                            
000A2BFD                            ; PSG3 Data
000A2BFD                            Fart_PSG3:
000A2BFD F2                         	smpsStop
000A2BFE                            
000A2BFE                            ; FM Voices
000A2BFE                            Fart_Voices:
000A2BFE                            ;	Voice $00
000A2BFE                            ;	$39
000A2BFE                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A2BFE                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A2BFE                            	smpsVcAlgorithm     $01
000A2BFE                            	smpsVcFeedback      $07
000A2BFE                            	smpsVcUnusedBits    $00
000A2BFE                            	smpsVcDetune        $00, $07, $03, $07
000A2BFE                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A2BFE                            	smpsVcRateScale     $00, $03, $03, $03
000A2BFE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2BFE                            	smpsVcAmpMod        $00, $00, $00, $00
000A2BFE                            	smpsVcDecayRate1    $00, $00, $00, $04
000A2BFE                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A2BFE                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A2BFE                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A2BFE 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A2C17                            
000A2C17                            ;	Voice $01
000A2C17                            ;	$00
000A2C17                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A2C17                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A2C17                            	smpsVcAlgorithm     $00
000A2C17                            	smpsVcFeedback      $00
000A2C17                            	smpsVcUnusedBits    $00
000A2C17                            	smpsVcDetune        $00, $00, $00, $00
000A2C17                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A2C17                            	smpsVcRateScale     $00, $00, $00, $00
000A2C17                            	smpsVcAttackRate    $00, $00, $00, $00
000A2C17                            	smpsVcAmpMod        $00, $00, $00, $00
000A2C17                            	smpsVcDecayRate1    $00, $00, $00, $00
000A2C17                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2C17                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A2C17                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2C17 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2C17 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2C30                            		even
000A2C30                            SoundA6:	incbin	sound\soundA6.bin
000A2C60                            		even
000A2C60                            SoundA7:	incbin	sound\soundA7.bin
000A2C90                            		even
000A2C90                            SoundA8:	incbin	sound\soundA8.bin
000A2CC4                            		even
000A2CC4                            SoundA9:	incbin	sound\soundA9.bin
000A2CD6                            		even
000A2CD6                            SoundAA:	incbin	sound\soundAA.bin
000A2D18                            		even
000A2D18                            SoundAB:	incbin	sound\soundAB.bin
000A2D38                            		even
000A2D38                            SoundAC:	incbin	sound\soundAC.bin
000A2D6C                            		even
000A2D6C                            SoundAD:	incbin	sound\soundAD.bin
000A2DA2                            		even
000A2DA2                            SoundAE:	incbin	sound\soundAE.bin
000A2DEC                            		even
000A2DEC                            SoundAF:	incbin	sound\soundAF.bin
000A2E1A                            		even
000A2E1A                            SoundB0:	incbin	sound\soundB0.bin
000A2E4C                            		even
000A2E4C                            SoundB1:	incbin	sound\soundB1.bin
000A2E78                            		even
000A2E78                            SoundB2:	incbin	sound\soundB2.bin
000A2EC8                            		even
000A2EC8                            SoundB3:	incbin	sound\soundB3.bin
000A2F12                            		even
000A2F12                            SoundB4:	include	sound\soundB4.asm
000A2F12                            SndB4_Bumper_Header:
000A2F12 =00000001                  smpsHeaderStartSong = 1
000A2F12 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A2F14 01                         	smpsHeaderTempoSFX  $01
000A2F15 03                         	smpsHeaderChanSFX   $03
000A2F16                            
000A2F28                            
000A2F28                            ; FM5 Data
000A2F28                            SndB4_Bumper_FM5:
000A2F2A F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A2F2D                            
000A2F2D                            ; FM4 Data
000A2F2D                            SndB4_Bumper_FM4:
000A2F2D F2                         	smpsStop
000A2F2E                            
000A2F2E                            SndB4_Bumper_Jump00:
000A2F2E A020                       	dc.b	nG2, $20
000A2F30 F2                         	smpsStop
000A2F31                            
000A2F31                            ; FM3 Data
000A2F31                            SndB4_Bumper_FM3:
000A2F31 F2                         	smpsStop
000A2F32                            
000A2F32                            SndB4_Bumper_Voices:
000A2F32                            ;	Voice $00
000A2F32                            ;	$32
000A2F32                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A2F32                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A2F32                            	smpsVcAlgorithm     $02
000A2F32                            	smpsVcFeedback      $06
000A2F32                            	smpsVcUnusedBits    $00
000A2F32                            	smpsVcDetune        $07, $07, $02, $00
000A2F32                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A2F32                            	smpsVcRateScale     $00, $00, $00, $00
000A2F32                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2F32                            	smpsVcAmpMod        $00, $00, $00, $00
000A2F32                            	smpsVcDecayRate1    $08, $00, $00, $09
000A2F32                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A2F32                            	smpsVcDecayLevel    $00, $00, $00, $00
000A2F32                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A2F32 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A2F32 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A2F4C 00                         		even
000A2F4C                            SoundB5:	incbin	sound\soundB5.bin
000A2F6A 00                         		even
000A2F6A                            SoundB6:	incbin	sound\soundB6.bin
000A2F88                            		even
000A2F88                            SoundB7:	incbin	sound\soundB7.bin
000A2FC4                            		even
000A2FC4                            SoundB8:	incbin	sound\soundB8.bin
000A2FE2                            		even
000A2FE2                            SoundB9:	incbin	sound\soundB9.bin
000A3046                            		even
000A3046                            SoundBA:	incbin	sound\soundBA.bin
000A306E                            		even
000A306E                            SoundBB:	incbin	sound\soundBB.bin
000A309A                            		even
000A309A                            SoundBC:	incbin	sound\soundBC.bin
000A30DC                            		even
000A30DC                            SoundBD:	incbin	sound\soundBD.bin
000A3130                            		even
000A3130                            SoundBE:	incbin	sound\soundBE.bin
000A316A                            		even
000A316A                            SoundBF:	incbin	sound\soundBF.bin
000A31DC                            		even
000A31DC                            SoundC0:	incbin	sound\soundC0.bin
000A320A                            		even
000A320A                            SoundC1:	incbin	sound\soundC1.bin
000A3264                            		even
000A3264                            SoundC2:	incbin	sound\soundC2.bin
000A328E                            		even
000A328E                            SoundC3:	incbin	sound\soundC3.bin
000A3308                            		even
000A3308                            SoundC4:	incbin	sound\soundC4.bin
000A3406                            		even
000A3406                            SoundC5:	incbin	sound\soundC5.bin
000A346E                            		even
000A346E                            SoundC6:	incbin	sound\soundC6.bin
000A34B0                            		even
000A34B0                            SoundC7:	incbin	sound\soundC7.bin
000A34DE                            		even
000A34DE                            SoundC8:	incbin	sound\soundC8.bin
000A34F0                            		even
000A34F0                            SoundC9:	incbin	sound\soundC9.bin
000A351E                            		even
000A351E                            SoundCA:	incbin	sound\soundCA.bin
000A354C                            		even
000A354C                            SoundCB:	incbin	sound\soundCB.bin
000A3598                            		even
000A3598                            SoundCC:	incbin	sound\C9.ssf
000A35C6                            		even
000A35C6                            SoundCD:	incbin	sound\soundCD.bin
000A35F2                            		even
000A35F2                            SoundCE:	incbin	sound\soundCE.bin
000A3610 00                         		even
000A3610                            SoundCF:	incbin	sound\soundCF.bin
000A3648                            		even
000A3648                            SoundD0:	incbin	sound\soundD0.bin
000A3682                            		even
000A3682                            SegaPCM:	incbin	sound\segapcm.bin
000BD7D8                            SegaPCM_end:	even
000BD7D8                            
000BD7D8                            IdiotPCM:	incbin	sound\youare.bin
000C78AA 00                         IdiotPCM_end:	even
000C78AA                            
000C78AA                            Minecraft:	include	minecraft\code\main.asm
000C78AA                            ; Minecraft: Very Legacy Console Edition
000C78AA                            ; Main file
000C78AA                            
000C78AA                            	include	minecraft\code\variables.asm
000C78AA                            ; Minecraft: Very Legacy Console Edition
000C78AA                            ; Variable Definitions
000C78AA                            
000C78AA =00000040                  MAP_HEIGHT	equ	64
000C78AA =00000100                  MAP_WIDTH	equ	256
000C78AA                            
000C78AA                            		rsset	$FF0000
000C78AA =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C78AA =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C78AA                            
000C78AA                            		rsset	$FFFF8000
000C78AA =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C78AA                            
000C78AA =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C78AA =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C78AA =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C78AA =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C78AA =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C78AA                            
000C78AA                            MC_Init:
000C78AA 007C 0700                  		ori	#$700,sr		; disables CPU interrupts
000C78AE 4DF9 00C0 0004             		lea	($C00004).l,a6	;	; load the address of the VDP control port into a6
000C78B4                            
000C78B4 3CBC 8134                  		move.w	#$8134,(a6)		; disable display
000C78B8 6100 0000                  		bsr.w	MC_ClearScreen		; clear VRAM, CRAM, and VSRAM
000C78BC 6100 0000                  		bsr.w	MC_LoadPalette		; load in the palette
000C78C0 3CBC 8174                  		move.w	#$8174,(a6)		; enable display
000C78C4                            
000C78C4                            
000C78C4                            
000C78C4 6000 FFFE                  		bra.w	*			; spin infinitely
000C78C8                            
000C78C8                            ; ===========================================================================
000C78C8                            ; ---------------------------------------------------------------------------
000C78C8                            ; Clear The Screen
000C78C8                            ; ---------------------------------------------------------------------------
000C78C8                            MC_ClearScreen:
000C78C8 3CBC 8F01                  		move.w	#$8F01,(a6)		; set auto-incremement size to byte
000C78CC                            
000C78CC 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)		; clear the VRAM
000C78D2 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C78D6 2CBC 4000 0080             		move.l	#$40000080,(a6)		; ^
000C78DC 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C78E2                            
000C78E2 44D6                       .waitVRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C78E4 69FC                       		bvs.s	.waitVRAMClr		; if so, loop until DMA is complete
000C78E6                            
000C78E6 2CBC 9400 937F             		move.l	#$9400937F,(a6)		; clear the CRAM
000C78EC 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C78F0 2CBC C000 0080             		move.l	#$C0000080,(a6)		; ^
000C78F6 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C78FC                            
000C78FC 44D6                       .waitCRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C78FE 69FC                       		bvs.s	.waitCRAMClr		; if so, loop until DMA is complete
000C7900                            
000C7900 2CBC 9400 935F             		move.l	#$9400935F,(a6)		; clear the VSRAM
000C7906 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C790A 2CBC 4000 0090             		move.l	#$40000090,(a6)		; ^
000C7910 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C7916                            
000C7916 44D6                       .waitVSRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C7918 69FC                       		bvs.s	.waitVSRAMClr		; if so, loop until DMA is complete
000C791A                            
000C791A 3CBC 8F02                  		move.w	#$8F02,(a6)		; set auto-incremement size to word
000C791E 4E75                       		rts				; return
000C7920                            ; ---------------------------------------------------------------------------
000C7920                            
000C7920                            ; ===========================================================================
000C7920                            ; ---------------------------------------------------------------------------
000C7920                            ; Load The Palette
000C7920                            ; ---------------------------------------------------------------------------
000C7920                            MC_LoadPalette:
000C7920 44D6                       		move.w	(a6),ccr		; is v-blank active?
000C7922 6AFC                       		bpl.s	MC_LoadPalette		; if not, wait for it to start
000C7924                            
000C7924                            .updatePalette:
000C7924 2CBC 9400 9340             		move.l	#$94009340,(a6)		; set the DMA transfer size (64 colors)
000C792A                            		
000C792A 4BFA 0000                  		lea	MC_Palette(pc),a5	; load the base address of the palette data (pc relative)
000C792E 200D                       		move.l	a5,d0			; move the address to a data register so we can modify it
000C7930 E288                       		lsr.l	#1,d0			; divide by two
000C7932                            
000C7932 323C 9500                  		move.w	#$9500,d1		; set the low byte of the transfer source address
000C7936 1200                       		move.b	d0,d1			; ^
000C7938 3C81                       		move.w	d1,(a6)			; ^
000C793A                            
000C793A E088                       		lsr.l	#8,d0			; set the middle byte of the transfer source address
000C793C 323C 9600                  		move.w	#$9600,d1		; ^
000C7940 1200                       		move.b	d0,d1			; ^
000C7942 3C81                       		move.w	d1,(a6)			; ^
000C7944                            
000C7944 E088                       		lsr.l	#8,d0			; set the high byte of the transfer source address
000C7946 323C 9700                  		move.w	#$9700,d1		; ^
000C794A 1200                       		move.b	d0,d1			; ^
000C794C 3C81                       		move.w	d1,(a6)			; ^
000C794E                            
000C794E 2CBC C000 0080             		move.l	#$C0000080,(a6)		; set the destination palette index and begin the transfer
000C7954                            
000C7954                            .waitForScan:
000C7954                            	;	move.w	(a6),ccr		; is v-blank still active?
000C7954                            	;	bmi.s	.waitForScan		; if so, wait for active scan before returning
000C7954 4E75                       		rts				; return
000C7956                            ; ---------------------------------------------------------------------------
000C7956                            
000C7956                            MC_Palette:
000C7956 0E86 08AE 068E 046C 0246+  	dc.w	$E86, $8AE, $68E, $46C, $246, $024, $CC0, $AA0, $C46, $824, $EEE, $444, $222, $000, $000, $000
000C7976 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4EE, $6AE, $48C, $26A, $048, $026, $4E6, $2C4, $080
000C7996 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C79B6 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C79B6 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C79D6                            ; end of 'ROM'
000C79D6                            EndOfRom:
000C79D6                            
000C79D6                            
