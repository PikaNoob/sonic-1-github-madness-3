00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG                ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG                ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000B10                            		even
00000B10                            
00000B10                            ; ===========================================================================
00000B10                            
00000B10                            loc_B10:				; XREF: Vectors
00000B10 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000B14 4A38 F62A                  		tst.b	($FFFFF62A).w
00000B18 6700                       		beq.s	loc_B88
00000B1A 3039 00C0 0004             		move.w	($C00004).l,d0
00000B20 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000B2A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B32 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B38 6700                       		beq.s	loc_B42
00000B3A 303C 0700                  		move.w	#$700,d0
00000B3E                            
00000B3E                            loc_B3E:
00000B3E 51C8 FFFE                  		dbf	d0,loc_B3E
00000B42                            
00000B42                            loc_B42:
00000B42 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000B46 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000B4C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B52 0240 003E                  		andi.w	#$3E,d0
00000B56 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000B5A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B5E                            
00000B5E                            loc_B5E:				; XREF: loc_B88
00000B5E 4EB9 0000 0000             		jsr	sub_71B4C
00000B64                            
00000B64                            loc_B64:				; XREF: loc_D50
00000B64 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B68 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B6C 4E73                       		rte	
00000B6E                            ; ===========================================================================
00000B6E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B72 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B76 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B7A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B7E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B82 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B86 0000                       		dc.w loc_E72-off_B6E
00000B88                            ; ===========================================================================
00000B88                            
00000B88                            loc_B88:				; XREF: loc_B10; off_B6E
00000B88 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B8E 6700                       		beq.s	loc_B9A
00000B90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B96 6600 FFC6                  		bne.w	loc_B5E
00000B9A                            
00000B9A                            loc_B9A:
00000B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000BA0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000BA4 3039 00C0 0004             		move.w	($C00004).l,d0
00000BAA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000BB0 6700                       		beq.s	loc_BBA
00000BB2 303C 0700                  		move.w	#$700,d0
00000BB6                            
00000BB6                            loc_BB6:
00000BB6 51C8 FFFE                  		dbf	d0,loc_BB6
00000BBA                            
00000BBA                            loc_BBA:
00000BBA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000BC0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000BC8                            
00000BC8                            loc_BC8:
00000BC8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BD0 66F6                       		bne.s	loc_BC8
00000BD2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BD6 6600                       		bne.s	loc_BFE
00000BD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BDE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BE4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BEA 3ABC 977F                  		move.w	#$977F,(a5)
00000BEE 3ABC C000                  		move.w	#$C000,(a5)
00000BF2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BFC 6000                       		bra.s	loc_C22
00000BFE                            ; ===========================================================================
00000BFE                            
00000BFE                            loc_BFE:				; XREF: loc_BC8
00000BFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C04 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C0A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C10 3ABC 977F                  		move.w	#$977F,(a5)
00000C14 3ABC C000                  		move.w	#$C000,(a5)
00000C18 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C22                            
00000C22                            loc_C22:				; XREF: loc_BC8
00000C22 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C26 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C2E 6000 FF2E                  		bra.w	loc_B5E
00000C32                            ; ===========================================================================
00000C32                            
00000C32                            loc_C32:				; XREF: off_B6E
00000C32 6100 0000                  		bsr.w	sub_106E
00000C36                            
00000C36                            loc_C36:				; XREF: off_B6E
00000C36 4A78 F614                  		tst.w	($FFFFF614).w
00000C3A 6700 0000                  		beq.w	locret_C42
00000C3E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C42                            
00000C42                            locret_C42:
00000C42 4E75                       		rts	
00000C44                            ; ===========================================================================
00000C44                            
00000C44                            loc_C44:				; XREF: off_B6E
00000C44 6100 0000                  		bsr.w	sub_106E
00000C48 6100 0000                  		bsr.w	sub_6886
00000C4C 6100 0000                  		bsr.w	sub_1642
00000C50 4A78 F614                  		tst.w	($FFFFF614).w
00000C54 6700 0000                  		beq.w	locret_C5C
00000C58 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C5C                            
00000C5C                            locret_C5C:
00000C5C 4E75                       		rts	
00000C5E                            ; ===========================================================================
00000C5E                            
00000C5E                            loc_C5E:				; XREF: off_B6E
00000C5E 6100 0000                  		bsr.w	sub_106E
00000C62 4E75                       		rts	
00000C64                            ; ===========================================================================
00000C64                            
00000C64                            loc_C64:				; XREF: off_B6E
00000C64 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C6A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C6E                            
00000C6E                            loc_C6E:				; XREF: off_B6E
00000C6E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C76                            
00000C76                            loc_C76:
00000C76 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C7E 66F6                       		bne.s	loc_C76		; if not, branch
00000C80 6100 0000                  		bsr.w	ReadJoypads
00000C84 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C88 6600                       		bne.s	loc_CB0
00000C8A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C90 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C96 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C9C 3ABC 977F                  		move.w	#$977F,(a5)
00000CA0 3ABC C000                  		move.w	#$C000,(a5)
00000CA4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CAA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CAE 6000                       		bra.s	loc_CD4
00000CB0                            ; ===========================================================================
00000CB0                            
00000CB0                            loc_CB0:				; XREF: loc_C76
00000CB0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CBC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CC2 3ABC 977F                  		move.w	#$977F,(a5)
00000CC6 3ABC C000                  		move.w	#$C000,(a5)
00000CCA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CD0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CD4                            
00000CD4                            loc_CD4:				; XREF: loc_C76
00000CD4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CDE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CE4 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CEA 3ABC 977F                  		move.w	#$977F,(a5)
00000CEE 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CF2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D02 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D08 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D0E 3ABC 977F                  		move.w	#$977F,(a5)
00000D12 3ABC 7800                  		move.w	#$7800,(a5)
00000D16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D20 4A38 F767                  		tst.b	($FFFFF767).w
00000D24 6700                       		beq.s	loc_D50
00000D26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D2C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000D32 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000D38 3ABC 977F                  		move.w	#$977F,(a5)
00000D3C 3ABC 7000                  		move.w	#$7000,(a5)
00000D40 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D46 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D4A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000D50                            
00000D50                            loc_D50:
00000D50 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000D58 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D5E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D64 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D6A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D70 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D76 6400                       		bcc.s	Demo_Time
00000D78 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D7E 588F                       		addq.l	#4,sp
00000D80 6000 FDE2                  		bra.w	loc_B64
00000D84                            
00000D84                            ; ---------------------------------------------------------------------------
00000D84                            ; Subroutine to	run a demo for an amount of time
00000D84                            ; ---------------------------------------------------------------------------
00000D84                            
00000D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D84                            
00000D84                            
00000D84                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D84 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D88 4EB9 0000 0000             		jsr	AniArt_Load
00000D8E 4EB9 0000 0000             		jsr	HudUpdate
00000D94 6100 0000                  		bsr.w	sub_165E
00000D98 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D9C 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000DA0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000DA4                            
00000DA4                            Demo_TimeEnd:
00000DA4 4E75                       		rts	
00000DA6                            ; End of function Demo_Time
00000DA6                            
00000DA6                            ; ===========================================================================
00000DA6                            
00000DA6                            loc_DA6:				; XREF: off_B6E
00000DA6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DAE                            
00000DAE                            loc_DAE:
00000DAE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DB6 66F6                       		bne.s	loc_DAE		; if not, branch
00000DB8 6100 0000                  		bsr.w	ReadJoypads
00000DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCE 3ABC 977F                  		move.w	#$977F,(a5)
00000DD2 3ABC C000                  		move.w	#$C000,(a5)
00000DD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DF2 3ABC 977F                  		move.w	#$977F,(a5)
00000DF6 3ABC 7800                  		move.w	#$7800,(a5)
00000DFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E00 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E04 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E10 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E16 3ABC 977F                  		move.w	#$977F,(a5)
00000E1A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E1E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E24 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E28 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E30 6100 0000                  		bsr.w	PalCycle_SS
00000E34 4A38 F767                  		tst.b	($FFFFF767).w
00000E38 6700                       		beq.s	loc_E64
00000E3A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E40 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E46 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E4C 3ABC 977F                  		move.w	#$977F,(a5)
00000E50 3ABC 7000                  		move.w	#$7000,(a5)
00000E54 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E5A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E5E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E64                            
00000E64                            loc_E64:
00000E64 4A78 F614                  		tst.w	($FFFFF614).w
00000E68 6700 0000                  		beq.w	locret_E70
00000E6C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E70                            
00000E70                            locret_E70:
00000E70 4E75                       		rts	
00000E72                            ; ===========================================================================
00000E72                            
00000E72                            loc_E72:				; XREF: off_B6E
00000E72 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E7A                            
00000E7A                            loc_E7A:
00000E7A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E82 66F6                       		bne.s	loc_E7A		; if not, branch
00000E84 6100 0000                  		bsr.w	ReadJoypads
00000E88 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E8C 6600                       		bne.s	loc_EB4
00000E8E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E94 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E9A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EA0 3ABC 977F                  		move.w	#$977F,(a5)
00000EA4 3ABC C000                  		move.w	#$C000,(a5)
00000EA8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EAE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EB2 6000                       		bra.s	loc_ED8
00000EB4                            ; ===========================================================================
00000EB4                            
00000EB4                            loc_EB4:				; XREF: loc_E7A
00000EB4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EBA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EC0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EC6 3ABC 977F                  		move.w	#$977F,(a5)
00000ECA 3ABC C000                  		move.w	#$C000,(a5)
00000ECE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ED4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED8                            
00000ED8                            loc_ED8:				; XREF: loc_E7A
00000ED8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EE8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EEE                            
00000EEE                            loc_EEE:
00000EEE 3ABC 977F                  		move.w	#$977F,(a5)
00000EF2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F00 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F06 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F0C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F12 3ABC 977F                  		move.w	#$977F,(a5)
00000F16 3ABC 7800                  		move.w	#$7800,(a5)
00000F1A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F20 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F24 4A38 F767                  		tst.b	($FFFFF767).w
00000F28 6700                       		beq.s	loc_F54
00000F2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F30 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F36 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F3C 3ABC 977F                  		move.w	#$977F,(a5)
00000F40 3ABC 7000                  		move.w	#$7000,(a5)
00000F44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F4E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F54                            
00000F54                            loc_F54:
00000F54 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F5C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F62 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F68 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F6E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F74 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F78 4EB9 0000 0000             		jsr	AniArt_Load
00000F7E 4EB9 0000 0000             		jsr	HudUpdate
00000F84 6100 0000                  		bsr.w	sub_1642
00000F88 4E75                       		rts	
00000F8A                            ; ===========================================================================
00000F8A                            
00000F8A                            loc_F8A:				; XREF: off_B6E
00000F8A 6100 0000                  		bsr.w	sub_106E
00000F8E 5238 F628                  		addq.b	#1,($FFFFF628).w
00000F92 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000F98 4E75                       		rts	
00000F9A                            ; ===========================================================================
00000F9A                            
00000F9A                            loc_F9A:				; XREF: off_B6E
00000F9A 6100 0000                  		bsr.w	sub_106E
00000F9E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FA2 6000 0000                  		bra.w	sub_1642
00000FA6                            ; ===========================================================================
00000FA6                            
00000FA6                            loc_FA6:				; XREF: off_B6E
00000FA6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FAE                            
00000FAE                            loc_FAE:
00000FAE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FB6 66F6                       		bne.s	loc_FAE		; if not, branch
00000FB8 6100 0000                  		bsr.w	ReadJoypads
00000FBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FCE 3ABC 977F                  		move.w	#$977F,(a5)
00000FD2 3ABC C000                  		move.w	#$C000,(a5)
00000FD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC 7800                  		move.w	#$7800,(a5)
00000FFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001010 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001030 4A38 F767                  		tst.b	($FFFFF767).w
00001034 6700                       		beq.s	loc_1060
00001036 4BF9 00C0 0004             		lea	($C00004).l,a5
0000103C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001042 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001048 3ABC 977F                  		move.w	#$977F,(a5)
0000104C 3ABC 7000                  		move.w	#$7000,(a5)
00001050 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001056 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001060                            
00001060                            loc_1060:
00001060 4A78 F614                  		tst.w	($FFFFF614).w
00001064 6700 0000                  		beq.w	locret_106C
00001068 5378 F614                  		subq.w	#1,($FFFFF614).w
0000106C                            
0000106C                            locret_106C:
0000106C 4E75                       		rts	
0000106E                            
0000106E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000106E                            
0000106E                            
0000106E                            sub_106E:				; XREF: loc_C32; et al
0000106E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001076                            
00001076                            loc_1076:
00001076 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000107E 66F6                       		bne.s	loc_1076	; if not, branch
00001080 6100 0000                  		bsr.w	ReadJoypads
00001084 4A38 F64E                  		tst.b	($FFFFF64E).w
00001088 6600                       		bne.s	loc_10B0
0000108A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001090 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001096 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000109C 3ABC 977F                  		move.w	#$977F,(a5)
000010A0 3ABC C000                  		move.w	#$C000,(a5)
000010A4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010AA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010AE 6000                       		bra.s	loc_10D4
000010B0                            ; ===========================================================================
000010B0                            
000010B0                            loc_10B0:				; XREF: sub_106E
000010B0 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010C2 3ABC 977F                  		move.w	#$977F,(a5)
000010C6 3ABC C000                  		move.w	#$C000,(a5)
000010CA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D4                            
000010D4                            loc_10D4:				; XREF: sub_106E
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010E0 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC 7800                  		move.w	#$7800,(a5)
000010EE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010FE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001104 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110A 3ABC 977F                  		move.w	#$977F,(a5)
0000110E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001112 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001118 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000111C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001124 4E75                       		rts	
00001126                            ; End of function sub_106E
00001126                            
00001126                            ; ---------------------------------------------------------------------------
00001126                            ; Subroutine to	move pallets from the RAM to CRAM
00001126                            ; ---------------------------------------------------------------------------
00001126                            
00001126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001126                            
00001126                            
00001126                            PalToCRAM:
00001126 46FC 2700                  		move	#$2700,sr
0000112A 4A78 F644                  		tst.w	($FFFFF644).w
0000112E 6700                       		beq.s	locret_119C
00001130 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001136 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000113A 43F9 00C0 0000             		lea	($C00000).l,a1
00001140 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001144 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000114C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000114E 2298                       		move.l	(a0)+,(a1)
00001150 2298                       		move.l	(a0)+,(a1)
00001152 2298                       		move.l	(a0)+,(a1)
00001154 2298                       		move.l	(a0)+,(a1)
00001156 2298                       		move.l	(a0)+,(a1)
00001158 2298                       		move.l	(a0)+,(a1)
0000115A 2298                       		move.l	(a0)+,(a1)
0000115C 2298                       		move.l	(a0)+,(a1)
0000115E 2298                       		move.l	(a0)+,(a1)
00001160 2298                       		move.l	(a0)+,(a1)
00001162 2298                       		move.l	(a0)+,(a1)
00001164 2298                       		move.l	(a0)+,(a1)
00001166 2298                       		move.l	(a0)+,(a1)
00001168 2298                       		move.l	(a0)+,(a1)
0000116A 2298                       		move.l	(a0)+,(a1)
0000116C 2298                       		move.l	(a0)+,(a1)
0000116E 2298                       		move.l	(a0)+,(a1)
00001170 2298                       		move.l	(a0)+,(a1)
00001172 2298                       		move.l	(a0)+,(a1)
00001174 2298                       		move.l	(a0)+,(a1)
00001176 2298                       		move.l	(a0)+,(a1)
00001178 2298                       		move.l	(a0)+,(a1)
0000117A 2298                       		move.l	(a0)+,(a1)
0000117C 2298                       		move.l	(a0)+,(a1)
0000117E 2298                       		move.l	(a0)+,(a1)
00001180 2298                       		move.l	(a0)+,(a1)
00001182 2298                       		move.l	(a0)+,(a1)
00001184 2298                       		move.l	(a0)+,(a1)
00001186 2298                       		move.l	(a0)+,(a1)
00001188 2298                       		move.l	(a0)+,(a1)
0000118A 2298                       		move.l	(a0)+,(a1)
0000118C 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001192 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001196 4A38 F64F                  		tst.b	($FFFFF64F).w
0000119A 6600                       		bne.s	loc_119E
0000119C                            
0000119C                            locret_119C:
0000119C 4E73                       		rte	
0000119E                            ; ===========================================================================
0000119E                            
0000119E                            loc_119E:				; XREF: PalToCRAM
0000119E 4238 F64F                  		clr.b	($FFFFF64F).w
000011A2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000011A6 6100 FBDC                  		bsr.w	Demo_Time
000011AA 4EB9 0000 0000             		jsr	sub_71B4C
000011B0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000011B4 4E73                       		rte	
000011B6                            ; End of function PalToCRAM
000011B6                            
000011B6                            ; ---------------------------------------------------------------------------
000011B6                            ; Subroutine to	initialise joypads
000011B6                            ; ---------------------------------------------------------------------------
000011B6                            
000011B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011B6                            
000011B6                            
000011B6                            JoypadInit:				; XREF: GameClrRAM
000011B6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011BE                            
000011BE                            Joypad_WaitZ80:
000011BE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000011C6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000011C8 7040                       		moveq	#$40,d0
000011CA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000011D0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000011D6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000011DC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000011E4 4E75                       		rts	
000011E6                            ; End of function JoypadInit
000011E6                            
000011E6                            ; ---------------------------------------------------------------------------
000011E6                            ; Subroutine to	read joypad input, and send it to the RAM
000011E6                            ; ---------------------------------------------------------------------------
000011E6                            
000011E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011E6                            
000011E6                            
000011E6                            ReadJoypads:
000011E6 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000011EA 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000011F0 6100                       		bsr.s	Joypad_Read	; do the first joypad
000011F2 5449                       		addq.w	#2,a1		; do the second	joypad
000011F4                            
000011F4                            Joypad_Read:
000011F4 12BC 0000                  		move.b	#0,(a1)
000011F8 4E71                       		nop	
000011FA 4E71                       		nop	
000011FC 1011                       		move.b	(a1),d0
000011FE E508                       		lsl.b	#2,d0
00001200 0200 00C0                  		andi.b	#$C0,d0
00001204 12BC 0040                  		move.b	#$40,(a1)
00001208 4E71                       		nop	
0000120A 4E71                       		nop	
0000120C 1211                       		move.b	(a1),d1
0000120E 0201 003F                  		andi.b	#$3F,d1
00001212 8001                       		or.b	d1,d0
00001214 4600                       		not.b	d0
00001216 1210                       		move.b	(a0),d1
00001218 B101                       		eor.b	d0,d1
0000121A 10C0                       		move.b	d0,(a0)+
0000121C C200                       		and.b	d0,d1
0000121E 10C1                       		move.b	d1,(a0)+
00001220 4E75                       		rts	
00001222                            ; End of function ReadJoypads
00001222                            
00001222                            
00001222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001222                            
00001222                            
00001222                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001222 41F9 00C0 0004             		lea	($C00004).l,a0
00001228 43F9 00C0 0000             		lea	($C00000).l,a1
0000122E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001234 7E12                       		moveq	#$12,d7
00001236                            
00001236                            VDP_Loop:
00001236 309A                       		move.w	(a2)+,(a0)
00001238 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000123C                            
0000123C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001242 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001246 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000124C 7000                       		moveq	#0,d0
0000124E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001258 3E3C 003F                  		move.w	#$3F,d7
0000125C                            
0000125C                            VDP_ClrCRAM:
0000125C 3280                       		move.w	d0,(a1)
0000125E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001262                            
00001262 42B8 F616                  		clr.l	($FFFFF616).w
00001266 42B8 F61A                  		clr.l	($FFFFF61A).w
0000126A 2F01                       		move.l	d1,-(sp)
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 3ABC 8F01                  		move.w	#$8F01,(a5)
00001276 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000127C 3ABC 9780                  		move.w	#$9780,(a5)
00001280 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001286 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000128E                            
0000128E                            loc_128E:
0000128E 3215                       		move.w	(a5),d1
00001290 0801 0001                  		btst	#1,d1
00001294 66F8                       		bne.s	loc_128E
00001296                            
00001296 3ABC 8F02                  		move.w	#$8F02,(a5)
0000129A 221F                       		move.l	(sp)+,d1
0000129C 4E75                       		rts	
0000129E                            ; End of function VDPSetupGame
0000129E                            
0000129E                            ; ===========================================================================
0000129E 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000012A6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000012AE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000012B6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000012BE 9001 9100 9200             		dc.w $9001, $9100, $9200
000012C4                            
000012C4                            ; ---------------------------------------------------------------------------
000012C4                            ; Subroutine to	clear the screen
000012C4                            ; ---------------------------------------------------------------------------
000012C4                            
000012C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C4                            
000012C4                            
000012C4                            ClearScreen:
000012C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012CA 3ABC 8F01                  		move.w	#$8F01,(a5)
000012CE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000012D4 3ABC 9780                  		move.w	#$9780,(a5)
000012D8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000012DE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000012E6                            
000012E6                            loc_12E6:
000012E6 3215                       		move.w	(a5),d1
000012E8 0801 0001                  		btst	#1,d1
000012EC 66F8                       		bne.s	loc_12E6
000012EE                            
000012EE 3ABC 8F02                  		move.w	#$8F02,(a5)
000012F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000012F8 3ABC 8F01                  		move.w	#$8F01,(a5)
000012FC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001302 3ABC 9780                  		move.w	#$9780,(a5)
00001306 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000130C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001314                            
00001314                            loc_1314:
00001314 3215                       		move.w	(a5),d1
00001316 0801 0001                  		btst	#1,d1
0000131A 66F8                       		bne.s	loc_1314
0000131C                            
0000131C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001320 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001328 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001330 43F8 F800                  		lea	($FFFFF800).w,a1
00001334 7000                       		moveq	#0,d0
00001336 323C 00A0                  		move.w	#$A0,d1
0000133A                            
0000133A                            loc_133A:
0000133A 22C0                       		move.l	d0,(a1)+
0000133C 51C9 FFFC                  		dbf	d1,loc_133A
00001340                            
00001340 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001344 7000                       		moveq	#0,d0
00001346 323C 0100                  		move.w	#$100,d1
0000134A                            
0000134A                            loc_134A:
0000134A 22C0                       		move.l	d0,(a1)+
0000134C 51C9 FFFC                  		dbf	d1,loc_134A
00001350 4E75                       		rts	
00001352                            ; End of function ClearScreen
00001352                            
00001352                            ; ---------------------------------------------------------------------------
00001352                            ; Subroutine to	load the sound driver
00001352                            ; ---------------------------------------------------------------------------
00001352                            
00001352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001352                            
00001352                            
00001352                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001352 4E71                       		nop	
00001354 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000135C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001364 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000136A 43F9 00A0 0000             		lea	($A00000).l,a1
00001370 6100 0000                  		bsr.w	KosDec		; decompress
00001374 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000137C 4E71                       		nop	
0000137E 4E71                       		nop	
00001380 4E71                       		nop	
00001382 4E71                       		nop	
00001384 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000138C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001394 4E75                       		rts	
00001396                            ; End of function SoundDriverLoad
00001396                            
00001396                            ; ---------------------------------------------------------------------------
00001396                            ; Subroutine to	play a sound or	music track
00001396                            ; ---------------------------------------------------------------------------
00001396                            
00001396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001396                            
00001396                            
00001396                            PlaySound:
00001396 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000139A 4E75                       		rts	
0000139C                            ; End of function PlaySound
0000139C                            
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            ; Subroutine to	play a special sound/music (E0-E4)
0000139C                            ;
0000139C                            ; E0 - Fade out
0000139C                            ; E1 - Sega
0000139C                            ; E2 - Speed up
0000139C                            ; E3 - Normal speed
0000139C                            ; E4 - Stop
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            
0000139C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000139C                            
0000139C                            
0000139C                            PlaySound_Special:
0000139C 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000013A0 4E75                       		rts	
000013A2                            ; End of function PlaySound_Special
000013A2                            
000013A2                            ; ===========================================================================
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            ; Unused sound/music subroutine
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            
000013A2                            PlaySound_Unk:
000013A2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000013A6 4E75                       		rts	
000013A8                            
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            ; Subroutine to	pause the game
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            
000013A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013A8                            
000013A8                            
000013A8                            PauseGame:				; XREF: Level_MainLoop; et al
000013A8 4E71                       		nop	
000013AA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000013AE 6700                       		beq.s	Unpause		; if not, branch
000013B0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000013B4 6600                       		bne.s	loc_13BE	; if yes, branch
000013B6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000013BC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000013BE                            
000013BE                            loc_13BE:
000013BE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000013C4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000013CA                            
000013CA                            loc_13CA:
000013CA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000013D0 6100 0000                  		bsr.w	DelayProgram
000013D4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000013D8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000013DA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000013E0 6700                       		beq.s	Pause_ChkBC	; if not, branch
000013E2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000013E8 4E71                       		nop	
000013EA 6000                       		bra.s	loc_1404
000013EC                            ; ===========================================================================
000013EC                            
000013EC                            Pause_ChkBC:				; XREF: PauseGame
000013EC 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000013F2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013F4 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000013FA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013FC                            
000013FC                            Pause_ChkStart:				; XREF: PauseGame
000013FC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001402 67C6                       		beq.s	loc_13CA	; if not, branch
00001404                            
00001404                            loc_1404:				; XREF: PauseGame
00001404 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000140A                            
0000140A                            Unpause:				; XREF: PauseGame
0000140A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001410                            
00001410                            Pause_DoNothing:			; XREF: PauseGame
00001410 4E75                       		rts	
00001412                            ; ===========================================================================
00001412                            
00001412                            Pause_SlowMo:				; XREF: PauseGame
00001412 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001418 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000141E 4E75                       		rts	
00001420                            ; End of function PauseGame
00001420                            
00001420                            ; ---------------------------------------------------------------------------
00001420                            ; Subroutine to	display	patterns via the VDP
00001420                            ; ---------------------------------------------------------------------------
00001420                            
00001420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001420                            
00001420                            
00001420                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001420 4DF9 00C0 0000             		lea	($C00000).l,a6
00001426 283C 0080 0000             		move.l	#$800000,d4
0000142C                            
0000142C                            loc_142C:
0000142C 2D40 0004                  		move.l	d0,4(a6)
00001430 3601                       		move.w	d1,d3
00001432                            
00001432                            loc_1432:
00001432 3C99                       		move.w	(a1)+,(a6)
00001434 51CB FFFC                  		dbf	d3,loc_1432
00001438 D084                       		add.l	d4,d0
0000143A 51CA FFF0                  		dbf	d2,loc_142C
0000143E 4E75                       		rts	
00001440                            ; End of function ShowVDPGraphics
00001440                            
00001440                            ; ---------------------------------------------------------------------------
00001440                            ; Nemesis decompression	algorithm
00001440                            ; ---------------------------------------------------------------------------
00001440                            
00001440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001440                            
00001440                            
00001440                            NemDec:
00001440 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001444 47F9 0000 0000             		lea	(loc_1502).l,a3
0000144A 49F9 00C0 0000             		lea	($C00000).l,a4
00001450 6000                       		bra.s	loc_145C
00001452                            ; ===========================================================================
00001452 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001456 47F9 0000 0000             		lea	(loc_1518).l,a3
0000145C                            
0000145C                            loc_145C:				; XREF: NemDec
0000145C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001460 3418                       		move.w	(a0)+,d2
00001462 E34A                       		lsl.w	#1,d2
00001464 6400                       		bcc.s	loc_146A
00001466 D6FC 000A                  		adda.w	#$A,a3
0000146A                            
0000146A                            loc_146A:
0000146A E54A                       		lsl.w	#2,d2
0000146C 3A42                       		movea.w	d2,a5
0000146E 7608                       		moveq	#8,d3
00001470 7400                       		moveq	#0,d2
00001472 7800                       		moveq	#0,d4
00001474 6100 0000                  		bsr.w	NemDec4
00001478 1A18                       		move.b	(a0)+,d5
0000147A E145                       		asl.w	#8,d5
0000147C 1A18                       		move.b	(a0)+,d5
0000147E 3C3C 0010                  		move.w	#$10,d6
00001482 6100                       		bsr.s	NemDec2
00001484 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001488 4E75                       		rts	
0000148A                            ; End of function NemDec
0000148A                            
0000148A                            
0000148A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000148A                            
0000148A                            
0000148A                            NemDec2:				; XREF: NemDec
0000148A 3E06                       		move.w	d6,d7
0000148C 5147                       		subq.w	#8,d7
0000148E 3205                       		move.w	d5,d1
00001490 EE69                       		lsr.w	d7,d1
00001492 0C01 00FC                  		cmpi.b	#-4,d1
00001496 6400                       		bcc.s	loc_14D6
00001498 0241 00FF                  		andi.w	#$FF,d1
0000149C D241                       		add.w	d1,d1
0000149E 1031 1000                  		move.b	(a1,d1.w),d0
000014A2 4880                       		ext.w	d0
000014A4 9C40                       		sub.w	d0,d6
000014A6 0C46 0009                  		cmpi.w	#9,d6
000014AA 6400                       		bcc.s	loc_14B2
000014AC 5046                       		addq.w	#8,d6
000014AE E145                       		asl.w	#8,d5
000014B0 1A18                       		move.b	(a0)+,d5
000014B2                            
000014B2                            loc_14B2:
000014B2 1231 1001                  		move.b	1(a1,d1.w),d1
000014B6 3001                       		move.w	d1,d0
000014B8 0241 000F                  		andi.w	#$F,d1
000014BC 0240 00F0                  		andi.w	#$F0,d0
000014C0                            
000014C0                            loc_14C0:				; XREF: NemDec3
000014C0 E848                       		lsr.w	#4,d0
000014C2                            
000014C2                            loc_14C2:				; XREF: NemDec3
000014C2 E98C                       		lsl.l	#4,d4
000014C4 8801                       		or.b	d1,d4
000014C6 5343                       		subq.w	#1,d3
000014C8 6600                       		bne.s	loc_14D0
000014CA 4ED3                       		jmp	(a3)
000014CC                            ; End of function NemDec2
000014CC                            
000014CC                            
000014CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014CC                            
000014CC                            
000014CC                            NemDec3:				; XREF: loc_1502
000014CC 7800                       		moveq	#0,d4
000014CE 7608                       		moveq	#8,d3
000014D0                            
000014D0                            loc_14D0:				; XREF: NemDec2
000014D0 51C8 FFF0                  		dbf	d0,loc_14C2
000014D4 60B4                       		bra.s	NemDec2
000014D6                            ; ===========================================================================
000014D6                            
000014D6                            loc_14D6:				; XREF: NemDec2
000014D6 5D46                       		subq.w	#6,d6
000014D8 0C46 0009                  		cmpi.w	#9,d6
000014DC 6400                       		bcc.s	loc_14E4
000014DE 5046                       		addq.w	#8,d6
000014E0 E145                       		asl.w	#8,d5
000014E2 1A18                       		move.b	(a0)+,d5
000014E4                            
000014E4                            loc_14E4:				; XREF: NemDec3
000014E4 5F46                       		subq.w	#7,d6
000014E6 3205                       		move.w	d5,d1
000014E8 EC69                       		lsr.w	d6,d1
000014EA 3001                       		move.w	d1,d0
000014EC 0241 000F                  		andi.w	#$F,d1
000014F0 0240 0070                  		andi.w	#$70,d0
000014F4 0C46 0009                  		cmpi.w	#9,d6
000014F8 64C6                       		bcc.s	loc_14C0
000014FA 5046                       		addq.w	#8,d6
000014FC E145                       		asl.w	#8,d5
000014FE 1A18                       		move.b	(a0)+,d5
00001500 60BE                       		bra.s	loc_14C0
00001502                            ; End of function NemDec3
00001502                            
00001502                            ; ===========================================================================
00001502                            
00001502                            loc_1502:				; XREF: NemDec
00001502 2884                       		move.l	d4,(a4)
00001504 534D                       		subq.w	#1,a5
00001506 380D                       		move.w	a5,d4
00001508 66C2                       		bne.s	NemDec3
0000150A 4E75                       		rts	
0000150C                            ; ===========================================================================
0000150C B982                       		eor.l	d4,d2
0000150E 2882                       		move.l	d2,(a4)
00001510 534D                       		subq.w	#1,a5
00001512 380D                       		move.w	a5,d4
00001514 66B6                       		bne.s	NemDec3
00001516 4E75                       		rts	
00001518                            ; ===========================================================================
00001518                            
00001518                            loc_1518:				; XREF: NemDec
00001518 28C4                       		move.l	d4,(a4)+
0000151A 534D                       		subq.w	#1,a5
0000151C 380D                       		move.w	a5,d4
0000151E 66AC                       		bne.s	NemDec3
00001520 4E75                       		rts	
00001522                            ; ===========================================================================
00001522 B982                       		eor.l	d4,d2
00001524 28C2                       		move.l	d2,(a4)+
00001526 534D                       		subq.w	#1,a5
00001528 380D                       		move.w	a5,d4
0000152A 66A0                       		bne.s	NemDec3
0000152C 4E75                       		rts	
0000152E                            
0000152E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000152E                            
0000152E                            
0000152E                            NemDec4:				; XREF: NemDec
0000152E 1018                       		move.b	(a0)+,d0
00001530                            
00001530                            loc_1530:
00001530 0C00 00FF                  		cmpi.b	#-1,d0
00001534 6600                       		bne.s	loc_1538
00001536 4E75                       		rts	
00001538                            ; ===========================================================================
00001538                            
00001538                            loc_1538:				; XREF: NemDec4
00001538 3E00                       		move.w	d0,d7
0000153A                            
0000153A                            loc_153A:
0000153A 1018                       		move.b	(a0)+,d0
0000153C 0C00 0080                  		cmpi.b	#$80,d0
00001540 64EE                       		bcc.s	loc_1530
00001542 1200                       		move.b	d0,d1
00001544 0247 000F                  		andi.w	#$F,d7
00001548 0241 0070                  		andi.w	#$70,d1
0000154C 8E41                       		or.w	d1,d7
0000154E 0240 000F                  		andi.w	#$F,d0
00001552 1200                       		move.b	d0,d1
00001554 E149                       		lsl.w	#8,d1
00001556 8E41                       		or.w	d1,d7
00001558 7208                       		moveq	#8,d1
0000155A 9240                       		sub.w	d0,d1
0000155C 6600                       		bne.s	loc_1568
0000155E 1018                       		move.b	(a0)+,d0
00001560 D040                       		add.w	d0,d0
00001562 3387 0000                  		move.w	d7,(a1,d0.w)
00001566 60D2                       		bra.s	loc_153A
00001568                            ; ===========================================================================
00001568                            
00001568                            loc_1568:				; XREF: NemDec4
00001568 1018                       		move.b	(a0)+,d0
0000156A E368                       		lsl.w	d1,d0
0000156C D040                       		add.w	d0,d0
0000156E 7A01                       		moveq	#1,d5
00001570 E36D                       		lsl.w	d1,d5
00001572 5345                       		subq.w	#1,d5
00001574                            
00001574                            loc_1574:
00001574 3387 0000                  		move.w	d7,(a1,d0.w)
00001578 5440                       		addq.w	#2,d0
0000157A 51CD FFF8                  		dbf	d5,loc_1574
0000157E 60BA                       		bra.s	loc_153A
00001580                            ; End of function NemDec4
00001580                            
00001580                            ; ---------------------------------------------------------------------------
00001580                            ; Subroutine to	load pattern load cues
00001580                            ; ---------------------------------------------------------------------------
00001580                            
00001580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001580                            
00001580                            
00001580                            LoadPLC:
00001580 48E7 0060                  		movem.l	a1-a2,-(sp)
00001584 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000158A D040                       		add.w	d0,d0
0000158C 3031 0000                  		move.w	(a1,d0.w),d0
00001590 43F1 0000                  		lea	(a1,d0.w),a1
00001594 45F8 F680                  		lea	($FFFFF680).w,a2
00001598                            
00001598                            loc_1598:
00001598 4A92                       		tst.l	(a2)
0000159A 6700                       		beq.s	loc_15A0
0000159C 5C4A                       		addq.w	#6,a2
0000159E 60F8                       		bra.s	loc_1598
000015A0                            ; ===========================================================================
000015A0                            
000015A0                            loc_15A0:				; XREF: LoadPLC
000015A0 3019                       		move.w	(a1)+,d0
000015A2 6B00                       		bmi.s	loc_15AC
000015A4                            
000015A4                            loc_15A4:
000015A4 24D9                       		move.l	(a1)+,(a2)+
000015A6 34D9                       		move.w	(a1)+,(a2)+
000015A8 51C8 FFFA                  		dbf	d0,loc_15A4
000015AC                            
000015AC                            loc_15AC:
000015AC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015B0 4E75                       		rts	
000015B2                            ; End of function LoadPLC
000015B2                            
000015B2                            
000015B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B2                            
000015B2                            
000015B2                            LoadPLC2:
000015B2 48E7 0060                  		movem.l	a1-a2,-(sp)
000015B6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015BC D040                       		add.w	d0,d0
000015BE 3031 0000                  		move.w	(a1,d0.w),d0
000015C2 43F1 0000                  		lea	(a1,d0.w),a1
000015C6 6100                       		bsr.s	ClearPLC
000015C8 45F8 F680                  		lea	($FFFFF680).w,a2
000015CC 3019                       		move.w	(a1)+,d0
000015CE 6B00                       		bmi.s	loc_15D8
000015D0                            
000015D0                            loc_15D0:
000015D0 24D9                       		move.l	(a1)+,(a2)+
000015D2 34D9                       		move.w	(a1)+,(a2)+
000015D4 51C8 FFFA                  		dbf	d0,loc_15D0
000015D8                            
000015D8                            loc_15D8:
000015D8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015DC 4E75                       		rts	
000015DE                            ; End of function LoadPLC2
000015DE                            
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            ; Subroutine to	clear the pattern load cues
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            
000015DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DE                            
000015DE                            
000015DE                            ClearPLC:				; XREF: LoadPLC2
000015DE 45F8 F680                  		lea	($FFFFF680).w,a2
000015E2 701F                       		moveq	#$1F,d0
000015E4                            
000015E4                            ClearPLC_Loop:
000015E4 429A                       		clr.l	(a2)+
000015E6 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015EA 4E75                       		rts	
000015EC                            ; End of function ClearPLC
000015EC                            
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            ; Subroutine to	use graphics listed in a pattern load cue
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            
000015EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015EC                            
000015EC                            
000015EC                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015EC 4AB8 F680                  		tst.l	($FFFFF680).w
000015F0 6700                       		beq.s	locret_1640
000015F2 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015F6 6600                       		bne.s	locret_1640
000015F8 2078 F680                  		movea.l	($FFFFF680).w,a0
000015FC 47F9 0000 1502             		lea	(loc_1502).l,a3
00001602 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001606 3418                       		move.w	(a0)+,d2
00001608 6A00                       		bpl.s	loc_160E
0000160A D6FC 000A                  		adda.w	#$A,a3
0000160E                            
0000160E                            loc_160E:
0000160E 0242 7FFF                  		andi.w	#$7FFF,d2
00001612 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001616 6100 FF16                  		bsr.w	NemDec4
0000161A 1A18                       		move.b	(a0)+,d5
0000161C E145                       		asl.w	#8,d5
0000161E 1A18                       		move.b	(a0)+,d5
00001620 7C10                       		moveq	#$10,d6
00001622 7000                       		moveq	#0,d0
00001624 21C8 F680                  		move.l	a0,($FFFFF680).w
00001628 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000162C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001630 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001634 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001638 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000163C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001640                            
00001640                            locret_1640:
00001640 4E75                       		rts	
00001642                            ; End of function RunPLC_RAM
00001642                            
00001642                            
00001642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001642                            
00001642                            
00001642                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001642 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001646 6700 0000                  		beq.w	locret_16DA
0000164A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001650 7000                       		moveq	#0,d0
00001652 3038 F684                  		move.w	($FFFFF684).w,d0
00001656 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000165C 6000                       		bra.s	loc_1676
0000165E                            ; End of function sub_1642
0000165E                            
0000165E                            
0000165E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000165E                            
0000165E                            
0000165E                            sub_165E:				; XREF: Demo_Time
0000165E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001662 6700                       		beq.s	locret_16DA
00001664 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000166A 7000                       		moveq	#0,d0
0000166C 3038 F684                  		move.w	($FFFFF684).w,d0
00001670 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001676                            
00001676                            loc_1676:				; XREF: sub_1642
00001676 49F9 00C0 0004             		lea	($C00004).l,a4
0000167C E588                       		lsl.l	#2,d0
0000167E E448                       		lsr.w	#2,d0
00001680 0040 4000                  		ori.w	#$4000,d0
00001684 4840                       		swap	d0
00001686 2880                       		move.l	d0,(a4)
00001688 594C                       		subq.w	#4,a4
0000168A 2078 F680                  		movea.l	($FFFFF680).w,a0
0000168E 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001692 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001696 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000169A 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000169E 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016A2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016A6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016AA                            
000016AA                            loc_16AA:				; XREF: sub_165E
000016AA 3A7C 0008                  		movea.w	#8,a5
000016AE 6100 FE1C                  		bsr.w	NemDec3
000016B2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000016B6 6700                       		beq.s	loc_16DC
000016B8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016BC 66EC                       		bne.s	loc_16AA
000016BE 21C8 F680                  		move.l	a0,($FFFFF680).w
000016C2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016C6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016CA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016CE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016D2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016D6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016DA                            
000016DA                            locret_16DA:				; XREF: sub_1642
000016DA 4E75                       		rts	
000016DC                            ; ===========================================================================
000016DC                            
000016DC                            loc_16DC:				; XREF: sub_165E
000016DC 41F8 F680                  		lea	($FFFFF680).w,a0
000016E0 7015                       		moveq	#$15,d0
000016E2                            
000016E2                            loc_16E2:				; XREF: sub_165E
000016E2 20E8 0006                  		move.l	6(a0),(a0)+
000016E6 51C8 FFFA                  		dbf	d0,loc_16E2
000016EA 4E75                       		rts	
000016EC                            ; End of function sub_165E
000016EC                            
000016EC                            ; ---------------------------------------------------------------------------
000016EC                            ; Subroutine to	execute	the pattern load cue
000016EC                            ; ---------------------------------------------------------------------------
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            RunPLC_ROM:
000016EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016F2 D040                       		add.w	d0,d0
000016F4 3031 0000                  		move.w	(a1,d0.w),d0
000016F8 43F1 0000                  		lea	(a1,d0.w),a1
000016FC 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000016FE                            
000016FE                            RunPLC_Loop:
000016FE 2059                       		movea.l	(a1)+,a0	; get art pointer
00001700 7000                       		moveq	#0,d0
00001702 3019                       		move.w	(a1)+,d0	; get VRAM address
00001704 E588                       		lsl.l	#2,d0		; divide address by $20
00001706 E448                       		lsr.w	#2,d0
00001708 0040 4000                  		ori.w	#$4000,d0
0000170C 4840                       		swap	d0
0000170E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001714 6100 FD2A                  		bsr.w	NemDec		; decompress
00001718 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000171C 4E75                       		rts	
0000171E                            ; End of function RunPLC_ROM
0000171E                            
0000171E                            ; ---------------------------------------------------------------------------
0000171E                            ; Enigma decompression algorithm
0000171E                            ; ---------------------------------------------------------------------------
0000171E                            
0000171E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171E                            
0000171E                            
0000171E                            EniDec:
0000171E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001722 3640                       		movea.w	d0,a3
00001724 1018                       		move.b	(a0)+,d0
00001726 4880                       		ext.w	d0
00001728 3A40                       		movea.w	d0,a5
0000172A 1818                       		move.b	(a0)+,d4
0000172C E70C                       		lsl.b	#3,d4
0000172E 3458                       		movea.w	(a0)+,a2
00001730 D4CB                       		adda.w	a3,a2
00001732 3858                       		movea.w	(a0)+,a4
00001734 D8CB                       		adda.w	a3,a4
00001736 1A18                       		move.b	(a0)+,d5
00001738 E145                       		asl.w	#8,d5
0000173A 1A18                       		move.b	(a0)+,d5
0000173C 7C10                       		moveq	#$10,d6
0000173E                            
0000173E                            loc_173E:				; XREF: loc_1768
0000173E 7007                       		moveq	#7,d0
00001740 3E06                       		move.w	d6,d7
00001742 9E40                       		sub.w	d0,d7
00001744 3205                       		move.w	d5,d1
00001746 EE69                       		lsr.w	d7,d1
00001748 0241 007F                  		andi.w	#$7F,d1
0000174C 3401                       		move.w	d1,d2
0000174E 0C41 0040                  		cmpi.w	#$40,d1
00001752 6400                       		bcc.s	loc_1758
00001754 7006                       		moveq	#6,d0
00001756 E24A                       		lsr.w	#1,d2
00001758                            
00001758                            loc_1758:
00001758 6100 0000                  		bsr.w	sub_188C
0000175C 0242 000F                  		andi.w	#$F,d2
00001760 E849                       		lsr.w	#4,d1
00001762 D241                       		add.w	d1,d1
00001764 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001768                            ; End of function EniDec
00001768                            
00001768                            ; ===========================================================================
00001768                            
00001768                            loc_1768:				; XREF: loc_17B4
00001768 32CA                       		move.w	a2,(a1)+
0000176A 524A                       		addq.w	#1,a2
0000176C 51CA FFFA                  		dbf	d2,loc_1768
00001770 60CC                       		bra.s	loc_173E
00001772                            ; ===========================================================================
00001772                            
00001772                            loc_1772:				; XREF: loc_17B4
00001772 32CC                       		move.w	a4,(a1)+
00001774 51CA FFFC                  		dbf	d2,loc_1772
00001778 60C4                       		bra.s	loc_173E
0000177A                            ; ===========================================================================
0000177A                            
0000177A                            loc_177A:				; XREF: loc_17B4
0000177A 6100 0000                  		bsr.w	loc_17DC
0000177E                            
0000177E                            loc_177E:
0000177E 32C1                       		move.w	d1,(a1)+
00001780 51CA FFFC                  		dbf	d2,loc_177E
00001784 60B8                       		bra.s	loc_173E
00001786                            ; ===========================================================================
00001786                            
00001786                            loc_1786:				; XREF: loc_17B4
00001786 6100 0000                  		bsr.w	loc_17DC
0000178A                            
0000178A                            loc_178A:
0000178A 32C1                       		move.w	d1,(a1)+
0000178C 5241                       		addq.w	#1,d1
0000178E 51CA FFFA                  		dbf	d2,loc_178A
00001792 60AA                       		bra.s	loc_173E
00001794                            ; ===========================================================================
00001794                            
00001794                            loc_1794:				; XREF: loc_17B4
00001794 6100 0000                  		bsr.w	loc_17DC
00001798                            
00001798                            loc_1798:
00001798 32C1                       		move.w	d1,(a1)+
0000179A 5341                       		subq.w	#1,d1
0000179C 51CA FFFA                  		dbf	d2,loc_1798
000017A0 609C                       		bra.s	loc_173E
000017A2                            ; ===========================================================================
000017A2                            
000017A2                            loc_17A2:				; XREF: loc_17B4
000017A2 0C42 000F                  		cmpi.w	#$F,d2
000017A6 6700                       		beq.s	loc_17C4
000017A8                            
000017A8                            loc_17A8:
000017A8 6100 0000                  		bsr.w	loc_17DC
000017AC 32C1                       		move.w	d1,(a1)+
000017AE 51CA FFF8                  		dbf	d2,loc_17A8
000017B2 608A                       		bra.s	loc_173E
000017B4                            ; ===========================================================================
000017B4                            
000017B4                            loc_17B4:				; XREF: EniDec
000017B4 60B2                       		bra.s	loc_1768
000017B6                            ; ===========================================================================
000017B6 60B0                       		bra.s	loc_1768
000017B8                            ; ===========================================================================
000017B8 60B8                       		bra.s	loc_1772
000017BA                            ; ===========================================================================
000017BA 60B6                       		bra.s	loc_1772
000017BC                            ; ===========================================================================
000017BC 60BC                       		bra.s	loc_177A
000017BE                            ; ===========================================================================
000017BE 60C6                       		bra.s	loc_1786
000017C0                            ; ===========================================================================
000017C0 60D2                       		bra.s	loc_1794
000017C2                            ; ===========================================================================
000017C2 60DE                       		bra.s	loc_17A2
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_17C4:				; XREF: loc_17A2
000017C4 5348                       		subq.w	#1,a0
000017C6 0C46 0010                  		cmpi.w	#$10,d6
000017CA 6600                       		bne.s	loc_17CE
000017CC 5348                       		subq.w	#1,a0
000017CE                            
000017CE                            loc_17CE:
000017CE 3008                       		move.w	a0,d0
000017D0 E248                       		lsr.w	#1,d0
000017D2 6400                       		bcc.s	loc_17D6
000017D4 5248                       		addq.w	#1,a0
000017D6                            
000017D6                            loc_17D6:
000017D6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017DA 4E75                       		rts	
000017DC                            ; ===========================================================================
000017DC                            
000017DC                            loc_17DC:				; XREF: loc_17A2
000017DC 360B                       		move.w	a3,d3
000017DE 1204                       		move.b	d4,d1
000017E0 D201                       		add.b	d1,d1
000017E2 6400                       		bcc.s	loc_17EE
000017E4 5346                       		subq.w	#1,d6
000017E6 0D05                       		btst	d6,d5
000017E8 6700                       		beq.s	loc_17EE
000017EA 0043 8000                  		ori.w	#-$8000,d3
000017EE                            
000017EE                            loc_17EE:
000017EE D201                       		add.b	d1,d1
000017F0 6400                       		bcc.s	loc_17FC
000017F2 5346                       		subq.w	#1,d6
000017F4 0D05                       		btst	d6,d5
000017F6 6700                       		beq.s	loc_17FC
000017F8 0643 4000                  		addi.w	#$4000,d3
000017FC                            
000017FC                            loc_17FC:
000017FC D201                       		add.b	d1,d1
000017FE 6400                       		bcc.s	loc_180A
00001800 5346                       		subq.w	#1,d6
00001802 0D05                       		btst	d6,d5
00001804 6700                       		beq.s	loc_180A
00001806 0643 2000                  		addi.w	#$2000,d3
0000180A                            
0000180A                            loc_180A:
0000180A D201                       		add.b	d1,d1
0000180C 6400                       		bcc.s	loc_1818
0000180E 5346                       		subq.w	#1,d6
00001810 0D05                       		btst	d6,d5
00001812 6700                       		beq.s	loc_1818
00001814 0043 1000                  		ori.w	#$1000,d3
00001818                            
00001818                            loc_1818:
00001818 D201                       		add.b	d1,d1
0000181A 6400                       		bcc.s	loc_1826
0000181C 5346                       		subq.w	#1,d6
0000181E 0D05                       		btst	d6,d5
00001820 6700                       		beq.s	loc_1826
00001822 0043 0800                  		ori.w	#$800,d3
00001826                            
00001826                            loc_1826:
00001826 3205                       		move.w	d5,d1
00001828 3E06                       		move.w	d6,d7
0000182A 9E4D                       		sub.w	a5,d7
0000182C 6400                       		bcc.s	loc_1856
0000182E 3C07                       		move.w	d7,d6
00001830 0646 0010                  		addi.w	#$10,d6
00001834 4447                       		neg.w	d7
00001836 EF69                       		lsl.w	d7,d1
00001838 1A10                       		move.b	(a0),d5
0000183A EF3D                       		rol.b	d7,d5
0000183C DE47                       		add.w	d7,d7
0000183E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001842 D245                       		add.w	d5,d1
00001844                            
00001844                            loc_1844:				; XREF: loc_1868
00001844 300D                       		move.w	a5,d0
00001846 D040                       		add.w	d0,d0
00001848 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000184C D243                       		add.w	d3,d1
0000184E 1A18                       		move.b	(a0)+,d5
00001850 E14D                       		lsl.w	#8,d5
00001852 1A18                       		move.b	(a0)+,d5
00001854 4E75                       		rts	
00001856                            ; ===========================================================================
00001856                            
00001856                            loc_1856:				; XREF: loc_1826
00001856 6700                       		beq.s	loc_1868
00001858 EE69                       		lsr.w	d7,d1
0000185A 300D                       		move.w	a5,d0
0000185C D040                       		add.w	d0,d0
0000185E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001862 D243                       		add.w	d3,d1
00001864 300D                       		move.w	a5,d0
00001866 6000                       		bra.s	sub_188C
00001868                            ; ===========================================================================
00001868                            
00001868                            loc_1868:				; XREF: loc_1856
00001868 7C10                       		moveq	#$10,d6
0000186A                            
0000186A                            loc_186A:
0000186A 60D8                       		bra.s	loc_1844
0000186C                            ; ===========================================================================
0000186C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001882 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000188C                            
0000188C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188C                            
0000188C                            
0000188C                            sub_188C:				; XREF: EniDec
0000188C 9C40                       		sub.w	d0,d6
0000188E 0C46 0009                  		cmpi.w	#9,d6
00001892 6400                       		bcc.s	locret_189A
00001894 5046                       		addq.w	#8,d6
00001896 E145                       		asl.w	#8,d5
00001898 1A18                       		move.b	(a0)+,d5
0000189A                            
0000189A                            locret_189A:
0000189A 4E75                       		rts	
0000189C                            ; End of function sub_188C
0000189C                            
0000189C                            ; ---------------------------------------------------------------------------
0000189C                            ; Kosinski decompression algorithm
0000189C                            ; ---------------------------------------------------------------------------
0000189C                            
0000189C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000189C                            
0000189C                            
0000189C                            KosDec:
0000189C                            
0000189C =FFFFFFFE                  var_2		= -2
0000189C =FFFFFFFF                  var_1		= -1
0000189C                            
0000189C 558F                       		subq.l	#2,sp
0000189E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018A2 1E98                       		move.b	(a0)+,(sp)
000018A4 3A17                       		move.w	(sp),d5
000018A6 780F                       		moveq	#$F,d4
000018A8                            
000018A8                            loc_18A8:
000018A8 E24D                       		lsr.w	#1,d5
000018AA 40C6                       		move	sr,d6
000018AC 51CC 0000                  		dbf	d4,loc_18BA
000018B0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018B4 1E98                       		move.b	(a0)+,(sp)
000018B6 3A17                       		move.w	(sp),d5
000018B8 780F                       		moveq	#$F,d4
000018BA                            
000018BA                            loc_18BA:
000018BA 44C6                       		move	d6,ccr
000018BC 6400                       		bcc.s	loc_18C2
000018BE 12D8                       		move.b	(a0)+,(a1)+
000018C0 60E6                       		bra.s	loc_18A8
000018C2                            ; ===========================================================================
000018C2                            
000018C2                            loc_18C2:				; XREF: KosDec
000018C2 7600                       		moveq	#0,d3
000018C4 E24D                       		lsr.w	#1,d5
000018C6 40C6                       		move	sr,d6
000018C8 51CC 0000                  		dbf	d4,loc_18D6
000018CC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018D0 1E98                       		move.b	(a0)+,(sp)
000018D2 3A17                       		move.w	(sp),d5
000018D4 780F                       		moveq	#$F,d4
000018D6                            
000018D6                            loc_18D6:
000018D6 44C6                       		move	d6,ccr
000018D8 6500                       		bcs.s	loc_1906
000018DA E24D                       		lsr.w	#1,d5
000018DC 51CC 0000                  		dbf	d4,loc_18EA
000018E0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018E4 1E98                       		move.b	(a0)+,(sp)
000018E6 3A17                       		move.w	(sp),d5
000018E8 780F                       		moveq	#$F,d4
000018EA                            
000018EA                            loc_18EA:
000018EA E353                       		roxl.w	#1,d3
000018EC E24D                       		lsr.w	#1,d5
000018EE 51CC 0000                  		dbf	d4,loc_18FC
000018F2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018F6 1E98                       		move.b	(a0)+,(sp)
000018F8 3A17                       		move.w	(sp),d5
000018FA 780F                       		moveq	#$F,d4
000018FC                            
000018FC                            loc_18FC:
000018FC E353                       		roxl.w	#1,d3
000018FE 5243                       		addq.w	#1,d3
00001900 74FF                       		moveq	#-1,d2
00001902 1418                       		move.b	(a0)+,d2
00001904 6000                       		bra.s	loc_191C
00001906                            ; ===========================================================================
00001906                            
00001906                            loc_1906:				; XREF: loc_18C2
00001906 1018                       		move.b	(a0)+,d0
00001908 1218                       		move.b	(a0)+,d1
0000190A 74FF                       		moveq	#-1,d2
0000190C 1401                       		move.b	d1,d2
0000190E EB4A                       		lsl.w	#5,d2
00001910 1400                       		move.b	d0,d2
00001912 0241 0007                  		andi.w	#7,d1
00001916 6700                       		beq.s	loc_1928
00001918 1601                       		move.b	d1,d3
0000191A 5243                       		addq.w	#1,d3
0000191C                            
0000191C                            loc_191C:
0000191C 1031 2000                  		move.b	(a1,d2.w),d0
00001920 12C0                       		move.b	d0,(a1)+
00001922 51CB FFF8                  		dbf	d3,loc_191C
00001926 6080                       		bra.s	loc_18A8
00001928                            ; ===========================================================================
00001928                            
00001928                            loc_1928:				; XREF: loc_1906
00001928 1218                       		move.b	(a0)+,d1
0000192A 6700                       		beq.s	loc_1938
0000192C 0C01 0001                  		cmpi.b	#1,d1
00001930 6700 FF76                  		beq.w	loc_18A8
00001934 1601                       		move.b	d1,d3
00001936 60E4                       		bra.s	loc_191C
00001938                            ; ===========================================================================
00001938                            
00001938                            loc_1938:				; XREF: loc_1928
00001938 548F                       		addq.l	#2,sp
0000193A 4E75                       		rts	
0000193C                            ; End of function KosDec
0000193C                            
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            ; Pallet cycling routine loading subroutine
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            
0000193C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193C                            
0000193C                            
0000193C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000193C 7400                       		moveq	#0,d2
0000193E 7000                       		moveq	#0,d0
00001940 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001944 D040                       		add.w	d0,d0		; multiply by 2
00001946 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000194A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000194E                            ; End of function PalCycle_Load
0000194E                            
0000194E                            ; ===========================================================================
0000194E                            ; ---------------------------------------------------------------------------
0000194E                            ; Pallet cycling routines
0000194E                            ; ---------------------------------------------------------------------------
0000194E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001950 0000                       		dc.w PalCycle_LZ-PalCycle
00001952 0000                       		dc.w PalCycle_MZ-PalCycle
00001954 0000                       		dc.w PalCycle_SLZ-PalCycle
00001956 0000                       		dc.w PalCycle_SYZ-PalCycle
00001958 0000                       		dc.w PalCycle_SBZ-PalCycle
0000195A 0000                       		dc.w PalCycle_GHZ-PalCycle
0000195C                            
0000195C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000195C                            
0000195C                            
0000195C                            PalCycle_Title:				; XREF: TitleScreen
0000195C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001962 6000                       		bra.s	loc_196A
00001964                            ; ===========================================================================
00001964                            
00001964                            PalCycle_GHZ:				; XREF: PalCycle
00001964 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000196A                            
0000196A                            loc_196A:				; XREF: PalCycle_Title
0000196A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000196E 6A00                       		bpl.s	locret_1990
00001970 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001976 3038 F632                  		move.w	($FFFFF632).w,d0
0000197A 5278 F632                  		addq.w	#1,($FFFFF632).w
0000197E 0240 0003                  		andi.w	#3,d0
00001982 E748                       		lsl.w	#3,d0
00001984 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001988 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000198C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001990                            
00001990                            locret_1990:
00001990 4E75                       		rts	
00001992                            ; End of function PalCycle_Title
00001992                            
00001992                            
00001992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001992                            
00001992                            
00001992                            PalCycle_LZ:				; XREF: PalCycle
00001992 5378 F634                  		subq.w	#1,($FFFFF634).w
00001996 6A00                       		bpl.s	loc_19D8
00001998 31FC 0002 F634             		move.w	#2,($FFFFF634).w
0000199E 3038 F632                  		move.w	($FFFFF632).w,d0
000019A2 5278 F632                  		addq.w	#1,($FFFFF632).w
000019A6 0240 0003                  		andi.w	#3,d0
000019AA E748                       		lsl.w	#3,d0
000019AC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019B2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000019B8 6600                       		bne.s	loc_19C0
000019BA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000019C0                            
000019C0                            loc_19C0:
000019C0 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019C4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019C8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019CC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000019D0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019D4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019D8                            
000019D8                            loc_19D8:
000019D8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000019DC 0240 0007                  		andi.w	#7,d0
000019E0 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000019E4 6700                       		beq.s	locret_1A3A
000019E6 7201                       		moveq	#1,d1
000019E8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000019EC 6700                       		beq.s	loc_19F0
000019EE 4441                       		neg.w	d1
000019F0                            
000019F0                            loc_19F0:
000019F0 3038 F650                  		move.w	($FFFFF650).w,d0
000019F4 0240 0003                  		andi.w	#3,d0
000019F8 D041                       		add.w	d1,d0
000019FA 0C40 0003                  		cmpi.w	#3,d0
000019FE 6500                       		bcs.s	loc_1A0A
00001A00 3200                       		move.w	d0,d1
00001A02 7000                       		moveq	#0,d0
00001A04 4A41                       		tst.w	d1
00001A06 6A00                       		bpl.s	loc_1A0A
00001A08 7002                       		moveq	#2,d0
00001A0A                            
00001A0A                            loc_1A0A:
00001A0A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A0E D040                       		add.w	d0,d0
00001A10 3200                       		move.w	d0,d1
00001A12 D040                       		add.w	d0,d0
00001A14 D041                       		add.w	d1,d0
00001A16 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A1C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A24 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A28 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A2E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001A32 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A36 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A3A                            
00001A3A                            locret_1A3A:
00001A3A 4E75                       		rts	
00001A3C                            ; End of function PalCycle_LZ
00001A3C                            
00001A3C                            ; ===========================================================================
00001A3C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A44                            ; ===========================================================================
00001A44                            
00001A44                            PalCycle_MZ:				; XREF: PalCycle
00001A44 4E75                       		rts	
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            
00001A46                            PalCycle_SLZ:				; XREF: PalCycle
00001A46 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A4A 6A00                       		bpl.s	locret_1A80
00001A4C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A52 3038 F632                  		move.w	($FFFFF632).w,d0
00001A56 5240                       		addq.w	#1,d0
00001A58 0C40 0006                  		cmpi.w	#6,d0
00001A5C 6500                       		bcs.s	loc_1A60
00001A5E 7000                       		moveq	#0,d0
00001A60                            
00001A60                            loc_1A60:
00001A60 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A64 3200                       		move.w	d0,d1
00001A66 D241                       		add.w	d1,d1
00001A68 D041                       		add.w	d1,d0
00001A6A D040                       		add.w	d0,d0
00001A6C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001A72 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A76 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001A7A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001A80                            
00001A80                            locret_1A80:
00001A80 4E75                       		rts	
00001A82                            ; End of function PalCycle_SLZ
00001A82                            
00001A82                            
00001A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A82                            
00001A82                            
00001A82                            PalCycle_SYZ:				; XREF: PalCycle
00001A82 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A86 6A00                       		bpl.s	locret_1AC6
00001A88 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A8E 3038 F632                  		move.w	($FFFFF632).w,d0
00001A92 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A96 0240 0003                  		andi.w	#3,d0
00001A9A E548                       		lsl.w	#2,d0
00001A9C 3200                       		move.w	d0,d1
00001A9E D040                       		add.w	d0,d0
00001AA0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001AA6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001AAA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AAE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AB2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001AB8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001ABC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001AC0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001AC6                            
00001AC6                            locret_1AC6:
00001AC6 4E75                       		rts	
00001AC8                            ; End of function PalCycle_SYZ
00001AC8                            
00001AC8                            
00001AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC8                            
00001AC8                            
00001AC8                            PalCycle_SBZ:				; XREF: PalCycle
00001AC8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001ACE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AD2 6700                       		beq.s	loc_1ADA
00001AD4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001ADA                            
00001ADA                            loc_1ADA:
00001ADA 43F8 F650                  		lea	($FFFFF650).w,a1
00001ADE 321A                       		move.w	(a2)+,d1
00001AE0                            
00001AE0                            loc_1AE0:
00001AE0 5311                       		subq.b	#1,(a1)
00001AE2 6B00                       		bmi.s	loc_1AEA
00001AE4 5489                       		addq.l	#2,a1
00001AE6 5C8A                       		addq.l	#6,a2
00001AE8 6000                       		bra.s	loc_1B06
00001AEA                            ; ===========================================================================
00001AEA                            
00001AEA                            loc_1AEA:				; XREF: PalCycle_SBZ
00001AEA 12DA                       		move.b	(a2)+,(a1)+
00001AEC 1011                       		move.b	(a1),d0
00001AEE 5200                       		addq.b	#1,d0
00001AF0 B01A                       		cmp.b	(a2)+,d0
00001AF2 6500                       		bcs.s	loc_1AF6
00001AF4 7000                       		moveq	#0,d0
00001AF6                            
00001AF6                            loc_1AF6:
00001AF6 12C0                       		move.b	d0,(a1)+
00001AF8 0240 000F                  		andi.w	#$F,d0
00001AFC D040                       		add.w	d0,d0
00001AFE 305A                       		movea.w	(a2)+,a0
00001B00 365A                       		movea.w	(a2)+,a3
00001B02 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B06                            
00001B06                            loc_1B06:				; XREF: PalCycle_SBZ
00001B06 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B0A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B0E 6A00                       		bpl.s	locret_1B64
00001B10 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B16 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B1C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B20 6700                       		beq.s	loc_1B2E
00001B22 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B28 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B2E                            
00001B2E                            loc_1B2E:
00001B2E 72FF                       		moveq	#-1,d1
00001B30 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B34 6700                       		beq.s	loc_1B38
00001B36 4441                       		neg.w	d1
00001B38                            
00001B38                            loc_1B38:
00001B38 3038 F632                  		move.w	($FFFFF632).w,d0
00001B3C 0240 0003                  		andi.w	#3,d0
00001B40 D041                       		add.w	d1,d0
00001B42 0C40 0003                  		cmpi.w	#3,d0
00001B46 6500                       		bcs.s	loc_1B52
00001B48 3200                       		move.w	d0,d1
00001B4A 7000                       		moveq	#0,d0
00001B4C 4A41                       		tst.w	d1
00001B4E 6A00                       		bpl.s	loc_1B52
00001B50 7002                       		moveq	#2,d0
00001B52                            
00001B52                            loc_1B52:
00001B52 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B56 D040                       		add.w	d0,d0
00001B58 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B5C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B60 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B64                            
00001B64                            locret_1B64:
00001B64 4E75                       		rts	
00001B66                            ; End of function PalCycle_SBZ
00001B66                            
00001B66                            ; ===========================================================================
00001B66                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001B86                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001BA6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001BC6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001BD8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001BEA                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C52                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001C76                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001C96                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001CA6                            
00001CA6                            Pal_SBZCycList:
00001CA6                            	include "_inc\SBZ pallet script 1.asm"
00001CA6                            ; ---------------------------------------------------------------------------
00001CA6                            ; Scrap Brain Zone 1 pallet cycling script
00001CA6                            ; ---------------------------------------------------------------------------
00001CA6 0008                       	dc.w 8			; number of entries - 1
00001CA8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001CAA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001CAC FB50                       	dc.w $FB50		; RAM address
00001CAE 0D08                       	dc.b $D, 8
00001CB0 0000                       	dc.w Pal_SBZCyc2
00001CB2 FB52                       	dc.w $FB52
00001CB4 0E08                       	dc.b $E, 8
00001CB6 0000                       	dc.w Pal_SBZCyc3
00001CB8 FB6E                       	dc.w $FB6E
00001CBA 0B08                       	dc.b $B, 8
00001CBC 0000                       	dc.w Pal_SBZCyc5
00001CBE FB70                       	dc.w $FB70
00001CC0 0708                       	dc.b 7,	8
00001CC2 0000                       	dc.w Pal_SBZCyc6
00001CC4 FB72                       	dc.w $FB72
00001CC6 1C10                       	dc.b $1C, $10
00001CC8 0000                       	dc.w Pal_SBZCyc7
00001CCA FB7E                       	dc.w $FB7E
00001CCC 0303                       	dc.b 3,	3
00001CCE 0000                       	dc.w Pal_SBZCyc8
00001CD0 FB78                       	dc.w $FB78
00001CD2 0303                       	dc.b 3,	3
00001CD4 0000                       	dc.w Pal_SBZCyc8+2
00001CD6 FB7A                       	dc.w $FB7A
00001CD8 0303                       	dc.b 3,	3
00001CDA 0000                       	dc.w Pal_SBZCyc8+4
00001CDC FB7C                       	dc.w $FB7C
00001CDE                            	even
00001CDE                            	even
00001CDE                            
00001CDE                            Pal_SBZCycList2:
00001CDE                            	include "_inc\SBZ pallet script 2.asm"
00001CDE                            ; ---------------------------------------------------------------------------
00001CDE                            ; Scrap Brain Zone 2 pallet cycling script
00001CDE                            ; ---------------------------------------------------------------------------
00001CDE 0006                       	dc.w 6
00001CE0 0708                       	dc.b 7,	8
00001CE2 0000                       	dc.w Pal_SBZCyc1
00001CE4 FB50                       	dc.w $FB50
00001CE6 0D08                       	dc.b $D, 8
00001CE8 0000                       	dc.w Pal_SBZCyc2
00001CEA FB52                       	dc.w $FB52
00001CEC 0908                       	dc.b 9,	8
00001CEE 0000                       	dc.w Pal_SBZCyc9
00001CF0 FB70                       	dc.w $FB70
00001CF2 0708                       	dc.b 7,	8
00001CF4 0000                       	dc.w Pal_SBZCyc6
00001CF6 FB72                       	dc.w $FB72
00001CF8 0303                       	dc.b 3,	3
00001CFA 0000                       	dc.w Pal_SBZCyc8
00001CFC FB78                       	dc.w $FB78
00001CFE 0303                       	dc.b 3,	3
00001D00 0000                       	dc.w Pal_SBZCyc8+2
00001D02 FB7A                       	dc.w $FB7A
00001D04 0303                       	dc.b 3,	3
00001D06 0000                       	dc.w Pal_SBZCyc8+4
00001D08 FB7C                       	dc.w $FB7C
00001D0A                            	even
00001D0A                            	even
00001D0A                            
00001D0A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D1A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D2A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D3A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D46                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D56                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D66                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001D86                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001D90                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DA0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001DAC                            ; ---------------------------------------------------------------------------
00001DAC                            ; Subroutine to	fade out and fade in
00001DAC                            ; ---------------------------------------------------------------------------
00001DAC                            
00001DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DAC                            
00001DAC                            
00001DAC                            Pal_FadeTo:
00001DAC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001DB2                            
00001DB2                            Pal_FadeTo2:
00001DB2 7000                       		moveq	#0,d0
00001DB4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001DBC D0C0                       		adda.w	d0,a0
00001DBE 7200                       		moveq	#0,d1
00001DC0 1038 F627                  		move.b	($FFFFF627).w,d0
00001DC4                            
00001DC4                            Pal_ToBlack:
00001DC4 30C1                       		move.w	d1,(a0)+
00001DC6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001DCA                            
00001DCA 383C 0015                  		move.w	#$15,d4
00001DCE                            
00001DCE                            loc_1DCE:
00001DCE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001DD4 6100 0000                  		bsr.w	DelayProgram
00001DD8 6100                       		bsr.s	Pal_FadeIn
00001DDA 6100 F810                  		bsr.w	RunPLC_RAM
00001DDE 51CC FFEE                  		dbf	d4,loc_1DCE
00001DE2 4E75                       		rts	
00001DE4                            ; End of function Pal_FadeTo
00001DE4                            
00001DE4                            ; ---------------------------------------------------------------------------
00001DE4                            ; Pallet fade-in subroutine
00001DE4                            ; ---------------------------------------------------------------------------
00001DE4                            
00001DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DE4                            
00001DE4                            
00001DE4                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001DE4 7000                       		moveq	#0,d0
00001DE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DEA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001DEE 1038 F626                  		move.b	($FFFFF626).w,d0
00001DF2 D0C0                       		adda.w	d0,a0
00001DF4 D2C0                       		adda.w	d0,a1
00001DF6 1038 F627                  		move.b	($FFFFF627).w,d0
00001DFA                            
00001DFA                            loc_1DFA:
00001DFA 6100                       		bsr.s	Pal_AddColor
00001DFC 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E00 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001E06 6600                       		bne.s	locret_1E24
00001E08 7000                       		moveq	#0,d0
00001E0A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E0E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001E12 1038 F626                  		move.b	($FFFFF626).w,d0
00001E16 D0C0                       		adda.w	d0,a0
00001E18 D2C0                       		adda.w	d0,a1
00001E1A 1038 F627                  		move.b	($FFFFF627).w,d0
00001E1E                            
00001E1E                            loc_1E1E:
00001E1E 6100                       		bsr.s	Pal_AddColor
00001E20 51C8 FFFC                  		dbf	d0,loc_1E1E
00001E24                            
00001E24                            locret_1E24:
00001E24 4E75                       		rts	
00001E26                            ; End of function Pal_FadeIn
00001E26                            
00001E26                            
00001E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E26                            
00001E26                            
00001E26                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E26 3419                       		move.w	(a1)+,d2
00001E28 3610                       		move.w	(a0),d3
00001E2A B642                       		cmp.w	d2,d3
00001E2C 6700                       		beq.s	loc_1E4E
00001E2E 3203                       		move.w	d3,d1
00001E30 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E34 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E36 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E38 30C1                       		move.w	d1,(a0)+	; update pallet
00001E3A 4E75                       		rts	
00001E3C                            ; ===========================================================================
00001E3C                            
00001E3C                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E3C 3203                       		move.w	d3,d1
00001E3E 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E42 B242                       		cmp.w	d2,d1
00001E44 6200                       		bhi.s	Pal_AddRed
00001E46 30C1                       		move.w	d1,(a0)+	; update pallet
00001E48 4E75                       		rts	
00001E4A                            ; ===========================================================================
00001E4A                            
00001E4A                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E4A 5458                       		addq.w	#2,(a0)+	; increase red value
00001E4C 4E75                       		rts	
00001E4E                            ; ===========================================================================
00001E4E                            
00001E4E                            loc_1E4E:				; XREF: Pal_AddColor
00001E4E 5448                       		addq.w	#2,a0
00001E50 4E75                       		rts	
00001E52                            ; End of function Pal_AddColor
00001E52                            
00001E52                            
00001E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E52                            
00001E52                            
00001E52                            Pal_FadeFrom:
00001E52 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E58 383C 0015                  		move.w	#$15,d4
00001E5C                            
00001E5C                            loc_1E5C:
00001E5C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E62 6100 0000                  		bsr.w	DelayProgram
00001E66 6100                       		bsr.s	Pal_FadeOut
00001E68 6100 F782                  		bsr.w	RunPLC_RAM
00001E6C 51CC FFEE                  		dbf	d4,loc_1E5C
00001E70 4E75                       		rts	
00001E72                            ; End of function Pal_FadeFrom
00001E72                            
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            ; Pallet fade-out subroutine
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            
00001E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E72                            
00001E72                            
00001E72                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E72 7000                       		moveq	#0,d0
00001E74 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E78 1038 F626                  		move.b	($FFFFF626).w,d0
00001E7C D0C0                       		adda.w	d0,a0
00001E7E 1038 F627                  		move.b	($FFFFF627).w,d0
00001E82                            
00001E82                            loc_1E82:
00001E82 6100                       		bsr.s	Pal_DecColor
00001E84 51C8 FFFC                  		dbf	d0,loc_1E82
00001E88                            
00001E88 7000                       		moveq	#0,d0
00001E8A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E8E 1038 F626                  		move.b	($FFFFF626).w,d0
00001E92 D0C0                       		adda.w	d0,a0
00001E94 1038 F627                  		move.b	($FFFFF627).w,d0
00001E98                            
00001E98                            loc_1E98:
00001E98 6100                       		bsr.s	Pal_DecColor
00001E9A 51C8 FFFC                  		dbf	d0,loc_1E98
00001E9E 4E75                       		rts	
00001EA0                            ; End of function Pal_FadeOut
00001EA0                            
00001EA0                            
00001EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EA0                            
00001EA0                            
00001EA0                            Pal_DecColor:				; XREF: Pal_FadeOut
00001EA0 3410                       		move.w	(a0),d2
00001EA2 6700                       		beq.s	loc_1ECC
00001EA4 3202                       		move.w	d2,d1
00001EA6 0241 000E                  		andi.w	#$E,d1
00001EAA 6700                       		beq.s	Pal_DecGreen
00001EAC 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EAE 4E75                       		rts	
00001EB0                            ; ===========================================================================
00001EB0                            
00001EB0                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EB0 3202                       		move.w	d2,d1
00001EB2 0241 00E0                  		andi.w	#$E0,d1
00001EB6 6700                       		beq.s	Pal_DecBlue
00001EB8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001EBC 4E75                       		rts	
00001EBE                            ; ===========================================================================
00001EBE                            
00001EBE                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001EBE 3202                       		move.w	d2,d1
00001EC0 0241 0E00                  		andi.w	#$E00,d1
00001EC4 6700                       		beq.s	loc_1ECC
00001EC6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001ECA 4E75                       		rts	
00001ECC                            ; ===========================================================================
00001ECC                            
00001ECC                            loc_1ECC:				; XREF: Pal_DecColor
00001ECC 5448                       		addq.w	#2,a0
00001ECE 4E75                       		rts	
00001ED0                            ; End of function Pal_DecColor
00001ED0                            
00001ED0                            ; ---------------------------------------------------------------------------
00001ED0                            ; Subroutine to	fill the pallet	with white (special stage)
00001ED0                            ; ---------------------------------------------------------------------------
00001ED0                            
00001ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED0                            
00001ED0                            
00001ED0                            Pal_MakeWhite:				; XREF: SpecialStage
00001ED0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001ED6 7000                       		moveq	#0,d0
00001ED8 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EDC 1038 F626                  		move.b	($FFFFF626).w,d0
00001EE0 D0C0                       		adda.w	d0,a0
00001EE2 323C 0EEE                  		move.w	#$EEE,d1
00001EE6 1038 F627                  		move.b	($FFFFF627).w,d0
00001EEA                            
00001EEA                            PalWhite_Loop:
00001EEA 30C1                       		move.w	d1,(a0)+
00001EEC 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EF0 383C 0015                  		move.w	#$15,d4
00001EF4                            
00001EF4                            loc_1EF4:
00001EF4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001EFA 6100 0000                  		bsr.w	DelayProgram
00001EFE 6100                       		bsr.s	Pal_WhiteToBlack
00001F00 6100 F6EA                  		bsr.w	RunPLC_RAM
00001F04 51CC FFEE                  		dbf	d4,loc_1EF4
00001F08 4E75                       		rts	
00001F0A                            ; End of function Pal_MakeWhite
00001F0A                            
00001F0A                            
00001F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F0A                            
00001F0A                            
00001F0A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F0A 7000                       		moveq	#0,d0
00001F0C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F10 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F14 1038 F626                  		move.b	($FFFFF626).w,d0
00001F18 D0C0                       		adda.w	d0,a0
00001F1A D2C0                       		adda.w	d0,a1
00001F1C 1038 F627                  		move.b	($FFFFF627).w,d0
00001F20                            
00001F20                            loc_1F20:
00001F20 6100                       		bsr.s	Pal_DecColor2
00001F22 51C8 FFFC                  		dbf	d0,loc_1F20
00001F26                            
00001F26 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F2C 6600                       		bne.s	locret_1F4A
00001F2E 7000                       		moveq	#0,d0
00001F30 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F34 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001F38 1038 F626                  		move.b	($FFFFF626).w,d0
00001F3C D0C0                       		adda.w	d0,a0
00001F3E D2C0                       		adda.w	d0,a1
00001F40 1038 F627                  		move.b	($FFFFF627).w,d0
00001F44                            
00001F44                            loc_1F44:
00001F44 6100                       		bsr.s	Pal_DecColor2
00001F46 51C8 FFFC                  		dbf	d0,loc_1F44
00001F4A                            
00001F4A                            locret_1F4A:
00001F4A 4E75                       		rts	
00001F4C                            ; End of function Pal_WhiteToBlack
00001F4C                            
00001F4C                            
00001F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F4C                            
00001F4C                            
00001F4C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F4C 3419                       		move.w	(a1)+,d2
00001F4E 3610                       		move.w	(a0),d3
00001F50 B642                       		cmp.w	d2,d3
00001F52 6700                       		beq.s	loc_1F78
00001F54 3203                       		move.w	d3,d1
00001F56 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F5A 6500                       		bcs.s	loc_1F64
00001F5C B242                       		cmp.w	d2,d1
00001F5E 6500                       		bcs.s	loc_1F64
00001F60 30C1                       		move.w	d1,(a0)+
00001F62 4E75                       		rts	
00001F64                            ; ===========================================================================
00001F64                            
00001F64                            loc_1F64:				; XREF: Pal_DecColor2
00001F64 3203                       		move.w	d3,d1
00001F66 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F6A 6500                       		bcs.s	loc_1F74
00001F6C B242                       		cmp.w	d2,d1
00001F6E 6500                       		bcs.s	loc_1F74
00001F70 30C1                       		move.w	d1,(a0)+
00001F72 4E75                       		rts	
00001F74                            ; ===========================================================================
00001F74                            
00001F74                            loc_1F74:				; XREF: loc_1F64
00001F74 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F76 4E75                       		rts	
00001F78                            ; ===========================================================================
00001F78                            
00001F78                            loc_1F78:				; XREF: Pal_DecColor2
00001F78 5448                       		addq.w	#2,a0
00001F7A 4E75                       		rts	
00001F7C                            ; End of function Pal_DecColor2
00001F7C                            
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            ; Subroutine to	make a white flash when	you enter a special stage
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            
00001F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F7C                            
00001F7C                            
00001F7C                            Pal_MakeFlash:				; XREF: SpecialStage
00001F7C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F82 383C 0015                  		move.w	#$15,d4
00001F86                            
00001F86                            loc_1F86:
00001F86 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F8C 6100 0000                  		bsr.w	DelayProgram
00001F90 6100                       		bsr.s	Pal_ToWhite
00001F92 6100 F658                  		bsr.w	RunPLC_RAM
00001F96 51CC FFEE                  		dbf	d4,loc_1F86
00001F9A 4E75                       		rts	
00001F9C                            ; End of function Pal_MakeFlash
00001F9C                            
00001F9C                            
00001F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F9C                            
00001F9C                            
00001F9C                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAC                            
00001FAC                            loc_1FAC:
00001FAC 6100                       		bsr.s	Pal_AddColor2
00001FAE 51C8 FFFC                  		dbf	d0,loc_1FAC
00001FB2 7000                       		moveq	#0,d0
00001FB4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBC D0C0                       		adda.w	d0,a0
00001FBE 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC2                            
00001FC2                            loc_1FC2:
00001FC2 6100                       		bsr.s	Pal_AddColor2
00001FC4 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FC8 4E75                       		rts	
00001FCA                            ; End of function Pal_ToWhite
00001FCA                            
00001FCA                            
00001FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCA                            
00001FCA                            
00001FCA                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FCA 3410                       		move.w	(a0),d2
00001FCC 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FD0 6700                       		beq.s	loc_2006
00001FD2 3202                       		move.w	d2,d1
00001FD4 0241 000E                  		andi.w	#$E,d1
00001FD8 0C41 000E                  		cmpi.w	#$E,d1
00001FDC 6700                       		beq.s	loc_1FE2
00001FDE 5458                       		addq.w	#2,(a0)+	; increase red value
00001FE0 4E75                       		rts	
00001FE2                            ; ===========================================================================
00001FE2                            
00001FE2                            loc_1FE2:				; XREF: Pal_AddColor2
00001FE2 3202                       		move.w	d2,d1
00001FE4 0241 00E0                  		andi.w	#$E0,d1
00001FE8 0C41 00E0                  		cmpi.w	#$E0,d1
00001FEC 6700                       		beq.s	loc_1FF4
00001FEE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FF2 4E75                       		rts	
00001FF4                            ; ===========================================================================
00001FF4                            
00001FF4                            loc_1FF4:				; XREF: loc_1FE2
00001FF4 3202                       		move.w	d2,d1
00001FF6 0241 0E00                  		andi.w	#$E00,d1
00001FFA 0C41 0E00                  		cmpi.w	#$E00,d1
00001FFE 6700                       		beq.s	loc_2006
00002000 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002004 4E75                       		rts	
00002006                            ; ===========================================================================
00002006                            
00002006                            loc_2006:				; XREF: Pal_AddColor2
00002006 5448                       		addq.w	#2,a0
00002008 4E75                       		rts	
0000200A                            ; End of function Pal_AddColor2
0000200A                            
0000200A                            ; ---------------------------------------------------------------------------
0000200A                            ; Pallet cycling routine - Sega	logo
0000200A                            ; ---------------------------------------------------------------------------
0000200A                            
0000200A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000200A                            
0000200A                            
0000200A                            PalCycle_Sega:				; XREF: SegaScreen
0000200A 4A38 F635                  		tst.b	($FFFFF635).w
0000200E 6600                       		bne.s	loc_206A
00002010 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002014 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000201A 7205                       		moveq	#5,d1
0000201C 3038 F632                  		move.w	($FFFFF632).w,d0
00002020                            
00002020                            loc_2020:
00002020 6A00                       		bpl.s	loc_202A
00002022 5448                       		addq.w	#2,a0
00002024 5341                       		subq.w	#1,d1
00002026 5440                       		addq.w	#2,d0
00002028 60F6                       		bra.s	loc_2020
0000202A                            ; ===========================================================================
0000202A                            
0000202A                            loc_202A:				; XREF: PalCycle_Sega
0000202A 3400                       		move.w	d0,d2
0000202C 0242 001E                  		andi.w	#$1E,d2
00002030 6600                       		bne.s	loc_2034
00002032 5440                       		addq.w	#2,d0
00002034                            
00002034                            loc_2034:
00002034 0C40 0060                  		cmpi.w	#$60,d0
00002038 6400                       		bcc.s	loc_203E
0000203A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000203E                            
0000203E                            loc_203E:
0000203E 5440                       		addq.w	#2,d0
00002040 51C9 FFE8                  		dbf	d1,loc_202A
00002044 3038 F632                  		move.w	($FFFFF632).w,d0
00002048 5440                       		addq.w	#2,d0
0000204A 3400                       		move.w	d0,d2
0000204C 0242 001E                  		andi.w	#$1E,d2
00002050 6600                       		bne.s	loc_2054
00002052 5440                       		addq.w	#2,d0
00002054                            
00002054                            loc_2054:
00002054 0C40 0064                  		cmpi.w	#$64,d0
00002058 6D00                       		blt.s	loc_2062
0000205A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002060 70F4                       		moveq	#-$C,d0
00002062                            
00002062                            loc_2062:
00002062 31C0 F632                  		move.w	d0,($FFFFF632).w
00002066 7001                       		moveq	#1,d0
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            loc_206A:				; XREF: loc_202A
0000206A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000206E 6A00                       		bpl.s	loc_20BC
00002070 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002076 3038 F632                  		move.w	($FFFFF632).w,d0
0000207A 0640 000C                  		addi.w	#$C,d0
0000207E 0C40 0030                  		cmpi.w	#$30,d0
00002082 6500                       		bcs.s	loc_2088
00002084 7000                       		moveq	#0,d0
00002086 4E75                       		rts	
00002088                            ; ===========================================================================
00002088                            
00002088                            loc_2088:				; XREF: loc_206A
00002088 31C0 F632                  		move.w	d0,($FFFFF632).w
0000208C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002092 41F0 0000                  		lea	(a0,d0.w),a0
00002096 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000209A 22D8                       		move.l	(a0)+,(a1)+
0000209C 22D8                       		move.l	(a0)+,(a1)+
0000209E 3298                       		move.w	(a0)+,(a1)
000020A0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000020A4 7000                       		moveq	#0,d0
000020A6 722C                       		moveq	#$2C,d1
000020A8                            
000020A8                            loc_20A8:
000020A8 3400                       		move.w	d0,d2
000020AA 0242 001E                  		andi.w	#$1E,d2
000020AE 6600                       		bne.s	loc_20B2
000020B0 5440                       		addq.w	#2,d0
000020B2                            
000020B2                            loc_20B2:
000020B2 3390 0000                  		move.w	(a0),(a1,d0.w)
000020B6 5440                       		addq.w	#2,d0
000020B8 51C9 FFEE                  		dbf	d1,loc_20A8
000020BC                            
000020BC                            loc_20BC:
000020BC 7001                       		moveq	#1,d0
000020BE 4E75                       		rts	
000020C0                            ; End of function PalCycle_Sega
000020C0                            
000020C0                            ; ===========================================================================
000020C0                            
000020C0                            Pal_Sega1:	incbin	pallet\sega1.bin
000020CC                            Pal_Sega2:	incbin	pallet\sega2.bin
000020FC                            
000020FC                            ; ---------------------------------------------------------------------------
000020FC                            ; Subroutines to load pallets
000020FC                            ; ---------------------------------------------------------------------------
000020FC                            
000020FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020FC                            
000020FC                            
000020FC                            PalLoad1:
000020FC 43F9 0000 0000             		lea	(PalPointers).l,a1
00002102 E748                       		lsl.w	#3,d0
00002104 D2C0                       		adda.w	d0,a1
00002106 2459                       		movea.l	(a1)+,a2
00002108 3659                       		movea.w	(a1)+,a3
0000210A D6FC 0080                  		adda.w	#$80,a3
0000210E 3E19                       		move.w	(a1)+,d7
00002110                            
00002110                            loc_2110:
00002110 26DA                       		move.l	(a2)+,(a3)+
00002112 51CF FFFC                  		dbf	d7,loc_2110
00002116 4E75                       		rts	
00002118                            ; End of function PalLoad1
00002118                            
00002118                            
00002118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002118                            
00002118                            
00002118                            PalLoad2:
00002118 43F9 0000 0000             		lea	(PalPointers).l,a1
0000211E E748                       		lsl.w	#3,d0
00002120 D2C0                       		adda.w	d0,a1
00002122 2459                       		movea.l	(a1)+,a2
00002124 3659                       		movea.w	(a1)+,a3
00002126 3E19                       		move.w	(a1)+,d7
00002128                            
00002128                            loc_2128:
00002128 26DA                       		move.l	(a2)+,(a3)+
0000212A 51CF FFFC                  		dbf	d7,loc_2128
0000212E 4E75                       		rts	
00002130                            ; End of function PalLoad2
00002130                            
00002130                            ; ---------------------------------------------------------------------------
00002130                            ; Underwater pallet loading subroutine
00002130                            ; ---------------------------------------------------------------------------
00002130                            
00002130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002130                            
00002130                            
00002130                            PalLoad3_Water:
00002130 43F9 0000 0000             		lea	(PalPointers).l,a1
00002136 E748                       		lsl.w	#3,d0
00002138 D2C0                       		adda.w	d0,a1
0000213A 2459                       		movea.l	(a1)+,a2
0000213C 3659                       		movea.w	(a1)+,a3
0000213E 96FC 0080                  		suba.w	#$80,a3
00002142 3E19                       		move.w	(a1)+,d7
00002144                            
00002144                            loc_2144:
00002144 26DA                       		move.l	(a2)+,(a3)+
00002146 51CF FFFC                  		dbf	d7,loc_2144
0000214A 4E75                       		rts	
0000214C                            ; End of function PalLoad3_Water
0000214C                            
0000214C                            
0000214C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000214C                            
0000214C                            
0000214C                            PalLoad4_Water:
0000214C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002152 E748                       		lsl.w	#3,d0
00002154 D2C0                       		adda.w	d0,a1
00002156 2459                       		movea.l	(a1)+,a2
00002158 3659                       		movea.w	(a1)+,a3
0000215A 96FC 0100                  		suba.w	#$100,a3
0000215E 3E19                       		move.w	(a1)+,d7
00002160                            
00002160                            loc_2160:
00002160 26DA                       		move.l	(a2)+,(a3)+
00002162 51CF FFFC                  		dbf	d7,loc_2160
00002166 4E75                       		rts	
00002168                            ; End of function PalLoad4_Water
00002168                            
00002168                            ; ===========================================================================
00002168                            ; ---------------------------------------------------------------------------
00002168                            ; Pallet pointers
00002168                            ; ---------------------------------------------------------------------------
00002168                            PalPointers:
00002168                            	include "_inc\Pallet pointers.asm"
00002168                            ; ---------------------------------------------------------------------------
00002168                            ; Pallet pointers
00002168                            ; ---------------------------------------------------------------------------
00002168 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000216C FB00                       	dc.w $FB00		; RAM address
0000216E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002170 0000 0000                  	dc.l Pal_Title
00002174 FB00                       	dc.w $FB00
00002176 001F                       	dc.w $1F
00002178 0000 0000                  	dc.l Pal_LevelSel
0000217C FB00                       	dc.w $FB00
0000217E 001F                       	dc.w $1F
00002180 0000 0000                  	dc.l Pal_Sonic
00002184 FB00                       	dc.w $FB00
00002186 0007                       	dc.w 7
00002188 0000 0000                  	dc.l Pal_GHZ
0000218C FB20                       	dc.w $FB20
0000218E 0017                       	dc.w $17
00002190 0000 0000                  	dc.l Pal_LZ
00002194 FB20                       	dc.w $FB20
00002196 0017                       	dc.w $17
00002198 0000 0000                  	dc.l Pal_MZ
0000219C FB20                       	dc.w $FB20
0000219E 0017                       	dc.w $17
000021A0 0000 0000                  	dc.l Pal_SLZ
000021A4 FB20                       	dc.w $FB20
000021A6 0017                       	dc.w $17
000021A8 0000 0000                  	dc.l Pal_SYZ
000021AC FB20                       	dc.w $FB20
000021AE 0017                       	dc.w $17
000021B0 0000 0000                  	dc.l Pal_SBZ1
000021B4 FB20                       	dc.w $FB20
000021B6 0017                       	dc.w $17
000021B8 0000 0000                  	dc.l Pal_Special
000021BC FB00                       	dc.w $FB00
000021BE 001F                       	dc.w $1F
000021C0 0000 0000                  	dc.l Pal_LZWater
000021C4 FB00                       	dc.w $FB00
000021C6 001F                       	dc.w $1F
000021C8 0000 0000                  	dc.l Pal_SBZ3
000021CC FB20                       	dc.w $FB20
000021CE 0017                       	dc.w $17
000021D0 0000 0000                  	dc.l Pal_SBZ3Water
000021D4 FB00                       	dc.w $FB00
000021D6 001F                       	dc.w $1F
000021D8 0000 0000                  	dc.l Pal_SBZ2
000021DC FB20                       	dc.w $FB20
000021DE 0017                       	dc.w $17
000021E0 0000 0000                  	dc.l Pal_LZSonWater
000021E4 FB00                       	dc.w $FB00
000021E6 0007                       	dc.w 7
000021E8 0000 0000                  	dc.l Pal_SBZ3SonWat
000021EC FB00                       	dc.w $FB00
000021EE 0007                       	dc.w 7
000021F0 0000 0000                  	dc.l Pal_SpeResult
000021F4 FB00                       	dc.w $FB00
000021F6 001F                       	dc.w $1F
000021F8 0000 0000                  	dc.l Pal_SpeContinue
000021FC FB00                       	dc.w $FB00
000021FE 000F                       	dc.w $F
00002200 0000 0000                  	dc.l Pal_Ending
00002204 FB00                       	dc.w $FB00
00002206 001F                       	dc.w $1F
00002206 001F                       	dc.w $1F
00002208                            
00002208                            ; ---------------------------------------------------------------------------
00002208                            ; Pallet data
00002208                            ; ---------------------------------------------------------------------------
00002208                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002288                            Pal_Title:	incbin	pallet\title.bin
00002308                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002388                            Pal_Sonic:	incbin	pallet\sonic.bin
000023A8                            Pal_GHZ:	incbin	pallet\ghz.bin
00002408                            Pal_LZ:		incbin	pallet\lz.bin
00002468                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024E8                            Pal_MZ:		incbin	pallet\mz.bin
00002548                            Pal_SLZ:	incbin	pallet\slz.bin
000025A8                            Pal_SYZ:	incbin	pallet\syz.bin
00002608                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002668                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026C8                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002748                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000027A8                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002828                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002848                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002868                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028E8                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002928                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000029A8                            
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            
000029A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A8                            
000029A8                            
000029A8                            DelayProgram:				; XREF: PauseGame
000029A8 46FC 2300                  		move	#$2300,sr
000029AC                            
000029AC                            loc_29AC:
000029AC 4A38 F62A                  		tst.b	($FFFFF62A).w
000029B0 66FA                       		bne.s	loc_29AC
000029B2 4E75                       		rts	
000029B4                            ; End of function DelayProgram
000029B4                            
000029B4                            ; ---------------------------------------------------------------------------
000029B4                            ; Subroutine to	generate a pseudo-random number	in d0
000029B4                            ; ---------------------------------------------------------------------------
000029B4                            
000029B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029B4                            
000029B4                            
000029B4                            RandomNumber:
000029B4 2238 F636                  		move.l	($FFFFF636).w,d1
000029B8 6600                       		bne.s	loc_29C0
000029BA 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029C0                            
000029C0                            loc_29C0:
000029C0 2001                       		move.l	d1,d0
000029C2 E581                       		asl.l	#2,d1
000029C4 D280                       		add.l	d0,d1
000029C6 E781                       		asl.l	#3,d1
000029C8 D280                       		add.l	d0,d1
000029CA 3001                       		move.w	d1,d0
000029CC 4841                       		swap	d1
000029CE D041                       		add.w	d1,d0
000029D0 3200                       		move.w	d0,d1
000029D2 4841                       		swap	d1
000029D4 21C1 F636                  		move.l	d1,($FFFFF636).w
000029D8 4E75                       		rts	
000029DA                            ; End of function RandomNumber
000029DA                            
000029DA                            
000029DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029DA                            
000029DA                            
000029DA                            CalcSine:				; XREF: SS_BGAnimate; et al
000029DA 0240 00FF                  		andi.w	#$FF,d0
000029DE D040                       		add.w	d0,d0
000029E0 0640 0080                  		addi.w	#$80,d0
000029E4 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000029E8 0440 0080                  		subi.w	#$80,d0
000029EC 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000029F0 4E75                       		rts	
000029F2                            ; End of function CalcSine
000029F2                            
000029F2                            ; ===========================================================================
000029F2                            
000029F2                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002C72                            
00002C72                            ; ===========================================================================
00002C72 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C76 3200                       		move.w	d0,d1
00002C78 4841                       		swap	d1
00002C7A 7000                       		moveq	#0,d0
00002C7C 3200                       		move.w	d0,d1
00002C7E 7407                       		moveq	#7,d2
00002C80                            
00002C80                            loc_2C80:
00002C80 E599                       		rol.l	#2,d1
00002C82 D040                       		add.w	d0,d0
00002C84 5240                       		addq.w	#1,d0
00002C86 9240                       		sub.w	d0,d1
00002C88 6400                       		bcc.s	loc_2C9A
00002C8A D240                       		add.w	d0,d1
00002C8C 5340                       		subq.w	#1,d0
00002C8E 51CA FFF0                  		dbf	d2,loc_2C80
00002C92 E248                       		lsr.w	#1,d0
00002C94 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C98 4E75                       		rts	
00002C9A                            ; ===========================================================================
00002C9A                            
00002C9A                            loc_2C9A:
00002C9A 5240                       		addq.w	#1,d0
00002C9C 51CA FFE2                  		dbf	d2,loc_2C80
00002CA0 E248                       		lsr.w	#1,d0
00002CA2 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002CA6 4E75                       		rts	
00002CA8                            
00002CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CA8                            
00002CA8                            
00002CA8                            CalcAngle:
00002CA8 48E7 1800                  		movem.l	d3-d4,-(sp)
00002CAC 7600                       		moveq	#0,d3
00002CAE 7800                       		moveq	#0,d4
00002CB0 3601                       		move.w	d1,d3
00002CB2 3802                       		move.w	d2,d4
00002CB4 8843                       		or.w	d3,d4
00002CB6 6700                       		beq.s	loc_2D04
00002CB8 3802                       		move.w	d2,d4
00002CBA 4A43                       		tst.w	d3
00002CBC 6A00 0000                  		bpl.w	loc_2CC2
00002CC0 4443                       		neg.w	d3
00002CC2                            
00002CC2                            loc_2CC2:
00002CC2 4A44                       		tst.w	d4
00002CC4 6A00 0000                  		bpl.w	loc_2CCA
00002CC8 4444                       		neg.w	d4
00002CCA                            
00002CCA                            loc_2CCA:
00002CCA B843                       		cmp.w	d3,d4
00002CCC 6400 0000                  		bcc.w	loc_2CDC
00002CD0 E18C                       		lsl.l	#8,d4
00002CD2 88C3                       		divu.w	d3,d4
00002CD4 7000                       		moveq	#0,d0
00002CD6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CDA 6000                       		bra.s	loc_2CE6
00002CDC                            ; ===========================================================================
00002CDC                            
00002CDC                            loc_2CDC:				; XREF: CalcAngle
00002CDC E18B                       		lsl.l	#8,d3
00002CDE 86C4                       		divu.w	d4,d3
00002CE0 7040                       		moveq	#$40,d0
00002CE2 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CE6                            
00002CE6                            loc_2CE6:
00002CE6 4A41                       		tst.w	d1
00002CE8 6A00 0000                  		bpl.w	loc_2CF2
00002CEC 4440                       		neg.w	d0
00002CEE 0640 0080                  		addi.w	#$80,d0
00002CF2                            
00002CF2                            loc_2CF2:
00002CF2 4A42                       		tst.w	d2
00002CF4 6A00 0000                  		bpl.w	loc_2CFE
00002CF8 4440                       		neg.w	d0
00002CFA 0640 0100                  		addi.w	#$100,d0
00002CFE                            
00002CFE                            loc_2CFE:
00002CFE 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D02 4E75                       		rts	
00002D04                            ; ===========================================================================
00002D04                            
00002D04                            loc_2D04:				; XREF: CalcAngle
00002D04 303C 0040                  		move.w	#$40,d0
00002D08 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D0C 4E75                       		rts	
00002D0E                            ; End of function CalcAngle
00002D0E                            
00002D0E                            ; ===========================================================================
00002D0E                            
00002D0E                            Angle_Data:	incbin	misc\angles.bin
00002E10                            
00002E10                            ; ===========================================================================
00002E10                            
00002E10                            ; ---------------------------------------------------------------------------
00002E10                            ; Sega screen
00002E10                            ; ---------------------------------------------------------------------------
00002E10                            
00002E10                            SegaScreen:				; XREF: GameModeArray
00002E10 103C 00E4                  		move.b	#$E4,d0
00002E14 6100 E586                  		bsr.w	PlaySound_Special ; stop music
00002E18 6100 E7C4                  		bsr.w	ClearPLC
00002E1C 6100 F034                  		bsr.w	Pal_FadeFrom
00002E20 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E26 3CBC 8004                  		move.w	#$8004,(a6)
00002E2A 3CBC 8230                  		move.w	#$8230,(a6)
00002E2E 3CBC 8407                  		move.w	#$8407,(a6)
00002E32 3CBC 8700                  		move.w	#$8700,(a6)
00002E36 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E3A 4238 F64E                  		clr.b	($FFFFF64E).w
00002E3E 46FC 2700                  		move	#$2700,sr
00002E42 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E46 0200 00BF                  		andi.b	#$BF,d0
00002E4A 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E50 6100 E472                  		bsr.w	ClearScreen
00002E54 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E5E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E64 6100 E5DA                  		bsr.w	NemDec
00002E68 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E6E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E74 303C 0000                  		move.w	#0,d0
00002E78 6100 E8A4                  		bsr.w	EniDec
00002E7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E82 203C 6510 0003             		move.l	#$65100003,d0
00002E88 7217                       		moveq	#$17,d1
00002E8A 7407                       		moveq	#7,d2
00002E8C 6100 E592                  		bsr.w	ShowVDPGraphics
00002E90 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E96 203C 4000 0003             		move.l	#$40000003,d0
00002E9C 7227                       		moveq	#$27,d1
00002E9E 741B                       		moveq	#$1B,d2
00002EA0 6100 E57E                  		bsr.w	ShowVDPGraphics
00002EA4 7000                       		moveq	#0,d0
00002EA6 6100 F270                  		bsr.w	PalLoad2	; load Sega logo pallet
00002EAA 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002EB0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002EB6 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002EBC 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002EC2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EC6 0000 0040                  		ori.b	#$40,d0
00002ECA 33C0 00C0 0004             		move.w	d0,($C00004).l
00002ED0                            
00002ED0                            Sega_WaitPallet:
00002ED0 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002ED6 6100 FAD0                  		bsr.w	DelayProgram
00002EDA 6100 F12E                  		bsr.w	PalCycle_Sega
00002EDE 66F0                       		bne.s	Sega_WaitPallet
00002EE0                            
00002EE0 103C 00E1                  		move.b	#$E1,d0
00002EE4 6100 E4B6                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EE8 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002EEE 6100 FAB8                  		bsr.w	DelayProgram
00002EF2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002EF8                            
00002EF8                            Sega_WaitEnd:
00002EF8 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EFE 6100 FAA8                  		bsr.w	DelayProgram
00002F02 4A78 F614                  		tst.w	($FFFFF614).w
00002F06 6700                       		beq.s	Sega_GotoTitle
00002F08 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F0E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F10                            
00002F10                            Sega_GotoTitle:
00002F10 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F16 4E75                       		rts	
00002F18                            ; ===========================================================================
00002F18                            
00002F18                            ; ---------------------------------------------------------------------------
00002F18                            ; Title	screen
00002F18                            ; ---------------------------------------------------------------------------
00002F18                            
00002F18                            TitleScreen:				; XREF: GameModeArray
00002F18 103C 00E4                  		move.b	#$E4,d0
00002F1C 6100 E47E                  		bsr.w	PlaySound_Special ; stop music
00002F20 6100 E6BC                  		bsr.w	ClearPLC
00002F24 6100 EF2C                  		bsr.w	Pal_FadeFrom
00002F28 46FC 2700                  		move	#$2700,sr
00002F2C 6100 E424                  		bsr.w	SoundDriverLoad
00002F30 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F36 3CBC 8004                  		move.w	#$8004,(a6)
00002F3A 3CBC 8230                  		move.w	#$8230,(a6)
00002F3E 3CBC 8407                  		move.w	#$8407,(a6)
00002F42 3CBC 9001                  		move.w	#$9001,(a6)
00002F46 3CBC 9200                  		move.w	#$9200,(a6)
00002F4A 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F4E 3CBC 8720                  		move.w	#$8720,(a6)
00002F52 4238 F64E                  		clr.b	($FFFFF64E).w
00002F56 6100 E36C                  		bsr.w	ClearScreen
00002F5A 43F8 D000                  		lea	($FFFFD000).w,a1
00002F5E 7000                       		moveq	#0,d0
00002F60 323C 07FF                  		move.w	#$7FF,d1
00002F64                            
00002F64                            Title_ClrObjRam:
00002F64 22C0                       		move.l	d0,(a1)+
00002F66 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002F6A                            
00002F6A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002F74 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002F7A 6100 E4C4                  		bsr.w	NemDec
00002F7E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002F88 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002F8E 6100 E4B0                  		bsr.w	NemDec
00002F92 43F9 00FF 0000             		lea	($FF0000).l,a1
00002F98 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002F9E 303C 0000                  		move.w	#0,d0
00002FA2 6100 E77A                  		bsr.w	EniDec
00002FA6 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FAC 203C 4000 0003             		move.l	#$40000003,d0
00002FB2 7227                       		moveq	#$27,d1
00002FB4 741B                       		moveq	#$1B,d2
00002FB6 6100 E468                  		bsr.w	ShowVDPGraphics
00002FBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002FBE 7000                       		moveq	#0,d0
00002FC0 323C 001F                  		move.w	#$1F,d1
00002FC4                            
00002FC4                            Title_ClrPallet:
00002FC4 22C0                       		move.l	d0,(a1)+
00002FC6 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00002FCA                            
00002FCA 7003                       		moveq	#3,d0		; load Sonic's pallet
00002FCC 6100 F12E                  		bsr.w	PalLoad1
00002FD0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00002FD6 4EB9 0000 0000             		jsr	ObjectsLoad
00002FDC 4EB9 0000 0000             		jsr	BuildSprites
00002FE2 6100 EDC8                  		bsr.w	Pal_FadeTo
00002FE6 46FC 2700                  		move	#$2700,sr
00002FEA 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00002FF4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00002FFA 6100 E444                  		bsr.w	NemDec
00002FFE 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003008 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000300E 6100 E430                  		bsr.w	NemDec
00003012 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000301C 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003022 6100 E41C                  		bsr.w	NemDec
00003026 4DF9 00C0 0000             		lea	($C00000).l,a6
0000302C 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003034 4BF9 0000 05F0             		lea	(Art_Text).l,a5
0000303A 323C 028F                  		move.w	#$28F,d1
0000303E                            
0000303E                            Title_LoadText:
0000303E 3C9D                       		move.w	(a5)+,(a6)
00003040 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003044                            
00003044 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000304A 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003050 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003056 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000305C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003062 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003068 6100 0000                  		bsr.w	LevelSizeLoad
0000306C 6100 0000                  		bsr.w	DeformBgLayer
00003070 43F8 B000                  		lea	($FFFFB000).w,a1
00003074 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000307A 303C 0000                  		move.w	#0,d0
0000307E 6100 E69E                  		bsr.w	EniDec
00003082 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003088 43F9 00FF 0000             		lea	($FF0000).l,a1
0000308E 6100 E80C                  		bsr.w	KosDec
00003092 6100 0000                  		bsr.w	LevelLayoutLoad
00003096 6100 EDBA                  		bsr.w	Pal_FadeFrom
0000309A 46FC 2700                  		move	#$2700,sr
0000309E 6100 E224                  		bsr.w	ClearScreen
000030A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000030A8 4DF9 00C0 0000             		lea	($C00000).l,a6
000030AE 47F8 F708                  		lea	($FFFFF708).w,a3
000030B2 49F8 A440                  		lea	($FFFFA440).w,a4
000030B6 343C 6000                  		move.w	#$6000,d2
000030BA 6100 0000                  		bsr.w	LoadTilesFromStart2
000030BE 43F9 00FF 0000             		lea	($FF0000).l,a1
000030C4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000030CA 303C 0000                  		move.w	#0,d0
000030CE 6100 E64E                  		bsr.w	EniDec
000030D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030D8 203C 4206 0003             		move.l	#$42060003,d0
000030DE 7221                       		moveq	#$21,d1
000030E0 7415                       		moveq	#$15,d2
000030E2 6100 E33C                  		bsr.w	ShowVDPGraphics
000030E6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030F0 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000030F6 6100 E348                  		bsr.w	NemDec
000030FA 7001                       		moveq	#1,d0		; load title screen pallet
000030FC 6100 EFFE                  		bsr.w	PalLoad1
00003100 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003104 6100 E296                  		bsr.w	PlaySound_Special
00003108 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000310E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003114 43F8 D080                  		lea	($FFFFD080).w,a1
00003118 7000                       		moveq	#0,d0
0000311A 323C 0007                  		move.w	#7,d1
0000311E                            
0000311E                            Title_ClrObjRam2:
0000311E 22C0                       		move.l	d0,(a1)+
00003120 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003124                            
00003124 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000312A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003130 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003136 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000313C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003142 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003148 4EB9 0000 0000             		jsr	ObjectsLoad
0000314E 6100 0000                  		bsr.w	DeformBgLayer
00003152 4EB9 0000 0000             		jsr	BuildSprites
00003158 7000                       		moveq	#0,d0
0000315A 6100 E456                  		bsr.w	LoadPLC2
0000315E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003164 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000316A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000316E 0000 0040                  		ori.b	#$40,d0
00003172 33C0 00C0 0004             		move.w	d0,($C00004).l
00003178 6100 EC32                  		bsr.w	Pal_FadeTo
0000317C                            
0000317C                            loc_317C:
0000317C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003182 6100 F824                  		bsr.w	DelayProgram
00003186 4EB9 0000 0000             		jsr	ObjectsLoad
0000318C 6100 0000                  		bsr.w	DeformBgLayer
00003190 4EB9 0000 0000             		jsr	BuildSprites
00003196 6100 E7C4                  		bsr.w	PalCycle_Title
0000319A 6100 E450                  		bsr.w	RunPLC_RAM
0000319E 3038 D008                  		move.w	($FFFFD008).w,d0
000031A2 5440                       		addq.w	#2,d0
000031A4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000031A8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000031AC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000031AE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000031B4 4E75                       		rts	
000031B6                            ; ===========================================================================
000031B6                            
000031B6                            Title_ChkRegion:
000031B6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000031BA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000031BC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000031C2 6000                       		bra.s	Title_EnterCheat
000031C4                            ; ===========================================================================
000031C4                            
000031C4                            Title_RegionJ:				; XREF: Title_ChkRegion
000031C4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000031CA                            
000031CA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000031CA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000031CE D0C0                       		adda.w	d0,a0
000031D0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000031D4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000031D8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000031DA 6600                       		bne.s	loc_3210	; if not, branch
000031DC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000031E0 4A00                       		tst.b	d0
000031E2 6600                       		bne.s	Title_CountC
000031E4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000031E8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000031EC E249                       		lsr.w	#1,d1
000031EE 0241 0003                  		andi.w	#3,d1
000031F2 6700                       		beq.s	Title_PlayRing
000031F4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000031F8 6A00                       		bpl.s	Title_PlayRing
000031FA 7201                       		moveq	#1,d1
000031FC 1181 1001                  		move.b	d1,1(a0,d1.w)
00003200                            
00003200                            Title_PlayRing:
00003200 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003206 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000320A 6100 E190                  		bsr.w	PlaySound_Special
0000320E 6000                       		bra.s	Title_CountC
00003210                            ; ===========================================================================
00003210                            
00003210                            loc_3210:				; XREF: Title_EnterCheat
00003210 4A00                       		tst.b	d0
00003212 6700                       		beq.s	Title_CountC
00003214 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000321A 6700                       		beq.s	Title_CountC
0000321C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003222                            
00003222                            Title_CountC:
00003222 1038 F605                  		move.b	($FFFFF605).w,d0
00003226 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000322A 6700                       		beq.s	loc_3230	; if not, branch
0000322C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003230                            
00003230                            loc_3230:
00003230 4A78 F614                  		tst.w	($FFFFF614).w
00003234 6700 0000                  		beq.w	Demo
00003238 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000323E 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003242                            
00003242                            Title_ChkLevSel:
00003242 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003246 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000324A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003250 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003254 7002                       		moveq	#2,d0
00003256 6100 EEC0                  		bsr.w	PalLoad2	; load level select pallet
0000325A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000325E 7000                       		moveq	#0,d0
00003260 323C 00DF                  		move.w	#$DF,d1
00003264                            
00003264                            Title_ClrScroll:
00003264 22C0                       		move.l	d0,(a1)+
00003266 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000326A                            
0000326A 21C0 F616                  		move.l	d0,($FFFFF616).w
0000326E 46FC 2700                  		move	#$2700,sr
00003272 4DF9 00C0 0000             		lea	($C00000).l,a6
00003278 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003282 323C 03FF                  		move.w	#$3FF,d1
00003286                            
00003286                            Title_ClrVram:
00003286 2C80                       		move.l	d0,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000328C                            
0000328C 6100 0000                  		bsr.w	LevSelTextLoad
00003290                            
00003290                            ; ---------------------------------------------------------------------------
00003290                            ; Level	Select
00003290                            ; ---------------------------------------------------------------------------
00003290                            
00003290                            LevelSelect:
00003290 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003296 6100 F710                  		bsr.w	DelayProgram
0000329A 6100 0000                  		bsr.w	LevSelControls
0000329E 6100 E34C                  		bsr.w	RunPLC_RAM
000032A2 4AB8 F680                  		tst.l	($FFFFF680).w
000032A6 66E8                       		bne.s	LevelSelect
000032A8 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000032AE 67E0                       		beq.s	LevelSelect	; if not, branch
000032B0 3038 FF82                  		move.w	($FFFFFF82).w,d0
000032B4 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000032B8 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000032BA 3038 FF84                  		move.w	($FFFFFF84).w,d0
000032BE 0640 0080                  		addi.w	#$80,d0
000032C2 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000032C6 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000032C8 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000032CC 6700                       		beq.s	LevSel_Ending	; if yes, branch
000032CE 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000032D2 6700                       		beq.s	LevSel_Credits	; if yes, branch
000032D4                            
000032D4                            LevSel_NoCheat:
000032D4 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
000032D8 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000032DA 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000032DE 65B0                       		bcs.s	LevelSelect	; if yes, branch
000032E0                            
000032E0                            LevSel_PlaySnd:
000032E0 6100 E0BA                  		bsr.w	PlaySound_Special
000032E4 60AA                       		bra.s	LevelSelect
000032E6                            ; ===========================================================================
000032E6                            
000032E6                            LevSel_Ending:				; XREF: LevelSelect
000032E6 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000032EC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000032F2 4E75                       		rts	
000032F4                            ; ===========================================================================
000032F4                            
000032F4                            LevSel_Credits:				; XREF: LevelSelect
000032F4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000032FA 103C 0091                  		move.b	#$91,d0
000032FE 6100 E09C                  		bsr.w	PlaySound_Special ; play credits music
00003302 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003308 4E75                       		rts	
0000330A                            ; ===========================================================================
0000330A                            
0000330A                            LevSel_Level_SS:			; XREF: LevelSelect
0000330A D040                       		add.w	d0,d0
0000330C 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003310 6B00 FF7E                  		bmi.w	LevelSelect
00003314 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003318 6600                       		bne.s	LevSel_Level	; if not, branch
0000331A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003320 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003324 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000332A 7000                       		moveq	#0,d0
0000332C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003330 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003334 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003338 4E75                       		rts	
0000333A                            ; ===========================================================================
0000333A                            
0000333A                            LevSel_Level:				; XREF: LevSel_Level_SS
0000333A 0240 3FFF                  		andi.w	#$3FFF,d0
0000333E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003342                            
00003342                            PlayLevel:				; XREF: ROM:00003246j ...
00003342 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003348 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000334E 7000                       		moveq	#0,d0
00003350 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003354 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003358 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000335C 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003360 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003364 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003368 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000336C 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003370 103C 00E0                  		move.b	#$E0,d0
00003374 6100 E026                  		bsr.w	PlaySound_Special ; fade out music
00003378 4E75                       		rts	
0000337A                            ; ===========================================================================
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            ; Level	select - level pointers
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            LSelectPointers:
0000337A                            		incbin	misc\ls_point.bin
000033A4                            		even
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            ; Level	select codes
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            LevelSelectCode_J:
000033A4                            		incbin	misc\ls_jcode.bin
000033AA                            		even
000033AA                            
000033AA                            LevelSelectCode_US:
000033AA                            		incbin	misc\ls_ucode.bin
000033B0                            		even
000033B0                            ; ===========================================================================
000033B0                            
000033B0                            ; ---------------------------------------------------------------------------
000033B0                            ; Demo mode
000033B0                            ; ---------------------------------------------------------------------------
000033B0                            
000033B0                            Demo:					; XREF: TitleScreen
000033B0 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000033B6                            
000033B6                            loc_33B6:				; XREF: loc_33E4
000033B6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033BC 6100 F5EA                  		bsr.w	DelayProgram
000033C0 6100 0000                  		bsr.w	DeformBgLayer
000033C4 6100 E576                  		bsr.w	PalCycle_Load
000033C8 6100 E222                  		bsr.w	RunPLC_RAM
000033CC 3038 D008                  		move.w	($FFFFD008).w,d0
000033D0 5440                       		addq.w	#2,d0
000033D2 31C0 D008                  		move.w	d0,($FFFFD008).w
000033D6 0C40 1C00                  		cmpi.w	#$1C00,d0
000033DA 6500                       		bcs.s	loc_33E4
000033DC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000033E2 4E75                       		rts	
000033E4                            ; ===========================================================================
000033E4                            
000033E4                            loc_33E4:				; XREF: Demo
000033E4 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000033EA 6600 FE56                  		bne.w	Title_ChkLevSel	; if yes, branch
000033EE 4A78 F614                  		tst.w	($FFFFF614).w
000033F2 6600 FFC2                  		bne.w	loc_33B6
000033F6 103C 00E0                  		move.b	#$E0,d0
000033FA 6100 DFA0                  		bsr.w	PlaySound_Special ; fade out music
000033FE 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003402 0240 0007                  		andi.w	#7,d0
00003406 D040                       		add.w	d0,d0
00003408 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000340C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003410 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003414 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000341A 6500                       		bcs.s	loc_3422	; if yes, branch
0000341C 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003422                            
00003422                            loc_3422:
00003422 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003428 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000342E 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003432 6600                       		bne.s	Demo_Level	; if not, branch
00003434 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000343A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000343E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003442                            
00003442                            Demo_Level:
00003442 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003448 7000                       		moveq	#0,d0
0000344A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000344E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003452 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003456 4E75                       		rts	
00003458                            ; ===========================================================================
00003458                            ; ---------------------------------------------------------------------------
00003458                            ; Levels used in demos
00003458                            ; ---------------------------------------------------------------------------
00003458                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003460                            		even
00003460                            
00003460                            ; ---------------------------------------------------------------------------
00003460                            ; Subroutine to	change what you're selecting in the level select
00003460                            ; ---------------------------------------------------------------------------
00003460                            
00003460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003460                            
00003460                            
00003460                            LevSelControls:				; XREF: LevelSelect
00003460 1238 F605                  		move.b	($FFFFF605).w,d1
00003464 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003468 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000346A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000346E 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003470                            
00003470                            LevSel_UpDown:
00003470 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003476 1238 F604                  		move.b	($FFFFF604).w,d1
0000347A 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000347E 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003480 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003484 0801 0000                  		btst	#0,d1		; is up	pressed?
00003488 6700                       		beq.s	LevSel_Down	; if not, branch
0000348A 5340                       		subq.w	#1,d0		; move up 1 selection
0000348C 6400                       		bcc.s	LevSel_Down
0000348E 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003490                            
00003490                            LevSel_Down:
00003490 0801 0001                  		btst	#1,d1		; is down pressed?
00003494 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003496 5240                       		addq.w	#1,d0		; move down 1 selection
00003498 0C40 0015                  		cmpi.w	#$15,d0
0000349C 6500                       		bcs.s	LevSel_Refresh
0000349E 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000034A0                            
000034A0                            LevSel_Refresh:
000034A0 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
000034A4 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034A8 4E75                       		rts	
000034AA                            ; ===========================================================================
000034AA                            
000034AA                            LevSel_SndTest:				; XREF: LevSelControls
000034AA 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
000034B0 6600                       		bne.s	LevSel_NoMove	; if not, branch
000034B2 1238 F605                  		move.b	($FFFFF605).w,d1
000034B6 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000034BA 6700                       		beq.s	LevSel_NoMove	; if not, branch
000034BC 3038 FF84                  		move.w	($FFFFFF84).w,d0
000034C0 0801 0002                  		btst	#2,d1		; is left pressed?
000034C4 6700                       		beq.s	LevSel_Right	; if not, branch
000034C6 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000034C8 6400                       		bcc.s	LevSel_Right
000034CA 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000034CC                            
000034CC                            LevSel_Right:
000034CC 0801 0003                  		btst	#3,d1		; is right pressed?
000034D0 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000034D2 5240                       		addq.w	#1,d0		; add 1	to sound test
000034D4 0C40 0050                  		cmpi.w	#$50,d0
000034D8 6500                       		bcs.s	LevSel_Refresh2
000034DA 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000034DC                            
000034DC                            LevSel_Refresh2:
000034DC 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000034E0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034E4                            
000034E4                            LevSel_NoMove:
000034E4 4E75                       		rts	
000034E6                            ; End of function LevSelControls
000034E6                            
000034E6                            ; ---------------------------------------------------------------------------
000034E6                            ; Subroutine to load level select text
000034E6                            ; ---------------------------------------------------------------------------
000034E6                            
000034E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034E6                            
000034E6                            
000034E6                            LevSelTextLoad:				; XREF: TitleScreen
000034E6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000034EC 4DF9 00C0 0000             		lea	($C00000).l,a6
000034F2 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000034F8 363C E680                  		move.w	#$E680,d3	; VRAM setting
000034FC 7214                       		moveq	#$14,d1		; number of lines of text
000034FE                            
000034FE                            loc_34FE:				; XREF: LevSelTextLoad+26j
000034FE 2D44 0004                  		move.l	d4,4(a6)
00003502 6100 0000                  		bsr.w	LevSel_ChgLine
00003506 0684 0080 0000             		addi.l	#$800000,d4
0000350C 51C9 FFF0                  		dbf	d1,loc_34FE
00003510 7000                       		moveq	#0,d0
00003512 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003516 3200                       		move.w	d0,d1
00003518 283C 6210 0003             		move.l	#$62100003,d4
0000351E EF48                       		lsl.w	#7,d0
00003520 4840                       		swap	d0
00003522 D880                       		add.l	d0,d4
00003524 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000352A E749                       		lsl.w	#3,d1
0000352C 3001                       		move.w	d1,d0
0000352E D241                       		add.w	d1,d1
00003530 D240                       		add.w	d0,d1
00003532 D2C1                       		adda.w	d1,a1
00003534 363C C680                  		move.w	#$C680,d3
00003538 2D44 0004                  		move.l	d4,4(a6)
0000353C 6100 0000                  		bsr.w	LevSel_ChgLine
00003540 363C E680                  		move.w	#$E680,d3
00003544 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000354A 6600                       		bne.s	loc_3550
0000354C 363C C680                  		move.w	#$C680,d3
00003550                            
00003550                            loc_3550:
00003550 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
0000355A 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000355E 0640 0080                  		addi.w	#$80,d0
00003562 1400                       		move.b	d0,d2
00003564 E808                       		lsr.b	#4,d0
00003566 6100 0000                  		bsr.w	LevSel_ChgSnd
0000356A 1002                       		move.b	d2,d0
0000356C 6100 0000                  		bsr.w	LevSel_ChgSnd
00003570 4E75                       		rts	
00003572                            ; End of function LevSelTextLoad
00003572                            
00003572                            
00003572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003572                            
00003572                            
00003572                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003572 0240 000F                  		andi.w	#$F,d0
00003576 0C00 000A                  		cmpi.b	#$A,d0
0000357A 6500                       		bcs.s	loc_3580
0000357C 5E00                       		addi.b	#7,d0
0000357E                            
0000357E                            loc_3580:
0000357E D043                       		add.w	d3,d0
00003580 3C80                       		move.w	d0,(a6)
00003582 4E75                       		rts	
00003584                            ; End of function LevSel_ChgSnd
00003584                            
00003584                            
00003584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003584                            
00003584                            
00003584                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003584 7417                       		moveq	#$17,d2		; number of characters per line
00003586                            
00003586                            loc_3588:
00003586 7000                       		moveq	#0,d0
00003588 1019                       		move.b	(a1)+,d0
0000358A 6A00                       		bpl.s	loc_3598
0000358C 3CBC 0000                  		move.w	#0,(a6)
00003590 51CA FFF4                  		dbf	d2,loc_3588
00003594 4E75                       		rts	
00003596                            ; ===========================================================================
00003596                            
00003596                            loc_3598:				; XREF: LevSel_ChgLine
00003596 D043                       		add.w	d3,d0
00003598 3C80                       		move.w	d0,(a6)
0000359A 51CA FFEA                  		dbf	d2,loc_3588
0000359E 4E75                       		rts	
000035A0                            ; End of function LevSel_ChgLine
000035A0                            
000035A0                            ; ===========================================================================
000035A0                            ; ---------------------------------------------------------------------------
000035A0                            ; Level	select menu text
000035A0                            ; ---------------------------------------------------------------------------
000035A0                            LevelMenuText:	incbin	misc\menutext.bin
00003798                            		even
00003798                            ; ---------------------------------------------------------------------------
00003798                            ; Music	playlist
00003798                            ; ---------------------------------------------------------------------------
00003798                            MusicList:	incbin	misc\muslist1.bin
000037A0                            		even
000037A0                            ; ===========================================================================
000037A0                            
000037A0                            ; ---------------------------------------------------------------------------
000037A0                            ; Level
000037A0                            ; ---------------------------------------------------------------------------
000037A0                            
000037A0                            Level:					; XREF: GameModeArray
000037A0 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000037A6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037AA 6B00                       		bmi.s	loc_37B6
000037AC 103C 00E0                  		move.b	#$E0,d0
000037B0 6100 DBEA                  		bsr.w	PlaySound_Special ; fade out music
000037B4                            
000037B4                            loc_37B6:
000037B4 6100 DE28                  		bsr.w	ClearPLC
000037B8 6100 E698                  		bsr.w	Pal_FadeFrom
000037BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037C0 6B00                       		bmi.s	Level_ClrRam
000037C2 46FC 2700                  		move	#$2700,sr
000037C6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000037D0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000037D6 6100 DC68                  		bsr.w	NemDec
000037DA 46FC 2300                  		move	#$2300,sr
000037DE 7000                       		moveq	#0,d0
000037E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000037E4 E948                       		lsl.w	#4,d0
000037E6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000037EC 45F2 0000                  		lea	(a2,d0.w),a2
000037F0 7000                       		moveq	#0,d0
000037F2 1012                       		move.b	(a2),d0
000037F4 6700                       		beq.s	loc_37FC
000037F6 6100 DD88                  		bsr.w	LoadPLC		; load level patterns
000037FA                            
000037FA                            loc_37FC:
000037FA 7001                       		moveq	#1,d0
000037FC 6100 DD82                  		bsr.w	LoadPLC		; load standard	patterns
00003800                            
00003800                            Level_ClrRam:
00003800 43F8 D000                  		lea	($FFFFD000).w,a1
00003804 7000                       		moveq	#0,d0
00003806 323C 07FF                  		move.w	#$7FF,d1
0000380A                            
0000380A                            Level_ClrObjRam:
0000380A 22C0                       		move.l	d0,(a1)+
0000380C 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003810                            
00003810 43F8 F628                  		lea	($FFFFF628).w,a1
00003814 7000                       		moveq	#0,d0
00003816 323C 0015                  		move.w	#$15,d1
0000381A                            
0000381A                            Level_ClrVars:
0000381A 22C0                       		move.l	d0,(a1)+
0000381C 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003820                            
00003820 43F8 F700                  		lea	($FFFFF700).w,a1
00003824 7000                       		moveq	#0,d0
00003826 323C 003F                  		move.w	#$3F,d1
0000382A                            
0000382A                            Level_ClrVars2:
0000382A 22C0                       		move.l	d0,(a1)+
0000382C 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003830                            
00003830 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003834 7000                       		moveq	#0,d0
00003836 323C 0047                  		move.w	#$47,d1
0000383A                            
0000383A                            Level_ClrVars3:
0000383A 22C0                       		move.l	d0,(a1)+
0000383C 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003840                            
00003840 46FC 2700                  		move	#$2700,sr
00003844 6100 DA7E                  		bsr.w	ClearScreen
00003848 4DF9 00C0 0004             		lea	($C00004).l,a6
0000384E 3CBC 8B03                  		move.w	#$8B03,(a6)
00003852 3CBC 8230                  		move.w	#$8230,(a6)
00003856 3CBC 8407                  		move.w	#$8407,(a6)
0000385A 3CBC 857C                  		move.w	#$857C,(a6)
0000385E 3CBC 9001                  		move.w	#$9001,(a6)
00003862 3CBC 8004                  		move.w	#$8004,(a6)
00003866 3CBC 8720                  		move.w	#$8720,(a6)
0000386A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003870 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003874 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000387A 6600                       		bne.s	Level_LoadPal	; if not, branch
0000387C 3CBC 8014                  		move.w	#$8014,(a6)
00003880 7000                       		moveq	#0,d0
00003882 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003886 D040                       		add.w	d0,d0
00003888 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000388E 3031 0000                  		move.w	(a1,d0.w),d0
00003892 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003896 31C0 F648                  		move.w	d0,($FFFFF648).w
0000389A 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000389E 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000038A2 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000038A6 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000038AC                            
000038AC                            Level_LoadPal:
000038AC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000038B2 46FC 2300                  		move	#$2300,sr
000038B6 7003                       		moveq	#3,d0
000038B8 6100 E85E                  		bsr.w	PalLoad2	; load Sonic's pallet line
000038BC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000038C2 6600                       		bne.s	Level_GetBgm	; if not, branch
000038C4 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000038C6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000038CC 6600                       		bne.s	Level_WaterPal	; if not, branch
000038CE 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000038D0                            
000038D0                            Level_WaterPal:
000038D0 6100 E85E                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000038D4 4A38 FE30                  		tst.b	($FFFFFE30).w
000038D8 6700                       		beq.s	Level_GetBgm
000038DA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000038E0                            
000038E0                            Level_GetBgm:
000038E0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038E4 6B00                       		bmi.s	loc_3946
000038E6 7000                       		moveq	#0,d0
000038E8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000038EC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000038F2 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000038F4 7005                       		moveq	#5,d0		; move 5 to d0
000038F6                            
000038F6                            Level_BgmNotLZ4:
000038F6 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000038FC 6600                       		bne.s	Level_PlayBgm	; if not, branch
000038FE 7006                       		moveq	#6,d0		; move 6 to d0
00003900                            
00003900                            Level_PlayBgm:
00003900 43F9 0000 3798             		lea	(MusicList).l,a1 ; load	music playlist
00003906 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
0000390A 6100 DA8A                  		bsr.w	PlaySound	; play music
0000390E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003914                            
00003914                            Level_TtlCard:
00003914 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000391A 6100 F08C                  		bsr.w	DelayProgram
0000391E 4EB9 0000 0000             		jsr	ObjectsLoad
00003924 4EB9 0000 0000             		jsr	BuildSprites
0000392A 6100 DCC0                  		bsr.w	RunPLC_RAM
0000392E 3038 D108                  		move.w	($FFFFD108).w,d0
00003932 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003936 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003938 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000393C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000393E 4EB9 0000 0000             		jsr	Hud_Base
00003944                            
00003944                            loc_3946:
00003944 7003                       		moveq	#3,d0
00003946 6100 E7B4                  		bsr.w	PalLoad1	; load Sonic's pallet line
0000394A 6100 0000                  		bsr.w	LevelSizeLoad
0000394E 6100 0000                  		bsr.w	DeformBgLayer
00003952 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003958 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
0000395C 6100 0000                  		bsr.w	LoadTilesFromStart
00003960 4EB9 0000 0000             		jsr	FloorLog_Unk
00003966 6100 0000                  		bsr.w	ColIndexLoad
0000396A 6100 0000                  		bsr.w	LZWaterEffects
0000396E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003974 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003978 6B00                       		bmi.s	Level_ChkDebug
0000397A 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003980                            
00003980                            Level_ChkDebug:
00003980 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003984 6700                       		beq.s	Level_ChkWater	; if not, branch
00003986 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000398C 6700                       		beq.s	Level_ChkWater	; if not, branch
0000398E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003994                            
00003994                            Level_ChkWater:
00003994 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000399A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000039A0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000039A6 6600                       		bne.s	Level_LoadObj	; if not, branch
000039A8 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000039AE 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000039B4 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000039BA 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
000039C0                            
000039C0                            Level_LoadObj:
000039C0 4EB9 0000 0000             		jsr	ObjPosLoad
000039C6 4EB9 0000 0000             		jsr	ObjectsLoad
000039CC 4EB9 0000 0000             		jsr	BuildSprites
000039D2 7000                       		moveq	#0,d0
000039D4 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
000039D8 6600                       		bne.s	loc_39E8	; if yes, branch
000039DA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000039DE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000039E2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
000039E6                            
000039E6                            loc_39E8:
000039E6 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000039EA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000039EE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000039F2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000039F6                            		; move.b	d0,($FFFFFE2F).w
000039F6 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
000039FC 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003A00 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003A04 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003A08 6100 0000                  		bsr.w	OscillateNumInit
00003A0C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003A12 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003A18 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003A1E 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003A24 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003A2A 7000                       		moveq	#0,d0
00003A2C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A30 E548                       		lsl.w	#2,d0
00003A32 2271 0000                  		movea.l	(a1,d0.w),a1
00003A36 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003A3A 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003A3C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003A42 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003A46 5340                       		subq.w	#1,d0
00003A48 E548                       		lsl.w	#2,d0
00003A4A 2271 0000                  		movea.l	(a1,d0.w),a1
00003A4E                            
00003A4E                            Level_Demo:
00003A4E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003A54 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003A58 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003A5E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A62 6A00                       		bpl.s	Level_ChkWaterPal
00003A64 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003A6A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003A70 6600                       		bne.s	Level_ChkWaterPal
00003A72 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003A78                            
00003A78                            Level_ChkWaterPal:
00003A78 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003A7E 6600                       		bne.s	Level_Delay	; if not, branch
00003A80 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003A82 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003A88 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003A8A 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003A8C                            
00003A8C                            Level_WaterPal2:
00003A8C 6100 E6BE                  		bsr.w	PalLoad4_Water
00003A90                            
00003A90                            Level_Delay:
00003A90 323C 0003                  		move.w	#3,d1
00003A94                            
00003A94                            Level_DelayLoop:
00003A94 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003A9A 6100 EF0C                  		bsr.w	DelayProgram
00003A9E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003AA2                            
00003AA2 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003AA8 6100 E308                  		bsr.w	Pal_FadeTo2
00003AAC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AB0 6B00                       		bmi.s	Level_ClrCardArt
00003AB2 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003AB6 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003ABA 5838 D124                  		addq.b	#4,($FFFFD124).w
00003ABE 5838 D164                  		addq.b	#4,($FFFFD164).w
00003AC2 6000                       		bra.s	Level_StartGame
00003AC4                            ; ===========================================================================
00003AC4                            
00003AC4                            Level_ClrCardArt:
00003AC4 7002                       		moveq	#2,d0
00003AC6 4EB9 0000 1580             		jsr	(LoadPLC).l	; load explosion patterns
00003ACC 7000                       		moveq	#0,d0
00003ACE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003AD2 0640 0015                  		addi.w	#$15,d0
00003AD6 4EB9 0000 1580             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003ADC                            
00003ADC                            Level_StartGame:
00003ADC 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003AE2                            
00003AE2                            ; ---------------------------------------------------------------------------
00003AE2                            ; Main level loop (when	all title card and loading sequences are finished)
00003AE2                            ; ---------------------------------------------------------------------------
00003AE2                            
00003AE2                            Level_MainLoop:
00003AE2 6100 D8C4                  		bsr.w	PauseGame
00003AE6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003AEC 6100 EEBA                  		bsr.w	DelayProgram
00003AF0 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003AF4 6100 0000                  		bsr.w	MoveSonicInDemo
00003AF8 6100 0000                  		bsr.w	LZWaterEffects
00003AFC 4EB9 0000 0000             		jsr	ObjectsLoad
00003B02 4A78 FE08                  		tst.w	($FFFFFE08).w
00003B06 6600                       		bne.s	loc_3B10
00003B08 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003B0E 6400                       		bcc.s	loc_3B14
00003B10                            
00003B10                            loc_3B10:
00003B10 6100 0000                  		bsr.w	DeformBgLayer
00003B14                            
00003B14                            loc_3B14:
00003B14 4EB9 0000 0000             		jsr	BuildSprites
00003B1A 4EB9 0000 0000             		jsr	ObjPosLoad
00003B20 6100 DE1A                  		bsr.w	PalCycle_Load
00003B24 6100 DAC6                  		bsr.w	RunPLC_RAM
00003B28 6100 0000                  		bsr.w	OscillateNumDo
00003B2C 6100 0000                  		bsr.w	ChangeRingFrame
00003B30 6100 0000                  		bsr.w	SignpostArtLoad
00003B34 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B3A 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003B3C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003B40 6600 FC5E                  		bne.w	Level		; if yes, branch
00003B44 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003B4A 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003B4E 4E75                       		rts	
00003B50                            ; ===========================================================================
00003B50                            
00003B50                            Level_ChkDemo:				; XREF: Level_MainLoop
00003B50 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003B54 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003B56 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003B5A 6700                       		beq.s	Level_EndDemo	; if not, branch
00003B5C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B62 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003B66 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B6C 4E75                       		rts	
00003B6E                            ; ===========================================================================
00003B6E                            
00003B6E                            Level_EndDemo:				; XREF: Level_ChkDemo
00003B6E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003B74 6600                       		bne.s	loc_3B88	; if not, branch
00003B76 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B7C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B80 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003B82 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003B88                            
00003B88                            loc_3B88:
00003B88 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003B8E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003B94 4278 F794                  		clr.w	($FFFFF794).w
00003B98                            
00003B98                            loc_3B98:
00003B98 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B9E 6100 EE08                  		bsr.w	DelayProgram
00003BA2 6100 0000                  		bsr.w	MoveSonicInDemo
00003BA6 4EB9 0000 0000             		jsr	ObjectsLoad
00003BAC 4EB9 0000 0000             		jsr	BuildSprites
00003BB2 4EB9 0000 0000             		jsr	ObjPosLoad
00003BB8 5378 F794                  		subq.w	#1,($FFFFF794).w
00003BBC 6A00                       		bpl.s	loc_3BC8
00003BBE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003BC4 6100 E2AC                  		bsr.w	Pal_FadeOut
00003BC8                            
00003BC8                            loc_3BC8:
00003BC8 4A78 F614                  		tst.w	($FFFFF614).w
00003BCC 66CA                       		bne.s	loc_3B98
00003BCE 4E75                       		rts	
00003BD0                            ; ===========================================================================
00003BD0                            ; ---------------------------------------------------------------------------
00003BD0                            ; Subroutine to	do special water effects in Labyrinth Zone
00003BD0                            ; ---------------------------------------------------------------------------
00003BD0                            
00003BD0                            LZWaterEffects:				; XREF: Level
00003BD0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003BD6 6600                       		bne.s	locret_3C28	; if not, branch
00003BD8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003BDE 6400                       		bcc.s	LZMoveWater
00003BE0 6100 0000                  		bsr.w	LZWindTunnels
00003BE4 6100 0000                  		bsr.w	LZWaterSlides
00003BE8 6100 0000                  		bsr.w	LZDynamicWater
00003BEC                            
00003BEC                            LZMoveWater:
00003BEC 4238 F64E                  		clr.b	($FFFFF64E).w
00003BF0 7000                       		moveq	#0,d0
00003BF2 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003BF6 E248                       		lsr.w	#1,d0
00003BF8 D078 F648                  		add.w	($FFFFF648).w,d0
00003BFC 31C0 F646                  		move.w	d0,($FFFFF646).w
00003C00 3038 F646                  		move.w	($FFFFF646).w,d0
00003C04 9078 F704                  		sub.w	($FFFFF704).w,d0
00003C08 6400                       		bcc.s	loc_3C1A
00003C0A 4A40                       		tst.w	d0
00003C0C 6A00                       		bpl.s	loc_3C1A
00003C0E 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003C14 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003C1A                            
00003C1A                            loc_3C1A:
00003C1A 0C40 00DF                  		cmpi.w	#$DF,d0
00003C1E 6500                       		bcs.s	loc_3C24
00003C20 303C 00DF                  		move.w	#$DF,d0
00003C24                            
00003C24                            loc_3C24:
00003C24 11C0 F625                  		move.b	d0,($FFFFF625).w
00003C28                            
00003C28                            locret_3C28:
00003C28 4E75                       		rts	
00003C2A                            ; ===========================================================================
00003C2A                            ; ---------------------------------------------------------------------------
00003C2A                            ; Labyrinth default water heights
00003C2A                            ; ---------------------------------------------------------------------------
00003C2A                            WaterHeight:	incbin	misc\lz_heigh.bin
00003C32                            		even
00003C32                            ; ===========================================================================
00003C32                            
00003C32                            ; ---------------------------------------------------------------------------
00003C32                            ; Labyrinth dynamic water routines
00003C32                            ; ---------------------------------------------------------------------------
00003C32                            
00003C32                            LZDynamicWater:				; XREF: LZWaterEffects
00003C32 7000                       		moveq	#0,d0
00003C34 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C38 D040                       		add.w	d0,d0
00003C3A 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003C3E 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003C42 7200                       		moveq	#0,d1
00003C44 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003C48 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003C4C 9078 F648                  		sub.w	($FFFFF648).w,d0
00003C50 6700                       		beq.s	locret_3C5A
00003C52 6400                       		bcc.s	loc_3C56
00003C54 4441                       		neg.w	d1
00003C56                            
00003C56                            loc_3C56:
00003C56 D378 F648                  		add.w	d1,($FFFFF648).w
00003C5A                            
00003C5A                            locret_3C5A:
00003C5A 4E75                       		rts	
00003C5C                            ; ===========================================================================
00003C5C 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003C5E 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003C60 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003C62 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003C64                            ; ===========================================================================
00003C64                            
00003C64                            DynWater_LZ1:				; XREF: DynWater_Index
00003C64 3038 F700                  		move.w	($FFFFF700).w,d0
00003C68 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003C6C 6600                       		bne.s	loc_3CD0
00003C6E 323C 00B8                  		move.w	#$B8,d1
00003C72 0C40 0600                  		cmpi.w	#$600,d0
00003C76 6500                       		bcs.s	loc_3CB4
00003C78 323C 0108                  		move.w	#$108,d1
00003C7C 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003C82 6500                       		bcs.s	loc_3CBA
00003C84 0C40 0C00                  		cmpi.w	#$C00,d0
00003C88 6500                       		bcs.s	loc_3CB4
00003C8A 323C 0318                  		move.w	#$318,d1
00003C8E 0C40 1080                  		cmpi.w	#$1080,d0
00003C92 6500                       		bcs.s	loc_3CB4
00003C94 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003C9A 323C 05C8                  		move.w	#$5C8,d1
00003C9E 0C40 1380                  		cmpi.w	#$1380,d0
00003CA2 6500                       		bcs.s	loc_3CB4
00003CA4 323C 03A8                  		move.w	#$3A8,d1
00003CA8 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003CAC 6600                       		bne.s	loc_3CB4
00003CAE 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003CB4                            
00003CB4                            loc_3CB4:
00003CB4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CB8 4E75                       		rts	
00003CBA                            ; ===========================================================================
00003CBA                            
00003CBA                            loc_3CBA:				; XREF: DynWater_LZ1
00003CBA 0C40 0C80                  		cmpi.w	#$C80,d0
00003CBE 65F4                       		bcs.s	loc_3CB4
00003CC0 323C 00E8                  		move.w	#$E8,d1
00003CC4 0C40 1500                  		cmpi.w	#$1500,d0
00003CC8 65EA                       		bcs.s	loc_3CB4
00003CCA 323C 0108                  		move.w	#$108,d1
00003CCE 60E4                       		bra.s	loc_3CB4
00003CD0                            ; ===========================================================================
00003CD0                            
00003CD0                            loc_3CD0:				; XREF: DynWater_LZ1
00003CD0 5302                       		subq.b	#1,d2
00003CD2 6600                       		bne.s	locret_3CF4
00003CD4 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003CDA 6400                       		bcc.s	locret_3CF4
00003CDC 323C 03A8                  		move.w	#$3A8,d1
00003CE0 0C40 1300                  		cmpi.w	#$1300,d0
00003CE4 6500                       		bcs.s	loc_3CF0
00003CE6 323C 0108                  		move.w	#$108,d1
00003CEA 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003CF0                            
00003CF0                            loc_3CF0:
00003CF0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CF4                            
00003CF4                            locret_3CF4:
00003CF4 4E75                       		rts	
00003CF6                            ; ===========================================================================
00003CF6                            
00003CF6                            DynWater_LZ2:				; XREF: DynWater_Index
00003CF6 3038 F700                  		move.w	($FFFFF700).w,d0
00003CFA 323C 0328                  		move.w	#$328,d1
00003CFE 0C40 0500                  		cmpi.w	#$500,d0
00003D02 6500                       		bcs.s	loc_3D12
00003D04 323C 03C8                  		move.w	#$3C8,d1
00003D08 0C40 0B00                  		cmpi.w	#$B00,d0
00003D0C 6500                       		bcs.s	loc_3D12
00003D0E 323C 0428                  		move.w	#$428,d1
00003D12                            
00003D12                            loc_3D12:
00003D12 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D16 4E75                       		rts	
00003D18                            ; ===========================================================================
00003D18                            
00003D18                            DynWater_LZ3:				; XREF: DynWater_Index
00003D18 3038 F700                  		move.w	($FFFFF700).w,d0
00003D1C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003D20 6600                       		bne.s	loc_3D5E
00003D22 323C 0900                  		move.w	#$900,d1
00003D26 0C40 0600                  		cmpi.w	#$600,d0
00003D2A 6500                       		bcs.s	loc_3D54
00003D2C 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003D32 6500                       		bcs.s	loc_3D54
00003D34 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D3A 6400                       		bcc.s	loc_3D54
00003D3C 323C 04C8                  		move.w	#$4C8,d1
00003D40 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003D46 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003D4C 303C 00B7                  		move.w	#$B7,d0
00003D50 6100 D64A                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003D54                            
00003D54                            loc_3D54:
00003D54 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D58 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D5C 4E75                       		rts	
00003D5E                            ; ===========================================================================
00003D5E                            
00003D5E                            loc_3D5E:				; XREF: DynWater_LZ3
00003D5E 5302                       		subq.b	#1,d2
00003D60 6600                       		bne.s	loc_3DA8
00003D62 323C 04C8                  		move.w	#$4C8,d1
00003D66 0C40 0770                  		cmpi.w	#$770,d0
00003D6A 6500                       		bcs.s	loc_3DA2
00003D6C 323C 0308                  		move.w	#$308,d1
00003D70 0C40 1400                  		cmpi.w	#$1400,d0
00003D74 6500                       		bcs.s	loc_3DA2
00003D76 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003D7C 6700                       		beq.s	loc_3D8E
00003D7E 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D84 6400                       		bcc.s	loc_3D8E
00003D86 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003D8C 6400                       		bcc.s	loc_3DA2
00003D8E                            
00003D8E                            loc_3D8E:
00003D8E 323C 0508                  		move.w	#$508,d1
00003D92 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D96 0C40 1770                  		cmpi.w	#$1770,d0
00003D9A 6500                       		bcs.s	loc_3DA2
00003D9C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003DA2                            
00003DA2                            loc_3DA2:
00003DA2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DA6 4E75                       		rts	
00003DA8                            ; ===========================================================================
00003DA8                            
00003DA8                            loc_3DA8:
00003DA8 5302                       		subq.b	#1,d2
00003DAA 6600                       		bne.s	loc_3DD2
00003DAC 323C 0508                  		move.w	#$508,d1
00003DB0 0C40 1860                  		cmpi.w	#$1860,d0
00003DB4 6500                       		bcs.s	loc_3DCC
00003DB6 323C 0188                  		move.w	#$188,d1
00003DBA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DBE 6400                       		bcc.s	loc_3DC6
00003DC0 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003DC4 6600                       		bne.s	loc_3DCC
00003DC6                            
00003DC6                            loc_3DC6:
00003DC6 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003DCC                            
00003DCC                            loc_3DCC:
00003DCC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DD0 4E75                       		rts	
00003DD2                            ; ===========================================================================
00003DD2                            
00003DD2                            loc_3DD2:
00003DD2 5302                       		subq.b	#1,d2
00003DD4 6600                       		bne.s	loc_3E0E
00003DD6 323C 0188                  		move.w	#$188,d1
00003DDA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DDE 6500                       		bcs.s	loc_3E04
00003DE0 323C 0900                  		move.w	#$900,d1
00003DE4 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003DE8 6500                       		bcs.s	loc_3E04
00003DEA 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003DF0 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003DF6 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003DFC 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003E02 4E75                       		rts	
00003E04                            ; ===========================================================================
00003E04                            
00003E04                            loc_3E04:
00003E04 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E08 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E0C 4E75                       		rts	
00003E0E                            ; ===========================================================================
00003E0E                            
00003E0E                            loc_3E0E:
00003E0E 0C40 1E00                  		cmpi.w	#$1E00,d0
00003E12 6500                       		bcs.s	locret_3E1A
00003E14 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003E1A                            
00003E1A                            locret_3E1A:
00003E1A 4E75                       		rts	
00003E1C                            ; ===========================================================================
00003E1C                            
00003E1C                            DynWater_SBZ3:				; XREF: DynWater_Index
00003E1C 323C 0228                  		move.w	#$228,d1
00003E20 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003E26 6500                       		bcs.s	loc_3E2C
00003E28 323C 04C8                  		move.w	#$4C8,d1
00003E2C                            
00003E2C                            loc_3E2C:
00003E2C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E30 4E75                       		rts
00003E32                            
00003E32                            ; ---------------------------------------------------------------------------
00003E32                            ; Labyrinth Zone "wind tunnels"	subroutine
00003E32                            ; ---------------------------------------------------------------------------
00003E32                            
00003E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E32                            
00003E32                            
00003E32                            LZWindTunnels:				; XREF: LZWaterEffects
00003E32 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003E36 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003E3A 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003E40 7000                       		moveq	#0,d0
00003E42 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E46 E748                       		lsl.w	#3,d0
00003E48 D4C0                       		adda.w	d0,a2
00003E4A 7200                       		moveq	#0,d1
00003E4C 4A38 FE11                  		tst.b	($FFFFFE11).w
00003E50 6600                       		bne.s	loc_3E56
00003E52 7201                       		moveq	#1,d1
00003E54 514A                       		subq.w	#8,a2
00003E56                            
00003E56                            loc_3E56:
00003E56 43F8 D000                  		lea	($FFFFD000).w,a1
00003E5A                            
00003E5A                            LZWind_Loop:
00003E5A 3029 0008                  		move.w	8(a1),d0
00003E5E B052                       		cmp.w	(a2),d0
00003E60 6500 0000                  		bcs.w	loc_3EF4
00003E64 B06A 0004                  		cmp.w	4(a2),d0
00003E68 6400 0000                  		bcc.w	loc_3EF4
00003E6C 3429 000C                  		move.w	$C(a1),d2
00003E70 B46A 0002                  		cmp.w	2(a2),d2
00003E74 6500                       		bcs.s	loc_3EF4
00003E76 B46A 0006                  		cmp.w	6(a2),d2
00003E7A 6400                       		bcc.s	loc_3EF4
00003E7C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003E80 0200 003F                  		andi.b	#$3F,d0
00003E84 6600                       		bne.s	loc_3E90
00003E86 303C 00D0                  		move.w	#$D0,d0
00003E8A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003E90                            
00003E90                            loc_3E90:
00003E90 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003E94 6600 0000                  		bne.w	locret_3F0A
00003E98 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003E9E 6400                       		bcc.s	loc_3F06
00003EA0 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003EA6 0440 0080                  		subi.w	#$80,d0
00003EAA B052                       		cmp.w	(a2),d0
00003EAC 6400                       		bcc.s	LZWind_Move
00003EAE 7002                       		moveq	#2,d0
00003EB0 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003EB6 6600                       		bne.s	loc_3EBA
00003EB8 4440                       		neg.w	d0
00003EBA                            
00003EBA                            loc_3EBA:
00003EBA D169 000C                  		add.w	d0,$C(a1)
00003EBE                            
00003EBE                            LZWind_Move:
00003EBE 5869 0008                  		addq.w	#4,8(a1)
00003EC2 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003EC8 337C 0000 0012             		move.w	#0,$12(a1)
00003ECE 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003ED4 08E9 0001 0022             		bset	#1,$22(a1)
00003EDA 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003EE0 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003EE2 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003EE6                            
00003EE6                            LZWind_MoveDown:
00003EE6 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003EEC 6700                       		beq.s	locret_3EF2	; if not, branch
00003EEE 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003EF2                            
00003EF2                            locret_3EF2:
00003EF2 4E75                       		rts	
00003EF4                            ; ===========================================================================
00003EF4                            
00003EF4                            loc_3EF4:				; XREF: LZWindTunnels
00003EF4 504A                       		addq.w	#8,a2
00003EF6 51C9 FF62                  		dbf	d1,LZWind_Loop
00003EFA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003EFE 6700                       		beq.s	locret_3F0A
00003F00 137C 0000 001C             		move.b	#0,$1C(a1)
00003F06                            
00003F06                            loc_3F06:
00003F06 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003F0A                            
00003F0A                            locret_3F0A:
00003F0A 4E75                       		rts	
00003F0C                            ; End of function LZWindTunnels
00003F0C                            
00003F0C                            ; ===========================================================================
00003F0C 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003F14 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00003F26 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00003F34                            					; XREF: LZWindTunnels
00003F34                            		even
00003F34                            
00003F34                            ; ---------------------------------------------------------------------------
00003F34                            ; Labyrinth Zone water slide subroutine
00003F34                            ; ---------------------------------------------------------------------------
00003F34                            
00003F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F34                            
00003F34                            
00003F34                            LZWaterSlides:				; XREF: LZWaterEffects
00003F34 43F8 D000                  		lea	($FFFFD000).w,a1
00003F38 0829 0001 0022             		btst	#1,$22(a1)
00003F3E 6600                       		bne.s	loc_3F6A
00003F40 3029 000C                  		move.w	$C(a1),d0
00003F44 E248                       		lsr.w	#1,d0
00003F46 0240 0380                  		andi.w	#$380,d0
00003F4A 1229 0008                  		move.b	8(a1),d1
00003F4E 0241 007F                  		andi.w	#$7F,d1
00003F52 D041                       		add.w	d1,d0
00003F54 45F8 A400                  		lea	($FFFFA400).w,a2
00003F58 1032 0000                  		move.b	(a2,d0.w),d0
00003F5C 45FA 0000                  		lea	byte_3FCF(pc),a2
00003F60 7206                       		moveq	#6,d1
00003F62                            
00003F62                            loc_3F62:
00003F62 B022                       		cmp.b	-(a2),d0
00003F64 57C9 FFFC                  		dbeq	d1,loc_3F62
00003F68 6700                       		beq.s	LZSlide_Move
00003F6A                            
00003F6A                            loc_3F6A:
00003F6A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00003F6E 6700                       		beq.s	locret_3F7A
00003F70 337C 0005 003E             		move.w	#5,$3E(a1)
00003F76 4238 F7CA                  		clr.b	($FFFFF7CA).w
00003F7A                            
00003F7A                            locret_3F7A:
00003F7A 4E75                       		rts	
00003F7C                            ; ===========================================================================
00003F7C                            
00003F7C                            LZSlide_Move:				; XREF: LZWaterSlides
00003F7C 0C41 0003                  		cmpi.w	#3,d1
00003F80 6400                       		bcc.s	loc_3F84
00003F82 4E71                       		nop	
00003F84                            
00003F84                            loc_3F84:
00003F84 08A9 0000 0022             		bclr	#0,$22(a1)
00003F8A 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00003F8E 1340 0014                  		move.b	d0,$14(a1)
00003F92 6A00                       		bpl.s	loc_3F9A
00003F94 08E9 0000 0022             		bset	#0,$22(a1)
00003F9A                            
00003F9A                            loc_3F9A:
00003F9A 4229 0015                  		clr.b	$15(a1)
00003F9E 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00003FA4 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00003FAA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003FAE 0200 001F                  		andi.b	#$1F,d0
00003FB2 6600                       		bne.s	locret_3FBE
00003FB4 303C 00D0                  		move.w	#$D0,d0
00003FB8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play water sound
00003FBE                            
00003FBE                            locret_3FBE:
00003FBE 4E75                       		rts	
00003FC0                            ; End of function LZWaterSlides
00003FC0                            
00003FC0                            ; ===========================================================================
00003FC0 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00003FCF 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00003FD0                            		even
00003FD0                            
00003FD0                            ; ---------------------------------------------------------------------------
00003FD0                            ; Subroutine to	move Sonic in demo mode
00003FD0                            ; ---------------------------------------------------------------------------
00003FD0                            
00003FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FD0                            
00003FD0                            
00003FD0                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00003FD0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003FD4 6600                       		bne.s	MoveDemo_On	; if yes, branch
00003FD6 4E75                       		rts	
00003FD8                            ; ===========================================================================
00003FD8                            
00003FD8                            ; This is an unused subroutine for recording a demo
00003FD8                            
00003FD8                            MoveDemo_Record:
00003FD8 43F9 0008 0000             		lea	($80000).l,a1
00003FDE 3038 F790                  		move.w	($FFFFF790).w,d0
00003FE2 D2C0                       		adda.w	d0,a1
00003FE4 1038 F604                  		move.b	($FFFFF604).w,d0
00003FE8 B011                       		cmp.b	(a1),d0
00003FEA 6600                       		bne.s	loc_3FFA
00003FEC 5229 0001                  		addq.b	#1,1(a1)
00003FF0 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00003FF6 6700                       		beq.s	loc_3FFA
00003FF8 4E75                       		rts	
00003FFA                            ; ===========================================================================
00003FFA                            
00003FFA                            loc_3FFA:				; XREF: MoveDemo_Record
00003FFA 1340 0002                  		move.b	d0,2(a1)
00003FFE 137C 0000 0003             		move.b	#0,3(a1)
00004004 5478 F790                  		addq.w	#2,($FFFFF790).w
00004008 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000400E 4E75                       		rts	
00004010                            ; ===========================================================================
00004010                            
00004010                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004010 4A38 F604                  		tst.b	($FFFFF604).w
00004014 6A00                       		bpl.s	loc_4022
00004016 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000401A 6B00                       		bmi.s	loc_4022
0000401C 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004022                            
00004022                            loc_4022:
00004022 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004028 7000                       		moveq	#0,d0
0000402A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000402E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004034 6600                       		bne.s	loc_4038
00004036 7006                       		moveq	#6,d0
00004038                            
00004038                            loc_4038:
00004038 E548                       		lsl.w	#2,d0
0000403A 2271 0000                  		movea.l	(a1,d0.w),a1
0000403E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004042 6A00                       		bpl.s	loc_4056
00004044 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000404A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000404E 5340                       		subq.w	#1,d0
00004050 E548                       		lsl.w	#2,d0
00004052 2271 0000                  		movea.l	(a1,d0.w),a1
00004056                            
00004056                            loc_4056:
00004056 3038 F790                  		move.w	($FFFFF790).w,d0
0000405A D2C0                       		adda.w	d0,a1
0000405C 1011                       		move.b	(a1),d0
0000405E 41F8 F604                  		lea	($FFFFF604).w,a0
00004062 1200                       		move.b	d0,d1
00004064 1410                       		move.b	(a0),d2
00004066 B500                       		eor.b	d2,d0
00004068 10C1                       		move.b	d1,(a0)+
0000406A C001                       		and.b	d1,d0
0000406C 10C0                       		move.b	d0,(a0)+
0000406E 5338 F792                  		subq.b	#1,($FFFFF792).w
00004072 6400                       		bcc.s	locret_407E
00004074 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000407A 5478 F790                  		addq.w	#2,($FFFFF790).w
0000407E                            
0000407E                            locret_407E:
0000407E 4E75                       		rts	
00004080                            ; End of function MoveSonicInDemo
00004080                            
00004080                            ; ===========================================================================
00004080                            ; ---------------------------------------------------------------------------
00004080                            ; Demo sequence	pointers
00004080                            ; ---------------------------------------------------------------------------
00004080                            Demo_Index:
00004080                            	include "_inc\Demo pointers for intro.asm"
00004080                            ; ---------------------------------------------------------------------------
00004080                            ; Demo sequence	pointers
00004080                            ; ---------------------------------------------------------------------------
00004080 0000 0000                  	dc.l Demo_GHZ
00004084 0000 0000                  	dc.l Demo_GHZ
00004088 0000 0000                  	dc.l Demo_MZ
0000408C 0000 0000                  	dc.l Demo_MZ
00004090 0000 0000                  	dc.l Demo_SYZ
00004094 0000 0000                  	dc.l Demo_SYZ
00004098 0000 0000                  	dc.l Demo_SS
0000409C 0000 0000                  	dc.l Demo_SS
0000409C 0000 0000                  	dc.l Demo_SS
000040A0                            
000040A0                            Demo_EndIndex:
000040A0                            	include "_inc\Demo pointers for ending.asm"
000040A0                            ; ---------------------------------------------------------------------------
000040A0                            ; Demo (ending) sequence pointers
000040A0                            ; ---------------------------------------------------------------------------
000040A0 0000 0000                  	dc.l Demo_EndGHZ1
000040A4 0000 0000                  	dc.l Demo_EndMZ
000040A8 0000 0000                  	dc.l Demo_EndSYZ
000040AC 0000 0000                  	dc.l Demo_EndLZ
000040B0 0000 0000                  	dc.l Demo_EndSLZ
000040B4 0000 0000                  	dc.l Demo_EndSBZ1
000040B8 0000 0000                  	dc.l Demo_EndSBZ2
000040BC 0000 0000                  	dc.l Demo_EndGHZ2
000040BC 0000 0000                  	dc.l Demo_EndGHZ2
000040C0                            
000040C0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000040D0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000040E0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000040F0                            		even
000040F0                            
000040F0                            ; ---------------------------------------------------------------------------
000040F0                            ; Collision index loading subroutine
000040F0                            ; ---------------------------------------------------------------------------
000040F0                            
000040F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040F0                            
000040F0                            
000040F0                            ColIndexLoad:				; XREF: Level
000040F0 7000                       		moveq	#0,d0
000040F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000040F6 E548                       		lsl.w	#2,d0
000040F8 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000040FE 4E75                       		rts	
00004100                            ; End of function ColIndexLoad
00004100                            
00004100                            ; ===========================================================================
00004100                            ; ---------------------------------------------------------------------------
00004100                            ; Collision index pointers
00004100                            ; ---------------------------------------------------------------------------
00004100                            ColPointers:
00004100                            	include "_inc\Collision index pointers.asm"
00004100                            ; ---------------------------------------------------------------------------
00004100                            ; Collision index pointers
00004100                            ; ---------------------------------------------------------------------------
00004100 0000 0000                  	dc.l Col_GHZ
00004104 0000 0000                  	dc.l Col_LZ
00004108 0000 0000                  	dc.l Col_MZ
0000410C 0000 0000                  	dc.l Col_SLZ
00004110 0000 0000                  	dc.l Col_SYZ
00004114 0000 0000                  	dc.l Col_SBZ
00004114 0000 0000                  	dc.l Col_SBZ
00004118                            
00004118                            ; ---------------------------------------------------------------------------
00004118                            ; Oscillating number subroutine
00004118                            ; ---------------------------------------------------------------------------
00004118                            
00004118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004118                            
00004118                            
00004118                            OscillateNumInit:			; XREF: Level
00004118 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000411C 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004122 7220                       		moveq	#$20,d1
00004124                            
00004124                            Osc_Loop:
00004124 32DA                       		move.w	(a2)+,(a1)+
00004126 51C9 FFFC                  		dbf	d1,Osc_Loop
0000412A 4E75                       		rts	
0000412C                            ; End of function OscillateNumInit
0000412C                            
0000412C                            ; ===========================================================================
0000412C 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004130 0000 0080                  		dc.w 0,	$80
00004134 0000 0080                  		dc.w 0,	$80
00004138 0000 0080                  		dc.w 0,	$80
0000413C 0000 0080                  		dc.w 0,	$80
00004140 0000 0080                  		dc.w 0,	$80
00004144 0000 0080                  		dc.w 0,	$80
00004148 0000 0080                  		dc.w 0,	$80
0000414C 0000 0080                  		dc.w 0,	$80
00004150 0000 50F0                  		dc.w 0,	$50F0
00004154 011E 2080                  		dc.w $11E, $2080
00004158 00B4 3080                  		dc.w $B4, $3080
0000415C 010E 5080                  		dc.w $10E, $5080
00004160 01C2 7080                  		dc.w $1C2, $7080
00004164 0276 0080                  		dc.w $276, $80
00004168 0000 0080                  		dc.w 0,	$80
0000416C 0000                       		dc.w 0
0000416E                            		even
0000416E                            
0000416E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000416E                            
0000416E                            
0000416E                            OscillateNumDo:				; XREF: Level
0000416E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004174 6400                       		bcc.s	locret_41C4
00004176 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000417A 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004180 3619                       		move.w	(a1)+,d3
00004182 720F                       		moveq	#$F,d1
00004184                            
00004184                            loc_4184:
00004184 341A                       		move.w	(a2)+,d2
00004186 381A                       		move.w	(a2)+,d4
00004188 0303                       		btst	d1,d3
0000418A 6600                       		bne.s	loc_41A4
0000418C 3029 0002                  		move.w	2(a1),d0
00004190 D042                       		add.w	d2,d0
00004192 3340 0002                  		move.w	d0,2(a1)
00004196 D151                       		add.w	d0,0(a1)
00004198 B811                       		cmp.b	0(a1),d4
0000419A 6200                       		bhi.s	loc_41BA
0000419C 03C3                       		bset	d1,d3
0000419E 6000                       		bra.s	loc_41BA
000041A0                            ; ===========================================================================
000041A0                            
000041A0                            loc_41A4:				; XREF: OscillateNumDo
000041A0 3029 0002                  		move.w	2(a1),d0
000041A4 9042                       		sub.w	d2,d0
000041A6 3340 0002                  		move.w	d0,2(a1)
000041AA D151                       		add.w	d0,0(a1)
000041AC B811                       		cmp.b	0(a1),d4
000041AE 6300                       		bls.s	loc_41BA
000041B0 0383                       		bclr	d1,d3
000041B2                            
000041B2                            loc_41BA:
000041B2 5849                       		addq.w	#4,a1
000041B4 51C9 FFCE                  		dbf	d1,loc_4184
000041B8 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000041BC                            
000041BC                            locret_41C4:
000041BC 4E75                       		rts	
000041BE                            ; End of function OscillateNumDo
000041BE                            
000041BE                            ; ===========================================================================
000041BE 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000041C2 0002 0018                  		dc.w 2,	$18
000041C6 0002 0020                  		dc.w 2,	$20
000041CA 0002 0030                  		dc.w 2,	$30
000041CE 0004 0020                  		dc.w 4,	$20
000041D2 0008 0008                  		dc.w 8,	8
000041D6 0008 0040                  		dc.w 8,	$40
000041DA 0004 0040                  		dc.w 4,	$40
000041DE 0002 0050                  		dc.w 2,	$50
000041E2 0002 0050                  		dc.w 2,	$50
000041E6 0002 0020                  		dc.w 2,	$20
000041EA 0003 0030                  		dc.w 3,	$30
000041EE 0005 0050                  		dc.w 5,	$50
000041F2 0007 0070                  		dc.w 7,	$70
000041F6 0002 0010                  		dc.w 2,	$10
000041FA 0002 0010                  		dc.w 2,	$10
000041FE                            		even
000041FE                            
000041FE                            ; ---------------------------------------------------------------------------
000041FE                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000041FE                            ; ---------------------------------------------------------------------------
000041FE                            
000041FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041FE                            
000041FE                            
000041FE                            ChangeRingFrame:			; XREF: Level
000041FE 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004202 6A00                       		bpl.s	loc_421C
00004204 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000420A 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000420E 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004214                            
00004214                            loc_421C:
00004214 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004218 6A00                       		bpl.s	loc_4232
0000421A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004220 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004224 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000422A                            
0000422A                            loc_4232:
0000422A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000422E 6A00                       		bpl.s	loc_4250
00004230 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004236 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000423A 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004240 6500                       		bcs.s	loc_4250
00004242 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004248                            
00004248                            loc_4250:
00004248 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000424C 6700                       		beq.s	locret_4272
0000424E 7000                       		moveq	#0,d0
00004250 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004254 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004258 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000425C EF58                       		rol.w	#7,d0
0000425E 0240 0003                  		andi.w	#3,d0
00004262 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004266 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000426A                            
0000426A                            locret_4272:
0000426A 4E75                       		rts	
0000426C                            ; End of function ChangeRingFrame
0000426C                            
0000426C                            ; ---------------------------------------------------------------------------
0000426C                            ; End-of-act signpost pattern loading subroutine
0000426C                            ; ---------------------------------------------------------------------------
0000426C                            
0000426C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000426C                            
0000426C                            
0000426C                            SignpostArtLoad:			; XREF: Level
0000426C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004270 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004274 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000427A 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000427C 3038 F700                  		move.w	($FFFFF700).w,d0
00004280 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004284 0441 0100                  		subi.w	#$100,d1
00004288 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000428A 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000428C 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004290 6700                       		beq.s	Signpost_Exit
00004292 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004296 6700                       		beq.s	Signpost_Exit
00004298 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000429C 7012                       		moveq	#$12,d0
0000429E 6000 D312                  		bra.w	LoadPLC2	; load signpost	patterns
000042A2                            ; ===========================================================================
000042A2                            
000042A2                            Signpost_Exit:
000042A2 4E75                       		rts	
000042A4                            ; End of function SignpostArtLoad
000042A4                            
000042A4                            ; ===========================================================================
000042A4                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004324                            Demo_MZ:	incbin	demodata\i_mz.bin
00004454                            Demo_SYZ:	incbin	demodata\i_syz.bin
000044D4                            Demo_SS:	incbin	demodata\i_ss.bin
000045D4                            ; ===========================================================================
000045D4                            
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            ; Special Stage
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            
000045D4                            SpecialStage:				; XREF: GameModeArray
000045D4 303C 00CA                  		move.w	#$CA,d0
000045D8 6100 CDC2                  		bsr.w	PlaySound_Special ; play special stage entry sound
000045DC 6100 D99E                  		bsr.w	Pal_MakeFlash
000045E0 46FC 2700                  		move	#$2700,sr
000045E4 4DF9 00C0 0004             		lea	($C00004).l,a6
000045EA 3CBC 8B03                  		move.w	#$8B03,(a6)
000045EE 3CBC 8004                  		move.w	#$8004,(a6)
000045F2 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000045F8 3CBC 9011                  		move.w	#$9011,(a6)
000045FC 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004600 0200 00BF                  		andi.b	#$BF,d0
00004604 33C0 00C0 0004             		move.w	d0,($C00004).l
0000460A 6100 CCB8                  		bsr.w	ClearScreen
0000460E 46FC 2300                  		move	#$2300,sr
00004612 4BF9 00C0 0004             		lea	($C00004).l,a5
00004618 3ABC 8F01                  		move.w	#$8F01,(a5)
0000461C 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004622 3ABC 9780                  		move.w	#$9780,(a5)
00004626 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000462C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004634                            
00004634                            loc_463C:
00004634 3215                       		move.w	(a5),d1
00004636 0801 0001                  		btst	#1,d1
0000463A 66F8                       		bne.s	loc_463C
0000463C 3ABC 8F02                  		move.w	#$8F02,(a5)
00004640 6100 0000                  		bsr.w	SS_BGLoad
00004644 7014                       		moveq	#$14,d0
00004646 6100 D0A4                  		bsr.w	RunPLC_ROM	; load special stage patterns
0000464A 43F8 D000                  		lea	($FFFFD000).w,a1
0000464E 7000                       		moveq	#0,d0
00004650 323C 07FF                  		move.w	#$7FF,d1
00004654                            
00004654                            SS_ClrObjRam:
00004654 22C0                       		move.l	d0,(a1)+
00004656 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000465A                            
0000465A 43F8 F700                  		lea	($FFFFF700).w,a1
0000465E 7000                       		moveq	#0,d0
00004660 323C 003F                  		move.w	#$3F,d1
00004664                            
00004664                            SS_ClrRam:
00004664 22C0                       		move.l	d0,(a1)+
00004666 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000466A                            
0000466A 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000466E 7000                       		moveq	#0,d0
00004670 323C 0027                  		move.w	#$27,d1
00004674                            
00004674                            SS_ClrRam2:
00004674 22C0                       		move.l	d0,(a1)+
00004676 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000467A                            
0000467A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000467E 7000                       		moveq	#0,d0
00004680 323C 007F                  		move.w	#$7F,d1
00004684                            
00004684                            SS_ClrNemRam:
00004684 22C0                       		move.l	d0,(a1)+
00004686 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000468A                            
0000468A 4238 F64E                  		clr.b	($FFFFF64E).w
0000468E 4278 FE02                  		clr.w	($FFFFFE02).w
00004692 700A                       		moveq	#$A,d0
00004694 6100 DA66                  		bsr.w	PalLoad1	; load special stage pallet
00004698 4EB9 0000 0000             		jsr	SS_Load
0000469E 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000046A6 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000046AE 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000046B4 6100 0000                  		bsr.w	PalCycle_SS
000046B8 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000046BC 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000046C2 303C 0089                  		move.w	#$89,d0
000046C6 6100 CCCE                  		bsr.w	PlaySound	; play special stage BG	music
000046CA 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000046D0 43F9 0000 4080             		lea	(Demo_Index).l,a1
000046D6 7006                       		moveq	#6,d0
000046D8 E548                       		lsl.w	#2,d0
000046DA 2271 0000                  		movea.l	(a1,d0.w),a1
000046DE 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000046E4 5338 F792                  		subq.b	#1,($FFFFF792).w
000046E8 4278 FE20                  		clr.w	($FFFFFE20).w
000046EC 4238 FE1B                  		clr.b	($FFFFFE1B).w
000046F0 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000046F6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000046FC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004700 6700                       		beq.s	SS_NoDebug	; if not, branch
00004702 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004708 6700                       		beq.s	SS_NoDebug	; if not, branch
0000470A 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004710                            
00004710                            SS_NoDebug:
00004710 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004714 0000 0040                  		ori.b	#$40,d0
00004718 33C0 00C0 0004             		move.w	d0,($C00004).l
0000471E 6100 D7B0                  		bsr.w	Pal_MakeWhite
00004722                            
00004722                            ; ---------------------------------------------------------------------------
00004722                            ; Main Special Stage loop
00004722                            ; ---------------------------------------------------------------------------
00004722                            
00004722                            SS_MainLoop:
00004722 6100 CC84                  		bsr.w	PauseGame
00004726 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000472C 6100 E27A                  		bsr.w	DelayProgram
00004730 6100 F89E                  		bsr.w	MoveSonicInDemo
00004734 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000473A 4EB9 0000 0000             		jsr	ObjectsLoad
00004740 4EB9 0000 0000             		jsr	BuildSprites
00004746 4EB9 0000 0000             		jsr	SS_ShowLayout
0000474C 6100 0000                  		bsr.w	SS_BGAnimate
00004750 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004754 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004756 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000475A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000475E                            
0000475E                            SS_ChkEnd:
0000475E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004764 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004768                            
00004768 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000476C 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004770 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004776 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000477C 6500                       		bcs.s	SS_End		; if not, branch
0000477E 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004782                            
00004782                            SS_End:
00004782 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004788 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000478E 4278 F794                  		clr.w	($FFFFF794).w
00004792                            
00004792                            SS_EndLoop:
00004792 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004798 6100 E20E                  		bsr.w	DelayProgram
0000479C 6100 F832                  		bsr.w	MoveSonicInDemo
000047A0 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000047A6 4EB9 0000 0000             		jsr	ObjectsLoad
000047AC 4EB9 0000 0000             		jsr	BuildSprites
000047B2 4EB9 0000 0000             		jsr	SS_ShowLayout
000047B8 6100 0000                  		bsr.w	SS_BGAnimate
000047BC 5378 F794                  		subq.w	#1,($FFFFF794).w
000047C0 6A00                       		bpl.s	loc_47D4
000047C2 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000047C8 6100 D7D2                  		bsr.w	Pal_ToWhite
000047CC                            
000047CC                            loc_47D4:
000047CC 4A78 F614                  		tst.w	($FFFFF614).w
000047D0 66C0                       		bne.s	SS_EndLoop
000047D2                            
000047D2 46FC 2700                  		move	#$2700,sr
000047D6 4DF9 00C0 0004             		lea	($C00004).l,a6
000047DC 3CBC 8230                  		move.w	#$8230,(a6)
000047E0 3CBC 8407                  		move.w	#$8407,(a6)
000047E4 3CBC 9001                  		move.w	#$9001,(a6)
000047E8 6100 CADA                  		bsr.w	ClearScreen
000047EC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000047F6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000047FC 6100 CC42                  		bsr.w	NemDec
00004800 4EB9 0000 0000             		jsr	Hud_Base
00004806 46FC 2300                  		move	#$2300,sr
0000480A 7011                       		moveq	#$11,d0
0000480C 6100 D90A                  		bsr.w	PalLoad2	; load results screen pallet
00004810 7000                       		moveq	#0,d0
00004812 6100 CD9E                  		bsr.w	LoadPLC2
00004816 701B                       		moveq	#$1B,d0
00004818 6100 CD66                  		bsr.w	LoadPLC		; load results screen patterns
0000481C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004822 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004828 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000482C C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004830 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004834 303C 008E                  		move.w	#$8E,d0
00004838 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000483E 43F8 D000                  		lea	($FFFFD000).w,a1
00004842 7000                       		moveq	#0,d0
00004844 323C 07FF                  		move.w	#$7FF,d1
00004848                            
00004848                            SS_EndClrObjRam:
00004848 22C0                       		move.l	d0,(a1)+
0000484A 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000484E                            
0000484E 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004854                            
00004854                            SS_NormalExit:
00004854 6100 CB52                  		bsr.w	PauseGame
00004858 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000485E 6100 E148                  		bsr.w	DelayProgram
00004862 4EB9 0000 0000             		jsr	ObjectsLoad
00004868 4EB9 0000 0000             		jsr	BuildSprites
0000486E 6100 CD7C                  		bsr.w	RunPLC_RAM
00004872 4A78 FE02                  		tst.w	($FFFFFE02).w
00004876 67DC                       		beq.s	SS_NormalExit
00004878 4AB8 F680                  		tst.l	($FFFFF680).w
0000487C 66D6                       		bne.s	SS_NormalExit
0000487E 303C 00CA                  		move.w	#$CA,d0
00004882 6100 CB18                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004886 6100 D6F4                  		bsr.w	Pal_MakeFlash
0000488A 4E75                       		rts	
0000488C                            ; ===========================================================================
0000488C                            
0000488C                            SS_ToSegaScreen:
0000488C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004892 4E75                       		rts
00004894                            
00004894                            ; ---------------------------------------------------------------------------
00004894                            ; Special stage	background loading subroutine
00004894                            ; ---------------------------------------------------------------------------
00004894                            
00004894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004894                            
00004894                            
00004894                            SS_BGLoad:				; XREF: SpecialStage
00004894 43F9 00FF 0000             		lea	($FF0000).l,a1
0000489A 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000048A0 303C 4051                  		move.w	#$4051,d0
000048A4 6100 CE78                  		bsr.w	EniDec
000048A8 263C 5000 0001             		move.l	#$50000001,d3
000048AE 45F9 00FF 0080             		lea	($FF0080).l,a2
000048B4 7E06                       		moveq	#6,d7
000048B6                            
000048B6                            loc_48BE:
000048B6 2003                       		move.l	d3,d0
000048B8 7C03                       		moveq	#3,d6
000048BA 7800                       		moveq	#0,d4
000048BC 0C47 0003                  		cmpi.w	#3,d7
000048C0 6400                       		bcc.s	loc_48CC
000048C2 7801                       		moveq	#1,d4
000048C4                            
000048C4                            loc_48CC:
000048C4 7A07                       		moveq	#7,d5
000048C6                            
000048C6                            loc_48CE:
000048C6 224A                       		movea.l	a2,a1
000048C8 0A04 0001                  		eori.b	#1,d4
000048CC 6600                       		bne.s	loc_48E2
000048CE 0C47 0006                  		cmpi.w	#6,d7
000048D2 6600                       		bne.s	loc_48F2
000048D4 43F9 00FF 0000             		lea	($FF0000).l,a1
000048DA                            
000048DA                            loc_48E2:
000048DA 48E7 F800                  		movem.l	d0-d4,-(sp)
000048DE 7207                       		moveq	#7,d1
000048E0 7407                       		moveq	#7,d2
000048E2 6100 CB3C                  		bsr.w	ShowVDPGraphics
000048E6 4CDF 001F                  		movem.l	(sp)+,d0-d4
000048EA                            
000048EA                            loc_48F2:
000048EA 0680 0010 0000             		addi.l	#$100000,d0
000048F0 51CD FFD4                  		dbf	d5,loc_48CE
000048F4 0680 0380 0000             		addi.l	#$3800000,d0
000048FA 0A04 0001                  		eori.b	#1,d4
000048FE 51CE FFC4                  		dbf	d6,loc_48CC
00004902 0683 1000 0000             		addi.l	#$10000000,d3
00004908 6A00                       		bpl.s	loc_491C
0000490A 4843                       		swap	d3
0000490C 0683 0000 C000             		addi.l	#$C000,d3
00004912 4843                       		swap	d3
00004914                            
00004914                            loc_491C:
00004914 D4FC 0080                  		adda.w	#$80,a2
00004918 51CF FF9C                  		dbf	d7,loc_48BE
0000491C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004922 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004928 303C 4000                  		move.w	#$4000,d0
0000492C 6100 CDF0                  		bsr.w	EniDec
00004930 43F9 00FF 0000             		lea	($FF0000).l,a1
00004936 203C 4000 0003             		move.l	#$40000003,d0
0000493C 723F                       		moveq	#$3F,d1
0000493E 741F                       		moveq	#$1F,d2
00004940 6100 CADE                  		bsr.w	ShowVDPGraphics
00004944 43F9 00FF 0000             		lea	($FF0000).l,a1
0000494A 203C 5000 0003             		move.l	#$50000003,d0
00004950 723F                       		moveq	#$3F,d1
00004952 743F                       		moveq	#$3F,d2
00004954 6100 CACA                  		bsr.w	ShowVDPGraphics
00004958 4E75                       		rts	
0000495A                            ; End of function SS_BGLoad
0000495A                            
0000495A                            ; ---------------------------------------------------------------------------
0000495A                            ; Pallet cycling routine - special stage
0000495A                            ; ---------------------------------------------------------------------------
0000495A                            
0000495A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000495A                            
0000495A                            
0000495A                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
0000495A 4A78 F63A                  		tst.w	($FFFFF63A).w
0000495E 6600                       		bne.s	locret_49E6
00004960 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004964 6A00                       		bpl.s	locret_49E6
00004966 4DF9 00C0 0004             		lea	($C00004).l,a6
0000496C 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004970 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004974 0240 001F                  		andi.w	#$1F,d0
00004978 E548                       		lsl.w	#2,d0
0000497A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004980 D0C0                       		adda.w	d0,a0
00004982 1018                       		move.b	(a0)+,d0
00004984 6A00                       		bpl.s	loc_4992
00004986 303C 01FF                  		move.w	#$1FF,d0
0000498A                            
0000498A                            loc_4992:
0000498A 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000498E 7000                       		moveq	#0,d0
00004990 1018                       		move.b	(a0)+,d0
00004992 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004996 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000499C 43F1 0000                  		lea	(a1,d0.w),a1
000049A0 303C 8200                  		move.w	#-$7E00,d0
000049A4 1019                       		move.b	(a1)+,d0
000049A6 3C80                       		move.w	d0,(a6)
000049A8 11D1 F616                  		move.b	(a1),($FFFFF616).w
000049AC 303C 8400                  		move.w	#-$7C00,d0
000049B0 1018                       		move.b	(a0)+,d0
000049B2 3C80                       		move.w	d0,(a6)
000049B4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000049BE 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000049C6 7000                       		moveq	#0,d0
000049C8 1018                       		move.b	(a0)+,d0
000049CA 6B00                       		bmi.s	loc_49E8
000049CC 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000049D2 D2C0                       		adda.w	d0,a1
000049D4 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000049D8 24D9                       		move.l	(a1)+,(a2)+
000049DA 24D9                       		move.l	(a1)+,(a2)+
000049DC 24D9                       		move.l	(a1)+,(a2)+
000049DE                            
000049DE                            locret_49E6:
000049DE 4E75                       		rts	
000049E0                            ; ===========================================================================
000049E0                            
000049E0                            loc_49E8:				; XREF: PalCycle_SS
000049E0 3238 F79E                  		move.w	($FFFFF79E).w,d1
000049E4 0C40 008A                  		cmpi.w	#$8A,d0
000049E8 6500                       		bcs.s	loc_49F4
000049EA 5241                       		addq.w	#1,d1
000049EC                            
000049EC                            loc_49F4:
000049EC C2FC 002A                  		mulu.w	#$2A,d1
000049F0 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000049F6 D2C1                       		adda.w	d1,a1
000049F8 0240 007F                  		andi.w	#$7F,d0
000049FC 0880 0000                  		bclr	#0,d0
00004A00 6700                       		beq.s	loc_4A18
00004A02 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004A06 24D1                       		move.l	(a1),(a2)+
00004A08 24E9 0004                  		move.l	4(a1),(a2)+
00004A0C 24E9 0008                  		move.l	8(a1),(a2)+
00004A10                            
00004A10                            loc_4A18:
00004A10 D2FC 000C                  		adda.w	#$C,a1
00004A14 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004A18 0C40 000A                  		cmpi.w	#$A,d0
00004A1C 6500                       		bcs.s	loc_4A2E
00004A1E 0440 000A                  		subi.w	#$A,d0
00004A22 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004A26                            
00004A26                            loc_4A2E:
00004A26 3200                       		move.w	d0,d1
00004A28 D040                       		add.w	d0,d0
00004A2A D041                       		add.w	d1,d0
00004A2C D2C0                       		adda.w	d0,a1
00004A2E 24D9                       		move.l	(a1)+,(a2)+
00004A30 34D9                       		move.w	(a1)+,(a2)+
00004A32 4E75                       		rts	
00004A34                            ; End of function PalCycle_SS
00004A34                            
00004A34                            ; ===========================================================================
00004A34 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004A44                            					; XREF: PalCycle_SS
00004A44 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004A54 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004A64 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004A74 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004A84 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004A94 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004AA4 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004AB4                            		even
00004AB4 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004AC2                            					; XREF: PalCycle_SS
00004AC2                            		even
00004AC2                            
00004AC2                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004B0A                            		even
00004B0A                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004BDC                            		even
00004BDC                            
00004BDC                            ; ---------------------------------------------------------------------------
00004BDC                            ; Subroutine to	make the special stage background animated
00004BDC                            ; ---------------------------------------------------------------------------
00004BDC                            
00004BDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BDC                            
00004BDC                            
00004BDC                            SS_BGAnimate:				; XREF: SpecialStage
00004BDC 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004BE0 6600                       		bne.s	loc_4BF6
00004BE2 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004BE8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004BEE                            
00004BEE                            loc_4BF6:
00004BEE 0C40 0008                  		cmpi.w	#8,d0
00004BF2 6400                       		bcc.s	loc_4C4E
00004BF4 0C40 0006                  		cmpi.w	#6,d0
00004BF8 6600                       		bne.s	loc_4C10
00004BFA 5278 F718                  		addq.w	#1,($FFFFF718).w
00004BFE 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004C02 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004C08                            
00004C08                            loc_4C10:
00004C08 7000                       		moveq	#0,d0
00004C0A 3038 F708                  		move.w	($FFFFF708).w,d0
00004C0E 4440                       		neg.w	d0
00004C10 4840                       		swap	d0
00004C12 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004C18 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C1C 7609                       		moveq	#9,d3
00004C1E                            
00004C1E                            loc_4C26:
00004C1E 302B 0002                  		move.w	2(a3),d0
00004C22 6100 DDB6                  		bsr.w	CalcSine
00004C26 7400                       		moveq	#0,d2
00004C28 1419                       		move.b	(a1)+,d2
00004C2A C1C2                       		muls.w	d2,d0
00004C2C E080                       		asr.l	#8,d0
00004C2E 36C0                       		move.w	d0,(a3)+
00004C30 1419                       		move.b	(a1)+,d2
00004C32 4882                       		ext.w	d2
00004C34 D55B                       		add.w	d2,(a3)+
00004C36 51CB FFE6                  		dbf	d3,loc_4C26
00004C3A 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C3E 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004C44 6000                       		bra.s	loc_4C7E
00004C46                            ; ===========================================================================
00004C46                            
00004C46                            loc_4C4E:				; XREF: SS_BGAnimate
00004C46 0C40 000C                  		cmpi.w	#$C,d0
00004C4A 6600                       		bne.s	loc_4C74
00004C4C 5378 F718                  		subq.w	#1,($FFFFF718).w
00004C50 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C54 243C 0001 8000             		move.l	#$18000,d2
00004C5A 7206                       		moveq	#6,d1
00004C5C                            
00004C5C                            loc_4C64:
00004C5C 2013                       		move.l	(a3),d0
00004C5E 9082                       		sub.l	d2,d0
00004C60 26C0                       		move.l	d0,(a3)+
00004C62 0482 0000 2000             		subi.l	#$2000,d2
00004C68 51C9 FFF2                  		dbf	d1,loc_4C64
00004C6C                            
00004C6C                            loc_4C74:
00004C6C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C70 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004C76                            
00004C76                            loc_4C7E:
00004C76 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004C7A 3038 F718                  		move.w	($FFFFF718).w,d0
00004C7E 4440                       		neg.w	d0
00004C80 4840                       		swap	d0
00004C82 7600                       		moveq	#0,d3
00004C84 161A                       		move.b	(a2)+,d3
00004C86 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004C8A 4442                       		neg.w	d2
00004C8C 0242 00FF                  		andi.w	#$FF,d2
00004C90 E54A                       		lsl.w	#2,d2
00004C92                            
00004C92                            loc_4C9A:
00004C92 301B                       		move.w	(a3)+,d0
00004C94 544B                       		addq.w	#2,a3
00004C96 7200                       		moveq	#0,d1
00004C98 121A                       		move.b	(a2)+,d1
00004C9A 5341                       		subq.w	#1,d1
00004C9C                            
00004C9C                            loc_4CA4:
00004C9C 2380 2000                  		move.l	d0,(a1,d2.w)
00004CA0 5842                       		addq.w	#4,d2
00004CA2 0242 03FC                  		andi.w	#$3FC,d2
00004CA6 51C9 FFF4                  		dbf	d1,loc_4CA4
00004CAA 51CB FFE6                  		dbf	d3,loc_4C9A
00004CAE 4E75                       		rts	
00004CB0                            ; End of function SS_BGAnimate
00004CB0                            
00004CB0                            ; ===========================================================================
00004CB0 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004CBC                            		even
00004CBC 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004CC4                            		even
00004CC4 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004CD8                            		even
00004CD8                            					; XREF: SS_BGAnimate
00004CD8                            ; ===========================================================================
00004CD8                            
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            ; Continue screen
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            
00004CD8                            ContinueScreen:				; XREF: GameModeArray
00004CD8 6100 D178                  		bsr.w	Pal_FadeFrom
00004CDC 46FC 2700                  		move	#$2700,sr
00004CE0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004CE4 0200 00BF                  		andi.b	#$BF,d0
00004CE8 33C0 00C0 0004             		move.w	d0,($C00004).l
00004CEE 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CF4 3CBC 8004                  		move.w	#$8004,(a6)
00004CF8 3CBC 8700                  		move.w	#$8700,(a6)
00004CFC 6100 C5C6                  		bsr.w	ClearScreen
00004D00 43F8 D000                  		lea	($FFFFD000).w,a1
00004D04 7000                       		moveq	#0,d0
00004D06 323C 07FF                  		move.w	#$7FF,d1
00004D0A                            
00004D0A                            Cont_ClrObjRam:
00004D0A 22C0                       		move.l	d0,(a1)+
00004D0C 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004D10                            
00004D10 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D1A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D20 6100 C71E                  		bsr.w	NemDec
00004D24 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004D2E 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004D34 6100 C70A                  		bsr.w	NemDec
00004D38 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004D42 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004D48 6100 C6F6                  		bsr.w	NemDec
00004D4C 720A                       		moveq	#10,d1
00004D4E 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004D54 7012                       		moveq	#$12,d0
00004D56 6100 D3A4                  		bsr.w	PalLoad1	; load continue	screen pallet
00004D5A 103C 0090                  		move.b	#$90,d0
00004D5E 6100 C636                  		bsr.w	PlaySound	; play continue	music
00004D62 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004D68 42B8 F700                  		clr.l	($FFFFF700).w
00004D6C 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004D74 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004D7A 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004D80 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004D86 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004D8C 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004D92 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004D98 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004D9E 4EB9 0000 0000             		jsr	ObjectsLoad
00004DA4 4EB9 0000 0000             		jsr	BuildSprites
00004DAA 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004DAE 0000 0040                  		ori.b	#$40,d0
00004DB2 33C0 00C0 0004             		move.w	d0,($C00004).l
00004DB8 6100 CFF2                  		bsr.w	Pal_FadeTo
00004DBC                            
00004DBC                            ; ---------------------------------------------------------------------------
00004DBC                            ; Continue screen main loop
00004DBC                            ; ---------------------------------------------------------------------------
00004DBC                            
00004DBC                            Cont_MainLoop:
00004DBC 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DC2 6100 DBE4                  		bsr.w	DelayProgram
00004DC6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004DCC 6400                       		bcc.s	loc_4DF2
00004DCE 46FC 2700                  		move	#$2700,sr
00004DD2 3238 F614                  		move.w	($FFFFF614).w,d1
00004DD6 82FC 003C                  		divu.w	#$3C,d1
00004DDA 0281 0000 000F             		andi.l	#$F,d1
00004DE0 4EB9 0000 0000             		jsr	ContScrCounter
00004DE6 46FC 2300                  		move	#$2300,sr
00004DEA                            
00004DEA                            loc_4DF2:
00004DEA 4EB9 0000 0000             		jsr	ObjectsLoad
00004DF0 4EB9 0000 0000             		jsr	BuildSprites
00004DF6 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004DFC 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004DFE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004E04 64B6                       		bcc.s	Cont_MainLoop
00004E06 4A78 F614                  		tst.w	($FFFFF614).w
00004E0A 6600 FFB0                  		bne.w	Cont_MainLoop
00004E0E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004E14 4E75                       		rts	
00004E16                            ; ===========================================================================
00004E16                            
00004E16                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004E16 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004E1C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004E22 7000                       		moveq	#0,d0
00004E24 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004E28 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004E2C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004E30 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004E34 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004E38 4E75                       		rts	
00004E3A                            ; ===========================================================================
00004E3A                            
00004E3A                            ; ---------------------------------------------------------------------------
00004E3A                            ; Object 80 - Continue screen elements
00004E3A                            ; ---------------------------------------------------------------------------
00004E3A                            
00004E3A                            Obj80:					; XREF: Obj_Index
00004E3A 7000                       		moveq	#0,d0
00004E3C 1028 0024                  		move.b	$24(a0),d0
00004E40 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00004E44 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00004E48                            ; ===========================================================================
00004E48 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00004E4A 0000                       		dc.w Obj80_Display-Obj80_Index
00004E4C 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00004E4E 0000                       		dc.w Obj80_ChkType-Obj80_Index
00004E50                            ; ===========================================================================
00004E50                            
00004E50                            Obj80_Main:				; XREF: Obj80_Index
00004E50 5428 0024                  		addq.b	#2,$24(a0)
00004E54 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004E5C 317C 8500 0002             		move.w	#$8500,2(a0)
00004E62 117C 0000 0001             		move.b	#0,1(a0)
00004E68 117C 003C 0019             		move.b	#$3C,$19(a0)
00004E6E 317C 0120 0008             		move.w	#$120,8(a0)
00004E74 317C 00C0 000A             		move.w	#$C0,$A(a0)
00004E7A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00004E80                            
00004E80                            Obj80_Display:				; XREF: Obj80_Index
00004E80 4EF9 0000 0000             		jmp	DisplaySprite
00004E86                            ; ===========================================================================
00004E86                            Obj80_MiniSonicPos:
00004E86 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00004E98 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00004EA4                            ; ===========================================================================
00004EA4                            
00004EA4                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00004EA4 2248                       		movea.l	a0,a1
00004EA6 45F9 0000 4E86             		lea	(Obj80_MiniSonicPos).l,a2
00004EAC 7200                       		moveq	#0,d1
00004EAE 1238 FE18                  		move.b	($FFFFFE18).w,d1
00004EB2 5501                       		subq.b	#2,d1
00004EB4 6400                       		bcc.s	loc_4EC4
00004EB6 4EF9 0000 0000             		jmp	DeleteObject
00004EBC                            ; ===========================================================================
00004EBC                            
00004EBC                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00004EBC 7601                       		moveq	#1,d3
00004EBE 0C01 000E                  		cmpi.b	#$E,d1
00004EC2 6500                       		bcs.s	loc_4ED0
00004EC4 7600                       		moveq	#0,d3
00004EC6 720E                       		moveq	#$E,d1
00004EC8                            
00004EC8                            loc_4ED0:
00004EC8 1401                       		move.b	d1,d2
00004ECA 0202 0001                  		andi.b	#1,d2
00004ECE                            
00004ECE                            Obj80_MiniSonLoop:
00004ECE 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00004ED2 335A 0008                  		move.w	(a2)+,8(a1)
00004ED6 4A02                       		tst.b	d2
00004ED8 6700                       		beq.s	loc_4EEA
00004EDA 0469 000A 0008             		subi.w	#$A,8(a1)
00004EE0                            
00004EE0                            loc_4EEA:
00004EE0 337C 00D0 000A             		move.w	#$D0,$A(a1)
00004EE6 137C 0006 001A             		move.b	#6,$1A(a1)
00004EEC 137C 0006 0024             		move.b	#6,$24(a1)
00004EF2 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00004EFA 337C 8551 0002             		move.w	#$8551,2(a1)
00004F00 137C 0000 0001             		move.b	#0,1(a1)
00004F06 43E9 0040                  		lea	$40(a1),a1
00004F0A 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00004F0E 43E9 FFC0                  		lea	-$40(a1),a1
00004F12 1343 0028                  		move.b	d3,$28(a1)
00004F16                            
00004F16                            Obj80_ChkType:				; XREF: Obj80_Index
00004F16 4A28 0028                  		tst.b	$28(a0)
00004F1A 6700                       		beq.s	loc_4F40
00004F1C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F22 6500                       		bcs.s	loc_4F40
00004F24 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F28 0200 0001                  		andi.b	#1,d0
00004F2C 6600                       		bne.s	loc_4F40
00004F2E 4A78 D010                  		tst.w	($FFFFD010).w
00004F32 6600                       		bne.s	Obj80_Delete
00004F34 4E75                       		rts	
00004F36                            ; ===========================================================================
00004F36                            
00004F36                            loc_4F40:				; XREF: Obj80_ChkType
00004F36 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F3A 0200 000F                  		andi.b	#$F,d0
00004F3E 6600                       		bne.s	Obj80_Display2
00004F40 0868 0000 001A             		bchg	#0,$1A(a0)
00004F46                            
00004F46                            Obj80_Display2:
00004F46 4EF9 0000 0000             		jmp	DisplaySprite
00004F4C                            ; ===========================================================================
00004F4C                            
00004F4C                            Obj80_Delete:				; XREF: Obj80_ChkType
00004F4C 4EF9 0000 0000             		jmp	DeleteObject
00004F52                            ; ===========================================================================
00004F52                            
00004F52                            ; ---------------------------------------------------------------------------
00004F52                            ; Object 81 - Sonic on the continue screen
00004F52                            ; ---------------------------------------------------------------------------
00004F52                            
00004F52                            Obj81:					; XREF: Obj_Index
00004F52 7000                       		moveq	#0,d0
00004F54 1028 0024                  		move.b	$24(a0),d0
00004F58 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00004F5C 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00004F60 4EF9 0000 0000             		jmp	DisplaySprite
00004F66                            ; ===========================================================================
00004F66 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00004F68 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00004F6A 0000                       		dc.w Obj81_Animate-Obj81_Index
00004F6C 0000                       		dc.w Obj81_Run-Obj81_Index
00004F6E                            ; ===========================================================================
00004F6E                            
00004F6E                            Obj81_Main:				; XREF: Obj81_Index
00004F6E 5428 0024                  		addq.b	#2,$24(a0)
00004F72 317C 00A0 0008             		move.w	#$A0,8(a0)
00004F78 317C 00C0 000C             		move.w	#$C0,$C(a0)
00004F7E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004F86 317C 0780 0002             		move.w	#$780,2(a0)
00004F8C 117C 0004 0001             		move.b	#4,1(a0)
00004F92 117C 0002 0018             		move.b	#2,$18(a0)
00004F98 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00004F9E 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00004FA4                            
00004FA4                            Obj81_ChkLand:				; XREF: Obj81_Index
00004FA4 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00004FAA 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00004FAC 5428 0024                  		addq.b	#2,$24(a0)
00004FB0 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00004FB4 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004FBC 317C 8500 0002             		move.w	#$8500,2(a0)
00004FC2 117C 0000 001C             		move.b	#0,$1C(a0)
00004FC8 6000                       		bra.s	Obj81_Animate
00004FCA                            ; ===========================================================================
00004FCA                            
00004FCA                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00004FCA 4EB9 0000 0000             		jsr	SpeedToPos
00004FD0 4EB9 0000 0000             		jsr	Sonic_Animate
00004FD6 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00004FDC                            ; ===========================================================================
00004FDC                            
00004FDC                            Obj81_Animate:				; XREF: Obj81_Index
00004FDC 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00004FE0 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00004FE2 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00004FE8 4EF9 0000 0000             		jmp	AnimateSprite
00004FEE                            ; ===========================================================================
00004FEE                            
00004FEE                            Obj81_GetUp:				; XREF: Obj81_Animate
00004FEE 5428 0024                  		addq.b	#2,$24(a0)
00004FF2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004FFA 317C 0780 0002             		move.w	#$780,2(a0)
00005000 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005006 4268 0014                  		clr.w	$14(a0)
0000500A 5168 000C                  		subq.w	#8,$C(a0)
0000500E 103C 00E0                  		move.b	#$E0,d0
00005012 6100 C388                  		bsr.w	PlaySound_Special ; fade out music
00005016                            
00005016                            Obj81_Run:				; XREF: Obj81_Index
00005016 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000501C 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000501E 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005024 6000                       		bra.s	Obj81_ShowRun
00005026                            ; ===========================================================================
00005026                            
00005026                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005026 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000502C                            
0000502C                            Obj81_ShowRun:				; XREF: Obj81_Run
0000502C 4EB9 0000 0000             		jsr	SpeedToPos
00005032 4EB9 0000 0000             		jsr	Sonic_Animate
00005038 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000503E                            ; ===========================================================================
0000503E                            Ani_obj81:
0000503E                            	include "_anim\obj81.asm"
0000503E                            ; ---------------------------------------------------------------------------
0000503E                            ; Animation script - Sonic on the continue screen
0000503E                            ; ---------------------------------------------------------------------------
0000503E 0000                       		dc.w byte_504A-Ani_obj81
00005040 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000504C 00                         		even
0000504C 00                         		even
0000504C                            
0000504C                            ; ---------------------------------------------------------------------------
0000504C                            ; Sprite mappings - Continue screen
0000504C                            ; ---------------------------------------------------------------------------
0000504C                            Map_obj80:
0000504C                            	include "_maps\obj80.asm"
0000504C                            ; ---------------------------------------------------------------------------
0000504C                            ; Sprite mappings - Continue screen
0000504C                            ; ---------------------------------------------------------------------------
0000504C 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005050 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005054 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005058 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000505C 0B                         byte_5066:	dc.b $B
0000505D F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005062 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005067 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000506C F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005071 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005076 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000507B F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005080 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005085 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000508A 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000508F 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005094 03                         byte_509E:	dc.b 3
00005095 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
0000509A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000509F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050A4 03                         byte_50AE:	dc.b 3
000050A5 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000050AA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050AF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050B4 03                         byte_50BE:	dc.b 3
000050B5 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000050BA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050BF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050C4 02                         byte_50CE:	dc.b 2
000050C5 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000050CA 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000050CF 01                         byte_50D9:	dc.b 1
000050D0 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000050D5 01                         byte_50DF:	dc.b 1
000050D6 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000050DC 00                         		even
000050DC 00                         		even
000050DC                            
000050DC                            ; ===========================================================================
000050DC                            ; ---------------------------------------------------------------------------
000050DC                            ; Ending sequence in Green Hill	Zone
000050DC                            ; ---------------------------------------------------------------------------
000050DC                            
000050DC                            EndingSequence:				; XREF: GameModeArray
000050DC 103C 00E4                  		move.b	#$E4,d0
000050E0 6100 C2BA                  		bsr.w	PlaySound_Special ; stop music
000050E4 6100 CD6C                  		bsr.w	Pal_FadeFrom
000050E8 43F8 D000                  		lea	($FFFFD000).w,a1
000050EC 7000                       		moveq	#0,d0
000050EE 323C 07FF                  		move.w	#$7FF,d1
000050F2                            
000050F2                            End_ClrObjRam:
000050F2 22C0                       		move.l	d0,(a1)+
000050F4 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000050F8                            
000050F8 43F8 F628                  		lea	($FFFFF628).w,a1
000050FC 7000                       		moveq	#0,d0
000050FE 323C 0015                  		move.w	#$15,d1
00005102                            
00005102                            End_ClrRam:
00005102 22C0                       		move.l	d0,(a1)+
00005104 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005108                            
00005108 43F8 F700                  		lea	($FFFFF700).w,a1
0000510C 7000                       		moveq	#0,d0
0000510E 323C 003F                  		move.w	#$3F,d1
00005112                            
00005112                            End_ClrRam2:
00005112 22C0                       		move.l	d0,(a1)+
00005114 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005118                            
00005118 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000511C 7000                       		moveq	#0,d0
0000511E 323C 0047                  		move.w	#$47,d1
00005122                            
00005122                            End_ClrRam3:
00005122 22C0                       		move.l	d0,(a1)+
00005124 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005128                            
00005128 46FC 2700                  		move	#$2700,sr
0000512C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005130 0200 00BF                  		andi.b	#$BF,d0
00005134 33C0 00C0 0004             		move.w	d0,($C00004).l
0000513A 6100 C188                  		bsr.w	ClearScreen
0000513E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005144 3CBC 8B03                  		move.w	#$8B03,(a6)
00005148 3CBC 8230                  		move.w	#$8230,(a6)
0000514C 3CBC 8407                  		move.w	#$8407,(a6)
00005150 3CBC 857C                  		move.w	#$857C,(a6)
00005154 3CBC 9001                  		move.w	#$9001,(a6)
00005158 3CBC 8004                  		move.w	#$8004,(a6)
0000515C 3CBC 8720                  		move.w	#$8720,(a6)
00005160 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005166 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000516A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005170 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005176 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000517C 6700                       		beq.s	End_LoadData	; if yes, branch
0000517E 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005184                            
00005184                            End_LoadData:
00005184 701C                       		moveq	#$1C,d0
00005186 6100 C564                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
0000518A 4EB9 0000 0000             		jsr	Hud_Base
00005190 6100 0000                  		bsr.w	LevelSizeLoad
00005194 6100 0000                  		bsr.w	DeformBgLayer
00005198 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000519E 6100 0000                  		bsr.w	MainLoadBlockLoad
000051A2 6100 0000                  		bsr.w	LoadTilesFromStart
000051A6 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000051AE 46FC 2300                  		move	#$2300,sr
000051B2 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000051B8 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000051BC 6100 C6DE                  		bsr.w	KosDec
000051C0 7003                       		moveq	#3,d0
000051C2 6100 CF38                  		bsr.w	PalLoad1	; load Sonic's pallet
000051C6 303C 008B                  		move.w	#$8B,d0
000051CA 6100 C1CA                  		bsr.w	PlaySound	; play ending sequence music
000051CE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000051D4 6700                       		beq.s	End_LoadSonic	; if not, branch
000051D6 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000051DC                            
000051DC                            End_LoadSonic:
000051DC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000051E2 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000051E8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000051EE 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000051F4 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000051FA 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005200 4EB9 0000 0000             		jsr	ObjPosLoad
00005206 4EB9 0000 0000             		jsr	ObjectsLoad
0000520C 4EB9 0000 0000             		jsr	BuildSprites
00005212 7000                       		moveq	#0,d0
00005214 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005218 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000521C 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005220 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005224 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005228 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000522C 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005230 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005234 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005238 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000523C 6100 EEDA                  		bsr.w	OscillateNumInit
00005240 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005246 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000524C 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005252 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005258 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000525E 6100 D748                  		bsr.w	DelayProgram
00005262 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005266 0000 0040                  		ori.b	#$40,d0
0000526A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005270 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005276 6100 CB34                  		bsr.w	Pal_FadeTo
0000527A                            
0000527A                            ; ---------------------------------------------------------------------------
0000527A                            ; Main ending sequence loop
0000527A                            ; ---------------------------------------------------------------------------
0000527A                            
0000527A                            End_MainLoop:
0000527A 6100 C12C                  		bsr.w	PauseGame
0000527E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005284 6100 D722                  		bsr.w	DelayProgram
00005288 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000528C 6100 0000                  		bsr.w	End_MoveSonic
00005290 4EB9 0000 0000             		jsr	ObjectsLoad
00005296 6100 0000                  		bsr.w	DeformBgLayer
0000529A 4EB9 0000 0000             		jsr	BuildSprites
000052A0 4EB9 0000 0000             		jsr	ObjPosLoad
000052A6 6100 C694                  		bsr.w	PalCycle_Load
000052AA 6100 EEC2                  		bsr.w	OscillateNumDo
000052AE 6100 EF4E                  		bsr.w	ChangeRingFrame
000052B2 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000052B8 6700                       		beq.s	loc_52DA	; if yes, branch
000052BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000052C0 103C 0091                  		move.b	#$91,d0
000052C4 6100 C0D6                  		bsr.w	PlaySound_Special ; play credits music
000052C8 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000052CE 4E75                       		rts	
000052D0                            ; ===========================================================================
000052D0                            
000052D0                            loc_52DA:
000052D0 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000052D4 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000052D8                            
000052D8 4278 FE02                  		clr.w	($FFFFFE02).w
000052DC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000052E2 4278 F794                  		clr.w	($FFFFF794).w
000052E6                            
000052E6                            End_AllEmlds:				; XREF: loc_5334
000052E6 6100 C0C0                  		bsr.w	PauseGame
000052EA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000052F0 6100 D6B6                  		bsr.w	DelayProgram
000052F4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000052F8 6100 0000                  		bsr.w	End_MoveSonic
000052FC 4EB9 0000 0000             		jsr	ObjectsLoad
00005302 6100 0000                  		bsr.w	DeformBgLayer
00005306 4EB9 0000 0000             		jsr	BuildSprites
0000530C 4EB9 0000 0000             		jsr	ObjPosLoad
00005312 6100 EE5A                  		bsr.w	OscillateNumDo
00005316 6100 EEE6                  		bsr.w	ChangeRingFrame
0000531A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000531E 6A00                       		bpl.s	loc_5334
00005320 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005326 6100 CC74                  		bsr.w	Pal_ToWhite
0000532A                            
0000532A                            loc_5334:
0000532A 4A78 FE02                  		tst.w	($FFFFFE02).w
0000532E 6700 FFB6                  		beq.w	End_AllEmlds
00005332 4278 FE02                  		clr.w	($FFFFFE02).w
00005336 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000533C 4BF9 00C0 0004             		lea	($C00004).l,a5
00005342 4DF9 00C0 0000             		lea	($C00000).l,a6
00005348 47F8 F700                  		lea	($FFFFF700).w,a3
0000534C 49F8 A400                  		lea	($FFFFA400).w,a4
00005350 343C 4000                  		move.w	#$4000,d2
00005354 6100 0000                  		bsr.w	LoadTilesFromStart2
00005358 7013                       		moveq	#$13,d0
0000535A 6100 CDA0                  		bsr.w	PalLoad1	; load ending pallet
0000535E 6100 CB70                  		bsr.w	Pal_MakeWhite
00005362 6000 FF16                  		bra.w	End_MainLoop
00005366                            
00005366                            ; ---------------------------------------------------------------------------
00005366                            ; Subroutine controlling Sonic on the ending sequence
00005366                            ; ---------------------------------------------------------------------------
00005366                            
00005366                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005366                            
00005366                            
00005366                            End_MoveSonic:				; XREF: End_MainLoop
00005366 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000536A 6600                       		bne.s	End_MoveSonic2
0000536C 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005372 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005374 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005378 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000537E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005384 4E75                       		rts	
00005386                            ; ===========================================================================
00005386                            
00005386                            End_MoveSonic2:				; XREF: End_MoveSonic
00005386 5500                       		subq.b	#2,d0
00005388 6600                       		bne.s	End_MoveSonic3
0000538A 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005390 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005392 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005396 7000                       		moveq	#0,d0
00005398 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000539C 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000053A0 31C0 D014                  		move.w	d0,($FFFFD014).w
000053A4 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000053AA 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000053B0 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000053B6 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000053BC 4E75                       		rts	
000053BE                            ; ===========================================================================
000053BE                            
000053BE                            End_MoveSonic3:				; XREF: End_MoveSonic
000053BE 5500                       		subq.b	#2,d0
000053C0 6600                       		bne.s	End_MoveSonExit
000053C2 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053C6 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000053CC 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000053D2 4278 D024                  		clr.w	($FFFFD024).w
000053D6                            
000053D6                            End_MoveSonExit:
000053D6 4E75                       		rts	
000053D8                            ; End of function End_MoveSonic
000053D8                            
000053D8                            ; ===========================================================================
000053D8                            ; ---------------------------------------------------------------------------
000053D8                            ; Object 87 - Sonic on ending sequence
000053D8                            ; ---------------------------------------------------------------------------
000053D8                            
000053D8                            Obj87:					; XREF: Obj_Index
000053D8 7000                       		moveq	#0,d0
000053DA 1028 0025                  		move.b	$25(a0),d0
000053DE 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000053E2 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000053E6 4EF9 0000 0000             		jmp	DisplaySprite
000053EC                            ; ===========================================================================
000053EC 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000053F0 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000053F4 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000053F8 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000053FC 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005400                            ; ===========================================================================
00005400                            
00005400                            Obj87_Main:				; XREF: Obj87_Index
00005400 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005406 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005408 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000540E 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005414 4E75                       		rts	
00005416                            ; ===========================================================================
00005416                            
00005416                            Obj87_Main2:				; XREF: Obj87_Main
00005416 5428 0025                  		addq.b	#2,$25(a0)
0000541A 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005422 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005428 117C 0004 0001             		move.b	#4,1(a0)
0000542E 4228 0022                  		clr.b	$22(a0)
00005432 117C 0002 0018             		move.b	#2,$18(a0)
00005438 117C 0000 001A             		move.b	#0,$1A(a0)
0000543E 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005444                            
00005444                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005444 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005448 6600                       		bne.s	Obj87_Wait
0000544A 5428 0025                  		addq.b	#2,$25(a0)
0000544E 317C 0001 001C             		move.w	#1,$1C(a0)
00005454 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000545A                            
0000545A                            Obj87_Wait:
0000545A 4E75                       		rts	
0000545C                            ; ===========================================================================
0000545C                            
0000545C                            Obj87_LookUp:				; XREF: Obj87_Index
0000545C 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005464 6600                       		bne.s	locret_5480
00005466 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000546C 317C 005A 0030             		move.w	#$5A,$30(a0)
00005472 5428 0025                  		addq.b	#2,$25(a0)
00005476                            
00005476                            locret_5480:
00005476 4E75                       		rts	
00005478                            ; ===========================================================================
00005478                            
00005478                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005478 5368 0030                  		subq.w	#1,$30(a0)
0000547C 6600                       		bne.s	Obj87_Wait2
0000547E 43F8 D400                  		lea	($FFFFD400).w,a1
00005482 323C 00FF                  		move.w	#$FF,d1
00005486                            
00005486                            Obj87_ClrLoop:
00005486 4299                       		clr.l	(a1)+
00005488 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000548C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005492 5428 0025                  		addq.b	#2,$25(a0)
00005496 117C 0001 001C             		move.b	#1,$1C(a0)
0000549C 317C 003C 0030             		move.w	#$3C,$30(a0)
000054A2                            
000054A2                            Obj87_Wait2:
000054A2 4E75                       		rts	
000054A4                            ; ===========================================================================
000054A4                            
000054A4                            Obj87_MakeLogo:				; XREF: Obj87_Index
000054A4 5368 0030                  		subq.w	#1,$30(a0)
000054A8 6600                       		bne.s	Obj87_Wait3
000054AA 5428 0025                  		addq.b	#2,$25(a0)
000054AE 317C 00B4 0030             		move.w	#$B4,$30(a0)
000054B4 117C 0002 001C             		move.b	#2,$1C(a0)
000054BA 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000054C0                            
000054C0                            Obj87_Wait3:
000054C0 4E75                       		rts	
000054C2                            ; ===========================================================================
000054C2                            
000054C2                            Obj87_Animate:				; XREF: Obj87_Index
000054C2 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000054C8 4EF9 0000 0000             		jmp	AnimateSprite
000054CE                            ; ===========================================================================
000054CE                            
000054CE                            Obj87_Leap:				; XREF: Obj87_Index
000054CE 5368 0030                  		subq.w	#1,$30(a0)
000054D2 6600                       		bne.s	Obj87_Wait4
000054D4 5428 0025                  		addq.b	#2,$25(a0)
000054D8 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000054E0 317C 03E1 0002             		move.w	#$3E1,2(a0)
000054E6 117C 0004 0001             		move.b	#4,1(a0)
000054EC 4228 0022                  		clr.b	$22(a0)
000054F0 117C 0002 0018             		move.b	#2,$18(a0)
000054F6 117C 0005 001A             		move.b	#5,$1A(a0)
000054FC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005502 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005508 60B8                       		bra.s	Obj87_Animate
0000550A                            ; ===========================================================================
0000550A                            
0000550A                            Obj87_Wait4:				; XREF: Obj87_Leap
0000550A 4E75                       		rts	
0000550C                            ; ===========================================================================
0000550C                            Ani_obj87:
0000550C                            	include "_anim\obj87.asm"
0000550C                            ; ---------------------------------------------------------------------------
0000550C                            ; Animation script - Sonic on the ending sequence
0000550C                            ; ---------------------------------------------------------------------------
0000550C 0000                       		dc.w byte_551C-Ani_obj87
0000550E 0000                       		dc.w byte_552A-Ani_obj87
00005510 0000                       		dc.w byte_5534-Ani_obj87
00005512 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005520 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000552A 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005532                            		even
00005532                            		even
00005532                            
00005532                            ; ===========================================================================
00005532                            ; ---------------------------------------------------------------------------
00005532                            ; Object 88 - chaos emeralds on	the ending sequence
00005532                            ; ---------------------------------------------------------------------------
00005532                            
00005532                            Obj88:					; XREF: Obj_Index
00005532 7000                       		moveq	#0,d0
00005534 1028 0024                  		move.b	$24(a0),d0
00005538 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000553C 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005540 4EF9 0000 0000             		jmp	DisplaySprite
00005546                            ; ===========================================================================
00005546 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005548 0000                       		dc.w Obj88_Move-Obj88_Index
0000554A                            ; ===========================================================================
0000554A                            
0000554A                            Obj88_Main:				; XREF: Obj88_Index
0000554A 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005550 6700                       		beq.s	Obj88_Main2
00005552 588F                       		addq.l	#4,sp
00005554 4E75                       		rts	
00005556                            ; ===========================================================================
00005556                            
00005556                            Obj88_Main2:				; XREF: Obj88_Main
00005556 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000555C 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005562 2248                       		movea.l	a0,a1
00005564 7600                       		moveq	#0,d3
00005566 7401                       		moveq	#1,d2
00005568 7205                       		moveq	#5,d1
0000556A                            
0000556A                            Obj88_MainLoop:
0000556A 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000556E 5429 0024                  		addq.b	#2,$24(a1)
00005572 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000557A 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005580 137C 0004 0001             		move.b	#4,1(a1)
00005586 137C 0001 0018             		move.b	#1,$18(a1)
0000558C 3368 0008 0038             		move.w	8(a0),$38(a1)
00005592 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005598 1342 001C                  		move.b	d2,$1C(a1)
0000559C 1342 001A                  		move.b	d2,$1A(a1)
000055A0 5202                       		addq.b	#1,d2
000055A2 1343 0026                  		move.b	d3,$26(a1)
000055A6 0603 002A                  		addi.b	#$2A,d3
000055AA 43E9 0040                  		lea	$40(a1),a1
000055AE 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000055B2                            
000055B2                            Obj88_Move:				; XREF: Obj88_Index
000055B2 3028 003E                  		move.w	$3E(a0),d0
000055B6 D168 0026                  		add.w	d0,$26(a0)
000055BA 1028 0026                  		move.b	$26(a0),d0
000055BE 4EB9 0000 29DA             		jsr	(CalcSine).l
000055C4 7800                       		moveq	#0,d4
000055C6 1828 003C                  		move.b	$3C(a0),d4
000055CA C3C4                       		muls.w	d4,d1
000055CC E081                       		asr.l	#8,d1
000055CE C1C4                       		muls.w	d4,d0
000055D0 E080                       		asr.l	#8,d0
000055D2 D268 0038                  		add.w	$38(a0),d1
000055D6 D068 003A                  		add.w	$3A(a0),d0
000055DA 3141 0008                  		move.w	d1,8(a0)
000055DE 3140 000C                  		move.w	d0,$C(a0)
000055E2 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000055E8 6700                       		beq.s	loc_55FA
000055EA 0668 0020 003C             		addi.w	#$20,$3C(a0)
000055F0                            
000055F0                            loc_55FA:
000055F0 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000055F6 6700                       		beq.s	loc_5608
000055F8 0668 0020 003E             		addi.w	#$20,$3E(a0)
000055FE                            
000055FE                            loc_5608:
000055FE 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005604 6700                       		beq.s	locret_5614
00005606 5368 003A                  		subq.w	#1,$3A(a0)
0000560A                            
0000560A                            locret_5614:
0000560A 4E75                       		rts	
0000560C                            ; ===========================================================================
0000560C                            ; ---------------------------------------------------------------------------
0000560C                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000560C                            ; ---------------------------------------------------------------------------
0000560C                            
0000560C                            Obj89:					; XREF: Obj_Index
0000560C 7000                       		moveq	#0,d0
0000560E 1028 0024                  		move.b	$24(a0),d0
00005612 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005616 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000561A                            ; ===========================================================================
0000561A 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000561C 0000                       		dc.w Obj89_Move-Obj89_Index
0000561E 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005620                            ; ===========================================================================
00005620                            
00005620                            Obj89_Main:				; XREF: Obj89_Index
00005620 5428 0024                  		addq.b	#2,$24(a0)
00005624 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
0000562A 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005630 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005638 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000563E 117C 0000 0001             		move.b	#0,1(a0)
00005644 117C 0000 0018             		move.b	#0,$18(a0)
0000564A                            
0000564A                            Obj89_Move:				; XREF: Obj89_Index
0000564A 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005650 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005652 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005658 4EB9 0000 0000             		jsr	DisplaySprite
0000565E                            ; ===========================================================================
0000565E                            
0000565E                            Obj89_Delay:				; XREF: Obj89_Move
0000565E 5428 0024                  		addq.b	#2,$24(a0)
00005662 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005668                            
00005668                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005668 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000566C 6A00                       		bpl.s	Obj89_Display
0000566E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005674                            
00005674                            Obj89_Display:
00005674 4EB9 0000 0000             		jsr	DisplaySprite
0000567A                            ; ===========================================================================
0000567A                            ; ---------------------------------------------------------------------------
0000567A                            ; Sprite mappings - Sonic on the ending	sequence
0000567A                            ; ---------------------------------------------------------------------------
0000567A                            Map_obj87:
0000567A                            	include "_maps\obj87.asm"
0000567A                            ; ---------------------------------------------------------------------------
0000567A                            ; Sprite mappings - Sonic on the ending	sequence
0000567A                            ; ---------------------------------------------------------------------------
0000567A 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
0000567E 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005682 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005686 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000568A 02                         byte_5690:	dc.b 2
0000568B EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005690 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005695 03                         byte_569B:	dc.b 3
00005696 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000569B EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000056A0 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056A5 02                         byte_56AB:	dc.b 2
000056A6 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000056AB FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000056B0 02                         byte_56B6:	dc.b 2
000056B1 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000056B6 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000056BB 02                         byte_56C1:	dc.b 2
000056BC EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000056C1 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000056C6 03                         byte_56CC:	dc.b 3
000056C7 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000056CC EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000056D1 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000056D6 07                         byte_56DC:	dc.b 7
000056D7 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000056DC BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000056E1 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000056E6 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000056EB DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000056F0 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000056F5 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000056FA 18                         byte_5700:	dc.b $18
000056FB 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005700 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005705 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000570A 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000570F A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005714 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005719 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000571E A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005723 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005728 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000572D A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005732 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005737 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000573C B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005741 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005746 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000574B D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005750 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005755 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000575A E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000575F D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005764 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005769 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000576E F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005774 00                         		even
00005774 00                         		even
00005774                            
00005774                            ; ---------------------------------------------------------------------------
00005774                            ; Sprite mappings - chaos emeralds on the ending sequence
00005774                            ; ---------------------------------------------------------------------------
00005774                            Map_obj88:
00005774                            	include "_maps\obj88.asm"
00005774                            ; ---------------------------------------------------------------------------
00005774                            ; Sprite mappings - chaos emeralds on the ending sequence
00005774                            ; ---------------------------------------------------------------------------
00005774 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005778 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
0000577C 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005780 0000                       		dc.w byte_57AC-Map_obj88
00005782 01                         byte_5788:	dc.b 1
00005783 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005788 01                         byte_578E:	dc.b 1
00005789 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000578E 01                         byte_5794:	dc.b 1
0000578F F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005794 01                         byte_579A:	dc.b 1
00005795 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000579A 01                         byte_57A0:	dc.b 1
0000579B F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000057A0 01                         byte_57A6:	dc.b 1
000057A1 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000057A6 01                         byte_57AC:	dc.b 1
000057A7 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000057AC                            		even
000057AC                            		even
000057AC                            
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            Map_obj89:
000057AC                            	include "_maps\obj89.asm"
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057AC                            ; ---------------------------------------------------------------------------
000057AC 0000                       		dc.w byte_57B4-Map_obj89
000057AE 03                         byte_57B4:	dc.b 3
000057AF F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000057B4 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000057B9 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000057BE                            		even
000057BE                            		even
000057BE                            
000057BE                            ; ===========================================================================
000057BE                            ; ---------------------------------------------------------------------------
000057BE                            ; Credits ending sequence
000057BE                            ; ---------------------------------------------------------------------------
000057BE                            
000057BE                            Credits:				; XREF: GameModeArray
000057BE 6100 BE1E                  		bsr.w	ClearPLC
000057C2 6100 C68E                  		bsr.w	Pal_FadeFrom
000057C6 4DF9 00C0 0004             		lea	($C00004).l,a6
000057CC 3CBC 8004                  		move.w	#$8004,(a6)
000057D0 3CBC 8230                  		move.w	#$8230,(a6)
000057D4 3CBC 8407                  		move.w	#$8407,(a6)
000057D8 3CBC 9001                  		move.w	#$9001,(a6)
000057DC 3CBC 9200                  		move.w	#$9200,(a6)
000057E0 3CBC 8B03                  		move.w	#$8B03,(a6)
000057E4 3CBC 8720                  		move.w	#$8720,(a6)
000057E8 4238 F64E                  		clr.b	($FFFFF64E).w
000057EC 6100 BAD6                  		bsr.w	ClearScreen
000057F0 43F8 D000                  		lea	($FFFFD000).w,a1
000057F4 7000                       		moveq	#0,d0
000057F6 323C 07FF                  		move.w	#$7FF,d1
000057FA                            
000057FA                            Cred_ClrObjRam:
000057FA 22C0                       		move.l	d0,(a1)+
000057FC 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005800                            
00005800 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000580A 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005810 6100 BC2E                  		bsr.w	NemDec
00005814 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005818 7000                       		moveq	#0,d0
0000581A 323C 001F                  		move.w	#$1F,d1
0000581E                            
0000581E                            Cred_ClrPallet:
0000581E 22C0                       		move.l	d0,(a1)+
00005820 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005824                            
00005824 7003                       		moveq	#3,d0
00005826 6100 C8D4                  		bsr.w	PalLoad1	; load Sonic's pallet
0000582A 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005830 4EB9 0000 0000             		jsr	ObjectsLoad
00005836 4EB9 0000 0000             		jsr	BuildSprites
0000583C 6100 0000                  		bsr.w	EndingDemoLoad
00005840 7000                       		moveq	#0,d0
00005842 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005846 E948                       		lsl.w	#4,d0
00005848 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
0000584E 45F2 0000                  		lea	(a2,d0.w),a2
00005852 7000                       		moveq	#0,d0
00005854 1012                       		move.b	(a2),d0
00005856 6700                       		beq.s	loc_5862
00005858 6100 BD26                  		bsr.w	LoadPLC		; load level patterns
0000585C                            
0000585C                            loc_5862:
0000585C 7001                       		moveq	#1,d0
0000585E 6100 BD20                  		bsr.w	LoadPLC		; load standard	level patterns
00005862 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005868 6100 C542                  		bsr.w	Pal_FadeTo
0000586C                            
0000586C                            Cred_WaitLoop:
0000586C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005872 6100 D134                  		bsr.w	DelayProgram
00005876 6100 BD74                  		bsr.w	RunPLC_RAM
0000587A 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
0000587E 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005880 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005884 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005886 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
0000588C 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005890 4E75                       		rts	
00005892                            
00005892                            ; ---------------------------------------------------------------------------
00005892                            ; Ending sequence demo loading subroutine
00005892                            ; ---------------------------------------------------------------------------
00005892                            
00005892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005892                            
00005892                            
00005892                            EndingDemoLoad:				; XREF: Credits
00005892 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005896 0240 000F                  		andi.w	#$F,d0
0000589A D040                       		add.w	d0,d0
0000589C 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000058A0 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000058A4 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000058A8 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000058AE 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000058B0 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000058B6 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000058BC 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000058C2 7000                       		moveq	#0,d0
000058C4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000058C8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000058CC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000058D0 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000058D4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000058DA 6600                       		bne.s	EndDemo_Exit	; if not, branch
000058DC 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000058E2 45F8 FE30                  		lea	($FFFFFE30).w,a2
000058E6 303C 0008                  		move.w	#8,d0
000058EA                            
000058EA                            EndDemo_LampLoad:
000058EA 24D9                       		move.l	(a1)+,(a2)+
000058EC 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
000058F0                            
000058F0                            EndDemo_Exit:
000058F0 4E75                       		rts	
000058F2                            ; End of function EndingDemoLoad
000058F2                            
000058F2                            ; ===========================================================================
000058F2                            ; ---------------------------------------------------------------------------
000058F2                            ; Levels used in the end sequence demos
000058F2                            ; ---------------------------------------------------------------------------
000058F2                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005902                            
00005902                            ; ---------------------------------------------------------------------------
00005902                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005902                            ; ---------------------------------------------------------------------------
00005902                            EndDemo_LampVar:
00005902 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005904 0A00 062C 000D             		dc.w $A00, $62C, $D
0000590A 0000 0000                  		dc.l 0
0000590E 0000                       		dc.b 0,	0
00005910 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005924 0101                       		dc.b 1,	1
00005926                            ; ===========================================================================
00005926                            ; ---------------------------------------------------------------------------
00005926                            ; "TRY AGAIN" and "END"	screens
00005926                            ; ---------------------------------------------------------------------------
00005926                            
00005926                            TryAgainEnd:				; XREF: Credits
00005926 6100 BCB6                  		bsr.w	ClearPLC
0000592A 6100 C526                  		bsr.w	Pal_FadeFrom
0000592E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005934 3CBC 8004                  		move.w	#$8004,(a6)
00005938 3CBC 8230                  		move.w	#$8230,(a6)
0000593C 3CBC 8407                  		move.w	#$8407,(a6)
00005940 3CBC 9001                  		move.w	#$9001,(a6)
00005944 3CBC 9200                  		move.w	#$9200,(a6)
00005948 3CBC 8B03                  		move.w	#$8B03,(a6)
0000594C 3CBC 8720                  		move.w	#$8720,(a6)
00005950 4238 F64E                  		clr.b	($FFFFF64E).w
00005954 6100 B96E                  		bsr.w	ClearScreen
00005958 43F8 D000                  		lea	($FFFFD000).w,a1
0000595C 7000                       		moveq	#0,d0
0000595E 323C 07FF                  		move.w	#$7FF,d1
00005962                            
00005962                            TryAg_ClrObjRam:
00005962 22C0                       		move.l	d0,(a1)+
00005964 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005968                            
00005968 701D                       		moveq	#$1D,d0
0000596A 6100 BD80                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
0000596E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005972 7000                       		moveq	#0,d0
00005974 323C 001F                  		move.w	#$1F,d1
00005978                            
00005978                            TryAg_ClrPallet:
00005978 22C0                       		move.l	d0,(a1)+
0000597A 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
0000597E                            
0000597E 7013                       		moveq	#$13,d0
00005980 6100 C77A                  		bsr.w	PalLoad1	; load ending pallet
00005984 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005988 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
0000598E 4EB9 0000 0000             		jsr	ObjectsLoad
00005994 4EB9 0000 0000             		jsr	BuildSprites
0000599A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000059A0 6100 C40A                  		bsr.w	Pal_FadeTo
000059A4                            
000059A4                            ; ---------------------------------------------------------------------------
000059A4                            ; "TRY AGAIN" and "END"	screen main loop
000059A4                            ; ---------------------------------------------------------------------------
000059A4                            TryAg_MainLoop:
000059A4 6100 BA02                  		bsr.w	PauseGame
000059A8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000059AE 6100 CFF8                  		bsr.w	DelayProgram
000059B2 4EB9 0000 0000             		jsr	ObjectsLoad
000059B8 4EB9 0000 0000             		jsr	BuildSprites
000059BE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000059C4 6600                       		bne.s	TryAg_Exit	; if yes, branch
000059C6 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000059CA 6700                       		beq.s	TryAg_Exit	; if yes, branch
000059CC 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000059D2 67D0                       		beq.s	TryAg_MainLoop
000059D4                            
000059D4                            TryAg_Exit:
000059D4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000059DA 4E75                       		rts	
000059DC                            
000059DC                            ; ===========================================================================
000059DC                            ; ---------------------------------------------------------------------------
000059DC                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000059DC                            ; ---------------------------------------------------------------------------
000059DC                            
000059DC                            Obj8B:					; XREF: Obj_Index
000059DC 7000                       		moveq	#0,d0
000059DE 1028 0024                  		move.b	$24(a0),d0
000059E2 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
000059E6 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
000059EA 4EF9 0000 0000             		jmp	DisplaySprite
000059F0                            ; ===========================================================================
000059F0 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
000059F2 0000                       		dc.w Obj8B_Animate-Obj8B_Index
000059F4 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
000059F6 0000                       		dc.w loc_5A8E-Obj8B_Index
000059F8                            ; ===========================================================================
000059F8                            
000059F8                            Obj8B_Main:				; XREF: Obj8B_Index
000059F8 5428 0024                  		addq.b	#2,$24(a0)
000059FC 317C 0120 0008             		move.w	#$120,8(a0)
00005A02 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005A08 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005A10 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A16 117C 0000 0001             		move.b	#0,1(a0)
00005A1C 117C 0002 0018             		move.b	#2,$18(a0)
00005A22 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005A28 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A2E 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005A30 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005A36 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005A3C 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005A42 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005A48                            
00005A48                            Obj8B_Animate:				; XREF: Obj8B_Index
00005A48 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005A4E 4EF9 0000 0000             		jmp	AnimateSprite
00005A54                            ; ===========================================================================
00005A54                            
00005A54                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005A54 5428 0024                  		addq.b	#2,$24(a0)
00005A58 7002                       		moveq	#2,d0
00005A5A 0828 0000 001C             		btst	#0,$1C(a0)
00005A60 6700                       		beq.s	loc_5A6A
00005A62 4440                       		neg.w	d0
00005A64                            
00005A64                            loc_5A6A:
00005A64 43F8 D800                  		lea	($FFFFD800).w,a1
00005A68 7205                       		moveq	#5,d1
00005A6A                            
00005A6A                            loc_5A70:
00005A6A 1340 003E                  		move.b	d0,$3E(a1)
00005A6E 3400                       		move.w	d0,d2
00005A70 E742                       		asl.w	#3,d2
00005A72 D529 0026                  		add.b	d2,$26(a1)
00005A76 43E9 0040                  		lea	$40(a1),a1
00005A7A 51C9 FFEE                  		dbf	d1,loc_5A70
00005A7E 5228 001A                  		addq.b	#1,$1A(a0)
00005A82 317C 0070 0030             		move.w	#112,$30(a0)
00005A88                            
00005A88                            loc_5A8E:				; XREF: Obj8B_Index
00005A88 5368 0030                  		subq.w	#1,$30(a0)
00005A8C 6A00                       		bpl.s	locret_5AA0
00005A8E 0868 0000 001C             		bchg	#0,$1C(a0)
00005A94 117C 0002 0024             		move.b	#2,$24(a0)
00005A9A                            
00005A9A                            locret_5AA0:
00005A9A 4E75                       		rts	
00005A9C                            ; ===========================================================================
00005A9C                            Ani_obj8B:
00005A9C                            	include "_anim\obj8B.asm"
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C 0000                       		dc.w byte_5AA8-Ani_obj8B
00005A9E 0000                       		dc.w byte_5AAC-Ani_obj8B
00005AA0 0000                       		dc.w byte_5AB0-Ani_obj8B
00005AA2 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005AA6 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005AAA 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005ABC                            		even
00005ABC                            		even
00005ABC                            
00005ABC                            ; ===========================================================================
00005ABC                            ; ---------------------------------------------------------------------------
00005ABC                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005ABC                            ; ---------------------------------------------------------------------------
00005ABC                            
00005ABC                            Obj8C:					; XREF: Obj_Index
00005ABC 7000                       		moveq	#0,d0
00005ABE 1028 0024                  		move.b	$24(a0),d0
00005AC2 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005AC6 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005ACA 4EF9 0000 0000             		jmp	DisplaySprite
00005AD0                            ; ===========================================================================
00005AD0 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005AD2 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005AD4                            ; ===========================================================================
00005AD4                            
00005AD4                            Obj8C_Main:				; XREF: Obj8C_Index
00005AD4 2248                       		movea.l	a0,a1
00005AD6 7400                       		moveq	#0,d2
00005AD8 7600                       		moveq	#0,d3
00005ADA 7205                       		moveq	#5,d1
00005ADC 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005AE0                            
00005AE0                            Obj8C_MakeEms:				; XREF: loc_5B42
00005AE0 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005AE4 5429 0024                  		addq.b	#2,$24(a1)
00005AE8 237C 0000 5774 0004        		move.l	#Map_obj88,4(a1)
00005AF0 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005AF6 137C 0000 0001             		move.b	#0,1(a1)
00005AFC 137C 0001 0018             		move.b	#1,$18(a1)
00005B02 337C 0104 0008             		move.w	#$104,8(a1)
00005B08 337C 0120 0038             		move.w	#$120,$38(a1)
00005B0E 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005B14 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005B1A 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005B20 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005B24                            
00005B24                            Obj8C_ChkEms:
00005B24 7000                       		moveq	#0,d0
00005B26 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005B2A 5340                       		subq.w	#1,d0
00005B2C 6500                       		bcs.s	loc_5B42
00005B2E                            
00005B2E                            Obj8C_ChkEmLoop:
00005B2E B433 0000                  		cmp.b	(a3,d0.w),d2
00005B32 6600                       		bne.s	loc_5B3E
00005B34 5202                       		addq.b	#1,d2
00005B36 60EC                       		bra.s	Obj8C_ChkEms
00005B38                            ; ===========================================================================
00005B38                            
00005B38                            loc_5B3E:
00005B38 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005B3C                            
00005B3C                            loc_5B42:
00005B3C 1342 001A                  		move.b	d2,$1A(a1)
00005B40 5229 001A                  		addq.b	#1,$1A(a1)
00005B44 5202                       		addq.b	#1,d2
00005B46 137C 0080 0026             		move.b	#$80,$26(a1)
00005B4C 1343 001E                  		move.b	d3,$1E(a1)
00005B50 1343 001F                  		move.b	d3,$1F(a1)
00005B54 0643 000A                  		addi.w	#$A,d3
00005B58 43E9 0040                  		lea	$40(a1),a1
00005B5C 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005B60                            
00005B60                            Obj8C_Move:				; XREF: Obj8C_Index
00005B60 4A68 003E                  		tst.w	$3E(a0)
00005B64 6700                       		beq.s	locret_5BBA
00005B66 4A28 001E                  		tst.b	$1E(a0)
00005B6A 6700                       		beq.s	loc_5B78
00005B6C 5328 001E                  		subq.b	#1,$1E(a0)
00005B70 6600                       		bne.s	loc_5B80
00005B72                            
00005B72                            loc_5B78:
00005B72 3028 003E                  		move.w	$3E(a0),d0
00005B76 D168 0026                  		add.w	d0,$26(a0)
00005B7A                            
00005B7A                            loc_5B80:
00005B7A 1028 0026                  		move.b	$26(a0),d0
00005B7E 6700                       		beq.s	loc_5B8C
00005B80 0C00 0080                  		cmpi.b	#$80,d0
00005B84 6600                       		bne.s	loc_5B96
00005B86                            
00005B86                            loc_5B8C:
00005B86 4268 003E                  		clr.w	$3E(a0)
00005B8A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005B90                            
00005B90                            loc_5B96:
00005B90 4EB9 0000 29DA             		jsr	(CalcSine).l
00005B96 7800                       		moveq	#0,d4
00005B98 1828 003C                  		move.b	$3C(a0),d4
00005B9C C3C4                       		muls.w	d4,d1
00005B9E E081                       		asr.l	#8,d1
00005BA0 C1C4                       		muls.w	d4,d0
00005BA2 E080                       		asr.l	#8,d0
00005BA4 D268 0038                  		add.w	$38(a0),d1
00005BA8 D068 003A                  		add.w	$3A(a0),d0
00005BAC 3141 0008                  		move.w	d1,8(a0)
00005BB0 3140 000A                  		move.w	d0,$A(a0)
00005BB4                            
00005BB4                            locret_5BBA:
00005BB4 4E75                       		rts	
00005BB6                            ; ===========================================================================
00005BB6                            ; ---------------------------------------------------------------------------
00005BB6                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005BB6                            ; ---------------------------------------------------------------------------
00005BB6                            Map_obj8B:
00005BB6                            	include "_maps\obj8B.asm"
00005BB6                            ; ---------------------------------------------------------------------------
00005BB6                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005BB6                            ; ---------------------------------------------------------------------------
00005BB6 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005BBA 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005BBE 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005BC2 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005BC6 08                         byte_5BCC:	dc.b 8
00005BC7 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005BCC F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005BD1 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005BD6 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005BDB 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005BE0 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005BE5 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005BEA 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005BEF 08                         byte_5BF5:	dc.b 8
00005BF0 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005BF5 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005BFA E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005BFF F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005C04 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C09 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C0E 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C13 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C18 08                         byte_5C1E:	dc.b 8
00005C19 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005C1E F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005C23 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005C28 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005C2D 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C32 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C37 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C3C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C41 08                         byte_5C47:	dc.b 8
00005C42 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005C47 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005C4C E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005C51 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005C56 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C5B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C60 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C65 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C6A 0C                         byte_5C70:	dc.b $C
00005C6B ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005C70 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005C75 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005C7A 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005C7F ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005C84 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005C89 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005C8E 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005C93 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005C98 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005C9D 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005CA2 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005CA7 0A                         byte_5CAD:	dc.b $A
00005CA8 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005CAD DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005CB2 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005CB7 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005CBC DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005CC1 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005CC6 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CCB 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005CD0 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005CD5 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005CDA 0A                         byte_5CE0:	dc.b $A
00005CDB C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005CE0 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005CE5 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005CEA C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005CEF E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005CF4 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005CF9 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CFE 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005D03 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005D08 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005D0D 0C                         byte_5D13:	dc.b $C
00005D0E F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005D13 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005D18 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005D1D 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005D22 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005D27 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005D2C 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005D31 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005D36 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005D3B 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005D40 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005D45 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005D4A                            		even
00005D4A                            		even
00005D4A                            
00005D4A                            ; ---------------------------------------------------------------------------
00005D4A                            ; Ending sequence demos
00005D4A                            ; ---------------------------------------------------------------------------
00005D4A                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005D78                            		even
00005D78                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005DB8                            		even
00005DB8                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005DE8                            		even
00005DE8                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00005E18                            		even
00005E18                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00005E38                            		even
00005E38                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00005E58                            		even
00005E58                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00005E88                            		even
00005E88                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00005EB8                            		even
00005EB8                            
00005EB8                            ; ---------------------------------------------------------------------------
00005EB8                            ; Subroutine to	load level boundaries and start	locations
00005EB8                            ; ---------------------------------------------------------------------------
00005EB8                            
00005EB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EB8                            
00005EB8                            
00005EB8                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00005EB8 7000                       		moveq	#0,d0
00005EBA 11C0 F740                  		move.b	d0,($FFFFF740).w
00005EBE 11C0 F741                  		move.b	d0,($FFFFF741).w
00005EC2 11C0 F746                  		move.b	d0,($FFFFF746).w
00005EC6 11C0 F748                  		move.b	d0,($FFFFF748).w
00005ECA 11C0 F742                  		move.b	d0,($FFFFF742).w
00005ECE 3038 FE10                  		move.w	($FFFFFE10).w,d0
00005ED2 ED08                       		lsl.b	#6,d0
00005ED4 E848                       		lsr.w	#4,d0
00005ED6 3200                       		move.w	d0,d1
00005ED8 D040                       		add.w	d0,d0
00005EDA D041                       		add.w	d1,d0
00005EDC 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00005EE0 3018                       		move.w	(a0)+,d0
00005EE2 31C0 F730                  		move.w	d0,($FFFFF730).w
00005EE6 2018                       		move.l	(a0)+,d0
00005EE8 21C0 F728                  		move.l	d0,($FFFFF728).w
00005EEC 21C0 F720                  		move.l	d0,($FFFFF720).w
00005EF0 2018                       		move.l	(a0)+,d0
00005EF2 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00005EF6 21C0 F724                  		move.l	d0,($FFFFF724).w
00005EFA 3038 F728                  		move.w	($FFFFF728).w,d0
00005EFE 0640 0240                  		addi.w	#$240,d0
00005F02 31C0 F732                  		move.w	d0,($FFFFF732).w
00005F06 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00005F0C 3018                       		move.w	(a0)+,d0
00005F0E 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00005F12 6000 0000                  		bra.w	LevSz_ChkLamp
00005F16                            ; ===========================================================================
00005F16                            ; ---------------------------------------------------------------------------
00005F16                            ; Level size array and ending start location array
00005F16                            ; ---------------------------------------------------------------------------
00005F16                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006066                            		even
00006066                            
00006066                            EndingStLocArray:
00006066                            		incbin	misc\sloc_end.bin
00006086                            		even
00006086                            
00006086                            ; ===========================================================================
00006086                            
00006086                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006086 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000608A 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000608C 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006092 3238 D008                  		move.w	($FFFFD008).w,d1
00006096 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000609A 6000                       		bra.s	loc_60D0
0000609C                            ; ===========================================================================
0000609C                            
0000609C                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000609C 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060A0 ED08                       		lsl.b	#6,d0
000060A2 E848                       		lsr.w	#4,d0
000060A4 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000060A8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000060AC 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000060AE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000060B2 5340                       		subq.w	#1,d0
000060B4 E548                       		lsl.w	#2,d0
000060B6 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000060BA                            
000060BA                            LevSz_SonicPos:
000060BA 7200                       		moveq	#0,d1
000060BC 3219                       		move.w	(a1)+,d1
000060BE 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000060C2 7000                       		moveq	#0,d0
000060C4 3011                       		move.w	(a1),d0
000060C6 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000060CA                            
000060CA                            loc_60D0:				; XREF: LevSz_ChkLamp
000060CA 0441 00A0                  		subi.w	#$A0,d1
000060CE 6400                       		bcc.s	loc_60D8
000060D0 7200                       		moveq	#0,d1
000060D2                            
000060D2                            loc_60D8:
000060D2 3438 F72A                  		move.w	($FFFFF72A).w,d2
000060D6 B242                       		cmp.w	d2,d1
000060D8 6500                       		bcs.s	loc_60E2
000060DA 3202                       		move.w	d2,d1
000060DC                            
000060DC                            loc_60E2:
000060DC 31C1 F700                  		move.w	d1,($FFFFF700).w
000060E0 0440 0060                  		subi.w	#$60,d0
000060E4 6400                       		bcc.s	loc_60EE
000060E6 7000                       		moveq	#0,d0
000060E8                            
000060E8                            loc_60EE:
000060E8 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000060EC 6D00                       		blt.s	loc_60F8
000060EE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000060F2                            
000060F2                            loc_60F8:
000060F2 31C0 F704                  		move.w	d0,($FFFFF704).w
000060F6 6100 0000                  		bsr.w	BgScrollSpeed
000060FA 7000                       		moveq	#0,d0
000060FC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006100 E508                       		lsl.b	#2,d0
00006102 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006108 6000 0000                  		bra.w	LevSz_Unk
0000610C                            ; ===========================================================================
0000610C                            ; ---------------------------------------------------------------------------
0000610C                            ; Sonic	start location array
0000610C                            ; ---------------------------------------------------------------------------
0000610C                            StartLocArray:	incbin	misc\sloc_lev.bin
0000617C                            		even
0000617C                            
0000617C                            ; ---------------------------------------------------------------------------
0000617C                            ; Which	256x256	tiles contain loops or roll-tunnels
0000617C                            ; ---------------------------------------------------------------------------
0000617C                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000617C                            ; loop,	loop, tunnel, tunnel
0000617C                            ; ---------------------------------------------------------------------------
0000617C                            LoopTileNums:	incbin	misc\loopnums.bin
00006198                            		even
00006198                            
00006198                            ; ===========================================================================
00006198                            
00006198                            LevSz_Unk:				; XREF: LevelSizeLoad
00006198 7000                       		moveq	#0,d0
0000619A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000619E E748                       		lsl.w	#3,d0
000061A0 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000061A4 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000061A8 24D9                       		move.l	(a1)+,(a2)+
000061AA 24D9                       		move.l	(a1)+,(a2)+
000061AC 4E75                       		rts	
000061AE                            ; End of function LevelSizeLoad
000061AE                            
000061AE                            ; ===========================================================================
000061AE 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000061B6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061BE 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061C6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061CE 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061D6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061DE 0070 0100 0100 0100        		dc.l $700100, $1000100
000061E6                            
000061E6                            ; ---------------------------------------------------------------------------
000061E6                            ; Subroutine to	set scroll speed of some backgrounds
000061E6                            ; ---------------------------------------------------------------------------
000061E6                            
000061E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000061E6                            
000061E6                            
000061E6                            BgScrollSpeed:				; XREF: LevelSizeLoad
000061E6 4A38 FE30                  		tst.b	($FFFFFE30).w
000061EA 6600                       		bne.s	loc_6206
000061EC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000061F0 31C0 F714                  		move.w	d0,($FFFFF714).w
000061F4 31C1 F708                  		move.w	d1,($FFFFF708).w
000061F8 31C1 F710                  		move.w	d1,($FFFFF710).w
000061FC 31C1 F718                  		move.w	d1,($FFFFF718).w
00006200                            
00006200                            loc_6206:
00006200 7400                       		moveq	#0,d2
00006202 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006206 D442                       		add.w	d2,d2
00006208 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000620C 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006210                            ; End of function BgScrollSpeed
00006210                            
00006210                            ; ===========================================================================
00006210 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006214 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006218 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000621C 0000                       		dc.w BgScroll_End-BgScroll_Index
0000621E                            ; ===========================================================================
0000621E                            
0000621E                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000621E 6000 0000                  		bra.w	Deform_GHZ
00006222                            ; ===========================================================================
00006222                            
00006222                            BgScroll_LZ:				; XREF: BgScroll_Index
00006222 E280                       		asr.l	#1,d0
00006224 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006228 4E75                       		rts	
0000622A                            ; ===========================================================================
0000622A                            
0000622A                            BgScroll_MZ:				; XREF: BgScroll_Index
0000622A 4E75                       		rts	
0000622C                            ; ===========================================================================
0000622C                            
0000622C                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000622C E280                       		asr.l	#1,d0
0000622E 0640 00C0                  		addi.w	#$C0,d0
00006232 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006236 4E75                       		rts	
00006238                            ; ===========================================================================
00006238                            
00006238                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006238 E980                       		asl.l	#4,d0
0000623A 2400                       		move.l	d0,d2
0000623C E380                       		asl.l	#1,d0
0000623E D082                       		add.l	d2,d0
00006240 E080                       		asr.l	#8,d0
00006242 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006246 31C0 F714                  		move.w	d0,($FFFFF714).w
0000624A 4E75                       		rts	
0000624C                            ; ===========================================================================
0000624C                            
0000624C                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000624C E980                       		asl.l	#4,d0
0000624E E380                       		asl.l	#1,d0
00006250 E080                       		asr.l	#8,d0
00006252 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006256 4E75                       		rts	
00006258                            ; ===========================================================================
00006258                            
00006258                            BgScroll_End:				; XREF: BgScroll_Index
00006258 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000625E 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006264 4E75                       		rts	
00006266                            ; ===========================================================================
00006266 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000626C 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006272 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006278 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000627E 4E75                       		rts
00006280                            
00006280                            ; ---------------------------------------------------------------------------
00006280                            ; Background layer deformation subroutines
00006280                            ; ---------------------------------------------------------------------------
00006280                            
00006280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006280                            
00006280                            
00006280                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006280 4A38 F744                  		tst.b	($FFFFF744).w
00006284 6700                       		beq.s	loc_628E
00006286 4E75                       		rts	
00006288                            ; ===========================================================================
00006288                            
00006288                            loc_628E:
00006288 4278 F754                  		clr.w	($FFFFF754).w
0000628C 4278 F756                  		clr.w	($FFFFF756).w
00006290 4278 F758                  		clr.w	($FFFFF758).w
00006294 4278 F75A                  		clr.w	($FFFFF75A).w
00006298 6100 0000                  		bsr.w	ScrollHoriz
0000629C 6100 0000                  		bsr.w	ScrollVertical
000062A0 6100 0000                  		bsr.w	DynScrResizeLoad
000062A4 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000062AA 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000062B0 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000062B6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000062BC 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000062C2 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000062C8 7000                       		moveq	#0,d0
000062CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062CE D040                       		add.w	d0,d0
000062D0 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000062D4 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000062D8                            ; End of function DeformBgLayer
000062D8                            
000062D8                            ; ===========================================================================
000062D8                            ; ---------------------------------------------------------------------------
000062D8                            ; Offset index for background layer deformation	code
000062D8                            ; ---------------------------------------------------------------------------
000062D8 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000062DC 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000062E0 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000062E4 0000                       		dc.w Deform_GHZ-Deform_Index
000062E6                            ; ---------------------------------------------------------------------------
000062E6                            ; Green	Hill Zone background layer deformation code
000062E6                            ; ---------------------------------------------------------------------------
000062E6                            
000062E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062E6                            
000062E6                            
000062E6                            Deform_GHZ:				; XREF: Deform_Index
000062E6 3838 F73A                  		move.w	($FFFFF73A).w,d4
000062EA 48C4                       		ext.l	d4
000062EC EB84                       		asl.l	#5,d4
000062EE 2204                       		move.l	d4,d1
000062F0 E384                       		asl.l	#1,d4
000062F2 D881                       		add.l	d1,d4
000062F4 7A00                       		moveq	#0,d5
000062F6 6100 0000                  		bsr.w	ScrollBlock1
000062FA 6100 0000                  		bsr.w	ScrollBlock4
000062FE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006302 3038 F704                  		move.w	($FFFFF704).w,d0
00006306 0240 07FF                  		andi.w	#$7FF,d0
0000630A EA48                       		lsr.w	#5,d0
0000630C 4440                       		neg.w	d0
0000630E 0640 0026                  		addi.w	#$26,d0
00006312 31C0 F714                  		move.w	d0,($FFFFF714).w
00006316 3800                       		move.w	d0,d4
00006318 6100 0000                  		bsr.w	ScrollBlock3
0000631C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006322 323C 006F                  		move.w	#$6F,d1
00006326 9244                       		sub.w	d4,d1
00006328 3038 F700                  		move.w	($FFFFF700).w,d0
0000632C 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006332 6600                       		bne.s	loc_633C
00006334 7000                       		moveq	#0,d0
00006336                            
00006336                            loc_633C:
00006336 4440                       		neg.w	d0
00006338 4840                       		swap	d0
0000633A 3038 F708                  		move.w	($FFFFF708).w,d0
0000633E 4440                       		neg.w	d0
00006340                            
00006340                            loc_6346:
00006340 22C0                       		move.l	d0,(a1)+
00006342 51C9 FFFC                  		dbf	d1,loc_6346
00006346 323C 0027                  		move.w	#$27,d1
0000634A 3038 F710                  		move.w	($FFFFF710).w,d0
0000634E 4440                       		neg.w	d0
00006350                            
00006350                            loc_6356:
00006350 22C0                       		move.l	d0,(a1)+
00006352 51C9 FFFC                  		dbf	d1,loc_6356
00006356 3038 F710                  		move.w	($FFFFF710).w,d0
0000635A 0640 0000                  		addi.w	#0,d0
0000635E 3438 F700                  		move.w	($FFFFF700).w,d2
00006362 0642 FE00                  		addi.w	#-$200,d2
00006366 9440                       		sub.w	d0,d2
00006368 48C2                       		ext.l	d2
0000636A E182                       		asl.l	#8,d2
0000636C 85FC 0068                  		divs.w	#$68,d2
00006370 48C2                       		ext.l	d2
00006372 E182                       		asl.l	#8,d2
00006374 7600                       		moveq	#0,d3
00006376 3600                       		move.w	d0,d3
00006378 323C 0047                  		move.w	#$47,d1
0000637C D244                       		add.w	d4,d1
0000637E                            
0000637E                            loc_6384:
0000637E 3003                       		move.w	d3,d0
00006380 4440                       		neg.w	d0
00006382 22C0                       		move.l	d0,(a1)+
00006384 4843                       		swap	d3
00006386 D682                       		add.l	d2,d3
00006388 4843                       		swap	d3
0000638A 51C9 FFF2                  		dbf	d1,loc_6384
0000638E 4E75                       		rts	
00006390                            ; End of function Deform_GHZ
00006390                            
00006390                            ; ---------------------------------------------------------------------------
00006390                            ; Labyrinth Zone background layer deformation code
00006390                            ; ---------------------------------------------------------------------------
00006390                            
00006390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006390                            
00006390                            
00006390                            Deform_LZ:				; XREF: Deform_Index
00006390 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006394 48C4                       		ext.l	d4
00006396 EF84                       		asl.l	#7,d4
00006398 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000639C 48C5                       		ext.l	d5
0000639E EF85                       		asl.l	#7,d5
000063A0 6100 0000                  		bsr.w	ScrollBlock1
000063A4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000063AA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000063AE 323C 00DF                  		move.w	#$DF,d1
000063B2 3038 F700                  		move.w	($FFFFF700).w,d0
000063B6 4440                       		neg.w	d0
000063B8 4840                       		swap	d0
000063BA 3038 F708                  		move.w	($FFFFF708).w,d0
000063BE 4440                       		neg.w	d0
000063C0                            
000063C0                            loc_63C6:
000063C0 22C0                       		move.l	d0,(a1)+
000063C2 51C9 FFFC                  		dbf	d1,loc_63C6
000063C6 3038 F646                  		move.w	($FFFFF646).w,d0
000063CA 9078 F704                  		sub.w	($FFFFF704).w,d0
000063CE 4E75                       		rts	
000063D0                            ; End of function Deform_LZ
000063D0                            
000063D0                            ; ---------------------------------------------------------------------------
000063D0                            ; Marble Zone background layer deformation code
000063D0                            ; ---------------------------------------------------------------------------
000063D0                            
000063D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063D0                            
000063D0                            
000063D0                            Deform_MZ:				; XREF: Deform_Index
000063D0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000063D4 48C4                       		ext.l	d4
000063D6 ED84                       		asl.l	#6,d4
000063D8 2204                       		move.l	d4,d1
000063DA E384                       		asl.l	#1,d4
000063DC D881                       		add.l	d1,d4
000063DE 7A00                       		moveq	#0,d5
000063E0 6100 0000                  		bsr.w	ScrollBlock1
000063E4 303C 0200                  		move.w	#$200,d0
000063E8 3238 F704                  		move.w	($FFFFF704).w,d1
000063EC 0441 01C8                  		subi.w	#$1C8,d1
000063F0 6500                       		bcs.s	loc_6402
000063F2 3401                       		move.w	d1,d2
000063F4 D241                       		add.w	d1,d1
000063F6 D242                       		add.w	d2,d1
000063F8 E441                       		asr.w	#2,d1
000063FA D041                       		add.w	d1,d0
000063FC                            
000063FC                            loc_6402:
000063FC 31C0 F714                  		move.w	d0,($FFFFF714).w
00006400 6100 0000                  		bsr.w	ScrollBlock3
00006404 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000640A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000640E 323C 00DF                  		move.w	#$DF,d1
00006412 3038 F700                  		move.w	($FFFFF700).w,d0
00006416 4440                       		neg.w	d0
00006418 4840                       		swap	d0
0000641A 3038 F708                  		move.w	($FFFFF708).w,d0
0000641E 4440                       		neg.w	d0
00006420                            
00006420                            loc_6426:
00006420 22C0                       		move.l	d0,(a1)+
00006422 51C9 FFFC                  		dbf	d1,loc_6426
00006426 4E75                       		rts	
00006428                            ; End of function Deform_MZ
00006428                            
00006428                            ; ---------------------------------------------------------------------------
00006428                            ; Star Light Zone background layer deformation code
00006428                            ; ---------------------------------------------------------------------------
00006428                            
00006428                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006428                            
00006428                            
00006428                            Deform_SLZ:				; XREF: Deform_Index
00006428 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000642C 48C4                       		ext.l	d4
0000642E EB84                       		asl.l	#5,d4
00006430 2204                       		move.l	d4,d1
00006432 E384                       		asl.l	#1,d4
00006434 D881                       		add.l	d1,d4
00006436 7A00                       		moveq	#0,d5
00006438 6100 0000                  		bsr.w	ScrollBlock1
0000643C 6100 0000                  		bsr.w	ScrollBlock3
00006440 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006444                            	;	move.w	($FFFFF704).w,d0
00006444                            	;	andi.w	#$7FF,d0
00006444 EA48                       		lsr.w	#5,d0
00006446 4440                       		neg.w	d0
00006448 0640 0026                  		addi.w	#$26,d0
0000644C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006450 3800                       		move.w	d0,d4
00006452                            	;	bsr.w	ScrollBlock3
00006452 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006458 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
0000645C                            
0000645C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006460 4440                       		neg.w	d0			; negate (positive to negative)
00006462 4840                       		swap	d0			; send to the left side of d0
00006464 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006468 45F8 A800                  		lea	($FFFFA800).w,a2
0000646C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006472 069A 0000 C000             		addi.l	#$C000,(a2)+
00006478 3038 A800                  		move.w	($FFFFA800).w,d0
0000647C 4440                       		neg.w	d0			; negate (positive to negative)
0000647E E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006480 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006484                            slz_DeformLoop_1:
00006484 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006486 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
0000648A                            
0000648A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000648E 4440                       		neg.w	d0			; negate (positive to negative)
00006490 4840                       		swap	d0			; send to the left side of d0
00006492 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006496 45F8 A800                  		lea	($FFFFA800).w,a2
0000649A 069A 0000 5000             		addi.l	#$5000,(a2)+
000064A0 069A 0000 C000             		addi.l	#$C000,(a2)+
000064A6 3038 A800                  		move.w	($FFFFA800).w,d0
000064AA 4440                       		neg.w	d0			; negate (positive to negative)
000064AC E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000064AE 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000064B2                            slz_DeformLoop_2:
000064B2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000064B4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000064B8                            
000064B8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000064BC 4440                       		neg.w	d0			; negate (positive to negative)
000064BE 4840                       		swap	d0			; send to the left side of d0
000064C0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000064C4 45F8 A800                  		lea	($FFFFA800).w,a2
000064C8 069A 0000 5000             		addi.l	#$5000,(a2)+
000064CE 069A 0000 C000             		addi.l	#$C000,(a2)+
000064D4 3038 A800                  		move.w	($FFFFA800).w,d0
000064D8 4440                       		neg.w	d0			; negate (positive to negative)
000064DA E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000064DC 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000064E0                            slz_DeformLoop_3:
000064E0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000064E2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
000064E6                            
000064E6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000064EA 4440                       		neg.w	d0			; negate (positive to negative)
000064EC 4840                       		swap	d0			; send to the left side of d0
000064EE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000064F2 45F8 A800                  		lea	($FFFFA800).w,a2
000064F6 069A 0000 5000             		addi.l	#$5000,(a2)+
000064FC 069A 0000 C000             		addi.l	#$C000,(a2)+
00006502 3038 A800                  		move.w	($FFFFA800).w,d0
00006506 4440                       		neg.w	d0			; negate (positive to negative)
00006508 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000650A 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000650E                            slz_DeformLoop_4:
0000650E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006510 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006514                            
00006514 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006518 4440                       		neg.w	d0			; negate (positive to negative)
0000651A 4840                       		swap	d0			; send to the left side of d0
0000651C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006520 45F8 A800                  		lea	($FFFFA800).w,a2
00006524 069A 0000 5000             		addi.l	#$5000,(a2)+
0000652A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006530 3038 A800                  		move.w	($FFFFA800).w,d0
00006534 4440                       		neg.w	d0			; negate (positive to negative)
00006536 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006538 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000653C                            slz_DeformLoop_5:
0000653C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000653E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006542                            
00006542 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006546 4440                       		neg.w	d0			; negate (positive to negative)
00006548 4840                       		swap	d0			; send to the left side of d0
0000654A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000654E 4440                       		neg.w	d0			; negate (positive to negative)
00006550 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006552 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006556                            slz_DeformLoop_6:
00006556 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006558 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
0000655C                            
0000655C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006560 4440                       		neg.w	d0			; negate (positive to negative)
00006562 4840                       		swap	d0			; send to the left side of d0
00006564 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006568 4440                       		neg.w	d0			; negate (positive to negative)
0000656A EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
0000656C 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006570                            slz_DeformLoop_7:
00006570 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006572 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006576                            
00006576 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000657A 4440                       		neg.w	d0			; negate (positive to negative)
0000657C 4840                       		swap	d0			; send to the left side of d0
0000657E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006582 4440                       		neg.w	d0			; negate (positive to negative)
00006584 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006586 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000658A                            slz_DeformLoop_8:
0000658A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000658C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006590                            
00006590 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006594 4440                       		neg.w	d0			; negate (positive to negative)
00006596 4840                       		swap	d0			; send to the left side of d0
00006598 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000659C 4440                       		neg.w	d0			; negate (positive to negative)
0000659E EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000065A0 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065A4                            slz_DeformLoop_9:
000065A4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065A6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000065AA                            
000065AA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065AE 4440                       		neg.w	d0			; negate (positive to negative)
000065B0 4840                       		swap	d0			; send to the left side of d0
000065B2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065B6 4440                       		neg.w	d0			; negate (positive to negative)
000065B8 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000065BA 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065BE                            slz_DeformLoop_10:
000065BE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065C0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
000065C4                            
000065C4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065C8 4440                       		neg.w	d0			; negate (positive to negative)
000065CA 4840                       		swap	d0			; send to the left side of d0
000065CC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065D0 4440                       		neg.w	d0			; negate (positive to negative)
000065D2 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000065D4 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065D8                            slz_DeformLoop_11:
000065D8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065DA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
000065DE                            
000065DE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065E2 4440                       		neg.w	d0			; negate (positive to negative)
000065E4 4840                       		swap	d0			; send to the left side of d0
000065E6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065EA 4440                       		neg.w	d0			; negate (positive to negative)
000065EC E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000065EE 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065F2                            slz_DeformLoop_12:
000065F2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065F4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
000065F8                            
000065F8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065FC 4440                       		neg.w	d0			; negate (positive to negative)
000065FE 4840                       		swap	d0			; send to the left side of d0
00006600 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006604 4440                       		neg.w	d0			; negate (positive to negative)
00006606 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006608 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000660C                            slz_DeformLoop_13:
0000660C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000660E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006612 4E75                       		rts	
00006614                            ; End of function Deform_SLZ
00006614 4E75                       		rts	
00006616                            ; End of function Deform_SLZ_2
00006616                            
00006616                            ; ---------------------------------------------------------------------------
00006616                            ; Spring Yard Zone background layer deformation	code
00006616                            ; ---------------------------------------------------------------------------
00006616                            
00006616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006616                            
00006616                            
00006616                            Deform_SYZ:				; XREF: Deform_Index
00006616 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000661A 48C4                       		ext.l	d4
0000661C ED84                       		asl.l	#6,d4
0000661E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006622 48C5                       		ext.l	d5
00006624 E985                       		asl.l	#4,d5
00006626 2205                       		move.l	d5,d1
00006628 E385                       		asl.l	#1,d5
0000662A DA81                       		add.l	d1,d5
0000662C 6100 0000                  		bsr.w	ScrollBlock1
00006630 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006636 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000663A 323C 00DF                  		move.w	#$DF,d1
0000663E 3038 F700                  		move.w	($FFFFF700).w,d0
00006642 4440                       		neg.w	d0
00006644 4840                       		swap	d0
00006646 3038 F708                  		move.w	($FFFFF708).w,d0
0000664A 4440                       		neg.w	d0
0000664C                            
0000664C                            loc_653C:
0000664C 22C0                       		move.l	d0,(a1)+
0000664E 51C9 FFFC                  		dbf	d1,loc_653C
00006652 4E75                       		rts	
00006654                            ; End of function Deform_SYZ
00006654                            
00006654                            ; ---------------------------------------------------------------------------
00006654                            ; Scrap	Brain Zone background layer deformation	code
00006654                            ; ---------------------------------------------------------------------------
00006654                            
00006654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006654                            
00006654                            
00006654                            Deform_SBZ:				; XREF: Deform_Index
00006654 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006658 48C4                       		ext.l	d4
0000665A ED84                       		asl.l	#6,d4
0000665C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006660 48C5                       		ext.l	d5
00006662 E985                       		asl.l	#4,d5
00006664 E385                       		asl.l	#1,d5
00006666 6100 0000                  		bsr.w	ScrollBlock1
0000666A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006670 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006674 323C 00DF                  		move.w	#$DF,d1
00006678 3038 F700                  		move.w	($FFFFF700).w,d0
0000667C 4440                       		neg.w	d0
0000667E 4840                       		swap	d0
00006680 3038 F708                  		move.w	($FFFFF708).w,d0
00006684 4440                       		neg.w	d0
00006686                            
00006686                            loc_6576:
00006686 22C0                       		move.l	d0,(a1)+
00006688 51C9 FFFC                  		dbf	d1,loc_6576
0000668C 4E75                       		rts	
0000668E                            ; End of function Deform_SBZ
0000668E                            
0000668E                            ; ---------------------------------------------------------------------------
0000668E                            ; Subroutine to	scroll the level horizontally as Sonic moves
0000668E                            ; ---------------------------------------------------------------------------
0000668E                            
0000668E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000668E                            
0000668E                            
0000668E                            ScrollHoriz:				; XREF: DeformBgLayer
0000668E 3838 F700                  		move.w	($FFFFF700).w,d4
00006692 6100                       		bsr.s	ScrollHoriz2
00006694 3038 F700                  		move.w	($FFFFF700).w,d0
00006698 0240 0010                  		andi.w	#$10,d0
0000669C 1238 F74A                  		move.b	($FFFFF74A).w,d1
000066A0 B300                       		eor.b	d1,d0
000066A2 6600                       		bne.s	locret_65B0
000066A4 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000066AA 3038 F700                  		move.w	($FFFFF700).w,d0
000066AE 9044                       		sub.w	d4,d0
000066B0 6A00                       		bpl.s	loc_65AA
000066B2 08F8 0002 F754             		bset	#2,($FFFFF754).w
000066B8 4E75                       		rts	
000066BA                            ; ===========================================================================
000066BA                            
000066BA                            loc_65AA:
000066BA 08F8 0003 F754             		bset	#3,($FFFFF754).w
000066C0                            
000066C0                            locret_65B0:
000066C0 4E75                       		rts	
000066C2                            ; End of function ScrollHoriz
000066C2                            
000066C2                            
000066C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066C2                            
000066C2                            
000066C2                            ScrollHoriz2:				; XREF: ScrollHoriz
000066C2 3038 D008                  		move.w	($FFFFD008).w,d0
000066C6 9078 F700                  		sub.w	($FFFFF700).w,d0
000066CA 0440 0090                  		subi.w	#$90,d0
000066CE 6500                       		bcs.s	loc_65F6
000066D0 0440 0010                  		subi.w	#$10,d0
000066D4 6400                       		bcc.s	loc_65CC
000066D6 4278 F73A                  		clr.w	($FFFFF73A).w
000066DA 4E75                       		rts	
000066DC                            ; ===========================================================================
000066DC                            
000066DC                            loc_65CC:
000066DC 0C40 0010                  		cmpi.w	#$10,d0
000066E0 6500                       		bcs.s	loc_65D6
000066E2 303C 0010                  		move.w	#$10,d0
000066E6                            
000066E6                            loc_65D6:
000066E6 D078 F700                  		add.w	($FFFFF700).w,d0
000066EA B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000066EE 6D00                       		blt.s	loc_65E4
000066F0 3038 F72A                  		move.w	($FFFFF72A).w,d0
000066F4                            
000066F4                            loc_65E4:
000066F4 3200                       		move.w	d0,d1
000066F6 9278 F700                  		sub.w	($FFFFF700).w,d1
000066FA E141                       		asl.w	#8,d1
000066FC 31C0 F700                  		move.w	d0,($FFFFF700).w
00006700 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006704 4E75                       		rts	
00006706                            ; ===========================================================================
00006706                            
00006706                            loc_65F6:				; XREF: ScrollHoriz2
00006706 D078 F700                  		add.w	($FFFFF700).w,d0
0000670A B078 F728                  		cmp.w	($FFFFF728).w,d0
0000670E 6EE4                       		bgt.s	loc_65E4
00006710 3038 F728                  		move.w	($FFFFF728).w,d0
00006714 60DE                       		bra.s	loc_65E4
00006716                            ; End of function ScrollHoriz2
00006716                            
00006716                            ; ===========================================================================
00006716 4A40                       		tst.w	d0
00006718 6A00                       		bpl.s	loc_6610
0000671A 303C FFFE                  		move.w	#-2,d0
0000671E 60E6                       		bra.s	loc_65F6
00006720                            ; ===========================================================================
00006720                            
00006720                            loc_6610:
00006720 303C 0002                  		move.w	#2,d0
00006724 60B6                       		bra.s	loc_65CC
00006726                            
00006726                            ; ---------------------------------------------------------------------------
00006726                            ; Subroutine to	scroll the level vertically as Sonic moves
00006726                            ; ---------------------------------------------------------------------------
00006726                            
00006726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006726                            
00006726                            
00006726                            ScrollVertical:				; XREF: DeformBgLayer
00006726 7200                       		moveq	#0,d1
00006728 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000672C 9078 F704                  		sub.w	($FFFFF704).w,d0
00006730 0838 0002 D022             		btst	#2,($FFFFD022).w
00006736 6700                       		beq.s	loc_662A
00006738 5B40                       		subq.w	#5,d0
0000673A                            
0000673A                            loc_662A:
0000673A 0838 0001 D022             		btst	#1,($FFFFD022).w
00006740 6700                       		beq.s	loc_664A
00006742 0640 0020                  		addi.w	#$20,d0
00006746 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000674A 6500                       		bcs.s	loc_6696
0000674C 0440 0040                  		subi.w	#$40,d0
00006750 6400                       		bcc.s	loc_6696
00006752 4A38 F75C                  		tst.b	($FFFFF75C).w
00006756 6600                       		bne.s	loc_66A8
00006758 6000                       		bra.s	loc_6656
0000675A                            ; ===========================================================================
0000675A                            
0000675A                            loc_664A:
0000675A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000675E 6600                       		bne.s	loc_665C
00006760 4A38 F75C                  		tst.b	($FFFFF75C).w
00006764 6600                       		bne.s	loc_66A8
00006766                            
00006766                            loc_6656:
00006766 4278 F73C                  		clr.w	($FFFFF73C).w
0000676A 4E75                       		rts	
0000676C                            ; ===========================================================================
0000676C                            
0000676C                            loc_665C:
0000676C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006772 6600                       		bne.s	loc_6684
00006774 3238 D014                  		move.w	($FFFFD014).w,d1
00006778 6A00                       		bpl.s	loc_666C
0000677A 4441                       		neg.w	d1
0000677C                            
0000677C                            loc_666C:
0000677C 0C41 0800                  		cmpi.w	#$800,d1
00006780 6400                       		bcc.s	loc_6696
00006782 323C 0600                  		move.w	#$600,d1
00006786 0C40 0006                  		cmpi.w	#6,d0
0000678A 6E00                       		bgt.s	loc_66F6
0000678C 0C40 FFFA                  		cmpi.w	#-6,d0
00006790 6D00                       		blt.s	loc_66C0
00006792 6000                       		bra.s	loc_66AE
00006794                            ; ===========================================================================
00006794                            
00006794                            loc_6684:
00006794 323C 0200                  		move.w	#$200,d1
00006798 0C40 0002                  		cmpi.w	#2,d0
0000679C 6E00                       		bgt.s	loc_66F6
0000679E 0C40 FFFE                  		cmpi.w	#-2,d0
000067A2 6D00                       		blt.s	loc_66C0
000067A4 6000                       		bra.s	loc_66AE
000067A6                            ; ===========================================================================
000067A6                            
000067A6                            loc_6696:
000067A6 323C 1000                  		move.w	#$1000,d1
000067AA 0C40 0010                  		cmpi.w	#$10,d0
000067AE 6E00                       		bgt.s	loc_66F6
000067B0 0C40 FFF0                  		cmpi.w	#-$10,d0
000067B4 6D00                       		blt.s	loc_66C0
000067B6 6000                       		bra.s	loc_66AE
000067B8                            ; ===========================================================================
000067B8                            
000067B8                            loc_66A8:
000067B8 7000                       		moveq	#0,d0
000067BA 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000067BE                            
000067BE                            loc_66AE:
000067BE 7200                       		moveq	#0,d1
000067C0 3200                       		move.w	d0,d1
000067C2 D278 F704                  		add.w	($FFFFF704).w,d1
000067C6 4A40                       		tst.w	d0
000067C8 6A00 0000                  		bpl.w	loc_6700
000067CC 6000 0000                  		bra.w	loc_66CC
000067D0                            ; ===========================================================================
000067D0                            
000067D0                            loc_66C0:
000067D0 4441                       		neg.w	d1
000067D2 48C1                       		ext.l	d1
000067D4 E181                       		asl.l	#8,d1
000067D6 D2B8 F704                  		add.l	($FFFFF704).w,d1
000067DA 4841                       		swap	d1
000067DC                            
000067DC                            loc_66CC:
000067DC B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000067E0 6E00                       		bgt.s	loc_6724
000067E2 0C41 FF00                  		cmpi.w	#-$100,d1
000067E6 6E00                       		bgt.s	loc_66F0
000067E8 0241 07FF                  		andi.w	#$7FF,d1
000067EC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000067F2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000067F8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000067FE 6000                       		bra.s	loc_6724
00006800                            ; ===========================================================================
00006800                            
00006800                            loc_66F0:
00006800 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006804 6000                       		bra.s	loc_6724
00006806                            ; ===========================================================================
00006806                            
00006806                            loc_66F6:
00006806 48C1                       		ext.l	d1
00006808 E181                       		asl.l	#8,d1
0000680A D2B8 F704                  		add.l	($FFFFF704).w,d1
0000680E 4841                       		swap	d1
00006810                            
00006810                            loc_6700:
00006810 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006814 6D00                       		blt.s	loc_6724
00006816 0441 0800                  		subi.w	#$800,d1
0000681A 6500                       		bcs.s	loc_6720
0000681C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006822 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006828 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000682E 6000                       		bra.s	loc_6724
00006830                            ; ===========================================================================
00006830                            
00006830                            loc_6720:
00006830 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006834                            
00006834                            loc_6724:
00006834 3838 F704                  		move.w	($FFFFF704).w,d4
00006838 4841                       		swap	d1
0000683A 2601                       		move.l	d1,d3
0000683C 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006840 E09B                       		ror.l	#8,d3
00006842 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006846 21C1 F704                  		move.l	d1,($FFFFF704).w
0000684A 3038 F704                  		move.w	($FFFFF704).w,d0
0000684E 0240 0010                  		andi.w	#$10,d0
00006852 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006856 B300                       		eor.b	d1,d0
00006858 6600                       		bne.s	locret_6766
0000685A 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006860 3038 F704                  		move.w	($FFFFF704).w,d0
00006864 9044                       		sub.w	d4,d0
00006866 6A00                       		bpl.s	loc_6760
00006868 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000686E 4E75                       		rts	
00006870                            ; ===========================================================================
00006870                            
00006870                            loc_6760:
00006870 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006876                            
00006876                            locret_6766:
00006876 4E75                       		rts	
00006878                            ; End of function ScrollVertical
00006878                            
00006878                            
00006878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006878                            
00006878                            
00006878                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006878 2438 F708                  		move.l	($FFFFF708).w,d2
0000687C 2002                       		move.l	d2,d0
0000687E D084                       		add.l	d4,d0
00006880 21C0 F708                  		move.l	d0,($FFFFF708).w
00006884 2200                       		move.l	d0,d1
00006886 4841                       		swap	d1
00006888 0241 0010                  		andi.w	#$10,d1
0000688C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006890 B701                       		eor.b	d3,d1
00006892 6600                       		bne.s	loc_679C
00006894 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000689A 9082                       		sub.l	d2,d0
0000689C 6A00                       		bpl.s	loc_6796
0000689E 08F8 0002 F756             		bset	#2,($FFFFF756).w
000068A4 6000                       		bra.s	loc_679C
000068A6                            ; ===========================================================================
000068A6                            
000068A6                            loc_6796:
000068A6 08F8 0003 F756             		bset	#3,($FFFFF756).w
000068AC                            
000068AC                            loc_679C:
000068AC 2638 F70C                  		move.l	($FFFFF70C).w,d3
000068B0 2003                       		move.l	d3,d0
000068B2 D085                       		add.l	d5,d0
000068B4 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000068B8 2200                       		move.l	d0,d1
000068BA 4841                       		swap	d1
000068BC 0241 0010                  		andi.w	#$10,d1
000068C0 1438 F74D                  		move.b	($FFFFF74D).w,d2
000068C4 B501                       		eor.b	d2,d1
000068C6 6600                       		bne.s	locret_67D0
000068C8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000068CE 9083                       		sub.l	d3,d0
000068D0 6A00                       		bpl.s	loc_67CA
000068D2 08F8 0000 F756             		bset	#0,($FFFFF756).w
000068D8 4E75                       		rts	
000068DA                            ; ===========================================================================
000068DA                            
000068DA                            loc_67CA:
000068DA 08F8 0001 F756             		bset	#1,($FFFFF756).w
000068E0                            
000068E0                            locret_67D0:
000068E0 4E75                       		rts	
000068E2                            ; End of function ScrollBlock1
000068E2                            
000068E2                            
000068E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068E2                            
000068E2                            
000068E2                            ScrollBlock2:				; XREF: Deform_SLZ
000068E2 2438 F708                  		move.l	($FFFFF708).w,d2
000068E6 2002                       		move.l	d2,d0
000068E8 D084                       		add.l	d4,d0
000068EA 21C0 F708                  		move.l	d0,($FFFFF708).w
000068EE 2638 F70C                  		move.l	($FFFFF70C).w,d3
000068F2 2003                       		move.l	d3,d0
000068F4 D085                       		add.l	d5,d0
000068F6 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000068FA 2200                       		move.l	d0,d1
000068FC 4841                       		swap	d1
000068FE 0241 0010                  		andi.w	#$10,d1
00006902 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006906 B501                       		eor.b	d2,d1
00006908 6600                       		bne.s	locret_6812
0000690A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006910 9083                       		sub.l	d3,d0
00006912 6A00                       		bpl.s	loc_680C
00006914 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000691A 4E75                       		rts	
0000691C                            ; ===========================================================================
0000691C                            
0000691C                            loc_680C:
0000691C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006922                            
00006922                            locret_6812:
00006922 4E75                       		rts	
00006924                            ; End of function ScrollBlock2
00006924                            
00006924                            
00006924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006924                            
00006924                            
00006924                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006924 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006928 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000692C 3200                       		move.w	d0,d1
0000692E 0241 0010                  		andi.w	#$10,d1
00006932 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006936 B501                       		eor.b	d2,d1
00006938 6600                       		bne.s	locret_6842
0000693A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006940 9043                       		sub.w	d3,d0
00006942 6A00                       		bpl.s	loc_683C
00006944 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000694A 4E75                       		rts	
0000694C                            ; ===========================================================================
0000694C                            
0000694C                            loc_683C:
0000694C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006952                            
00006952                            locret_6842:
00006952 4E75                       		rts	
00006954                            ; End of function ScrollBlock3
00006954                            
00006954                            
00006954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006954                            
00006954                            
00006954                            ScrollBlock4:				; XREF: Deform_GHZ
00006954 3438 F710                  		move.w	($FFFFF710).w,d2
00006958 3638 F714                  		move.w	($FFFFF714).w,d3
0000695C 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006960 48C0                       		ext.l	d0
00006962 EF80                       		asl.l	#7,d0
00006964 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006968 3038 F710                  		move.w	($FFFFF710).w,d0
0000696C 0240 0010                  		andi.w	#$10,d0
00006970 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006974 B300                       		eor.b	d1,d0
00006976 6600                       		bne.s	locret_6884
00006978 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000697E 3038 F710                  		move.w	($FFFFF710).w,d0
00006982 9042                       		sub.w	d2,d0
00006984 6A00                       		bpl.s	loc_687E
00006986 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000698C 6000                       		bra.s	locret_6884
0000698E                            ; ===========================================================================
0000698E                            
0000698E                            loc_687E:
0000698E 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006994                            
00006994                            locret_6884:
00006994 4E75                       		rts	
00006996                            ; End of function ScrollBlock4
00006996                            
00006996                            
00006996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006996                            
00006996                            
00006996                            sub_6886:				; XREF: loc_C44
00006996 4BF9 00C0 0004             		lea	($C00004).l,a5
0000699C 4DF9 00C0 0000             		lea	($C00000).l,a6
000069A2 45F8 F756                  		lea	($FFFFF756).w,a2
000069A6 47F8 F708                  		lea	($FFFFF708).w,a3
000069AA 49F8 A440                  		lea	($FFFFA440).w,a4
000069AE 343C 6000                  		move.w	#$6000,d2
000069B2 6100 0000                  		bsr.w	sub_6954
000069B6 45F8 F758                  		lea	($FFFFF758).w,a2
000069BA 47F8 F710                  		lea	($FFFFF710).w,a3
000069BE 6000 0000                  		bra.w	sub_69F4
000069C2                            ; End of function sub_6886
000069C2                            
000069C2                            ; ---------------------------------------------------------------------------
000069C2                            ; Subroutine to	display	correct	tiles as you move
000069C2                            ; ---------------------------------------------------------------------------
000069C2                            
000069C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069C2                            
000069C2                            
000069C2                            LoadTilesAsYouMove:			; XREF: Demo_Time
000069C2 4BF9 00C0 0004             		lea	($C00004).l,a5
000069C8 4DF9 00C0 0000             		lea	($C00000).l,a6
000069CE 45F8 FF32                  		lea	($FFFFFF32).w,a2
000069D2 47F8 FF18                  		lea	($FFFFFF18).w,a3
000069D6 49F8 A440                  		lea	($FFFFA440).w,a4
000069DA 343C 6000                  		move.w	#$6000,d2
000069DE 6100 0000                  		bsr.w	sub_6954
000069E2 45F8 FF34                  		lea	($FFFFFF34).w,a2
000069E6 47F8 FF20                  		lea	($FFFFFF20).w,a3
000069EA 6100 0000                  		bsr.w	sub_69F4
000069EE 45F8 FF30                  		lea	($FFFFFF30).w,a2
000069F2 47F8 FF10                  		lea	($FFFFFF10).w,a3
000069F6 49F8 A400                  		lea	($FFFFA400).w,a4
000069FA 343C 4000                  		move.w	#$4000,d2
000069FE 4A12                       		tst.b	(a2)
00006A00 6700                       		beq.s	locret_6952
00006A02 0892 0000                  		bclr	#0,(a2)
00006A06 6700                       		beq.s	loc_6908
00006A08 78F0                       		moveq	#-$10,d4
00006A0A 7AF0                       		moveq	#-$10,d5
00006A0C 6100 0000                  		bsr.w	sub_6C20
00006A10 78F0                       		moveq	#-$10,d4
00006A12 7AF0                       		moveq	#-$10,d5
00006A14 6100 0000                  		bsr.w	sub_6AD8
00006A18                            
00006A18                            loc_6908:
00006A18 0892 0001                  		bclr	#1,(a2)
00006A1C 6700                       		beq.s	loc_6922
00006A1E 383C 00E0                  		move.w	#$E0,d4
00006A22 7AF0                       		moveq	#-$10,d5
00006A24 6100 0000                  		bsr.w	sub_6C20
00006A28 383C 00E0                  		move.w	#$E0,d4
00006A2C 7AF0                       		moveq	#-$10,d5
00006A2E 6100 0000                  		bsr.w	sub_6AD8
00006A32                            
00006A32                            loc_6922:
00006A32 0892 0002                  		bclr	#2,(a2)
00006A36 6700                       		beq.s	loc_6938
00006A38 78F0                       		moveq	#-$10,d4
00006A3A 7AF0                       		moveq	#-$10,d5
00006A3C 6100 0000                  		bsr.w	sub_6C20
00006A40 78F0                       		moveq	#-$10,d4
00006A42 7AF0                       		moveq	#-$10,d5
00006A44 6100 0000                  		bsr.w	sub_6B04
00006A48                            
00006A48                            loc_6938:
00006A48 0892 0003                  		bclr	#3,(a2)
00006A4C 6700                       		beq.s	locret_6952
00006A4E 78F0                       		moveq	#-$10,d4
00006A50 3A3C 0140                  		move.w	#$140,d5
00006A54 6100 0000                  		bsr.w	sub_6C20
00006A58 78F0                       		moveq	#-$10,d4
00006A5A 3A3C 0140                  		move.w	#$140,d5
00006A5E 6100 0000                  		bsr.w	sub_6B04
00006A62                            
00006A62                            locret_6952:
00006A62 4E75                       		rts	
00006A64                            ; End of function LoadTilesAsYouMove
00006A64                            
00006A64                            
00006A64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A64                            
00006A64                            
00006A64                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006A64 4A12                       		tst.b	(a2)
00006A66 6700 0000                  		beq.w	locret_69F2
00006A6A 0892 0000                  		bclr	#0,(a2)
00006A6E 6700                       		beq.s	loc_6972
00006A70 78F0                       		moveq	#-$10,d4
00006A72 7AF0                       		moveq	#-$10,d5
00006A74 6100 0000                  		bsr.w	sub_6C20
00006A78 78F0                       		moveq	#-$10,d4
00006A7A 7AF0                       		moveq	#-$10,d5
00006A7C 7C1F                       		moveq	#$1F,d6
00006A7E 6100 0000                  		bsr.w	sub_6ADA
00006A82                            
00006A82                            loc_6972:
00006A82 0892 0001                  		bclr	#1,(a2)
00006A86 6700                       		beq.s	loc_698E
00006A88 383C 00E0                  		move.w	#$E0,d4
00006A8C 7AF0                       		moveq	#-$10,d5
00006A8E 6100 0000                  		bsr.w	sub_6C20
00006A92 383C 00E0                  		move.w	#$E0,d4
00006A96 7AF0                       		moveq	#-$10,d5
00006A98 7C1F                       		moveq	#$1F,d6
00006A9A 6100 0000                  		bsr.w	sub_6ADA
00006A9E                            
00006A9E                            loc_698E:
00006A9E 0892 0002                  		bclr	#2,(a2)
00006AA2 6700                       		beq.s	loc_69BE
00006AA4 78F0                       		moveq	#-$10,d4
00006AA6 7AF0                       		moveq	#-$10,d5
00006AA8 6100 0000                  		bsr.w	sub_6C20
00006AAC 78F0                       		moveq	#-$10,d4
00006AAE 7AF0                       		moveq	#-$10,d5
00006AB0 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006AB4 322B 0004                  		move.w	4(a3),d1
00006AB8 0241 FFF0                  		andi.w	#-$10,d1
00006ABC 9C41                       		sub.w	d1,d6
00006ABE 6D00                       		blt.s	loc_69BE
00006AC0 E84E                       		lsr.w	#4,d6
00006AC2 0C46 000F                  		cmpi.w	#$F,d6
00006AC6 6500                       		bcs.s	loc_69BA
00006AC8 7C0F                       		moveq	#$F,d6
00006ACA                            
00006ACA                            loc_69BA:
00006ACA 6100 0000                  		bsr.w	sub_6B06
00006ACE                            
00006ACE                            loc_69BE:
00006ACE 0892 0003                  		bclr	#3,(a2)
00006AD2 6700                       		beq.s	locret_69F2
00006AD4 78F0                       		moveq	#-$10,d4
00006AD6 3A3C 0140                  		move.w	#$140,d5
00006ADA 6100 0000                  		bsr.w	sub_6C20
00006ADE 78F0                       		moveq	#-$10,d4
00006AE0 3A3C 0140                  		move.w	#$140,d5
00006AE4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006AE8 322B 0004                  		move.w	4(a3),d1
00006AEC 0241 FFF0                  		andi.w	#-$10,d1
00006AF0 9C41                       		sub.w	d1,d6
00006AF2 6D00                       		blt.s	locret_69F2
00006AF4 E84E                       		lsr.w	#4,d6
00006AF6 0C46 000F                  		cmpi.w	#$F,d6
00006AFA 6500                       		bcs.s	loc_69EE
00006AFC 7C0F                       		moveq	#$F,d6
00006AFE                            
00006AFE                            loc_69EE:
00006AFE 6100 0000                  		bsr.w	sub_6B06
00006B02                            
00006B02                            locret_69F2:
00006B02 4E75                       		rts	
00006B04                            ; End of function sub_6954
00006B04                            
00006B04                            
00006B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B04                            
00006B04                            
00006B04                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006B04 4A12                       		tst.b	(a2)
00006B06 6700 0000                  		beq.w	locret_6A80
00006B0A 0892 0002                  		bclr	#2,(a2)
00006B0E 6700                       		beq.s	loc_6A3E
00006B10 0C53 0010                  		cmpi.w	#$10,(a3)
00006B14 6500                       		bcs.s	loc_6A3E
00006B16 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006B1A 322B 0004                  		move.w	4(a3),d1
00006B1E 0241 FFF0                  		andi.w	#-$10,d1
00006B22 9841                       		sub.w	d1,d4
00006B24 3F04                       		move.w	d4,-(sp)
00006B26 7AF0                       		moveq	#-$10,d5
00006B28 6100 0000                  		bsr.w	sub_6C20
00006B2C 381F                       		move.w	(sp)+,d4
00006B2E 7AF0                       		moveq	#-$10,d5
00006B30 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006B34 322B 0004                  		move.w	4(a3),d1
00006B38 0241 FFF0                  		andi.w	#-$10,d1
00006B3C 9C41                       		sub.w	d1,d6
00006B3E 6D00                       		blt.s	loc_6A3E
00006B40 E84E                       		lsr.w	#4,d6
00006B42 0446 000E                  		subi.w	#$E,d6
00006B46 6400                       		bcc.s	loc_6A3E
00006B48 4446                       		neg.w	d6
00006B4A 6100 0000                  		bsr.w	sub_6B06
00006B4E                            
00006B4E                            loc_6A3E:
00006B4E 0892 0003                  		bclr	#3,(a2)
00006B52 6700                       		beq.s	locret_6A80
00006B54 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006B58 322B 0004                  		move.w	4(a3),d1
00006B5C 0241 FFF0                  		andi.w	#-$10,d1
00006B60 9841                       		sub.w	d1,d4
00006B62 3F04                       		move.w	d4,-(sp)
00006B64 3A3C 0140                  		move.w	#$140,d5
00006B68 6100 0000                  		bsr.w	sub_6C20
00006B6C 381F                       		move.w	(sp)+,d4
00006B6E 3A3C 0140                  		move.w	#$140,d5
00006B72 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006B76 322B 0004                  		move.w	4(a3),d1
00006B7A 0241 FFF0                  		andi.w	#-$10,d1
00006B7E 9C41                       		sub.w	d1,d6
00006B80 6D00                       		blt.s	locret_6A80
00006B82 E84E                       		lsr.w	#4,d6
00006B84 0446 000E                  		subi.w	#$E,d6
00006B88 6400                       		bcc.s	locret_6A80
00006B8A 4446                       		neg.w	d6
00006B8C 6100 0000                  		bsr.w	sub_6B06
00006B90                            
00006B90                            locret_6A80:
00006B90 4E75                       		rts	
00006B92                            ; End of function sub_69F4
00006B92                            
00006B92                            ; ===========================================================================
00006B92 4A12                       		tst.b	(a2)
00006B94 6700                       		beq.s	locret_6AD6
00006B96 0892 0002                  		bclr	#2,(a2)
00006B9A 6700                       		beq.s	loc_6AAC
00006B9C 383C 00D0                  		move.w	#$D0,d4
00006BA0 322B 0004                  		move.w	4(a3),d1
00006BA4 0241 FFF0                  		andi.w	#-$10,d1
00006BA8 9841                       		sub.w	d1,d4
00006BAA 3F04                       		move.w	d4,-(sp)
00006BAC 7AF0                       		moveq	#-$10,d5
00006BAE 6100 0000                  		bsr.w	sub_6C3C
00006BB2 381F                       		move.w	(sp)+,d4
00006BB4 7AF0                       		moveq	#-$10,d5
00006BB6 7C02                       		moveq	#2,d6
00006BB8 6100 0000                  		bsr.w	sub_6B06
00006BBC                            
00006BBC                            loc_6AAC:
00006BBC 0892 0003                  		bclr	#3,(a2)
00006BC0 6700                       		beq.s	locret_6AD6
00006BC2 383C 00D0                  		move.w	#$D0,d4
00006BC6 322B 0004                  		move.w	4(a3),d1
00006BCA 0241 FFF0                  		andi.w	#-$10,d1
00006BCE 9841                       		sub.w	d1,d4
00006BD0 3F04                       		move.w	d4,-(sp)
00006BD2 3A3C 0140                  		move.w	#$140,d5
00006BD6 6100 0000                  		bsr.w	sub_6C3C
00006BDA 381F                       		move.w	(sp)+,d4
00006BDC 3A3C 0140                  		move.w	#$140,d5
00006BE0 7C02                       		moveq	#2,d6
00006BE2 6100 0000                  		bsr.w	sub_6B06
00006BE6                            
00006BE6                            locret_6AD6:
00006BE6 4E75                       		rts	
00006BE8                            
00006BE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BE8                            
00006BE8                            
00006BE8                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006BE8 7C15                       		moveq	#$15,d6
00006BEA                            ; End of function sub_6AD8
00006BEA                            
00006BEA                            
00006BEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BEA                            
00006BEA                            
00006BEA                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006BEA 2E3C 0080 0000             		move.l	#$800000,d7
00006BF0 2200                       		move.l	d0,d1
00006BF2                            
00006BF2                            loc_6AE2:
00006BF2 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006BF6 6100 0000                  		bsr.w	sub_6BD6
00006BFA 2001                       		move.l	d1,d0
00006BFC 6100 0000                  		bsr.w	sub_6B32
00006C00 5801                       		addq.b	#4,d1
00006C02 0201 007F                  		andi.b	#$7F,d1
00006C06 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006C0A 0645 0010                  		addi.w	#$10,d5
00006C0E 51CE FFE2                  		dbf	d6,loc_6AE2
00006C12 4E75                       		rts	
00006C14                            ; End of function sub_6ADA
00006C14                            
00006C14                            
00006C14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C14                            
00006C14                            
00006C14                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006C14 7C0F                       		moveq	#$F,d6
00006C16                            ; End of function sub_6B04
00006C16                            
00006C16                            
00006C16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C16                            
00006C16                            
00006C16                            sub_6B06:				; XREF: sub_6954
00006C16 2E3C 0080 0000             		move.l	#$800000,d7
00006C1C 2200                       		move.l	d0,d1
00006C1E                            
00006C1E                            loc_6B0E:
00006C1E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006C22 6100 0000                  		bsr.w	sub_6BD6
00006C26 2001                       		move.l	d1,d0
00006C28 6100 0000                  		bsr.w	sub_6B32
00006C2C 0641 0100                  		addi.w	#$100,d1
00006C30 0241 0FFF                  		andi.w	#$FFF,d1
00006C34 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006C38 0644 0010                  		addi.w	#$10,d4
00006C3C 51CE FFE0                  		dbf	d6,loc_6B0E
00006C40 4E75                       		rts	
00006C42                            ; End of function sub_6B06
00006C42                            
00006C42                            
00006C42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C42                            
00006C42                            
00006C42                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006C42 8042                       		or.w	d2,d0
00006C44 4840                       		swap	d0
00006C46 0810 0004                  		btst	#4,(a0)
00006C4A 6600                       		bne.s	loc_6B6E
00006C4C 0810 0003                  		btst	#3,(a0)
00006C50 6600                       		bne.s	loc_6B4E
00006C52 2A80                       		move.l	d0,(a5)
00006C54 2C99                       		move.l	(a1)+,(a6)
00006C56 D087                       		add.l	d7,d0
00006C58 2A80                       		move.l	d0,(a5)
00006C5A 2C99                       		move.l	(a1)+,(a6)
00006C5C 4E75                       		rts	
00006C5E                            ; ===========================================================================
00006C5E                            
00006C5E                            loc_6B4E:
00006C5E 2A80                       		move.l	d0,(a5)
00006C60 2819                       		move.l	(a1)+,d4
00006C62 0A84 0800 0800             		eori.l	#$8000800,d4
00006C68 4844                       		swap	d4
00006C6A 2C84                       		move.l	d4,(a6)
00006C6C D087                       		add.l	d7,d0
00006C6E 2A80                       		move.l	d0,(a5)
00006C70 2819                       		move.l	(a1)+,d4
00006C72 0A84 0800 0800             		eori.l	#$8000800,d4
00006C78 4844                       		swap	d4
00006C7A 2C84                       		move.l	d4,(a6)
00006C7C 4E75                       		rts	
00006C7E                            ; ===========================================================================
00006C7E                            
00006C7E                            loc_6B6E:
00006C7E 0810 0003                  		btst	#3,(a0)
00006C82 6600                       		bne.s	loc_6B90
00006C84 2A80                       		move.l	d0,(a5)
00006C86 2A19                       		move.l	(a1)+,d5
00006C88 2819                       		move.l	(a1)+,d4
00006C8A 0A84 1000 1000             		eori.l	#$10001000,d4
00006C90 2C84                       		move.l	d4,(a6)
00006C92 D087                       		add.l	d7,d0
00006C94 2A80                       		move.l	d0,(a5)
00006C96 0A85 1000 1000             		eori.l	#$10001000,d5
00006C9C 2C85                       		move.l	d5,(a6)
00006C9E 4E75                       		rts	
00006CA0                            ; ===========================================================================
00006CA0                            
00006CA0                            loc_6B90:
00006CA0 2A80                       		move.l	d0,(a5)
00006CA2 2A19                       		move.l	(a1)+,d5
00006CA4 2819                       		move.l	(a1)+,d4
00006CA6 0A84 1800 1800             		eori.l	#$18001800,d4
00006CAC 4844                       		swap	d4
00006CAE 2C84                       		move.l	d4,(a6)
00006CB0 D087                       		add.l	d7,d0
00006CB2 2A80                       		move.l	d0,(a5)
00006CB4 0A85 1800 1800             		eori.l	#$18001800,d5
00006CBA 4845                       		swap	d5
00006CBC 2C85                       		move.l	d5,(a6)
00006CBE 4E75                       		rts	
00006CC0                            ; End of function sub_6B32
00006CC0                            
00006CC0                            ; ===========================================================================
00006CC0 4E75                       		rts	
00006CC2                            ; ===========================================================================
00006CC2 2A80                       		move.l	d0,(a5)
00006CC4 3A3C 2000                  		move.w	#$2000,d5
00006CC8 3819                       		move.w	(a1)+,d4
00006CCA D845                       		add.w	d5,d4
00006CCC 3C84                       		move.w	d4,(a6)
00006CCE 3819                       		move.w	(a1)+,d4
00006CD0 D845                       		add.w	d5,d4
00006CD2 3C84                       		move.w	d4,(a6)
00006CD4 D087                       		add.l	d7,d0
00006CD6 2A80                       		move.l	d0,(a5)
00006CD8 3819                       		move.w	(a1)+,d4
00006CDA D845                       		add.w	d5,d4
00006CDC 3C84                       		move.w	d4,(a6)
00006CDE 3819                       		move.w	(a1)+,d4
00006CE0 D845                       		add.w	d5,d4
00006CE2 3C84                       		move.w	d4,(a6)
00006CE4 4E75                       		rts	
00006CE6                            
00006CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE6                            
00006CE6                            
00006CE6                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00006CE6 43F8 B000                  		lea	($FFFFB000).w,a1
00006CEA D86B 0004                  		add.w	4(a3),d4
00006CEE DA53                       		add.w	(a3),d5
00006CF0 3604                       		move.w	d4,d3
00006CF2 E24B                       		lsr.w	#1,d3
00006CF4 0243 0380                  		andi.w	#$380,d3
00006CF8 E64D                       		lsr.w	#3,d5
00006CFA 3005                       		move.w	d5,d0
00006CFC EA48                       		lsr.w	#5,d0
00006CFE 0240 007F                  		andi.w	#$7F,d0
00006D02 D043                       		add.w	d3,d0
00006D04 76FF                       		moveq	#-1,d3
00006D06 1634 0000                  		move.b	(a4,d0.w),d3
00006D0A 6700                       		beq.s	locret_6C1E
00006D0C 5303                       		subq.b	#1,d3
00006D0E 0243 007F                  		andi.w	#$7F,d3
00006D12 EE5B                       		ror.w	#7,d3
00006D14 D844                       		add.w	d4,d4
00006D16 0244 01E0                  		andi.w	#$1E0,d4
00006D1A 0245 001E                  		andi.w	#$1E,d5
00006D1E D644                       		add.w	d4,d3
00006D20 D645                       		add.w	d5,d3
00006D22 2043                       		movea.l	d3,a0
00006D24 3610                       		move.w	(a0),d3
00006D26 0243 03FF                  		andi.w	#$3FF,d3
00006D2A E74B                       		lsl.w	#3,d3
00006D2C D2C3                       		adda.w	d3,a1
00006D2E                            
00006D2E                            locret_6C1E:
00006D2E 4E75                       		rts	
00006D30                            ; End of function sub_6BD6
00006D30                            
00006D30                            
00006D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D30                            
00006D30                            
00006D30                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00006D30 D86B 0004                  		add.w	4(a3),d4
00006D34 DA53                       		add.w	(a3),d5
00006D36 0244 00F0                  		andi.w	#$F0,d4
00006D3A 0245 01F0                  		andi.w	#$1F0,d5
00006D3E E94C                       		lsl.w	#4,d4
00006D40 E44D                       		lsr.w	#2,d5
00006D42 D845                       		add.w	d5,d4
00006D44 7003                       		moveq	#3,d0
00006D46 4840                       		swap	d0
00006D48 3004                       		move.w	d4,d0
00006D4A 4E75                       		rts	
00006D4C                            ; End of function sub_6C20
00006D4C                            
00006D4C                            
00006D4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D4C                            ; not used
00006D4C                            
00006D4C                            
00006D4C                            sub_6C3C:
00006D4C D86B 0004                  		add.w	4(a3),d4
00006D50 DA53                       		add.w	(a3),d5
00006D52 0244 00F0                  		andi.w	#$F0,d4
00006D56 0245 01F0                  		andi.w	#$1F0,d5
00006D5A E94C                       		lsl.w	#4,d4
00006D5C E44D                       		lsr.w	#2,d5
00006D5E D845                       		add.w	d5,d4
00006D60 7002                       		moveq	#2,d0
00006D62 4840                       		swap	d0
00006D64 3004                       		move.w	d4,d0
00006D66 4E75                       		rts	
00006D68                            ; End of function sub_6C3C
00006D68                            
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            ; Subroutine to	load tiles as soon as the level	appears
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            
00006D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D68                            
00006D68                            
00006D68                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00006D68 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D6E 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D74 47F8 F700                  		lea	($FFFFF700).w,a3
00006D78 49F8 A400                  		lea	($FFFFA400).w,a4
00006D7C 343C 4000                  		move.w	#$4000,d2
00006D80 6100                       		bsr.s	LoadTilesFromStart2
00006D82 47F8 F708                  		lea	($FFFFF708).w,a3
00006D86 49F8 A440                  		lea	($FFFFA440).w,a4
00006D8A 343C 6000                  		move.w	#$6000,d2
00006D8E                            ; End of function LoadTilesFromStart
00006D8E                            
00006D8E                            
00006D8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D8E                            
00006D8E                            
00006D8E                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00006D8E 78F0                       		moveq	#-$10,d4
00006D90 7C0F                       		moveq	#$F,d6
00006D92                            
00006D92                            loc_6C82:
00006D92 48E7 0E00                  		movem.l	d4-d6,-(sp)
00006D96 7A00                       		moveq	#0,d5
00006D98 3204                       		move.w	d4,d1
00006D9A 6100 FF94                  		bsr.w	sub_6C20
00006D9E 3801                       		move.w	d1,d4
00006DA0 7A00                       		moveq	#0,d5
00006DA2 7C1F                       		moveq	#$1F,d6
00006DA4 6100 FE44                  		bsr.w	sub_6ADA
00006DA8 4CDF 0070                  		movem.l	(sp)+,d4-d6
00006DAC 0644 0010                  		addi.w	#$10,d4
00006DB0 51CE FFE0                  		dbf	d6,loc_6C82
00006DB4 4E75                       		rts	
00006DB6                            ; End of function LoadTilesFromStart2
00006DB6                            
00006DB6                            ; ---------------------------------------------------------------------------
00006DB6                            ; Main Load Block loading subroutine
00006DB6                            ; ---------------------------------------------------------------------------
00006DB6                            
00006DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB6                            
00006DB6                            
00006DB6                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00006DB6 7000                       		moveq	#0,d0
00006DB8 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006DBC E948                       		lsl.w	#4,d0
00006DBE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00006DC4 45F2 0000                  		lea	(a2,d0.w),a2
00006DC8 2F0A                       		move.l	a2,-(sp)
00006DCA 588A                       		addq.l	#4,a2
00006DCC 205A                       		movea.l	(a2)+,a0
00006DCE 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00006DD2 303C 0000                  		move.w	#0,d0
00006DD6 6100 A946                  		bsr.w	EniDec
00006DDA 205A                       		movea.l	(a2)+,a0
00006DDC 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00006DE2 6100 AAB8                  		bsr.w	KosDec
00006DE6 6100 0000                  		bsr.w	LevelLayoutLoad
00006DEA 301A                       		move.w	(a2)+,d0
00006DEC 3012                       		move.w	(a2),d0
00006DEE 0240 00FF                  		andi.w	#$FF,d0
00006DF2 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00006DF8 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00006DFA 700C                       		moveq	#$C,d0		; use SB3 pallet
00006DFC                            
00006DFC                            MLB_ChkSBZPal:
00006DFC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00006E02 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00006E04 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00006E0A 6600                       		bne.s	MLB_NormalPal	; if not, branch
00006E0C                            
00006E0C                            MLB_UsePal0E:
00006E0C 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00006E0E                            
00006E0E                            MLB_NormalPal:
00006E0E 6100 B2EC                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00006E12 245F                       		movea.l	(sp)+,a2
00006E14 584A                       		addq.w	#4,a2
00006E16 7000                       		moveq	#0,d0
00006E18 1012                       		move.b	(a2),d0
00006E1A 6700                       		beq.s	locret_6D10
00006E1C 6100 A762                  		bsr.w	LoadPLC		; load pattern load cues
00006E20                            
00006E20                            locret_6D10:
00006E20 4E75                       		rts	
00006E22                            ; End of function MainLoadBlockLoad
00006E22                            
00006E22                            ; ---------------------------------------------------------------------------
00006E22                            ; Level	layout loading subroutine
00006E22                            ; ---------------------------------------------------------------------------
00006E22                            
00006E22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E22                            
00006E22                            
00006E22                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00006E22 47F8 A400                  		lea	($FFFFA400).w,a3
00006E26 323C 01FF                  		move.w	#$1FF,d1
00006E2A 7000                       		moveq	#0,d0
00006E2C                            
00006E2C                            LevLoad_ClrRam:
00006E2C 26C0                       		move.l	d0,(a3)+
00006E2E 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00006E32                            
00006E32 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00006E36 7200                       		moveq	#0,d1
00006E38 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00006E3C 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00006E40 7202                       		moveq	#2,d1
00006E42                            ; End of function LevelLayoutLoad
00006E42                            
00006E42                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00006E42                            
00006E42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E42                            
00006E42                            
00006E42                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00006E42 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006E46 ED08                       		lsl.b	#6,d0
00006E48 EA48                       		lsr.w	#5,d0
00006E4A 3400                       		move.w	d0,d2
00006E4C D040                       		add.w	d0,d0
00006E4E D042                       		add.w	d2,d0
00006E50 D041                       		add.w	d1,d0
00006E52 43F9 0000 0000             		lea	(Level_Index).l,a1
00006E58 3031 0000                  		move.w	(a1,d0.w),d0
00006E5C 43F1 0000                  		lea	(a1,d0.w),a1
00006E60 7200                       		moveq	#0,d1
00006E62 3401                       		move.w	d1,d2
00006E64 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00006E66 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00006E68                            
00006E68                            LevLoad_NumRows:
00006E68 3001                       		move.w	d1,d0
00006E6A 204B                       		movea.l	a3,a0
00006E6C                            
00006E6C                            LevLoad_Row:
00006E6C 10D9                       		move.b	(a1)+,(a0)+
00006E6E 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00006E72 47EB 0080                  		lea	$80(a3),a3	; do next row
00006E76 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00006E7A 4E75                       		rts	
00006E7C                            ; End of function LevelLayoutLoad2
00006E7C                            
00006E7C                            ; ---------------------------------------------------------------------------
00006E7C                            ; Dynamic screen resize	loading	subroutine
00006E7C                            ; ---------------------------------------------------------------------------
00006E7C                            
00006E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E7C                            
00006E7C                            
00006E7C                            DynScrResizeLoad:			; XREF: DeformBgLayer
00006E7C 7000                       		moveq	#0,d0
00006E7E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006E82 D040                       		add.w	d0,d0
00006E84 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00006E88 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00006E8C 7202                       		moveq	#2,d1
00006E8E 3038 F726                  		move.w	($FFFFF726).w,d0
00006E92 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00006E96 6700                       		beq.s	locret_6DAA
00006E98 6400                       		bcc.s	loc_6DAC
00006E9A 4441                       		neg.w	d1
00006E9C 3038 F704                  		move.w	($FFFFF704).w,d0
00006EA0 B078 F726                  		cmp.w	($FFFFF726).w,d0
00006EA4 6300                       		bls.s	loc_6DA0
00006EA6 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00006EAA 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00006EB0                            
00006EB0                            loc_6DA0:
00006EB0 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006EB4 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006EBA                            
00006EBA                            locret_6DAA:
00006EBA 4E75                       		rts	
00006EBC                            ; ===========================================================================
00006EBC                            
00006EBC                            loc_6DAC:				; XREF: DynScrResizeLoad
00006EBC 3038 F704                  		move.w	($FFFFF704).w,d0
00006EC0 5040                       		addq.w	#8,d0
00006EC2 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006EC6 6500                       		bcs.s	loc_6DC4
00006EC8 0838 0001 D022             		btst	#1,($FFFFD022).w
00006ECE 6700                       		beq.s	loc_6DC4
00006ED0 D241                       		add.w	d1,d1
00006ED2 D241                       		add.w	d1,d1
00006ED4                            
00006ED4                            loc_6DC4:
00006ED4 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006ED8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006EDE 4E75                       		rts	
00006EE0                            ; End of function DynScrResizeLoad
00006EE0                            
00006EE0                            ; ===========================================================================
00006EE0                            ; ---------------------------------------------------------------------------
00006EE0                            ; Offset index for dynamic screen resizing
00006EE0                            ; ---------------------------------------------------------------------------
00006EE0 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00006EE4 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00006EE8 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00006EEC 0000                       		dc.w Resize_Ending-Resize_Index
00006EEE                            ; ===========================================================================
00006EEE                            ; ---------------------------------------------------------------------------
00006EEE                            ; Green	Hill Zone dynamic screen resizing
00006EEE                            ; ---------------------------------------------------------------------------
00006EEE                            
00006EEE                            Resize_GHZ:				; XREF: Resize_Index
00006EEE 7000                       		moveq	#0,d0
00006EF0 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006EF4 D040                       		add.w	d0,d0
00006EF6 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00006EFA 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00006EFE                            ; ===========================================================================
00006EFE 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00006F00 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00006F02 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00006F04                            ; ===========================================================================
00006F04                            
00006F04                            Resize_GHZ1:
00006F04 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00006F0A 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00006F10 6500                       		bcs.s	locret_6E08	; if not, branch
00006F12 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00006F18                            
00006F18                            locret_6E08:
00006F18 4E75                       		rts	
00006F1A                            ; ===========================================================================
00006F1A                            
00006F1A                            Resize_GHZ2:
00006F1A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F20 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00006F26 6500                       		bcs.s	locret_6E3A
00006F28 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00006F2E 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00006F34 6500                       		bcs.s	locret_6E3A
00006F36 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006F3C 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00006F42 6500                       		bcs.s	locret_6E3A
00006F44 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F4A                            
00006F4A                            locret_6E3A:
00006F4A 4E75                       		rts	
00006F4C                            ; ===========================================================================
00006F4C                            
00006F4C                            Resize_GHZ3:
00006F4C 7000                       		moveq	#0,d0
00006F4E 1038 F742                  		move.b	($FFFFF742).w,d0
00006F52 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00006F56 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00006F5A                            ; ===========================================================================
00006F5A 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00006F5C 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00006F5E 0000                       		dc.w Resize_GHZ3end-off_6E4A
00006F60                            ; ===========================================================================
00006F60                            
00006F60                            Resize_GHZ3main:
00006F60 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F66 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00006F6C 6500                       		bcs.s	locret_6E96
00006F6E 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00006F74 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006F7A 6500                       		bcs.s	locret_6E96
00006F7C 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00006F82 6500                       		bcs.s	loc_6E98
00006F84 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006F8A 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00006F90 6400                       		bcc.s	loc_6E8E
00006F92 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00006F98 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00006F9E                            
00006F9E                            loc_6E8E:
00006F9E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00006FA4 6400                       		bcc.s	loc_6E98
00006FA6                            
00006FA6                            locret_6E96:
00006FA6 4E75                       		rts	
00006FA8                            ; ===========================================================================
00006FA8                            
00006FA8                            loc_6E98:
00006FA8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006FAE 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FB2 4E75                       		rts	
00006FB4                            ; ===========================================================================
00006FB4                            
00006FB4                            Resize_GHZ3boss:
00006FB4 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006FBA 6400                       		bcc.s	loc_6EB0
00006FBC 5538 F742                  		subq.b	#2,($FFFFF742).w
00006FC0                            
00006FC0                            loc_6EB0:
00006FC0 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00006FC6 6500                       		bcs.s	locret_6EE8
00006FC8 6100 0000                  		bsr.w	SingleObjLoad
00006FCC 6600                       		bne.s	loc_6ED0
00006FCE 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00006FD2 337C 2A60 0008             		move.w	#$2A60,8(a1)
00006FD8 337C 0280 000C             		move.w	#$280,$C(a1)
00006FDE                            
00006FDE                            loc_6ED0:
00006FDE 303C 008C                  		move.w	#$8C,d0
00006FE2 6100 A3B2                  		bsr.w	PlaySound	; play boss music
00006FE6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00006FEC 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FF0 7011                       		moveq	#$11,d0
00006FF2 6000 A58C                  		bra.w	LoadPLC		; load boss patterns
00006FF6                            ; ===========================================================================
00006FF6                            
00006FF6                            locret_6EE8:
00006FF6 4E75                       		rts	
00006FF8                            ; ===========================================================================
00006FF8                            
00006FF8                            Resize_GHZ3end:
00006FF8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00006FFE 4E75                       		rts	
00007000                            ; ===========================================================================
00007000                            ; ---------------------------------------------------------------------------
00007000                            ; Labyrinth Zone dynamic screen	resizing
00007000                            ; ---------------------------------------------------------------------------
00007000                            
00007000                            Resize_LZ:				; XREF: Resize_Index
00007000 7000                       		moveq	#0,d0
00007002 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007006 D040                       		add.w	d0,d0
00007008 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000700C 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007010                            ; ===========================================================================
00007010 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007012 0000                       		dc.w Resize_LZ12-Resize_LZx
00007014 0000                       		dc.w Resize_LZ3-Resize_LZx
00007016 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007018                            ; ===========================================================================
00007018                            
00007018                            Resize_LZ12:
00007018 4E75                       		rts	
0000701A                            ; ===========================================================================
0000701A                            
0000701A                            Resize_LZ3:
0000701A 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000701E 6700                       		beq.s	loc_6F28	; if not, branch
00007020 43F8 A506                  		lea	($FFFFA506).w,a1
00007024 0C11 0007                  		cmpi.b	#7,(a1)
00007028 6700                       		beq.s	loc_6F28
0000702A 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000702E 303C 00B7                  		move.w	#$B7,d0
00007032 6100 A368                  		bsr.w	PlaySound_Special ; play rumbling sound
00007036                            
00007036                            loc_6F28:
00007036 4A38 F742                  		tst.b	($FFFFF742).w
0000703A 6600                       		bne.s	locret_6F64
0000703C 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007042 6500                       		bcs.s	locret_6F62
00007044 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000704A 6400                       		bcc.s	locret_6F62
0000704C 6100 0000                  		bsr.w	SingleObjLoad
00007050 6600                       		bne.s	loc_6F4A
00007052 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007056                            
00007056                            loc_6F4A:
00007056 303C 008C                  		move.w	#$8C,d0
0000705A 6100 A33A                  		bsr.w	PlaySound	; play boss music
0000705E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007064 5438 F742                  		addq.b	#2,($FFFFF742).w
00007068 7011                       		moveq	#$11,d0
0000706A 6000 A514                  		bra.w	LoadPLC		; load boss patterns
0000706E                            ; ===========================================================================
0000706E                            
0000706E                            locret_6F62:
0000706E 4E75                       		rts	
00007070                            ; ===========================================================================
00007070                            
00007070                            locret_6F64:
00007070 4E75                       		rts	
00007072                            ; ===========================================================================
00007072                            
00007072                            Resize_SBZ3:
00007072 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007078 6500                       		bcs.s	locret_6F8C
0000707A 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007080 6400                       		bcc.s	locret_6F8C	; if not, branch
00007082 4238 FE30                  		clr.b	($FFFFFE30).w
00007086 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000708C 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007092 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007098                            
00007098                            locret_6F8C:
00007098 4E75                       		rts	
0000709A                            ; ===========================================================================
0000709A                            ; ---------------------------------------------------------------------------
0000709A                            ; Marble Zone dynamic screen resizing
0000709A                            ; ---------------------------------------------------------------------------
0000709A                            
0000709A                            Resize_MZ:				; XREF: Resize_Index
0000709A 7000                       		moveq	#0,d0
0000709C 1038 FE11                  		move.b	($FFFFFE11).w,d0
000070A0 D040                       		add.w	d0,d0
000070A2 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000070A6 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000070AA                            ; ===========================================================================
000070AA 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000070AC 0000                       		dc.w Resize_MZ2-Resize_MZx
000070AE 0000                       		dc.w Resize_MZ3-Resize_MZx
000070B0                            ; ===========================================================================
000070B0                            
000070B0                            Resize_MZ1:
000070B0 7000                       		moveq	#0,d0
000070B2 1038 F742                  		move.b	($FFFFF742).w,d0
000070B6 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000070BA 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000070BE                            ; ===========================================================================
000070BE 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000070C0 0000                       		dc.w loc_6FEA-off_6FB2
000070C2 0000                       		dc.w loc_702E-off_6FB2
000070C4 0000                       		dc.w loc_7050-off_6FB2
000070C6                            ; ===========================================================================
000070C6                            
000070C6                            loc_6FBA:
000070C6 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000070CC 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000070D2 6500                       		bcs.s	locret_6FE8
000070D4 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000070DA 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000070E0 6500                       		bcs.s	locret_6FE8
000070E2 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000070E8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000070EE 6500                       		bcs.s	locret_6FE8
000070F0 5438 F742                  		addq.b	#2,($FFFFF742).w
000070F4                            
000070F4                            locret_6FE8:
000070F4 4E75                       		rts	
000070F6                            ; ===========================================================================
000070F6                            
000070F6                            loc_6FEA:
000070F6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000070FC 6400                       		bcc.s	loc_6FF8
000070FE 5538 F742                  		subq.b	#2,($FFFFF742).w
00007102 4E75                       		rts	
00007104                            ; ===========================================================================
00007104                            
00007104                            loc_6FF8:
00007104 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000710A 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007110 6400                       		bcc.s	locret_702C
00007112 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007118 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000711E 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007124 6400                       		bcc.s	locret_702C
00007126 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000712C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007132 6500                       		bcs.s	locret_702C
00007134 5438 F742                  		addq.b	#2,($FFFFF742).w
00007138                            
00007138                            locret_702C:
00007138 4E75                       		rts	
0000713A                            ; ===========================================================================
0000713A                            
0000713A                            loc_702E:
0000713A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007140 6400                       		bcc.s	loc_703C
00007142 5538 F742                  		subq.b	#2,($FFFFF742).w
00007146 4E75                       		rts	
00007148                            ; ===========================================================================
00007148                            
00007148                            loc_703C:
00007148 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000714E 6500                       		bcs.s	locret_704E
00007150 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007156 5438 F742                  		addq.b	#2,($FFFFF742).w
0000715A                            
0000715A                            locret_704E:
0000715A 4E75                       		rts	
0000715C                            ; ===========================================================================
0000715C                            
0000715C                            loc_7050:
0000715C 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007162 6500                       		bcs.s	locret_7072
00007164 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000716A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007170 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007176 6500                       		bcs.s	locret_7072
00007178 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000717E                            
0000717E                            locret_7072:
0000717E 4E75                       		rts	
00007180                            ; ===========================================================================
00007180                            
00007180                            Resize_MZ2:
00007180 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007186 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000718C 6500                       		bcs.s	locret_7088
0000718E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007194                            
00007194                            locret_7088:
00007194 4E75                       		rts	
00007196                            ; ===========================================================================
00007196                            
00007196                            Resize_MZ3:
00007196 7000                       		moveq	#0,d0
00007198 1038 F742                  		move.b	($FFFFF742).w,d0
0000719C 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000071A0 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000071A4                            ; ===========================================================================
000071A4 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000071A6 0000                       		dc.w Resize_MZ3end-off_7098
000071A8                            ; ===========================================================================
000071A8                            
000071A8                            Resize_MZ3boss:
000071A8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000071AE 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000071B4 6500                       		bcs.s	locret_70E8
000071B6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000071BC 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000071C2 6500                       		bcs.s	locret_70E8
000071C4 6100 0000                  		bsr.w	SingleObjLoad
000071C8 6600                       		bne.s	loc_70D0
000071CA 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000071CE 337C 19F0 0008             		move.w	#$19F0,8(a1)
000071D4 337C 022C 000C             		move.w	#$22C,$C(a1)
000071DA                            
000071DA                            loc_70D0:
000071DA 303C 008C                  		move.w	#$8C,d0
000071DE 6100 A1B6                  		bsr.w	PlaySound	; play boss music
000071E2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000071E8 5438 F742                  		addq.b	#2,($FFFFF742).w
000071EC 7011                       		moveq	#$11,d0
000071EE 6000 A390                  		bra.w	LoadPLC		; load boss patterns
000071F2                            ; ===========================================================================
000071F2                            
000071F2                            locret_70E8:
000071F2 4E75                       		rts	
000071F4                            ; ===========================================================================
000071F4                            
000071F4                            Resize_MZ3end:
000071F4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000071FA 4E75                       		rts	
000071FC                            ; ===========================================================================
000071FC                            ; ---------------------------------------------------------------------------
000071FC                            ; Star Light Zone dynamic screen resizing
000071FC                            ; ---------------------------------------------------------------------------
000071FC                            
000071FC                            Resize_SLZ:				; XREF: Resize_Index
000071FC 7000                       		moveq	#0,d0
000071FE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007202 D040                       		add.w	d0,d0
00007204 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007208 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000720C                            ; ===========================================================================
0000720C 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000720E 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00007210 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007212                            ; ===========================================================================
00007212                            
00007212                            Resize_SLZ12:
00007212 4E75                       		rts	
00007214                            ; ===========================================================================
00007214                            
00007214                            Resize_SLZ3:
00007214 7000                       		moveq	#0,d0
00007216 1038 F742                  		move.b	($FFFFF742).w,d0
0000721A 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000721E 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007222                            ; ===========================================================================
00007222 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007224 0000                       		dc.w Resize_SLZ3boss-off_7118
00007226 0000                       		dc.w Resize_SLZ3end-off_7118
00007228                            ; ===========================================================================
00007228                            
00007228                            Resize_SLZ3main:
00007228 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000722E 6500                       		bcs.s	locret_7130
00007230 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007236 5438 F742                  		addq.b	#2,($FFFFF742).w
0000723A                            
0000723A                            locret_7130:
0000723A 4E75                       		rts	
0000723C                            ; ===========================================================================
0000723C                            
0000723C                            Resize_SLZ3boss:
0000723C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007242 6500                       		bcs.s	locret_715C
00007244 6100 0000                  		bsr.w	SingleObjLoad
00007248 6600                       		bne.s	loc_7144
0000724A 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000724E                            
0000724E                            loc_7144:
0000724E 303C 008C                  		move.w	#$8C,d0
00007252 6100 A142                  		bsr.w	PlaySound	; play boss music
00007256 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000725C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007260 7011                       		moveq	#$11,d0
00007262 6000 A31C                  		bra.w	LoadPLC		; load boss patterns
00007266                            ; ===========================================================================
00007266                            
00007266                            locret_715C:
00007266 4E75                       		rts	
00007268                            ; ===========================================================================
00007268                            
00007268                            Resize_SLZ3end:
00007268 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000726E 4E75                       		rts
00007270 4E75                       		rts
00007272                            ; ===========================================================================
00007272                            ; ---------------------------------------------------------------------------
00007272                            ; Spring Yard Zone dynamic screen resizing
00007272                            ; ---------------------------------------------------------------------------
00007272                            
00007272                            Resize_SYZ:				; XREF: Resize_Index
00007272 7000                       		moveq	#0,d0
00007274 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007278 D040                       		add.w	d0,d0
0000727A 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000727E 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007282                            ; ===========================================================================
00007282 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007284 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007286 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007288                            ; ===========================================================================
00007288                            
00007288                            Resize_SYZ1:
00007288 4E75                       		rts	
0000728A                            ; ===========================================================================
0000728A                            
0000728A                            Resize_SYZ2:
0000728A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007290 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007296 6500                       		bcs.s	locret_71A2
00007298 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000729E 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000072A4 6500                       		bcs.s	locret_71A2
000072A6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000072AC                            
000072AC                            locret_71A2:
000072AC 4E75                       		rts	
000072AE                            ; ===========================================================================
000072AE                            
000072AE                            Resize_SYZ3:
000072AE 7000                       		moveq	#0,d0
000072B0 1038 F742                  		move.b	($FFFFF742).w,d0
000072B4 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000072B8 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000072BC                            ; ===========================================================================
000072BC 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000072BE 0000                       		dc.w Resize_SYZ3boss-off_71B2
000072C0 0000                       		dc.w Resize_SYZ3end-off_71B2
000072C2                            ; ===========================================================================
000072C2                            
000072C2                            Resize_SYZ3main:
000072C2 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000072C8 6500                       		bcs.s	locret_71CE
000072CA 6100 0000                  		bsr.w	SingleObjLoad
000072CE 6600                       		bne.s	locret_71CE
000072D0 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000072D4 5438 F742                  		addq.b	#2,($FFFFF742).w
000072D8                            
000072D8                            locret_71CE:
000072D8 4E75                       		rts	
000072DA                            ; ===========================================================================
000072DA                            
000072DA                            Resize_SYZ3boss:
000072DA 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000072E0 6500                       		bcs.s	locret_7200
000072E2 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000072E8 6100 0000                  		bsr.w	SingleObjLoad
000072EC 6600                       		bne.s	loc_71EC
000072EE 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000072F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000072F6                            
000072F6                            loc_71EC:
000072F6 303C 008C                  		move.w	#$8C,d0
000072FA 6100 A09A                  		bsr.w	PlaySound	; play boss music
000072FE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007304 7011                       		moveq	#$11,d0
00007306 6000 A278                  		bra.w	LoadPLC		; load boss patterns
0000730A                            ; ===========================================================================
0000730A                            
0000730A                            locret_7200:
0000730A 4E75                       		rts	
0000730C                            ; ===========================================================================
0000730C                            
0000730C                            Resize_SYZ3end:
0000730C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007312 4E75                       		rts	
00007314                            ; ===========================================================================
00007314                            ; ---------------------------------------------------------------------------
00007314                            ; Scrap	Brain Zone dynamic screen resizing
00007314                            ; ---------------------------------------------------------------------------
00007314                            
00007314                            Resize_SBZ:				; XREF: Resize_Index
00007314 7000                       		moveq	#0,d0
00007316 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000731A D040                       		add.w	d0,d0
0000731C 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007320 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007324                            ; ===========================================================================
00007324 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007326 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007328 0000                       		dc.w Resize_FZ-Resize_SBZx
0000732A                            ; ===========================================================================
0000732A                            
0000732A                            Resize_SBZ1:
0000732A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007330 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007336 6500                       		bcs.s	locret_7242
00007338 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000733E 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007344 6500                       		bcs.s	locret_7242
00007346 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000734C                            
0000734C                            locret_7242:
0000734C 4E75                       		rts	
0000734E                            ; ===========================================================================
0000734E                            
0000734E                            Resize_SBZ2:
0000734E 7000                       		moveq	#0,d0
00007350 1038 F742                  		move.b	($FFFFF742).w,d0
00007354 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007358 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000735C                            ; ===========================================================================
0000735C 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000735E 0000                       		dc.w Resize_SBZ2boss-off_7252
00007360 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007362 0000                       		dc.w Resize_SBZ2end-off_7252
00007364                            ; ===========================================================================
00007364                            
00007364                            Resize_SBZ2main:
00007364 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000736A 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007370 6500                       		bcs.s	locret_727A
00007372 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007378 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000737E 6500                       		bcs.s	locret_727A
00007380 5438 F742                  		addq.b	#2,($FFFFF742).w
00007384                            
00007384                            locret_727A:
00007384 4E75                       		rts	
00007386                            ; ===========================================================================
00007386                            
00007386                            Resize_SBZ2boss:
00007386 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000738C 6500                       		bcs.s	locret_7298
0000738E 6100 0000                  		bsr.w	SingleObjLoad
00007392 6600                       		bne.s	locret_7298
00007394 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007398 5438 F742                  		addq.b	#2,($FFFFF742).w
0000739C 701E                       		moveq	#$1E,d0
0000739E 6000 A1E0                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000073A2                            ; ===========================================================================
000073A2                            
000073A2                            locret_7298:
000073A2 4E75                       		rts	
000073A4                            ; ===========================================================================
000073A4                            
000073A4                            Resize_SBZ2boss2:
000073A4 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000073AA 6500                       		bcs.s	loc_72B6
000073AC 6100 0000                  		bsr.w	SingleObjLoad
000073B0 6600                       		bne.s	loc_72B0
000073B2 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000073B6 5438 F742                  		addq.b	#2,($FFFFF742).w
000073BA                            
000073BA                            loc_72B0:
000073BA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073C0                            
000073C0                            loc_72B6:
000073C0 6000                       		bra.s	loc_72C2
000073C2                            ; ===========================================================================
000073C2                            
000073C2                            Resize_SBZ2end:
000073C2 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000073C8 6500                       		bcs.s	loc_72C2
000073CA 4E75                       		rts	
000073CC                            ; ===========================================================================
000073CC                            
000073CC                            loc_72C2:
000073CC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000073D2 4E75                       		rts	
000073D4                            ; ===========================================================================
000073D4                            
000073D4                            Resize_FZ:
000073D4 7000                       		moveq	#0,d0
000073D6 1038 F742                  		move.b	($FFFFF742).w,d0
000073DA 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000073DE 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000073E2                            ; ===========================================================================
000073E2 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000073E6 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000073EA 0000                       		dc.w Resize_FZend2-off_72D8
000073EC                            ; ===========================================================================
000073EC                            
000073EC                            Resize_FZmain:
000073EC 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000073F2 6500                       		bcs.s	loc_72F4
000073F4 5438 F742                  		addq.b	#2,($FFFFF742).w
000073F8 701F                       		moveq	#$1F,d0
000073FA 6100 A184                  		bsr.w	LoadPLC		; load FZ boss patterns
000073FE                            
000073FE                            loc_72F4:
000073FE 60CC                       		bra.s	loc_72C2
00007400                            ; ===========================================================================
00007400                            
00007400                            Resize_FZboss:
00007400 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007406 6500                       		bcs.s	loc_7312
00007408 6100 0000                  		bsr.w	SingleObjLoad
0000740C 6600                       		bne.s	loc_7312
0000740E 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007412 5438 F742                  		addq.b	#2,($FFFFF742).w
00007416 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000741C                            
0000741C                            loc_7312:
0000741C 60AE                       		bra.s	loc_72C2
0000741E                            ; ===========================================================================
0000741E                            
0000741E                            Resize_FZend:
0000741E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007424 6500                       		bcs.s	loc_7320
00007426 5438 F742                  		addq.b	#2,($FFFFF742).w
0000742A                            
0000742A                            loc_7320:
0000742A 60A0                       		bra.s	loc_72C2
0000742C                            ; ===========================================================================
0000742C                            
0000742C                            locret_7322:
0000742C 4E75                       		rts	
0000742E                            ; ===========================================================================
0000742E                            
0000742E                            Resize_FZend2:
0000742E 609C                       		bra.s	loc_72C2
00007430                            ; ===========================================================================
00007430                            ; ---------------------------------------------------------------------------
00007430                            ; Ending sequence dynamic screen resizing (empty)
00007430                            ; ---------------------------------------------------------------------------
00007430                            
00007430                            Resize_Ending:				; XREF: Resize_Index
00007430 4E75                       		rts	
00007432                            ; ===========================================================================
00007432                            ; ---------------------------------------------------------------------------
00007432                            ; Object 11 - GHZ bridge
00007432                            ; ---------------------------------------------------------------------------
00007432                            
00007432                            Obj11:					; XREF: Obj_Index
00007432 7000                       		moveq	#0,d0
00007434 1028 0024                  		move.b	$24(a0),d0
00007438 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000743C 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007440                            ; ===========================================================================
00007440 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007444 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007448 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000744C                            ; ===========================================================================
0000744C                            
0000744C                            Obj11_Main:				; XREF: Obj11_Index
0000744C 5428 0024                  		addq.b	#2,$24(a0)
00007450 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007458 317C 438E 0002             		move.w	#$438E,2(a0)
0000745E 117C 0004 0001             		move.b	#4,1(a0)
00007464 117C 0003 0018             		move.b	#3,$18(a0)
0000746A 117C 0080 0019             		move.b	#$80,$19(a0)
00007470 3428 000C                  		move.w	$C(a0),d2
00007474 3628 0008                  		move.w	8(a0),d3
00007478 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
0000747A 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000747E 7200                       		moveq	#0,d1
00007480 1212                       		move.b	(a2),d1		; copy a2 to d1
00007482 14FC 0000                  		move.b	#0,(a2)+
00007486 3001                       		move.w	d1,d0
00007488 E248                       		lsr.w	#1,d0
0000748A E948                       		lsl.w	#4,d0
0000748C 9640                       		sub.w	d0,d3
0000748E 5501                       		subq.b	#2,d1
00007490 6500                       		bcs.s	Obj11_Action
00007492                            
00007492                            Obj11_MakeBdg:
00007492 6100 0000                  		bsr.w	SingleObjLoad
00007496 6600                       		bne.s	Obj11_Action
00007498 5228 0028                  		addq.b	#1,$28(a0)
0000749C B668 0008                  		cmp.w	8(a0),d3
000074A0 6600                       		bne.s	loc_73B8
000074A2 0643 0010                  		addi.w	#$10,d3
000074A6 3142 000C                  		move.w	d2,$C(a0)
000074AA 3142 003C                  		move.w	d2,$3C(a0)
000074AE 3A08                       		move.w	a0,d5
000074B0 0445 D000                  		subi.w	#-$3000,d5
000074B4 EC4D                       		lsr.w	#6,d5
000074B6 0245 007F                  		andi.w	#$7F,d5
000074BA 14C5                       		move.b	d5,(a2)+
000074BC 5228 0028                  		addq.b	#1,$28(a0)
000074C0                            
000074C0                            loc_73B8:				; XREF: ROM:00007398j
000074C0 3A09                       		move.w	a1,d5
000074C2 0445 D000                  		subi.w	#-$3000,d5
000074C6 EC4D                       		lsr.w	#6,d5
000074C8 0245 007F                  		andi.w	#$7F,d5
000074CC 14C5                       		move.b	d5,(a2)+
000074CE 137C 000A 0024             		move.b	#$A,$24(a1)
000074D4 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000074D6 3342 000C                  		move.w	d2,$C(a1)
000074DA 3342 003C                  		move.w	d2,$3C(a1)
000074DE 3343 0008                  		move.w	d3,8(a1)
000074E2 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000074EA 337C 438E 0002             		move.w	#$438E,2(a1)
000074F0 137C 0004 0001             		move.b	#4,1(a1)
000074F6 137C 0003 0018             		move.b	#3,$18(a1)
000074FC 137C 0008 0019             		move.b	#8,$19(a1)
00007502 0643 0010                  		addi.w	#$10,d3
00007506 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
0000750A                            
0000750A                            Obj11_Action:				; XREF: Obj11_Index
0000750A 6100                       		bsr.s	Obj11_Solid
0000750C 4A28 003E                  		tst.b	$3E(a0)
00007510 6700                       		beq.s	Obj11_Display
00007512 5928 003E                  		subq.b	#4,$3E(a0)
00007516 6100 0000                  		bsr.w	Obj11_Bend
0000751A                            
0000751A                            Obj11_Display:
0000751A 6100 0000                  		bsr.w	DisplaySprite
0000751E 6000 0000                  		bra.w	Obj11_ChkDel
00007522                            
00007522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007522                            
00007522                            
00007522                            Obj11_Solid:				; XREF: Obj11_Action
00007522 7200                       		moveq	#0,d1
00007524 1228 0028                  		move.b	$28(a0),d1
00007528 E749                       		lsl.w	#3,d1
0000752A 3401                       		move.w	d1,d2
0000752C 5041                       		addq.w	#8,d1
0000752E D442                       		add.w	d2,d2
00007530 43F8 D000                  		lea	($FFFFD000).w,a1
00007534 4A69 0012                  		tst.w	$12(a1)
00007538 6B00 0000                  		bmi.w	locret_751E
0000753C 3029 0008                  		move.w	8(a1),d0
00007540 9068 0008                  		sub.w	8(a0),d0
00007544 D041                       		add.w	d1,d0
00007546 6B00 0000                  		bmi.w	locret_751E
0000754A B042                       		cmp.w	d2,d0
0000754C 6400 0000                  		bcc.w	locret_751E
00007550 6000                       		bra.s	Platform2
00007552                            ; End of function Obj11_Solid
00007552                            
00007552                            ; ---------------------------------------------------------------------------
00007552                            ; Platform subroutine
00007552                            ; ---------------------------------------------------------------------------
00007552                            
00007552                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007552                            
00007552                            
00007552                            PlatformObject:
00007552 43F8 D000                  		lea	($FFFFD000).w,a1
00007556 4A69 0012                  		tst.w	$12(a1)
0000755A 6B00 0000                  		bmi.w	locret_751E
0000755E 3029 0008                  		move.w	8(a1),d0
00007562 9068 0008                  		sub.w	8(a0),d0
00007566 D041                       		add.w	d1,d0
00007568 6B00 0000                  		bmi.w	locret_751E
0000756C D241                       		add.w	d1,d1
0000756E B041                       		cmp.w	d1,d0
00007570 6400 0000                  		bcc.w	locret_751E
00007574                            
00007574                            Platform2:
00007574 3028 000C                  		move.w	$C(a0),d0
00007578 5140                       		subq.w	#8,d0
0000757A                            
0000757A                            Platform3:
0000757A 3429 000C                  		move.w	$C(a1),d2
0000757E 1229 0016                  		move.b	$16(a1),d1
00007582 4881                       		ext.w	d1
00007584 D242                       		add.w	d2,d1
00007586 5841                       		addq.w	#4,d1
00007588 9041                       		sub.w	d1,d0
0000758A 6200 0000                  		bhi.w	locret_751E
0000758E 0C40 FFF0                  		cmpi.w	#-$10,d0
00007592 6500 0000                  		bcs.w	locret_751E
00007596 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000759A 6B00 0000                  		bmi.w	locret_751E
0000759E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000075A4 6400 0000                  		bcc.w	locret_751E
000075A8 D440                       		add.w	d0,d2
000075AA 5642                       		addq.w	#3,d2
000075AC 3342 000C                  		move.w	d2,$C(a1)
000075B0 5428 0024                  		addq.b	#2,$24(a0)
000075B4                            
000075B4                            loc_74AE:
000075B4 0829 0003 0022             		btst	#3,$22(a1)
000075BA 6700                       		beq.s	loc_74DC
000075BC 7000                       		moveq	#0,d0
000075BE 1029 003D                  		move.b	$3D(a1),d0
000075C2 ED48                       		lsl.w	#6,d0
000075C4 0680 00FF D000             		addi.l	#$FFD000,d0
000075CA 2440                       		movea.l	d0,a2
000075CC 08AA 0003 0022             		bclr	#3,$22(a2)
000075D2 422A 0025                  		clr.b	$25(a2)
000075D6 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000075DC 6600                       		bne.s	loc_74DC
000075DE 552A 0024                  		subq.b	#2,$24(a2)
000075E2                            
000075E2                            loc_74DC:
000075E2 3008                       		move.w	a0,d0
000075E4 0440 D000                  		subi.w	#-$3000,d0
000075E8 EC48                       		lsr.w	#6,d0
000075EA 0240 007F                  		andi.w	#$7F,d0
000075EE 1340 003D                  		move.b	d0,$3D(a1)
000075F2 137C 0000 0026             		move.b	#0,$26(a1)
000075F8 337C 0000 0012             		move.w	#0,$12(a1)
000075FE 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007604 0829 0001 0022             		btst	#1,$22(a1)
0000760A 6700                       		beq.s	loc_7512
0000760C 2F08                       		move.l	a0,-(sp)
0000760E 2049                       		movea.l	a1,a0
00007610 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007616 205F                       		movea.l	(sp)+,a0
00007618                            
00007618                            loc_7512:
00007618 08E9 0003 0022             		bset	#3,$22(a1)
0000761E 08E8 0003 0022             		bset	#3,$22(a0)
00007624                            
00007624                            locret_751E:
00007624 4E75                       		rts	
00007626                            ; End of function PlatformObject
00007626                            
00007626                            ; ---------------------------------------------------------------------------
00007626                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007626                            ; ---------------------------------------------------------------------------
00007626                            
00007626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007626                            
00007626                            
00007626                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007626 43F8 D000                  		lea	($FFFFD000).w,a1
0000762A 4A69 0012                  		tst.w	$12(a1)
0000762E 6B00 FFF4                  		bmi.w	locret_751E
00007632 3029 0008                  		move.w	8(a1),d0
00007636 9068 0008                  		sub.w	8(a0),d0
0000763A D041                       		add.w	d1,d0
0000763C 6BE6                       		bmi.s	locret_751E
0000763E D241                       		add.w	d1,d1
00007640 B041                       		cmp.w	d1,d0
00007642 64E0                       		bcc.s	locret_751E
00007644 0828 0000 0001             		btst	#0,1(a0)
0000764A 6700                       		beq.s	loc_754A
0000764C 4640                       		not.w	d0
0000764E D041                       		add.w	d1,d0
00007650                            
00007650                            loc_754A:
00007650 E248                       		lsr.w	#1,d0
00007652 7600                       		moveq	#0,d3
00007654 1632 0000                  		move.b	(a2,d0.w),d3
00007658 3028 000C                  		move.w	$C(a0),d0
0000765C 9043                       		sub.w	d3,d0
0000765E 6000 FF1A                  		bra.w	Platform3
00007662                            ; End of function SlopeObject
00007662                            
00007662                            
00007662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007662                            
00007662                            
00007662                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007662 43F8 D000                  		lea	($FFFFD000).w,a1
00007666 4A69 0012                  		tst.w	$12(a1)
0000766A 6B00 FFB8                  		bmi.w	locret_751E
0000766E 3029 0008                  		move.w	8(a1),d0
00007672 9068 0008                  		sub.w	8(a0),d0
00007676 D041                       		add.w	d1,d0
00007678 6B00 FFAA                  		bmi.w	locret_751E
0000767C D241                       		add.w	d1,d1
0000767E B041                       		cmp.w	d1,d0
00007680 6400 FFA2                  		bcc.w	locret_751E
00007684 3028 000C                  		move.w	$C(a0),d0
00007688 9043                       		sub.w	d3,d0
0000768A 6000 FEEE                  		bra.w	Platform3
0000768E                            ; End of function Obj15_Solid
0000768E                            
0000768E                            ; ===========================================================================
0000768E                            
0000768E                            Obj11_Action2:				; XREF: Obj11_Index
0000768E 6100                       		bsr.s	Obj11_WalkOff
00007690 6100 0000                  		bsr.w	DisplaySprite
00007694 6000 0000                  		bra.w	Obj11_ChkDel
00007698                            
00007698                            ; ---------------------------------------------------------------------------
00007698                            ; Subroutine allowing Sonic to walk off a bridge
00007698                            ; ---------------------------------------------------------------------------
00007698                            
00007698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007698                            
00007698                            
00007698                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007698 7200                       		moveq	#0,d1
0000769A 1228 0028                  		move.b	$28(a0),d1
0000769E E749                       		lsl.w	#3,d1
000076A0 3401                       		move.w	d1,d2
000076A2 5041                       		addq.w	#8,d1
000076A4 6100                       		bsr.s	ExitPlatform2
000076A6 6400                       		bcc.s	locret_75BE
000076A8 E848                       		lsr.w	#4,d0
000076AA 1140 003F                  		move.b	d0,$3F(a0)
000076AE 1028 003E                  		move.b	$3E(a0),d0
000076B2 0C00 0040                  		cmpi.b	#$40,d0
000076B6 6700                       		beq.s	loc_75B6
000076B8 5828 003E                  		addq.b	#4,$3E(a0)
000076BC                            
000076BC                            loc_75B6:
000076BC 6100 0000                  		bsr.w	Obj11_Bend
000076C0 6100 0000                  		bsr.w	Obj11_MoveSonic
000076C4                            
000076C4                            locret_75BE:
000076C4 4E75                       		rts	
000076C6                            ; End of function Obj11_WalkOff
000076C6                            
000076C6                            ; ---------------------------------------------------------------------------
000076C6                            ; Subroutine allowing Sonic to walk or jump off	a platform
000076C6                            ; ---------------------------------------------------------------------------
000076C6                            
000076C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076C6                            
000076C6                            
000076C6                            ExitPlatform:
000076C6 3401                       		move.w	d1,d2
000076C8                            
000076C8                            ExitPlatform2:
000076C8 D442                       		add.w	d2,d2
000076CA 43F8 D000                  		lea	($FFFFD000).w,a1
000076CE 0829 0001 0022             		btst	#1,$22(a1)
000076D4 6600                       		bne.s	loc_75E0
000076D6 3029 0008                  		move.w	8(a1),d0
000076DA 9068 0008                  		sub.w	8(a0),d0
000076DE D041                       		add.w	d1,d0
000076E0 6B00                       		bmi.s	loc_75E0
000076E2 B042                       		cmp.w	d2,d0
000076E4 6500                       		bcs.s	locret_75F2
000076E6                            
000076E6                            loc_75E0:
000076E6 08A9 0003 0022             		bclr	#3,$22(a1)
000076EC 117C 0002 0024             		move.b	#2,$24(a0)
000076F2 08A8 0003 0022             		bclr	#3,$22(a0)
000076F8                            
000076F8                            locret_75F2:
000076F8 4E75                       		rts	
000076FA                            ; End of function ExitPlatform
000076FA                            
000076FA                            
000076FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076FA                            
000076FA                            
000076FA                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000076FA 7000                       		moveq	#0,d0
000076FC 1028 003F                  		move.b	$3F(a0),d0
00007700 1030 0029                  		move.b	$29(a0,d0.w),d0
00007704 ED48                       		lsl.w	#6,d0
00007706 0680 00FF D000             		addi.l	#$FFD000,d0
0000770C 2440                       		movea.l	d0,a2
0000770E 43F8 D000                  		lea	($FFFFD000).w,a1
00007712 302A 000C                  		move.w	$C(a2),d0
00007716 5140                       		subq.w	#8,d0
00007718 7200                       		moveq	#0,d1
0000771A 1229 0016                  		move.b	$16(a1),d1
0000771E 9041                       		sub.w	d1,d0
00007720 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007724 4E75                       		rts	
00007726                            ; End of function Obj11_MoveSonic
00007726                            
00007726                            
00007726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007726                            
00007726                            
00007726                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007726 1028 003E                  		move.b	$3E(a0),d0
0000772A 6100 B2AE                  		bsr.w	CalcSine
0000772E 3800                       		move.w	d0,d4
00007730 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007736 7000                       		moveq	#0,d0
00007738 1028 0028                  		move.b	$28(a0),d0
0000773C E948                       		lsl.w	#4,d0
0000773E 7600                       		moveq	#0,d3
00007740 1628 003F                  		move.b	$3F(a0),d3
00007744 3403                       		move.w	d3,d2
00007746 D640                       		add.w	d0,d3
00007748 7A00                       		moveq	#0,d5
0000774A 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007750 1A35 3000                  		move.b	(a5,d3.w),d5
00007754 0243 000F                  		andi.w	#$F,d3
00007758 E94B                       		lsl.w	#4,d3
0000775A 47F4 3000                  		lea	(a4,d3.w),a3
0000775E 45E8 0029                  		lea	$29(a0),a2
00007762                            
00007762                            loc_765C:
00007762 7000                       		moveq	#0,d0
00007764 101A                       		move.b	(a2)+,d0
00007766 ED48                       		lsl.w	#6,d0
00007768 0680 00FF D000             		addi.l	#$FFD000,d0
0000776E 2240                       		movea.l	d0,a1
00007770 7000                       		moveq	#0,d0
00007772 101B                       		move.b	(a3)+,d0
00007774 5240                       		addq.w	#1,d0
00007776 C0C5                       		mulu.w	d5,d0
00007778 C0C4                       		mulu.w	d4,d0
0000777A 4840                       		swap	d0
0000777C D069 003C                  		add.w	$3C(a1),d0
00007780 3340 000C                  		move.w	d0,$C(a1)
00007784 51CA FFDC                  		dbf	d2,loc_765C
00007788 7000                       		moveq	#0,d0
0000778A 1028 0028                  		move.b	$28(a0),d0
0000778E 7600                       		moveq	#0,d3
00007790 1628 003F                  		move.b	$3F(a0),d3
00007794 5203                       		addq.b	#1,d3
00007796 9600                       		sub.b	d0,d3
00007798 4403                       		neg.b	d3
0000779A 6B00                       		bmi.s	locret_76CA
0000779C 3403                       		move.w	d3,d2
0000779E E94B                       		lsl.w	#4,d3
000077A0 47F4 3000                  		lea	(a4,d3.w),a3
000077A4 D6C2                       		adda.w	d2,a3
000077A6 5342                       		subq.w	#1,d2
000077A8 6500                       		bcs.s	locret_76CA
000077AA                            
000077AA                            loc_76A4:
000077AA 7000                       		moveq	#0,d0
000077AC 101A                       		move.b	(a2)+,d0
000077AE ED48                       		lsl.w	#6,d0
000077B0 0680 00FF D000             		addi.l	#$FFD000,d0
000077B6 2240                       		movea.l	d0,a1
000077B8 7000                       		moveq	#0,d0
000077BA 1023                       		move.b	-(a3),d0
000077BC 5240                       		addq.w	#1,d0
000077BE C0C5                       		mulu.w	d5,d0
000077C0 C0C4                       		mulu.w	d4,d0
000077C2 4840                       		swap	d0
000077C4 D069 003C                  		add.w	$3C(a1),d0
000077C8 3340 000C                  		move.w	d0,$C(a1)
000077CC 51CA FFDC                  		dbf	d2,loc_76A4
000077D0                            
000077D0                            locret_76CA:
000077D0 4E75                       		rts	
000077D2                            ; End of function Obj11_Bend
000077D2                            
000077D2                            ; ===========================================================================
000077D2                            ; ---------------------------------------------------------------------------
000077D2                            ; GHZ bridge-bending data
000077D2                            ; (Defines how the bridge bends	when Sonic walks across	it)
000077D2                            ; ---------------------------------------------------------------------------
000077D2                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000078E2                            		even
000078E2                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000079E2                            		even
000079E2                            
000079E2                            ; ===========================================================================
000079E2                            
000079E2                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000079E2 3028 0008                  		move.w	8(a0),d0
000079E6 0240 FF80                  		andi.w	#$FF80,d0
000079EA 3238 F700                  		move.w	($FFFFF700).w,d1
000079EE 0441 0080                  		subi.w	#$80,d1
000079F2 0241 FF80                  		andi.w	#$FF80,d1
000079F6 9041                       		sub.w	d1,d0
000079F8 0C40 0280                  		cmpi.w	#$280,d0
000079FC 6200 0000                  		bhi.w	Obj11_DelAll
00007A00 4E75                       		rts	
00007A02                            ; ===========================================================================
00007A02                            
00007A02                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007A02 7400                       		moveq	#0,d2
00007A04 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007A08 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007A0A 5302                       		subq.b	#1,d2		; subtract 1
00007A0C 6500                       		bcs.s	Obj11_Delete
00007A0E                            
00007A0E                            Obj11_DelLoop:
00007A0E 7000                       		moveq	#0,d0
00007A10 101A                       		move.b	(a2)+,d0
00007A12 ED48                       		lsl.w	#6,d0
00007A14 0680 00FF D000             		addi.l	#$FFD000,d0
00007A1A 2240                       		movea.l	d0,a1
00007A1C B048                       		cmp.w	a0,d0
00007A1E 6700                       		beq.s	loc_791E
00007A20 6100 0000                  		bsr.w	DeleteObject2
00007A24                            
00007A24                            loc_791E:
00007A24 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007A28                            
00007A28                            Obj11_Delete:
00007A28 6100 0000                  		bsr.w	DeleteObject
00007A2C 4E75                       		rts	
00007A2E                            ; ===========================================================================
00007A2E                            
00007A2E                            Obj11_Delete2:				; XREF: Obj11_Index
00007A2E 6100 0000                  		bsr.w	DeleteObject
00007A32 4E75                       		rts	
00007A34                            ; ===========================================================================
00007A34                            
00007A34                            Obj11_Display2:				; XREF: Obj11_Index
00007A34 6100 0000                  		bsr.w	DisplaySprite
00007A38 4E75                       		rts	
00007A3A                            ; ===========================================================================
00007A3A                            ; ---------------------------------------------------------------------------
00007A3A                            ; Sprite mappings - GHZ	bridge
00007A3A                            ; ---------------------------------------------------------------------------
00007A3A                            Map_obj11:
00007A3A                            	include "_maps\obj11.asm"
00007A3A                            ; ---------------------------------------------------------------------------
00007A3A                            ; Sprite mappings - GHZ	bridge
00007A3A                            ; ---------------------------------------------------------------------------
00007A3A 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007A3E 0000                       		dc.w byte_794B-Map_obj11
00007A40 01                         byte_793A:	dc.b 1
00007A41 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007A46 02                         byte_7940:	dc.b 2
00007A47 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007A4C 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007A51 01                         byte_794B:	dc.b 1
00007A52 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007A58 00                         		even
00007A58 00                         		even
00007A58                            
00007A58                            ; ===========================================================================
00007A58                            ; ---------------------------------------------------------------------------
00007A58                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007A58                            ;	    - spiked ball on a chain (SBZ)
00007A58                            ; ---------------------------------------------------------------------------
00007A58                            
00007A58                            Obj15:					; XREF: Obj_Index
00007A58 7000                       		moveq	#0,d0
00007A5A 1028 0024                  		move.b	$24(a0),d0
00007A5E 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007A62 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007A66                            ; ===========================================================================
00007A66 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007A6A 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007A6E 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007A72 0000                       		dc.w Obj15_Action-Obj15_Index
00007A74                            ; ===========================================================================
00007A74                            
00007A74                            Obj15_Main:				; XREF: Obj15_Index
00007A74 5428 0024                  		addq.b	#2,$24(a0)
00007A78 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007A80 317C 4380 0002             		move.w	#$4380,2(a0)
00007A86 117C 0004 0001             		move.b	#4,1(a0)
00007A8C 117C 0003 0018             		move.b	#3,$18(a0)
00007A92 117C 0018 0019             		move.b	#$18,$19(a0)
00007A98 117C 0008 0016             		move.b	#8,$16(a0)
00007A9E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007AA4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007AAA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007AB0 6600                       		bne.s	Obj15_NotSLZ
00007AB2 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007ABA 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007AC0 117C 0020 0019             		move.b	#$20,$19(a0)
00007AC6 117C 0010 0016             		move.b	#$10,$16(a0)
00007ACC 117C 0099 0020             		move.b	#$99,$20(a0)
00007AD2                            
00007AD2                            Obj15_NotSLZ:
00007AD2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007AD8 6600                       		bne.s	Obj15_SetLength
00007ADA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007AE2 317C 0391 0002             		move.w	#$391,2(a0)
00007AE8 117C 0018 0019             		move.b	#$18,$19(a0)
00007AEE 117C 0018 0016             		move.b	#$18,$16(a0)
00007AF4 117C 0086 0020             		move.b	#$86,$20(a0)
00007AFA 117C 000C 0024             		move.b	#$C,$24(a0)
00007B00                            
00007B00                            Obj15_SetLength:
00007B00 1810                       		move.b	0(a0),d4
00007B02 7200                       		moveq	#0,d1
00007B04 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007B08 1212                       		move.b	(a2),d1		; move a2 to d1
00007B0A 3F01                       		move.w	d1,-(sp)
00007B0C 0241 000F                  		andi.w	#$F,d1
00007B10 14FC 0000                  		move.b	#0,(a2)+
00007B14 3601                       		move.w	d1,d3
00007B16 E94B                       		lsl.w	#4,d3
00007B18 5003                       		addq.b	#8,d3
00007B1A 1143 003C                  		move.b	d3,$3C(a0)
00007B1E 5103                       		subq.b	#8,d3
00007B20 4A28 001A                  		tst.b	$1A(a0)
00007B24 6700                       		beq.s	Obj15_MakeChain
00007B26 5003                       		addq.b	#8,d3
00007B28 5341                       		subq.w	#1,d1
00007B2A                            
00007B2A                            Obj15_MakeChain:
00007B2A 6100 0000                  		bsr.w	SingleObjLoad
00007B2E 6600                       		bne.s	loc_7A92
00007B30 5228 0028                  		addq.b	#1,$28(a0)
00007B34 3A09                       		move.w	a1,d5
00007B36 0445 D000                  		subi.w	#-$3000,d5
00007B3A EC4D                       		lsr.w	#6,d5
00007B3C 0245 007F                  		andi.w	#$7F,d5
00007B40 14C5                       		move.b	d5,(a2)+
00007B42 137C 000A 0024             		move.b	#$A,$24(a1)
00007B48 1284                       		move.b	d4,0(a1)	; load swinging	object
00007B4A 2368 0004 0004             		move.l	4(a0),4(a1)
00007B50 3368 0002 0002             		move.w	2(a0),2(a1)
00007B56 08A9 0006 0002             		bclr	#6,2(a1)
00007B5C 137C 0004 0001             		move.b	#4,1(a1)
00007B62 137C 0004 0018             		move.b	#4,$18(a1)
00007B68 137C 0008 0019             		move.b	#8,$19(a1)
00007B6E 137C 0001 001A             		move.b	#1,$1A(a1)
00007B74 1343 003C                  		move.b	d3,$3C(a1)
00007B78 0403 0010                  		subi.b	#$10,d3
00007B7C 6400                       		bcc.s	loc_7A8E
00007B7E 137C 0002 001A             		move.b	#2,$1A(a1)
00007B84 137C 0003 0018             		move.b	#3,$18(a1)
00007B8A 08E9 0006 0002             		bset	#6,2(a1)
00007B90                            
00007B90                            loc_7A8E:
00007B90 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007B94                            
00007B94                            loc_7A92:
00007B94 3A08                       		move.w	a0,d5
00007B96 0445 D000                  		subi.w	#-$3000,d5
00007B9A EC4D                       		lsr.w	#6,d5
00007B9C 0245 007F                  		andi.w	#$7F,d5
00007BA0 14C5                       		move.b	d5,(a2)+
00007BA2 317C 4080 0026             		move.w	#$4080,$26(a0)
00007BA8 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007BAE 321F                       		move.w	(sp)+,d1
00007BB0 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007BB4 6700                       		beq.s	loc_7AD4	; if not, branch
00007BB6 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007BBE 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007BC4 117C 0001 001A             		move.b	#1,$1A(a0)
00007BCA 117C 0002 0018             		move.b	#2,$18(a0)
00007BD0 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007BD6                            
00007BD6                            loc_7AD4:
00007BD6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007BDC 6700                       		beq.s	Obj15_Action	; if yes, branch
00007BDE                            
00007BDE                            Obj15_SetSolid:				; XREF: Obj15_Index
00007BDE 7200                       		moveq	#0,d1
00007BE0 1228 0019                  		move.b	$19(a0),d1
00007BE4 7600                       		moveq	#0,d3
00007BE6 1628 0016                  		move.b	$16(a0),d3
00007BEA 6100 FA76                  		bsr.w	Obj15_Solid
00007BEE                            
00007BEE                            Obj15_Action:				; XREF: Obj15_Index
00007BEE 6100 0000                  		bsr.w	Obj15_Move
00007BF2 6100 0000                  		bsr.w	DisplaySprite
00007BF6 6000 0000                  		bra.w	Obj15_ChkDel
00007BFA                            ; ===========================================================================
00007BFA                            
00007BFA                            Obj15_Action2:				; XREF: Obj15_Index
00007BFA 7200                       		moveq	#0,d1
00007BFC 1228 0019                  		move.b	$19(a0),d1
00007C00 6100 FAC4                  		bsr.w	ExitPlatform
00007C04 3F28 0008                  		move.w	8(a0),-(sp)
00007C08 6100 0000                  		bsr.w	Obj15_Move
00007C0C 341F                       		move.w	(sp)+,d2
00007C0E 7600                       		moveq	#0,d3
00007C10 1628 0016                  		move.b	$16(a0),d3
00007C14 5203                       		addq.b	#1,d3
00007C16 6100 0000                  		bsr.w	MvSonicOnPtfm
00007C1A 6100 0000                  		bsr.w	DisplaySprite
00007C1E 6000 0000                  		bra.w	Obj15_ChkDel
00007C22                            
00007C22 4E75                       		rts
00007C24                            
00007C24                            ; ---------------------------------------------------------------------------
00007C24                            ; Subroutine to	change Sonic's position with a platform
00007C24                            ; ---------------------------------------------------------------------------
00007C24                            
00007C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C24                            
00007C24                            
00007C24                            MvSonicOnPtfm:
00007C24 43F8 D000                  		lea	($FFFFD000).w,a1
00007C28 3028 000C                  		move.w	$C(a0),d0
00007C2C 9043                       		sub.w	d3,d0
00007C2E 6000                       		bra.s	MvSonic2
00007C30                            ; End of function MvSonicOnPtfm
00007C30                            
00007C30                            ; ---------------------------------------------------------------------------
00007C30                            ; Subroutine to	change Sonic's position with a platform
00007C30                            ; ---------------------------------------------------------------------------
00007C30                            
00007C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C30                            
00007C30                            
00007C30                            MvSonicOnPtfm2:
00007C30 43F8 D000                  		lea	($FFFFD000).w,a1
00007C34 3028 000C                  		move.w	$C(a0),d0
00007C38 0440 0009                  		subi.w	#9,d0
00007C3C                            
00007C3C                            MvSonic2:
00007C3C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C40 6B00                       		bmi.s	locret_7B62
00007C42 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007C48 6400                       		bcc.s	locret_7B62
00007C4A 4A78 FE08                  		tst.w	($FFFFFE08).w
00007C4E 6600                       		bne.s	locret_7B62
00007C50 7200                       		moveq	#0,d1
00007C52 1229 0016                  		move.b	$16(a1),d1
00007C56 9041                       		sub.w	d1,d0
00007C58 3340 000C                  		move.w	d0,$C(a1)
00007C5C 9468 0008                  		sub.w	8(a0),d2
00007C60 9569 0008                  		sub.w	d2,8(a1)
00007C64                            
00007C64                            locret_7B62:
00007C64 4E75                       		rts	
00007C66                            ; End of function MvSonicOnPtfm2
00007C66                            
00007C66                            
00007C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C66                            
00007C66                            
00007C66                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007C66 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007C6A 323C 0080                  		move.w	#$80,d1
00007C6E 0828 0000 0022             		btst	#0,$22(a0)
00007C74 6700                       		beq.s	loc_7B78
00007C76 4440                       		neg.w	d0
00007C78 D041                       		add.w	d1,d0
00007C7A                            
00007C7A                            loc_7B78:
00007C7A 6000                       		bra.s	Obj15_Move2
00007C7C                            ; End of function Obj15_Move
00007C7C                            
00007C7C                            
00007C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C7C                            
00007C7C                            
00007C7C                            Obj48_Move:				; XREF: Obj48_Display2
00007C7C 4A28 003D                  		tst.b	$3D(a0)
00007C80 6600                       		bne.s	loc_7B9C
00007C82 3028 003E                  		move.w	$3E(a0),d0
00007C86 5040                       		addq.w	#8,d0
00007C88 3140 003E                  		move.w	d0,$3E(a0)
00007C8C D168 0026                  		add.w	d0,$26(a0)
00007C90 0C40 0200                  		cmpi.w	#$200,d0
00007C94 6600                       		bne.s	loc_7BB6
00007C96 117C 0001 003D             		move.b	#1,$3D(a0)
00007C9C 6000                       		bra.s	loc_7BB6
00007C9E                            ; ===========================================================================
00007C9E                            
00007C9E                            loc_7B9C:
00007C9E 3028 003E                  		move.w	$3E(a0),d0
00007CA2 5140                       		subq.w	#8,d0
00007CA4 3140 003E                  		move.w	d0,$3E(a0)
00007CA8 D168 0026                  		add.w	d0,$26(a0)
00007CAC 0C40 FE00                  		cmpi.w	#-$200,d0
00007CB0 6600                       		bne.s	loc_7BB6
00007CB2 117C 0000 003D             		move.b	#0,$3D(a0)
00007CB8                            
00007CB8                            loc_7BB6:
00007CB8 1028 0026                  		move.b	$26(a0),d0
00007CBC                            ; End of function Obj48_Move
00007CBC                            
00007CBC                            
00007CBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CBC                            
00007CBC                            
00007CBC                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00007CBC 6100 AD1C                  		bsr.w	CalcSine
00007CC0 3428 0038                  		move.w	$38(a0),d2
00007CC4 3628 003A                  		move.w	$3A(a0),d3
00007CC8 45E8 0028                  		lea	$28(a0),a2
00007CCC 7C00                       		moveq	#0,d6
00007CCE 1C1A                       		move.b	(a2)+,d6
00007CD0                            
00007CD0                            loc_7BCE:
00007CD0 7800                       		moveq	#0,d4
00007CD2 181A                       		move.b	(a2)+,d4
00007CD4 ED4C                       		lsl.w	#6,d4
00007CD6 0684 00FF D000             		addi.l	#$FFD000,d4
00007CDC 2244                       		movea.l	d4,a1
00007CDE 7800                       		moveq	#0,d4
00007CE0 1829 003C                  		move.b	$3C(a1),d4
00007CE4 2A04                       		move.l	d4,d5
00007CE6 C9C0                       		muls.w	d0,d4
00007CE8 E084                       		asr.l	#8,d4
00007CEA CBC1                       		muls.w	d1,d5
00007CEC E085                       		asr.l	#8,d5
00007CEE D842                       		add.w	d2,d4
00007CF0 DA43                       		add.w	d3,d5
00007CF2 3344 000C                  		move.w	d4,$C(a1)
00007CF6 3345 0008                  		move.w	d5,8(a1)
00007CFA 51CE FFD4                  		dbf	d6,loc_7BCE
00007CFE 4E75                       		rts	
00007D00                            ; End of function Obj15_Move2
00007D00                            
00007D00                            ; ===========================================================================
00007D00                            
00007D00                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00007D00 3028 003A                  		move.w	$3A(a0),d0
00007D04 0240 FF80                  		andi.w	#$FF80,d0
00007D08 3238 F700                  		move.w	($FFFFF700).w,d1
00007D0C 0441 0080                  		subi.w	#$80,d1
00007D10 0241 FF80                  		andi.w	#$FF80,d1
00007D14 9041                       		sub.w	d1,d0
00007D16 0C40 0280                  		cmpi.w	#$280,d0
00007D1A 6200 0000                  		bhi.w	Obj15_DelAll
00007D1E 4E75                       		rts	
00007D20                            ; ===========================================================================
00007D20                            
00007D20                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00007D20 7400                       		moveq	#0,d2
00007D22 45E8 0028                  		lea	$28(a0),a2
00007D26 141A                       		move.b	(a2)+,d2
00007D28                            
00007D28                            Obj15_DelLoop:
00007D28 7000                       		moveq	#0,d0
00007D2A 101A                       		move.b	(a2)+,d0
00007D2C ED48                       		lsl.w	#6,d0
00007D2E 0680 00FF D000             		addi.l	#$FFD000,d0
00007D34 2240                       		movea.l	d0,a1
00007D36 6100 0000                  		bsr.w	DeleteObject2
00007D3A 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00007D3E 4E75                       		rts	
00007D40                            ; ===========================================================================
00007D40                            
00007D40                            Obj15_Delete:				; XREF: Obj15_Index
00007D40 6100 0000                  		bsr.w	DeleteObject
00007D44 4E75                       		rts	
00007D46                            ; ===========================================================================
00007D46                            
00007D46                            Obj15_Display:				; XREF: Obj15_Index
00007D46 6000 0000                  		bra.w	DisplaySprite
00007D4A                            ; ===========================================================================
00007D4A                            ; ---------------------------------------------------------------------------
00007D4A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007D4A                            ; ---------------------------------------------------------------------------
00007D4A                            Map_obj15:
00007D4A                            	include "_maps\obj15ghz.asm"
00007D4A                            ; ---------------------------------------------------------------------------
00007D4A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007D4A                            ; ---------------------------------------------------------------------------
00007D4A 0000                       		dc.w byte_7C4E-Map_obj15
00007D4C 0000                       		dc.w byte_7C59-Map_obj15
00007D4E 0000                       		dc.w byte_7C5F-Map_obj15
00007D50 02                         byte_7C4E:	dc.b 2
00007D51 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00007D56 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00007D5B 01                         byte_7C59:	dc.b 1
00007D5C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D61 01                         byte_7C5F:	dc.b 1
00007D62 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00007D68 00                         		even
00007D68 00                         		even
00007D68                            
00007D68                            ; ---------------------------------------------------------------------------
00007D68                            ; Sprite mappings - SLZ	swinging platforms
00007D68                            ; ---------------------------------------------------------------------------
00007D68                            Map_obj15a:
00007D68                            	include "_maps\obj15slz.asm"
00007D68                            ; ---------------------------------------------------------------------------
00007D68                            ; Sprite mappings - SLZ	swinging platforms
00007D68                            ; ---------------------------------------------------------------------------
00007D68 0000                       		dc.w byte_7C6C-Map_obj15a
00007D6A 0000                       		dc.w byte_7C95-Map_obj15a
00007D6C 0000                       		dc.w byte_7C9B-Map_obj15a
00007D6E 08                         byte_7C6C:	dc.b 8
00007D6F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00007D74 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00007D79 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00007D7E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00007D83 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00007D88 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00007D8D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00007D92 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00007D97 01                         byte_7C95:	dc.b 1
00007D98 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00007D9D 01                         byte_7C9B:	dc.b 1
00007D9E F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00007DA4 00                         		even
00007DA4 00                         		even
00007DA4                            
00007DA4                            ; ===========================================================================
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            ; Object 17 - helix of spikes on a pole	(GHZ)
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            
00007DA4                            Obj17:					; XREF: Obj_Index
00007DA4 7000                       		moveq	#0,d0
00007DA6 1028 0024                  		move.b	$24(a0),d0
00007DAA 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00007DAE 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00007DB2                            ; ===========================================================================
00007DB2 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00007DB4 0000                       		dc.w Obj17_Action-Obj17_Index
00007DB6 0000                       		dc.w Obj17_Action-Obj17_Index
00007DB8 0000                       		dc.w Obj17_Delete-Obj17_Index
00007DBA 0000                       		dc.w Obj17_Display-Obj17_Index
00007DBC                            ; ===========================================================================
00007DBC                            
00007DBC                            Obj17_Main:				; XREF: Obj17_Index
00007DBC 5428 0024                  		addq.b	#2,$24(a0)
00007DC0 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00007DC8 317C 4398 0002             		move.w	#$4398,2(a0)
00007DCE 117C 0007 0022             		move.b	#7,$22(a0)
00007DD4 117C 0004 0001             		move.b	#4,1(a0)
00007DDA 117C 0003 0018             		move.b	#3,$18(a0)
00007DE0 117C 0008 0019             		move.b	#8,$19(a0)
00007DE6 3428 000C                  		move.w	$C(a0),d2
00007DEA 3628 0008                  		move.w	8(a0),d3
00007DEE 1810                       		move.b	0(a0),d4
00007DF0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007DF4 7200                       		moveq	#0,d1
00007DF6 1212                       		move.b	(a2),d1		; move a2 to d1
00007DF8 14FC 0000                  		move.b	#0,(a2)+
00007DFC 3001                       		move.w	d1,d0
00007DFE E248                       		lsr.w	#1,d0
00007E00 E948                       		lsl.w	#4,d0
00007E02 9640                       		sub.w	d0,d3
00007E04 5501                       		subq.b	#2,d1
00007E06 6500                       		bcs.s	Obj17_Action
00007E08 7C00                       		moveq	#0,d6
00007E0A                            
00007E0A                            Obj17_MakeHelix:
00007E0A 6100 0000                  		bsr.w	SingleObjLoad
00007E0E 6600                       		bne.s	Obj17_Action
00007E10 5228 0028                  		addq.b	#1,$28(a0)
00007E14 3A09                       		move.w	a1,d5
00007E16 0445 D000                  		subi.w	#$D000,d5
00007E1A EC4D                       		lsr.w	#6,d5
00007E1C 0245 007F                  		andi.w	#$7F,d5
00007E20 14C5                       		move.b	d5,(a2)+
00007E22 137C 0008 0024             		move.b	#8,$24(a1)
00007E28 1284                       		move.b	d4,0(a1)
00007E2A 3342 000C                  		move.w	d2,$C(a1)
00007E2E 3343 0008                  		move.w	d3,8(a1)
00007E32 2368 0004 0004             		move.l	4(a0),4(a1)
00007E38 337C 4398 0002             		move.w	#$4398,2(a1)
00007E3E 137C 0004 0001             		move.b	#4,1(a1)
00007E44 137C 0003 0018             		move.b	#3,$18(a1)
00007E4A 137C 0008 0019             		move.b	#8,$19(a1)
00007E50 1346 003E                  		move.b	d6,$3E(a1)
00007E54 5206                       		addq.b	#1,d6
00007E56 0206 0007                  		andi.b	#7,d6
00007E5A 0643 0010                  		addi.w	#$10,d3
00007E5E B668 0008                  		cmp.w	8(a0),d3
00007E62 6600                       		bne.s	loc_7D78
00007E64 1146 003E                  		move.b	d6,$3E(a0)
00007E68 5206                       		addq.b	#1,d6
00007E6A 0206 0007                  		andi.b	#7,d6
00007E6E 0643 0010                  		addi.w	#$10,d3
00007E72 5228 0028                  		addq.b	#1,$28(a0)
00007E76                            
00007E76                            loc_7D78:
00007E76 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00007E7A                            
00007E7A                            Obj17_Action:				; XREF: Obj17_Index
00007E7A 6100 0000                  		bsr.w	Obj17_RotateSpikes
00007E7E 6100 0000                  		bsr.w	DisplaySprite
00007E82 6000 0000                  		bra.w	Obj17_ChkDel
00007E86                            
00007E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E86                            
00007E86                            
00007E86                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00007E86 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00007E8A 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00007E90 D028 003E                  		add.b	$3E(a0),d0
00007E94 0200 0007                  		andi.b	#7,d0
00007E98 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00007E9C 6600                       		bne.s	locret_7DA6
00007E9E 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00007EA4                            
00007EA4                            locret_7DA6:
00007EA4 4E75                       		rts	
00007EA6                            ; End of function Obj17_RotateSpikes
00007EA6                            
00007EA6                            ; ===========================================================================
00007EA6                            
00007EA6                            Obj17_ChkDel:				; XREF: Obj17_Action
00007EA6 3028 0008                  		move.w	8(a0),d0
00007EAA 0240 FF80                  		andi.w	#$FF80,d0
00007EAE 3238 F700                  		move.w	($FFFFF700).w,d1
00007EB2 0441 0080                  		subi.w	#$80,d1
00007EB6 0241 FF80                  		andi.w	#$FF80,d1
00007EBA 9041                       		sub.w	d1,d0
00007EBC 0C40 0280                  		cmpi.w	#$280,d0
00007EC0 6200 0000                  		bhi.w	Obj17_DelAll
00007EC4 4E75                       		rts	
00007EC6                            ; ===========================================================================
00007EC6                            
00007EC6                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00007EC6 7400                       		moveq	#0,d2
00007EC8 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007ECC 141A                       		move.b	(a2)+,d2	; move a2 to d2
00007ECE 5502                       		subq.b	#2,d2
00007ED0 6500                       		bcs.s	Obj17_Delete
00007ED2                            
00007ED2                            Obj17_DelLoop:
00007ED2 7000                       		moveq	#0,d0
00007ED4 101A                       		move.b	(a2)+,d0
00007ED6 ED48                       		lsl.w	#6,d0
00007ED8 0680 00FF D000             		addi.l	#$FFD000,d0
00007EDE 2240                       		movea.l	d0,a1
00007EE0 6100 0000                  		bsr.w	DeleteObject2	; delete object
00007EE4 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00007EE8                            
00007EE8                            Obj17_Delete:				; XREF: Obj17_Index
00007EE8 6100 0000                  		bsr.w	DeleteObject
00007EEC 4E75                       		rts	
00007EEE                            ; ===========================================================================
00007EEE                            
00007EEE                            Obj17_Display:				; XREF: Obj17_Index
00007EEE 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00007EF2 6000 0000                  		bra.w	DisplaySprite
00007EF6                            ; ===========================================================================
00007EF6                            ; ---------------------------------------------------------------------------
00007EF6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007EF6                            ; ---------------------------------------------------------------------------
00007EF6                            Map_obj17:
00007EF6                            	include "_maps\obj17.asm"
00007EF6                            ; ---------------------------------------------------------------------------
00007EF6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007EF6                            ; ---------------------------------------------------------------------------
00007EF6 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00007EFA 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00007EFE 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00007F02 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00007F06 01                         byte_7E08:	dc.b 1
00007F07 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00007F0C 01                         byte_7E0E:	dc.b 1
00007F0D F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00007F12 01                         byte_7E14:	dc.b 1
00007F13 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00007F18 01                         byte_7E1A:	dc.b 1
00007F19 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00007F1E 01                         byte_7E20:	dc.b 1
00007F1F 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00007F24 01                         byte_7E26:	dc.b 1
00007F25 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00007F2A 01                         byte_7E2C:	dc.b 1
00007F2B F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00007F30                            		even
00007F30                            		even
00007F30                            
00007F30                            ; ===========================================================================
00007F30                            ; ---------------------------------------------------------------------------
00007F30                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00007F30                            ; ---------------------------------------------------------------------------
00007F30                            
00007F30                            Obj18:					; XREF: Obj_Index
00007F30 7000                       		moveq	#0,d0
00007F32 1028 0024                  		move.b	$24(a0),d0
00007F36 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00007F3A 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00007F3E                            ; ===========================================================================
00007F3E 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00007F40 0000                       		dc.w Obj18_Solid-Obj18_Index
00007F42 0000                       		dc.w Obj18_Action2-Obj18_Index
00007F44 0000                       		dc.w Obj18_Delete-Obj18_Index
00007F46 0000                       		dc.w Obj18_Action-Obj18_Index
00007F48                            ; ===========================================================================
00007F48                            
00007F48                            Obj18_Main:				; XREF: Obj18_Index
00007F48 5428 0024                  		addq.b	#2,$24(a0)
00007F4C 317C 4000 0002             		move.w	#$4000,2(a0)
00007F52 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00007F5A 117C 0020 0019             		move.b	#$20,$19(a0)
00007F60 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00007F66 6600                       		bne.s	Obj18_NotSYZ
00007F68 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00007F70 117C 0020 0019             		move.b	#$20,$19(a0)
00007F76                            
00007F76                            Obj18_NotSYZ:
00007F76 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007F7C 6600                       		bne.s	Obj18_NotSLZ
00007F7E 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00007F86 117C 0020 0019             		move.b	#$20,$19(a0)
00007F8C 317C 4000 0002             		move.w	#$4000,2(a0)
00007F92 117C 0003 0028             		move.b	#3,$28(a0)
00007F98                            
00007F98                            Obj18_NotSLZ:
00007F98 117C 0004 0001             		move.b	#4,1(a0)
00007F9E 117C 0004 0018             		move.b	#4,$18(a0)
00007FA4 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00007FAA 3168 000C 0034             		move.w	$C(a0),$34(a0)
00007FB0 3168 0008 0032             		move.w	8(a0),$32(a0)
00007FB6 317C 0080 0026             		move.w	#$80,$26(a0)
00007FBC 7200                       		moveq	#0,d1
00007FBE 1028 0028                  		move.b	$28(a0),d0
00007FC2 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00007FC6 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00007FC8 5201                       		addq.b	#1,d1		; use frame #1
00007FCA 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00007FD0                            
00007FD0                            Obj18_SetFrame:
00007FD0 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00007FD4                            
00007FD4                            Obj18_Solid:				; XREF: Obj18_Index
00007FD4 4A28 0038                  		tst.b	$38(a0)
00007FD8 6700                       		beq.s	loc_7EE0
00007FDA 5928 0038                  		subq.b	#4,$38(a0)
00007FDE                            
00007FDE                            loc_7EE0:
00007FDE 7200                       		moveq	#0,d1
00007FE0 1228 0019                  		move.b	$19(a0),d1
00007FE4 6100 F56C                  		bsr.w	PlatformObject
00007FE8                            
00007FE8                            Obj18_Action:				; XREF: Obj18_Index
00007FE8 6100 0000                  		bsr.w	Obj18_Move
00007FEC 6100 0000                  		bsr.w	Obj18_Nudge
00007FF0 6100 0000                  		bsr.w	DisplaySprite
00007FF4 6000 0000                  		bra.w	Obj18_ChkDel
00007FF8                            ; ===========================================================================
00007FF8                            
00007FF8                            Obj18_Action2:				; XREF: Obj18_Index
00007FF8 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00007FFE 6700                       		beq.s	loc_7F06
00008000 5828 0038                  		addq.b	#4,$38(a0)
00008004                            
00008004                            loc_7F06:
00008004 7200                       		moveq	#0,d1
00008006 1228 0019                  		move.b	$19(a0),d1
0000800A 6100 F6BA                  		bsr.w	ExitPlatform
0000800E 3F28 0008                  		move.w	8(a0),-(sp)
00008012 6100 0000                  		bsr.w	Obj18_Move
00008016 6100 0000                  		bsr.w	Obj18_Nudge
0000801A 341F                       		move.w	(sp)+,d2
0000801C 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008020 6100 0000                  		bsr.w	DisplaySprite
00008024 6000 0000                  		bra.w	Obj18_ChkDel
00008028                            
00008028 4E75                       		rts
0000802A                            
0000802A                            ; ---------------------------------------------------------------------------
0000802A                            ; Subroutine to	move platform slightly when you	stand on it
0000802A                            ; ---------------------------------------------------------------------------
0000802A                            
0000802A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000802A                            
0000802A                            
0000802A                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000802A 1028 0038                  		move.b	$38(a0),d0
0000802E 6100 A9AA                  		bsr.w	CalcSine
00008032 323C 0400                  		move.w	#$400,d1
00008036 C1C1                       		muls.w	d1,d0
00008038 4840                       		swap	d0
0000803A D068 002C                  		add.w	$2C(a0),d0
0000803E 3140 000C                  		move.w	d0,$C(a0)
00008042 4E75                       		rts	
00008044                            ; End of function Obj18_Nudge
00008044                            
00008044                            ; ---------------------------------------------------------------------------
00008044                            ; Subroutine to	move platforms
00008044                            ; ---------------------------------------------------------------------------
00008044                            
00008044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008044                            
00008044                            
00008044                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008044 7000                       		moveq	#0,d0
00008046 1028 0028                  		move.b	$28(a0),d0
0000804A 0240 000F                  		andi.w	#$F,d0
0000804E D040                       		add.w	d0,d0
00008050 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008054 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008058                            ; End of function Obj18_Move
00008058                            
00008058                            ; ===========================================================================
00008058 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000805C 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008060 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008064 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008068 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000806C 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008070 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008072                            ; ===========================================================================
00008072                            
00008072                            Obj18_Type00:
00008072 4E75                       		rts			; platform 00 doesn't move
00008074                            ; ===========================================================================
00008074                            
00008074                            Obj18_Type05:
00008074 3028 0032                  		move.w	$32(a0),d0
00008078 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000807C 4401                       		neg.b	d1		; reverse platform-motion
0000807E 0601 0040                  		addi.b	#$40,d1
00008082 6000                       		bra.s	Obj18_01_Move
00008084                            ; ===========================================================================
00008084                            
00008084                            Obj18_Type01:
00008084 3028 0032                  		move.w	$32(a0),d0
00008088 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000808C 0401 0040                  		subi.b	#$40,d1
00008090                            
00008090                            Obj18_01_Move:
00008090 4881                       		ext.w	d1
00008092 D041                       		add.w	d1,d0
00008094 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008098 6000 0000                  		bra.w	Obj18_ChgMotion
0000809C                            ; ===========================================================================
0000809C                            
0000809C                            Obj18_Type0C:
0000809C 3028 0034                  		move.w	$34(a0),d0
000080A0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000080A4 4401                       		neg.b	d1		; reverse platform-motion
000080A6 0601 0030                  		addi.b	#$30,d1
000080AA 6000                       		bra.s	Obj18_02_Move
000080AC                            ; ===========================================================================
000080AC                            
000080AC                            Obj18_Type0B:
000080AC 3028 0034                  		move.w	$34(a0),d0
000080B0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000080B4 0401 0030                  		subi.b	#$30,d1
000080B8 6000                       		bra.s	Obj18_02_Move
000080BA                            ; ===========================================================================
000080BA                            
000080BA                            Obj18_Type06:
000080BA 3028 0034                  		move.w	$34(a0),d0
000080BE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080C2 4401                       		neg.b	d1		; reverse platform-motion
000080C4 0601 0040                  		addi.b	#$40,d1
000080C8 6000                       		bra.s	Obj18_02_Move
000080CA                            ; ===========================================================================
000080CA                            
000080CA                            Obj18_Type02:
000080CA 3028 0034                  		move.w	$34(a0),d0
000080CE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080D2 0401 0040                  		subi.b	#$40,d1
000080D6                            
000080D6                            Obj18_02_Move:
000080D6 4881                       		ext.w	d1
000080D8 D041                       		add.w	d1,d0
000080DA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000080DE 6000 0000                  		bra.w	Obj18_ChgMotion
000080E2                            ; ===========================================================================
000080E2                            
000080E2                            Obj18_Type03:
000080E2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000080E6 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000080E8 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000080EE 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000080F0 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000080F6                            
000080F6                            Obj18_03_NoMove:
000080F6 4E75                       		rts	
000080F8                            ; ===========================================================================
000080F8                            
000080F8                            Obj18_03_Wait:
000080F8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000080FC 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000080FE 317C 0020 003A             		move.w	#32,$3A(a0)
00008104 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008108 4E75                       		rts	
0000810A                            ; ===========================================================================
0000810A                            
0000810A                            Obj18_Type04:
0000810A 4A68 003A                  		tst.w	$3A(a0)
0000810E 6700                       		beq.s	loc_8048
00008110 5368 003A                  		subq.w	#1,$3A(a0)
00008114 6600                       		bne.s	loc_8048
00008116 0828 0003 0022             		btst	#3,$22(a0)
0000811C 6700                       		beq.s	loc_8042
0000811E 08E9 0001 0022             		bset	#1,$22(a1)
00008124 08A9 0003 0022             		bclr	#3,$22(a1)
0000812A 137C 0002 0024             		move.b	#2,$24(a1)
00008130 08A8 0003 0022             		bclr	#3,$22(a0)
00008136 4228 0025                  		clr.b	$25(a0)
0000813A 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008140                            
00008140                            loc_8042:
00008140 117C 0008 0024             		move.b	#8,$24(a0)
00008146                            
00008146                            loc_8048:
00008146 2628 002C                  		move.l	$2C(a0),d3
0000814A 3028 0012                  		move.w	$12(a0),d0
0000814E 48C0                       		ext.l	d0
00008150 E180                       		asl.l	#8,d0
00008152 D680                       		add.l	d0,d3
00008154 2143 002C                  		move.l	d3,$2C(a0)
00008158 0668 0038 0012             		addi.w	#$38,$12(a0)
0000815E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008162 0640 00E0                  		addi.w	#$E0,d0
00008166 B068 002C                  		cmp.w	$2C(a0),d0
0000816A 6400                       		bcc.s	locret_8074
0000816C 117C 0006 0024             		move.b	#6,$24(a0)
00008172                            
00008172                            locret_8074:
00008172 4E75                       		rts	
00008174                            ; ===========================================================================
00008174                            
00008174                            Obj18_Type07:
00008174 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008178 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000817A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000817E 7000                       		moveq	#0,d0
00008180 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008184 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008186 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000818A 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000818C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008192                            
00008192                            Obj18_07_NoMove:
00008192 4E75                       		rts	
00008194                            ; ===========================================================================
00008194                            
00008194                            Obj18_07_Wait:
00008194 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008198 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000819A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000819E 4E75                       		rts	
000081A0                            ; ===========================================================================
000081A0                            
000081A0                            Obj18_Type08:
000081A0 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000081A4 3028 0034                  		move.w	$34(a0),d0
000081A8 0440 0200                  		subi.w	#$200,d0
000081AC B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000081B0 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000081B2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000081B6                            
000081B6                            Obj18_08_NoStop:
000081B6 4E75                       		rts	
000081B8                            ; ===========================================================================
000081B8                            
000081B8                            Obj18_Type0A:
000081B8 3028 0034                  		move.w	$34(a0),d0
000081BC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000081C0 0401 0040                  		subi.b	#$40,d1
000081C4 4881                       		ext.w	d1
000081C6 E241                       		asr.w	#1,d1
000081C8 D041                       		add.w	d1,d0
000081CA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000081CE                            
000081CE                            Obj18_ChgMotion:
000081CE 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000081D4 4E75                       		rts	
000081D6                            ; ===========================================================================
000081D6                            
000081D6                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000081D6 3028 0032                  		move.w	$32(a0),d0
000081DA 0240 FF80                  		andi.w	#$FF80,d0
000081DE 3238 F700                  		move.w	($FFFFF700).w,d1
000081E2 0441 0080                  		subi.w	#$80,d1
000081E6 0241 FF80                  		andi.w	#$FF80,d1
000081EA 9041                       		sub.w	d1,d0
000081EC 0C40 0280                  		cmpi.w	#$280,d0
000081F0 6200                       		bhi.s	Obj18_Delete
000081F2 4E75                       		rts	
000081F4                            ; ===========================================================================
000081F4                            
000081F4                            Obj18_Delete:				; XREF: Obj18_Index
000081F4 6000 0000                  		bra.w	DeleteObject
000081F8                            ; ===========================================================================
000081F8                            ; ---------------------------------------------------------------------------
000081F8                            ; Sprite mappings - unused
000081F8                            ; ---------------------------------------------------------------------------
000081F8                            Map_obj18x:
000081F8                            	include "_maps\obj18x.asm"
000081F8                            ; ---------------------------------------------------------------------------
000081F8                            ; Sprite mappings - unused
000081F8                            ; ---------------------------------------------------------------------------
000081F8 0000                       		dc.w byte_80FE-Map_obj18x
000081FA 0000                       		dc.w byte_8109-Map_obj18x
000081FC 02                         byte_80FE:	dc.b 2
000081FD F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008202 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008207 0A                         byte_8109:	dc.b $A
00008208 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000820D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008212 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008217 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000821C 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008221 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008226 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000822B 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008230 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008235 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000823A                            		even
0000823A                            		even
0000823A                            
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            ; Sprite mappings - GHZ	platforms
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            Map_obj18:
0000823A                            	include "_maps\obj18ghz.asm"
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            ; Sprite mappings - GHZ	platforms
0000823A                            ; ---------------------------------------------------------------------------
0000823A 0000                       		dc.w byte_8140-Map_obj18
0000823C 0000                       		dc.w byte_8155-Map_obj18
0000823E 04                         byte_8140:	dc.b 4
0000823F F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008244 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008249 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000824E F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008253 0A                         byte_8155:	dc.b $A
00008254 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008259 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000825E 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008263 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008268 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000826D F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008272 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008277 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000827C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008281 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008286                            		even
00008286                            		even
00008286                            
00008286                            ; ---------------------------------------------------------------------------
00008286                            ; Sprite mappings - SYZ	platforms
00008286                            ; ---------------------------------------------------------------------------
00008286                            Map_obj18a:
00008286                            	include "_maps\obj18syz.asm"
00008286                            ; ---------------------------------------------------------------------------
00008286                            ; Sprite mappings - SYZ	platforms
00008286                            ; ---------------------------------------------------------------------------
00008286 0000                       		dc.w byte_818A-Map_obj18a
00008288 03                         byte_818A:	dc.b 3
00008289 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000828E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008293 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008298                            		even
00008298                            		even
00008298                            
00008298                            ; ---------------------------------------------------------------------------
00008298                            ; Sprite mappings - SLZ	platforms
00008298                            ; ---------------------------------------------------------------------------
00008298                            Map_obj18b:
00008298                            	include "_maps\obj18slz.asm"
00008298                            ; ---------------------------------------------------------------------------
00008298                            ; Sprite mappings - SLZ	platforms
00008298                            ; ---------------------------------------------------------------------------
00008298 0000                       		dc.w byte_819C-Map_obj18b
0000829A 02                         byte_819C:	dc.b 2
0000829B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000082A0 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000082A6 00                         		even
000082A6 00                         		even
000082A6                            
000082A6                            ; ===========================================================================
000082A6                            ; ---------------------------------------------------------------------------
000082A6                            ; Object 19 - blank
000082A6                            ; ---------------------------------------------------------------------------
000082A6                            
000082A6                            Obj19:					; XREF: Obj_Index
000082A6 4E75                       		rts	
000082A8                            ; ===========================================================================
000082A8                            ; ---------------------------------------------------------------------------
000082A8                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000082A8                            ; ---------------------------------------------------------------------------
000082A8                            Map_obj48:
000082A8                            	include "_maps\obj48.asm"
000082A8                            ; ---------------------------------------------------------------------------
000082A8                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000082A8                            ; ---------------------------------------------------------------------------
000082A8 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000082AC 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000082B0 06                         byte_81B2:	dc.b 6
000082B1 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000082B6 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000082BB E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000082C0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000082C5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000082CA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000082CF 04                         byte_81D1:	dc.b 4
000082D0 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000082D5 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000082DA 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000082DF 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000082E4 04                         byte_81E6:	dc.b 4
000082E5 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000082EA E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000082EF 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000082F4 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000082F9 04                         byte_81FB:	dc.b 4
000082FA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000082FF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008304 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008309 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000830E                            		even
0000830E                            		even
0000830E                            
0000830E                            ; ===========================================================================
0000830E                            ; ---------------------------------------------------------------------------
0000830E                            ; Object 1A - GHZ collapsing ledge
0000830E                            ; ---------------------------------------------------------------------------
0000830E                            
0000830E                            Obj1A:					; XREF: Obj_Index
0000830E 7000                       		moveq	#0,d0
00008310 1028 0024                  		move.b	$24(a0),d0
00008314 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008318 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000831C                            ; ===========================================================================
0000831C 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008320 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008324 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008328                            ; ===========================================================================
00008328                            
00008328                            Obj1A_Main:				; XREF: Obj1A_Index
00008328 5428 0024                  		addq.b	#2,$24(a0)
0000832C 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008334 317C 4000 0002             		move.w	#$4000,2(a0)
0000833A 0028 0004 0001             		ori.b	#4,1(a0)
00008340 117C 0004 0018             		move.b	#4,$18(a0)
00008346 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000834C 117C 0064 0019             		move.b	#$64,$19(a0)
00008352 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008358 117C 0038 0016             		move.b	#$38,$16(a0)
0000835E 08E8 0004 0001             		bset	#4,1(a0)
00008364                            
00008364                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008364 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008368 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000836A 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000836E 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008372 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008376                            
00008376                            Obj1A_Slope:
00008376 323C 0030                  		move.w	#$30,d1
0000837A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008380 6100 F2A4                  		bsr.w	SlopeObject
00008384 6000 0000                  		bra.w	MarkObjGone
00008388                            ; ===========================================================================
00008388                            
00008388                            Obj1A_Touch:				; XREF: Obj1A_Index
00008388 4A28 0038                  		tst.b	$38(a0)
0000838C 6700 0000                  		beq.w	loc_847A
00008390 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008396 5328 0038                  		subq.b	#1,$38(a0)
0000839A                            
0000839A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000839A                            
0000839A                            
0000839A                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000839A 323C 0030                  		move.w	#$30,d1
0000839E 6100 F326                  		bsr.w	ExitPlatform
000083A2 323C 0030                  		move.w	#$30,d1
000083A6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000083AC 3428 0008                  		move.w	8(a0),d2
000083B0 6100 0000                  		bsr.w	SlopeObject2
000083B4 6000 0000                  		bra.w	MarkObjGone
000083B8                            ; End of function Obj1A_WalkOff
000083B8                            
000083B8                            ; ===========================================================================
000083B8                            
000083B8                            Obj1A_Display:				; XREF: Obj1A_Index
000083B8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000083BC 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000083BE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000083C2 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000083C6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000083CA 6000 0000                  		bra.w	DisplaySprite
000083CE                            ; ===========================================================================
000083CE                            
000083CE                            loc_82D0:				; XREF: Obj1A_Display
000083CE 5328 0038                  		subq.b	#1,$38(a0)
000083D2 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000083D6 43F8 D000                  		lea	($FFFFD000).w,a1
000083DA 0829 0003 0022             		btst	#3,$22(a1)
000083E0 6700                       		beq.s	loc_82FC
000083E2 4A28 0038                  		tst.b	$38(a0)
000083E6 6600                       		bne.s	locret_8308
000083E8 08A9 0003 0022             		bclr	#3,$22(a1)
000083EE 08A9 0005 0022             		bclr	#5,$22(a1)
000083F4 137C 0001 001D             		move.b	#1,$1D(a1)
000083FA                            
000083FA                            loc_82FC:
000083FA 117C 0000 003A             		move.b	#0,$3A(a0)
00008400 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008406                            
00008406                            locret_8308:
00008406 4E75                       		rts	
00008408                            ; ===========================================================================
00008408                            
00008408                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008408 6100 0000                  		bsr.w	ObjectFall
0000840C 6100 0000                  		bsr.w	DisplaySprite
00008410 4A28 0001                  		tst.b	1(a0)
00008414 6A00                       		bpl.s	Obj1A_Delete
00008416 4E75                       		rts	
00008418                            ; ===========================================================================
00008418                            
00008418                            Obj1A_Delete:				; XREF: Obj1A_Index
00008418 6100 0000                  		bsr.w	DeleteObject
0000841C 4E75                       		rts	
0000841E                            ; ===========================================================================
0000841E                            ; ---------------------------------------------------------------------------
0000841E                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000841E                            ; ---------------------------------------------------------------------------
0000841E                            
0000841E                            Obj53:					; XREF: Obj_Index
0000841E 7000                       		moveq	#0,d0
00008420 1028 0024                  		move.b	$24(a0),d0
00008424 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008428 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000842C                            ; ===========================================================================
0000842C 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008430 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008434 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008438                            ; ===========================================================================
00008438                            
00008438                            Obj53_Main:				; XREF: Obj53_Index
00008438 5428 0024                  		addq.b	#2,$24(a0)
0000843C 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008444 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000844A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008450 6600                       		bne.s	Obj53_NotSLZ
00008452 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008458 5428 001A                  		addq.b	#2,$1A(a0)
0000845C                            
0000845C                            Obj53_NotSLZ:
0000845C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008462 6600                       		bne.s	Obj53_NotSBZ
00008464 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0000846A                            
0000846A                            Obj53_NotSBZ:
0000846A 0028 0004 0001             		ori.b	#4,1(a0)
00008470 117C 0004 0018             		move.b	#4,$18(a0)
00008476 117C 0007 0038             		move.b	#7,$38(a0)
0000847C 117C 0044 0019             		move.b	#$44,$19(a0)
00008482                            
00008482                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008482 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008486 6700                       		beq.s	Obj53_Solid	; if not, branch
00008488 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000848C 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008490 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008494                            
00008494                            Obj53_Solid:
00008494 323C 0020                  		move.w	#$20,d1
00008498 6100 F0B8                  		bsr.w	PlatformObject
0000849C 4A28 0028                  		tst.b	$28(a0)
000084A0 6A00                       		bpl.s	Obj53_MarkAsGone
000084A2 0829 0003 0022             		btst	#3,$22(a1)
000084A8 6700                       		beq.s	Obj53_MarkAsGone
000084AA 08A8 0000 0001             		bclr	#0,1(a0)
000084B0 3029 0008                  		move.w	8(a1),d0
000084B4 9068 0008                  		sub.w	8(a0),d0
000084B8 6400                       		bcc.s	Obj53_MarkAsGone
000084BA 08E8 0000 0001             		bset	#0,1(a0)
000084C0                            
000084C0                            Obj53_MarkAsGone:
000084C0 6000 0000                  		bra.w	MarkObjGone
000084C4                            ; ===========================================================================
000084C4                            
000084C4                            Obj53_Touch:				; XREF: Obj53_Index
000084C4 4A28 0038                  		tst.b	$38(a0)
000084C8 6700 0000                  		beq.w	loc_8458
000084CC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000084D2 5328 0038                  		subq.b	#1,$38(a0)
000084D6                            
000084D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084D6                            
000084D6                            
000084D6                            Obj53_WalkOff:				; XREF: Obj53_Index
000084D6 323C 0020                  		move.w	#$20,d1
000084DA 6100 F1EA                  		bsr.w	ExitPlatform
000084DE 3428 0008                  		move.w	8(a0),d2
000084E2 6100 F74C                  		bsr.w	MvSonicOnPtfm2
000084E6 6000 0000                  		bra.w	MarkObjGone
000084EA                            ; End of function Obj53_WalkOff
000084EA                            
000084EA                            ; ===========================================================================
000084EA                            
000084EA                            Obj53_Display:				; XREF: Obj53_Index
000084EA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000084EE 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
000084F0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000084F4 6600 0000                  		bne.w	loc_8402	; if yes, branch
000084F8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000084FC 6000 0000                  		bra.w	DisplaySprite
00008500                            ; ===========================================================================
00008500                            
00008500                            loc_8402:
00008500 5328 0038                  		subq.b	#1,$38(a0)
00008504 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008508 43F8 D000                  		lea	($FFFFD000).w,a1
0000850C 0829 0003 0022             		btst	#3,$22(a1)
00008512 6700                       		beq.s	loc_842E
00008514 4A28 0038                  		tst.b	$38(a0)
00008518 6600                       		bne.s	locret_843A
0000851A 08A9 0003 0022             		bclr	#3,$22(a1)
00008520 08A9 0005 0022             		bclr	#5,$22(a1)
00008526 137C 0001 001D             		move.b	#1,$1D(a1)
0000852C                            
0000852C                            loc_842E:
0000852C 117C 0000 003A             		move.b	#0,$3A(a0)
00008532 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008538                            
00008538                            locret_843A:
00008538 4E75                       		rts	
0000853A                            ; ===========================================================================
0000853A                            
0000853A                            Obj53_TimeZero:				; XREF: Obj53_Display
0000853A 6100 0000                  		bsr.w	ObjectFall
0000853E 6100 0000                  		bsr.w	DisplaySprite
00008542 4A28 0001                  		tst.b	1(a0)
00008546 6A00                       		bpl.s	Obj53_Delete
00008548 4E75                       		rts	
0000854A                            ; ===========================================================================
0000854A                            
0000854A                            Obj53_Delete:				; XREF: Obj53_Index
0000854A 6100 0000                  		bsr.w	DeleteObject
0000854E 4E75                       		rts	
00008550                            ; ===========================================================================
00008550                            
00008550                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008550 117C 0000 003A             		move.b	#0,$3A(a0)
00008556                            
00008556                            loc_8458:				; XREF: Obj53_Touch
00008556 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000855C 0828 0000 0028             		btst	#0,$28(a0)
00008562 6700                       		beq.s	loc_846C
00008564 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
0000856A                            
0000856A                            loc_846C:
0000856A 7207                       		moveq	#7,d1
0000856C 5228 001A                  		addq.b	#1,$1A(a0)
00008570 6000                       		bra.s	loc_8486
00008572                            ; ===========================================================================
00008572                            
00008572                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008572 117C 0000 003A             		move.b	#0,$3A(a0)
00008578                            
00008578                            loc_847A:				; XREF: Obj1A_Touch
00008578 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000857E 7218                       		moveq	#$18,d1
00008580 5428 001A                  		addq.b	#2,$1A(a0)
00008584                            
00008584                            loc_8486:				; XREF: Obj53_Collapse
00008584 7000                       		moveq	#0,d0
00008586 1028 001A                  		move.b	$1A(a0),d0
0000858A D040                       		add.w	d0,d0
0000858C 2668 0004                  		movea.l	4(a0),a3
00008590 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008594 524B                       		addq.w	#1,a3
00008596 08E8 0005 0001             		bset	#5,1(a0)
0000859C 1810                       		move.b	0(a0),d4
0000859E 1A28 0001                  		move.b	1(a0),d5
000085A2 2248                       		movea.l	a0,a1
000085A4 6000                       		bra.s	loc_84B2
000085A6                            ; ===========================================================================
000085A6                            
000085A6                            loc_84AA:
000085A6 6100 0000                  		bsr.w	SingleObjLoad
000085AA 6600                       		bne.s	loc_84F2
000085AC 5A4B                       		addq.w	#5,a3
000085AE                            
000085AE                            loc_84B2:
000085AE 137C 0006 0024             		move.b	#6,$24(a1)
000085B4 1284                       		move.b	d4,0(a1)
000085B6 234B 0004                  		move.l	a3,4(a1)
000085BA 1345 0001                  		move.b	d5,1(a1)
000085BE 3368 0008 0008             		move.w	8(a0),8(a1)
000085C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000085CA 3368 0002 0002             		move.w	2(a0),2(a1)
000085D0 1368 0018 0018             		move.b	$18(a0),$18(a1)
000085D6 1368 0019 0019             		move.b	$19(a0),$19(a1)
000085DC 135C 0038                  		move.b	(a4)+,$38(a1)
000085E0 B3C8                       		cmpa.l	a0,a1
000085E2 6400                       		bcc.s	loc_84EE
000085E4 6100 0000                  		bsr.w	DisplaySprite2
000085E8                            
000085E8                            loc_84EE:
000085E8 51C9 FFBC                  		dbf	d1,loc_84AA
000085EC                            
000085EC                            loc_84F2:
000085EC 6100 0000                  		bsr.w	DisplaySprite
000085F0 303C 00B9                  		move.w	#$B9,d0
000085F4 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000085FA                            ; ===========================================================================
000085FA                            ; ---------------------------------------------------------------------------
000085FA                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000085FA                            ; ---------------------------------------------------------------------------
000085FA 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000860A 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008614 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000861C 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008624                            
00008624                            ; ---------------------------------------------------------------------------
00008624                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008624                            ; ---------------------------------------------------------------------------
00008624                            
00008624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008624                            
00008624                            
00008624                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008624 43F8 D000                  		lea	($FFFFD000).w,a1
00008628 0829 0003 0022             		btst	#3,$22(a1)
0000862E 6700                       		beq.s	locret_856E
00008630 3029 0008                  		move.w	8(a1),d0
00008634 9068 0008                  		sub.w	8(a0),d0
00008638 D041                       		add.w	d1,d0
0000863A E248                       		lsr.w	#1,d0
0000863C 0828 0000 0001             		btst	#0,1(a0)
00008642 6700                       		beq.s	loc_854E
00008644 4640                       		not.w	d0
00008646 D041                       		add.w	d1,d0
00008648                            
00008648                            loc_854E:
00008648 7200                       		moveq	#0,d1
0000864A 1232 0000                  		move.b	(a2,d0.w),d1
0000864E 3028 000C                  		move.w	$C(a0),d0
00008652 9041                       		sub.w	d1,d0
00008654 7200                       		moveq	#0,d1
00008656 1229 0016                  		move.b	$16(a1),d1
0000865A 9041                       		sub.w	d1,d0
0000865C 3340 000C                  		move.w	d0,$C(a1)
00008660 9468 0008                  		sub.w	8(a0),d2
00008664 9569 0008                  		sub.w	d2,8(a1)
00008668                            
00008668                            locret_856E:
00008668 4E75                       		rts	
0000866A                            ; End of function SlopeObject2
0000866A                            
0000866A                            ; ===========================================================================
0000866A                            ; ---------------------------------------------------------------------------
0000866A                            ; Collision data for GHZ collapsing ledge
0000866A                            ; ---------------------------------------------------------------------------
0000866A                            Obj1A_SlopeData:
0000866A                            		incbin	misc\ghzledge.bin
0000869A                            		even
0000869A                            
0000869A                            ; ---------------------------------------------------------------------------
0000869A                            ; Sprite mappings - GHZ	collapsing ledge
0000869A                            ; ---------------------------------------------------------------------------
0000869A                            Map_obj1A:
0000869A                            	include "_maps\obj1A.asm"
0000869A                            ; ---------------------------------------------------------------------------
0000869A                            ; Sprite mappings - GHZ	collapsing ledge
0000869A                            ; ---------------------------------------------------------------------------
0000869A 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000869E 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000086A2 10                         byte_85A8:	dc.b $10
000086A3 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000086A8 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000086AD E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000086B2 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000086B7 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000086BC D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000086C1 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000086C6 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000086CB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000086D0 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000086D5 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000086DA 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000086DF 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000086E4 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000086E9 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000086EE 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000086F3 10                         byte_85F9:	dc.b $10
000086F4 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000086F9 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000086FE E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008703 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008708 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000870D D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008712 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008717 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000871C F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008721 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008726 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000872B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008730 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008735 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000873A 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000873F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008744 19                         byte_864A:	dc.b $19
00008745 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000874A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000874F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008754 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008759 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000875E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008763 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008768 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000876D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008772 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008777 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000877C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008781 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008786 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000878B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008790 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008795 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000879A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000879F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000087A4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000087A9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000087AE 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000087B3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000087B8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000087BD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000087C2 19                         byte_86C8:	dc.b $19
000087C3 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000087C8 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000087CD D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000087D2 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000087D7 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000087DC E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000087E1 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000087E6 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000087EB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000087F0 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000087F5 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000087FA F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000087FF F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008804 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008809 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000880E F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008813 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008818 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000881D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008822 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008827 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000882C 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008831 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008836 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000883B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008840                            		even
00008840                            		even
00008840                            
00008840                            ; ---------------------------------------------------------------------------
00008840                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008840                            ; ---------------------------------------------------------------------------
00008840                            Map_obj53:
00008840                            	include "_maps\obj53.asm"
00008840                            ; ---------------------------------------------------------------------------
00008840                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008840                            ; ---------------------------------------------------------------------------
00008840 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008844 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008848 04                         byte_874E:	dc.b 4
00008849 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000884E 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008853 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008858 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000885D 08                         byte_8763:	dc.b 8
0000885E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008863 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008868 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000886D F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008872 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008877 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000887C 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008881 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008886 04                         byte_878C:	dc.b 4
00008887 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000888C 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008891 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008896 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000889B 08                         byte_87A1:	dc.b 8
0000889C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000088A1 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000088A6 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000088AB F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000088B0 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000088B5 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000088BA 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000088BF 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000088C4                            		even
000088C4                            		even
000088C4                            
000088C4                            ; ===========================================================================
000088C4                            ; ---------------------------------------------------------------------------
000088C4                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000088C4                            ; ---------------------------------------------------------------------------
000088C4                            
000088C4                            Obj1C:					; XREF: Obj_Index
000088C4 7000                       		moveq	#0,d0
000088C6 1028 0024                  		move.b	$24(a0),d0
000088CA 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
000088CE 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
000088D2                            ; ===========================================================================
000088D2 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
000088D4 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
000088D6                            ; ===========================================================================
000088D6                            
000088D6                            Obj1C_Main:				; XREF: Obj1C_Index
000088D6 5428 0024                  		addq.b	#2,$24(a0)
000088DA 7000                       		moveq	#0,d0
000088DC 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
000088E0 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
000088E4 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
000088E8 2159 0004                  		move.l	(a1)+,4(a0)
000088EC 3159 0002                  		move.w	(a1)+,2(a0)
000088F0 0028 0004 0001             		ori.b	#4,1(a0)
000088F6 1159 001A                  		move.b	(a1)+,$1A(a0)
000088FA 1159 0019                  		move.b	(a1)+,$19(a0)
000088FE 1159 0018                  		move.b	(a1)+,$18(a0)
00008902 1159 0020                  		move.b	(a1)+,$20(a0)
00008906                            
00008906                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008906 3028 0008                  		move.w	8(a0),d0
0000890A 0240 FF80                  		andi.w	#$FF80,d0
0000890E 3238 F700                  		move.w	($FFFFF700).w,d1
00008912 0441 0080                  		subi.w	#$80,d1
00008916 0241 FF80                  		andi.w	#$FF80,d1
0000891A 9041                       		sub.w	d1,d0
0000891C 0C40 0280                  		cmpi.w	#$280,d0
00008920 6200 0000                  		bhi.w	DeleteObject
00008924 6000 0000                  		bra.w	DisplaySprite
00008928                            ; ===========================================================================
00008928                            ; ---------------------------------------------------------------------------
00008928                            ; Variables for	object $1C are stored in an array
00008928                            ; ---------------------------------------------------------------------------
00008928 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000892C 44D8                       		dc.w $44D8		; VRAM setting
0000892E 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008932 0000 0000                  		dc.l Map_obj1C
00008936 44D8                       		dc.w $44D8
00008938 0008 0200                  		dc.b 0,	8, 2, 0
0000893C 0000 0000                  		dc.l Map_obj1C
00008940 44D8                       		dc.w $44D8
00008942 0008 0200                  		dc.b 0,	8, 2, 0
00008946 0000 7A3A                  		dc.l Map_obj11
0000894A 438E                       		dc.w $438E
0000894C 0110 0100                  		dc.b 1,	$10, 1,	0
00008950                            ; ---------------------------------------------------------------------------
00008950                            ; Sprite mappings - SLZ	lava thrower
00008950                            ; ---------------------------------------------------------------------------
00008950                            Map_obj1C:
00008950                            	include "_maps\obj1C.asm"
00008950                            ; ---------------------------------------------------------------------------
00008950                            ; Sprite mappings - SLZ	lava thrower
00008950                            ; ---------------------------------------------------------------------------
00008950 0000                       		dc.w byte_8858-Map_obj1C
00008952 01                         byte_8858:	dc.b 1
00008953 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008958                            		even
00008958                            		even
00008958                            
00008958                            ; ===========================================================================
00008958                            ; ---------------------------------------------------------------------------
00008958                            ; Object 1D - switch that activates when Sonic touches it
00008958                            ; (this	is not used anywhere in	the game)
00008958                            ; ---------------------------------------------------------------------------
00008958                            
00008958                            Obj1D:					; XREF: Obj_Index
00008958 7000                       		moveq	#0,d0
0000895A 1028 0024                  		move.b	$24(a0),d0
0000895E 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008962 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008966                            ; ===========================================================================
00008966 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008968 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000896A 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000896C                            ; ===========================================================================
0000896C                            
0000896C                            Obj1D_Main:				; XREF: Obj1D_Index
0000896C 5428 0024                  		addq.b	#2,$24(a0)
00008970 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008978 317C 4000 0002             		move.w	#$4000,2(a0)
0000897E 117C 0004 0001             		move.b	#4,1(a0)
00008984 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000898A 117C 0010 0019             		move.b	#$10,$19(a0)
00008990 117C 0005 0018             		move.b	#5,$18(a0)
00008996                            
00008996                            Obj1D_Action:				; XREF: Obj1D_Index
00008996 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000899C 323C 0010                  		move.w	#$10,d1
000089A0 6100 0000                  		bsr.w	Obj1D_ChkTouch
000089A4 6700                       		beq.s	Obj1D_ChkDel
000089A6 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000089AA 7001                       		moveq	#1,d0
000089AC 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000089B0                            
000089B0                            Obj1D_ChkDel:
000089B0 6100 0000                  		bsr.w	DisplaySprite
000089B4 3028 0008                  		move.w	8(a0),d0
000089B8 0240 FF80                  		andi.w	#$FF80,d0
000089BC 3238 F700                  		move.w	($FFFFF700).w,d1
000089C0 0441 0080                  		subi.w	#$80,d1
000089C4 0241 FF80                  		andi.w	#$FF80,d1
000089C8 9041                       		sub.w	d1,d0
000089CA 0C40 0280                  		cmpi.w	#$280,d0
000089CE 6200 0000                  		bhi.w	Obj1D_Delete
000089D2 4E75                       		rts	
000089D4                            ; ===========================================================================
000089D4                            
000089D4                            Obj1D_Delete:				; XREF: Obj1D_Index
000089D4 6100 0000                  		bsr.w	DeleteObject
000089D8 4E75                       		rts	
000089DA                            ; ---------------------------------------------------------------------------
000089DA                            ; Subroutine to	check if Sonic touches the object
000089DA                            ; ---------------------------------------------------------------------------
000089DA                            
000089DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089DA                            
000089DA                            
000089DA                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
000089DA 43F8 D000                  		lea	($FFFFD000).w,a1
000089DE 3029 0008                  		move.w	8(a1),d0
000089E2 9068 0008                  		sub.w	8(a0),d0
000089E6 D041                       		add.w	d1,d0
000089E8 6B00                       		bmi.s	loc_8918
000089EA D241                       		add.w	d1,d1
000089EC B041                       		cmp.w	d1,d0
000089EE 6400                       		bcc.s	loc_8918
000089F0 3429 000C                  		move.w	$C(a1),d2
000089F4 1229 0016                  		move.b	$16(a1),d1
000089F8 4881                       		ext.w	d1
000089FA D242                       		add.w	d2,d1
000089FC 3028 000C                  		move.w	$C(a0),d0
00008A00 0440 0010                  		subi.w	#$10,d0
00008A04 9041                       		sub.w	d1,d0
00008A06 6200                       		bhi.s	loc_8918
00008A08 0C40 FFF0                  		cmpi.w	#-$10,d0
00008A0C 6500                       		bcs.s	loc_8918
00008A0E 70FF                       		moveq	#-1,d0
00008A10 4E75                       		rts	
00008A12                            ; ===========================================================================
00008A12                            
00008A12                            loc_8918:
00008A12 7000                       		moveq	#0,d0
00008A14 4E75                       		rts	
00008A16                            ; End of function Obj1D_ChkTouch
00008A16                            
00008A16                            ; ===========================================================================
00008A16                            ; ---------------------------------------------------------------------------
00008A16                            ; Sprite mappings - object 1D
00008A16                            ; ---------------------------------------------------------------------------
00008A16                            Map_obj1D:
00008A16                            	include "_maps\obj1D.asm"
00008A16                            ; ---------------------------------------------------------------------------
00008A16                            ; Sprite mappings - object 1D
00008A16                            ; ---------------------------------------------------------------------------
00008A16 0000                       		dc.w byte_891E-Map_obj1D
00008A18 04                         byte_891E:	dc.b 4
00008A19 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008A1E 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008A23 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008A28 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008A2E 00                         		even
00008A2E 00                         		even
00008A2E                            
00008A2E                            ; ===========================================================================
00008A2E                            ; ---------------------------------------------------------------------------
00008A2E                            ; Object 2A - doors (SBZ)
00008A2E                            ; ---------------------------------------------------------------------------
00008A2E                            
00008A2E                            Obj2A:					; XREF: Obj_Index
00008A2E 7000                       		moveq	#0,d0
00008A30 1028 0024                  		move.b	$24(a0),d0
00008A34 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008A38 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008A3C                            ; ===========================================================================
00008A3C 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008A3E 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008A40                            ; ===========================================================================
00008A40                            
00008A40                            Obj2A_Main:				; XREF: Obj2A_Index
00008A40 5428 0024                  		addq.b	#2,$24(a0)
00008A44 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008A4C 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008A52 0028 0004 0001             		ori.b	#4,1(a0)
00008A58 117C 0008 0019             		move.b	#8,$19(a0)
00008A5E 117C 0004 0018             		move.b	#4,$18(a0)
00008A64                            
00008A64                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008A64 323C 0040                  		move.w	#$40,d1
00008A68 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008A6C 3038 D008                  		move.w	($FFFFD008).w,d0
00008A70 D041                       		add.w	d1,d0
00008A72 B068 0008                  		cmp.w	8(a0),d0
00008A76 6500                       		bcs.s	Obj2A_Animate
00008A78 9041                       		sub.w	d1,d0
00008A7A 9041                       		sub.w	d1,d0
00008A7C B068 0008                  		cmp.w	8(a0),d0
00008A80 6400                       		bcc.s	Obj2A_Animate
00008A82 D041                       		add.w	d1,d0
00008A84 B068 0008                  		cmp.w	8(a0),d0
00008A88 6400                       		bcc.s	loc_899A
00008A8A 0828 0000 0022             		btst	#0,$22(a0)
00008A90 6600                       		bne.s	Obj2A_Animate
00008A92 6000                       		bra.s	Obj2A_Open
00008A94                            ; ===========================================================================
00008A94                            
00008A94                            loc_899A:				; XREF: Obj2A_OpenShut
00008A94 0828 0000 0022             		btst	#0,$22(a0)
00008A9A 6700                       		beq.s	Obj2A_Animate
00008A9C                            
00008A9C                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008A9C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008AA2                            
00008AA2                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008AA2 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008AA8 6100 0000                  		bsr.w	AnimateSprite
00008AAC 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008AB0 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008AB2 323C 0011                  		move.w	#$11,d1
00008AB6 343C 0020                  		move.w	#$20,d2
00008ABA 3602                       		move.w	d2,d3
00008ABC 5243                       		addq.w	#1,d3
00008ABE 3828 0008                  		move.w	8(a0),d4
00008AC2 6100 0000                  		bsr.w	SolidObject
00008AC6                            
00008AC6                            Obj2A_MarkAsUsed:
00008AC6 6000 0000                  		bra.w	MarkObjGone
00008ACA                            ; ===========================================================================
00008ACA                            Ani_obj2A:
00008ACA                            	include "_anim\obj2A.asm"
00008ACA                            ; ---------------------------------------------------------------------------
00008ACA                            ; Animation script - doors (SBZ)
00008ACA                            ; ---------------------------------------------------------------------------
00008ACA 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008ACC 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008ACE 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008ADA 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008AE6                            		even
00008AE6                            		even
00008AE6                            
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6                            ; Sprite mappings - doors (SBZ)
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6                            Map_obj2A:
00008AE6                            	include "_maps\obj2A.asm"
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6                            ; Sprite mappings - doors (SBZ)
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008AEA 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008AEE 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008AF2 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008AF6 0000                       		dc.w byte_8A56-Map_obj2A
00008AF8 02                         byte_89FE:	dc.b 2
00008AF9 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008AFE 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008B03 02                         byte_8A09:	dc.b 2
00008B04 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008B09 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008B0E 02                         byte_8A14:	dc.b 2
00008B0F D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008B14 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008B19 02                         byte_8A1F:	dc.b 2
00008B1A D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008B1F 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008B24 02                         byte_8A2A:	dc.b 2
00008B25 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008B2A 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008B2F 02                         byte_8A35:	dc.b 2
00008B30 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008B35 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008B3A 02                         byte_8A40:	dc.b 2
00008B3B C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008B40 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008B45 02                         byte_8A4B:	dc.b 2
00008B46 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008B4B 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008B50 02                         byte_8A56:	dc.b 2
00008B51 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008B56 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008B5C 00                         		even
00008B5C 00                         		even
00008B5C                            
00008B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B5C                            
00008B5C                            
00008B5C                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008B5C 6100 0000                  		bsr.w	Obj44_SolidWall2
00008B60 6700                       		beq.s	loc_8AA8
00008B62 6B00 0000                  		bmi.w	loc_8AC4
00008B66 4A40                       		tst.w	d0
00008B68 6700 0000                  		beq.w	loc_8A92
00008B6C 6B00                       		bmi.s	loc_8A7C
00008B6E 4A69 0010                  		tst.w	$10(a1)
00008B72 6B00                       		bmi.s	loc_8A92
00008B74 6000                       		bra.s	loc_8A82
00008B76                            ; ===========================================================================
00008B76                            
00008B76                            loc_8A7C:
00008B76 4A69 0010                  		tst.w	$10(a1)
00008B7A 6A00                       		bpl.s	loc_8A92
00008B7C                            
00008B7C                            loc_8A82:
00008B7C 9169 0008                  		sub.w	d0,8(a1)
00008B80 337C 0000 0014             		move.w	#0,$14(a1)
00008B86 337C 0000 0010             		move.w	#0,$10(a1)
00008B8C                            
00008B8C                            loc_8A92:
00008B8C 0829 0001 0022             		btst	#1,$22(a1)
00008B92 6600                       		bne.s	loc_8AB6
00008B94 08E9 0005 0022             		bset	#5,$22(a1)
00008B9A 08E8 0005 0022             		bset	#5,$22(a0)
00008BA0 4E75                       		rts	
00008BA2                            ; ===========================================================================
00008BA2                            
00008BA2                            loc_8AA8:
00008BA2 0828 0005 0022             		btst	#5,$22(a0)
00008BA8 6700                       		beq.s	locret_8AC2
00008BAA 337C 0001 001C             		move.w	#1,$1C(a1)
00008BB0                            
00008BB0                            loc_8AB6:
00008BB0 08A8 0005 0022             		bclr	#5,$22(a0)
00008BB6 08A9 0005 0022             		bclr	#5,$22(a1)
00008BBC                            
00008BBC                            locret_8AC2:
00008BBC 4E75                       		rts	
00008BBE                            ; ===========================================================================
00008BBE                            
00008BBE                            loc_8AC4:
00008BBE 4A69 0012                  		tst.w	$12(a1)
00008BC2 6A00                       		bpl.s	locret_8AD8
00008BC4 4A43                       		tst.w	d3
00008BC6 6A00                       		bpl.s	locret_8AD8
00008BC8 9769 000C                  		sub.w	d3,$C(a1)
00008BCC 337C 0000 0012             		move.w	#0,$12(a1)
00008BD2                            
00008BD2                            locret_8AD8:
00008BD2 4E75                       		rts	
00008BD4                            ; End of function Obj44_SolidWall
00008BD4                            
00008BD4                            
00008BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BD4                            
00008BD4                            
00008BD4                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008BD4 43F8 D000                  		lea	($FFFFD000).w,a1
00008BD8 3029 0008                  		move.w	8(a1),d0
00008BDC 9068 0008                  		sub.w	8(a0),d0
00008BE0 D041                       		add.w	d1,d0
00008BE2 6B00                       		bmi.s	loc_8B48
00008BE4 3601                       		move.w	d1,d3
00008BE6 D643                       		add.w	d3,d3
00008BE8 B043                       		cmp.w	d3,d0
00008BEA 6200                       		bhi.s	loc_8B48
00008BEC 1629 0016                  		move.b	$16(a1),d3
00008BF0 4883                       		ext.w	d3
00008BF2 D443                       		add.w	d3,d2
00008BF4 3629 000C                  		move.w	$C(a1),d3
00008BF8 9668 000C                  		sub.w	$C(a0),d3
00008BFC D642                       		add.w	d2,d3
00008BFE 6B00                       		bmi.s	loc_8B48
00008C00 3802                       		move.w	d2,d4
00008C02 D844                       		add.w	d4,d4
00008C04 B644                       		cmp.w	d4,d3
00008C06 6400                       		bcc.s	loc_8B48
00008C08 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008C0C 6B00                       		bmi.s	loc_8B48
00008C0E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C14 6400                       		bcc.s	loc_8B48
00008C16 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C1A 6600                       		bne.s	loc_8B48
00008C1C 3A00                       		move.w	d0,d5
00008C1E B240                       		cmp.w	d0,d1
00008C20 6400                       		bcc.s	loc_8B30
00008C22 D241                       		add.w	d1,d1
00008C24 9041                       		sub.w	d1,d0
00008C26 3A00                       		move.w	d0,d5
00008C28 4445                       		neg.w	d5
00008C2A                            
00008C2A                            loc_8B30:
00008C2A 3203                       		move.w	d3,d1
00008C2C B443                       		cmp.w	d3,d2
00008C2E 6400                       		bcc.s	loc_8B3C
00008C30 9644                       		sub.w	d4,d3
00008C32 3203                       		move.w	d3,d1
00008C34 4441                       		neg.w	d1
00008C36                            
00008C36                            loc_8B3C:
00008C36 BA41                       		cmp.w	d1,d5
00008C38 6200                       		bhi.s	loc_8B44
00008C3A 7801                       		moveq	#1,d4
00008C3C 4E75                       		rts	
00008C3E                            ; ===========================================================================
00008C3E                            
00008C3E                            loc_8B44:
00008C3E 78FF                       		moveq	#-1,d4
00008C40 4E75                       		rts	
00008C42                            ; ===========================================================================
00008C42                            
00008C42                            loc_8B48:
00008C42 7800                       		moveq	#0,d4
00008C44 4E75                       		rts	
00008C46                            ; End of function Obj44_SolidWall2
00008C46                            
00008C46                            ; ===========================================================================
00008C46                            ; ---------------------------------------------------------------------------
00008C46                            ; Object 1E - Ball Hog enemy (SBZ)
00008C46                            ; ---------------------------------------------------------------------------
00008C46                            
00008C46                            Obj1E:					; XREF: Obj_Index
00008C46 7000                       		moveq	#0,d0
00008C48 1028 0024                  		move.b	$24(a0),d0
00008C4C 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008C50 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008C54                            ; ===========================================================================
00008C54 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008C56 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008C58                            ; ===========================================================================
00008C58                            
00008C58                            Obj1E_Main:				; XREF: Obj1E_Index
00008C58 117C 0013 0016             		move.b	#$13,$16(a0)
00008C5E 117C 0008 0017             		move.b	#8,$17(a0)
00008C64 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008C6C 317C 2302 0002             		move.w	#$2302,2(a0)
00008C72 117C 0004 0001             		move.b	#4,1(a0)
00008C78 117C 0004 0018             		move.b	#4,$18(a0)
00008C7E 117C 0005 0020             		move.b	#5,$20(a0)
00008C84 117C 000C 0019             		move.b	#$C,$19(a0)
00008C8A 6100 0000                  		bsr.w	ObjectFall
00008C8E 4EB9 0000 0000             		jsr	ObjHitFloor
00008C94 4A41                       		tst.w	d1
00008C96 6A00                       		bpl.s	locret_8BAC
00008C98 D368 000C                  		add.w	d1,$C(a0)
00008C9C 317C 0000 0012             		move.w	#0,$12(a0)
00008CA2 5428 0024                  		addq.b	#2,$24(a0)
00008CA6                            
00008CA6                            locret_8BAC:
00008CA6 4E75                       		rts	
00008CA8                            ; ===========================================================================
00008CA8                            
00008CA8                            Obj1E_Action:				; XREF: Obj1E_Index
00008CA8 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008CAE 6100 0000                  		bsr.w	AnimateSprite
00008CB2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00008CB8 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00008CBA 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00008CBE 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00008CC0 6000                       		bra.s	Obj1E_MarkAsGone
00008CC2                            ; ===========================================================================
00008CC2                            
00008CC2                            Obj1E_SetBall:				; XREF: Obj1E_Action
00008CC2 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00008CC6                            
00008CC6                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00008CC6 6000 0000                  		bra.w	MarkObjGone
00008CCA                            ; ===========================================================================
00008CCA                            
00008CCA                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00008CCA 117C 0001 0032             		move.b	#1,$32(a0)
00008CD0 6100 0000                  		bsr.w	SingleObjLoad
00008CD4 6600                       		bne.s	loc_8C1A
00008CD6 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00008CDA 3368 0008 0008             		move.w	8(a0),8(a1)
00008CE0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008CE6 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00008CEC 337C 0000 0012             		move.w	#0,$12(a1)
00008CF2 70FC                       		moveq	#-4,d0
00008CF4 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00008CFA 6700                       		beq.s	loc_8C0A	; if not, branch
00008CFC 4440                       		neg.w	d0
00008CFE 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00008D02                            
00008D02                            loc_8C0A:
00008D02 D169 0008                  		add.w	d0,8(a1)
00008D06 0669 000C 000C             		addi.w	#$C,$C(a1)
00008D0C 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00008D12                            
00008D12                            loc_8C1A:
00008D12 60B2                       		bra.s	Obj1E_MarkAsGone
00008D14                            ; ===========================================================================
00008D14                            ; ---------------------------------------------------------------------------
00008D14                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00008D14                            ; ---------------------------------------------------------------------------
00008D14                            
00008D14                            Obj20:					; XREF: Obj_Index
00008D14 7000                       		moveq	#0,d0
00008D16 1028 0024                  		move.b	$24(a0),d0
00008D1A 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00008D1E 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00008D22                            ; ===========================================================================
00008D22 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00008D24 0000                       		dc.w Obj20_Bounce-Obj20_Index
00008D26                            ; ===========================================================================
00008D26                            
00008D26                            Obj20_Main:				; XREF: Obj20_Index
00008D26 5428 0024                  		addq.b	#2,$24(a0)
00008D2A 117C 0007 0016             		move.b	#7,$16(a0)
00008D30 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008D38 317C 2302 0002             		move.w	#$2302,2(a0)
00008D3E 117C 0004 0001             		move.b	#4,1(a0)
00008D44 117C 0003 0018             		move.b	#3,$18(a0)
00008D4A 117C 0087 0020             		move.b	#$87,$20(a0)
00008D50 117C 0008 0019             		move.b	#8,$19(a0)
00008D56 7000                       		moveq	#0,d0
00008D58 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008D5C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00008D60 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00008D64 117C 0004 001A             		move.b	#4,$1A(a0)
00008D6A                            
00008D6A                            Obj20_Bounce:				; XREF: Obj20_Index
00008D6A 4EB9 0000 0000             		jsr	ObjectFall
00008D70 4A68 0012                  		tst.w	$12(a0)
00008D74 6B00                       		bmi.s	Obj20_ChkExplode
00008D76 4EB9 0000 0000             		jsr	ObjHitFloor
00008D7C 4A41                       		tst.w	d1
00008D7E 6A00                       		bpl.s	Obj20_ChkExplode
00008D80 D368 000C                  		add.w	d1,$C(a0)
00008D84 317C FD00 0012             		move.w	#-$300,$12(a0)
00008D8A 4A03                       		tst.b	d3
00008D8C 6700                       		beq.s	Obj20_ChkExplode
00008D8E 6B00                       		bmi.s	loc_8CA4
00008D90 4A68 0010                  		tst.w	$10(a0)
00008D94 6A00                       		bpl.s	Obj20_ChkExplode
00008D96 4468 0010                  		neg.w	$10(a0)
00008D9A 6000                       		bra.s	Obj20_ChkExplode
00008D9C                            ; ===========================================================================
00008D9C                            
00008D9C                            loc_8CA4:				; XREF: Obj20_Bounce
00008D9C 4A68 0010                  		tst.w	$10(a0)
00008DA0 6B00                       		bmi.s	Obj20_ChkExplode
00008DA2 4468 0010                  		neg.w	$10(a0)
00008DA6                            
00008DA6                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00008DA6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00008DAA 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00008DAC 10BC 0024                  		move.b	#$24,0(a0)
00008DB0 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00008DB4 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00008DBA 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00008DBE                            ; ===========================================================================
00008DBE                            
00008DBE                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00008DBE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008DC2 6A00                       		bpl.s	Obj20_Display
00008DC4 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00008DCA 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00008DD0                            
00008DD0                            Obj20_Display:
00008DD0 6100 0000                  		bsr.w	DisplaySprite
00008DD4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008DD8 0640 00E0                  		addi.w	#$E0,d0
00008DDC B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00008DE0 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00008DE4 4E75                       		rts	
00008DE6                            ; ===========================================================================
00008DE6                            ; ---------------------------------------------------------------------------
00008DE6                            ; Object 24 - explosion	from a destroyed monitor
00008DE6                            ; ---------------------------------------------------------------------------
00008DE6                            
00008DE6                            Obj24:					; XREF: Obj_Index
00008DE6 7000                       		moveq	#0,d0
00008DE8 1028 0024                  		move.b	$24(a0),d0
00008DEC 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00008DF0 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00008DF4                            ; ===========================================================================
00008DF4 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00008DF6 0000                       		dc.w Obj24_Animate-Obj24_Index
00008DF8                            ; ===========================================================================
00008DF8                            
00008DF8                            Obj24_Main:				; XREF: Obj24_Index
00008DF8 5428 0024                  		addq.b	#2,$24(a0)
00008DFC 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00008E04 317C 041C 0002             		move.w	#$41C,2(a0)
00008E0A 117C 0004 0001             		move.b	#4,1(a0)
00008E10 117C 0001 0018             		move.b	#1,$18(a0)
00008E16 117C 0000 0020             		move.b	#0,$20(a0)
00008E1C 117C 000C 0019             		move.b	#$C,$19(a0)
00008E22 117C 0009 001E             		move.b	#9,$1E(a0)
00008E28 117C 0000 001A             		move.b	#0,$1A(a0)
00008E2E 303C 00A5                  		move.w	#$A5,d0
00008E32 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play explosion sound
00008E38                            
00008E38                            Obj24_Animate:				; XREF: Obj24_Index
00008E38 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008E3C 6A00                       		bpl.s	Obj24_Display
00008E3E 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00008E44 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008E48 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00008E4E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008E52                            
00008E52                            Obj24_Display:
00008E52 6000 0000                  		bra.w	DisplaySprite
00008E56                            ; ===========================================================================
00008E56                            ; ---------------------------------------------------------------------------
00008E56                            ; Object 27 - explosion	from a destroyed enemy
00008E56                            ; ---------------------------------------------------------------------------
00008E56                            
00008E56                            Obj27:					; XREF: Obj_Index
00008E56 7000                       		moveq	#0,d0
00008E58 1028 0024                  		move.b	$24(a0),d0
00008E5C 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00008E60 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00008E64                            ; ===========================================================================
00008E64 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00008E66 0000                       		dc.w Obj27_Main-Obj27_Index
00008E68 0000                       		dc.w Obj27_Animate-Obj27_Index
00008E6A                            ; ===========================================================================
00008E6A                            
00008E6A                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00008E6A 5428 0024                  		addq.b	#2,$24(a0)
00008E6E 6100 0000                  		bsr.w	SingleObjLoad
00008E72 6600                       		bne.s	Obj27_Main
00008E74 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00008E78 3368 0008 0008             		move.w	8(a0),8(a1)
00008E7E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008E84 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00008E8A                            
00008E8A                            Obj27_Main:				; XREF: Obj27_Index
00008E8A 5428 0024                  		addq.b	#2,$24(a0)
00008E8E 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00008E96 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008E9C 117C 0004 0001             		move.b	#4,1(a0)
00008EA2 117C 0001 0018             		move.b	#1,$18(a0)
00008EA8 117C 0000 0020             		move.b	#0,$20(a0)
00008EAE 117C 000C 0019             		move.b	#$C,$19(a0)
00008EB4 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008EBA 117C 0000 001A             		move.b	#0,$1A(a0)
00008EC0 303C 00C1                  		move.w	#$C1,d0
00008EC4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00008ECA                            
00008ECA                            Obj27_Animate:				; XREF: Obj27_Index
00008ECA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008ECE 6A00                       		bpl.s	Obj27_Display
00008ED0 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008ED6 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008EDA 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00008EE0 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008EE4                            
00008EE4                            Obj27_Display:
00008EE4 6000 0000                  		bra.w	DisplaySprite
00008EE8                            ; ===========================================================================
00008EE8                            ; ---------------------------------------------------------------------------
00008EE8                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00008EE8                            ; ---------------------------------------------------------------------------
00008EE8                            
00008EE8                            Obj3F:					; XREF: Obj_Index
00008EE8 7000                       		moveq	#0,d0
00008EEA 1028 0024                  		move.b	$24(a0),d0
00008EEE 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00008EF2 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00008EF6                            ; ===========================================================================
00008EF6 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00008EF8 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00008EFA                            ; ===========================================================================
00008EFA                            
00008EFA                            Obj3F_Main:				; XREF: Obj3F_Index
00008EFA 5428 0024                  		addq.b	#2,$24(a0)
00008EFE 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00008F06 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008F0C 117C 0004 0001             		move.b	#4,1(a0)
00008F12 117C 0001 0018             		move.b	#1,$18(a0)
00008F18 117C 0000 0020             		move.b	#0,$20(a0)
00008F1E 117C 000C 0019             		move.b	#$C,$19(a0)
00008F24 117C 0007 001E             		move.b	#7,$1E(a0)
00008F2A 117C 0000 001A             		move.b	#0,$1A(a0)
00008F30 303C 00C4                  		move.w	#$C4,d0
00008F34 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00008F3A                            ; ===========================================================================
00008F3A                            Ani_obj1E:
00008F3A                            	include "_anim\obj1E.asm"
00008F3A                            ; ---------------------------------------------------------------------------
00008F3A                            ; Animation script - doors (SBZ)
00008F3A                            ; ---------------------------------------------------------------------------
00008F3A 0000                       		dc.w byte_8E4A-Ani_obj1E
00008F3C 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00008F54 00                         		even
00008F54 00                         		even
00008F54                            
00008F54                            ; ---------------------------------------------------------------------------
00008F54                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008F54                            ; ---------------------------------------------------------------------------
00008F54                            Map_obj1E:
00008F54                            	include "_maps\obj1E.asm"
00008F54                            ; ---------------------------------------------------------------------------
00008F54                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008F54                            ; ---------------------------------------------------------------------------
00008F54 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00008F58 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00008F5C 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00008F60 02                         byte_8E6E:	dc.b 2
00008F61 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008F66 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00008F6B 02                         byte_8E79:	dc.b 2
00008F6C EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008F71 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00008F76 02                         byte_8E84:	dc.b 2
00008F77 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00008F7C 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00008F81 02                         byte_8E8F:	dc.b 2
00008F82 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00008F87 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00008F8C 01                         byte_8E9A:	dc.b 1
00008F8D F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00008F92 01                         byte_8EA0:	dc.b 1
00008F93 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00008F98                            		even
00008F98                            		even
00008F98                            
00008F98                            ; ---------------------------------------------------------------------------
00008F98                            ; Sprite mappings - explosion
00008F98                            ; ---------------------------------------------------------------------------
00008F98                            Map_obj24:
00008F98                            	include "_maps\obj24.asm"
00008F98                            ; ---------------------------------------------------------------------------
00008F98                            ; Sprite mappings - explosion
00008F98                            ; ---------------------------------------------------------------------------
00008F98 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00008F9C 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00008FA0 01                         byte_8EAE:	dc.b 1
00008FA1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00008FA6 01                         byte_8EB4:	dc.b 1
00008FA7 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00008FAC 01                         byte_8EBA:	dc.b 1
00008FAD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00008FB2 01                         byte_8EC0:	dc.b 1
00008FB3 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00008FB8                            		even
00008FB8                            		even
00008FB8                            
00008FB8                            ; ---------------------------------------------------------------------------
00008FB8                            ; Sprite mappings - explosion
00008FB8                            ; ---------------------------------------------------------------------------
00008FB8 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00008FBC 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00008FC0 0000                       		dc.w byte_8EF7-Map_obj27
00008FC2 01                         byte_8ED0:	dc.b 1
00008FC3 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00008FC8 01                         byte_8ED6:	dc.b 1
00008FC9 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00008FCE 01                         byte_8EDC:	dc.b 1
00008FCF F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00008FD4 04                         byte_8EE2:	dc.b 4
00008FD5 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00008FDA EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00008FDF 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00008FE4 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00008FE9 04                         byte_8EF7:	dc.b 4
00008FEA EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00008FEF EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00008FF4 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00008FF9 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00008FFE                            		even
00008FFE                            ; ---------------------------------------------------------------------------
00008FFE                            ; Sprite mappings - explosion from when	a boss is destroyed
00008FFE                            ; ---------------------------------------------------------------------------
00008FFE FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009000 0000                       		dc.w byte_8F16-Map_obj3F
00009002 0000                       		dc.w byte_8F1C-Map_obj3F
00009004 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009006 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009008 01                         byte_8F16:	dc.b 1
00009009 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000900E 01                         byte_8F1C:	dc.b 1
0000900F F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009014                            		even
00009014                            ; ===========================================================================
00009014                            ; ---------------------------------------------------------------------------
00009014                            ; Object 28 - animals
00009014                            ; ---------------------------------------------------------------------------
00009014                            
00009014                            Obj28:					; XREF: Obj_Index
00009014 7000                       		moveq	#0,d0
00009016 1028 0024                  		move.b	$24(a0),d0
0000901A 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000901E 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009022                            ; ===========================================================================
00009022 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009026 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000902A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000902E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009032 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009036 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000903A 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000903E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009042 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009046 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000904A 0000                       		dc.w loc_92D6-Obj28_Index
0000904C                            
0000904C 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009058                            
00009058 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000905C 0000 0000                  		dc.l Map_obj28
00009060 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009064 0000 0000                  		dc.l Map_obj28a		; mappings address
00009068 FE80 FD00                  		dc.w $FE80, $FD00
0000906C 0000 0000                  		dc.l Map_obj28
00009070 FEC0 FE80                  		dc.w $FEC0, $FE80
00009074 0000 0000                  		dc.l Map_obj28a
00009078 FE40 FD00                  		dc.w $FE40, $FD00
0000907C 0000 0000                  		dc.l Map_obj28b
00009080 FD00 FC00                  		dc.w $FD00, $FC00
00009084 0000 0000                  		dc.l Map_obj28a
00009088 FD80 FC80                  		dc.w $FD80, $FC80
0000908C 0000 0000                  		dc.l Map_obj28b
00009090                            
00009090 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000090A0 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000090B0 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000090BC                            
000090BC 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000090D0 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000090E4 0000 0000                  		dc.l Map_obj28b
000090E8                            
000090E8 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000090FA 0565 05B3                  		dc.w $565, $5B3
000090FE                            ; ===========================================================================
000090FE                            
000090FE                            Obj28_Ending:				; XREF: Obj28_Index
000090FE 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009102 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009106 7000                       		moveq	#0,d0
00009108 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000910C D040                       		add.w	d0,d0		; multiply d0 by 2
0000910E 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009112 0440 0014                  		subi.w	#$14,d0
00009116 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000911C D040                       		add.w	d0,d0
0000911E 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009124 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009128 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000912E 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009134 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000913A 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009140 117C 000C 0016             		move.b	#$C,$16(a0)
00009146 117C 0004 0001             		move.b	#4,1(a0)
0000914C 08E8 0000 0001             		bset	#0,1(a0)
00009152 117C 0006 0018             		move.b	#6,$18(a0)
00009158 117C 0008 0019             		move.b	#8,$19(a0)
0000915E 117C 0007 001E             		move.b	#7,$1E(a0)
00009164 6000 0000                  		bra.w	DisplaySprite
00009168                            ; ===========================================================================
00009168                            
00009168                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009168 5428 0024                  		addq.b	#2,$24(a0)
0000916C 6100 9846                  		bsr.w	RandomNumber
00009170 0240 0001                  		andi.w	#1,d0
00009174 7200                       		moveq	#0,d1
00009176 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000917A D241                       		add.w	d1,d1
0000917C D240                       		add.w	d0,d1
0000917E 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009182 1031 1000                  		move.b	(a1,d1.w),d0
00009186 1140 0030                  		move.b	d0,$30(a0)
0000918A E748                       		lsl.w	#3,d0
0000918C 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009190 D2C0                       		adda.w	d0,a1
00009192 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009196 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000919A 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000919E 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000091A4 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000091AA 6700                       		beq.s	loc_90C0	; if yes, branch
000091AC 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000091B2                            
000091B2                            loc_90C0:
000091B2 117C 000C 0016             		move.b	#$C,$16(a0)
000091B8 117C 0004 0001             		move.b	#4,1(a0)
000091BE 08E8 0000 0001             		bset	#0,1(a0)
000091C4 117C 0006 0018             		move.b	#6,$18(a0)
000091CA 117C 0008 0019             		move.b	#8,$19(a0)
000091D0 117C 0007 001E             		move.b	#7,$1E(a0)
000091D6 117C 0002 001A             		move.b	#2,$1A(a0)
000091DC 317C FC00 0012             		move.w	#-$400,$12(a0)
000091E2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000091E6 6600                       		bne.s	loc_911C
000091E8 6100 0000                  		bsr.w	SingleObjLoad
000091EC 6600                       		bne.s	Obj28_Display
000091EE 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000091F2 3368 0008 0008             		move.w	8(a0),8(a1)
000091F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000091FE 3028 003E                  		move.w	$3E(a0),d0
00009202 E248                       		lsr.w	#1,d0
00009204 1340 001A                  		move.b	d0,$1A(a1)
00009208                            
00009208                            Obj28_Display:
00009208 6000 0000                  		bra.w	DisplaySprite
0000920C                            ; ===========================================================================
0000920C                            
0000920C                            loc_911C:
0000920C 117C 0012 0024             		move.b	#$12,$24(a0)
00009212 4268 0010                  		clr.w	$10(a0)
00009216 6000 0000                  		bra.w	DisplaySprite
0000921A                            ; ===========================================================================
0000921A                            
0000921A                            loc_912A:				; XREF: Obj28_Index
0000921A 4A28 0001                  		tst.b	1(a0)
0000921E 6A00 0000                  		bpl.w	DeleteObject
00009222 6100 0000                  		bsr.w	ObjectFall
00009226 4A68 0012                  		tst.w	$12(a0)
0000922A 6B00                       		bmi.s	loc_9180
0000922C 4EB9 0000 0000             		jsr	ObjHitFloor
00009232 4A41                       		tst.w	d1
00009234 6A00                       		bpl.s	loc_9180
00009236 D368 000C                  		add.w	d1,$C(a0)
0000923A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009240 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009246 117C 0001 001A             		move.b	#1,$1A(a0)
0000924C 1028 0030                  		move.b	$30(a0),d0
00009250 D000                       		add.b	d0,d0
00009252 5800                       		addq.b	#4,d0
00009254 1140 0024                  		move.b	d0,$24(a0)
00009258 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000925C 6700                       		beq.s	loc_9180
0000925E 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009264 6700                       		beq.s	loc_9180
00009266 4468 0010                  		neg.w	$10(a0)
0000926A 0868 0000 0001             		bchg	#0,1(a0)
00009270                            
00009270                            loc_9180:
00009270 6000 0000                  		bra.w	DisplaySprite
00009274                            ; ===========================================================================
00009274                            
00009274                            loc_9184:				; XREF: Obj28_Index
00009274 6100 0000                  		bsr.w	ObjectFall
00009278 117C 0001 001A             		move.b	#1,$1A(a0)
0000927E 4A68 0012                  		tst.w	$12(a0)
00009282 6B00                       		bmi.s	loc_91AE
00009284 117C 0000 001A             		move.b	#0,$1A(a0)
0000928A 4EB9 0000 0000             		jsr	ObjHitFloor
00009290 4A41                       		tst.w	d1
00009292 6A00                       		bpl.s	loc_91AE
00009294 D368 000C                  		add.w	d1,$C(a0)
00009298 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000929E                            
0000929E                            loc_91AE:
0000929E 4A28 0028                  		tst.b	$28(a0)
000092A2 6600                       		bne.s	loc_9224
000092A4 4A28 0001                  		tst.b	1(a0)
000092A8 6A00 0000                  		bpl.w	DeleteObject
000092AC 6000 0000                  		bra.w	DisplaySprite
000092B0                            ; ===========================================================================
000092B0                            
000092B0                            loc_91C0:				; XREF: Obj28_Index
000092B0 6100 0000                  		bsr.w	SpeedToPos
000092B4 0668 0018 0012             		addi.w	#$18,$12(a0)
000092BA 4A68 0012                  		tst.w	$12(a0)
000092BE 6B00                       		bmi.s	loc_91FC
000092C0 4EB9 0000 0000             		jsr	ObjHitFloor
000092C6 4A41                       		tst.w	d1
000092C8 6A00                       		bpl.s	loc_91FC
000092CA D368 000C                  		add.w	d1,$C(a0)
000092CE 3168 0034 0012             		move.w	$34(a0),$12(a0)
000092D4 4A28 0028                  		tst.b	$28(a0)
000092D8 6700                       		beq.s	loc_91FC
000092DA 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000092E0 6700                       		beq.s	loc_91FC
000092E2 4468 0010                  		neg.w	$10(a0)
000092E6 0868 0000 0001             		bchg	#0,1(a0)
000092EC                            
000092EC                            loc_91FC:
000092EC 5328 001E                  		subq.b	#1,$1E(a0)
000092F0 6A00                       		bpl.s	loc_9212
000092F2 117C 0001 001E             		move.b	#1,$1E(a0)
000092F8 5228 001A                  		addq.b	#1,$1A(a0)
000092FC 0228 0001 001A             		andi.b	#1,$1A(a0)
00009302                            
00009302                            loc_9212:
00009302 4A28 0028                  		tst.b	$28(a0)
00009306 6600                       		bne.s	loc_9224
00009308 4A28 0001                  		tst.b	1(a0)
0000930C 6A00 0000                  		bpl.w	DeleteObject
00009310 6000 0000                  		bra.w	DisplaySprite
00009314                            ; ===========================================================================
00009314                            
00009314                            loc_9224:				; XREF: Obj28_Index
00009314 3028 0008                  		move.w	8(a0),d0
00009318 9078 D008                  		sub.w	($FFFFD008).w,d0
0000931C 6500                       		bcs.s	loc_923C
0000931E 0440 0180                  		subi.w	#$180,d0
00009322 6A00                       		bpl.s	loc_923C
00009324 4A28 0001                  		tst.b	1(a0)
00009328 6A00 0000                  		bpl.w	DeleteObject
0000932C                            
0000932C                            loc_923C:
0000932C 6000 0000                  		bra.w	DisplaySprite
00009330                            ; ===========================================================================
00009330                            
00009330                            loc_9240:				; XREF: Obj28_Index
00009330 4A28 0001                  		tst.b	1(a0)
00009334 6A00 0000                  		bpl.w	DeleteObject
00009338 5368 0036                  		subq.w	#1,$36(a0)
0000933C 6600 0000                  		bne.w	loc_925C
00009340 117C 0002 0024             		move.b	#2,$24(a0)
00009346 117C 0003 0018             		move.b	#3,$18(a0)
0000934C                            
0000934C                            loc_925C:
0000934C 6000 0000                  		bra.w	DisplaySprite
00009350                            ; ===========================================================================
00009350                            
00009350                            loc_9260:				; XREF: Obj28_Index
00009350 6100 0000                  		bsr.w	sub_9404
00009354 6400                       		bcc.s	loc_927C
00009356 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000935C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009362 117C 000E 0024             		move.b	#$E,$24(a0)
00009368 6000 FF46                  		bra.w	loc_91C0
0000936C                            ; ===========================================================================
0000936C                            
0000936C                            loc_927C:
0000936C 6000 FFA6                  		bra.w	loc_9224
00009370                            ; ===========================================================================
00009370                            
00009370                            loc_9280:				; XREF: Obj28_Index
00009370 6100 0000                  		bsr.w	sub_9404
00009374 6A00                       		bpl.s	loc_92B6
00009376 4268 0010                  		clr.w	$10(a0)
0000937A 4268 0032                  		clr.w	$32(a0)
0000937E 6100 0000                  		bsr.w	SpeedToPos
00009382 0668 0018 0012             		addi.w	#$18,$12(a0)
00009388 6100 0000                  		bsr.w	loc_93C4
0000938C 6100 0000                  		bsr.w	loc_93EC
00009390 5328 001E                  		subq.b	#1,$1E(a0)
00009394 6A00                       		bpl.s	loc_92B6
00009396 117C 0001 001E             		move.b	#1,$1E(a0)
0000939C 5228 001A                  		addq.b	#1,$1A(a0)
000093A0 0228 0001 001A             		andi.b	#1,$1A(a0)
000093A6                            
000093A6                            loc_92B6:
000093A6 6000 FF6C                  		bra.w	loc_9224
000093AA                            ; ===========================================================================
000093AA                            
000093AA                            loc_92BA:				; XREF: Obj28_Index
000093AA 6100 0000                  		bsr.w	sub_9404
000093AE 6A00                       		bpl.s	loc_9310
000093B0 3168 0032 0010             		move.w	$32(a0),$10(a0)
000093B6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000093BC 117C 0004 0024             		move.b	#4,$24(a0)
000093C2 6000 FEB0                  		bra.w	loc_9184
000093C6                            ; ===========================================================================
000093C6                            
000093C6                            loc_92D6:				; XREF: Obj28_Index
000093C6 6100 0000                  		bsr.w	ObjectFall
000093CA 117C 0001 001A             		move.b	#1,$1A(a0)
000093D0 4A68 0012                  		tst.w	$12(a0)
000093D4 6B00                       		bmi.s	loc_9310
000093D6 117C 0000 001A             		move.b	#0,$1A(a0)
000093DC 4EB9 0000 0000             		jsr	ObjHitFloor
000093E2 4A41                       		tst.w	d1
000093E4 6A00                       		bpl.s	loc_9310
000093E6 4628 0029                  		not.b	$29(a0)
000093EA 6600                       		bne.s	loc_9306
000093EC 4468 0010                  		neg.w	$10(a0)
000093F0 0868 0000 0001             		bchg	#0,1(a0)
000093F6                            
000093F6                            loc_9306:
000093F6 D368 000C                  		add.w	d1,$C(a0)
000093FA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009400                            
00009400                            loc_9310:
00009400 6000 FF12                  		bra.w	loc_9224
00009404                            ; ===========================================================================
00009404                            
00009404                            loc_9314:				; XREF: Obj28_Index
00009404 6100 0000                  		bsr.w	sub_9404
00009408 6A00                       		bpl.s	loc_932E
0000940A 4268 0010                  		clr.w	$10(a0)
0000940E 4268 0032                  		clr.w	$32(a0)
00009412 6100 0000                  		bsr.w	ObjectFall
00009416 6100 0000                  		bsr.w	loc_93C4
0000941A 6100 0000                  		bsr.w	loc_93EC
0000941E                            
0000941E                            loc_932E:
0000941E 6000 FEF4                  		bra.w	loc_9224
00009422                            ; ===========================================================================
00009422                            
00009422                            loc_9332:				; XREF: Obj28_Index
00009422 6100 0000                  		bsr.w	sub_9404
00009426 6A00                       		bpl.s	loc_936C
00009428 6100 0000                  		bsr.w	ObjectFall
0000942C 117C 0001 001A             		move.b	#1,$1A(a0)
00009432 4A68 0012                  		tst.w	$12(a0)
00009436 6B00                       		bmi.s	loc_936C
00009438 117C 0000 001A             		move.b	#0,$1A(a0)
0000943E 4EB9 0000 0000             		jsr	ObjHitFloor
00009444 4A41                       		tst.w	d1
00009446 6A00                       		bpl.s	loc_936C
00009448 4468 0010                  		neg.w	$10(a0)
0000944C 0868 0000 0001             		bchg	#0,1(a0)
00009452 D368 000C                  		add.w	d1,$C(a0)
00009456 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000945C                            
0000945C                            loc_936C:
0000945C 6000 FEB6                  		bra.w	loc_9224
00009460                            ; ===========================================================================
00009460                            
00009460                            loc_9370:				; XREF: Obj28_Index
00009460 6100 0000                  		bsr.w	sub_9404
00009464 6A00                       		bpl.s	loc_93C0
00009466 6100 0000                  		bsr.w	SpeedToPos
0000946A 0668 0018 0012             		addi.w	#$18,$12(a0)
00009470 4A68 0012                  		tst.w	$12(a0)
00009474 6B00                       		bmi.s	loc_93AA
00009476 4EB9 0000 0000             		jsr	ObjHitFloor
0000947C 4A41                       		tst.w	d1
0000947E 6A00                       		bpl.s	loc_93AA
00009480 4628 0029                  		not.b	$29(a0)
00009484 6600                       		bne.s	loc_93A0
00009486 4468 0010                  		neg.w	$10(a0)
0000948A 0868 0000 0001             		bchg	#0,1(a0)
00009490                            
00009490                            loc_93A0:
00009490 D368 000C                  		add.w	d1,$C(a0)
00009494 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000949A                            
0000949A                            loc_93AA:
0000949A 5328 001E                  		subq.b	#1,$1E(a0)
0000949E 6A00                       		bpl.s	loc_93C0
000094A0 117C 0001 001E             		move.b	#1,$1E(a0)
000094A6 5228 001A                  		addq.b	#1,$1A(a0)
000094AA 0228 0001 001A             		andi.b	#1,$1A(a0)
000094B0                            
000094B0                            loc_93C0:
000094B0 6000 FE62                  		bra.w	loc_9224
000094B4                            ; ===========================================================================
000094B4                            
000094B4                            loc_93C4:
000094B4 117C 0001 001A             		move.b	#1,$1A(a0)
000094BA 4A68 0012                  		tst.w	$12(a0)
000094BE 6B00                       		bmi.s	locret_93EA
000094C0 117C 0000 001A             		move.b	#0,$1A(a0)
000094C6 4EB9 0000 0000             		jsr	ObjHitFloor
000094CC 4A41                       		tst.w	d1
000094CE 6A00                       		bpl.s	locret_93EA
000094D0 D368 000C                  		add.w	d1,$C(a0)
000094D4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000094DA                            
000094DA                            locret_93EA:
000094DA 4E75                       		rts	
000094DC                            ; ===========================================================================
000094DC                            
000094DC                            loc_93EC:
000094DC 08E8 0000 0001             		bset	#0,1(a0)
000094E2 3028 0008                  		move.w	8(a0),d0
000094E6 9078 D008                  		sub.w	($FFFFD008).w,d0
000094EA 6400                       		bcc.s	locret_9402
000094EC 08A8 0000 0001             		bclr	#0,1(a0)
000094F2                            
000094F2                            locret_9402:
000094F2 4E75                       		rts	
000094F4                            
000094F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094F4                            
000094F4                            
000094F4                            sub_9404:
000094F4 3038 D008                  		move.w	($FFFFD008).w,d0
000094F8 9068 0008                  		sub.w	8(a0),d0
000094FC 0440 00B8                  		subi.w	#$B8,d0
00009500 4E75                       		rts	
00009502                            ; End of function sub_9404
00009502                            
00009502                            ; ===========================================================================
00009502                            ; ---------------------------------------------------------------------------
00009502                            ; Object 29 - points that appear when you destroy something
00009502                            ; ---------------------------------------------------------------------------
00009502                            
00009502                            Obj29:					; XREF: Obj_Index
00009502 7000                       		moveq	#0,d0
00009504 1028 0024                  		move.b	$24(a0),d0
00009508 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000950C 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009510 6000 0000                  		bra.w	DisplaySprite
00009514                            ; ===========================================================================
00009514 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009516 0000                       		dc.w Obj29_Slower-Obj29_Index
00009518                            ; ===========================================================================
00009518                            
00009518                            Obj29_Main:				; XREF: Obj29_Index
00009518 5428 0024                  		addq.b	#2,$24(a0)
0000951C 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009524 317C 2797 0002             		move.w	#$2797,2(a0)
0000952A 117C 0004 0001             		move.b	#4,1(a0)
00009530 117C 0001 0018             		move.b	#1,$18(a0)
00009536 117C 0008 0019             		move.b	#8,$19(a0)
0000953C 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009542                            
00009542                            Obj29_Slower:				; XREF: Obj29_Index
00009542 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009546 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000954A 6100 0000                  		bsr.w	SpeedToPos
0000954E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009554 4E75                       		rts	
00009556                            ; ===========================================================================
00009556                            ; ---------------------------------------------------------------------------
00009556                            ; Sprite mappings - animals
00009556                            ; ---------------------------------------------------------------------------
00009556                            Map_obj28:
00009556                            	include "_maps\obj28.asm"
00009556                            ; ---------------------------------------------------------------------------
00009556                            ; Sprite mappings - animals
00009556                            ; ---------------------------------------------------------------------------
00009556 0000                       		dc.w byte_9472-Map_obj28
00009558 0000                       		dc.w byte_9478-Map_obj28
0000955A 0000                       		dc.w byte_946C-Map_obj28
0000955C 01                         byte_946C:	dc.b 1
0000955D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009562 01                         byte_9472:	dc.b 1
00009563 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009568 01                         byte_9478:	dc.b 1
00009569 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000956E                            		even
0000956E                            		even
0000956E                            
0000956E                            Map_obj28a:
0000956E                            	include "_maps\obj28a.asm"
0000956E                            ; ---------------------------------------------------------------------------
0000956E                            ; Sprite mappings - animals
0000956E                            ; ---------------------------------------------------------------------------
0000956E 0000                       		dc.w byte_948A-Map_obj28a
00009570 0000                       		dc.w byte_9490-Map_obj28a
00009572 0000                       		dc.w byte_9484-Map_obj28a
00009574 01                         byte_9484:	dc.b 1
00009575 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000957A 01                         byte_948A:	dc.b 1
0000957B FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009580 01                         byte_9490:	dc.b 1
00009581 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009586                            		even
00009586                            		even
00009586                            
00009586                            Map_obj28b:
00009586                            	include "_maps\obj28b.asm"
00009586                            ; ---------------------------------------------------------------------------
00009586                            ; Sprite mappings - animals
00009586                            ; ---------------------------------------------------------------------------
00009586 0000                       		dc.w byte_94A2-Map_obj28b
00009588 0000                       		dc.w byte_94A8-Map_obj28b
0000958A 0000                       		dc.w byte_949C-Map_obj28b
0000958C 01                         byte_949C:	dc.b 1
0000958D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009592 01                         byte_94A2:	dc.b 1
00009593 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009598 01                         byte_94A8:	dc.b 1
00009599 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000959E                            		even
0000959E                            		even
0000959E                            
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            ; Sprite mappings - points that	appear when you	destroy	something
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            Map_obj29:
0000959E                            	include "_maps\obj29.asm"
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            ; Sprite mappings - points that	appear when you	destroy	something
0000959E                            ; ---------------------------------------------------------------------------
0000959E 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
000095A2 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
000095A6 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
000095AA 0000                       		dc.w byte_94E5-Map_obj29
000095AC 01                         byte_94BC:	dc.b 1
000095AD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
000095B2 01                         byte_94C2:	dc.b 1
000095B3 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
000095B8 01                         byte_94C8:	dc.b 1
000095B9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000095BE 01                         byte_94CE:	dc.b 1
000095BF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000095C4 01                         byte_94D4:	dc.b 1
000095C5 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
000095CA 02                         byte_94DA:	dc.b 2
000095CB FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
000095D0 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000095D5 02                         byte_94E5:	dc.b 2
000095D6 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
000095DB FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
000095E0                            		even
000095E0                            		even
000095E0                            
000095E0                            ; ===========================================================================
000095E0                            ; ---------------------------------------------------------------------------
000095E0                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
000095E0                            ; ---------------------------------------------------------------------------
000095E0                            
000095E0                            Obj1F:					; XREF: Obj_Index
000095E0 7000                       		moveq	#0,d0
000095E2 1028 0024                  		move.b	$24(a0),d0
000095E6 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
000095EA 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
000095EE                            ; ===========================================================================
000095EE 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
000095F0 0000                       		dc.w Obj1F_Action-Obj1F_Index
000095F2 0000                       		dc.w Obj1F_Delete-Obj1F_Index
000095F4 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
000095F6 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
000095F8                            ; ===========================================================================
000095F8                            
000095F8                            Obj1F_Main:				; XREF: Obj1F_Index
000095F8 117C 0010 0016             		move.b	#$10,$16(a0)
000095FE 117C 0008 0017             		move.b	#8,$17(a0)
00009604 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000960C 317C 0400 0002             		move.w	#$400,2(a0)
00009612 117C 0004 0001             		move.b	#4,1(a0)
00009618 117C 0003 0018             		move.b	#3,$18(a0)
0000961E 117C 0006 0020             		move.b	#6,$20(a0)
00009624 117C 0015 0019             		move.b	#$15,$19(a0)
0000962A 6100 0000                  		bsr.w	ObjectFall
0000962E 4EB9 0000 0000             		jsr	ObjHitFloor
00009634 4A41                       		tst.w	d1
00009636 6A00                       		bpl.s	locret_955A
00009638 D368 000C                  		add.w	d1,$C(a0)
0000963C 1143 0026                  		move.b	d3,$26(a0)
00009640 317C 0000 0012             		move.w	#0,$12(a0)
00009646 5428 0024                  		addq.b	#2,$24(a0)
0000964A                            
0000964A                            locret_955A:
0000964A 4E75                       		rts	
0000964C                            ; ===========================================================================
0000964C                            
0000964C                            Obj1F_Action:				; XREF: Obj1F_Index
0000964C 7000                       		moveq	#0,d0
0000964E 1028 0025                  		move.b	$25(a0),d0
00009652 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009656 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000965A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009660 6100 0000                  		bsr.w	AnimateSprite
00009664 6000 0000                  		bra.w	MarkObjGone
00009668                            ; ===========================================================================
00009668 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000966A 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000966C                            ; ===========================================================================
0000966C                            
0000966C                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000966C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009670 6A00                       		bpl.s	locret_95B6
00009672 4A28 0001                  		tst.b	1(a0)
00009676 6A00                       		bpl.s	Obj1F_Move
00009678 0868 0001 0032             		bchg	#1,$32(a0)
0000967E 6600                       		bne.s	Obj1F_MakeFire
00009680                            
00009680                            Obj1F_Move:
00009680 5428 0025                  		addq.b	#2,$25(a0)
00009684 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000968A 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009690 6100 0000                  		bsr.w	Obj1F_SetAni
00009694 5600                       		addq.b	#3,d0
00009696 1140 001C                  		move.b	d0,$1C(a0)
0000969A 0868 0000 0022             		bchg	#0,$22(a0)
000096A0 6600                       		bne.s	locret_95B6
000096A2 4468 0010                  		neg.w	$10(a0)		; change direction
000096A6                            
000096A6                            locret_95B6:
000096A6 4E75                       		rts	
000096A8                            ; ===========================================================================
000096A8                            
000096A8                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
000096A8 317C 003B 0030             		move.w	#$3B,$30(a0)
000096AE 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
000096B4 6100 0000                  		bsr.w	SingleObjLoad
000096B8 6600                       		bne.s	Obj1F_MakeFire2
000096BA 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
000096BE 137C 0006 0024             		move.b	#6,$24(a1)
000096C4 3368 0008 0008             		move.w	8(a0),8(a1)
000096CA 0469 0010 0008             		subi.w	#$10,8(a1)
000096D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000096D6 337C FF00 0010             		move.w	#-$100,$10(a1)
000096DC                            
000096DC                            Obj1F_MakeFire2:
000096DC 6100 0000                  		bsr.w	SingleObjLoad
000096E0 6600                       		bne.s	locret_9618
000096E2 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
000096E6 137C 0006 0024             		move.b	#6,$24(a1)
000096EC 3368 0008 0008             		move.w	8(a0),8(a1)
000096F2 0669 0010 0008             		addi.w	#$10,8(a1)
000096F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000096FE 337C 0100 0010             		move.w	#$100,$10(a1)
00009704                            
00009704                            locret_9618:
00009704 4E75                       		rts	
00009706                            ; ===========================================================================
00009706                            
00009706                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009706 5368 0030                  		subq.w	#1,$30(a0)
0000970A 6B00                       		bmi.s	loc_966E
0000970C 6100 0000                  		bsr.w	SpeedToPos
00009710 0868 0000 0032             		bchg	#0,$32(a0)
00009716 6600                       		bne.s	loc_9654
00009718 3628 0008                  		move.w	8(a0),d3
0000971C 0643 0010                  		addi.w	#$10,d3
00009720 0828 0000 0022             		btst	#0,$22(a0)
00009726 6700                       		beq.s	loc_9640
00009728 0443 0020                  		subi.w	#$20,d3
0000972C                            
0000972C                            loc_9640:
0000972C 4EB9 0000 0000             		jsr	ObjHitFloor2
00009732 0C41 FFF8                  		cmpi.w	#-8,d1
00009736 6D00                       		blt.s	loc_966E
00009738 0C41 000C                  		cmpi.w	#$C,d1
0000973C 6C00                       		bge.s	loc_966E
0000973E 4E75                       		rts	
00009740                            ; ===========================================================================
00009740                            
00009740                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009740 4EB9 0000 0000             		jsr	ObjHitFloor
00009746 D368 000C                  		add.w	d1,$C(a0)
0000974A 1143 0026                  		move.b	d3,$26(a0)
0000974E 6100 0000                  		bsr.w	Obj1F_SetAni
00009752 5600                       		addq.b	#3,d0
00009754 1140 001C                  		move.b	d0,$1C(a0)
00009758 4E75                       		rts	
0000975A                            ; ===========================================================================
0000975A                            
0000975A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000975A 5528 0025                  		subq.b	#2,$25(a0)
0000975E 317C 003B 0030             		move.w	#59,$30(a0)
00009764 317C 0000 0010             		move.w	#0,$10(a0)
0000976A 6100 0000                  		bsr.w	Obj1F_SetAni
0000976E 1140 001C                  		move.b	d0,$1C(a0)
00009772 4E75                       		rts	
00009774                            ; ---------------------------------------------------------------------------
00009774                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009774                            ; ---------------------------------------------------------------------------
00009774                            
00009774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009774                            
00009774                            
00009774                            Obj1F_SetAni:				; XREF: loc_966E
00009774 7000                       		moveq	#0,d0
00009776 1628 0026                  		move.b	$26(a0),d3
0000977A 6B00                       		bmi.s	loc_96A4
0000977C 0C03 0006                  		cmpi.b	#6,d3
00009780 6500                       		bcs.s	locret_96A2
00009782 7001                       		moveq	#1,d0
00009784 0828 0000 0022             		btst	#0,$22(a0)
0000978A 6600                       		bne.s	locret_96A2
0000978C 7002                       		moveq	#2,d0
0000978E                            
0000978E                            locret_96A2:
0000978E 4E75                       		rts	
00009790                            ; ===========================================================================
00009790                            
00009790                            loc_96A4:				; XREF: Obj1F_SetAni
00009790 0C03 00FA                  		cmpi.b	#-6,d3
00009794 6200                       		bhi.s	locret_96B6
00009796 7002                       		moveq	#2,d0
00009798 0828 0000 0022             		btst	#0,$22(a0)
0000979E 6600                       		bne.s	locret_96B6
000097A0 7001                       		moveq	#1,d0
000097A2                            
000097A2                            locret_96B6:
000097A2 4E75                       		rts	
000097A4                            ; End of function Obj1F_SetAni
000097A4                            
000097A4                            ; ===========================================================================
000097A4                            
000097A4                            Obj1F_Delete:				; XREF: Obj1F_Index
000097A4 6100 0000                  		bsr.w	DeleteObject
000097A8 4E75                       		rts	
000097AA                            ; ===========================================================================
000097AA                            ; ---------------------------------------------------------------------------
000097AA                            ; Sub-object - missile that the	Crabmeat throws
000097AA                            ; ---------------------------------------------------------------------------
000097AA                            
000097AA                            Obj1F_BallMain:				; XREF: Obj1F_Index
000097AA 5428 0024                  		addq.b	#2,$24(a0)
000097AE 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000097B6 317C 0400 0002             		move.w	#$400,2(a0)
000097BC 117C 0004 0001             		move.b	#4,1(a0)
000097C2 117C 0003 0018             		move.b	#3,$18(a0)
000097C8 117C 0087 0020             		move.b	#$87,$20(a0)
000097CE 117C 0008 0019             		move.b	#8,$19(a0)
000097D4 317C FC00 0012             		move.w	#-$400,$12(a0)
000097DA 117C 0007 001C             		move.b	#7,$1C(a0)
000097E0                            
000097E0                            Obj1F_BallMove:				; XREF: Obj1F_Index
000097E0 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000097E6 6100 0000                  		bsr.w	AnimateSprite
000097EA 6100 0000                  		bsr.w	ObjectFall
000097EE 6100 0000                  		bsr.w	DisplaySprite
000097F2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000097F6 0640 00E0                  		addi.w	#$E0,d0
000097FA B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
000097FE 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009800 4E75                       		rts	
00009802                            ; ===========================================================================
00009802                            
00009802                            Obj1F_Delete2:
00009802 6000 0000                  		bra.w	DeleteObject
00009806                            ; ===========================================================================
00009806                            Ani_obj1F:
00009806                            	include "_anim\obj1F.asm"
00009806                            ; ---------------------------------------------------------------------------
00009806                            ; Animation script - Crabmeat enemy
00009806                            ; ---------------------------------------------------------------------------
00009806 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000980C 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009812 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009816 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000981A 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000981E 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009822 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009828 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000982E 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009834 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009838 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000983C                            		even
0000983C                            		even
0000983C                            
0000983C                            ; ---------------------------------------------------------------------------
0000983C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000983C                            ; ---------------------------------------------------------------------------
0000983C                            Map_obj1F:
0000983C                            	include "_maps\obj1F.asm"
0000983C                            ; ---------------------------------------------------------------------------
0000983C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000983C                            ; ---------------------------------------------------------------------------
0000983C 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
00009840 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009844 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00009848 0000                       		dc.w byte_97D7-Map_obj1F
0000984A 04                         byte_975E:	dc.b 4
0000984B F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
00009850 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009855 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000985A 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000985F 04                         byte_9773:	dc.b 4
00009860 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009865 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000986A 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000986F 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009874 04                         byte_9788:	dc.b 4
00009875 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000987A EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000987F FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009884 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009889 04                         byte_979D:	dc.b 4
0000988A EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000988F EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009894 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009899 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000989E 06                         byte_97B2:	dc.b 6
0000989F F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
000098A4 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
000098A9 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
000098AE F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
000098B3 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
000098B8 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
000098BD 01                         byte_97D1:	dc.b 1
000098BE F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
000098C3 01                         byte_97D7:	dc.b 1
000098C4 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
000098CA 00                         		even
000098CA 00                         		even
000098CA                            
000098CA                            ; ===========================================================================
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            
000098CA                            Obj22:					; XREF: Obj_Index
000098CA 7000                       		moveq	#0,d0
000098CC 1028 0024                  		move.b	$24(a0),d0
000098D0 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
000098D4 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
000098D8                            ; ===========================================================================
000098D8 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
000098DA 0000                       		dc.w Obj22_Action-Obj22_Index
000098DC 0000                       		dc.w Obj22_Delete-Obj22_Index
000098DE                            ; ===========================================================================
000098DE                            
000098DE                            Obj22_Main:				; XREF: Obj22_Index
000098DE 5428 0024                  		addq.b	#2,$24(a0)
000098E2 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
000098EA 317C 0444 0002             		move.w	#$444,2(a0)
000098F0 117C 0004 0001             		move.b	#4,1(a0)
000098F6 117C 0003 0018             		move.b	#3,$18(a0)
000098FC 117C 0008 0020             		move.b	#8,$20(a0)
00009902 117C 0018 0019             		move.b	#$18,$19(a0)
00009908                            
00009908                            Obj22_Action:				; XREF: Obj22_Index
00009908 7000                       		moveq	#0,d0
0000990A 1028 0025                  		move.b	$25(a0),d0
0000990E 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009912 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009916 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000991C 6100 0000                  		bsr.w	AnimateSprite
00009920 6000 0000                  		bra.w	MarkObjGone
00009924                            ; ===========================================================================
00009924 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009926 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009928                            ; ===========================================================================
00009928                            
00009928                            Obj22_Move:				; XREF: Obj22_Index2
00009928 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000992C 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000992E 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009934 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009936 5428 0025                  		addq.b	#2,$25(a0)
0000993A 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009940 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009946 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000994C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009952 6600                       		bne.s	locret_986C	; if not, branch
00009954 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009958                            
00009958                            locret_986C:
00009958 4E75                       		rts	
0000995A                            ; ===========================================================================
0000995A                            
0000995A                            Obj22_Fire:				; XREF: Obj22_Move
0000995A 6100 0000                  		bsr.w	SingleObjLoad
0000995E 6600                       		bne.s	locret_98D0
00009960 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009964 3368 0008 0008             		move.w	8(a0),8(a1)
0000996A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009970 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009976 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000997C 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009982 303C 0018                  		move.w	#$18,d0
00009986 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000998C 6600                       		bne.s	loc_98AA	; if not, branch
0000998E 4440                       		neg.w	d0
00009990 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009994                            
00009994                            loc_98AA:
00009994 D169 0008                  		add.w	d0,8(a1)
00009998 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000999E 337C 000E 0032             		move.w	#$E,$32(a1)
000099A4 2348 003C                  		move.l	a0,$3C(a1)
000099A8 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
000099AE 317C 003B 0032             		move.w	#$3B,$32(a0)
000099B4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
000099BA                            
000099BA                            locret_98D0:
000099BA 4E75                       		rts	
000099BC                            ; ===========================================================================
000099BC                            
000099BC                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
000099BC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000099C0 6B00                       		bmi.s	Obj22_ChgDir
000099C2 6100 0000                  		bsr.w	SpeedToPos
000099C6 4A28 0034                  		tst.b	$34(a0)
000099CA 6600                       		bne.s	locret_992A
000099CC 3038 D008                  		move.w	($FFFFD008).w,d0
000099D0 9068 0008                  		sub.w	8(a0),d0
000099D4 6A00                       		bpl.s	Obj22_SetNrSonic
000099D6 4440                       		neg.w	d0
000099D8                            
000099D8                            Obj22_SetNrSonic:
000099D8 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
000099DC 6400                       		bcc.s	locret_992A	; if not, branch
000099DE 4A28 0001                  		tst.b	1(a0)
000099E2 6A00                       		bpl.s	locret_992A
000099E4 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
000099EA 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
000099F0 6000                       		bra.s	Obj22_Stop
000099F2                            ; ===========================================================================
000099F2                            
000099F2                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
000099F2 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
000099F8 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
000099FE 317C 003B 0032             		move.w	#59,$32(a0)
00009A04                            
00009A04                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009A04 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009A08 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009A0E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009A14                            
00009A14                            locret_992A:
00009A14 4E75                       		rts	
00009A16                            ; ===========================================================================
00009A16                            
00009A16                            Obj22_Delete:				; XREF: Obj22_Index
00009A16 6100 0000                  		bsr.w	DeleteObject
00009A1A 4E75                       		rts	
00009A1C                            ; ===========================================================================
00009A1C                            ; ---------------------------------------------------------------------------
00009A1C                            ; Object 23 - missile that Buzz	Bomber throws
00009A1C                            ; ---------------------------------------------------------------------------
00009A1C                            
00009A1C                            Obj23:					; XREF: Obj_Index
00009A1C 7000                       		moveq	#0,d0
00009A1E 1028 0024                  		move.b	$24(a0),d0
00009A22 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009A26 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009A2A                            ; ===========================================================================
00009A2A 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009A2C 0000                       		dc.w Obj23_Animate-Obj23_Index
00009A2E 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009A30 0000                       		dc.w Obj23_Delete-Obj23_Index
00009A32 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009A34                            ; ===========================================================================
00009A34                            
00009A34                            Obj23_Main:				; XREF: Obj23_Index
00009A34 5368 0032                  		subq.w	#1,$32(a0)
00009A38 6A00                       		bpl.s	Obj23_ChkCancel
00009A3A 5428 0024                  		addq.b	#2,$24(a0)
00009A3E 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009A46 317C 2444 0002             		move.w	#$2444,2(a0)
00009A4C 117C 0004 0001             		move.b	#4,1(a0)
00009A52 117C 0003 0018             		move.b	#3,$18(a0)
00009A58 117C 0008 0019             		move.b	#8,$19(a0)
00009A5E 0228 0003 0022             		andi.b	#3,$22(a0)
00009A64 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009A68 6700                       		beq.s	Obj23_Animate	; if not, branch
00009A6A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009A70 117C 0087 0020             		move.b	#$87,$20(a0)
00009A76 117C 0001 001C             		move.b	#1,$1C(a0)
00009A7C 6000                       		bra.s	Obj23_Animate2
00009A7E                            ; ===========================================================================
00009A7E                            
00009A7E                            Obj23_Animate:				; XREF: Obj23_Index
00009A7E 6100                       		bsr.s	Obj23_ChkCancel
00009A80 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009A86 6100 0000                  		bsr.w	AnimateSprite
00009A8A 6000 0000                  		bra.w	DisplaySprite
00009A8E                            ; ---------------------------------------------------------------------------
00009A8E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009A8E                            ; destroyed, and if it has, then cancel	the missile
00009A8E                            ; ---------------------------------------------------------------------------
00009A8E                            
00009A8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A8E                            
00009A8E                            
00009A8E                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009A8E 2268 003C                  		movea.l	$3C(a0),a1
00009A92 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009A96 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009A98 4E75                       		rts	
00009A9A                            ; End of function Obj23_ChkCancel
00009A9A                            
00009A9A                            ; ===========================================================================
00009A9A                            
00009A9A                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009A9A 0828 0007 0022             		btst	#7,$22(a0)
00009AA0 6600                       		bne.s	Obj23_Explode
00009AA2 117C 0087 0020             		move.b	#$87,$20(a0)
00009AA8 117C 0001 001C             		move.b	#1,$1C(a0)
00009AAE 6100 0000                  		bsr.w	SpeedToPos
00009AB2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009AB8 6100 0000                  		bsr.w	AnimateSprite
00009ABC 6100 0000                  		bsr.w	DisplaySprite
00009AC0 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009AC4 0640 00E0                  		addi.w	#$E0,d0
00009AC8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009ACC 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009ACE 4E75                       		rts	
00009AD0                            ; ===========================================================================
00009AD0                            
00009AD0                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009AD0 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009AD4 117C 0000 0024             		move.b	#0,$24(a0)
00009ADA 6000 F30A                  		bra.w	Obj24
00009ADE                            ; ===========================================================================
00009ADE                            
00009ADE                            Obj23_Delete:				; XREF: Obj23_Index
00009ADE 6100 0000                  		bsr.w	DeleteObject
00009AE2 4E75                       		rts	
00009AE4                            ; ===========================================================================
00009AE4                            
00009AE4                            Obj23_FromNewt:				; XREF: Obj23_Index
00009AE4 4A28 0001                  		tst.b	1(a0)
00009AE8 6AF4                       		bpl.s	Obj23_Delete
00009AEA 6100 0000                  		bsr.w	SpeedToPos
00009AEE                            
00009AEE                            Obj23_Animate2:				; XREF: Obj23_Main
00009AEE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009AF4 6100 0000                  		bsr.w	AnimateSprite
00009AF8 6100 0000                  		bsr.w	DisplaySprite
00009AFC 4E75                       		rts	
00009AFE                            ; ===========================================================================
00009AFE                            Ani_obj22:
00009AFE                            	include "_anim\obj22.asm"
00009AFE                            ; ---------------------------------------------------------------------------
00009AFE                            ; Animation script - Buzz Bomber enemy
00009AFE                            ; ---------------------------------------------------------------------------
00009AFE 0000                       		dc.w byte_9A1E-Ani_obj22
00009B00 0000                       		dc.w byte_9A22-Ani_obj22
00009B02 0000                       		dc.w byte_9A26-Ani_obj22
00009B04 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009B08 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009B0C 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009B10                            		even
00009B10                            		even
00009B10                            
00009B10                            Ani_obj23:
00009B10                            	include "_anim\obj23.asm"
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            ; Animation script - missile that Buzz Bomber throws
00009B10                            ; ---------------------------------------------------------------------------
00009B10 0000                       		dc.w byte_9A2E-Ani_obj23
00009B12 0000                       		dc.w byte_9A32-Ani_obj23
00009B14 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009B18 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009B1C                            		even
00009B1C                            		even
00009B1C                            
00009B1C                            ; ---------------------------------------------------------------------------
00009B1C                            ; Sprite mappings - Buzz Bomber	enemy
00009B1C                            ; ---------------------------------------------------------------------------
00009B1C                            Map_obj22:
00009B1C                            	include "_maps\obj22.asm"
00009B1C                            ; ---------------------------------------------------------------------------
00009B1C                            ; Sprite mappings - Buzz Bomber	enemy
00009B1C                            ; ---------------------------------------------------------------------------
00009B1C 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
00009B20 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
00009B24 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
00009B28 06                         byte_9A42:	dc.b 6
00009B29 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009B2E F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009B33 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009B38 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009B3D F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009B42 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009B47 06                         byte_9A61:	dc.b 6
00009B48 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009B4D F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009B52 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009B57 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009B5C F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009B61 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009B66 07                         byte_9A80:	dc.b 7
00009B67 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
00009B6C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009B71 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009B76 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009B7B 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009B80 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009B85 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009B8A 07                         byte_9AA4:	dc.b 7
00009B8B 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
00009B90 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009B95 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009B9A 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009B9F 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009BA4 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009BA9 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009BAE 06                         byte_9AC8:	dc.b 6
00009BAF F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00009BB4 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00009BB9 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00009BBE 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00009BC3 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009BC8 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009BCD 04                         byte_9AE7:	dc.b 4
00009BCE F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00009BD3 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00009BD8 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00009BDD 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00009BE2 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009BE7 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009BEC                            		even
00009BEC                            		even
00009BEC                            
00009BEC                            ; ---------------------------------------------------------------------------
00009BEC                            ; Sprite mappings - missile that Buzz Bomber throws
00009BEC                            ; ---------------------------------------------------------------------------
00009BEC                            Map_obj23:
00009BEC                            	include "_maps\obj23.asm"
00009BEC                            ; ---------------------------------------------------------------------------
00009BEC                            ; Sprite mappings - missile that Buzz Bomber throws
00009BEC                            ; ---------------------------------------------------------------------------
00009BEC 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009BF0 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009BF4 01                         byte_9B0E:	dc.b 1
00009BF5 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009BFA 01                         byte_9B14:	dc.b 1
00009BFB F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009C00 01                         byte_9B1A:	dc.b 1
00009C01 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009C06 01                         byte_9B20:	dc.b 1
00009C07 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009C0C                            		even
00009C0C                            		even
00009C0C                            
00009C0C                            ; ===========================================================================
00009C0C                            ; ---------------------------------------------------------------------------
00009C0C                            ; Object 25 - rings
00009C0C                            ; ---------------------------------------------------------------------------
00009C0C                            
00009C0C                            Obj25:					; XREF: Obj_Index
00009C0C 7000                       		moveq	#0,d0
00009C0E 1028 0024                  		move.b	$24(a0),d0
00009C12 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009C16 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009C1A                            ; ===========================================================================
00009C1A 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009C1C 0000                       		dc.w Obj25_Animate-Obj25_Index
00009C1E 0000                       		dc.w Obj25_Collect-Obj25_Index
00009C20 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009C22 0000                       		dc.w Obj25_Delete-Obj25_Index
00009C24                            ; ---------------------------------------------------------------------------
00009C24                            ; Distances between rings (format: horizontal, vertical)
00009C24                            ; ---------------------------------------------------------------------------
00009C24 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009C26 1800                       		dc.b $18, 0		; horizontal normal
00009C28 2000                       		dc.b $20, 0		; horizontal wide
00009C2A 0010                       		dc.b 0,	$10		; vertical tight
00009C2C 0018                       		dc.b 0,	$18		; vertical normal
00009C2E 0020                       		dc.b 0,	$20		; vertical wide
00009C30 1010                       		dc.b $10, $10		; diagonal
00009C32 1818                       		dc.b $18, $18
00009C34 2020                       		dc.b $20, $20
00009C36 F010                       		dc.b $F0, $10
00009C38 E818                       		dc.b $E8, $18
00009C3A E020                       		dc.b $E0, $20
00009C3C 1008                       		dc.b $10, 8
00009C3E 1810                       		dc.b $18, $10
00009C40 F008                       		dc.b $F0, 8
00009C42 E810                       		dc.b $E8, $10
00009C44                            ; ===========================================================================
00009C44                            
00009C44                            Obj25_Main:				; XREF: Obj25_Index
00009C44 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009C48 7000                       		moveq	#0,d0
00009C4A 1028 0023                  		move.b	$23(a0),d0
00009C4E 45F2 0002                  		lea	2(a2,d0.w),a2
00009C52 1812                       		move.b	(a2),d4
00009C54 1228 0028                  		move.b	$28(a0),d1
00009C58 1001                       		move.b	d1,d0
00009C5A 0241 0007                  		andi.w	#7,d1
00009C5E 0C41 0007                  		cmpi.w	#7,d1
00009C62 6600                       		bne.s	loc_9B80
00009C64 7206                       		moveq	#6,d1
00009C66                            
00009C66                            loc_9B80:
00009C66 4841                       		swap	d1
00009C68 323C 0000                  		move.w	#0,d1
00009C6C E808                       		lsr.b	#4,d0
00009C6E D040                       		add.w	d0,d0
00009C70 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009C74 4885                       		ext.w	d5
00009C76 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009C7A 4886                       		ext.w	d6
00009C7C 2248                       		movea.l	a0,a1
00009C7E 3428 0008                  		move.w	8(a0),d2
00009C82 3628 000C                  		move.w	$C(a0),d3
00009C86 E20C                       		lsr.b	#1,d4
00009C88 6500                       		bcs.s	loc_9C02
00009C8A 0892 0007                  		bclr	#7,(a2)
00009C8E 6000                       		bra.s	loc_9BBA
00009C90                            ; ===========================================================================
00009C90                            
00009C90                            Obj25_MakeRings:
00009C90 4841                       		swap	d1
00009C92 E20C                       		lsr.b	#1,d4
00009C94 6500                       		bcs.s	loc_9C02
00009C96 0892 0007                  		bclr	#7,(a2)
00009C9A 6100 0000                  		bsr.w	SingleObjLoad
00009C9E 6600                       		bne.s	loc_9C0E
00009CA0                            
00009CA0                            loc_9BBA:				; XREF: Obj25_Main
00009CA0 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00009CA4 5429 0024                  		addq.b	#2,$24(a1)
00009CA8 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00009CAC 3368 0008 0032             		move.w	8(a0),$32(a1)
00009CB2 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00009CB6 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009CBE 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009CC4 137C 0004 0001             		move.b	#4,1(a1)
00009CCA 137C 0002 0018             		move.b	#2,$18(a1)
00009CD0 137C 0047 0020             		move.b	#$47,$20(a1)
00009CD6 137C 0008 0019             		move.b	#8,$19(a1)
00009CDC 1368 0023 0023             		move.b	$23(a0),$23(a1)
00009CE2 1341 0034                  		move.b	d1,$34(a1)
00009CE6                            
00009CE6                            loc_9C02:
00009CE6 5241                       		addq.w	#1,d1
00009CE8 D445                       		add.w	d5,d2		; add ring spacing value to d2
00009CEA D646                       		add.w	d6,d3		; add ring spacing value to d3
00009CEC 4841                       		swap	d1
00009CEE 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
00009CF2                            
00009CF2                            loc_9C0E:
00009CF2 0812 0000                  		btst	#0,(a2)
00009CF6 6600 0000                  		bne.w	DeleteObject
00009CFA                            
00009CFA                            Obj25_Animate:				; XREF: Obj25_Index
00009CFA 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
00009D00 6100 0000                  		bsr.w	DisplaySprite
00009D04 3028 0032                  		move.w	$32(a0),d0
00009D08 0240 FF80                  		andi.w	#$FF80,d0
00009D0C 3238 F700                  		move.w	($FFFFF700).w,d1
00009D10 0441 0080                  		subi.w	#$80,d1
00009D14 0241 FF80                  		andi.w	#$FF80,d1
00009D18 9041                       		sub.w	d1,d0
00009D1A 0C40 0280                  		cmpi.w	#$280,d0
00009D1E 6200                       		bhi.s	Obj25_Delete
00009D20 4E75                       		rts	
00009D22                            ; ===========================================================================
00009D22                            
00009D22                            Obj25_Collect:				; XREF: Obj25_Index
00009D22 5428 0024                  		addq.b	#2,$24(a0)
00009D26 117C 0000 0020             		move.b	#0,$20(a0)
00009D2C 117C 0001 0018             		move.b	#1,$18(a0)
00009D32 6100 0000                  		bsr.w	CollectRing
00009D36 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009D3A 7000                       		moveq	#0,d0
00009D3C 1028 0023                  		move.b	$23(a0),d0
00009D40 1228 0034                  		move.b	$34(a0),d1
00009D44 03F2 0002                  		bset	d1,2(a2,d0.w)
00009D48                            
00009D48                            Obj25_Sparkle:				; XREF: Obj25_Index
00009D48 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009D4E 6100 0000                  		bsr.w	AnimateSprite
00009D52 6000 0000                  		bra.w	DisplaySprite
00009D56                            ; ===========================================================================
00009D56                            
00009D56                            Obj25_Delete:				; XREF: Obj25_Index
00009D56 6000 0000                  		bra.w	DeleteObject
00009D5A                            
00009D5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D5A                            
00009D5A                            
00009D5A                            CollectRing:				; XREF: Obj25_Collect
00009D5A 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
00009D5E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
00009D64 303C 00B5                  		move.w	#$B5,d0		; play ring sound
00009D68 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
00009D6E 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009D70 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
00009D76 6700                       		beq.s	loc_9CA4
00009D78 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
00009D7E 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009D80 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
00009D86 6600                       		bne.s	Obj25_PlaySnd
00009D88                            
00009D88                            loc_9CA4:
00009D88 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00009D8C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00009D90 303C 0088                  		move.w	#$88,d0		; play extra life music
00009D94                            
00009D94                            Obj25_PlaySnd:
00009D94 4EF9 0000 139C             		jmp	(PlaySound_Special).l
00009D9A                            ; End of function CollectRing
00009D9A                            
00009D9A                            ; ===========================================================================
00009D9A                            ; ---------------------------------------------------------------------------
00009D9A                            ; Object 37 - rings flying out of Sonic	when he's hit
00009D9A                            ; ---------------------------------------------------------------------------
00009D9A                            
00009D9A                            Obj37:					; XREF: Obj_Index
00009D9A 7000                       		moveq	#0,d0
00009D9C 1028 0024                  		move.b	$24(a0),d0
00009DA0 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00009DA4 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
00009DA8                            ; ===========================================================================
00009DA8 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00009DAA 0000                       		dc.w Obj37_Bounce-Obj37_Index
00009DAC 0000                       		dc.w Obj37_Collect-Obj37_Index
00009DAE 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00009DB0 0000                       		dc.w Obj37_Delete-Obj37_Index
00009DB2                            ; ===========================================================================
00009DB2                            
00009DB2                            Obj37_CountRings:			; XREF: Obj37_Index
00009DB2 2248                       		movea.l	a0,a1
00009DB4 7A00                       		moveq	#0,d5
00009DB6 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
00009DBA 7020                       		moveq	#32,d0
00009DBC BA40                       		cmp.w	d0,d5		; do you have 32 or more?
00009DBE 6500                       		bcs.s	loc_9CDE	; if not, branch
00009DC0 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
00009DC2                            
00009DC2                            loc_9CDE:
00009DC2 5345                       		subq.w	#1,d5
00009DC4 383C 0288                  		move.w	#$288,d4
00009DC8 6000                       		bra.s	Obj37_MakeRings
00009DCA                            ; ===========================================================================
00009DCA                            
00009DCA                            Obj37_Loop:
00009DCA 6100 0000                  		bsr.w	SingleObjLoad
00009DCE 6600 0000                  		bne.w	Obj37_ResetCounter
00009DD2                            
00009DD2                            Obj37_MakeRings:			; XREF: Obj37_CountRings
00009DD2 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
00009DD6 5429 0024                  		addq.b	#2,$24(a1)
00009DDA 137C 0008 0016             		move.b	#8,$16(a1)
00009DE0 137C 0008 0017             		move.b	#8,$17(a1)
00009DE6 3368 0008 0008             		move.w	8(a0),8(a1)
00009DEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009DF2 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009DFA 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009E00 137C 0004 0001             		move.b	#4,1(a1)
00009E06 137C 0003 0018             		move.b	#3,$18(a1)
00009E0C 137C 0047 0020             		move.b	#$47,$20(a1)
00009E12 137C 0008 0019             		move.b	#8,$19(a1)
00009E18 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
00009E1E 4A44                       		tst.w	d4
00009E20 6B00                       		bmi.s	loc_9D62
00009E22 3004                       		move.w	d4,d0
00009E24 6100 8BB4                  		bsr.w	CalcSine
00009E28 3404                       		move.w	d4,d2
00009E2A E04A                       		lsr.w	#8,d2
00009E2C E560                       		asl.w	d2,d0
00009E2E E561                       		asl.w	d2,d1
00009E30 3400                       		move.w	d0,d2
00009E32 3601                       		move.w	d1,d3
00009E34 0604 0010                  		addi.b	#$10,d4
00009E38 6400                       		bcc.s	loc_9D62
00009E3A 0444 0080                  		subi.w	#$80,d4
00009E3E 6400                       		bcc.s	loc_9D62
00009E40 383C 0288                  		move.w	#$288,d4
00009E44                            
00009E44                            loc_9D62:
00009E44 3342 0010                  		move.w	d2,$10(a1)
00009E48 3343 0012                  		move.w	d3,$12(a1)
00009E4C 4442                       		neg.w	d2
00009E4E 4444                       		neg.w	d4
00009E50 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00009E54                            
00009E54                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00009E54 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00009E5A 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00009E60 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
00009E66 303C 00C6                  		move.w	#$C6,d0
00009E6A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play ring loss sound
00009E70                            
00009E70                            Obj37_Bounce:				; XREF: Obj37_Index
00009E70 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
00009E76 6100 0000                  		bsr.w	SpeedToPos
00009E7A 0668 0018 0012             		addi.w	#$18,$12(a0)
00009E80 6B00                       		bmi.s	Obj37_ChkDel
00009E82 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00009E86 D007                       		add.b	d7,d0
00009E88 0200 0003                  		andi.b	#3,d0
00009E8C 6600                       		bne.s	Obj37_ChkDel
00009E8E 4EB9 0000 0000             		jsr	ObjHitFloor
00009E94 4A41                       		tst.w	d1
00009E96 6A00                       		bpl.s	Obj37_ChkDel
00009E98 D368 000C                  		add.w	d1,$C(a0)
00009E9C 3028 0012                  		move.w	$12(a0),d0
00009EA0 E440                       		asr.w	#2,d0
00009EA2 9168 0012                  		sub.w	d0,$12(a0)
00009EA6 4468 0012                  		neg.w	$12(a0)
00009EAA                            
00009EAA                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00009EAA 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00009EAE 6700                       		beq.s	Obj37_Delete
00009EB0 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009EB4 0640 00E0                  		addi.w	#$E0,d0
00009EB8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
00009EBC 6500                       		bcs.s	Obj37_Delete	; if yes, branch
00009EBE 6000 0000                  		bra.w	DisplaySprite
00009EC2                            ; ===========================================================================
00009EC2                            
00009EC2                            Obj37_Collect:				; XREF: Obj37_Index
00009EC2 5428 0024                  		addq.b	#2,$24(a0)
00009EC6 117C 0000 0020             		move.b	#0,$20(a0)
00009ECC 117C 0001 0018             		move.b	#1,$18(a0)
00009ED2 6100 FE86                  		bsr.w	CollectRing
00009ED6                            
00009ED6                            Obj37_Sparkle:				; XREF: Obj37_Index
00009ED6 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009EDC 6100 0000                  		bsr.w	AnimateSprite
00009EE0 6000 0000                  		bra.w	DisplaySprite
00009EE4                            ; ===========================================================================
00009EE4                            
00009EE4                            Obj37_Delete:				; XREF: Obj37_Index
00009EE4 6000 0000                  		bra.w	DeleteObject
00009EE8                            ; ===========================================================================
00009EE8                            ; ---------------------------------------------------------------------------
00009EE8                            ; Object 4B - giant ring for entry to special stage
00009EE8                            ; ---------------------------------------------------------------------------
00009EE8                            
00009EE8                            Obj4B:					; XREF: Obj_Index
00009EE8 7000                       		moveq	#0,d0
00009EEA 1028 0024                  		move.b	$24(a0),d0
00009EEE 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00009EF2 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00009EF6                            ; ===========================================================================
00009EF6 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00009EF8 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00009EFA 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00009EFC 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00009EFE                            ; ===========================================================================
00009EFE                            
00009EFE                            Obj4B_Main:				; XREF: Obj4B_Index
00009EFE 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00009F06 317C 2400 0002             		move.w	#$2400,2(a0)
00009F0C 0028 0004 0001             		ori.b	#4,1(a0)
00009F12 117C 0040 0019             		move.b	#$40,$19(a0)
00009F18 4A28 0001                  		tst.b	1(a0)
00009F1C 6A00                       		bpl.s	Obj4B_Animate
00009F1E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
00009F24 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
00009F28 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00009F2E 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
00009F30 4E75                       		rts	
00009F32                            ; ===========================================================================
00009F32                            
00009F32                            Obj4B_Okay:				; XREF: Obj4B_Main
00009F32 5428 0024                  		addq.b	#2,$24(a0)
00009F36 117C 0002 0018             		move.b	#2,$18(a0)
00009F3C 117C 0052 0020             		move.b	#$52,$20(a0)
00009F42 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00009F48                            
00009F48                            Obj4B_Animate:				; XREF: Obj4B_Index
00009F48 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
00009F4E 3028 0008                  		move.w	8(a0),d0
00009F52 0240 FF80                  		andi.w	#$FF80,d0
00009F56 3238 F700                  		move.w	($FFFFF700).w,d1
00009F5A 0441 0080                  		subi.w	#$80,d1
00009F5E 0241 FF80                  		andi.w	#$FF80,d1
00009F62 9041                       		sub.w	d1,d0
00009F64 0C40 0280                  		cmpi.w	#$280,d0
00009F68 6200 0000                  		bhi.w	DeleteObject
00009F6C 6000 0000                  		bra.w	DisplaySprite
00009F70                            ; ===========================================================================
00009F70                            
00009F70                            Obj4B_Collect:				; XREF: Obj4B_Index
00009F70 5528 0024                  		subq.b	#2,$24(a0)
00009F74 117C 0000 0020             		move.b	#0,$20(a0)
00009F7A 6100 0000                  		bsr.w	SingleObjLoad
00009F7E 6600 0000                  		bne.w	Obj4B_PlaySnd
00009F82 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00009F86 3368 0008 0008             		move.w	8(a0),8(a1)
00009F8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F92 2348 003C                  		move.l	a0,$3C(a1)
00009F96 3038 D008                  		move.w	($FFFFD008).w,d0
00009F9A B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00009F9E 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00009FA0 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00009FA6                            
00009FA6                            Obj4B_PlaySnd:
00009FA6 303C 00C3                  		move.w	#$C3,d0
00009FAA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00009FB0 6096                       		bra.s	Obj4B_Animate
00009FB2                            ; ===========================================================================
00009FB2                            
00009FB2                            Obj4B_Delete:				; XREF: Obj4B_Index
00009FB2 6000 0000                  		bra.w	DeleteObject
00009FB6                            ; ===========================================================================
00009FB6                            ; ---------------------------------------------------------------------------
00009FB6                            ; Object 7C - flash effect when	you collect the	giant ring
00009FB6                            ; ---------------------------------------------------------------------------
00009FB6                            
00009FB6                            Obj7C:					; XREF: Obj_Index
00009FB6 7000                       		moveq	#0,d0
00009FB8 1028 0024                  		move.b	$24(a0),d0
00009FBC 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00009FC0 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00009FC4                            ; ===========================================================================
00009FC4 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00009FC6 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00009FC8 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00009FCA                            ; ===========================================================================
00009FCA                            
00009FCA                            Obj7C_Main:				; XREF: Obj7C_Index
00009FCA 5428 0024                  		addq.b	#2,$24(a0)
00009FCE 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
00009FD6 317C 2462 0002             		move.w	#$2462,2(a0)
00009FDC 0028 0004 0001             		ori.b	#4,1(a0)
00009FE2 117C 0000 0018             		move.b	#0,$18(a0)
00009FE8 117C 0020 0019             		move.b	#$20,$19(a0)
00009FEE 117C 00FF 001A             		move.b	#$FF,$1A(a0)
00009FF4                            
00009FF4                            Obj7C_ChkDel:				; XREF: Obj7C_Index
00009FF4 6100                       		bsr.s	Obj7C_Collect
00009FF6 3028 0008                  		move.w	8(a0),d0
00009FFA 0240 FF80                  		andi.w	#$FF80,d0
00009FFE 3238 F700                  		move.w	($FFFFF700).w,d1
0000A002 0441 0080                  		subi.w	#$80,d1
0000A006 0241 FF80                  		andi.w	#$FF80,d1
0000A00A 9041                       		sub.w	d1,d0
0000A00C 0C40 0280                  		cmpi.w	#$280,d0
0000A010 6200 0000                  		bhi.w	DeleteObject
0000A014 6000 0000                  		bra.w	DisplaySprite
0000A018                            
0000A018                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A018                            
0000A018                            
0000A018                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A018 5328 001E                  		subq.b	#1,$1E(a0)
0000A01C 6A00                       		bpl.s	locret_9F76
0000A01E 117C 0001 001E             		move.b	#1,$1E(a0)
0000A024 5228 001A                  		addq.b	#1,$1A(a0)
0000A028 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A02E 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A030 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A036 6600                       		bne.s	locret_9F76	; if not, branch
0000A038 2268 003C                  		movea.l	$3C(a0),a1
0000A03C 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A042 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A048 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A04E 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A052 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A056                            
0000A056                            locret_9F76:
0000A056 4E75                       		rts	
0000A058                            ; ===========================================================================
0000A058                            
0000A058                            Obj7C_End:				; XREF: Obj7C_Collect
0000A058 5428 0024                  		addq.b	#2,$24(a0)
0000A05C 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A062 588F                       		addq.l	#4,sp
0000A064 4E75                       		rts	
0000A066                            ; End of function Obj7C_Collect
0000A066                            
0000A066                            ; ===========================================================================
0000A066                            
0000A066                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A066 6000 0000                  		bra.w	DeleteObject
0000A06A                            ; ===========================================================================
0000A06A                            Ani_obj25:
0000A06A                            	include "_anim\obj25.asm"
0000A06A                            ; ---------------------------------------------------------------------------
0000A06A                            ; Animation script - ring
0000A06A                            ; ---------------------------------------------------------------------------
0000A06A 0000                       		dc.w byte_9F8C-Ani_obj25
0000A06C 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A072                            		even
0000A072                            		even
0000A072                            
0000A072                            ; ---------------------------------------------------------------------------
0000A072                            ; Sprite mappings - rings
0000A072                            ; ---------------------------------------------------------------------------
0000A072                            Map_obj25:
0000A072                            	include "_maps\obj25.asm"
0000A072                            ; ---------------------------------------------------------------------------
0000A072                            ; Sprite mappings - rings
0000A072                            ; ---------------------------------------------------------------------------
0000A072 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A076 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A07A 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A07E 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A082 01                         byte_9FA2:	dc.b 1
0000A083 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A088 01                         byte_9FA8:	dc.b 1
0000A089 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A08E 01                         byte_9FAE:	dc.b 1
0000A08F F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A094 01                         byte_9FB4:	dc.b 1
0000A095 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A09A 01                         byte_9FBA:	dc.b 1
0000A09B F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A0A0 01                         byte_9FC0:	dc.b 1
0000A0A1 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A0A6 01                         byte_9FC6:	dc.b 1
0000A0A7 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A0AC 01                         byte_9FCC:	dc.b 1
0000A0AD F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A0B2                            		even
0000A0B2                            		even
0000A0B2                            
0000A0B2                            ; ---------------------------------------------------------------------------
0000A0B2                            ; Sprite mappings - giant ring
0000A0B2                            ; ---------------------------------------------------------------------------
0000A0B2                            Map_obj4B:
0000A0B2                            	include "_maps\obj4B.asm"
0000A0B2                            ; ---------------------------------------------------------------------------
0000A0B2                            ; Sprite mappings - giant ring
0000A0B2                            ; ---------------------------------------------------------------------------
0000A0B2 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A0B6 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A0BA 0A                         byte_9FDA:	dc.b $A
0000A0BB E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A0C0 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A0C5 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A0CA E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A0CF F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A0D4 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A0D9 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A0DE 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A0E3 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A0E8 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A0ED 08                         byte_A00D:	dc.b 8
0000A0EE E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A0F3 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A0F8 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A0FD F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A102 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A107 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A10C 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A111 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A116 04                         byte_A036:	dc.b 4
0000A117 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A11C E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A121 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A126 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A12B 08                         byte_A04B:	dc.b 8
0000A12C E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A131 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A136 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A13B F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A140 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A145 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A14A 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A14F 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A154                            		even
0000A154                            		even
0000A154                            
0000A154                            ; ---------------------------------------------------------------------------
0000A154                            ; Sprite mappings - flash effect when you collect the giant ring
0000A154                            ; ---------------------------------------------------------------------------
0000A154                            Map_obj7C:
0000A154                            	include "_maps\obj7C.asm"
0000A154                            ; ---------------------------------------------------------------------------
0000A154                            ; Sprite mappings - flash effect when you collect the giant ring
0000A154                            ; ---------------------------------------------------------------------------
0000A154 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A158 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A15C 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A160 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A164 02                         byte_A084:	dc.b 2
0000A165 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A16A 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A16F 04                         byte_A08F:	dc.b 4
0000A170 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A175 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A17A 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A17F 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A184 04                         byte_A0A4:	dc.b 4
0000A185 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A18A E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A18F 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A194 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A199 04                         byte_A0B9:	dc.b 4
0000A19A E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A19F E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A1A4 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A1A9 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A1AE 04                         byte_A0CE:	dc.b 4
0000A1AF E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A1B4 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A1B9 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A1BE 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A1C3 04                         byte_A0E3:	dc.b 4
0000A1C4 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A1C9 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A1CE 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A1D3 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A1D8 02                         byte_A0F8:	dc.b 2
0000A1D9 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A1DE 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A1E3 04                         byte_A103:	dc.b 4
0000A1E4 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A1E9 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A1EE 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A1F3 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A1F8                            		even
0000A1F8                            		even
0000A1F8                            
0000A1F8                            ; ===========================================================================
0000A1F8                            ; ---------------------------------------------------------------------------
0000A1F8                            ; Object 26 - monitors
0000A1F8                            ; ---------------------------------------------------------------------------
0000A1F8                            
0000A1F8                            Obj26:					; XREF: Obj_Index
0000A1F8 7000                       		moveq	#0,d0
0000A1FA 1028 0024                  		move.b	$24(a0),d0
0000A1FE 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A202 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A206                            ; ===========================================================================
0000A206 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A208 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A20A 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A20C 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A20E 0000                       		dc.w Obj26_Display-Obj26_Index
0000A210                            ; ===========================================================================
0000A210                            
0000A210                            Obj26_Main:				; XREF: Obj26_Index
0000A210 5428 0024                  		addq.b	#2,$24(a0)
0000A214 117C 000E 0016             		move.b	#$E,$16(a0)
0000A21A 117C 000E 0017             		move.b	#$E,$17(a0)
0000A220 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A228 317C 0680 0002             		move.w	#$680,2(a0)
0000A22E 117C 0004 0001             		move.b	#4,1(a0)
0000A234 117C 0003 0018             		move.b	#3,$18(a0)
0000A23A 117C 000F 0019             		move.b	#$F,$19(a0)
0000A240 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A244 7000                       		moveq	#0,d0
0000A246 1028 0023                  		move.b	$23(a0),d0
0000A24A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A250 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A256 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A258 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A25E 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A264 4E75                       		rts	
0000A266                            ; ===========================================================================
0000A266                            
0000A266                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A266 117C 0046 0020             		move.b	#$46,$20(a0)
0000A26C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A272                            
0000A272                            Obj26_Solid:				; XREF: Obj26_Index
0000A272 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A276 6700                       		beq.s	loc_A1EC	; if not, branch
0000A278 5500                       		subq.b	#2,d0
0000A27A 6600                       		bne.s	Obj26_Fall
0000A27C 7200                       		moveq	#0,d1
0000A27E 1228 0019                  		move.b	$19(a0),d1
0000A282 0641 000B                  		addi.w	#$B,d1
0000A286 6100 D43E                  		bsr.w	ExitPlatform
0000A28A 0829 0003 0022             		btst	#3,$22(a1)
0000A290 6600 0000                  		bne.w	loc_A1BC
0000A294 4228 0025                  		clr.b	$25(a0)
0000A298 6000 0000                  		bra.w	Obj26_Animate
0000A29C                            ; ===========================================================================
0000A29C                            
0000A29C                            loc_A1BC:				; XREF: Obj26_Solid
0000A29C 363C 0010                  		move.w	#$10,d3
0000A2A0 3428 0008                  		move.w	8(a0),d2
0000A2A4 6100 D97E                  		bsr.w	MvSonicOnPtfm
0000A2A8 6000 0000                  		bra.w	Obj26_Animate
0000A2AC                            ; ===========================================================================
0000A2AC                            
0000A2AC                            Obj26_Fall:				; XREF: Obj26_Solid
0000A2AC 6100 0000                  		bsr.w	ObjectFall
0000A2B0 4EB9 0000 0000             		jsr	ObjHitFloor
0000A2B6 4A41                       		tst.w	d1
0000A2B8 6A00 0000                  		bpl.w	Obj26_Animate
0000A2BC D368 000C                  		add.w	d1,$C(a0)
0000A2C0 4268 0012                  		clr.w	$12(a0)
0000A2C4 4228 0025                  		clr.b	$25(a0)
0000A2C8 6000 0000                  		bra.w	Obj26_Animate
0000A2CC                            ; ===========================================================================
0000A2CC                            
0000A2CC                            loc_A1EC:				; XREF: Obj26_Solid
0000A2CC 323C 001A                  		move.w	#$1A,d1
0000A2D0 343C 000F                  		move.w	#$F,d2
0000A2D4 6100 0000                  		bsr.w	Obj26_SolidSides
0000A2D8 6700 0000                  		beq.w	loc_A25C
0000A2DC 4A69 0012                  		tst.w	$12(a1)
0000A2E0 6B00                       		bmi.s	loc_A20A
0000A2E2 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A2E8 6700                       		beq.s	loc_A25C	; if yes, branch
0000A2EA                            
0000A2EA                            loc_A20A:
0000A2EA 4A41                       		tst.w	d1
0000A2EC 6A00                       		bpl.s	loc_A220
0000A2EE 9769 000C                  		sub.w	d3,$C(a1)
0000A2F2 6100 D2C0                  		bsr.w	loc_74AE
0000A2F6 117C 0002 0025             		move.b	#2,$25(a0)
0000A2FC 6000 0000                  		bra.w	Obj26_Animate
0000A300                            ; ===========================================================================
0000A300                            
0000A300                            loc_A220:
0000A300 4A40                       		tst.w	d0
0000A302 6700 0000                  		beq.w	loc_A246
0000A306 6B00                       		bmi.s	loc_A230
0000A308 4A69 0010                  		tst.w	$10(a1)
0000A30C 6B00                       		bmi.s	loc_A246
0000A30E 6000                       		bra.s	loc_A236
0000A310                            ; ===========================================================================
0000A310                            
0000A310                            loc_A230:
0000A310 4A69 0010                  		tst.w	$10(a1)
0000A314 6A00                       		bpl.s	loc_A246
0000A316                            
0000A316                            loc_A236:
0000A316 9169 0008                  		sub.w	d0,8(a1)
0000A31A 337C 0000 0014             		move.w	#0,$14(a1)
0000A320 337C 0000 0010             		move.w	#0,$10(a1)
0000A326                            
0000A326                            loc_A246:
0000A326 0829 0001 0022             		btst	#1,$22(a1)
0000A32C 6600                       		bne.s	loc_A26A
0000A32E 08E9 0005 0022             		bset	#5,$22(a1)
0000A334 08E8 0005 0022             		bset	#5,$22(a0)
0000A33A 6000                       		bra.s	Obj26_Animate
0000A33C                            ; ===========================================================================
0000A33C                            
0000A33C                            loc_A25C:
0000A33C 0828 0005 0022             		btst	#5,$22(a0)
0000A342 6700                       		beq.s	Obj26_Animate
0000A344 337C 0001 001C             		move.w	#1,$1C(a1)
0000A34A                            
0000A34A                            loc_A26A:
0000A34A 08A8 0005 0022             		bclr	#5,$22(a0)
0000A350 08A9 0005 0022             		bclr	#5,$22(a1)
0000A356                            
0000A356                            Obj26_Animate:				; XREF: Obj26_Index
0000A356 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A35C 6100 0000                  		bsr.w	AnimateSprite
0000A360                            
0000A360                            Obj26_Display:				; XREF: Obj26_Index
0000A360 6100 0000                  		bsr.w	DisplaySprite
0000A364 3028 0008                  		move.w	8(a0),d0
0000A368 0240 FF80                  		andi.w	#$FF80,d0
0000A36C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A370 0441 0080                  		subi.w	#$80,d1
0000A374 0241 FF80                  		andi.w	#$FF80,d1
0000A378 9041                       		sub.w	d1,d0
0000A37A 0C40 0280                  		cmpi.w	#$280,d0
0000A37E 6200 0000                  		bhi.w	DeleteObject
0000A382 4E75                       		rts	
0000A384                            ; ===========================================================================
0000A384                            
0000A384                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A384 5428 0024                  		addq.b	#2,$24(a0)
0000A388 117C 0000 0020             		move.b	#0,$20(a0)
0000A38E 6100 0000                  		bsr.w	SingleObjLoad
0000A392 6600                       		bne.s	Obj26_Explode
0000A394 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A398 3368 0008 0008             		move.w	8(a0),8(a1)
0000A39E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3A4 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A3AA                            
0000A3AA                            Obj26_Explode:
0000A3AA 6100 0000                  		bsr.w	SingleObjLoad
0000A3AE 6600                       		bne.s	Obj26_SetBroken
0000A3B0 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000A3B4 5429 0024                  		addq.b	#2,$24(a1)
0000A3B8 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3C4                            
0000A3C4                            Obj26_SetBroken:
0000A3C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A3C8 7000                       		moveq	#0,d0
0000A3CA 1028 0023                  		move.b	$23(a0),d0
0000A3CE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A3D4 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A3DA 6000 0000                  		bra.w	DisplaySprite
0000A3DE                            ; ===========================================================================
0000A3DE                            ; ---------------------------------------------------------------------------
0000A3DE                            ; Object 2E - contents of monitors
0000A3DE                            ; ---------------------------------------------------------------------------
0000A3DE                            
0000A3DE                            Obj2E:					; XREF: Obj_Index
0000A3DE 7000                       		moveq	#0,d0
0000A3E0 1028 0024                  		move.b	$24(a0),d0
0000A3E4 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A3E8 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A3EC 6000 0000                  		bra.w	DisplaySprite
0000A3F0                            ; ===========================================================================
0000A3F0 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A3F2 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A3F4 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A3F6                            ; ===========================================================================
0000A3F6                            
0000A3F6                            Obj2E_Main:				; XREF: Obj2E_Index
0000A3F6 5428 0024                  		addq.b	#2,$24(a0)
0000A3FA 317C 0680 0002             		move.w	#$680,2(a0)
0000A400 117C 0024 0001             		move.b	#$24,1(a0)
0000A406 117C 0003 0018             		move.b	#3,$18(a0)
0000A40C 117C 0008 0019             		move.b	#8,$19(a0)
0000A412 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A418 7000                       		moveq	#0,d0
0000A41A 1028 001C                  		move.b	$1C(a0),d0
0000A41E 5400                       		addq.b	#2,d0
0000A420 1140 001A                  		move.b	d0,$1A(a0)
0000A424 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A42A D000                       		add.b	d0,d0
0000A42C D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A430 5249                       		addq.w	#1,a1
0000A432 2149 0004                  		move.l	a1,4(a0)
0000A436                            
0000A436                            Obj2E_Move:				; XREF: Obj2E_Index
0000A436 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A43A 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A43E 6100 0000                  		bsr.w	SpeedToPos
0000A442 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A448 4E75                       		rts	
0000A44A                            ; ===========================================================================
0000A44A                            
0000A44A                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A44A 5428 0024                  		addq.b	#2,$24(a0)
0000A44E 317C 001D 001E             		move.w	#29,$1E(a0)
0000A454 1028 001C                  		move.b	$1C(a0),d0
0000A458 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A45C 6600                       		bne.s	Obj2E_ChkSonic
0000A45E 4E75                       		rts			; Eggman monitor does nothing
0000A460                            ; ===========================================================================
0000A460                            
0000A460                            Obj2E_ChkSonic:
0000A460 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A464 6600                       		bne.s	Obj2E_ChkShoes
0000A466                            
0000A466                            ExtraLife:
0000A466 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A46A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A46E 303C 0088                  		move.w	#$88,d0
0000A472 4EF9 0000 1396             		jmp	(PlaySound).l	; play extra life music
0000A478                            ; ===========================================================================
0000A478                            
0000A478                            Obj2E_ChkShoes:
0000A478 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A47C 6600                       		bne.s	Obj2E_ChkShield
0000A47E 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A484 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A48A 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A490 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A496 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A49C 303C 00E2                  		move.w	#$E2,d0
0000A4A0 4EF9 0000 1396             		jmp	(PlaySound).l	; Speed	up the music
0000A4A6                            ; ===========================================================================
0000A4A6                            
0000A4A6                            Obj2E_ChkShield:
0000A4A6 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A4AA 6600                       		bne.s	Obj2E_ChkInvinc
0000A4AC 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A4B2 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A4B8 303C 00AF                  		move.w	#$AF,d0
0000A4BC 4EF9 0000 1396             		jmp	(PlaySound).l	; play shield sound
0000A4C2                            ; ===========================================================================
0000A4C2                            
0000A4C2                            Obj2E_ChkInvinc:
0000A4C2 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A4C6 6600                       		bne.s	Obj2E_ChkRings
0000A4C8 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A4CE 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A4D4 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A4DA 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A4E0 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A4E6 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A4EC 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A4F2 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A4F8 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A4FE 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A504 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A508 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A50A 303C 0087                  		move.w	#$87,d0
0000A50E 4EF9 0000 1396             		jmp	(PlaySound).l	; play invincibility music
0000A514                            ; ===========================================================================
0000A514                            
0000A514                            Obj2E_NoMusic:
0000A514 4E75                       		rts	
0000A516                            ; ===========================================================================
0000A516                            
0000A516                            Obj2E_ChkRings:
0000A516 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A51A 6600                       		bne.s	Obj2E_ChkS
0000A51C 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A522 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A528 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A52E 6500                       		bcs.s	Obj2E_RingSound
0000A530 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A536 6700 FF2E                  		beq.w	ExtraLife
0000A53A 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A540 6500                       		bcs.s	Obj2E_RingSound
0000A542 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A548 6700 FF1C                  		beq.w	ExtraLife
0000A54C                            
0000A54C                            Obj2E_RingSound:
0000A54C 303C 00B5                  		move.w	#$B5,d0
0000A550 4EF9 0000 1396             		jmp	(PlaySound).l	; play ring sound
0000A556                            ; ===========================================================================
0000A556                            
0000A556                            Obj2E_ChkS:
0000A556 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A55A 6600                       		bne.s	Obj2E_ChkEnd
0000A55C                            		; nop	
0000A55C 7201                       		moveq	#1,d1
0000A55E B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A562                            
0000A562                            Obj2E_ChkEnd:
0000A562 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A564                            ; ===========================================================================
0000A564                            
0000A564                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A564 5368 001E                  		subq.w	#1,$1E(a0)
0000A568 6B00 0000                  		bmi.w	DeleteObject
0000A56C 4E75                       		rts	
0000A56E                            ; ---------------------------------------------------------------------------
0000A56E                            ; Subroutine to	make the sides of a monitor solid
0000A56E                            ; ---------------------------------------------------------------------------
0000A56E                            
0000A56E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A56E                            
0000A56E                            
0000A56E                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A56E 43F8 D000                  		lea	($FFFFD000).w,a1
0000A572 3029 0008                  		move.w	8(a1),d0
0000A576 9068 0008                  		sub.w	8(a0),d0
0000A57A D041                       		add.w	d1,d0
0000A57C 6B00                       		bmi.s	loc_A4E6
0000A57E 3601                       		move.w	d1,d3
0000A580 D643                       		add.w	d3,d3
0000A582 B043                       		cmp.w	d3,d0
0000A584 6200                       		bhi.s	loc_A4E6
0000A586 1629 0016                  		move.b	$16(a1),d3
0000A58A 4883                       		ext.w	d3
0000A58C D443                       		add.w	d3,d2
0000A58E 3629 000C                  		move.w	$C(a1),d3
0000A592 9668 000C                  		sub.w	$C(a0),d3
0000A596 D642                       		add.w	d2,d3
0000A598 6B00                       		bmi.s	loc_A4E6
0000A59A D442                       		add.w	d2,d2
0000A59C B642                       		cmp.w	d2,d3
0000A59E 6400                       		bcc.s	loc_A4E6
0000A5A0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A5A4 6B00                       		bmi.s	loc_A4E6
0000A5A6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A5AC 6400                       		bcc.s	loc_A4E6
0000A5AE 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A5B2 6600                       		bne.s	loc_A4E6
0000A5B4 B240                       		cmp.w	d0,d1
0000A5B6 6400                       		bcc.s	loc_A4DC
0000A5B8 D241                       		add.w	d1,d1
0000A5BA 9041                       		sub.w	d1,d0
0000A5BC                            
0000A5BC                            loc_A4DC:
0000A5BC 0C43 0010                  		cmpi.w	#$10,d3
0000A5C0 6500                       		bcs.s	loc_A4EA
0000A5C2                            
0000A5C2                            loc_A4E2:
0000A5C2 7201                       		moveq	#1,d1
0000A5C4 4E75                       		rts	
0000A5C6                            ; ===========================================================================
0000A5C6                            
0000A5C6                            loc_A4E6:
0000A5C6 7200                       		moveq	#0,d1
0000A5C8 4E75                       		rts	
0000A5CA                            ; ===========================================================================
0000A5CA                            
0000A5CA                            loc_A4EA:
0000A5CA 7200                       		moveq	#0,d1
0000A5CC 1228 0019                  		move.b	$19(a0),d1
0000A5D0 5841                       		addq.w	#4,d1
0000A5D2 3401                       		move.w	d1,d2
0000A5D4 D442                       		add.w	d2,d2
0000A5D6 D269 0008                  		add.w	8(a1),d1
0000A5DA 9268 0008                  		sub.w	8(a0),d1
0000A5DE 6BE2                       		bmi.s	loc_A4E2
0000A5E0 B242                       		cmp.w	d2,d1
0000A5E2 64DE                       		bcc.s	loc_A4E2
0000A5E4 72FF                       		moveq	#-1,d1
0000A5E6 4E75                       		rts	
0000A5E8                            ; End of function Obj26_SolidSides
0000A5E8                            
0000A5E8                            ; ===========================================================================
0000A5E8                            Ani_obj26:
0000A5E8                            	include "_anim\obj26.asm"
0000A5E8                            ; ---------------------------------------------------------------------------
0000A5E8                            ; Animation script - monitors
0000A5E8                            ; ---------------------------------------------------------------------------
0000A5E8 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A5EE 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A5F4 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A5FA 0000                       		dc.w byte_A582-Ani_obj26
0000A5FC 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A602 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A60E 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A61A 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A626 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A632 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A63E 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A64A 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A656 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A662 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A66A                            		even
0000A66A                            		even
0000A66A                            
0000A66A                            ; ---------------------------------------------------------------------------
0000A66A                            ; Sprite mappings - monitors
0000A66A                            ; ---------------------------------------------------------------------------
0000A66A                            Map_obj26:
0000A66A                            	include "_maps\obj26.asm"
0000A66A                            ; ---------------------------------------------------------------------------
0000A66A                            ; Sprite mappings - monitors
0000A66A                            ; ---------------------------------------------------------------------------
0000A66A 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000A66E 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000A672 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000A676 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000A67A 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000A67E 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000A682 01                         byte_A5A2:	dc.b 1			; static monitor
0000A683 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A688 02                         byte_A5A8:	dc.b 2			; static monitor
0000A689 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000A68E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A693 02                         byte_A5B3:	dc.b 2			; static monitor
0000A694 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000A699 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A69E 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000A69F F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000A6A4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6A9 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000A6AA F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000A6AF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6B4 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000A6B5 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000A6BA EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6BF 02                         byte_A5DF:	dc.b 2			; shield monitor
0000A6C0 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000A6C5 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6CA 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000A6CB F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000A6D0 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6D5 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000A6D6 F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000A6DB EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6E0 02                         byte_A600:	dc.b 2			; 'S' monitor
0000A6E1 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000A6E6 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6EB 02                         byte_A60B:	dc.b 2			; goggles monitor
0000A6EC F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000A6F1 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6F6 01                         byte_A616:	dc.b 1			; broken monitor
0000A6F7 FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000A6FC                            		even
0000A6FC                            		even
0000A6FC                            
0000A6FC                            ; ===========================================================================
0000A6FC                            ; ---------------------------------------------------------------------------
0000A6FC                            ; Object 0E - Sonic on the title screen
0000A6FC                            ; ---------------------------------------------------------------------------
0000A6FC                            
0000A6FC                            Obj0E:					; XREF: Obj_Index
0000A6FC 7000                       		moveq	#0,d0
0000A6FE 1028 0024                  		move.b	$24(a0),d0
0000A702 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000A706 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000A70A                            ; ===========================================================================
0000A70A 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000A70C 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000A70E 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000A710 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000A712                            ; ===========================================================================
0000A712                            
0000A712                            Obj0E_Main:				; XREF: Obj0E_Index
0000A712 5428 0024                  		addq.b	#2,$24(a0)
0000A716 317C 00F0 0008             		move.w	#$F0,8(a0)
0000A71C 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000A722 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000A72A 317C 2300 0002             		move.w	#$2300,2(a0)
0000A730 117C 0001 0018             		move.b	#1,$18(a0)
0000A736 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000A73C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A742 6100 0000                  		bsr.w	AnimateSprite
0000A746                            
0000A746                            Obj0E_Delay:				; XREF: Obj0E_Index
0000A746 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000A74A 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000A74C 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000A750 6000 0000                  		bra.w	DisplaySprite
0000A754                            ; ===========================================================================
0000A754                            
0000A754                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000A754 4E75                       		rts	
0000A756                            ; ===========================================================================
0000A756                            
0000A756                            Obj0E_Move:				; XREF: Obj0E_Index
0000A756 5168 000A                  		subq.w	#8,$A(a0)
0000A75A 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000A760 6600                       		bne.s	Obj0E_Display
0000A762 5428 0024                  		addq.b	#2,$24(a0)
0000A766                            
0000A766                            Obj0E_Display:
0000A766 6000 0000                  		bra.w	DisplaySprite
0000A76A                            ; ===========================================================================
0000A76A 4E75                       		rts	
0000A76C                            ; ===========================================================================
0000A76C                            
0000A76C                            Obj0E_Animate:				; XREF: Obj0E_Index
0000A76C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A772 6100 0000                  		bsr.w	AnimateSprite
0000A776 6000 0000                  		bra.w	DisplaySprite
0000A77A                            ; ===========================================================================
0000A77A 4E75                       		rts	
0000A77C                            ; ===========================================================================
0000A77C                            ; ---------------------------------------------------------------------------
0000A77C                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000A77C                            ; ---------------------------------------------------------------------------
0000A77C                            
0000A77C                            Obj0F:					; XREF: Obj_Index
0000A77C 7000                       		moveq	#0,d0
0000A77E 1028 0024                  		move.b	$24(a0),d0
0000A782 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000A786 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000A78A 6000 0000                  		bra.w	DisplaySprite
0000A78E                            ; ===========================================================================
0000A78E 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000A790 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000A792 0000                       		dc.w locret_A6F8-Obj0F_Index
0000A794                            ; ===========================================================================
0000A794                            
0000A794                            Obj0F_Main:				; XREF: Obj0F_Index
0000A794 5428 0024                  		addq.b	#2,$24(a0)
0000A798 317C 00D0 0008             		move.w	#$D0,8(a0)
0000A79E 317C 0130 000A             		move.w	#$130,$A(a0)
0000A7A4 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000A7AC 317C 0200 0002             		move.w	#$200,2(a0)
0000A7B2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000A7B8 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000A7BA 5428 0024                  		addq.b	#2,$24(a0)
0000A7BE 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000A7C4 6600                       		bne.s	locret_A6F8	; if not, branch
0000A7C6 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000A7CC 317C 0170 0008             		move.w	#$170,8(a0)
0000A7D2 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000A7D8                            
0000A7D8                            locret_A6F8:				; XREF: Obj0F_Index
0000A7D8 4E75                       		rts	
0000A7DA                            ; ===========================================================================
0000A7DA                            
0000A7DA                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000A7DA 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000A7E0 6000 0000                  		bra.w	AnimateSprite
0000A7E4                            ; ===========================================================================
0000A7E4                            Ani_obj0E:
0000A7E4                            	include "_anim\obj0E.asm"
0000A7E4                            ; ---------------------------------------------------------------------------
0000A7E4                            ; Animation script - Sonic on the title screen
0000A7E4                            ; ---------------------------------------------------------------------------
0000A7E4 0000                       		dc.w byte_A706-Ani_obj0E
0000A7E6 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000A7F2                            		even
0000A7F2                            		even
0000A7F2                            
0000A7F2                            Ani_obj0F:
0000A7F2                            	include "_anim\obj0F.asm"
0000A7F2                            ; ---------------------------------------------------------------------------
0000A7F2                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000A7F2                            ; ---------------------------------------------------------------------------
0000A7F2 0000                       		dc.w byte_A714-Ani_obj0F
0000A7F4 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000A7F8                            		even
0000A7F8                            		even
0000A7F8                            
0000A7F8                            ; ---------------------------------------------------------------------------
0000A7F8                            ; Subroutine to	animate	a sprite using an animation script
0000A7F8                            ; ---------------------------------------------------------------------------
0000A7F8                            
0000A7F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A7F8                            
0000A7F8                            
0000A7F8                            AnimateSprite:
0000A7F8 7000                       		moveq	#0,d0
0000A7FA 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000A7FE B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000A802 6700                       		beq.s	Anim_Run	; if not, branch
0000A804 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000A808 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A80E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000A814                            
0000A814                            Anim_Run:
0000A814 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A818 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000A81A D040                       		add.w	d0,d0
0000A81C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000A820 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000A824 7200                       		moveq	#0,d1
0000A826 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000A82A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000A82E 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000A830                            
0000A830                            Anim_Next:
0000A830 1200                       		move.b	d0,d1
0000A832 0200 001F                  		andi.b	#$1F,d0
0000A836 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000A83A 1028 0022                  		move.b	$22(a0),d0
0000A83E E719                       		rol.b	#3,d1
0000A840 B101                       		eor.b	d0,d1
0000A842 0201 0003                  		andi.b	#3,d1
0000A846 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000A84C 8328 0001                  		or.b	d1,1(a0)
0000A850 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000A854                            
0000A854                            Anim_Wait:
0000A854 4E75                       		rts	
0000A856                            ; ===========================================================================
0000A856                            
0000A856                            Anim_End_FF:
0000A856 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000A858 6600                       		bne.s	Anim_End_FE	; if not, branch
0000A85A 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000A860 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000A864 60CA                       		bra.s	Anim_Next
0000A866                            ; ===========================================================================
0000A866                            
0000A866                            Anim_End_FE:
0000A866 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000A868 6600                       		bne.s	Anim_End_FD	; if not, branch
0000A86A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000A86E 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000A872 9200                       		sub.b	d0,d1
0000A874 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000A878 60B6                       		bra.s	Anim_Next
0000A87A                            ; ===========================================================================
0000A87A                            
0000A87A                            Anim_End_FD:
0000A87A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000A87C 6600                       		bne.s	Anim_End_FC	; if not, branch
0000A87E 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000A884                            
0000A884                            Anim_End_FC:
0000A884 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000A886 6600                       		bne.s	Anim_End_FB	; if not, branch
0000A888 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000A88C                            
0000A88C                            Anim_End_FB:
0000A88C 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000A88E 6600                       		bne.s	Anim_End_FA	; if not, branch
0000A890 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A896 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000A89A                            
0000A89A                            Anim_End_FA:
0000A89A 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000A89C 6600                       		bne.s	Anim_End	; if not, branch
0000A89E 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000A8A2                            
0000A8A2                            Anim_End:
0000A8A2 4E75                       		rts	
0000A8A4                            ; End of function AnimateSprite
0000A8A4                            
0000A8A4                            ; ===========================================================================
0000A8A4                            ; ---------------------------------------------------------------------------
0000A8A4                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A8A4                            ; ---------------------------------------------------------------------------
0000A8A4                            Map_obj0F:
0000A8A4                            	include "_maps\obj0F.asm"
0000A8A4                            ; ---------------------------------------------------------------------------
0000A8A4                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A8A4                            ; ---------------------------------------------------------------------------
0000A8A4 0000                       		dc.w byte_A7CD-Map_obj0F
0000A8A6 0000                       		dc.w byte_A7CC-Map_obj0F
0000A8A8 0000                       		dc.w byte_A7EB-Map_obj0F
0000A8AA 0000                       		dc.w byte_A882-Map_obj0F
0000A8AC 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000A8AD 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000A8B2 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000A8B7 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000A8BC 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000A8C1 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000A8C6 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000A8CB 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000A8CC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8D1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8D6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8DB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8E0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8E5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8EA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8EF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8F4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8F9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8FE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A903 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A908 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A90D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A912 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A917 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A91C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A921 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A926 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A92B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A930 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A935 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A93A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A93F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A944 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A949 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A94E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A953 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A958 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A95D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A962 01                         byte_A882:	dc.b 1			; "TM"
0000A963 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000A968                            		even
0000A968                            		even
0000A968                            
0000A968                            ; ---------------------------------------------------------------------------
0000A968                            ; Sprite mappings - Sonic on the title screen
0000A968                            ; ---------------------------------------------------------------------------
0000A968                            Map_obj0E:
0000A968                            	include "_maps\obj0E.asm"
0000A968                            ; ---------------------------------------------------------------------------
0000A968                            ; Sprite mappings - Sonic on the title screen
0000A968                            ; ---------------------------------------------------------------------------
0000A968 0000                       		dc.w byte_A898-Map_obj0E
0000A96A 0000                       		dc.w byte_A8CB-Map_obj0E
0000A96C 0000                       		dc.w byte_A917-Map_obj0E
0000A96E 0000                       		dc.w byte_A96D-Map_obj0E
0000A970 0000                       		dc.w byte_A9AF-Map_obj0E
0000A972 0000                       		dc.w byte_A9E7-Map_obj0E
0000A974 0000                       		dc.w byte_AA47-Map_obj0E
0000A976 0000                       		dc.w byte_AAB1-Map_obj0E
0000A978 0A                         byte_A898:	dc.b $A
0000A979 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000A97E 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000A983 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000A988 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000A98D 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000A992 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000A997 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000A99C 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000A9A1 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000A9A6 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000A9AB 0F                         byte_A8CB:	dc.b $F
0000A9AC 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000A9B1 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000A9B6 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000A9BB 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000A9C0 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000A9C5 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000A9CA 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000A9CF 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000A9D4 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000A9D9 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000A9DE 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000A9E3 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000A9E8 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000A9ED 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000A9F2 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000A9F7 11                         byte_A917:	dc.b $11
0000A9F8 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000A9FD 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000AA02 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000AA07 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000AA0C 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000AA11 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000AA16 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000AA1B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000AA20 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000AA25 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000AA2A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000AA2F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000AA34 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000AA39 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000AA3E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000AA43 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000AA48 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000AA4D 0D                         byte_A96D:	dc.b $D
0000AA4E 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000AA53 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000AA58 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000AA5D 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000AA62 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000AA67 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000AA6C 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000AA71 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000AA76 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000AA7B 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000AA80 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000AA85 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000AA8A 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000AA8F 0B                         byte_A9AF:	dc.b $B
0000AA90 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000AA95 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000AA9A 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000AA9F 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000AAA4 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000AAA9 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000AAAE 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000AAB3 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000AAB8 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000AABD 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000AAC2 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000AAC7 13                         byte_A9E7:	dc.b $13
0000AAC8 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000AACD 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000AAD2 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000AAD7 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000AADC 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AAE1 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AAE6 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AAEB 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AAF0 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AAF5 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AAFA 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AAFF 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AB04 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AB09 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AB0E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AB13 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AB18 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AB1D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AB22 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AB27 15                         byte_AA47:	dc.b $15
0000AB28 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000AB2D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000AB32 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000AB37 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000AB3C 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000AB41 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000AB46 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AB4B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AB50 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AB55 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AB5A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AB5F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AB64 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AB69 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AB6E 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AB73 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AB78 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AB7D 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AB82 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AB87 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AB8C 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AB91 16                         byte_AAB1:	dc.b $16
0000AB92 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000AB97 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000AB9C 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000ABA1 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000ABA6 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000ABAB 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000ABB0 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000ABB5 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000ABBA 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000ABBF 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000ABC4 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000ABC9 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000ABCE 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000ABD3 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000ABD8 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000ABDD 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000ABE2 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000ABE7 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000ABEC 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000ABF1 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000ABF6 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000ABFB 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AC00                            		even
0000AC00                            		even
0000AC00                            
0000AC00                            ; ===========================================================================
0000AC00                            ; ---------------------------------------------------------------------------
0000AC00                            ; Object 2B - Chopper enemy (GHZ)
0000AC00                            ; ---------------------------------------------------------------------------
0000AC00                            
0000AC00                            Obj2B:					; XREF: Obj_Index
0000AC00 7000                       		moveq	#0,d0
0000AC02 1028 0024                  		move.b	$24(a0),d0
0000AC06 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AC0A 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AC0E 6000 0000                  		bra.w	MarkObjGone
0000AC12                            ; ===========================================================================
0000AC12 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AC14 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AC16                            ; ===========================================================================
0000AC16                            
0000AC16                            Obj2B_Main:				; XREF: Obj2B_Index
0000AC16 5428 0024                  		addq.b	#2,$24(a0)
0000AC1A 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000AC22 317C 047B 0002             		move.w	#$47B,2(a0)
0000AC28 117C 0004 0001             		move.b	#4,1(a0)
0000AC2E 117C 0004 0018             		move.b	#4,$18(a0)
0000AC34 117C 0009 0020             		move.b	#9,$20(a0)
0000AC3A 117C 0010 0019             		move.b	#$10,$19(a0)
0000AC40 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AC46 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000AC4C                            
0000AC4C                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000AC4C 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000AC52 6100 FBA4                  		bsr.w	AnimateSprite
0000AC56 6100 0000                  		bsr.w	SpeedToPos
0000AC5A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000AC60 3028 0030                  		move.w	$30(a0),d0
0000AC64 B068 000C                  		cmp.w	$C(a0),d0
0000AC68 6400                       		bcc.s	Obj2B_ChgAni
0000AC6A 3140 000C                  		move.w	d0,$C(a0)
0000AC6E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AC74                            
0000AC74                            Obj2B_ChgAni:
0000AC74 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000AC7A 0440 00C0                  		subi.w	#$C0,d0
0000AC7E B068 000C                  		cmp.w	$C(a0),d0
0000AC82 6400                       		bcc.s	locret_ABB6
0000AC84 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000AC8A 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000AC8E 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000AC90 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000AC96                            
0000AC96                            locret_ABB6:
0000AC96 4E75                       		rts	
0000AC98                            ; ===========================================================================
0000AC98                            Ani_obj2B:
0000AC98                            	include "_anim\obj2B.asm"
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98                            ; Animation script - Chopper enemy
0000AC98                            ; ---------------------------------------------------------------------------
0000AC98 0000                       		dc.w byte_ABBE-Ani_obj2B
0000AC9A 0000                       		dc.w byte_ABC2-Ani_obj2B
0000AC9C 0000                       		dc.w byte_ABC6-Ani_obj2B
0000AC9E 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000ACA2 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000ACA6 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000ACAA 00                         		even
0000ACAA 00                         		even
0000ACAA                            
0000ACAA                            ; ---------------------------------------------------------------------------
0000ACAA                            ; Sprite mappings - Chopper enemy (GHZ)
0000ACAA                            ; ---------------------------------------------------------------------------
0000ACAA                            Map_obj2B:
0000ACAA                            	include "_maps\obj2B.asm"
0000ACAA                            ; ---------------------------------------------------------------------------
0000ACAA                            ; Sprite mappings - Chopper enemy (GHZ)
0000ACAA                            ; ---------------------------------------------------------------------------
0000ACAA 0000                       		dc.w byte_ABCE-Map_obj2B
0000ACAC 0000                       		dc.w byte_ABD4-Map_obj2B
0000ACAE 01                         byte_ABCE:	dc.b 1
0000ACAF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000ACB4 01                         byte_ABD4:	dc.b 1
0000ACB5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000ACBA                            		even
0000ACBA                            		even
0000ACBA                            
0000ACBA                            ; ===========================================================================
0000ACBA                            ; ---------------------------------------------------------------------------
0000ACBA                            ; Object 2C - Jaws enemy (LZ)
0000ACBA                            ; ---------------------------------------------------------------------------
0000ACBA                            
0000ACBA                            Obj2C:					; XREF: Obj_Index
0000ACBA 7000                       		moveq	#0,d0
0000ACBC 1028 0024                  		move.b	$24(a0),d0
0000ACC0 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000ACC4 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000ACC8                            ; ===========================================================================
0000ACC8 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000ACCA 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000ACCC                            ; ===========================================================================
0000ACCC                            
0000ACCC                            Obj2C_Main:				; XREF: Obj2C_Index
0000ACCC 5428 0024                  		addq.b	#2,$24(a0)
0000ACD0 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000ACD8 317C 2486 0002             		move.w	#$2486,2(a0)
0000ACDE 0028 0004 0001             		ori.b	#4,1(a0)
0000ACE4 117C 000A 0020             		move.b	#$A,$20(a0)
0000ACEA 117C 0004 0018             		move.b	#4,$18(a0)
0000ACF0 117C 0010 0019             		move.b	#$10,$19(a0)
0000ACF6 7000                       		moveq	#0,d0
0000ACF8 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000ACFC ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000ACFE 5340                       		subq.w	#1,d0
0000AD00 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000AD04 3140 0032                  		move.w	d0,$32(a0)
0000AD08 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000AD0E 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000AD14 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000AD16 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000AD1A                            
0000AD1A                            Obj2C_Turn:				; XREF: Obj2C_Index
0000AD1A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000AD1E 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000AD20 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000AD26 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000AD2A 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000AD30 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000AD36                            
0000AD36                            Obj2C_Animate:
0000AD36 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000AD3C 6100 FABA                  		bsr.w	AnimateSprite
0000AD40 6100 0000                  		bsr.w	SpeedToPos
0000AD44 6000 0000                  		bra.w	MarkObjGone
0000AD48                            ; ===========================================================================
0000AD48                            Ani_obj2C:
0000AD48                            	include "_anim\obj2C.asm"
0000AD48                            ; ---------------------------------------------------------------------------
0000AD48                            ; Animation script - Jaws enemy
0000AD48                            ; ---------------------------------------------------------------------------
0000AD48 0000                       		dc.w byte_AC6A-Ani_obj2C
0000AD4A 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000AD50                            		even
0000AD50                            		even
0000AD50                            
0000AD50                            ; ---------------------------------------------------------------------------
0000AD50                            ; Sprite mappings - Jaws enemy (LZ)
0000AD50                            ; ---------------------------------------------------------------------------
0000AD50                            Map_obj2C:
0000AD50                            	include "_maps\obj2C.asm"
0000AD50                            ; ---------------------------------------------------------------------------
0000AD50                            ; Sprite mappings - Jaws enemy (LZ)
0000AD50                            ; ---------------------------------------------------------------------------
0000AD50 0000                       		dc.w byte_AC78-Map_obj2C
0000AD52 0000                       		dc.w byte_AC83-Map_obj2C
0000AD54 0000                       		dc.w byte_AC8E-Map_obj2C
0000AD56 0000                       		dc.w byte_AC99-Map_obj2C
0000AD58 02                         byte_AC78:	dc.b 2
0000AD59 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AD5E F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000AD63 02                         byte_AC83:	dc.b 2
0000AD64 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AD69 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000AD6E 02                         byte_AC8E:	dc.b 2
0000AD6F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AD74 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000AD79 02                         byte_AC99:	dc.b 2
0000AD7A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AD7F F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000AD84                            		even
0000AD84                            		even
0000AD84                            
0000AD84                            ; ===========================================================================
0000AD84                            ; ---------------------------------------------------------------------------
0000AD84                            ; Object 2D - Burrobot enemy (LZ)
0000AD84                            ; ---------------------------------------------------------------------------
0000AD84                            
0000AD84                            Obj2D:					; XREF: Obj_Index
0000AD84 7000                       		moveq	#0,d0
0000AD86 1028 0024                  		move.b	$24(a0),d0
0000AD8A 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000AD8E 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000AD92                            ; ===========================================================================
0000AD92 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000AD94 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000AD96                            ; ===========================================================================
0000AD96                            
0000AD96                            Obj2D_Main:				; XREF: Obj2D_Index
0000AD96 5428 0024                  		addq.b	#2,$24(a0)
0000AD9A 117C 0013 0016             		move.b	#$13,$16(a0)
0000ADA0 117C 0008 0017             		move.b	#8,$17(a0)
0000ADA6 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000ADAE 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000ADB4 0028 0004 0001             		ori.b	#4,1(a0)
0000ADBA 117C 0004 0018             		move.b	#4,$18(a0)
0000ADC0 117C 0005 0020             		move.b	#5,$20(a0)
0000ADC6 117C 000C 0019             		move.b	#$C,$19(a0)
0000ADCC 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000ADD0 117C 0002 001C             		move.b	#2,$1C(a0)
0000ADD6                            
0000ADD6                            Obj2D_Action:				; XREF: Obj2D_Index
0000ADD6 7000                       		moveq	#0,d0
0000ADD8 1028 0025                  		move.b	$25(a0),d0
0000ADDC 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000ADE0 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000ADE4 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000ADEA 6100 FA0C                  		bsr.w	AnimateSprite
0000ADEE 6000 0000                  		bra.w	MarkObjGone
0000ADF2                            ; ===========================================================================
0000ADF2 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000ADF4 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000ADF6 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000ADF8 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000ADFA                            ; ===========================================================================
0000ADFA                            
0000ADFA                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000ADFA 5368 0030                  		subq.w	#1,$30(a0)
0000ADFE 6A00                       		bpl.s	locret_AD42
0000AE00 5428 0025                  		addq.b	#2,$25(a0)
0000AE04 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000AE0A 317C 0080 0010             		move.w	#$80,$10(a0)
0000AE10 117C 0001 001C             		move.b	#1,$1C(a0)
0000AE16 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000AE1C 6700                       		beq.s	locret_AD42
0000AE1E 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000AE22                            
0000AE22                            locret_AD42:
0000AE22 4E75                       		rts	
0000AE24                            ; ===========================================================================
0000AE24                            
0000AE24                            Obj2D_Move:				; XREF: Obj2D_Index2
0000AE24 5368 0030                  		subq.w	#1,$30(a0)
0000AE28 6B00                       		bmi.s	loc_AD84
0000AE2A 6100 0000                  		bsr.w	SpeedToPos
0000AE2E 0868 0000 0032             		bchg	#0,$32(a0)
0000AE34 6600                       		bne.s	loc_AD78
0000AE36 3628 0008                  		move.w	8(a0),d3
0000AE3A 0643 000C                  		addi.w	#$C,d3
0000AE3E 0828 0000 0022             		btst	#0,$22(a0)
0000AE44 6600                       		bne.s	loc_AD6A
0000AE46 0443 0018                  		subi.w	#$18,d3
0000AE4A                            
0000AE4A                            loc_AD6A:
0000AE4A 4EB9 0000 0000             		jsr	ObjHitFloor2
0000AE50 0C41 000C                  		cmpi.w	#$C,d1
0000AE54 6C00                       		bge.s	loc_AD84
0000AE56 4E75                       		rts	
0000AE58                            ; ===========================================================================
0000AE58                            
0000AE58                            loc_AD78:				; XREF: Obj2D_Move
0000AE58 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE5E D368 000C                  		add.w	d1,$C(a0)
0000AE62 4E75                       		rts	
0000AE64                            ; ===========================================================================
0000AE64                            
0000AE64                            loc_AD84:				; XREF: Obj2D_Move
0000AE64 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000AE6A 6700                       		beq.s	loc_ADA4
0000AE6C 5528 0025                  		subq.b	#2,$25(a0)
0000AE70 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AE76 317C 0000 0010             		move.w	#0,$10(a0)
0000AE7C 117C 0000 001C             		move.b	#0,$1C(a0)
0000AE82 4E75                       		rts	
0000AE84                            ; ===========================================================================
0000AE84                            
0000AE84                            loc_ADA4:
0000AE84 5428 0025                  		addq.b	#2,$25(a0)
0000AE88 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AE8E 117C 0002 001C             		move.b	#2,$1C(a0)
0000AE94 4E75                       		rts	
0000AE96                            ; ===========================================================================
0000AE96                            
0000AE96                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000AE96 6100 0000                  		bsr.w	SpeedToPos
0000AE9A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AEA0 6B00                       		bmi.s	locret_ADF0
0000AEA2 117C 0003 001C             		move.b	#3,$1C(a0)
0000AEA8 4EB9 0000 0000             		jsr	ObjHitFloor
0000AEAE 4A41                       		tst.w	d1
0000AEB0 6A00                       		bpl.s	locret_ADF0
0000AEB2 D368 000C                  		add.w	d1,$C(a0)
0000AEB6 317C 0000 0012             		move.w	#0,$12(a0)
0000AEBC 117C 0001 001C             		move.b	#1,$1C(a0)
0000AEC2 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000AEC8 5528 0025                  		subq.b	#2,$25(a0)
0000AECC 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AED0                            
0000AED0                            locret_ADF0:
0000AED0 4E75                       		rts	
0000AED2                            ; ===========================================================================
0000AED2                            
0000AED2                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000AED2 343C 0060                  		move.w	#$60,d2
0000AED6 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AEDA 6400                       		bcc.s	locret_AE20
0000AEDC 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000AEE0 9068 000C                  		sub.w	$C(a0),d0
0000AEE4 6400                       		bcc.s	locret_AE20
0000AEE6 0C40 FF80                  		cmpi.w	#-$80,d0
0000AEEA 6500                       		bcs.s	locret_AE20
0000AEEC 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AEF0 6600                       		bne.s	locret_AE20
0000AEF2 5528 0025                  		subq.b	#2,$25(a0)
0000AEF6 3141 0010                  		move.w	d1,$10(a0)
0000AEFA 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AF00                            
0000AF00                            locret_AE20:
0000AF00 4E75                       		rts	
0000AF02                            
0000AF02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF02                            
0000AF02                            
0000AF02                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000AF02 323C 0080                  		move.w	#$80,d1
0000AF06 08E8 0000 0022             		bset	#0,$22(a0)
0000AF0C 3038 D008                  		move.w	($FFFFD008).w,d0
0000AF10 9068 0008                  		sub.w	8(a0),d0
0000AF14 6400                       		bcc.s	loc_AE40
0000AF16 4440                       		neg.w	d0
0000AF18 4441                       		neg.w	d1
0000AF1A 08A8 0000 0022             		bclr	#0,$22(a0)
0000AF20                            
0000AF20                            loc_AE40:
0000AF20 B042                       		cmp.w	d2,d0
0000AF22 4E75                       		rts	
0000AF24                            ; End of function Obj2D_ChkSonic2
0000AF24                            
0000AF24                            ; ===========================================================================
0000AF24                            Ani_obj2D:
0000AF24                            	include "_anim\obj2D.asm"
0000AF24                            ; ---------------------------------------------------------------------------
0000AF24                            ; Animation script - Burrobot enemy
0000AF24                            ; ---------------------------------------------------------------------------
0000AF24 0000                       		dc.w byte_AE4C-Ani_obj2D
0000AF26 0000                       		dc.w byte_AE50-Ani_obj2D
0000AF28 0000                       		dc.w byte_AE54-Ani_obj2D
0000AF2A 0000                       		dc.w byte_AE58-Ani_obj2D
0000AF2C 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000AF30 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000AF34 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000AF38 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000AF3C 00                         		even
0000AF3C 00                         		even
0000AF3C                            
0000AF3C                            ; ---------------------------------------------------------------------------
0000AF3C                            ; Sprite mappings - Burrobot enemy (LZ)
0000AF3C                            ; ---------------------------------------------------------------------------
0000AF3C                            Map_obj2D:
0000AF3C                            	include "_maps\obj2D.asm"
0000AF3C                            ; ---------------------------------------------------------------------------
0000AF3C                            ; Sprite mappings - Burrobot enemy (LZ)
0000AF3C                            ; ---------------------------------------------------------------------------
0000AF3C 0000                       		dc.w byte_AE6A-Map_obj2D
0000AF3E 0000                       		dc.w byte_AE75-Map_obj2D
0000AF40 0000                       		dc.w byte_AE80-Map_obj2D
0000AF42 0000                       		dc.w byte_AE8B-Map_obj2D
0000AF44 0000                       		dc.w byte_AE96-Map_obj2D
0000AF46 0000                       		dc.w byte_AEA1-Map_obj2D
0000AF48 0000                       		dc.w byte_AEAC-Map_obj2D
0000AF4A 02                         byte_AE6A:	dc.b 2
0000AF4B EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000AF50 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AF55 02                         byte_AE75:	dc.b 2
0000AF56 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AF5B 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000AF60 02                         byte_AE80:	dc.b 2
0000AF61 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000AF66 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000AF6B 02                         byte_AE8B:	dc.b 2
0000AF6C E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000AF71 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000AF76 02                         byte_AE96:	dc.b 2
0000AF77 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000AF7C 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000AF81 02                         byte_AEA1:	dc.b 2
0000AF82 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000AF87 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000AF8C 02                         byte_AEAC:	dc.b 2
0000AF8D EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AF92 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AF98 00                         		even
0000AF98 00                         		even
0000AF98                            
0000AF98                            ; ===========================================================================
0000AF98                            ; ---------------------------------------------------------------------------
0000AF98                            ; Object 2F - large moving platforms (MZ)
0000AF98                            ; ---------------------------------------------------------------------------
0000AF98                            
0000AF98                            Obj2F:					; XREF: Obj_Index
0000AF98 7000                       		moveq	#0,d0
0000AF9A 1028 0024                  		move.b	$24(a0),d0
0000AF9E 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000AFA2 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000AFA6                            ; ===========================================================================
0000AFA6 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000AFA8 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000AFAA                            
0000AFAA 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000AFAC 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000AFAE 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000AFB0 0140                       		dc.b 1,	$40
0000AFB2 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000AFB4 0220                       		dc.b 2,	$20
0000AFB6                            ; ===========================================================================
0000AFB6                            
0000AFB6                            Obj2F_Main:				; XREF: Obj2F_Index
0000AFB6 5428 0024                  		addq.b	#2,$24(a0)
0000AFBA 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000AFC2 317C C000 0002             		move.w	#$C000,2(a0)
0000AFC8 117C 0004 0001             		move.b	#4,1(a0)
0000AFCE 117C 0005 0018             		move.b	#5,$18(a0)
0000AFD4 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000AFDA 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000AFE0 7000                       		moveq	#0,d0
0000AFE2 1028 0028                  		move.b	$28(a0),d0
0000AFE6 E448                       		lsr.w	#2,d0
0000AFE8 0240 001C                  		andi.w	#$1C,d0
0000AFEC 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000AFF0 3019                       		move.w	(a1)+,d0
0000AFF2 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000AFF6 214A 0030                  		move.l	a2,$30(a0)
0000AFFA 1159 001A                  		move.b	(a1)+,$1A(a0)
0000AFFE 1151 0019                  		move.b	(a1),$19(a0)
0000B002 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B008 117C 0040 0016             		move.b	#$40,$16(a0)
0000B00E 08E8 0004 0001             		bset	#4,1(a0)
0000B014                            
0000B014                            Obj2F_Action:				; XREF: Obj2F_Index
0000B014 6100 0000                  		bsr.w	Obj2F_Types
0000B018 4A28 0025                  		tst.b	$25(a0)
0000B01C 6700                       		beq.s	Obj2F_Solid
0000B01E 7200                       		moveq	#0,d1
0000B020 1228 0019                  		move.b	$19(a0),d1
0000B024 0641 000B                  		addi.w	#$B,d1
0000B028 6100 C69C                  		bsr.w	ExitPlatform
0000B02C 0829 0003 0022             		btst	#3,$22(a1)
0000B032 6600 0000                  		bne.w	Obj2F_Slope
0000B036 4228 0025                  		clr.b	$25(a0)
0000B03A 6000                       		bra.s	Obj2F_Display
0000B03C                            ; ===========================================================================
0000B03C                            
0000B03C                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B03C 7200                       		moveq	#0,d1
0000B03E 1228 0019                  		move.b	$19(a0),d1
0000B042 0641 000B                  		addi.w	#$B,d1
0000B046 2468 0030                  		movea.l	$30(a0),a2
0000B04A 3428 0008                  		move.w	8(a0),d2
0000B04E 6100 D5D4                  		bsr.w	SlopeObject2
0000B052 6000                       		bra.s	Obj2F_Display
0000B054                            ; ===========================================================================
0000B054                            
0000B054                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B054 7200                       		moveq	#0,d1
0000B056 1228 0019                  		move.b	$19(a0),d1
0000B05A 0641 000B                  		addi.w	#$B,d1
0000B05E 343C 0020                  		move.w	#$20,d2
0000B062 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B068 6600                       		bne.s	loc_AF8E
0000B06A 343C 0030                  		move.w	#$30,d2
0000B06E                            
0000B06E                            loc_AF8E:
0000B06E 2468 0030                  		movea.l	$30(a0),a2
0000B072 6100 0000                  		bsr.w	SolidObject2F
0000B076                            
0000B076                            Obj2F_Display:				; XREF: Obj2F_Action
0000B076 6100 0000                  		bsr.w	DisplaySprite
0000B07A 6000 0000                  		bra.w	Obj2F_ChkDel
0000B07E                            
0000B07E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B07E                            
0000B07E                            
0000B07E                            Obj2F_Types:				; XREF: Obj2F_Action
0000B07E 7000                       		moveq	#0,d0
0000B080 1028 0028                  		move.b	$28(a0),d0
0000B084 0240 0007                  		andi.w	#7,d0
0000B088 D040                       		add.w	d0,d0
0000B08A 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B08E 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B092                            ; End of function Obj2F_Types
0000B092                            
0000B092                            ; ===========================================================================
0000B092 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B094 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B096 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B098 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B09A 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B09C 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B09E                            ; ===========================================================================
0000B09E                            
0000B09E                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B09E 4E75                       		rts			; type 00 platform doesn't move
0000B0A0                            ; ===========================================================================
0000B0A0                            
0000B0A0                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B0A0 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B0A4 323C 0020                  		move.w	#$20,d1
0000B0A8 6000                       		bra.s	Obj2F_Move
0000B0AA                            ; ===========================================================================
0000B0AA                            
0000B0AA                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B0AA 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B0AE 323C 0030                  		move.w	#$30,d1
0000B0B2 6000                       		bra.s	Obj2F_Move
0000B0B4                            ; ===========================================================================
0000B0B4                            
0000B0B4                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B0B4 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B0B8 323C 0040                  		move.w	#$40,d1
0000B0BC 6000                       		bra.s	Obj2F_Move
0000B0BE                            ; ===========================================================================
0000B0BE                            
0000B0BE                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B0BE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B0C2 323C 0060                  		move.w	#$60,d1
0000B0C6                            
0000B0C6                            Obj2F_Move:
0000B0C6 0828 0003 0028             		btst	#3,$28(a0)
0000B0CC 6700                       		beq.s	loc_AFF2
0000B0CE 4440                       		neg.w	d0
0000B0D0 D041                       		add.w	d1,d0
0000B0D2                            
0000B0D2                            loc_AFF2:
0000B0D2 3228 002C                  		move.w	$2C(a0),d1
0000B0D6 9240                       		sub.w	d0,d1
0000B0D8 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B0DC 4E75                       		rts	
0000B0DE                            ; ===========================================================================
0000B0DE                            
0000B0DE                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B0DE 1028 0034                  		move.b	$34(a0),d0
0000B0E2 4A28 0025                  		tst.b	$25(a0)
0000B0E6 6600                       		bne.s	loc_B010
0000B0E8 5500                       		subq.b	#2,d0
0000B0EA 6400                       		bcc.s	loc_B01C
0000B0EC 7000                       		moveq	#0,d0
0000B0EE 6000                       		bra.s	loc_B01C
0000B0F0                            ; ===========================================================================
0000B0F0                            
0000B0F0                            loc_B010:
0000B0F0 5800                       		addq.b	#4,d0
0000B0F2 0C00 0040                  		cmpi.b	#$40,d0
0000B0F6 6500                       		bcs.s	loc_B01C
0000B0F8 103C 0040                  		move.b	#$40,d0
0000B0FC                            
0000B0FC                            loc_B01C:
0000B0FC 1140 0034                  		move.b	d0,$34(a0)
0000B100 4EB9 0000 29DA             		jsr	(CalcSine).l
0000B106 E848                       		lsr.w	#4,d0
0000B108 3200                       		move.w	d0,d1
0000B10A D068 002C                  		add.w	$2C(a0),d0
0000B10E 3140 000C                  		move.w	d0,$C(a0)
0000B112 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B118 6600                       		bne.s	loc_B07A
0000B11A 4A28 0035                  		tst.b	$35(a0)
0000B11E 6600                       		bne.s	loc_B07A
0000B120 117C 0001 0035             		move.b	#1,$35(a0)
0000B126 6100 0000                  		bsr.w	SingleObjLoad2
0000B12A 6600                       		bne.s	loc_B07A
0000B12C 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B130 3368 0008 0008             		move.w	8(a0),8(a1)
0000B136 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B13C 5069 002C                  		addq.w	#8,$2C(a1)
0000B140 5769 002C                  		subq.w	#3,$2C(a1)
0000B144 0469 0040 0008             		subi.w	#$40,8(a1)
0000B14A 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B150 2348 0038                  		move.l	a0,$38(a1)
0000B154 2448                       		movea.l	a0,a2
0000B156 6100                       		bsr.s	sub_B09C
0000B158                            
0000B158                            loc_B07A:
0000B158 7400                       		moveq	#0,d2
0000B15A 45E8 0036                  		lea	$36(a0),a2
0000B15E 141A                       		move.b	(a2)+,d2
0000B160 5302                       		subq.b	#1,d2
0000B162 6500                       		bcs.s	locret_B09A
0000B164                            
0000B164                            loc_B086:
0000B164 7000                       		moveq	#0,d0
0000B166 101A                       		move.b	(a2)+,d0
0000B168 ED48                       		lsl.w	#6,d0
0000B16A 0640 D000                  		addi.w	#-$3000,d0
0000B16E 3240                       		movea.w	d0,a1
0000B170 3341 003C                  		move.w	d1,$3C(a1)
0000B174 51CA FFEE                  		dbf	d2,loc_B086
0000B178                            
0000B178                            locret_B09A:
0000B178 4E75                       		rts	
0000B17A                            
0000B17A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B17A                            
0000B17A                            
0000B17A                            sub_B09C:
0000B17A 45EA 0036                  		lea	$36(a2),a2
0000B17E 7000                       		moveq	#0,d0
0000B180 1012                       		move.b	(a2),d0
0000B182 5212                       		addq.b	#1,(a2)
0000B184 45F2 0001                  		lea	1(a2,d0.w),a2
0000B188 3009                       		move.w	a1,d0
0000B18A 0440 D000                  		subi.w	#-$3000,d0
0000B18E EC48                       		lsr.w	#6,d0
0000B190 0240 007F                  		andi.w	#$7F,d0
0000B194 1480                       		move.b	d0,(a2)
0000B196 4E75                       		rts	
0000B198                            ; End of function sub_B09C
0000B198                            
0000B198                            ; ===========================================================================
0000B198                            
0000B198                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B198 4A28 0035                  		tst.b	$35(a0)
0000B19C 6700                       		beq.s	loc_B0C6
0000B19E 4A28 0001                  		tst.b	1(a0)
0000B1A2 6A00                       		bpl.s	Obj2F_DelFlames
0000B1A4                            
0000B1A4                            loc_B0C6:
0000B1A4 3028 002A                  		move.w	$2A(a0),d0
0000B1A8 0240 FF80                  		andi.w	#$FF80,d0
0000B1AC 3238 F700                  		move.w	($FFFFF700).w,d1
0000B1B0 0441 0080                  		subi.w	#$80,d1
0000B1B4 0241 FF80                  		andi.w	#$FF80,d1
0000B1B8 9041                       		sub.w	d1,d0
0000B1BA 0C40 0280                  		cmpi.w	#$280,d0
0000B1BE 6200 0000                  		bhi.w	DeleteObject
0000B1C2 4E75                       		rts	
0000B1C4                            ; ===========================================================================
0000B1C4                            
0000B1C4                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B1C4 7400                       		moveq	#0,d2
0000B1C6                            
0000B1C6                            loc_B0E8:
0000B1C6 45E8 0036                  		lea	$36(a0),a2
0000B1CA 1412                       		move.b	(a2),d2
0000B1CC 421A                       		clr.b	(a2)+
0000B1CE 5302                       		subq.b	#1,d2
0000B1D0 6500                       		bcs.s	locret_B116
0000B1D2                            
0000B1D2                            loc_B0F4:
0000B1D2 7000                       		moveq	#0,d0
0000B1D4 1012                       		move.b	(a2),d0
0000B1D6 421A                       		clr.b	(a2)+
0000B1D8 ED48                       		lsl.w	#6,d0
0000B1DA 0640 D000                  		addi.w	#-$3000,d0
0000B1DE 3240                       		movea.w	d0,a1
0000B1E0 6100 0000                  		bsr.w	DeleteObject2
0000B1E4 51CA FFEC                  		dbf	d2,loc_B0F4
0000B1E8 117C 0000 0035             		move.b	#0,$35(a0)
0000B1EE 117C 0000 0034             		move.b	#0,$34(a0)
0000B1F4                            
0000B1F4                            locret_B116:
0000B1F4 4E75                       		rts	
0000B1F6                            ; ===========================================================================
0000B1F6                            ; ---------------------------------------------------------------------------
0000B1F6                            ; Collision data for large moving platforms (MZ)
0000B1F6                            ; ---------------------------------------------------------------------------
0000B1F6                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B242                            		even
0000B242                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B26E                            		even
0000B26E                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B2BA                            		even
0000B2BA                            ; ===========================================================================
0000B2BA                            ; ---------------------------------------------------------------------------
0000B2BA                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B2BA                            ; (appears when	you walk on sinking platforms)
0000B2BA                            ; ---------------------------------------------------------------------------
0000B2BA                            
0000B2BA                            Obj35:					; XREF: Obj_Index
0000B2BA 7000                       		moveq	#0,d0
0000B2BC 1028 0024                  		move.b	$24(a0),d0
0000B2C0 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B2C4 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B2C8                            ; ===========================================================================
0000B2C8 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B2CA 0000                       		dc.w loc_B238-Obj35_Index
0000B2CC 0000                       		dc.w Obj35_Move-Obj35_Index
0000B2CE                            ; ===========================================================================
0000B2CE                            
0000B2CE                            Obj35_Main:				; XREF: Obj35_Index
0000B2CE 5428 0024                  		addq.b	#2,$24(a0)
0000B2D2 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B2DA 317C 0345 0002             		move.w	#$345,2(a0)
0000B2E0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B2E6 117C 0004 0001             		move.b	#4,1(a0)
0000B2EC 117C 0001 0018             		move.b	#1,$18(a0)
0000B2F2 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B2F8 117C 0008 0019             		move.b	#8,$19(a0)
0000B2FE 303C 00C8                  		move.w	#$C8,d0
0000B302 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000B308 4A28 0028                  		tst.b	$28(a0)
0000B30C 6700                       		beq.s	loc_B238
0000B30E 5428 0024                  		addq.b	#2,$24(a0)
0000B312 6000 0000                  		bra.w	Obj35_Move
0000B316                            ; ===========================================================================
0000B316                            
0000B316                            loc_B238:				; XREF: Obj35_Index
0000B316 2268 0030                  		movea.l	$30(a0),a1
0000B31A 3228 0008                  		move.w	8(a0),d1
0000B31E 9268 002A                  		sub.w	$2A(a0),d1
0000B322 0641 000C                  		addi.w	#$C,d1
0000B326 3001                       		move.w	d1,d0
0000B328 E248                       		lsr.w	#1,d0
0000B32A 1031 0000                  		move.b	(a1,d0.w),d0
0000B32E 4440                       		neg.w	d0
0000B330 D068 002C                  		add.w	$2C(a0),d0
0000B334 3400                       		move.w	d0,d2
0000B336 D068 003C                  		add.w	$3C(a0),d0
0000B33A 3140 000C                  		move.w	d0,$C(a0)
0000B33E 0C41 0084                  		cmpi.w	#$84,d1
0000B342 6400                       		bcc.s	loc_B2B0
0000B344 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B34C 0C41 0080                  		cmpi.w	#$80,d1
0000B350 6400                       		bcc.s	loc_B2B0
0000B352 2028 0008                  		move.l	8(a0),d0
0000B356 0680 0008 0000             		addi.l	#$80000,d0
0000B35C 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B362 6600                       		bne.s	loc_B2B0
0000B364 6100 0000                  		bsr.w	SingleObjLoad2
0000B368 6600                       		bne.s	loc_B2B0
0000B36A 12BC 0035                  		move.b	#$35,0(a1)
0000B36E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B374 3342 002C                  		move.w	d2,$2C(a1)
0000B378 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B37E 137C 0001 0028             		move.b	#1,$28(a1)
0000B384 2468 0038                  		movea.l	$38(a0),a2
0000B388 6100 FDF0                  		bsr.w	sub_B09C
0000B38C                            
0000B38C                            loc_B2B0:
0000B38C 6000                       		bra.s	Obj35_Animate
0000B38E                            ; ===========================================================================
0000B38E                            
0000B38E                            Obj35_Move:				; XREF: Obj35_Index
0000B38E 3028 002C                  		move.w	$2C(a0),d0
0000B392 D068 003C                  		add.w	$3C(a0),d0
0000B396 3140 000C                  		move.w	d0,$C(a0)
0000B39A                            
0000B39A                            Obj35_Animate:				; XREF: loc_B238
0000B39A 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B3A0 6100 F456                  		bsr.w	AnimateSprite
0000B3A4 6000 0000                  		bra.w	DisplaySprite
0000B3A8                            ; ===========================================================================
0000B3A8                            Ani_obj35:
0000B3A8                            	include "_anim\obj35.asm"
0000B3A8                            ; ---------------------------------------------------------------------------
0000B3A8                            ; Animation script - fireball that sits on the	floor (MZ)
0000B3A8                            ; ---------------------------------------------------------------------------
0000B3A8 0000                       		dc.w byte_B2CE-Ani_obj35
0000B3AA 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B3B0                            		even
0000B3B0                            		even
0000B3B0                            
0000B3B0                            ; ---------------------------------------------------------------------------
0000B3B0                            ; Sprite mappings - large moving platforms (MZ)
0000B3B0                            ; ---------------------------------------------------------------------------
0000B3B0                            Map_obj2F:
0000B3B0                            	include "_maps\obj2F.asm"
0000B3B0                            ; ---------------------------------------------------------------------------
0000B3B0                            ; Sprite mappings - large moving platforms (MZ)
0000B3B0                            ; ---------------------------------------------------------------------------
0000B3B0 0000                       		dc.w byte_B2DA-Map_obj2F
0000B3B2 0000                       		dc.w byte_B31C-Map_obj2F
0000B3B4 0000                       		dc.w byte_B34F-Map_obj2F
0000B3B6 0D                         byte_B2DA:	dc.b $D
0000B3B7 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B3BC F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B3C1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B3C6 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B3CB F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B3D0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B3D5 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B3DA D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B3DF F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B3E4 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B3E9 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B3EE D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B3F3 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B3F8 0A                         byte_B31C:	dc.b $A
0000B3F9 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B3FE F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B403 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B408 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B40D E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B412 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B417 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B41C E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B421 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B426 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B42B 06                         byte_B34F:	dc.b 6
0000B42C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B431 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B436 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B43B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B440 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B445 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B44A                            		even
0000B44A                            		even
0000B44A                            
0000B44A                            ; ---------------------------------------------------------------------------
0000B44A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B44A                            ; ---------------------------------------------------------------------------
0000B44A                            Map_obj14:
0000B44A                            	include "_maps\obj14.asm"
0000B44A                            ; ---------------------------------------------------------------------------
0000B44A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B44A                            ; ---------------------------------------------------------------------------
0000B44A 0000                       		dc.w byte_B37A-Map_obj14
0000B44C 0000                       		dc.w byte_B380-Map_obj14
0000B44E 0000                       		dc.w byte_B386-Map_obj14
0000B450 0000                       		dc.w byte_B38C-Map_obj14
0000B452 0000                       		dc.w byte_B392-Map_obj14
0000B454 0000                       		dc.w byte_B398-Map_obj14
0000B456 01                         byte_B37A:	dc.b 1
0000B457 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B45C 01                         byte_B380:	dc.b 1
0000B45D E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B462 01                         byte_B386:	dc.b 1
0000B463 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B468 01                         byte_B38C:	dc.b 1
0000B469 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B46E 01                         byte_B392:	dc.b 1
0000B46F F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B474 01                         byte_B398:	dc.b 1
0000B475 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B47A                            		even
0000B47A                            		even
0000B47A                            
0000B47A                            ; ===========================================================================
0000B47A                            ; ---------------------------------------------------------------------------
0000B47A                            ; Object 30 - large green glassy blocks	(MZ)
0000B47A                            ; ---------------------------------------------------------------------------
0000B47A                            
0000B47A                            Obj30:					; XREF: Obj_Index
0000B47A 7000                       		moveq	#0,d0
0000B47C 1028 0024                  		move.b	$24(a0),d0
0000B480 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B484 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B488 3028 0008                  		move.w	8(a0),d0
0000B48C 0240 FF80                  		andi.w	#$FF80,d0
0000B490 3238 F700                  		move.w	($FFFFF700).w,d1
0000B494 0441 0080                  		subi.w	#$80,d1
0000B498 0241 FF80                  		andi.w	#$FF80,d1
0000B49C 9041                       		sub.w	d1,d0
0000B49E 0C40 0280                  		cmpi.w	#$280,d0
0000B4A2 6200 0000                  		bhi.w	Obj30_Delete
0000B4A6 6000 0000                  		bra.w	DisplaySprite
0000B4AA                            ; ===========================================================================
0000B4AA                            
0000B4AA                            Obj30_Delete:
0000B4AA 6000 0000                  		bra.w	DeleteObject
0000B4AE                            ; ===========================================================================
0000B4AE 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B4B0 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B4B2 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B4B4 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B4B6 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B4B8                            
0000B4B8 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B4BB 0400 01                    		dc.b 4,	0, 1
0000B4BE 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B4C1 0800 01                    		dc.b 8,	0, 1
0000B4C4                            ; ===========================================================================
0000B4C4                            
0000B4C4                            Obj30_Main:				; XREF: Obj30_Index
0000B4C4 45F9 0000 B4B8             		lea	(Obj30_Vars1).l,a2
0000B4CA 7201                       		moveq	#1,d1
0000B4CC 117C 0048 0016             		move.b	#$48,$16(a0)
0000B4D2 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B4D8 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B4DA 45F9 0000 B4BE             		lea	(Obj30_Vars2).l,a2
0000B4E0 7201                       		moveq	#1,d1
0000B4E2 117C 0038 0016             		move.b	#$38,$16(a0)
0000B4E8                            
0000B4E8                            loc_B40C:
0000B4E8 2248                       		movea.l	a0,a1
0000B4EA 6000                       		bra.s	Obj30_Load	; load main object
0000B4EC                            ; ===========================================================================
0000B4EC                            
0000B4EC                            Obj30_Loop:
0000B4EC 6100 0000                  		bsr.w	SingleObjLoad2
0000B4F0 6600                       		bne.s	loc_B480
0000B4F2                            
0000B4F2                            Obj30_Load:				; XREF: Obj30_Main
0000B4F2 135A 0024                  		move.b	(a2)+,$24(a1)
0000B4F6 12BC 0030                  		move.b	#$30,0(a1)
0000B4FA 3368 0008 0008             		move.w	8(a0),8(a1)
0000B500 101A                       		move.b	(a2)+,d0
0000B502 4880                       		ext.w	d0
0000B504 D068 000C                  		add.w	$C(a0),d0
0000B508 3340 000C                  		move.w	d0,$C(a1)
0000B50C 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B514 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B51A 137C 0004 0001             		move.b	#4,1(a1)
0000B520 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B526 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B52C 137C 0020 0019             		move.b	#$20,$19(a1)
0000B532 137C 0004 0018             		move.b	#4,$18(a1)
0000B538 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B53C 2348 003C                  		move.l	a0,$3C(a1)
0000B540 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B544                            
0000B544 137C 0010 0019             		move.b	#$10,$19(a1)
0000B54A 137C 0003 0018             		move.b	#3,$18(a1)
0000B550 5029 0028                  		addq.b	#8,$28(a1)
0000B554 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B55A                            
0000B55A                            loc_B480:
0000B55A 317C 0090 0032             		move.w	#$90,$32(a0)
0000B560 08E8 0004 0001             		bset	#4,1(a0)
0000B566                            
0000B566                            Obj30_Block012:				; XREF: Obj30_Index
0000B566 6100 0000                  		bsr.w	Obj30_Types
0000B56A 323C 002B                  		move.w	#$2B,d1
0000B56E 343C 0048                  		move.w	#$48,d2
0000B572 363C 0049                  		move.w	#$49,d3
0000B576 3828 0008                  		move.w	8(a0),d4
0000B57A 6000 0000                  		bra.w	SolidObject
0000B57E                            ; ===========================================================================
0000B57E                            
0000B57E                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B57E 2268 003C                  		movea.l	$3C(a0),a1
0000B582 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B588 6000 0000                  		bra.w	Obj30_Types
0000B58C                            ; ===========================================================================
0000B58C                            
0000B58C                            Obj30_Block34:				; XREF: Obj30_Index
0000B58C 6100 0000                  		bsr.w	Obj30_Types
0000B590 323C 002B                  		move.w	#$2B,d1
0000B594 343C 0038                  		move.w	#$38,d2
0000B598 363C 0039                  		move.w	#$39,d3
0000B59C 3828 0008                  		move.w	8(a0),d4
0000B5A0 6000 0000                  		bra.w	SolidObject
0000B5A4                            ; ===========================================================================
0000B5A4                            
0000B5A4                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B5A4 2268 003C                  		movea.l	$3C(a0),a1
0000B5A8 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B5AE 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B5B4 6000 0002                  		bra.w	*+4
0000B5B8                            
0000B5B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5B8                            
0000B5B8                            
0000B5B8                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B5B8 7000                       		moveq	#0,d0
0000B5BA 1028 0028                  		move.b	$28(a0),d0
0000B5BE 0240 0007                  		andi.w	#7,d0
0000B5C2 D040                       		add.w	d0,d0
0000B5C4 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B5C8 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B5CC                            ; End of function Obj30_Types
0000B5CC                            
0000B5CC                            ; ===========================================================================
0000B5CC 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B5CE 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B5D0 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B5D2 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B5D4 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B5D6                            ; ===========================================================================
0000B5D6                            
0000B5D6                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B5D6 4E75                       		rts	
0000B5D8                            ; ===========================================================================
0000B5D8                            
0000B5D8                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B5D8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B5DC 323C 0040                  		move.w	#$40,d1
0000B5E0 6000                       		bra.s	loc_B514
0000B5E2                            ; ===========================================================================
0000B5E2                            
0000B5E2                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B5E2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B5E6 323C 0040                  		move.w	#$40,d1
0000B5EA 4440                       		neg.w	d0
0000B5EC D041                       		add.w	d1,d0
0000B5EE                            
0000B5EE                            loc_B514:				; XREF: Obj30_Type01
0000B5EE 0828 0003 0028             		btst	#3,$28(a0)
0000B5F4 6700                       		beq.s	loc_B526
0000B5F6 4440                       		neg.w	d0
0000B5F8 D041                       		add.w	d1,d0
0000B5FA E208                       		lsr.b	#1,d0
0000B5FC 0640 0020                  		addi.w	#$20,d0
0000B600                            
0000B600                            loc_B526:
0000B600 6000 0000                  		bra.w	loc_B5EE
0000B604                            ; ===========================================================================
0000B604                            
0000B604                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B604 0828 0003 0028             		btst	#3,$28(a0)
0000B60A 6700                       		beq.s	loc_B53E
0000B60C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B610 0440 0010                  		subi.w	#$10,d0
0000B614 6000 0000                  		bra.w	loc_B5EE
0000B618                            ; ===========================================================================
0000B618                            
0000B618                            loc_B53E:
0000B618 0828 0003 0022             		btst	#3,$22(a0)
0000B61E 6600                       		bne.s	loc_B54E
0000B620 08A8 0000 0034             		bclr	#0,$34(a0)
0000B626 6000                       		bra.s	loc_B582
0000B628                            ; ===========================================================================
0000B628                            
0000B628                            loc_B54E:
0000B628 4A28 0034                  		tst.b	$34(a0)
0000B62C 6600                       		bne.s	loc_B582
0000B62E 117C 0001 0034             		move.b	#1,$34(a0)
0000B634 08E8 0000 0035             		bset	#0,$35(a0)
0000B63A 6700                       		beq.s	loc_B582
0000B63C 08E8 0007 0034             		bset	#7,$34(a0)
0000B642 317C 0010 0036             		move.w	#$10,$36(a0)
0000B648 117C 000A 0038             		move.b	#$A,$38(a0)
0000B64E 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000B654 6600                       		bne.s	loc_B582
0000B656 317C 0040 0036             		move.w	#$40,$36(a0)
0000B65C                            
0000B65C                            loc_B582:
0000B65C 4A28 0034                  		tst.b	$34(a0)
0000B660 6A00                       		bpl.s	loc_B5AA
0000B662 4A28 0038                  		tst.b	$38(a0)
0000B666 6700                       		beq.s	loc_B594
0000B668 5328 0038                  		subq.b	#1,$38(a0)
0000B66C 6600                       		bne.s	loc_B5AA
0000B66E                            
0000B66E                            loc_B594:
0000B66E 4A68 0032                  		tst.w	$32(a0)
0000B672 6700                       		beq.s	loc_B5A4
0000B674 5368 0032                  		subq.w	#1,$32(a0)
0000B678 5368 0036                  		subq.w	#1,$36(a0)
0000B67C 6600                       		bne.s	loc_B5AA
0000B67E                            
0000B67E                            loc_B5A4:
0000B67E 08A8 0007 0034             		bclr	#7,$34(a0)
0000B684                            
0000B684                            loc_B5AA:
0000B684 3028 0032                  		move.w	$32(a0),d0
0000B688 6000                       		bra.s	loc_B5EE
0000B68A                            ; ===========================================================================
0000B68A                            
0000B68A                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000B68A 0828 0003 0028             		btst	#3,$28(a0)
0000B690 6700                       		beq.s	Obj30_ChkSwitch
0000B692 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B696 0440 0010                  		subi.w	#$10,d0
0000B69A 6000                       		bra.s	loc_B5EE
0000B69C                            ; ===========================================================================
0000B69C                            
0000B69C                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000B69C 4A28 0034                  		tst.b	$34(a0)
0000B6A0 6600                       		bne.s	loc_B5E0
0000B6A2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000B6A6 7000                       		moveq	#0,d0
0000B6A8 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000B6AC E848                       		lsr.w	#4,d0		; read only the	first nybble
0000B6AE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000B6B2 6700                       		beq.s	loc_B5EA	; if not, branch
0000B6B4 117C 0001 0034             		move.b	#1,$34(a0)
0000B6BA                            
0000B6BA                            loc_B5E0:
0000B6BA 4A68 0032                  		tst.w	$32(a0)
0000B6BE 6700                       		beq.s	loc_B5EA
0000B6C0 5568 0032                  		subq.w	#2,$32(a0)
0000B6C4                            
0000B6C4                            loc_B5EA:
0000B6C4 3028 0032                  		move.w	$32(a0),d0
0000B6C8                            
0000B6C8                            loc_B5EE:
0000B6C8 3228 0030                  		move.w	$30(a0),d1
0000B6CC 9240                       		sub.w	d0,d1
0000B6CE 3141 000C                  		move.w	d1,$C(a0)
0000B6D2 4E75                       		rts	
0000B6D4                            ; ===========================================================================
0000B6D4                            ; ---------------------------------------------------------------------------
0000B6D4                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B6D4                            ; ---------------------------------------------------------------------------
0000B6D4                            Map_obj30:
0000B6D4                            	include "_maps\obj30.asm"
0000B6D4                            ; ---------------------------------------------------------------------------
0000B6D4                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B6D4                            ; ---------------------------------------------------------------------------
0000B6D4 0000                       		dc.w byte_B600-Map_obj30
0000B6D6 0000                       		dc.w byte_B63D-Map_obj30
0000B6D8 0000                       		dc.w byte_B648-Map_obj30
0000B6DA 0C                         byte_B600:	dc.b $C
0000B6DB B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000B6E0 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000B6E5 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000B6EA C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000B6EF E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000B6F4 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000B6F9 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000B6FE 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000B703 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000B708 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000B70D 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000B712 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000B717 02                         byte_B63D:	dc.b 2
0000B718 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000B71D 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000B722 0A                         byte_B648:	dc.b $A
0000B723 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000B728 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000B72D D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000B732 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000B737 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000B73C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000B741 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000B746 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000B74B 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000B750 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000B756 00                         		even
0000B756 00                         		even
0000B756                            
0000B756                            ; ===========================================================================
0000B756                            ; ---------------------------------------------------------------------------
0000B756                            ; Object 31 - stomping metal blocks on chains (MZ)
0000B756                            ; ---------------------------------------------------------------------------
0000B756                            
0000B756                            Obj31:					; XREF: Obj_Index
0000B756 7000                       		moveq	#0,d0
0000B758 1028 0024                  		move.b	$24(a0),d0
0000B75C 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000B760 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000B764                            ; ===========================================================================
0000B764 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000B766 0000                       		dc.w loc_B798-Obj31_Index
0000B768 0000                       		dc.w loc_B7FE-Obj31_Index
0000B76A 0000                       		dc.w Obj31_Display2-Obj31_Index
0000B76C 0000                       		dc.w loc_B7E2-Obj31_Index
0000B76E                            
0000B76E 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000B770 0100                       		dc.b 1,	0
0000B772                            
0000B772 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000B775 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000B778 08CC 03                    		dc.b 8,	$CC, 3
0000B77B 06F0 02                    		dc.b 6,	$F0, 2
0000B77E                            
0000B77E 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000B782 5000 7800                  		dc.w $5000, $7800
0000B786 3800 5800                  		dc.w $3800, $5800
0000B78A B800                       		dc.w $B800
0000B78C                            ; ===========================================================================
0000B78C                            
0000B78C                            Obj31_Main:				; XREF: Obj31_Index
0000B78C 7000                       		moveq	#0,d0
0000B78E 1028 0028                  		move.b	$28(a0),d0
0000B792 6A00                       		bpl.s	loc_B6CE
0000B794 0240 007F                  		andi.w	#$7F,d0
0000B798 D040                       		add.w	d0,d0
0000B79A 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000B79E 115A 003A                  		move.b	(a2)+,$3A(a0)
0000B7A2 101A                       		move.b	(a2)+,d0
0000B7A4 1140 0028                  		move.b	d0,$28(a0)
0000B7A8                            
0000B7A8                            loc_B6CE:
0000B7A8 0200 000F                  		andi.b	#$F,d0
0000B7AC D040                       		add.w	d0,d0
0000B7AE 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000B7B2 4A40                       		tst.w	d0
0000B7B4 6600                       		bne.s	loc_B6E0
0000B7B6 3142 0032                  		move.w	d2,$32(a0)
0000B7BA                            
0000B7BA                            loc_B6E0:
0000B7BA 45F9 0000 B772             		lea	(Obj31_Var).l,a2
0000B7C0 2248                       		movea.l	a0,a1
0000B7C2 7203                       		moveq	#3,d1
0000B7C4 6000                       		bra.s	Obj31_MakeStomper
0000B7C6                            ; ===========================================================================
0000B7C6                            
0000B7C6                            Obj31_Loop:
0000B7C6 6100 0000                  		bsr.w	SingleObjLoad2
0000B7CA 6600 0000                  		bne.w	Obj31_SetSize
0000B7CE                            
0000B7CE                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000B7CE 135A 0024                  		move.b	(a2)+,$24(a1)
0000B7D2 12BC 0031                  		move.b	#$31,0(a1)
0000B7D6 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7DC 101A                       		move.b	(a2)+,d0
0000B7DE 4880                       		ext.w	d0
0000B7E0 D068 000C                  		add.w	$C(a0),d0
0000B7E4 3340 000C                  		move.w	d0,$C(a1)
0000B7E8 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000B7F0 337C 0300 0002             		move.w	#$300,2(a1)
0000B7F6 137C 0004 0001             		move.b	#4,1(a1)
0000B7FC 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B802 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B808 137C 0010 0019             		move.b	#$10,$19(a1)
0000B80E 3342 0034                  		move.w	d2,$34(a1)
0000B812 137C 0004 0018             		move.b	#4,$18(a1)
0000B818 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B81C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000B822 6600                       		bne.s	loc_B76A
0000B824 5341                       		subq.w	#1,d1
0000B826 1028 0028                  		move.b	$28(a0),d0
0000B82A 0240 00F0                  		andi.w	#$F0,d0
0000B82E 0C40 0020                  		cmpi.w	#$20,d0
0000B832 679A                       		beq.s	Obj31_MakeStomper
0000B834 137C 0038 0019             		move.b	#$38,$19(a1)
0000B83A 137C 0090 0020             		move.b	#$90,$20(a1)
0000B840 5241                       		addq.w	#1,d1
0000B842                            
0000B842                            loc_B76A:
0000B842 2348 003C                  		move.l	a0,$3C(a1)
0000B846 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000B84A                            
0000B84A 137C 0003 0018             		move.b	#3,$18(a1)
0000B850                            
0000B850                            Obj31_SetSize:
0000B850 7000                       		moveq	#0,d0
0000B852 1028 0028                  		move.b	$28(a0),d0
0000B856 E648                       		lsr.w	#3,d0
0000B858 0200 000E                  		andi.b	#$E,d0
0000B85C 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000B860 115A 0019                  		move.b	(a2)+,$19(a0)
0000B864 115A 001A                  		move.b	(a2)+,$1A(a0)
0000B868 6000                       		bra.s	loc_B798
0000B86A                            ; ===========================================================================
0000B86A 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000B86C 3009                       		dc.b $30, 9
0000B86E 100A                       		dc.b $10, $A
0000B870                            ; ===========================================================================
0000B870                            
0000B870                            loc_B798:				; XREF: Obj31_Index
0000B870 6100 0000                  		bsr.w	Obj31_Types
0000B874 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000B87A 7200                       		moveq	#0,d1
0000B87C 1228 0019                  		move.b	$19(a0),d1
0000B880 0641 000B                  		addi.w	#$B,d1
0000B884 343C 000C                  		move.w	#$C,d2
0000B888 363C 000D                  		move.w	#$D,d3
0000B88C 3828 0008                  		move.w	8(a0),d4
0000B890 6100 0000                  		bsr.w	SolidObject
0000B894 0828 0003 0022             		btst	#3,$22(a0)
0000B89A 6700                       		beq.s	Obj31_Display
0000B89C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B8A2 6400                       		bcc.s	Obj31_Display
0000B8A4 2448                       		movea.l	a0,a2
0000B8A6 41F8 D000                  		lea	($FFFFD000).w,a0
0000B8AA 4EB9 0000 0000             		jsr	KillSonic
0000B8B0 204A                       		movea.l	a2,a0
0000B8B2                            
0000B8B2                            Obj31_Display:
0000B8B2 6100 0000                  		bsr.w	DisplaySprite
0000B8B6 6000 0000                  		bra.w	Obj31_ChkDel
0000B8BA                            ; ===========================================================================
0000B8BA                            
0000B8BA                            loc_B7E2:				; XREF: Obj31_Index
0000B8BA 117C 0080 0016             		move.b	#$80,$16(a0)
0000B8C0 08E8 0004 0001             		bset	#4,1(a0)
0000B8C6 2268 003C                  		movea.l	$3C(a0),a1
0000B8CA 1029 0032                  		move.b	$32(a1),d0
0000B8CE EA08                       		lsr.b	#5,d0
0000B8D0 5600                       		addq.b	#3,d0
0000B8D2 1140 001A                  		move.b	d0,$1A(a0)
0000B8D6                            
0000B8D6                            loc_B7FE:				; XREF: Obj31_Index
0000B8D6 2268 003C                  		movea.l	$3C(a0),a1
0000B8DA 7000                       		moveq	#0,d0
0000B8DC 1029 0032                  		move.b	$32(a1),d0
0000B8E0 D068 0030                  		add.w	$30(a0),d0
0000B8E4 3140 000C                  		move.w	d0,$C(a0)
0000B8E8                            
0000B8E8                            Obj31_Display2:				; XREF: Obj31_Index
0000B8E8 6100 0000                  		bsr.w	DisplaySprite
0000B8EC                            
0000B8EC                            Obj31_ChkDel:				; XREF: Obj31_Display
0000B8EC 3028 0008                  		move.w	8(a0),d0
0000B8F0 0240 FF80                  		andi.w	#$FF80,d0
0000B8F4 3238 F700                  		move.w	($FFFFF700).w,d1
0000B8F8 0441 0080                  		subi.w	#$80,d1
0000B8FC 0241 FF80                  		andi.w	#$FF80,d1
0000B900 9041                       		sub.w	d1,d0
0000B902 0C40 0280                  		cmpi.w	#$280,d0
0000B906 6200 0000                  		bhi.w	DeleteObject
0000B90A 4E75                       		rts	
0000B90C                            ; ===========================================================================
0000B90C                            
0000B90C                            Obj31_Types:				; XREF: loc_B798
0000B90C 1028 0028                  		move.b	$28(a0),d0
0000B910 0240 000F                  		andi.w	#$F,d0
0000B914 D040                       		add.w	d0,d0
0000B916 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000B91A 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000B91E                            ; ===========================================================================
0000B91E 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000B920 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B922 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B924 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B926 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B928 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B92A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B92C                            ; ===========================================================================
0000B92C                            
0000B92C                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000B92C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000B930 7000                       		moveq	#0,d0
0000B932 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000B936 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000B93A 6700                       		beq.s	loc_B8A8	; if not, branch
0000B93C 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000B940 6A00                       		bpl.s	loc_B872
0000B942 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B948 6700                       		beq.s	loc_B8A0
0000B94A                            
0000B94A                            loc_B872:
0000B94A 4A68 0032                  		tst.w	$32(a0)
0000B94E 6700                       		beq.s	loc_B8A0
0000B950 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B954 0200 000F                  		andi.b	#$F,d0
0000B958 6600                       		bne.s	loc_B892
0000B95A 4A28 0001                  		tst.b	1(a0)
0000B95E 6A00                       		bpl.s	loc_B892
0000B960 303C 00C7                  		move.w	#$C7,d0
0000B964 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B96A                            
0000B96A                            loc_B892:
0000B96A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B970 6400                       		bcc.s	Obj31_Restart
0000B972 317C 0000 0032             		move.w	#0,$32(a0)
0000B978                            
0000B978                            loc_B8A0:
0000B978 317C 0000 0012             		move.w	#0,$12(a0)
0000B97E 6000                       		bra.s	Obj31_Restart
0000B980                            ; ===========================================================================
0000B980                            
0000B980                            loc_B8A8:				; XREF: Obj31_Type00
0000B980 3228 0034                  		move.w	$34(a0),d1
0000B984 B268 0032                  		cmp.w	$32(a0),d1
0000B988 6700                       		beq.s	Obj31_Restart
0000B98A 3028 0012                  		move.w	$12(a0),d0
0000B98E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B994 D168 0032                  		add.w	d0,$32(a0)
0000B998 B268 0032                  		cmp.w	$32(a0),d1
0000B99C 6200                       		bhi.s	Obj31_Restart
0000B99E 3141 0032                  		move.w	d1,$32(a0)
0000B9A2 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B9A8 4A28 0001                  		tst.b	1(a0)
0000B9AC 6A00                       		bpl.s	Obj31_Restart
0000B9AE 303C 00BD                  		move.w	#$BD,d0
0000B9B2 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000B9B8                            
0000B9B8                            Obj31_Restart:
0000B9B8 7000                       		moveq	#0,d0
0000B9BA 1028 0032                  		move.b	$32(a0),d0
0000B9BE D068 0030                  		add.w	$30(a0),d0
0000B9C2 3140 000C                  		move.w	d0,$C(a0)
0000B9C6 4E75                       		rts	
0000B9C8                            ; ===========================================================================
0000B9C8                            
0000B9C8                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000B9C8 4A68 0036                  		tst.w	$36(a0)
0000B9CC 6700                       		beq.s	loc_B938
0000B9CE 4A68 0038                  		tst.w	$38(a0)
0000B9D2 6700                       		beq.s	loc_B902
0000B9D4 5368 0038                  		subq.w	#1,$38(a0)
0000B9D8 6000                       		bra.s	loc_B97C
0000B9DA                            ; ===========================================================================
0000B9DA                            
0000B9DA                            loc_B902:
0000B9DA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B9DE 0200 000F                  		andi.b	#$F,d0
0000B9E2 6600                       		bne.s	loc_B91C
0000B9E4 4A28 0001                  		tst.b	1(a0)
0000B9E8 6A00                       		bpl.s	loc_B91C
0000B9EA 303C 00C7                  		move.w	#$C7,d0
0000B9EE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B9F4                            
0000B9F4                            loc_B91C:
0000B9F4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B9FA 6400                       		bcc.s	loc_B97C
0000B9FC 317C 0000 0032             		move.w	#0,$32(a0)
0000BA02 317C 0000 0012             		move.w	#0,$12(a0)
0000BA08 317C 0000 0036             		move.w	#0,$36(a0)
0000BA0E 6000                       		bra.s	loc_B97C
0000BA10                            ; ===========================================================================
0000BA10                            
0000BA10                            loc_B938:				; XREF: Obj31_Type01
0000BA10 3228 0034                  		move.w	$34(a0),d1
0000BA14 B268 0032                  		cmp.w	$32(a0),d1
0000BA18 6700                       		beq.s	loc_B97C
0000BA1A 3028 0012                  		move.w	$12(a0),d0
0000BA1E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BA24 D168 0032                  		add.w	d0,$32(a0)
0000BA28 B268 0032                  		cmp.w	$32(a0),d1
0000BA2C 6200                       		bhi.s	loc_B97C
0000BA2E 3141 0032                  		move.w	d1,$32(a0)
0000BA32 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BA38 317C 0001 0036             		move.w	#1,$36(a0)
0000BA3E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BA44 4A28 0001                  		tst.b	1(a0)
0000BA48 6A00                       		bpl.s	loc_B97C
0000BA4A 303C 00BD                  		move.w	#$BD,d0
0000BA4E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BA54                            
0000BA54                            loc_B97C:
0000BA54 6000 FF62                  		bra.w	Obj31_Restart
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BA58 3038 D008                  		move.w	($FFFFD008).w,d0
0000BA5C 9068 0008                  		sub.w	8(a0),d0
0000BA60 6400                       		bcc.s	loc_B98C
0000BA62 4440                       		neg.w	d0
0000BA64                            
0000BA64                            loc_B98C:
0000BA64 0C40 0090                  		cmpi.w	#$90,d0
0000BA68 6400                       		bcc.s	loc_B996
0000BA6A 5228 0028                  		addq.b	#1,$28(a0)
0000BA6E                            
0000BA6E                            loc_B996:
0000BA6E 6000 FF48                  		bra.w	Obj31_Restart
0000BA72                            ; ===========================================================================
0000BA72                            ; ---------------------------------------------------------------------------
0000BA72                            ; Object 45 - spiked metal block from beta version (MZ)
0000BA72                            ; ---------------------------------------------------------------------------
0000BA72                            
0000BA72                            Obj45:					; XREF: Obj_Index
0000BA72 7000                       		moveq	#0,d0
0000BA74 1028 0024                  		move.b	$24(a0),d0
0000BA78 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BA7C 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BA80                            ; ===========================================================================
0000BA80 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BA82 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BA84 0000                       		dc.w loc_BA8E-Obj45_Index
0000BA86 0000                       		dc.w Obj45_Display-Obj45_Index
0000BA88 0000                       		dc.w loc_BA7A-Obj45_Index
0000BA8A                            
0000BA8A 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BA8D 04E4 01                    		dc.b	4, $E4,	  1
0000BA90 0834 03                    		dc.b	8, $34,	  3
0000BA93 0628 02                    		dc.b	6, $28,	  2
0000BA96                            
0000BA96 3800                       word_B9BE:	dc.w $3800
0000BA98 A000                       		dc.w -$6000
0000BA9A 5000                       		dc.w $5000
0000BA9C                            ; ===========================================================================
0000BA9C                            
0000BA9C                            Obj45_Main:				; XREF: Obj45_Index
0000BA9C 7000                       		moveq	#0,d0
0000BA9E 1028 0028                  		move.b	$28(a0),d0
0000BAA2 D040                       		add.w	d0,d0
0000BAA4 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BAA8 45F9 0000 BA8A             		lea	(Obj45_Var).l,a2
0000BAAE 2248                       		movea.l	a0,a1
0000BAB0 7203                       		moveq	#3,d1
0000BAB2 6000                       		bra.s	Obj45_Load
0000BAB4                            ; ===========================================================================
0000BAB4                            
0000BAB4                            Obj45_Loop:
0000BAB4 6100 0000                  		bsr.w	SingleObjLoad2
0000BAB8 6600                       		bne.s	loc_BA52
0000BABA                            
0000BABA                            Obj45_Load:				; XREF: Obj45_Main
0000BABA 135A 0024                  		move.b	(a2)+,$24(a1)
0000BABE 12BC 0045                  		move.b	#$45,0(a1)
0000BAC2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BAC8 101A                       		move.b	(a2)+,d0
0000BACA 4880                       		ext.w	d0
0000BACC D068 0008                  		add.w	8(a0),d0
0000BAD0 3340 0008                  		move.w	d0,8(a1)
0000BAD4 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BADC 337C 0300 0002             		move.w	#$300,2(a1)
0000BAE2 137C 0004 0001             		move.b	#4,1(a1)
0000BAE8 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BAEE 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BAF4 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BAFA 137C 0020 0019             		move.b	#$20,$19(a1)
0000BB00 3342 0034                  		move.w	d2,$34(a1)
0000BB04 137C 0004 0018             		move.b	#4,$18(a1)
0000BB0A 0C12 0001                  		cmpi.b	#1,(a2)
0000BB0E 6600                       		bne.s	loc_BA40
0000BB10 137C 0091 0020             		move.b	#$91,$20(a1)
0000BB16                            
0000BB16                            loc_BA40:
0000BB16 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BB1A 2348 003C                  		move.l	a0,$3C(a1)
0000BB1E 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BB22                            
0000BB22 137C 0003 0018             		move.b	#3,$18(a1)
0000BB28                            
0000BB28                            loc_BA52:
0000BB28 117C 0010 0019             		move.b	#$10,$19(a0)
0000BB2E                            
0000BB2E                            Obj45_Solid:				; XREF: Obj45_Index
0000BB2E 3F28 0008                  		move.w	8(a0),-(sp)
0000BB32 6100 0000                  		bsr.w	Obj45_Move
0000BB36 323C 0017                  		move.w	#$17,d1
0000BB3A 343C 0020                  		move.w	#$20,d2
0000BB3E 363C 0020                  		move.w	#$20,d3
0000BB42 381F                       		move.w	(sp)+,d4
0000BB44 6100 0000                  		bsr.w	SolidObject
0000BB48 6100 0000                  		bsr.w	DisplaySprite
0000BB4C 6000 0000                  		bra.w	Obj45_ChkDel
0000BB50                            ; ===========================================================================
0000BB50                            
0000BB50                            loc_BA7A:				; XREF: Obj45_Index
0000BB50 2268 003C                  		movea.l	$3C(a0),a1
0000BB54 1029 0032                  		move.b	$32(a1),d0
0000BB58 0600 0010                  		addi.b	#$10,d0
0000BB5C EA08                       		lsr.b	#5,d0
0000BB5E 5600                       		addq.b	#3,d0
0000BB60 1140 001A                  		move.b	d0,$1A(a0)
0000BB64                            
0000BB64                            loc_BA8E:				; XREF: Obj45_Index
0000BB64 2268 003C                  		movea.l	$3C(a0),a1
0000BB68 7000                       		moveq	#0,d0
0000BB6A 1029 0032                  		move.b	$32(a1),d0
0000BB6E 4440                       		neg.w	d0
0000BB70 D068 0030                  		add.w	$30(a0),d0
0000BB74 3140 0008                  		move.w	d0,8(a0)
0000BB78                            
0000BB78                            Obj45_Display:				; XREF: Obj45_Index
0000BB78 6100 0000                  		bsr.w	DisplaySprite
0000BB7C                            
0000BB7C                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BB7C 3028 003A                  		move.w	$3A(a0),d0
0000BB80 0240 FF80                  		andi.w	#$FF80,d0
0000BB84 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB88 0441 0080                  		subi.w	#$80,d1
0000BB8C 0241 FF80                  		andi.w	#$FF80,d1
0000BB90 9041                       		sub.w	d1,d0
0000BB92 0C40 0280                  		cmpi.w	#$280,d0
0000BB96 6200 0000                  		bhi.w	DeleteObject
0000BB9A 4E75                       		rts	
0000BB9C                            
0000BB9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB9C                            
0000BB9C                            
0000BB9C                            Obj45_Move:				; XREF: Obj45_Solid
0000BB9C 7000                       		moveq	#0,d0
0000BB9E 1028 0028                  		move.b	$28(a0),d0
0000BBA2 D040                       		add.w	d0,d0
0000BBA4 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BBA8 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BBAC                            ; End of function Obj45_Move
0000BBAC                            
0000BBAC                            ; ===========================================================================
0000BBAC 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BBAE 0000                       		dc.w loc_BADA-off_BAD6
0000BBB0                            ; ===========================================================================
0000BBB0                            
0000BBB0                            loc_BADA:				; XREF: off_BAD6
0000BBB0 4A68 0036                  		tst.w	$36(a0)
0000BBB4 6700                       		beq.s	loc_BB08
0000BBB6 4A68 0038                  		tst.w	$38(a0)
0000BBBA 6700                       		beq.s	loc_BAEC
0000BBBC 5368 0038                  		subq.w	#1,$38(a0)
0000BBC0 6000                       		bra.s	loc_BB3C
0000BBC2                            ; ===========================================================================
0000BBC2                            
0000BBC2                            loc_BAEC:
0000BBC2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BBC8 6400                       		bcc.s	loc_BB3C
0000BBCA 317C 0000 0032             		move.w	#0,$32(a0)
0000BBD0 317C 0000 0010             		move.w	#0,$10(a0)
0000BBD6 317C 0000 0036             		move.w	#0,$36(a0)
0000BBDC 6000                       		bra.s	loc_BB3C
0000BBDE                            ; ===========================================================================
0000BBDE                            
0000BBDE                            loc_BB08:				; XREF: loc_BADA
0000BBDE 3228 0034                  		move.w	$34(a0),d1
0000BBE2 B268 0032                  		cmp.w	$32(a0),d1
0000BBE6 6700                       		beq.s	loc_BB3C
0000BBE8 3028 0010                  		move.w	$10(a0),d0
0000BBEC 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BBF2 D168 0032                  		add.w	d0,$32(a0)
0000BBF6 B268 0032                  		cmp.w	$32(a0),d1
0000BBFA 6200                       		bhi.s	loc_BB3C
0000BBFC 3141 0032                  		move.w	d1,$32(a0)
0000BC00 317C 0000 0010             		move.w	#0,$10(a0)
0000BC06 317C 0001 0036             		move.w	#1,$36(a0)
0000BC0C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BC12                            
0000BC12                            loc_BB3C:
0000BC12 7000                       		moveq	#0,d0
0000BC14 1028 0032                  		move.b	$32(a0),d0
0000BC18 4440                       		neg.w	d0
0000BC1A D068 0030                  		add.w	$30(a0),d0
0000BC1E 3140 0008                  		move.w	d0,8(a0)
0000BC22 4E75                       		rts	
0000BC24                            ; ===========================================================================
0000BC24                            ; ---------------------------------------------------------------------------
0000BC24                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BC24                            ; ---------------------------------------------------------------------------
0000BC24                            Map_obj31:
0000BC24                            	include "_maps\obj31.asm"
0000BC24                            ; ---------------------------------------------------------------------------
0000BC24                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BC24                            ; ---------------------------------------------------------------------------
0000BC24 0000                       		dc.w byte_BB64-Map_obj31
0000BC26 0000                       		dc.w byte_BB7E-Map_obj31
0000BC28 0000                       		dc.w byte_BB98-Map_obj31
0000BC2A 0000                       		dc.w byte_BB9E-Map_obj31
0000BC2C 0000                       		dc.w byte_BBA9-Map_obj31
0000BC2E 0000                       		dc.w byte_BBBE-Map_obj31
0000BC30 0000                       		dc.w byte_BBDD-Map_obj31
0000BC32 0000                       		dc.w byte_BC06-Map_obj31
0000BC34 0000                       		dc.w byte_BC06-Map_obj31
0000BC36 0000                       		dc.w byte_BC39-Map_obj31
0000BC38 0000                       		dc.w byte_BC53-Map_obj31
0000BC3A 05                         byte_BB64:	dc.b 5
0000BC3B F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000BC40 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000BC45 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BC4A F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000BC4F F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000BC54 05                         byte_BB7E:	dc.b 5
0000BC55 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000BC5A F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000BC5F F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000BC64 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000BC69 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000BC6E 01                         byte_BB98:	dc.b 1
0000BC6F DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000BC74 02                         byte_BB9E:	dc.b 2
0000BC75 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC7A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC7F 04                         byte_BBA9:	dc.b 4
0000BC80 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC85 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BC8A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC8F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC94 06                         byte_BBBE:	dc.b 6
0000BC95 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BC9A D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BC9F E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BCA4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BCA9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BCAE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BCB3 08                         byte_BBDD:	dc.b 8
0000BCB4 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BCB9 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BCBE C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BCC3 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BCC8 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BCCD F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BCD2 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BCD7 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BCDC 0A                         byte_BC06:	dc.b $A
0000BCDD 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000BCE2 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000BCE7 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BCEC B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BCF1 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BCF6 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BCFB E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BD00 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BD05 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BD0A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BD0F 05                         byte_BC39:	dc.b 5
0000BD10 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000BD15 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000BD1A F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000BD1F F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000BD24 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BD29 01                         byte_BC53:	dc.b 1
0000BD2A EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000BD30 00                         		even
0000BD30 00                         		even
0000BD30                            
0000BD30                            ; ---------------------------------------------------------------------------
0000BD30                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BD30                            ; ---------------------------------------------------------------------------
0000BD30                            Map_obj45:
0000BD30                            	include "_maps\obj45.asm"
0000BD30                            ; ---------------------------------------------------------------------------
0000BD30                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BD30                            ; ---------------------------------------------------------------------------
0000BD30 0000                       		dc.w byte_BC6C-Map_obj45
0000BD32 0000                       		dc.w byte_BC7C-Map_obj45
0000BD34 0000                       		dc.w byte_BC8C-Map_obj45
0000BD36 0000                       		dc.w byte_BC92-Map_obj45
0000BD38 0000                       		dc.w byte_BC9D-Map_obj45
0000BD3A 0000                       		dc.w byte_BCB2-Map_obj45
0000BD3C 0000                       		dc.w byte_BCD1-Map_obj45
0000BD3E 0000                       		dc.w byte_BCFA-Map_obj45
0000BD40 0000                       		dc.w byte_BCFA-Map_obj45
0000BD42 03                         byte_BC6C:	dc.b 3
0000BD43 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000BD48 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000BD4D F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000BD52 03                         byte_BC7C:	dc.b 3
0000BD53 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000BD58 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000BD5D 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000BD62 01                         byte_BC8C:	dc.b 1
0000BD63 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000BD68 02                         byte_BC92:	dc.b 2
0000BD69 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD6E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD73 04                         byte_BC9D:	dc.b 4
0000BD74 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD79 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD7E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD83 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD88 06                         byte_BCB2:	dc.b 6
0000BD89 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD8E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD93 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD98 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD9D F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BDA2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BDA7 08                         byte_BCD1:	dc.b 8
0000BDA8 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BDAD F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BDB2 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BDB7 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BDBC F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BDC1 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BDC6 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BDCB F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BDD0 08                         byte_BCFA:	dc.b 8
0000BDD1 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BDD6 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BDDB F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BDE0 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BDE5 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BDEA F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BDEF F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BDF4 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BDF9 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000BDFE F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000BE04 00                         		even
0000BE04 00                         		even
0000BE04                            
0000BE04                            ; ===========================================================================
0000BE04                            ; ---------------------------------------------------------------------------
0000BE04                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000BE04                            ; ---------------------------------------------------------------------------
0000BE04                            
0000BE04                            Obj32:					; XREF: Obj_Index
0000BE04 7000                       		moveq	#0,d0
0000BE06 1028 0024                  		move.b	$24(a0),d0
0000BE0A 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000BE0E 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000BE12                            ; ===========================================================================
0000BE12 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000BE14 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000BE16                            ; ===========================================================================
0000BE16                            
0000BE16                            Obj32_Main:				; XREF: Obj32_Index
0000BE16 5428 0024                  		addq.b	#2,$24(a0)
0000BE1A 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000BE22 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000BE28 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000BE2E 6700                       		beq.s	loc_BD60
0000BE30 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000BE36                            
0000BE36                            loc_BD60:
0000BE36 117C 0004 0001             		move.b	#4,1(a0)
0000BE3C 117C 0010 0019             		move.b	#$10,$19(a0)
0000BE42 117C 0004 0018             		move.b	#4,$18(a0)
0000BE48 5668 000C                  		addq.w	#3,$C(a0)
0000BE4C                            
0000BE4C                            Obj32_Pressed:				; XREF: Obj32_Index
0000BE4C 4A28 0001                  		tst.b	1(a0)
0000BE50 6A00                       		bpl.s	Obj32_Display
0000BE52 323C 001B                  		move.w	#$1B,d1
0000BE56 343C 0005                  		move.w	#5,d2
0000BE5A 363C 0005                  		move.w	#5,d3
0000BE5E 3828 0008                  		move.w	8(a0),d4
0000BE62 6100 0000                  		bsr.w	SolidObject
0000BE66 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000BE6C 1028 0028                  		move.b	$28(a0),d0
0000BE70 0240 000F                  		andi.w	#$F,d0
0000BE74 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000BE78 47F3 0000                  		lea	(a3,d0.w),a3
0000BE7C 7600                       		moveq	#0,d3
0000BE7E 0828 0006 0028             		btst	#6,$28(a0)
0000BE84 6700                       		beq.s	loc_BDB2
0000BE86 7607                       		moveq	#7,d3
0000BE88                            
0000BE88                            loc_BDB2:
0000BE88 4A28 0028                  		tst.b	$28(a0)
0000BE8C 6A00                       		bpl.s	loc_BDBE
0000BE8E 6100 0000                  		bsr.w	Obj32_MZBlock
0000BE92 6600                       		bne.s	loc_BDC8
0000BE94                            
0000BE94                            loc_BDBE:
0000BE94 4A28 0025                  		tst.b	$25(a0)
0000BE98 6600                       		bne.s	loc_BDC8
0000BE9A 0793                       		bclr	d3,(a3)
0000BE9C 6000                       		bra.s	loc_BDDE
0000BE9E                            ; ===========================================================================
0000BE9E                            
0000BE9E                            loc_BDC8:
0000BE9E 4A13                       		tst.b	(a3)
0000BEA0 6600                       		bne.s	loc_BDD6
0000BEA2 303C 00CD                  		move.w	#$CD,d0
0000BEA6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play switch sound
0000BEAC                            
0000BEAC                            loc_BDD6:
0000BEAC 07D3                       		bset	d3,(a3)
0000BEAE 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000BEB4                            
0000BEB4                            loc_BDDE:
0000BEB4 0828 0005 0028             		btst	#5,$28(a0)
0000BEBA 6700                       		beq.s	Obj32_Display
0000BEBC 5328 001E                  		subq.b	#1,$1E(a0)
0000BEC0 6A00                       		bpl.s	Obj32_Display
0000BEC2 117C 0007 001E             		move.b	#7,$1E(a0)
0000BEC8 0868 0001 001A             		bchg	#1,$1A(a0)
0000BECE                            
0000BECE                            Obj32_Display:
0000BECE 6100 0000                  		bsr.w	DisplaySprite
0000BED2 3028 0008                  		move.w	8(a0),d0
0000BED6 0240 FF80                  		andi.w	#$FF80,d0
0000BEDA 3238 F700                  		move.w	($FFFFF700).w,d1
0000BEDE 0441 0080                  		subi.w	#$80,d1
0000BEE2 0241 FF80                  		andi.w	#$FF80,d1
0000BEE6 9041                       		sub.w	d1,d0
0000BEE8 0C40 0280                  		cmpi.w	#$280,d0
0000BEEC 6200 0000                  		bhi.w	Obj32_Delete
0000BEF0 4E75                       		rts	
0000BEF2                            ; ===========================================================================
0000BEF2                            
0000BEF2                            Obj32_Delete:
0000BEF2 6100 0000                  		bsr.w	DeleteObject
0000BEF6 4E75                       		rts	
0000BEF8                            
0000BEF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BEF8                            
0000BEF8                            
0000BEF8                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000BEF8 3F03                       		move.w	d3,-(sp)
0000BEFA 3428 0008                  		move.w	8(a0),d2
0000BEFE 3628 000C                  		move.w	$C(a0),d3
0000BF02 0442 0010                  		subi.w	#$10,d2
0000BF06 5143                       		subq.w	#8,d3
0000BF08 383C 0020                  		move.w	#$20,d4
0000BF0C 3A3C 0010                  		move.w	#$10,d5
0000BF10 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000BF14 3C3C 005F                  		move.w	#$5F,d6
0000BF18                            
0000BF18                            Obj32_MZLoop:
0000BF18 4A29 0001                  		tst.b	1(a1)
0000BF1C 6A00                       		bpl.s	loc_BE4E
0000BF1E 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000BF22 6700                       		beq.s	loc_BE5E	; if yes, branch
0000BF24                            
0000BF24                            loc_BE4E:
0000BF24 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000BF28 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000BF2C                            
0000BF2C 361F                       		move.w	(sp)+,d3
0000BF2E 7000                       		moveq	#0,d0
0000BF30                            
0000BF30                            locret_BE5A:
0000BF30 4E75                       		rts	
0000BF32                            ; ===========================================================================
0000BF32 1010                       Obj32_MZData:	dc.b $10, $10
0000BF34                            ; ===========================================================================
0000BF34                            
0000BF34                            loc_BE5E:				; XREF: Obj32_MZBlock
0000BF34 7001                       		moveq	#1,d0
0000BF36 0240 003F                  		andi.w	#$3F,d0
0000BF3A D040                       		add.w	d0,d0
0000BF3C 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000BF40 121A                       		move.b	(a2)+,d1
0000BF42 4881                       		ext.w	d1
0000BF44 3029 0008                  		move.w	8(a1),d0
0000BF48 9041                       		sub.w	d1,d0
0000BF4A 9042                       		sub.w	d2,d0
0000BF4C 6400                       		bcc.s	loc_BE80
0000BF4E D241                       		add.w	d1,d1
0000BF50 D041                       		add.w	d1,d0
0000BF52 6500                       		bcs.s	loc_BE84
0000BF54 60CE                       		bra.s	loc_BE4E
0000BF56                            ; ===========================================================================
0000BF56                            
0000BF56                            loc_BE80:
0000BF56 B044                       		cmp.w	d4,d0
0000BF58 62CA                       		bhi.s	loc_BE4E
0000BF5A                            
0000BF5A                            loc_BE84:
0000BF5A 121A                       		move.b	(a2)+,d1
0000BF5C 4881                       		ext.w	d1
0000BF5E 3029 000C                  		move.w	$C(a1),d0
0000BF62 9041                       		sub.w	d1,d0
0000BF64 9043                       		sub.w	d3,d0
0000BF66 6400                       		bcc.s	loc_BE9A
0000BF68 D241                       		add.w	d1,d1
0000BF6A D041                       		add.w	d1,d0
0000BF6C 6500                       		bcs.s	loc_BE9E
0000BF6E 60B4                       		bra.s	loc_BE4E
0000BF70                            ; ===========================================================================
0000BF70                            
0000BF70                            loc_BE9A:
0000BF70 B045                       		cmp.w	d5,d0
0000BF72 62B0                       		bhi.s	loc_BE4E
0000BF74                            
0000BF74                            loc_BE9E:
0000BF74 361F                       		move.w	(sp)+,d3
0000BF76 7001                       		moveq	#1,d0
0000BF78 4E75                       		rts	
0000BF7A                            ; End of function Obj32_MZBlock
0000BF7A                            
0000BF7A                            ; ===========================================================================
0000BF7A                            ; ---------------------------------------------------------------------------
0000BF7A                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BF7A                            ; ---------------------------------------------------------------------------
0000BF7A                            Map_obj32:
0000BF7A                            	include "_maps\obj32.asm"
0000BF7A                            ; ---------------------------------------------------------------------------
0000BF7A                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BF7A                            ; ---------------------------------------------------------------------------
0000BF7A 0000                       		dc.w byte_BEAC-Map_obj32
0000BF7C 0000                       		dc.w byte_BEB7-Map_obj32
0000BF7E 0000                       		dc.w byte_BEC2-Map_obj32
0000BF80 0000                       		dc.w byte_BEB7-Map_obj32
0000BF82 02                         byte_BEAC:	dc.b 2
0000BF83 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000BF88 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000BF8D 02                         byte_BEB7:	dc.b 2
0000BF8E F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000BF93 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000BF98 02                         byte_BEC2:	dc.b 2
0000BF99 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000BF9E F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000BFA3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000BFA8                            		even
0000BFA8                            		even
0000BFA8                            
0000BFA8                            ; ===========================================================================
0000BFA8                            ; ---------------------------------------------------------------------------
0000BFA8                            ; Object 33 - pushable blocks (MZ, LZ)
0000BFA8                            ; ---------------------------------------------------------------------------
0000BFA8                            
0000BFA8                            Obj33:					; XREF: Obj_Index
0000BFA8 7000                       		moveq	#0,d0
0000BFAA 1028 0024                  		move.b	$24(a0),d0
0000BFAE 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000BFB2 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000BFB6                            ; ===========================================================================
0000BFB6 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000BFB8 0000                       		dc.w loc_BF6E-Obj33_Index
0000BFBA 0000                       		dc.w loc_C02C-Obj33_Index
0000BFBC                            
0000BFBC 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000BFBE 4001                       		dc.b $40, 1
0000BFC0                            ; ===========================================================================
0000BFC0                            
0000BFC0                            Obj33_Main:				; XREF: Obj33_Index
0000BFC0 5428 0024                  		addq.b	#2,$24(a0)
0000BFC4 117C 000F 0016             		move.b	#$F,$16(a0)
0000BFCA 117C 000F 0017             		move.b	#$F,$17(a0)
0000BFD0 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000BFD8 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000BFDE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000BFE4 6600                       		bne.s	loc_BF16
0000BFE6 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000BFEC                            
0000BFEC                            loc_BF16:
0000BFEC 117C 0004 0001             		move.b	#4,1(a0)
0000BFF2 117C 0003 0018             		move.b	#3,$18(a0)
0000BFF8 3168 0008 0034             		move.w	8(a0),$34(a0)
0000BFFE 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C004 7000                       		moveq	#0,d0
0000C006 1028 0028                  		move.b	$28(a0),d0
0000C00A D040                       		add.w	d0,d0
0000C00C 0240 000E                  		andi.w	#$E,d0
0000C010 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C014 115A 0019                  		move.b	(a2)+,$19(a0)
0000C018 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C01C 4A28 0028                  		tst.b	$28(a0)
0000C020 6700                       		beq.s	Obj33_ChkGone
0000C022 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C028                            
0000C028                            Obj33_ChkGone:
0000C028 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C02C 7000                       		moveq	#0,d0
0000C02E 1028 0023                  		move.b	$23(a0),d0
0000C032 6700                       		beq.s	loc_BF6E
0000C034 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C03A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C040 6600 0000                  		bne.w	DeleteObject
0000C044                            
0000C044                            loc_BF6E:				; XREF: Obj33_Index
0000C044 4A28 0032                  		tst.b	$32(a0)
0000C048 6600 0000                  		bne.w	loc_C046
0000C04C 7200                       		moveq	#0,d1
0000C04E 1228 0019                  		move.b	$19(a0),d1
0000C052 0641 000B                  		addi.w	#$B,d1
0000C056 343C 0010                  		move.w	#$10,d2
0000C05A 363C 0011                  		move.w	#$11,d3
0000C05E 3828 0008                  		move.w	8(a0),d4
0000C062 6100 0000                  		bsr.w	loc_C186
0000C066 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C06C 6600                       		bne.s	loc_BFC6	; if not, branch
0000C06E 08A8 0007 0028             		bclr	#7,$28(a0)
0000C074 3028 0008                  		move.w	8(a0),d0
0000C078 0C40 0A20                  		cmpi.w	#$A20,d0
0000C07C 6500                       		bcs.s	loc_BFC6
0000C07E 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C082 6400                       		bcc.s	loc_BFC6
0000C084 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C088 0440 001C                  		subi.w	#$1C,d0
0000C08C 3140 000C                  		move.w	d0,$C(a0)
0000C090 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C096 08E8 0007 0028             		bset	#7,$28(a0)
0000C09C                            
0000C09C                            loc_BFC6:
0000C09C 3028 0008                  		move.w	8(a0),d0
0000C0A0 0240 FF80                  		andi.w	#$FF80,d0
0000C0A4 3238 F700                  		move.w	($FFFFF700).w,d1
0000C0A8 0441 0080                  		subi.w	#$80,d1
0000C0AC 0241 FF80                  		andi.w	#$FF80,d1
0000C0B0 9041                       		sub.w	d1,d0
0000C0B2 0C40 0280                  		cmpi.w	#$280,d0
0000C0B6 6200                       		bhi.s	loc_BFE6
0000C0B8 6000 0000                  		bra.w	DisplaySprite
0000C0BC                            ; ===========================================================================
0000C0BC                            
0000C0BC                            loc_BFE6:
0000C0BC 3028 0034                  		move.w	$34(a0),d0
0000C0C0 0240 FF80                  		andi.w	#$FF80,d0
0000C0C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000C0C8 0441 0080                  		subi.w	#$80,d1
0000C0CC 0241 FF80                  		andi.w	#$FF80,d1
0000C0D0 9041                       		sub.w	d1,d0
0000C0D2 0C40 0280                  		cmpi.w	#$280,d0
0000C0D6 6200                       		bhi.s	loc_C016
0000C0D8 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C0DE 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C0E4 117C 0004 0024             		move.b	#4,$24(a0)
0000C0EA 6000                       		bra.s	loc_C02C
0000C0EC                            ; ===========================================================================
0000C0EC                            
0000C0EC                            loc_C016:
0000C0EC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C0F0 7000                       		moveq	#0,d0
0000C0F2 1028 0023                  		move.b	$23(a0),d0
0000C0F6 6700                       		beq.s	loc_C028
0000C0F8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C0FE                            
0000C0FE                            loc_C028:
0000C0FE 6000 0000                  		bra.w	DeleteObject
0000C102                            ; ===========================================================================
0000C102                            
0000C102                            loc_C02C:				; XREF: Obj33_Index
0000C102 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C106 6700                       		beq.s	locret_C044
0000C108 117C 0002 0024             		move.b	#2,$24(a0)
0000C10E 4228 0032                  		clr.b	$32(a0)
0000C112 4268 0010                  		clr.w	$10(a0)
0000C116 4268 0012                  		clr.w	$12(a0)
0000C11A                            
0000C11A                            locret_C044:
0000C11A 4E75                       		rts	
0000C11C                            ; ===========================================================================
0000C11C                            
0000C11C                            loc_C046:				; XREF: loc_BF6E
0000C11C 3F28 0008                  		move.w	8(a0),-(sp)
0000C120 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C126 6400                       		bcc.s	loc_C056
0000C128 6100 0000                  		bsr.w	SpeedToPos
0000C12C                            
0000C12C                            loc_C056:
0000C12C 0828 0001 0022             		btst	#1,$22(a0)
0000C132 6700                       		beq.s	loc_C0A0
0000C134 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C13A 4EB9 0000 0000             		jsr	ObjHitFloor
0000C140 4A41                       		tst.w	d1
0000C142 6A00 0000                  		bpl.w	loc_C09E
0000C146 D368 000C                  		add.w	d1,$C(a0)
0000C14A 4268 0012                  		clr.w	$12(a0)
0000C14E 08A8 0001 0022             		bclr	#1,$22(a0)
0000C154 3011                       		move.w	(a1),d0
0000C156 0240 03FF                  		andi.w	#$3FF,d0
0000C15A 0C40 016A                  		cmpi.w	#$16A,d0
0000C15E 6500                       		bcs.s	loc_C09E
0000C160 3028 0030                  		move.w	$30(a0),d0
0000C164 E640                       		asr.w	#3,d0
0000C166 3140 0010                  		move.w	d0,$10(a0)
0000C16A 117C 0001 0032             		move.b	#1,$32(a0)
0000C170 4268 000E                  		clr.w	$E(a0)
0000C174                            
0000C174                            loc_C09E:
0000C174 6000                       		bra.s	loc_C0E6
0000C176                            ; ===========================================================================
0000C176                            
0000C176                            loc_C0A0:
0000C176 4A68 0010                  		tst.w	$10(a0)
0000C17A 6700 0000                  		beq.w	loc_C0D6
0000C17E 6B00                       		bmi.s	loc_C0BC
0000C180 7600                       		moveq	#0,d3
0000C182 1628 0019                  		move.b	$19(a0),d3
0000C186 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C18C 4A41                       		tst.w	d1		; has block touched a wall?
0000C18E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C190 6000                       		bra.s	loc_C0E6
0000C192                            ; ===========================================================================
0000C192                            
0000C192                            loc_C0BC:
0000C192 7600                       		moveq	#0,d3
0000C194 1628 0019                  		move.b	$19(a0),d3
0000C198 4643                       		not.w	d3
0000C19A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C1A0 4A41                       		tst.w	d1		; has block touched a wall?
0000C1A2 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C1A4 6000                       		bra.s	loc_C0E6
0000C1A6                            ; ===========================================================================
0000C1A6                            
0000C1A6                            Obj33_StopPush:
0000C1A6 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C1AA 6000                       		bra.s	loc_C0E6
0000C1AC                            ; ===========================================================================
0000C1AC                            
0000C1AC                            loc_C0D6:
0000C1AC 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C1B4 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C1BA 6400                       		bcc.s	loc_C104
0000C1BC                            
0000C1BC                            loc_C0E6:
0000C1BC 7200                       		moveq	#0,d1
0000C1BE 1228 0019                  		move.b	$19(a0),d1
0000C1C2 0641 000B                  		addi.w	#$B,d1
0000C1C6 343C 0010                  		move.w	#$10,d2
0000C1CA 363C 0011                  		move.w	#$11,d3
0000C1CE 381F                       		move.w	(sp)+,d4
0000C1D0 6100 0000                  		bsr.w	loc_C186
0000C1D4 6100                       		bsr.s	Obj33_ChkLava
0000C1D6 6000 FEC4                  		bra.w	loc_BFC6
0000C1DA                            ; ===========================================================================
0000C1DA                            
0000C1DA                            loc_C104:
0000C1DA 381F                       		move.w	(sp)+,d4
0000C1DC 43F8 D000                  		lea	($FFFFD000).w,a1
0000C1E0 08A9 0003 0022             		bclr	#3,$22(a1)
0000C1E6 08A8 0003 0022             		bclr	#3,$22(a0)
0000C1EC 6000 FECE                  		bra.w	loc_BFE6
0000C1F0                            ; ===========================================================================
0000C1F0                            
0000C1F0                            Obj33_ChkLava:
0000C1F0 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C1F6 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C1F8 343C FFE0                  		move.w	#-$20,d2
0000C1FC 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C202 6700                       		beq.s	Obj33_LoadLava
0000C204 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C20A 6700                       		beq.s	Obj33_LoadLava
0000C20C 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C212 6700                       		beq.s	Obj33_LoadLava
0000C214 4E75                       		rts	
0000C216                            ; ===========================================================================
0000C216                            
0000C216                            Obj33_ChkLava2:
0000C216 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C21C 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C21E 343C 0020                  		move.w	#$20,d2
0000C222 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C228 6700                       		beq.s	Obj33_LoadLava
0000C22A 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C230 6700                       		beq.s	Obj33_LoadLava
0000C232                            
0000C232                            Obj33_NoLava:
0000C232 4E75                       		rts	
0000C234                            ; ===========================================================================
0000C234                            
0000C234                            Obj33_LoadLava:
0000C234 6100 0000                  		bsr.w	SingleObjLoad
0000C238 6600                       		bne.s	locret_C184
0000C23A 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C23E 3368 0008 0008             		move.w	8(a0),8(a1)
0000C244 D569 0008                  		add.w	d2,8(a1)
0000C248 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C24E 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C254 2348 003C                  		move.l	a0,$3C(a1)
0000C258                            
0000C258                            locret_C184:
0000C258 4E75                       		rts	
0000C25A                            ; ===========================================================================
0000C25A                            
0000C25A                            loc_C186:				; XREF: loc_BF6E
0000C25A 1028 0025                  		move.b	$25(a0),d0
0000C25E 6700 0000                  		beq.w	loc_C218
0000C262 5500                       		subq.b	#2,d0
0000C264 6600                       		bne.s	loc_C1AA
0000C266 6100 B45E                  		bsr.w	ExitPlatform
0000C26A 0829 0003 0022             		btst	#3,$22(a1)
0000C270 6600                       		bne.s	loc_C1A4
0000C272 4228 0025                  		clr.b	$25(a0)
0000C276 4E75                       		rts	
0000C278                            ; ===========================================================================
0000C278                            
0000C278                            loc_C1A4:
0000C278 3404                       		move.w	d4,d2
0000C27A 6000 B9A8                  		bra.w	MvSonicOnPtfm
0000C27E                            ; ===========================================================================
0000C27E                            
0000C27E                            loc_C1AA:
0000C27E 5500                       		subq.b	#2,d0
0000C280 6600                       		bne.s	loc_C1F2
0000C282 6100 0000                  		bsr.w	SpeedToPos
0000C286 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C28C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C292 4A41                       		tst.w	d1
0000C294 6A00 0000                  		bpl.w	locret_C1F0
0000C298 D368 000C                  		add.w	d1,$C(a0)
0000C29C 4268 0012                  		clr.w	$12(a0)
0000C2A0 4228 0025                  		clr.b	$25(a0)
0000C2A4 3011                       		move.w	(a1),d0
0000C2A6 0240 03FF                  		andi.w	#$3FF,d0
0000C2AA 0C40 016A                  		cmpi.w	#$16A,d0
0000C2AE 6500                       		bcs.s	locret_C1F0
0000C2B0 3028 0030                  		move.w	$30(a0),d0
0000C2B4 E640                       		asr.w	#3,d0
0000C2B6 3140 0010                  		move.w	d0,$10(a0)
0000C2BA 117C 0001 0032             		move.b	#1,$32(a0)
0000C2C0 4268 000E                  		clr.w	$E(a0)
0000C2C4                            
0000C2C4                            locret_C1F0:
0000C2C4 4E75                       		rts	
0000C2C6                            ; ===========================================================================
0000C2C6                            
0000C2C6                            loc_C1F2:
0000C2C6 6100 0000                  		bsr.w	SpeedToPos
0000C2CA 3028 0008                  		move.w	8(a0),d0
0000C2CE 0240 000C                  		andi.w	#$C,d0
0000C2D2 6600 0000                  		bne.w	locret_C2E4
0000C2D6 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C2DC 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C2E2 4268 0010                  		clr.w	$10(a0)
0000C2E6 5528 0025                  		subq.b	#2,$25(a0)
0000C2EA 4E75                       		rts	
0000C2EC                            ; ===========================================================================
0000C2EC                            
0000C2EC                            loc_C218:
0000C2EC 6100 0000                  		bsr.w	loc_FAC8
0000C2F0 4A44                       		tst.w	d4
0000C2F2 6700 0000                  		beq.w	locret_C2E4
0000C2F6 6B00 0000                  		bmi.w	locret_C2E4
0000C2FA 4A28 0032                  		tst.b	$32(a0)
0000C2FE 6700                       		beq.s	loc_C230
0000C300 6000 0000                  		bra.w	locret_C2E4
0000C304                            ; ===========================================================================
0000C304                            
0000C304                            loc_C230:
0000C304 4A40                       		tst.w	d0
0000C306 6700 0000                  		beq.w	locret_C2E4
0000C30A 6B00                       		bmi.s	loc_C268
0000C30C 0829 0000 0022             		btst	#0,$22(a1)
0000C312 6600 0000                  		bne.w	locret_C2E4
0000C316 3F00                       		move.w	d0,-(sp)
0000C318 7600                       		moveq	#0,d3
0000C31A 1628 0019                  		move.b	$19(a0),d3
0000C31E 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C324 301F                       		move.w	(sp)+,d0
0000C326 4A41                       		tst.w	d1
0000C328 6B00 0000                  		bmi.w	locret_C2E4
0000C32C 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C334 7001                       		moveq	#1,d0
0000C336 323C 0040                  		move.w	#$40,d1
0000C33A 6000                       		bra.s	loc_C294
0000C33C                            ; ===========================================================================
0000C33C                            
0000C33C                            loc_C268:
0000C33C 0829 0000 0022             		btst	#0,$22(a1)
0000C342 6700                       		beq.s	locret_C2E4
0000C344 3F00                       		move.w	d0,-(sp)
0000C346 7600                       		moveq	#0,d3
0000C348 1628 0019                  		move.b	$19(a0),d3
0000C34C 4643                       		not.w	d3
0000C34E 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C354 301F                       		move.w	(sp)+,d0
0000C356 4A41                       		tst.w	d1
0000C358 6B00                       		bmi.s	locret_C2E4
0000C35A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C362 70FF                       		moveq	#-1,d0
0000C364 323C FFC0                  		move.w	#-$40,d1
0000C368                            
0000C368                            loc_C294:
0000C368 43F8 D000                  		lea	($FFFFD000).w,a1
0000C36C D169 0008                  		add.w	d0,8(a1)
0000C370 3341 0014                  		move.w	d1,$14(a1)
0000C374 337C 0000 0010             		move.w	#0,$10(a1)
0000C37A 3F00                       		move.w	d0,-(sp)
0000C37C 303C 00A7                  		move.w	#$A7,d0
0000C380 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C386 301F                       		move.w	(sp)+,d0
0000C388 4A28 0028                  		tst.b	$28(a0)
0000C38C 6B00                       		bmi.s	locret_C2E4
0000C38E 3F00                       		move.w	d0,-(sp)
0000C390 4EB9 0000 0000             		jsr	ObjHitFloor
0000C396 301F                       		move.w	(sp)+,d0
0000C398 0C41 0004                  		cmpi.w	#4,d1
0000C39C 6F00                       		ble.s	loc_C2E0
0000C39E 317C 0400 0010             		move.w	#$400,$10(a0)
0000C3A4 4A40                       		tst.w	d0
0000C3A6 6A00                       		bpl.s	loc_C2D8
0000C3A8 4468 0010                  		neg.w	$10(a0)
0000C3AC                            
0000C3AC                            loc_C2D8:
0000C3AC 117C 0006 0025             		move.b	#6,$25(a0)
0000C3B2 6000                       		bra.s	locret_C2E4
0000C3B4                            ; ===========================================================================
0000C3B4                            
0000C3B4                            loc_C2E0:
0000C3B4 D368 000C                  		add.w	d1,$C(a0)
0000C3B8                            
0000C3B8                            locret_C2E4:
0000C3B8 4E75                       		rts	
0000C3BA                            ; ===========================================================================
0000C3BA                            ; ---------------------------------------------------------------------------
0000C3BA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C3BA                            ; ---------------------------------------------------------------------------
0000C3BA                            Map_obj33:
0000C3BA                            	include "_maps\obj33.asm"
0000C3BA                            ; ---------------------------------------------------------------------------
0000C3BA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C3BA                            ; ---------------------------------------------------------------------------
0000C3BA 0000                       		dc.w byte_C2EA-Map_obj33
0000C3BC 0000                       		dc.w byte_C2F0-Map_obj33
0000C3BE 01                         byte_C2EA:	dc.b 1
0000C3BF F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C3C4 04                         byte_C2F0:	dc.b 4
0000C3C5 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C3CA F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C3CF F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C3D4 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C3DA 00                         		even
0000C3DA 00                         		even
0000C3DA                            
0000C3DA                            ; ===========================================================================
0000C3DA                            ; ---------------------------------------------------------------------------
0000C3DA                            ; Object 34 - zone title cards
0000C3DA                            ; ---------------------------------------------------------------------------
0000C3DA                            
0000C3DA                            Obj34:					; XREF: Obj_Index
0000C3DA 7000                       		moveq	#0,d0
0000C3DC 1028 0024                  		move.b	$24(a0),d0
0000C3E0 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C3E4 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C3E8                            ; ===========================================================================
0000C3E8 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C3EA 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C3EC 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C3EE 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C3F0                            ; ===========================================================================
0000C3F0                            
0000C3F0                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C3F0 2248                       		movea.l	a0,a1
0000C3F2 7000                       		moveq	#0,d0
0000C3F4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C3F8 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C3FE 6600                       		bne.s	Obj34_CheckFZ
0000C400 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C402                            
0000C402                            Obj34_CheckFZ:
0000C402 3400                       		move.w	d0,d2
0000C404 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C40A 6600                       		bne.s	Obj34_LoadConfig
0000C40C 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C40E 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C410                            
0000C410                            Obj34_LoadConfig:
0000C410 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C416 E948                       		lsl.w	#4,d0
0000C418 D6C0                       		adda.w	d0,a3
0000C41A 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C420 7203                       		moveq	#3,d1
0000C422                            
0000C422                            Obj34_Loop:
0000C422 12BC 0034                  		move.b	#$34,0(a1)
0000C426 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C42A 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C42E 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C432 335A 000A                  		move.w	(a2)+,$A(a1)
0000C436 135A 0024                  		move.b	(a2)+,$24(a1)
0000C43A 101A                       		move.b	(a2)+,d0
0000C43C 6600                       		bne.s	Obj34_ActNumber
0000C43E 1002                       		move.b	d2,d0
0000C440                            
0000C440                            Obj34_ActNumber:
0000C440 0C00 0007                  		cmpi.b	#7,d0
0000C444 6600                       		bne.s	Obj34_MakeSprite
0000C446 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C44A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C450 6600                       		bne.s	Obj34_MakeSprite
0000C452 5300                       		subq.b	#1,d0
0000C454                            
0000C454                            Obj34_MakeSprite:
0000C454 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C458 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C460 337C 8580 0002             		move.w	#$8580,2(a1)
0000C466 137C 0078 0019             		move.b	#$78,$19(a1)
0000C46C 137C 0000 0001             		move.b	#0,1(a1)
0000C472 137C 0000 0018             		move.b	#0,$18(a1)
0000C478 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C47E 43E9 0040                  		lea	$40(a1),a1	; next object
0000C482 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C486                            
0000C486                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C486 7210                       		moveq	#$10,d1		; set horizontal speed
0000C488 3028 0030                  		move.w	$30(a0),d0
0000C48C B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C490 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C492 6C00                       		bge.s	Obj34_Move
0000C494 4441                       		neg.w	d1
0000C496                            
0000C496                            Obj34_Move:
0000C496 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C49A                            
0000C49A                            loc_C3C8:
0000C49A 3028 0008                  		move.w	8(a0),d0
0000C49E 6B00                       		bmi.s	locret_C3D8
0000C4A0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C4A4 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C4A6 6000 0000                  		bra.w	DisplaySprite
0000C4AA                            ; ===========================================================================
0000C4AA                            
0000C4AA                            locret_C3D8:
0000C4AA 4E75                       		rts	
0000C4AC                            ; ===========================================================================
0000C4AC                            
0000C4AC                            Obj34_Wait:				; XREF: Obj34_Index
0000C4AC 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C4B0 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C4B2 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C4B6 6000 0000                  		bra.w	DisplaySprite
0000C4BA                            ; ===========================================================================
0000C4BA                            
0000C4BA                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C4BA 4A28 0001                  		tst.b	1(a0)
0000C4BE 6A00                       		bpl.s	Obj34_ChangeArt
0000C4C0 7220                       		moveq	#$20,d1
0000C4C2 3028 0032                  		move.w	$32(a0),d0
0000C4C6 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C4CA 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C4CC 6C00                       		bge.s	Obj34_Move2
0000C4CE 4441                       		neg.w	d1
0000C4D0                            
0000C4D0                            Obj34_Move2:
0000C4D0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C4D4 3028 0008                  		move.w	8(a0),d0
0000C4D8 6B00                       		bmi.s	locret_C412
0000C4DA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C4DE 6400                       		bcc.s	locret_C412	; if yes, branch
0000C4E0 6000 0000                  		bra.w	DisplaySprite
0000C4E4                            ; ===========================================================================
0000C4E4                            
0000C4E4                            locret_C412:
0000C4E4 4E75                       		rts	
0000C4E6                            ; ===========================================================================
0000C4E6                            
0000C4E6                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C4E6 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C4EC 6600                       		bne.s	Obj34_Delete
0000C4EE 7002                       		moveq	#2,d0
0000C4F0 4EB9 0000 1580             		jsr	(LoadPLC).l	; load explosion patterns
0000C4F6 7000                       		moveq	#0,d0
0000C4F8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C4FC 0640 0015                  		addi.w	#$15,d0
0000C500 4EB9 0000 1580             		jsr	(LoadPLC).l	; load animal patterns
0000C506                            
0000C506                            Obj34_Delete:
0000C506 6000 0000                  		bra.w	DeleteObject
0000C50A                            ; ===========================================================================
0000C50A 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C50C 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C50E 00E4                       		dc.w $E4
0000C510 0206                       		dc.b 2,	6
0000C512 00EA                       		dc.w $EA
0000C514 0207                       		dc.b 2,	7
0000C516 00E0                       		dc.w $E0
0000C518 020A                       		dc.b 2,	$A
0000C51A                            ; ---------------------------------------------------------------------------
0000C51A                            ; Title	card configuration data
0000C51A                            ; Format:
0000C51A                            ; 4 bytes per item (YYYY XXXX)
0000C51A                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C51A                            ; ---------------------------------------------------------------------------
0000C51A 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C52A 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C53A 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C54A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C55A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C56A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C57A 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C58A                            ; ===========================================================================
0000C58A                            ; ---------------------------------------------------------------------------
0000C58A                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C58A                            ; ---------------------------------------------------------------------------
0000C58A                            
0000C58A                            Obj39:					; XREF: Obj_Index
0000C58A 7000                       		moveq	#0,d0
0000C58C 1028 0024                  		move.b	$24(a0),d0
0000C590 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C594 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C598                            ; ===========================================================================
0000C598 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C59A 0000                       		dc.w loc_C50C-Obj39_Index
0000C59C 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C59E                            ; ===========================================================================
0000C59E                            
0000C59E                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C59E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C5A2 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C5A4 4E75                       		rts	
0000C5A6                            ; ===========================================================================
0000C5A6                            
0000C5A6                            Obj39_Main:
0000C5A6 5428 0024                  		addq.b	#2,$24(a0)
0000C5AA 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C5B0 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C5B6 6700                       		beq.s	loc_C4EC	; if not, branch
0000C5B8 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C5BE                            
0000C5BE                            loc_C4EC:
0000C5BE 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C5C4 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C5CC 317C 855E 0002             		move.w	#$855E,2(a0)
0000C5D2 117C 0000 0001             		move.b	#0,1(a0)
0000C5D8 117C 0000 0018             		move.b	#0,$18(a0)
0000C5DE                            
0000C5DE                            loc_C50C:				; XREF: Obj39_Index
0000C5DE 7210                       		moveq	#$10,d1		; set horizontal speed
0000C5E0 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C5E6 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C5E8 6500                       		bcs.s	Obj39_Move
0000C5EA 4441                       		neg.w	d1
0000C5EC                            
0000C5EC                            Obj39_Move:
0000C5EC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C5F0 6000 0000                  		bra.w	DisplaySprite
0000C5F4                            ; ===========================================================================
0000C5F4                            
0000C5F4                            Obj39_SetWait:				; XREF: Obj39_Main
0000C5F4 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C5FA 5428 0024                  		addq.b	#2,$24(a0)
0000C5FE 4E75                       		rts	
0000C600                            ; ===========================================================================
0000C600                            
0000C600                            Obj39_Wait:				; XREF: Obj39_Index
0000C600 1038 F605                  		move.b	($FFFFF605).w,d0
0000C604 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C608 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C60A 0828 0000 001A             		btst	#0,$1A(a0)
0000C610 6600                       		bne.s	Obj39_Display
0000C612 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C616 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C618 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C61C 6000 0000                  		bra.w	DisplaySprite
0000C620                            ; ===========================================================================
0000C620                            
0000C620                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000C620 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000C624 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000C626 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000C62C 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000C630 6600                       		bne.s	Obj39_Display	; if yes, branch
0000C632 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000C638 6000                       		bra.s	Obj39_Display
0000C63A                            ; ===========================================================================
0000C63A                            
0000C63A                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000C63A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C640                            
0000C640                            Obj39_Display:				; XREF: Obj39_ChgMode
0000C640 6000 0000                  		bra.w	DisplaySprite
0000C644                            ; ===========================================================================
0000C644                            ; ---------------------------------------------------------------------------
0000C644                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000C644                            ; ---------------------------------------------------------------------------
0000C644                            
0000C644                            Obj3A:					; XREF: Obj_Index
0000C644 7000                       		moveq	#0,d0
0000C646 1028 0024                  		move.b	$24(a0),d0
0000C64A 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000C64E 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000C652                            ; ===========================================================================
0000C652 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000C654 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000C656 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C658 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000C65A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C65C 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000C65E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C660 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000C662 0000                       		dc.w loc_C766-Obj3A_Index
0000C664                            ; ===========================================================================
0000C664                            
0000C664                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000C664 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C668 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000C66A 4E75                       		rts	
0000C66C                            ; ===========================================================================
0000C66C                            
0000C66C                            Obj3A_Main:
0000C66C 2248                       		movea.l	a0,a1
0000C66E 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000C674 7206                       		moveq	#6,d1
0000C676                            
0000C676                            Obj3A_Loop:
0000C676 12BC 003A                  		move.b	#$3A,0(a1)
0000C67A 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000C67E 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000C682 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C686 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C68A 135A 0024                  		move.b	(a2)+,$24(a1)
0000C68E 101A                       		move.b	(a2)+,d0
0000C690 0C00 0006                  		cmpi.b	#6,d0
0000C694 6600                       		bne.s	loc_C5CA
0000C696 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000C69A                            
0000C69A                            loc_C5CA:
0000C69A 1340 001A                  		move.b	d0,$1A(a1)
0000C69E 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000C6A6 337C 8580 0002             		move.w	#$8580,2(a1)
0000C6AC 137C 0000 0001             		move.b	#0,1(a1)
0000C6B2 43E9 0040                  		lea	$40(a1),a1
0000C6B6 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000C6BA                            
0000C6BA                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000C6BA 7210                       		moveq	#$10,d1		; set horizontal speed
0000C6BC 3028 0030                  		move.w	$30(a0),d0
0000C6C0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C6C4 6700                       		beq.s	loc_C61A	; if yes, branch
0000C6C6 6C00                       		bge.s	Obj3A_Move
0000C6C8 4441                       		neg.w	d1
0000C6CA                            
0000C6CA                            Obj3A_Move:
0000C6CA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C6CE                            
0000C6CE                            loc_C5FE:				; XREF: loc_C61A
0000C6CE 3028 0008                  		move.w	8(a0),d0
0000C6D2 6B00                       		bmi.s	locret_C60E
0000C6D4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C6D8 6400                       		bcc.s	locret_C60E	; if yes, branch
0000C6DA 6000 0000                  		bra.w	DisplaySprite
0000C6DE                            ; ===========================================================================
0000C6DE                            
0000C6DE                            locret_C60E:
0000C6DE 4E75                       		rts	
0000C6E0                            ; ===========================================================================
0000C6E0                            
0000C6E0                            loc_C610:				; XREF: loc_C61A
0000C6E0 117C 000E 0024             		move.b	#$E,$24(a0)
0000C6E6 6000 0000                  		bra.w	Obj3A_ChkPos2
0000C6EA                            ; ===========================================================================
0000C6EA                            
0000C6EA                            loc_C61A:				; XREF: Obj3A_ChkPos
0000C6EA 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000C6F0 67EE                       		beq.s	loc_C610
0000C6F2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C6F8 66D4                       		bne.s	loc_C5FE
0000C6FA 5428 0024                  		addq.b	#2,$24(a0)
0000C6FE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C704                            
0000C704                            Obj3A_Wait:				; XREF: Obj3A_Index
0000C704 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C708 6600                       		bne.s	Obj3A_Display
0000C70A 5428 0024                  		addq.b	#2,$24(a0)
0000C70E                            
0000C70E                            Obj3A_Display:
0000C70E 6000 0000                  		bra.w	DisplaySprite
0000C712                            ; ===========================================================================
0000C712                            
0000C712                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000C712 6100 0000                  		bsr.w	DisplaySprite
0000C716 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000C71C 7000                       		moveq	#0,d0
0000C71E 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000C722 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000C724 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C728 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000C72E                            
0000C72E                            Obj3A_RingBonus:
0000C72E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C732 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000C734 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C738 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C73E                            
0000C73E                            Obj3A_ChkBonus:
0000C73E 4A40                       		tst.w	d0		; is there any bonus?
0000C740 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000C742 303C 00C5                  		move.w	#$C5,d0
0000C746 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C74C 5428 0024                  		addq.b	#2,$24(a0)
0000C750 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000C756 6600                       		bne.s	Obj3A_SetDelay
0000C758 5828 0024                  		addq.b	#4,$24(a0)
0000C75C                            
0000C75C                            Obj3A_SetDelay:
0000C75C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C762                            
0000C762                            locret_C692:
0000C762 4E75                       		rts	
0000C764                            ; ===========================================================================
0000C764                            
0000C764                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000C764 4EB9 0000 0000             		jsr	AddPoints
0000C76A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C76E 0200 0003                  		andi.b	#3,d0
0000C772 66EE                       		bne.s	locret_C692
0000C774 303C 00CD                  		move.w	#$CD,d0
0000C778 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C77E                            ; ===========================================================================
0000C77E                            
0000C77E                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000C77E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C782 0240 0007                  		andi.w	#7,d0
0000C786 E748                       		lsl.w	#3,d0
0000C788 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000C78C 0241 0003                  		andi.w	#3,d1
0000C790 D241                       		add.w	d1,d1
0000C792 D041                       		add.w	d1,d0
0000C794 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000C798 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000C79C 4A40                       		tst.w	d0
0000C79E 6600                       		bne.s	Obj3A_ChkSS
0000C7A0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000C7A6 6000                       		bra.s	Obj3A_Display2
0000C7A8                            ; ===========================================================================
0000C7A8                            
0000C7A8                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000C7A8 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000C7AC 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000C7B0 6700                       		beq.s	loc_C6EA	; if not, branch
0000C7B2 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000C7B8 6000                       		bra.s	Obj3A_Display2
0000C7BA                            ; ===========================================================================
0000C7BA                            
0000C7BA                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000C7BA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C7C0                            
0000C7C0                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000C7C0 6000 0000                  		bra.w	DisplaySprite
0000C7C4                            ; ===========================================================================
0000C7C4                            ; ---------------------------------------------------------------------------
0000C7C4                            ; Level	order array
0000C7C4                            ; ---------------------------------------------------------------------------
0000C7C4                            LevelOrder:	incbin	misc\lvl_ord.bin
0000C7F4                            		even
0000C7F4                            ; ===========================================================================
0000C7F4                            
0000C7F4                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000C7F4 7220                       		moveq	#$20,d1		; set horizontal speed
0000C7F6 3028 0032                  		move.w	$32(a0),d0
0000C7FA B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000C7FE 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000C800 6C00                       		bge.s	Obj3A_Move2
0000C802 4441                       		neg.w	d1
0000C804                            
0000C804                            Obj3A_Move2:
0000C804 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C808 3028 0008                  		move.w	8(a0),d0
0000C80C 6B00                       		bmi.s	locret_C748
0000C80E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C812 6400                       		bcc.s	locret_C748	; if yes, branch
0000C814 6000 0000                  		bra.w	DisplaySprite
0000C818                            ; ===========================================================================
0000C818                            
0000C818                            locret_C748:
0000C818 4E75                       		rts	
0000C81A                            ; ===========================================================================
0000C81A                            
0000C81A                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000C81A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C820 6600 0000                  		bne.w	DeleteObject
0000C824 5428 0024                  		addq.b	#2,$24(a0)
0000C828 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000C82C 303C 008D                  		move.w	#$8D,d0
0000C830 4EF9 0000 1396             		jmp	(PlaySound).l	; play FZ music
0000C836                            ; ===========================================================================
0000C836                            
0000C836                            loc_C766:				; XREF: Obj3A_Index
0000C836 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000C83A 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000C840 6700 0000                  		beq.w	DeleteObject
0000C844 4E75                       		rts	
0000C846                            ; ===========================================================================
0000C846 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000C84C 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000C84E FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000C854 0201                       		dc.b 2,	1
0000C856 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000C85C 0206                       		dc.b 2,	6
0000C85E 0520 0120 00EC             		dc.w $520, $120, $EC
0000C864 0202                       		dc.b 2,	2
0000C866 0540 0120 00FC             		dc.w $540, $120, $FC
0000C86C 0203                       		dc.b 2,	3
0000C86E 0560 0120 010C             		dc.w $560, $120, $10C
0000C874 0204                       		dc.b 2,	4
0000C876 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000C87C 0205                       		dc.b 2,	5
0000C87E                            ; ===========================================================================
0000C87E                            ; ---------------------------------------------------------------------------
0000C87E                            ; Object 7E - special stage results screen
0000C87E                            ; ---------------------------------------------------------------------------
0000C87E                            
0000C87E                            Obj7E:					; XREF: Obj_Index
0000C87E 7000                       		moveq	#0,d0
0000C880 1028 0024                  		move.b	$24(a0),d0
0000C884 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000C888 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000C88C                            ; ===========================================================================
0000C88C 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000C88E 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000C890 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C892 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000C894 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C896 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C898 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C89A 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000C89C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C89E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C8A0 0000                       		dc.w loc_C91A-Obj7E_Index
0000C8A2                            ; ===========================================================================
0000C8A2                            
0000C8A2                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000C8A2 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C8A6 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000C8A8 4E75                       		rts	
0000C8AA                            ; ===========================================================================
0000C8AA                            
0000C8AA                            Obj7E_Main:
0000C8AA 2248                       		movea.l	a0,a1
0000C8AC 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000C8B2 7203                       		moveq	#3,d1
0000C8B4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000C8BA 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000C8BC 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000C8BE                            
0000C8BE                            Obj7E_Loop:
0000C8BE 12BC 007E                  		move.b	#$7E,0(a1)
0000C8C2 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000C8C6 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C8CA 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C8CE 135A 0024                  		move.b	(a2)+,$24(a1)
0000C8D2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C8D6 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000C8DE 337C 8580 0002             		move.w	#$8580,2(a1)
0000C8E4 137C 0000 0001             		move.b	#0,1(a1)
0000C8EA 43E9 0040                  		lea	$40(a1),a1
0000C8EE 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000C8F2                            
0000C8F2 7007                       		moveq	#7,d0
0000C8F4 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000C8F8 6700                       		beq.s	loc_C842
0000C8FA 7000                       		moveq	#0,d0
0000C8FC 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000C900 6600                       		bne.s	loc_C842	; if not, branch
0000C902 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000C904 317C 0018 0008             		move.w	#$18,8(a0)
0000C90A 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000C910                            
0000C910                            loc_C842:
0000C910 1140 001A                  		move.b	d0,$1A(a0)
0000C914                            
0000C914                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000C914 7210                       		moveq	#$10,d1		; set horizontal speed
0000C916 3028 0030                  		move.w	$30(a0),d0
0000C91A B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C91E 6700                       		beq.s	loc_C86C	; if yes, branch
0000C920 6C00                       		bge.s	Obj7E_Move
0000C922 4441                       		neg.w	d1
0000C924                            
0000C924                            Obj7E_Move:
0000C924 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C928                            
0000C928                            loc_C85A:				; XREF: loc_C86C
0000C928 3028 0008                  		move.w	8(a0),d0
0000C92C 6B00                       		bmi.s	locret_C86A
0000C92E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C932 6400                       		bcc.s	locret_C86A	; if yes, branch
0000C934 6000 0000                  		bra.w	DisplaySprite
0000C938                            ; ===========================================================================
0000C938                            
0000C938                            locret_C86A:
0000C938 4E75                       		rts	
0000C93A                            ; ===========================================================================
0000C93A                            
0000C93A                            loc_C86C:				; XREF: Obj7E_ChkPos
0000C93A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C940 66E6                       		bne.s	loc_C85A
0000C942 5428 0024                  		addq.b	#2,$24(a0)
0000C946 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C94C 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000C952                            
0000C952                            Obj7E_Wait:				; XREF: Obj7E_Index
0000C952 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C956 6600                       		bne.s	Obj7E_Display
0000C958 5428 0024                  		addq.b	#2,$24(a0)
0000C95C                            
0000C95C                            Obj7E_Display:
0000C95C 6000 0000                  		bra.w	DisplaySprite
0000C960                            ; ===========================================================================
0000C960                            
0000C960                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000C960 6100 0000                  		bsr.w	DisplaySprite
0000C964 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000C96A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C96E 6700                       		beq.s	loc_C8C4	; if yes, branch
0000C970 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C976 700A                       		moveq	#10,d0		; add 10 to score
0000C978 4EB9 0000 0000             		jsr	AddPoints
0000C97E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C982 0200 0003                  		andi.b	#3,d0
0000C986 6600                       		bne.s	locret_C8EA
0000C988 303C 00CD                  		move.w	#$CD,d0
0000C98C 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C992                            ; ===========================================================================
0000C992                            
0000C992                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000C992 303C 00C5                  		move.w	#$C5,d0
0000C996 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C99C 5428 0024                  		addq.b	#2,$24(a0)
0000C9A0 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C9A6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000C9AC 6500                       		bcs.s	locret_C8EA	; if not, branch
0000C9AE 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000C9B4 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000C9B8                            
0000C9B8                            locret_C8EA:
0000C9B8 4E75                       		rts	
0000C9BA                            ; ===========================================================================
0000C9BA                            
0000C9BA                            Obj7E_Exit:				; XREF: Obj7E_Index
0000C9BA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C9C0 6000 0000                  		bra.w	DisplaySprite
0000C9C4                            ; ===========================================================================
0000C9C4                            
0000C9C4                            Obj7E_Continue:				; XREF: Obj7E_Index
0000C9C4 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000C9CA 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000C9D0 303C 00BF                  		move.w	#$BF,d0
0000C9D4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play continues music
0000C9DA 5428 0024                  		addq.b	#2,$24(a0)
0000C9DE 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000C9E4 6000 0000                  		bra.w	DisplaySprite
0000C9E8                            ; ===========================================================================
0000C9E8                            
0000C9E8                            loc_C91A:				; XREF: Obj7E_Index
0000C9E8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C9EC 0200 000F                  		andi.b	#$F,d0
0000C9F0 6600                       		bne.s	Obj7E_Display2
0000C9F2 0868 0000 001A             		bchg	#0,$1A(a0)
0000C9F8                            
0000C9F8                            Obj7E_Display2:
0000C9F8 6000 0000                  		bra.w	DisplaySprite
0000C9FC                            ; ===========================================================================
0000C9FC 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CA02 0200                       		dc.b 2,	0		; rountine number, frame number
0000CA04 0320 0120 0118             		dc.w $320, $120, $118
0000CA0A 0201                       		dc.b 2,	1
0000CA0C 0360 0120 0128             		dc.w $360, $120, $128
0000CA12 0202                       		dc.b 2,	2
0000CA14 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CA1A 0203                       		dc.b 2,	3
0000CA1C 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CA22 0206                       		dc.b 2,	6
0000CA24                            ; ===========================================================================
0000CA24                            ; ---------------------------------------------------------------------------
0000CA24                            ; Object 7F - chaos emeralds from the special stage results screen
0000CA24                            ; ---------------------------------------------------------------------------
0000CA24                            
0000CA24                            Obj7F:					; XREF: Obj_Index
0000CA24 7000                       		moveq	#0,d0
0000CA26 1028 0024                  		move.b	$24(a0),d0
0000CA2A 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CA2E 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CA32                            ; ===========================================================================
0000CA32 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CA34 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CA36                            
0000CA36                            ; ---------------------------------------------------------------------------
0000CA36                            ; X-axis positions for chaos emeralds
0000CA36                            ; ---------------------------------------------------------------------------
0000CA36 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CA42                            ; ===========================================================================
0000CA42                            
0000CA42                            Obj7F_Main:				; XREF: Obj7F_Index
0000CA42 2248                       		movea.l	a0,a1
0000CA44 45F9 0000 CA36             		lea	(Obj7F_PosData).l,a2
0000CA4A 7400                       		moveq	#0,d2
0000CA4C 7200                       		moveq	#0,d1
0000CA4E 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CA52 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CA54 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CA58                            
0000CA58                            Obj7F_Loop:
0000CA58 12BC 007F                  		move.b	#$7F,0(a1)
0000CA5C 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CA60 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CA66 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CA6A 1633 2000                  		move.b	(a3,d2.w),d3
0000CA6E 1343 001A                  		move.b	d3,$1A(a1)
0000CA72 1343 001C                  		move.b	d3,$1C(a1)
0000CA76 5202                       		addq.b	#1,d2
0000CA78 5429 0024                  		addq.b	#2,$24(a1)
0000CA7C 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CA84 337C 8541 0002             		move.w	#$8541,2(a1)
0000CA8A 137C 0000 0001             		move.b	#0,1(a1)
0000CA90 43E9 0040                  		lea	$40(a1),a1	; next object
0000CA94 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CA98                            
0000CA98                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CA98 1028 001A                  		move.b	$1A(a0),d0
0000CA9C 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CAA2 0C00 0006                  		cmpi.b	#6,d0
0000CAA6 6600                       		bne.s	Obj7F_Display
0000CAA8 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CAAE                            
0000CAAE                            Obj7F_Display:
0000CAAE 6000 0000                  		bra.w	DisplaySprite
0000CAB2                            ; ===========================================================================
0000CAB2                            ; ---------------------------------------------------------------------------
0000CAB2                            ; Sprite mappings - zone title cards
0000CAB2                            ; ---------------------------------------------------------------------------
0000CAB2 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CAB4 0000                       		dc.w byte_CA2C-Map_obj34
0000CAB6 0000                       		dc.w byte_CA5A-Map_obj34
0000CAB8 0000                       		dc.w byte_CA7A-Map_obj34
0000CABA 0000                       		dc.w byte_CAA8-Map_obj34
0000CABC 0000                       		dc.w byte_CADC-Map_obj34
0000CABE 0000                       		dc.w byte_CB10-Map_obj34
0000CAC0 0000                       		dc.w byte_CB26-Map_obj34
0000CAC2 0000                       		dc.w byte_CB31-Map_obj34
0000CAC4 0000                       		dc.w byte_CB3C-Map_obj34
0000CAC6 0000                       		dc.w byte_CB47-Map_obj34
0000CAC8 0000                       		dc.w byte_CB8A-Map_obj34
0000CACA 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000CACB F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000CAD0 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000CAD5 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000CADA F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000CADF F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CAE4 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000CAE9 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000CAEE F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000CAF3 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000CAF8 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000CAF9 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000CAFE F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000CB03 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000CB08 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000CB0D F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000CB12 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000CB17 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000CB1C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CB21 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000CB26 06                         byte_CA5A:	dc.b 6			; MARBLE
0000CB27 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000CB2C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CB31 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000CB36 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000CB3B F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000CB40 F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000CB45 00                         		dc.b 0
0000CB46 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000CB47 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000CB4C F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000CB51 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000CB56 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000CB5B F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000CB60 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000CB65 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000CB6A F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000CB6F F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000CB74 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000CB75 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000CB7A F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000CB7F F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000CB84 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CB89 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000CB8E F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000CB93 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000CB98 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000CB9D F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000CBA2 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000CBA7 00                         		dc.b 0
0000CBA8 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000CBA9 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000CBAE F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000CBB3 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000CBB8 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000CBBD F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000CBC2 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000CBC7 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000CBCC F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000CBD1 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000CBD6 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000CBDB 00                         		dc.b 0
0000CBDC 04                         byte_CB10:	dc.b 4			; ZONE
0000CBDD F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000CBE2 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000CBE7 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000CBEC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CBF1 00                         		dc.b 0
0000CBF2 02                         byte_CB26:	dc.b 2			; ACT 1
0000CBF3 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CBF8 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000CBFD 02                         byte_CB31:	dc.b 2			; ACT 2
0000CBFE 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CC03 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000CC08 02                         byte_CB3C:	dc.b 2			; ACT 3
0000CC09 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CC0E F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000CC13 0D                         byte_CB47:	dc.b $D			; Oval
0000CC14 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000CC19 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000CC1E EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000CC23 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000CC28 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000CC2D 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000CC32 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000CC37 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000CC3C EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000CC41 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000CC46 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000CC4B 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000CC50 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000CC55 00                         		dc.b 0
0000CC56 05                         byte_CB8A:	dc.b 5			; FINAL
0000CC57 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000CC5C F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000CC61 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CC66 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000CC6B F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000CC70                            		even
0000CC70                            ; ---------------------------------------------------------------------------
0000CC70                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CC70                            ; ---------------------------------------------------------------------------
0000CC70                            Map_obj39:
0000CC70                            	include "_maps\obj39.asm"
0000CC70                            ; ---------------------------------------------------------------------------
0000CC70                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CC70                            ; ---------------------------------------------------------------------------
0000CC70 0000                       		dc.w byte_CBAC-Map_obj39
0000CC72 0000                       		dc.w byte_CBB7-Map_obj39
0000CC74 0000                       		dc.w byte_CBC2-Map_obj39
0000CC76 0000                       		dc.w byte_CBCD-Map_obj39
0000CC78 02                         byte_CBAC:	dc.b 2
0000CC79 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000CC7E F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000CC83 02                         byte_CBB7:	dc.b 2
0000CC84 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000CC89 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000CC8E 02                         byte_CBC2:	dc.b 2
0000CC8F F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000CC94 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000CC99 02                         byte_CBCD:	dc.b 2
0000CC9A F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000CC9F F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000CCA4                            		even
0000CCA4                            		even
0000CCA4                            
0000CCA4                            ; ---------------------------------------------------------------------------
0000CCA4                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000CCA4                            ; ---------------------------------------------------------------------------
0000CCA4 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000CCA6 0000                       		dc.w byte_CC13-Map_obj3A
0000CCA8 0000                       		dc.w byte_CC32-Map_obj3A
0000CCAA 0000                       		dc.w byte_CC51-Map_obj3A
0000CCAC 0000                       		dc.w byte_CC75-Map_obj3A
0000CCAE FF6F                       		dc.w byte_CB47-Map_obj3A
0000CCB0 FF4E                       		dc.w byte_CB26-Map_obj3A
0000CCB2 FF59                       		dc.w byte_CB31-Map_obj3A
0000CCB4 FF64                       		dc.w byte_CB3C-Map_obj3A
0000CCB6 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000CCB7 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000CCBC F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000CCC1 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000CCC6 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000CCCB F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000CCD0 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000CCD5 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000CCDA F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000CCDF 06                         byte_CC13:	dc.b 6			; PASSED
0000CCE0 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000CCE5 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CCEA F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000CCEF F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000CCF4 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CCF9 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000CCFE 06                         byte_CC32:	dc.b 6			; SCORE
0000CCFF F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CD04 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CD09 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CD0E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CD13 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CD18 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CD1D 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000CD1E F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000CD23 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CD28 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CD2D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CD32 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CD37 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000CD3C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CD41 07                         byte_CC75:	dc.b 7			; RING BONUS
0000CD42 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CD47 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CD4C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CD51 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CD56 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CD5B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CD60 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CD66 00                         		even
0000CD66                            ; ---------------------------------------------------------------------------
0000CD66                            ; Sprite mappings - special stage results screen
0000CD66                            ; ---------------------------------------------------------------------------
0000CD66 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000CD68 0000                       		dc.w byte_CCEE-Map_obj7E
0000CD6A 0000                       		dc.w byte_CD0D-Map_obj7E
0000CD6C FEAD                       		dc.w byte_CB47-Map_obj7E
0000CD6E 0000                       		dc.w byte_CD31-Map_obj7E
0000CD70 0000                       		dc.w byte_CD46-Map_obj7E
0000CD72 0000                       		dc.w byte_CD5B-Map_obj7E
0000CD74 0000                       		dc.w byte_CD6B-Map_obj7E
0000CD76 0000                       		dc.w byte_CDA8-Map_obj7E
0000CD78 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000CD79 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000CD7E F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000CD83 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000CD88 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000CD8D F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000CD92 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000CD97 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000CD9C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CDA1 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000CDA6 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000CDAB F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000CDB0 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000CDB5 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000CDBA 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000CDBB F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CDC0 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CDC5 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CDCA F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CDCF F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CDD4 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CDD9 07                         byte_CD0D:	dc.b 7
0000CDDA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CDDF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CDE4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CDE9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CDEE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CDF3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CDF8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CDFD 04                         byte_CD31:	dc.b 4
0000CDFE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CE03 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CE08 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CE0D F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000CE12 04                         byte_CD46:	dc.b 4
0000CE13 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CE18 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CE1D F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CE22 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000CE27 03                         byte_CD5B:	dc.b 3
0000CE28 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CE2D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CE32 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CE37 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000CE38 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000CE3D F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000CE42 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000CE47 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000CE4C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CE51 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000CE56 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000CE5B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000CE60 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CE65 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000CE6A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000CE6F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000CE74 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000CE75 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000CE7A F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000CE7F F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000CE84 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000CE89 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000CE8E F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000CE93 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000CE98 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000CE9D F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000CEA2 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000CEA7 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000CEAC F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000CEB1 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000CEB6 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000CEBB F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000CEC0                            		even
0000CEC0                            ; ---------------------------------------------------------------------------
0000CEC0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CEC0                            ; ---------------------------------------------------------------------------
0000CEC0                            Map_obj7F:
0000CEC0                            	include "_maps\obj7F.asm"
0000CEC0                            ; ---------------------------------------------------------------------------
0000CEC0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CEC0                            ; ---------------------------------------------------------------------------
0000CEC0 0000                       		dc.w byte_CE02-Map_obj7F
0000CEC2 0000                       		dc.w byte_CE08-Map_obj7F
0000CEC4 0000                       		dc.w byte_CE0E-Map_obj7F
0000CEC6 0000                       		dc.w byte_CE14-Map_obj7F
0000CEC8 0000                       		dc.w byte_CE1A-Map_obj7F
0000CECA 0000                       		dc.w byte_CE20-Map_obj7F
0000CECC 0000                       		dc.w byte_CE26-Map_obj7F
0000CECE 01                         byte_CE02:	dc.b 1
0000CECF F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000CED4 01                         byte_CE08:	dc.b 1
0000CED5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CEDA 01                         byte_CE0E:	dc.b 1
0000CEDB F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000CEE0 01                         byte_CE14:	dc.b 1
0000CEE1 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000CEE6 01                         byte_CE1A:	dc.b 1
0000CEE7 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000CEEC 01                         byte_CE20:	dc.b 1
0000CEED F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000CEF2 00                         byte_CE26:	dc.b 0			; Blank frame
0000CEF4 00                         		even
0000CEF4 00                         		even
0000CEF4                            
0000CEF4                            ; ===========================================================================
0000CEF4                            ; ---------------------------------------------------------------------------
0000CEF4                            ; Object 36 - spikes
0000CEF4                            ; ---------------------------------------------------------------------------
0000CEF4                            
0000CEF4                            Obj36:					; XREF: Obj_Index
0000CEF4 7000                       		moveq	#0,d0
0000CEF6 1028 0024                  		move.b	$24(a0),d0
0000CEFA 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000CEFE 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000CF02                            ; ===========================================================================
0000CF02 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000CF04 0000                       		dc.w Obj36_Solid-Obj36_Index
0000CF06                            
0000CF06 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000CF08 0110                       		dc.b 1,	$10
0000CF0A 0204                       		dc.b 2,	4
0000CF0C 031C                       		dc.b 3,	$1C
0000CF0E 0440                       		dc.b 4,	$40
0000CF10 0510                       		dc.b 5,	$10
0000CF12                            ; ===========================================================================
0000CF12                            
0000CF12                            Obj36_Main:				; XREF: Obj36_Index
0000CF12 5428 0024                  		addq.b	#2,$24(a0)
0000CF16 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000CF1E 317C 051B 0002             		move.w	#$51B,2(a0)
0000CF24 0028 0004 0001             		ori.b	#4,1(a0)
0000CF2A 117C 0004 0018             		move.b	#4,$18(a0)
0000CF30 1028 0028                  		move.b	$28(a0),d0
0000CF34 0228 000F 0028             		andi.b	#$F,$28(a0)
0000CF3A 0240 00F0                  		andi.w	#$F0,d0
0000CF3E 43F9 0000 CF06             		lea	(Obj36_Var).l,a1
0000CF44 E648                       		lsr.w	#3,d0
0000CF46 D2C0                       		adda.w	d0,a1
0000CF48 1159 001A                  		move.b	(a1)+,$1A(a0)
0000CF4C 1159 0019                  		move.b	(a1)+,$19(a0)
0000CF50 3168 0008 0030             		move.w	8(a0),$30(a0)
0000CF56 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000CF5C                            
0000CF5C                            Obj36_Solid:				; XREF: Obj36_Index
0000CF5C 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000CF60 343C 0004                  		move.w	#4,d2
0000CF64 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000CF6A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000CF6C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000CF72 6600                       		bne.s	Obj36_Upright	; if not, branch
0000CF74 343C 0014                  		move.w	#$14,d2
0000CF78                            
0000CF78                            ; Spikes types $1x and $5x face	sideways
0000CF78                            
0000CF78                            Obj36_SideWays:				; XREF: Obj36_Solid
0000CF78 323C 001B                  		move.w	#$1B,d1
0000CF7C 3602                       		move.w	d2,d3
0000CF7E 5243                       		addq.w	#1,d3
0000CF80 3828 0008                  		move.w	8(a0),d4
0000CF84 6100 0000                  		bsr.w	SolidObject
0000CF88 0828 0003 0022             		btst	#3,$22(a0)
0000CF8E 6600                       		bne.s	Obj36_Display
0000CF90 0C44 0001                  		cmpi.w	#1,d4
0000CF94 6700                       		beq.s	Obj36_Hurt
0000CF96 6000                       		bra.s	Obj36_Display
0000CF98                            ; ===========================================================================
0000CF98                            
0000CF98                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000CF98                            
0000CF98                            Obj36_Upright:				; XREF: Obj36_Solid
0000CF98 7200                       		moveq	#0,d1
0000CF9A 1228 0019                  		move.b	$19(a0),d1
0000CF9E 0641 000B                  		addi.w	#$B,d1
0000CFA2 343C 0010                  		move.w	#$10,d2
0000CFA6 363C 0011                  		move.w	#$11,d3
0000CFAA 3828 0008                  		move.w	8(a0),d4
0000CFAE 6100 0000                  		bsr.w	SolidObject
0000CFB2 0828 0003 0022             		btst	#3,$22(a0)
0000CFB8 6600                       		bne.s	Obj36_Hurt
0000CFBA 4A44                       		tst.w	d4
0000CFBC 6A00                       		bpl.s	Obj36_Display
0000CFBE                            
0000CFBE                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000CFBE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000CFC2 6600                       		bne.s	Obj36_Display	; if yes, branch
0000CFC4 2F08                       		move.l	a0,-(sp)
0000CFC6 2448                       		movea.l	a0,a2
0000CFC8 41F8 D000                  		lea	($FFFFD000).w,a0
0000CFCC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CFD2 6400                       		bcc.s	loc_CF20
0000CFD4 2628 000C                  		move.l	$C(a0),d3
0000CFD8 3028 0012                  		move.w	$12(a0),d0
0000CFDC 48C0                       		ext.l	d0
0000CFDE E180                       		asl.l	#8,d0
0000CFE0 9680                       		sub.l	d0,d3
0000CFE2 2143 000C                  		move.l	d3,$C(a0)
0000CFE6 4EB9 0000 0000             		jsr	HurtSonic
0000CFEC                            
0000CFEC                            loc_CF20:
0000CFEC 205F                       		movea.l	(sp)+,a0
0000CFEE                            
0000CFEE                            Obj36_Display:
0000CFEE 6100 0000                  		bsr.w	DisplaySprite
0000CFF2 3028 0030                  		move.w	$30(a0),d0
0000CFF6 0240 FF80                  		andi.w	#$FF80,d0
0000CFFA 3238 F700                  		move.w	($FFFFF700).w,d1
0000CFFE 0441 0080                  		subi.w	#$80,d1
0000D002 0241 FF80                  		andi.w	#$FF80,d1
0000D006 9041                       		sub.w	d1,d0
0000D008 0C40 0280                  		cmpi.w	#$280,d0
0000D00C 6200 0000                  		bhi.w	DeleteObject
0000D010 4E75                       		rts	
0000D012                            ; ===========================================================================
0000D012                            
0000D012                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D012 7000                       		moveq	#0,d0
0000D014 1028 0028                  		move.b	$28(a0),d0
0000D018 D040                       		add.w	d0,d0
0000D01A 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D01E 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D022                            ; ===========================================================================
0000D022 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D024 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D026 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D028                            ; ===========================================================================
0000D028                            
0000D028                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D028 4E75                       		rts			; don't move the object
0000D02A                            ; ===========================================================================
0000D02A                            
0000D02A                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D02A 6100 0000                  		bsr.w	Obj36_Wait
0000D02E 7000                       		moveq	#0,d0
0000D030 1028 0034                  		move.b	$34(a0),d0
0000D034 D068 0032                  		add.w	$32(a0),d0
0000D038 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D03C 4E75                       		rts	
0000D03E                            ; ===========================================================================
0000D03E                            
0000D03E                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D03E 6100 0000                  		bsr.w	Obj36_Wait
0000D042 7000                       		moveq	#0,d0
0000D044 1028 0034                  		move.b	$34(a0),d0
0000D048 D068 0030                  		add.w	$30(a0),d0
0000D04C 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D050 4E75                       		rts	
0000D052                            ; ===========================================================================
0000D052                            
0000D052                            Obj36_Wait:
0000D052 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D056 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D058 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D05C 6600                       		bne.s	locret_CFE6
0000D05E 4A28 0001                  		tst.b	1(a0)
0000D062 6A00                       		bpl.s	locret_CFE6
0000D064 303C 00B6                  		move.w	#$B6,d0
0000D068 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D06E 6000                       		bra.s	locret_CFE6
0000D070                            ; ===========================================================================
0000D070                            
0000D070                            loc_CFA4:
0000D070 4A68 0036                  		tst.w	$36(a0)
0000D074 6700                       		beq.s	loc_CFC6
0000D076 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D07C 6400                       		bcc.s	locret_CFE6
0000D07E 317C 0000 0034             		move.w	#0,$34(a0)
0000D084 317C 0000 0036             		move.w	#0,$36(a0)
0000D08A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D090 6000                       		bra.s	locret_CFE6
0000D092                            ; ===========================================================================
0000D092                            
0000D092                            loc_CFC6:
0000D092 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D098 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D09E 6500                       		bcs.s	locret_CFE6
0000D0A0 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D0A6 317C 0001 0036             		move.w	#1,$36(a0)
0000D0AC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D0B2                            
0000D0B2                            locret_CFE6:
0000D0B2 4E75                       		rts	
0000D0B4                            ; ===========================================================================
0000D0B4                            ; ---------------------------------------------------------------------------
0000D0B4                            ; Sprite mappings - spikes
0000D0B4                            ; ---------------------------------------------------------------------------
0000D0B4                            Map_obj36:
0000D0B4                            	include "_maps\obj36.asm"
0000D0B4                            ; ---------------------------------------------------------------------------
0000D0B4                            ; Sprite mappings - spikes
0000D0B4                            ; ---------------------------------------------------------------------------
0000D0B4 0000                       		dc.w byte_CFF4-Map_obj36
0000D0B6 0000                       		dc.w byte_D004-Map_obj36
0000D0B8 0000                       		dc.w byte_D014-Map_obj36
0000D0BA 0000                       		dc.w byte_D01A-Map_obj36
0000D0BC 0000                       		dc.w byte_D02A-Map_obj36
0000D0BE 0000                       		dc.w byte_D049-Map_obj36
0000D0C0 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D0C1 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D0C6 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D0CB F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D0D0 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D0D1 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D0D6 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D0DB 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D0E0 01                         byte_D014:	dc.b 1			; 1 spike
0000D0E1 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D0E6 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D0E7 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D0EC F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D0F1 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D0F6 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D0F7 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D0FC F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D101 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D106 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D10B F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D110 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D115 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D116 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D11C 00                         		even
0000D11C 00                         		even
0000D11C                            
0000D11C                            ; ===========================================================================
0000D11C                            ; ---------------------------------------------------------------------------
0000D11C                            ; Object 3B - purple rock (GHZ)
0000D11C                            ; ---------------------------------------------------------------------------
0000D11C                            
0000D11C                            Obj3B:					; XREF: Obj_Index
0000D11C 7000                       		moveq	#0,d0
0000D11E 1028 0024                  		move.b	$24(a0),d0
0000D122 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D126 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D12A                            ; ===========================================================================
0000D12A 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D12C 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D12E                            ; ===========================================================================
0000D12E                            
0000D12E                            Obj3B_Main:				; XREF: Obj3B_Index
0000D12E 5428 0024                  		addq.b	#2,$24(a0)
0000D132 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D13A 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D140 117C 0004 0001             		move.b	#4,1(a0)
0000D146 117C 0013 0019             		move.b	#$13,$19(a0)
0000D14C 117C 0004 0018             		move.b	#4,$18(a0)
0000D152                            
0000D152                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D152 323C 001B                  		move.w	#$1B,d1
0000D156 343C 0010                  		move.w	#$10,d2
0000D15A 363C 0010                  		move.w	#$10,d3
0000D15E 3828 0008                  		move.w	8(a0),d4
0000D162 6100 0000                  		bsr.w	SolidObject
0000D166 6100 0000                  		bsr.w	DisplaySprite
0000D16A 3028 0008                  		move.w	8(a0),d0
0000D16E 0240 FF80                  		andi.w	#$FF80,d0
0000D172 3238 F700                  		move.w	($FFFFF700).w,d1
0000D176 0441 0080                  		subi.w	#$80,d1
0000D17A 0241 FF80                  		andi.w	#$FF80,d1
0000D17E 9041                       		sub.w	d1,d0
0000D180 0C40 0280                  		cmpi.w	#$280,d0
0000D184 6200 0000                  		bhi.w	DeleteObject
0000D188 4E75                       		rts	
0000D18A                            ; ===========================================================================
0000D18A                            ; ---------------------------------------------------------------------------
0000D18A                            ; Object 49 - waterfall	sound effect (GHZ)
0000D18A                            ; ---------------------------------------------------------------------------
0000D18A                            
0000D18A                            Obj49:					; XREF: Obj_Index
0000D18A 7000                       		moveq	#0,d0
0000D18C 1028 0024                  		move.b	$24(a0),d0
0000D190 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D194 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D198                            ; ===========================================================================
0000D198 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D19A 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D19C                            ; ===========================================================================
0000D19C                            
0000D19C                            Obj49_Main:				; XREF: Obj49_Index
0000D19C 5428 0024                  		addq.b	#2,$24(a0)
0000D1A0 117C 0004 0001             		move.b	#4,1(a0)
0000D1A6                            
0000D1A6                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D1A6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D1AA 0200 003F                  		andi.b	#$3F,d0
0000D1AE 6600                       		bne.s	Obj49_ChkDel
0000D1B0 303C 00D0                  		move.w	#$D0,d0
0000D1B4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D1BA                            
0000D1BA                            Obj49_ChkDel:
0000D1BA 3028 0008                  		move.w	8(a0),d0
0000D1BE 0240 FF80                  		andi.w	#$FF80,d0
0000D1C2 3238 F700                  		move.w	($FFFFF700).w,d1
0000D1C6 0441 0080                  		subi.w	#$80,d1
0000D1CA 0241 FF80                  		andi.w	#$FF80,d1
0000D1CE 9041                       		sub.w	d1,d0
0000D1D0 0C40 0280                  		cmpi.w	#$280,d0
0000D1D4 6200 0000                  		bhi.w	DeleteObject
0000D1D8 4E75                       		rts	
0000D1DA                            ; ===========================================================================
0000D1DA                            ; ---------------------------------------------------------------------------
0000D1DA                            ; Sprite mappings - purple rock	(GHZ)
0000D1DA                            ; ---------------------------------------------------------------------------
0000D1DA                            Map_obj3B:
0000D1DA                            	include "_maps\obj3B.asm"
0000D1DA                            ; ---------------------------------------------------------------------------
0000D1DA                            ; Sprite mappings - purple rock	(GHZ)
0000D1DA                            ; ---------------------------------------------------------------------------
0000D1DA 0000                       		dc.w byte_D110-Map_obj3B
0000D1DC 02                         byte_D110:	dc.b 2
0000D1DD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D1E2 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D1E8 00                         		even
0000D1E8 00                         		even
0000D1E8                            
0000D1E8                            ; ===========================================================================
0000D1E8                            ; ---------------------------------------------------------------------------
0000D1E8                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D1E8                            ; ---------------------------------------------------------------------------
0000D1E8                            
0000D1E8                            Obj3C:					; XREF: Obj_Index
0000D1E8 7000                       		moveq	#0,d0
0000D1EA 1028 0024                  		move.b	$24(a0),d0
0000D1EE 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D1F2 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D1F6 6000 0000                  		bra.w	MarkObjGone
0000D1FA                            ; ===========================================================================
0000D1FA 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D1FC 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D1FE 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D200                            ; ===========================================================================
0000D200                            
0000D200                            Obj3C_Main:				; XREF: Obj3C_Index
0000D200 5428 0024                  		addq.b	#2,$24(a0)
0000D204 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D20C 317C 450F 0002             		move.w	#$450F,2(a0)
0000D212 117C 0004 0001             		move.b	#4,1(a0)
0000D218 117C 0010 0019             		move.b	#$10,$19(a0)
0000D21E 117C 0004 0018             		move.b	#4,$18(a0)
0000D224 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D22A                            
0000D22A                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D22A 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D230 323C 001B                  		move.w	#$1B,d1
0000D234 343C 0020                  		move.w	#$20,d2
0000D238 363C 0020                  		move.w	#$20,d3
0000D23C 3828 0008                  		move.w	8(a0),d4
0000D240 6100 0000                  		bsr.w	SolidObject
0000D244 0828 0005 0022             		btst	#5,$22(a0)
0000D24A 6600                       		bne.s	Obj3C_ChkRoll
0000D24C                            
0000D24C                            locret_D180:
0000D24C 4E75                       		rts	
0000D24E                            ; ===========================================================================
0000D24E                            
0000D24E                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D24E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D254 66F6                       		bne.s	locret_D180	; if not, branch
0000D256 3028 0030                  		move.w	$30(a0),d0
0000D25A 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D25C 4440                       		neg.w	d0
0000D25E                            
0000D25E                            Obj3C_ChkSpeed:
0000D25E 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D262 65E8                       		bcs.s	locret_D180	; if not, branch
0000D264 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D26A 5869 0008                  		addq.w	#4,8(a1)
0000D26E 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D274 3028 0008                  		move.w	8(a0),d0
0000D278 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D27C 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D27E 5169 0008                  		subq.w	#8,8(a1)
0000D282 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D288                            
0000D288                            Obj3C_Smash:
0000D288 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D28E 08A8 0005 0022             		bclr	#5,$22(a0)
0000D294 08A9 0005 0022             		bclr	#5,$22(a1)
0000D29A 7207                       		moveq	#7,d1		; load 8 fragments
0000D29C 343C 0070                  		move.w	#$70,d2
0000D2A0 6100                       		bsr.s	SmashObject
0000D2A2                            
0000D2A2                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D2A2 6100 0000                  		bsr.w	SpeedToPos
0000D2A6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D2AC 6100 0000                  		bsr.w	DisplaySprite
0000D2B0 4A28 0001                  		tst.b	1(a0)
0000D2B4 6A00 0000                  		bpl.w	DeleteObject
0000D2B8 4E75                       		rts	
0000D2BA                            
0000D2BA                            ; ---------------------------------------------------------------------------
0000D2BA                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D2BA                            ; ---------------------------------------------------------------------------
0000D2BA                            
0000D2BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2BA                            
0000D2BA                            
0000D2BA                            SmashObject:				; XREF: Obj3C_Smash
0000D2BA 7000                       		moveq	#0,d0
0000D2BC 1028 001A                  		move.b	$1A(a0),d0
0000D2C0 D040                       		add.w	d0,d0
0000D2C2 2668 0004                  		movea.l	4(a0),a3
0000D2C6 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D2CA 524B                       		addq.w	#1,a3
0000D2CC 08E8 0005 0001             		bset	#5,1(a0)
0000D2D2 1810                       		move.b	0(a0),d4
0000D2D4 1A28 0001                  		move.b	1(a0),d5
0000D2D8 2248                       		movea.l	a0,a1
0000D2DA 6000                       		bra.s	Smash_LoadFrag
0000D2DC                            ; ===========================================================================
0000D2DC                            
0000D2DC                            Smash_Loop:
0000D2DC 6100 0000                  		bsr.w	SingleObjLoad
0000D2E0 6600                       		bne.s	Smash_PlaySnd
0000D2E2 5A4B                       		addq.w	#5,a3
0000D2E4                            
0000D2E4                            Smash_LoadFrag:				; XREF: SmashObject
0000D2E4 137C 0004 0024             		move.b	#4,$24(a1)
0000D2EA 1284                       		move.b	d4,0(a1)
0000D2EC 234B 0004                  		move.l	a3,4(a1)
0000D2F0 1345 0001                  		move.b	d5,1(a1)
0000D2F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000D2FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D300 3368 0002 0002             		move.w	2(a0),2(a1)
0000D306 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D30C 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D312 335C 0010                  		move.w	(a4)+,$10(a1)
0000D316 335C 0012                  		move.w	(a4)+,$12(a1)
0000D31A B3C8                       		cmpa.l	a0,a1
0000D31C 6400                       		bcc.s	loc_D268
0000D31E 2F08                       		move.l	a0,-(sp)
0000D320 2049                       		movea.l	a1,a0
0000D322 6100 0000                  		bsr.w	SpeedToPos
0000D326 D568 0012                  		add.w	d2,$12(a0)
0000D32A 205F                       		movea.l	(sp)+,a0
0000D32C 6100 0000                  		bsr.w	DisplaySprite2
0000D330                            
0000D330                            loc_D268:
0000D330 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D334                            
0000D334                            Smash_PlaySnd:
0000D334 303C 00CB                  		move.w	#$CB,d0
0000D338 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D33E                            ; End of function SmashObject
0000D33E                            
0000D33E                            ; ===========================================================================
0000D33E                            ; Smashed block	fragment speeds
0000D33E                            ;
0000D33E 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D342 0600 FF00                  		dc.w $600, $FF00
0000D346 0600 0100                  		dc.w $600, $100
0000D34A 0400 0500                  		dc.w $400, $500
0000D34E 0600 FA00                  		dc.w $600, $FA00
0000D352 0800 FE00                  		dc.w $800, $FE00
0000D356 0800 0200                  		dc.w $800, $200
0000D35A 0600 0600                  		dc.w $600, $600
0000D35E                            
0000D35E FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D362 F800 FE00                  		dc.w $F800, $FE00
0000D366 F800 0200                  		dc.w $F800, $200
0000D36A FA00 0600                  		dc.w $FA00, $600
0000D36E FC00 FB00                  		dc.w $FC00, $FB00
0000D372 FA00 FF00                  		dc.w $FA00, $FF00
0000D376 FA00 0100                  		dc.w $FA00, $100
0000D37A FC00 0500                  		dc.w $FC00, $500
0000D37E                            ; ---------------------------------------------------------------------------
0000D37E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D37E                            ; ---------------------------------------------------------------------------
0000D37E                            Map_obj3C:
0000D37E                            	include "_maps\obj3C.asm"
0000D37E                            ; ---------------------------------------------------------------------------
0000D37E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D37E                            ; ---------------------------------------------------------------------------
0000D37E 0000                       		dc.w byte_D2BC-Map_obj3C
0000D380 0000                       		dc.w byte_D2E5-Map_obj3C
0000D382 0000                       		dc.w byte_D30E-Map_obj3C
0000D384 08                         byte_D2BC:	dc.b 8
0000D385 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D38A F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D38F 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D394 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D399 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D39E F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D3A3 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D3A8 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D3AD 08                         byte_D2E5:	dc.b 8
0000D3AE E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D3B3 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D3B8 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D3BD 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D3C2 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D3C7 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D3CC 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D3D1 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D3D6 08                         byte_D30E:	dc.b 8
0000D3D7 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D3DC F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D3E1 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D3E6 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D3EB E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D3F0 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D3F5 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D3FA 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D400 00                         		even
0000D400 00                         		even
0000D400                            
0000D400                            ; ---------------------------------------------------------------------------
0000D400                            ; Object code loading subroutine
0000D400                            ; ---------------------------------------------------------------------------
0000D400                            
0000D400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D400                            
0000D400                            
0000D400                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D400 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D404 7E7F                       		moveq	#$7F,d7
0000D406 7000                       		moveq	#0,d0
0000D408 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D40E 6400                       		bcc.s	loc_D362
0000D410                            
0000D410                            loc_D348:
0000D410 1010                       		move.b	(a0),d0		; load object number from RAM
0000D412 6700                       		beq.s	loc_D358
0000D414 D040                       		add.w	d0,d0
0000D416 D040                       		add.w	d0,d0
0000D418 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D41C 4E91                       		jsr	(a1)		; run the object's code
0000D41E 7000                       		moveq	#0,d0
0000D420                            
0000D420                            loc_D358:
0000D420 41E8 0040                  		lea	$40(a0),a0	; next object
0000D424 51CF FFEA                  		dbf	d7,loc_D348
0000D428 4E75                       		rts	
0000D42A                            ; ===========================================================================
0000D42A                            
0000D42A                            loc_D362:
0000D42A 7E1F                       		moveq	#$1F,d7
0000D42C 61E2                       		bsr.s	loc_D348
0000D42E 7E5F                       		moveq	#$5F,d7
0000D430                            
0000D430                            loc_D368:
0000D430 7000                       		moveq	#0,d0
0000D432 1010                       		move.b	(a0),d0
0000D434 6700                       		beq.s	loc_D378
0000D436 4A28 0001                  		tst.b	1(a0)
0000D43A 6A00                       		bpl.s	loc_D378
0000D43C 6100 0000                  		bsr.w	DisplaySprite
0000D440                            
0000D440                            loc_D378:
0000D440 41E8 0040                  		lea	$40(a0),a0
0000D444                            
0000D444                            loc_D37C:
0000D444 51CF FFEA                  		dbf	d7,loc_D368
0000D448 4E75                       		rts	
0000D44A                            ; End of function ObjectsLoad
0000D44A                            
0000D44A                            ; ===========================================================================
0000D44A                            ; ---------------------------------------------------------------------------
0000D44A                            ; Object pointers
0000D44A                            ; ---------------------------------------------------------------------------
0000D44A                            Obj_Index:
0000D44A                            	include "_inc\Object pointers.asm"
0000D44A                            ; ---------------------------------------------------------------------------
0000D44A                            ; Object pointers
0000D44A                            ; ---------------------------------------------------------------------------
0000D44A 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D45A 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D46A 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D47A 0000 0000 0000 A6FC 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D48A 0000 7432 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D49A 0000 7A58 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D4AA 0000 82A6 0000 830E 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D4BA 0000 8958 0000 8C46 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D4CA 0000 0000 0000 98CA 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D4DA 0000 9C0C 0000 A1F8 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D4EA 0000 9502 0000 8A2E 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D4FA 0000 AD84 0000 A3DE 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D50A 0000 B756 0000 BE04 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D51A 0000 B2BA 0000 CEF4 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D52A 0000 C58A 0000 C644 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D53A 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D54A 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D55A 0000 BA72 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000D56A 0000 D18A 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000D57A 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000D58A 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000D59A 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000D5AA 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000D5BA 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000D5CA 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000D5DA 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000D5EA 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000D5FA 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000D60A 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000D61A 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000D62A 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000D63A 0000 0000 0000 C87E 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000D64A 0000 4F52 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000D65A 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000D66A 0000 560C 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D66A 0000 560C 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D67A                            
0000D67A                            ; ---------------------------------------------------------------------------
0000D67A                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000D67A                            ; ---------------------------------------------------------------------------
0000D67A                            
0000D67A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D67A                            
0000D67A                            
0000D67A                            ObjectFall:
0000D67A 2428 0008                  		move.l	8(a0),d2
0000D67E 2628 000C                  		move.l	$C(a0),d3
0000D682 3028 0010                  		move.w	$10(a0),d0
0000D686 48C0                       		ext.l	d0
0000D688 E180                       		asl.l	#8,d0
0000D68A D480                       		add.l	d0,d2
0000D68C 3028 0012                  		move.w	$12(a0),d0
0000D690 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000D696 48C0                       		ext.l	d0
0000D698 E180                       		asl.l	#8,d0
0000D69A D680                       		add.l	d0,d3
0000D69C 2142 0008                  		move.l	d2,8(a0)
0000D6A0 2143 000C                  		move.l	d3,$C(a0)
0000D6A4 4E75                       		rts	
0000D6A6                            ; End of function ObjectFall
0000D6A6                            
0000D6A6                            ; ---------------------------------------------------------------------------
0000D6A6                            ; Subroutine translating object	speed to update	object position
0000D6A6                            ; ---------------------------------------------------------------------------
0000D6A6                            
0000D6A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6A6                            
0000D6A6                            
0000D6A6                            SpeedToPos:
0000D6A6 2428 0008                  		move.l	8(a0),d2
0000D6AA 2628 000C                  		move.l	$C(a0),d3
0000D6AE 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000D6B2 48C0                       		ext.l	d0
0000D6B4 E180                       		asl.l	#8,d0		; multiply speed by $100
0000D6B6 D480                       		add.l	d0,d2		; add to x-axis	position
0000D6B8 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000D6BC 48C0                       		ext.l	d0
0000D6BE E180                       		asl.l	#8,d0		; multiply by $100
0000D6C0 D680                       		add.l	d0,d3		; add to y-axis	position
0000D6C2 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000D6C6 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000D6CA 4E75                       		rts	
0000D6CC                            ; End of function SpeedToPos
0000D6CC                            
0000D6CC                            ; ---------------------------------------------------------------------------
0000D6CC                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000D6CC                            ; ---------------------------------------------------------------------------
0000D6CC                            
0000D6CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6CC                            
0000D6CC                            
0000D6CC                            DisplaySprite:
0000D6CC 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000D6D0 3028 0018                  		move.w	$18(a0),d0
0000D6D4 E248                       		lsr.w	#1,d0
0000D6D6 0240 0380                  		andi.w	#$380,d0
0000D6DA D2C0                       		adda.w	d0,a1
0000D6DC 0C51 007E                  		cmpi.w	#$7E,(a1)
0000D6E0 6400                       		bcc.s	locret_D620
0000D6E2 5451                       		addq.w	#2,(a1)
0000D6E4 D2D1                       		adda.w	(a1),a1
0000D6E6 3288                       		move.w	a0,(a1)
0000D6E8                            
0000D6E8                            locret_D620:
0000D6E8 4E75                       		rts	
0000D6EA                            ; End of function DisplaySprite
0000D6EA                            
0000D6EA                            ; ---------------------------------------------------------------------------
0000D6EA                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000D6EA                            ; ---------------------------------------------------------------------------
0000D6EA                            
0000D6EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6EA                            
0000D6EA                            
0000D6EA                            DisplaySprite2:
0000D6EA 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000D6EE 3029 0018                  		move.w	$18(a1),d0
0000D6F2 E248                       		lsr.w	#1,d0
0000D6F4 0240 0380                  		andi.w	#$380,d0
0000D6F8 D4C0                       		adda.w	d0,a2
0000D6FA 0C52 007E                  		cmpi.w	#$7E,(a2)
0000D6FE 6400                       		bcc.s	locret_D63E
0000D700 5452                       		addq.w	#2,(a2)
0000D702 D4D2                       		adda.w	(a2),a2
0000D704 3489                       		move.w	a1,(a2)
0000D706                            
0000D706                            locret_D63E:
0000D706 4E75                       		rts	
0000D708                            ; End of function DisplaySprite2
0000D708                            
0000D708                            ; ---------------------------------------------------------------------------
0000D708                            ; Subroutine to	delete an object
0000D708                            ; ---------------------------------------------------------------------------
0000D708                            
0000D708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D708                            
0000D708                            
0000D708                            DeleteObject:
0000D708 2248                       		movea.l	a0,a1
0000D70A                            
0000D70A                            DeleteObject2:
0000D70A 7200                       		moveq	#0,d1
0000D70C 700F                       		moveq	#$F,d0
0000D70E                            
0000D70E                            loc_D646:
0000D70E 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000D710 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000D714 4E75                       		rts	
0000D716                            ; End of function DeleteObject
0000D716                            
0000D716                            ; ===========================================================================
0000D716 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000D71A 00FF F700                  		dc.l $FFF700		; main screen x-position
0000D71E 00FF F708                  		dc.l $FFF708		; background x-position	1
0000D722 00FF F718                  		dc.l $FFF718		; background x-position	2
0000D726                            ; ---------------------------------------------------------------------------
0000D726                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000D726                            ; ---------------------------------------------------------------------------
0000D726                            
0000D726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D726                            
0000D726                            
0000D726                            BuildSprites:				; XREF: TitleScreen; et al
0000D726 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000D72A 7A00                       		moveq	#0,d5
0000D72C 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000D730 7E07                       		moveq	#7,d7
0000D732                            
0000D732                            loc_D66A:
0000D732 4A54                       		tst.w	(a4)
0000D734 6700 0000                  		beq.w	loc_D72E
0000D738 7C02                       		moveq	#2,d6
0000D73A                            
0000D73A                            loc_D672:
0000D73A 3074 6000                  		movea.w	(a4,d6.w),a0
0000D73E 4A10                       		tst.b	(a0)
0000D740 6700 0000                  		beq.w	loc_D726
0000D744 08A8 0007 0001             		bclr	#7,1(a0)
0000D74A 1028 0001                  		move.b	1(a0),d0
0000D74E 1800                       		move.b	d0,d4
0000D750 0240 000C                  		andi.w	#$C,d0
0000D754 6700                       		beq.s	loc_D6DE
0000D756 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000D75A 7000                       		moveq	#0,d0
0000D75C 1028 0019                  		move.b	$19(a0),d0
0000D760 3628 0008                  		move.w	8(a0),d3
0000D764 9651                       		sub.w	(a1),d3
0000D766 3203                       		move.w	d3,d1
0000D768 D240                       		add.w	d0,d1
0000D76A 6B00 0000                  		bmi.w	loc_D726
0000D76E 3203                       		move.w	d3,d1
0000D770 9240                       		sub.w	d0,d1
0000D772 0C41 0140                  		cmpi.w	#$140,d1
0000D776 6C00                       		bge.s	loc_D726
0000D778 0643 0080                  		addi.w	#$80,d3
0000D77C 0804 0004                  		btst	#4,d4
0000D780 6700                       		beq.s	loc_D6E8
0000D782 7000                       		moveq	#0,d0
0000D784 1028 0016                  		move.b	$16(a0),d0
0000D788 3428 000C                  		move.w	$C(a0),d2
0000D78C 9469 0004                  		sub.w	4(a1),d2
0000D790 3202                       		move.w	d2,d1
0000D792 D240                       		add.w	d0,d1
0000D794 6B00                       		bmi.s	loc_D726
0000D796 3202                       		move.w	d2,d1
0000D798 9240                       		sub.w	d0,d1
0000D79A 0C41 00E0                  		cmpi.w	#$E0,d1
0000D79E 6C00                       		bge.s	loc_D726
0000D7A0 0642 0080                  		addi.w	#$80,d2
0000D7A4 6000                       		bra.s	loc_D700
0000D7A6                            ; ===========================================================================
0000D7A6                            
0000D7A6                            loc_D6DE:
0000D7A6 3428 000A                  		move.w	$A(a0),d2
0000D7AA 3628 0008                  		move.w	8(a0),d3
0000D7AE 6000                       		bra.s	loc_D700
0000D7B0                            ; ===========================================================================
0000D7B0                            
0000D7B0                            loc_D6E8:
0000D7B0 3428 000C                  		move.w	$C(a0),d2
0000D7B4 9469 0004                  		sub.w	4(a1),d2
0000D7B8 0642 0080                  		addi.w	#$80,d2
0000D7BC 0C42 0060                  		cmpi.w	#$60,d2
0000D7C0 6500                       		bcs.s	loc_D726
0000D7C2 0C42 0180                  		cmpi.w	#$180,d2
0000D7C6 6400                       		bcc.s	loc_D726
0000D7C8                            
0000D7C8                            loc_D700:
0000D7C8 2268 0004                  		movea.l	4(a0),a1
0000D7CC 7200                       		moveq	#0,d1
0000D7CE 0804 0005                  		btst	#5,d4
0000D7D2 6600                       		bne.s	loc_D71C
0000D7D4 1228 001A                  		move.b	$1A(a0),d1
0000D7D8 D201                       		add.b	d1,d1
0000D7DA D2F1 1000                  		adda.w	(a1,d1.w),a1
0000D7DE 1219                       		move.b	(a1)+,d1
0000D7E0 5301                       		subq.b	#1,d1
0000D7E2 6B00                       		bmi.s	loc_D720
0000D7E4                            
0000D7E4                            loc_D71C:
0000D7E4 6100 0000                  		bsr.w	sub_D750
0000D7E8                            
0000D7E8                            loc_D720:
0000D7E8 08E8 0007 0001             		bset	#7,1(a0)
0000D7EE                            
0000D7EE                            loc_D726:
0000D7EE 5446                       		addq.w	#2,d6
0000D7F0 5554                       		subq.w	#2,(a4)
0000D7F2 6600 FF46                  		bne.w	loc_D672
0000D7F6                            
0000D7F6                            loc_D72E:
0000D7F6 49EC 0080                  		lea	$80(a4),a4
0000D7FA 51CF FF36                  		dbf	d7,loc_D66A
0000D7FE 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000D802 0C05 0050                  		cmpi.b	#$50,d5
0000D806 6700                       		beq.s	loc_D748
0000D808 24BC 0000 0000             		move.l	#0,(a2)
0000D80E 4E75                       		rts	
0000D810                            ; ===========================================================================
0000D810                            
0000D810                            loc_D748:
0000D810 157C 0000 FFFB             		move.b	#0,-5(a2)
0000D816 4E75                       		rts	
0000D818                            ; End of function BuildSprites
0000D818                            
0000D818                            
0000D818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D818                            
0000D818                            
0000D818                            sub_D750:				; XREF: BuildSprites
0000D818 3668 0002                  		movea.w	2(a0),a3
0000D81C 0804 0000                  		btst	#0,d4
0000D820 6600                       		bne.s	loc_D796
0000D822 0804 0001                  		btst	#1,d4
0000D826 6600 0000                  		bne.w	loc_D7E4
0000D82A                            ; End of function sub_D750
0000D82A                            
0000D82A                            
0000D82A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D82A                            
0000D82A                            
0000D82A                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000D82A 0C05 0050                  		cmpi.b	#$50,d5
0000D82E 6700                       		beq.s	locret_D794
0000D830 1019                       		move.b	(a1)+,d0
0000D832 4880                       		ext.w	d0
0000D834 D042                       		add.w	d2,d0
0000D836 34C0                       		move.w	d0,(a2)+
0000D838 14D9                       		move.b	(a1)+,(a2)+
0000D83A 5205                       		addq.b	#1,d5
0000D83C 14C5                       		move.b	d5,(a2)+
0000D83E 1019                       		move.b	(a1)+,d0
0000D840 E148                       		lsl.w	#8,d0
0000D842 1019                       		move.b	(a1)+,d0
0000D844 D04B                       		add.w	a3,d0
0000D846 34C0                       		move.w	d0,(a2)+
0000D848 1019                       		move.b	(a1)+,d0
0000D84A 4880                       		ext.w	d0
0000D84C D043                       		add.w	d3,d0
0000D84E 0240 01FF                  		andi.w	#$1FF,d0
0000D852 6600                       		bne.s	loc_D78E
0000D854 5240                       		addq.w	#1,d0
0000D856                            
0000D856                            loc_D78E:
0000D856 34C0                       		move.w	d0,(a2)+
0000D858 51C9 FFD0                  		dbf	d1,sub_D762
0000D85C                            
0000D85C                            locret_D794:
0000D85C 4E75                       		rts	
0000D85E                            ; End of function sub_D762
0000D85E                            
0000D85E                            ; ===========================================================================
0000D85E                            
0000D85E                            loc_D796:
0000D85E 0804 0001                  		btst	#1,d4
0000D862 6600 0000                  		bne.w	loc_D82A
0000D866                            
0000D866                            loc_D79E:
0000D866 0C05 0050                  		cmpi.b	#$50,d5
0000D86A 6700                       		beq.s	locret_D7E2
0000D86C 1019                       		move.b	(a1)+,d0
0000D86E 4880                       		ext.w	d0
0000D870 D042                       		add.w	d2,d0
0000D872 34C0                       		move.w	d0,(a2)+
0000D874 1819                       		move.b	(a1)+,d4
0000D876 14C4                       		move.b	d4,(a2)+
0000D878 5205                       		addq.b	#1,d5
0000D87A 14C5                       		move.b	d5,(a2)+
0000D87C 1019                       		move.b	(a1)+,d0
0000D87E E148                       		lsl.w	#8,d0
0000D880 1019                       		move.b	(a1)+,d0
0000D882 D04B                       		add.w	a3,d0
0000D884 0A40 0800                  		eori.w	#$800,d0
0000D888 34C0                       		move.w	d0,(a2)+
0000D88A 1019                       		move.b	(a1)+,d0
0000D88C 4880                       		ext.w	d0
0000D88E 4440                       		neg.w	d0
0000D890 D804                       		add.b	d4,d4
0000D892 0244 0018                  		andi.w	#$18,d4
0000D896 5044                       		addq.w	#8,d4
0000D898 9044                       		sub.w	d4,d0
0000D89A D043                       		add.w	d3,d0
0000D89C 0240 01FF                  		andi.w	#$1FF,d0
0000D8A0 6600                       		bne.s	loc_D7DC
0000D8A2 5240                       		addq.w	#1,d0
0000D8A4                            
0000D8A4                            loc_D7DC:
0000D8A4 34C0                       		move.w	d0,(a2)+
0000D8A6 51C9 FFBE                  		dbf	d1,loc_D79E
0000D8AA                            
0000D8AA                            locret_D7E2:
0000D8AA 4E75                       		rts	
0000D8AC                            ; ===========================================================================
0000D8AC                            
0000D8AC                            loc_D7E4:				; XREF: sub_D750
0000D8AC 0C05 0050                  		cmpi.b	#$50,d5
0000D8B0 6700                       		beq.s	locret_D828
0000D8B2 1019                       		move.b	(a1)+,d0
0000D8B4 1811                       		move.b	(a1),d4
0000D8B6 4880                       		ext.w	d0
0000D8B8 4440                       		neg.w	d0
0000D8BA E70C                       		lsl.b	#3,d4
0000D8BC 0244 0018                  		andi.w	#$18,d4
0000D8C0 5044                       		addq.w	#8,d4
0000D8C2 9044                       		sub.w	d4,d0
0000D8C4 D042                       		add.w	d2,d0
0000D8C6 34C0                       		move.w	d0,(a2)+
0000D8C8 14D9                       		move.b	(a1)+,(a2)+
0000D8CA 5205                       		addq.b	#1,d5
0000D8CC 14C5                       		move.b	d5,(a2)+
0000D8CE 1019                       		move.b	(a1)+,d0
0000D8D0 E148                       		lsl.w	#8,d0
0000D8D2 1019                       		move.b	(a1)+,d0
0000D8D4 D04B                       		add.w	a3,d0
0000D8D6 0A40 1000                  		eori.w	#$1000,d0
0000D8DA 34C0                       		move.w	d0,(a2)+
0000D8DC 1019                       		move.b	(a1)+,d0
0000D8DE 4880                       		ext.w	d0
0000D8E0 D043                       		add.w	d3,d0
0000D8E2 0240 01FF                  		andi.w	#$1FF,d0
0000D8E6 6600                       		bne.s	loc_D822
0000D8E8 5240                       		addq.w	#1,d0
0000D8EA                            
0000D8EA                            loc_D822:
0000D8EA 34C0                       		move.w	d0,(a2)+
0000D8EC 51C9 FFBE                  		dbf	d1,loc_D7E4
0000D8F0                            
0000D8F0                            locret_D828:
0000D8F0 4E75                       		rts	
0000D8F2                            ; ===========================================================================
0000D8F2                            
0000D8F2                            loc_D82A:
0000D8F2 0C05 0050                  		cmpi.b	#$50,d5
0000D8F6 6700                       		beq.s	locret_D87C
0000D8F8 1019                       		move.b	(a1)+,d0
0000D8FA 1811                       		move.b	(a1),d4
0000D8FC 4880                       		ext.w	d0
0000D8FE 4440                       		neg.w	d0
0000D900 E70C                       		lsl.b	#3,d4
0000D902 0244 0018                  		andi.w	#$18,d4
0000D906 5044                       		addq.w	#8,d4
0000D908 9044                       		sub.w	d4,d0
0000D90A D042                       		add.w	d2,d0
0000D90C 34C0                       		move.w	d0,(a2)+
0000D90E 1819                       		move.b	(a1)+,d4
0000D910 14C4                       		move.b	d4,(a2)+
0000D912 5205                       		addq.b	#1,d5
0000D914 14C5                       		move.b	d5,(a2)+
0000D916 1019                       		move.b	(a1)+,d0
0000D918 E148                       		lsl.w	#8,d0
0000D91A 1019                       		move.b	(a1)+,d0
0000D91C D04B                       		add.w	a3,d0
0000D91E 0A40 1800                  		eori.w	#$1800,d0
0000D922 34C0                       		move.w	d0,(a2)+
0000D924 1019                       		move.b	(a1)+,d0
0000D926 4880                       		ext.w	d0
0000D928 4440                       		neg.w	d0
0000D92A D804                       		add.b	d4,d4
0000D92C 0244 0018                  		andi.w	#$18,d4
0000D930 5044                       		addq.w	#8,d4
0000D932 9044                       		sub.w	d4,d0
0000D934 D043                       		add.w	d3,d0
0000D936 0240 01FF                  		andi.w	#$1FF,d0
0000D93A 6600                       		bne.s	loc_D876
0000D93C 5240                       		addq.w	#1,d0
0000D93E                            
0000D93E                            loc_D876:
0000D93E 34C0                       		move.w	d0,(a2)+
0000D940 51C9 FFB0                  		dbf	d1,loc_D82A
0000D944                            
0000D944                            locret_D87C:
0000D944 4E75                       		rts	
0000D946                            ; ---------------------------------------------------------------------------
0000D946                            ; Subroutine to	check if an object is on the screen
0000D946                            ; ---------------------------------------------------------------------------
0000D946                            
0000D946                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D946                            
0000D946                            
0000D946                            ChkObjOnScreen:
0000D946 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000D94A 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000D94E 6B00                       		bmi.s	NotOnScreen
0000D950 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000D954 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D956                            
0000D956 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000D95A 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000D95E 6B00                       		bmi.s	NotOnScreen
0000D960 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000D964 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D966                            
0000D966 7000                       		moveq	#0,d0		; set flag to 0
0000D968 4E75                       		rts	
0000D96A                            ; ===========================================================================
0000D96A                            
0000D96A                            NotOnScreen:				; XREF: ChkObjOnScreen
0000D96A 7001                       		moveq	#1,d0		; set flag to 1
0000D96C 4E75                       		rts	
0000D96E                            ; End of function ChkObjOnScreen
0000D96E                            
0000D96E                            
0000D96E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D96E                            
0000D96E                            
0000D96E                            ChkObjOnScreen2:
0000D96E 7200                       		moveq	#0,d1
0000D970 1228 0019                  		move.b	$19(a0),d1
0000D974 3028 0008                  		move.w	8(a0),d0
0000D978 9078 F700                  		sub.w	($FFFFF700).w,d0
0000D97C D041                       		add.w	d1,d0
0000D97E 6B00                       		bmi.s	NotOnScreen2
0000D980 D241                       		add.w	d1,d1
0000D982 9041                       		sub.w	d1,d0
0000D984 0C40 0140                  		cmpi.w	#320,d0
0000D988 6C00                       		bge.s	NotOnScreen2
0000D98A                            
0000D98A 3228 000C                  		move.w	$C(a0),d1
0000D98E 9278 F704                  		sub.w	($FFFFF704).w,d1
0000D992 6B00                       		bmi.s	NotOnScreen2
0000D994 0C41 00E0                  		cmpi.w	#224,d1
0000D998 6C00                       		bge.s	NotOnScreen2
0000D99A                            
0000D99A 7000                       		moveq	#0,d0
0000D99C 4E75                       		rts	
0000D99E                            ; ===========================================================================
0000D99E                            
0000D99E                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000D99E 7001                       		moveq	#1,d0
0000D9A0 4E75                       		rts	
0000D9A2                            ; End of function ChkObjOnScreen2
0000D9A2                            
0000D9A2                            ; ---------------------------------------------------------------------------
0000D9A2                            ; Subroutine to	load a level's objects
0000D9A2                            ; ---------------------------------------------------------------------------
0000D9A2                            
0000D9A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9A2                            
0000D9A2                            
0000D9A2                            ObjPosLoad:				; XREF: Level; et al
0000D9A2 7000                       		moveq	#0,d0
0000D9A4 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000D9A8 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000D9AC 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000D9B0                            ; End of function ObjPosLoad
0000D9B0                            
0000D9B0                            ; ===========================================================================
0000D9B0 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000D9B2 0000                       		dc.w OPL_Next-OPL_Index
0000D9B4                            ; ===========================================================================
0000D9B4                            
0000D9B4                            OPL_Main:				; XREF: OPL_Index
0000D9B4 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000D9B8 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000D9BC ED08                       		lsl.b	#6,d0
0000D9BE E848                       		lsr.w	#4,d0
0000D9C0 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000D9C6 2248                       		movea.l	a0,a1
0000D9C8 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000D9CC 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D9D0 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D9D4 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000D9D8 21C9 F778                  		move.l	a1,($FFFFF778).w
0000D9DC 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000D9E0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D9E4 34FC 0101                  		move.w	#$101,(a2)+
0000D9E8 303C 005E                  		move.w	#$5E,d0
0000D9EC                            
0000D9EC                            OPL_ClrList:
0000D9EC 429A                       		clr.l	(a2)+
0000D9EE 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000D9F2                            
0000D9F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D9F6 7400                       		moveq	#0,d2
0000D9F8 3C38 F700                  		move.w	($FFFFF700).w,d6
0000D9FC 0446 0080                  		subi.w	#$80,d6
0000DA00 6400                       		bcc.s	loc_D93C
0000DA02 7C00                       		moveq	#0,d6
0000DA04                            
0000DA04                            loc_D93C:
0000DA04 0246 FF80                  		andi.w	#$FF80,d6
0000DA08 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DA0C                            
0000DA0C                            loc_D944:
0000DA0C BC50                       		cmp.w	(a0),d6
0000DA0E 6300                       		bls.s	loc_D956
0000DA10 4A28 0004                  		tst.b	4(a0)
0000DA14 6A00                       		bpl.s	loc_D952
0000DA16 1412                       		move.b	(a2),d2
0000DA18 5212                       		addq.b	#1,(a2)
0000DA1A                            
0000DA1A                            loc_D952:
0000DA1A 5C48                       		addq.w	#6,a0
0000DA1C 60EE                       		bra.s	loc_D944
0000DA1E                            ; ===========================================================================
0000DA1E                            
0000DA1E                            loc_D956:
0000DA1E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DA22 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DA26 0446 0080                  		subi.w	#$80,d6
0000DA2A 6500                       		bcs.s	loc_D976
0000DA2C                            
0000DA2C                            loc_D964:
0000DA2C BC50                       		cmp.w	(a0),d6
0000DA2E 6300                       		bls.s	loc_D976
0000DA30 4A28 0004                  		tst.b	4(a0)
0000DA34 6A00                       		bpl.s	loc_D972
0000DA36 522A 0001                  		addq.b	#1,1(a2)
0000DA3A                            
0000DA3A                            loc_D972:
0000DA3A 5C48                       		addq.w	#6,a0
0000DA3C 60EE                       		bra.s	loc_D964
0000DA3E                            ; ===========================================================================
0000DA3E                            
0000DA3E                            loc_D976:
0000DA3E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DA42 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DA48                            
0000DA48                            OPL_Next:				; XREF: OPL_Index
0000DA48 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA4C 7400                       		moveq	#0,d2
0000DA4E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DA52 0246 FF80                  		andi.w	#$FF80,d6
0000DA56 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DA5A 6700 0000                  		beq.w	locret_DA3A
0000DA5E 6C00                       		bge.s	loc_D9F6
0000DA60 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DA64 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DA68 0446 0080                  		subi.w	#$80,d6
0000DA6C 6500                       		bcs.s	loc_D9D2
0000DA6E                            
0000DA6E                            loc_D9A6:
0000DA6E BC68 FFFA                  		cmp.w	-6(a0),d6
0000DA72 6C00                       		bge.s	loc_D9D2
0000DA74 5D48                       		subq.w	#6,a0
0000DA76 4A28 0004                  		tst.b	4(a0)
0000DA7A 6A00                       		bpl.s	loc_D9BC
0000DA7C 532A 0001                  		subq.b	#1,1(a2)
0000DA80 142A 0001                  		move.b	1(a2),d2
0000DA84                            
0000DA84                            loc_D9BC:
0000DA84 6100 0000                  		bsr.w	loc_DA3C
0000DA88 6600                       		bne.s	loc_D9C6
0000DA8A 5D48                       		subq.w	#6,a0
0000DA8C 60E0                       		bra.s	loc_D9A6
0000DA8E                            ; ===========================================================================
0000DA8E                            
0000DA8E                            loc_D9C6:
0000DA8E 4A28 0004                  		tst.b	4(a0)
0000DA92 6A00                       		bpl.s	loc_D9D0
0000DA94 522A 0001                  		addq.b	#1,1(a2)
0000DA98                            
0000DA98                            loc_D9D0:
0000DA98 5C48                       		addq.w	#6,a0
0000DA9A                            
0000DA9A                            loc_D9D2:
0000DA9A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DA9E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DAA2 0646 0300                  		addi.w	#$300,d6
0000DAA6                            
0000DAA6                            loc_D9DE:
0000DAA6 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DAAA 6E00                       		bgt.s	loc_D9F0
0000DAAC 4A28 FFFE                  		tst.b	-2(a0)
0000DAB0 6A00                       		bpl.s	loc_D9EC
0000DAB2 5312                       		subq.b	#1,(a2)
0000DAB4                            
0000DAB4                            loc_D9EC:
0000DAB4 5D48                       		subq.w	#6,a0
0000DAB6 60EE                       		bra.s	loc_D9DE
0000DAB8                            ; ===========================================================================
0000DAB8                            
0000DAB8                            loc_D9F0:
0000DAB8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DABC 4E75                       		rts	
0000DABE                            ; ===========================================================================
0000DABE                            
0000DABE                            loc_D9F6:
0000DABE 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DAC2 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DAC6 0646 0280                  		addi.w	#$280,d6
0000DACA                            
0000DACA                            loc_DA02:
0000DACA BC50                       		cmp.w	(a0),d6
0000DACC 6300                       		bls.s	loc_DA16
0000DACE 4A28 0004                  		tst.b	4(a0)
0000DAD2 6A00                       		bpl.s	loc_DA10
0000DAD4 1412                       		move.b	(a2),d2
0000DAD6 5212                       		addq.b	#1,(a2)
0000DAD8                            
0000DAD8                            loc_DA10:
0000DAD8 6100 0000                  		bsr.w	loc_DA3C
0000DADC 67EC                       		beq.s	loc_DA02
0000DADE                            
0000DADE                            loc_DA16:
0000DADE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DAE2 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DAE6 0446 0300                  		subi.w	#$300,d6
0000DAEA 6500                       		bcs.s	loc_DA36
0000DAEC                            
0000DAEC                            loc_DA24:
0000DAEC BC50                       		cmp.w	(a0),d6
0000DAEE 6300                       		bls.s	loc_DA36
0000DAF0 4A28 0004                  		tst.b	4(a0)
0000DAF4 6A00                       		bpl.s	loc_DA32
0000DAF6 522A 0001                  		addq.b	#1,1(a2)
0000DAFA                            
0000DAFA                            loc_DA32:
0000DAFA 5C48                       		addq.w	#6,a0
0000DAFC 60EE                       		bra.s	loc_DA24
0000DAFE                            ; ===========================================================================
0000DAFE                            
0000DAFE                            loc_DA36:
0000DAFE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DB02                            
0000DB02                            locret_DA3A:
0000DB02 4E75                       		rts	
0000DB04                            ; ===========================================================================
0000DB04                            
0000DB04                            loc_DA3C:
0000DB04 4A28 0004                  		tst.b	4(a0)
0000DB08 6A00                       		bpl.s	OPL_MakeItem
0000DB0A 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DB10 6700                       		beq.s	OPL_MakeItem
0000DB12 5C48                       		addq.w	#6,a0
0000DB14 7000                       		moveq	#0,d0
0000DB16 4E75                       		rts	
0000DB18                            ; ===========================================================================
0000DB18                            
0000DB18                            OPL_MakeItem:
0000DB18 6100 0000                  		bsr.w	SingleObjLoad
0000DB1C 6600                       		bne.s	locret_DA8A
0000DB1E 3358 0008                  		move.w	(a0)+,8(a1)
0000DB22 3018                       		move.w	(a0)+,d0
0000DB24 3200                       		move.w	d0,d1
0000DB26 0240 0FFF                  		andi.w	#$FFF,d0
0000DB2A 3340 000C                  		move.w	d0,$C(a1)
0000DB2E E559                       		rol.w	#2,d1
0000DB30 0201 0003                  		andi.b	#3,d1
0000DB34 1341 0001                  		move.b	d1,1(a1)
0000DB38 1341 0022                  		move.b	d1,$22(a1)
0000DB3C 1018                       		move.b	(a0)+,d0
0000DB3E 6A00                       		bpl.s	loc_DA80
0000DB40 0200 007F                  		andi.b	#$7F,d0
0000DB44 1342 0023                  		move.b	d2,$23(a1)
0000DB48                            
0000DB48                            loc_DA80:
0000DB48 1280                       		move.b	d0,0(a1)
0000DB4A 1358 0028                  		move.b	(a0)+,$28(a1)
0000DB4E 7000                       		moveq	#0,d0
0000DB50                            
0000DB50                            locret_DA8A:
0000DB50 4E75                       		rts	
0000DB52                            ; ---------------------------------------------------------------------------
0000DB52                            ; Single object	loading	subroutine
0000DB52                            ; ---------------------------------------------------------------------------
0000DB52                            
0000DB52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB52                            
0000DB52                            
0000DB52                            SingleObjLoad:
0000DB52 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DB56 303C 005F                  		move.w	#$5F,d0
0000DB5A                            
0000DB5A                            loc_DA94:
0000DB5A 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DB5C 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DB5E 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000DB62 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000DB66                            
0000DB66                            locret_DAA0:
0000DB66 4E75                       		rts	
0000DB68                            ; End of function SingleObjLoad
0000DB68                            
0000DB68                            
0000DB68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB68                            
0000DB68                            
0000DB68                            SingleObjLoad2:
0000DB68 2248                       		movea.l	a0,a1
0000DB6A 303C F000                  		move.w	#-$1000,d0
0000DB6E 9048                       		sub.w	a0,d0
0000DB70 EC48                       		lsr.w	#6,d0
0000DB72 5340                       		subq.w	#1,d0
0000DB74 6500                       		bcs.s	locret_DABC
0000DB76                            
0000DB76                            loc_DAB0:
0000DB76 4A11                       		tst.b	(a1)
0000DB78 6700                       		beq.s	locret_DABC
0000DB7A 43E9 0040                  		lea	$40(a1),a1
0000DB7E 51C8 FFF6                  		dbf	d0,loc_DAB0
0000DB82                            
0000DB82                            locret_DABC:
0000DB82 4E75                       		rts	
0000DB84                            ; End of function SingleObjLoad2
0000DB84                            
0000DB84                            ; ===========================================================================
0000DB84                            ; ---------------------------------------------------------------------------
0000DB84                            ; Object 41 - springs
0000DB84                            ; ---------------------------------------------------------------------------
0000DB84                            
0000DB84                            Obj41:					; XREF: Obj_Index
0000DB84 7000                       		moveq	#0,d0
0000DB86 1028 0024                  		move.b	$24(a0),d0
0000DB8A 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000DB8E 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000DB92 6100 FB38                  		bsr.w	DisplaySprite
0000DB96 3028 0008                  		move.w	8(a0),d0
0000DB9A 0240 FF80                  		andi.w	#$FF80,d0
0000DB9E 3238 F700                  		move.w	($FFFFF700).w,d1
0000DBA2 0441 0080                  		subi.w	#$80,d1
0000DBA6 0241 FF80                  		andi.w	#$FF80,d1
0000DBAA 9041                       		sub.w	d1,d0
0000DBAC 0C40 0280                  		cmpi.w	#$280,d0
0000DBB0 6200 FB56                  		bhi.w	DeleteObject
0000DBB4 4E75                       		rts	
0000DBB6                            ; ===========================================================================
0000DBB6 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000DBB8 0000                       		dc.w Obj41_Up-Obj41_Index
0000DBBA 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000DBBC 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000DBBE 0000                       		dc.w Obj41_LR-Obj41_Index
0000DBC0 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000DBC2 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000DBC4 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000DBC6 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000DBC8 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000DBCA                            
0000DBCA F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000DBCC F600                       		dc.w -$A00		; power	of yellow spring
0000DBCE                            ; ===========================================================================
0000DBCE                            
0000DBCE                            Obj41_Main:				; XREF: Obj41_Index
0000DBCE 5428 0024                  		addq.b	#2,$24(a0)
0000DBD2 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000DBDA 317C 0523 0002             		move.w	#$523,2(a0)
0000DBE0 0028 0004 0001             		ori.b	#4,1(a0)
0000DBE6 117C 0010 0019             		move.b	#$10,$19(a0)
0000DBEC 117C 0004 0018             		move.b	#4,$18(a0)
0000DBF2 1028 0028                  		move.b	$28(a0),d0
0000DBF6 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000DBFA 6700                       		beq.s	loc_DB54	; if not, branch
0000DBFC 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000DC02 117C 0001 001C             		move.b	#1,$1C(a0)
0000DC08 117C 0003 001A             		move.b	#3,$1A(a0)
0000DC0E 317C 0533 0002             		move.w	#$533,2(a0)
0000DC14 117C 0008 0019             		move.b	#8,$19(a0)
0000DC1A                            
0000DC1A                            loc_DB54:
0000DC1A 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000DC1E 6700                       		beq.s	loc_DB66	; if not, branch
0000DC20 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000DC26 08E8 0001 0022             		bset	#1,$22(a0)
0000DC2C                            
0000DC2C                            loc_DB66:
0000DC2C 0800 0001                  		btst	#1,d0
0000DC30 6700                       		beq.s	loc_DB72
0000DC32 08E8 0005 0002             		bset	#5,2(a0)
0000DC38                            
0000DC38                            loc_DB72:
0000DC38 0240 000F                  		andi.w	#$F,d0
0000DC3C 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000DC42 4E75                       		rts	
0000DC44                            ; ===========================================================================
0000DC44                            
0000DC44                            Obj41_Up:				; XREF: Obj41_Index
0000DC44 323C 001B                  		move.w	#$1B,d1
0000DC48 343C 0008                  		move.w	#8,d2
0000DC4C 363C 0010                  		move.w	#$10,d3
0000DC50 3828 0008                  		move.w	8(a0),d4
0000DC54 6100 0000                  		bsr.w	SolidObject
0000DC58 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000DC5C 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000DC5E 4E75                       		rts	
0000DC60                            ; ===========================================================================
0000DC60                            
0000DC60                            Obj41_BounceUp:				; XREF: Obj41_Up
0000DC60 5428 0024                  		addq.b	#2,$24(a0)
0000DC64 5069 000C                  		addq.w	#8,$C(a1)
0000DC68 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000DC6E 08E9 0001 0022             		bset	#1,$22(a1)
0000DC74 08A9 0003 0022             		bclr	#3,$22(a1)
0000DC7A 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000DC80 137C 0002 0024             		move.b	#2,$24(a1)
0000DC86 08A8 0003 0022             		bclr	#3,$22(a0)
0000DC8C 4228 0025                  		clr.b	$25(a0)
0000DC90 303C 00CC                  		move.w	#$CC,d0
0000DC94 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DC9A                            
0000DC9A                            Obj41_AniUp:				; XREF: Obj41_Index
0000DC9A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DCA0 6000 CB56                  		bra.w	AnimateSprite
0000DCA4                            ; ===========================================================================
0000DCA4                            
0000DCA4                            Obj41_ResetUp:				; XREF: Obj41_Index
0000DCA4 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DCAA 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000DCAE 4E75                       		rts	
0000DCB0                            ; ===========================================================================
0000DCB0                            
0000DCB0                            Obj41_LR:				; XREF: Obj41_Index
0000DCB0 323C 0013                  		move.w	#$13,d1
0000DCB4 343C 000E                  		move.w	#$E,d2
0000DCB8 363C 000F                  		move.w	#$F,d3
0000DCBC 3828 0008                  		move.w	8(a0),d4
0000DCC0 6100 0000                  		bsr.w	SolidObject
0000DCC4 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DCCA 6600                       		bne.s	loc_DC0C
0000DCCC 117C 0008 0024             		move.b	#8,$24(a0)
0000DCD2                            
0000DCD2                            loc_DC0C:
0000DCD2 0828 0005 0022             		btst	#5,$22(a0)
0000DCD8 6600                       		bne.s	Obj41_BounceLR
0000DCDA 4E75                       		rts	
0000DCDC                            ; ===========================================================================
0000DCDC                            
0000DCDC                            Obj41_BounceLR:				; XREF: Obj41_LR
0000DCDC 5428 0024                  		addq.b	#2,$24(a0)
0000DCE0 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000DCE6 5069 0008                  		addq.w	#8,8(a1)
0000DCEA 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000DCF0 6600                       		bne.s	loc_DC36	; if yes, branch
0000DCF2 0469 0010 0008             		subi.w	#$10,8(a1)
0000DCF8 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000DCFC                            
0000DCFC                            loc_DC36:
0000DCFC 337C 000F 003E             		move.w	#$F,$3E(a1)
0000DD02 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DD08 0869 0000 0022             		bchg	#0,$22(a1)
0000DD0E 0829 0002 0022             		btst	#2,$22(a1)
0000DD14 6600                       		bne.s	loc_DC56
0000DD16 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000DD1C                            
0000DD1C                            loc_DC56:
0000DD1C 08A8 0005 0022             		bclr	#5,$22(a0)
0000DD22 08A9 0005 0022             		bclr	#5,$22(a1)
0000DD28 303C 00CC                  		move.w	#$CC,d0
0000DD2C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DD32                            
0000DD32                            Obj41_AniLR:				; XREF: Obj41_Index
0000DD32 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DD38 6000 CABE                  		bra.w	AnimateSprite
0000DD3C                            ; ===========================================================================
0000DD3C                            
0000DD3C                            Obj41_ResetLR:				; XREF: Obj41_Index
0000DD3C 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000DD42 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000DD46 4E75                       		rts	
0000DD48                            ; ===========================================================================
0000DD48                            
0000DD48                            Obj41_Dwn:				; XREF: Obj41_Index
0000DD48 323C 001B                  		move.w	#$1B,d1
0000DD4C 343C 0008                  		move.w	#8,d2
0000DD50 363C 0010                  		move.w	#$10,d3
0000DD54 3828 0008                  		move.w	8(a0),d4
0000DD58 6100 0000                  		bsr.w	SolidObject
0000DD5C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DD62 6600                       		bne.s	loc_DCA4
0000DD64 117C 000E 0024             		move.b	#$E,$24(a0)
0000DD6A                            
0000DD6A                            loc_DCA4:
0000DD6A 4A28 0025                  		tst.b	$25(a0)
0000DD6E 6600                       		bne.s	locret_DCAE
0000DD70 4A44                       		tst.w	d4
0000DD72 6B00                       		bmi.s	Obj41_BounceDwn
0000DD74                            
0000DD74                            locret_DCAE:
0000DD74 4E75                       		rts	
0000DD76                            ; ===========================================================================
0000DD76                            
0000DD76                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000DD76 5428 0024                  		addq.b	#2,$24(a0)
0000DD7A 5169 000C                  		subq.w	#8,$C(a1)
0000DD7E 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000DD84 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000DD88 08E9 0001 0022             		bset	#1,$22(a1)
0000DD8E 08A9 0003 0022             		bclr	#3,$22(a1)
0000DD94 137C 0002 0024             		move.b	#2,$24(a1)
0000DD9A 08A8 0003 0022             		bclr	#3,$22(a0)
0000DDA0 4228 0025                  		clr.b	$25(a0)
0000DDA4 303C 00CC                  		move.w	#$CC,d0
0000DDA8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DDAE                            
0000DDAE                            Obj41_AniDwn:				; XREF: Obj41_Index
0000DDAE 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DDB4 6000 CA42                  		bra.w	AnimateSprite
0000DDB8                            ; ===========================================================================
0000DDB8                            
0000DDB8                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000DDB8 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DDBE 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000DDC2 4E75                       		rts	
0000DDC4                            ; ===========================================================================
0000DDC4                            Ani_obj41:
0000DDC4                            	include "_anim\obj41.asm"
0000DDC4                            ; ---------------------------------------------------------------------------
0000DDC4                            ; Animation script - springs
0000DDC4                            ; ---------------------------------------------------------------------------
0000DDC4 0000                       		dc.w byte_DD02-Ani_obj41
0000DDC6 0000                       		dc.w byte_DD0E-Ani_obj41
0000DDC8 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000DDD4 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000DDE0                            		even
0000DDE0                            		even
0000DDE0                            
0000DDE0                            ; ---------------------------------------------------------------------------
0000DDE0                            ; Sprite mappings - springs
0000DDE0                            ; ---------------------------------------------------------------------------
0000DDE0                            Map_obj41:
0000DDE0                            	include "_maps\obj41.asm"
0000DDE0                            ; ---------------------------------------------------------------------------
0000DDE0                            ; Sprite mappings - springs
0000DDE0                            ; ---------------------------------------------------------------------------
0000DDE0 0000                       		dc.w byte_DD26-Map_obj41
0000DDE2 0000                       		dc.w byte_DD31-Map_obj41
0000DDE4 0000                       		dc.w byte_DD37-Map_obj41
0000DDE6 0000                       		dc.w byte_DD47-Map_obj41
0000DDE8 0000                       		dc.w byte_DD4D-Map_obj41
0000DDEA 0000                       		dc.w byte_DD53-Map_obj41
0000DDEC 02                         byte_DD26:	dc.b 2
0000DDED F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000DDF2 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000DDF7 01                         byte_DD31:	dc.b 1
0000DDF8 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000DDFD 03                         byte_DD37:	dc.b 3
0000DDFE E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000DE03 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000DE08 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000DE0D 01                         byte_DD47:	dc.b 1
0000DE0E F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000DE13 01                         byte_DD4D:	dc.b 1
0000DE14 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000DE19 04                         byte_DD53:	dc.b 4
0000DE1A F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000DE1F F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000DE24 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000DE29 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000DE2E                            		even
0000DE2E                            		even
0000DE2E                            
0000DE2E                            ; ===========================================================================
0000DE2E                            ; ---------------------------------------------------------------------------
0000DE2E                            ; Object 42 - Newtron enemy (GHZ)
0000DE2E                            ; ---------------------------------------------------------------------------
0000DE2E                            
0000DE2E                            Obj42:					; XREF: Obj_Index
0000DE2E 7000                       		moveq	#0,d0
0000DE30 1028 0024                  		move.b	$24(a0),d0
0000DE34 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000DE38 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000DE3C                            ; ===========================================================================
0000DE3C 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000DE3E 0000                       		dc.w Obj42_Action-Obj42_Index
0000DE40 0000                       		dc.w Obj42_Delete-Obj42_Index
0000DE42                            ; ===========================================================================
0000DE42                            
0000DE42                            Obj42_Main:				; XREF: Obj42_Index
0000DE42 5428 0024                  		addq.b	#2,$24(a0)
0000DE46 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000DE4E 317C 049B 0002             		move.w	#$49B,2(a0)
0000DE54 117C 0004 0001             		move.b	#4,1(a0)
0000DE5A 117C 0004 0018             		move.b	#4,$18(a0)
0000DE60 117C 0014 0019             		move.b	#$14,$19(a0)
0000DE66 117C 0010 0016             		move.b	#$10,$16(a0)
0000DE6C 117C 0008 0017             		move.b	#8,$17(a0)
0000DE72                            
0000DE72                            Obj42_Action:				; XREF: Obj42_Index
0000DE72 7000                       		moveq	#0,d0
0000DE74 1028 0025                  		move.b	$25(a0),d0
0000DE78 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000DE7C 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000DE80 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000DE86 6100 C970                  		bsr.w	AnimateSprite
0000DE8A 6000 0000                  		bra.w	MarkObjGone
0000DE8E                            ; ===========================================================================
0000DE8E 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000DE90 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000DE92 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000DE94 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000DE96 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000DE98                            ; ===========================================================================
0000DE98                            
0000DE98                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000DE98 08E8 0000 0022             		bset	#0,$22(a0)
0000DE9E 3038 D008                  		move.w	($FFFFD008).w,d0
0000DEA2 9068 0008                  		sub.w	8(a0),d0
0000DEA6 6400                       		bcc.s	loc_DDEA
0000DEA8 4440                       		neg.w	d0
0000DEAA 08A8 0000 0022             		bclr	#0,$22(a0)
0000DEB0                            
0000DEB0                            loc_DDEA:
0000DEB0 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000DEB4 6400                       		bcc.s	locret_DE12	; if not, branch
0000DEB6 5428 0025                  		addq.b	#2,$25(a0)
0000DEBA 117C 0001 001C             		move.b	#1,$1C(a0)
0000DEC0 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000DEC4 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000DEC6 317C 249B 0002             		move.w	#$249B,2(a0)
0000DECC 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000DED2 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000DED8                            
0000DED8                            locret_DE12:
0000DED8 4E75                       		rts	
0000DEDA                            ; ===========================================================================
0000DEDA                            
0000DEDA                            Obj42_Type00:				; XREF: Obj42_Index2
0000DEDA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000DEE0 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000DEE2 08E8 0000 0022             		bset	#0,$22(a0)
0000DEE8 3038 D008                  		move.w	($FFFFD008).w,d0
0000DEEC 9068 0008                  		sub.w	8(a0),d0
0000DEF0 6400                       		bcc.s	locret_DE32
0000DEF2 08A8 0000 0022             		bclr	#0,$22(a0)
0000DEF8                            
0000DEF8                            locret_DE32:
0000DEF8 4E75                       		rts	
0000DEFA                            ; ===========================================================================
0000DEFA                            
0000DEFA                            Obj42_Fall:				; XREF: Obj42_Type00
0000DEFA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DF00 6600                       		bne.s	loc_DE42
0000DF02 117C 000C 0020             		move.b	#$C,$20(a0)
0000DF08                            
0000DF08                            loc_DE42:
0000DF08 6100 F770                  		bsr.w	ObjectFall
0000DF0C 6100 0000                  		bsr.w	ObjHitFloor
0000DF10 4A41                       		tst.w	d1		; has newtron hit the floor?
0000DF12 6A00                       		bpl.s	locret_DE86	; if not, branch
0000DF14 D368 000C                  		add.w	d1,$C(a0)
0000DF18 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000DF1E 5428 0025                  		addq.b	#2,$25(a0)
0000DF22 117C 0002 001C             		move.b	#2,$1C(a0)
0000DF28 0828 0005 0002             		btst	#5,2(a0)
0000DF2E 6700                       		beq.s	Obj42_Move
0000DF30 5228 001C                  		addq.b	#1,$1C(a0)
0000DF34                            
0000DF34                            Obj42_Move:
0000DF34 117C 000D 0020             		move.b	#$D,$20(a0)
0000DF3A 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000DF40 0828 0000 0022             		btst	#0,$22(a0)
0000DF46 6600                       		bne.s	locret_DE86
0000DF48 4468 0010                  		neg.w	$10(a0)
0000DF4C                            
0000DF4C                            locret_DE86:
0000DF4C 4E75                       		rts	
0000DF4E                            ; ===========================================================================
0000DF4E                            
0000DF4E                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000DF4E 6100 F756                  		bsr.w	SpeedToPos
0000DF52 6100 0000                  		bsr.w	ObjHitFloor
0000DF56 0C41 FFF8                  		cmpi.w	#-8,d1
0000DF5A 6D00                       		blt.s	loc_DEA2
0000DF5C 0C41 000C                  		cmpi.w	#$C,d1
0000DF60 6C00                       		bge.s	loc_DEA2
0000DF62 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000DF66 4E75                       		rts	
0000DF68                            ; ===========================================================================
0000DF68                            
0000DF68                            loc_DEA2:
0000DF68 5428 0025                  		addq.b	#2,$25(a0)
0000DF6C 4E75                       		rts	
0000DF6E                            ; ===========================================================================
0000DF6E                            
0000DF6E                            Obj42_Speed:				; XREF: Obj42_Index2
0000DF6E 6100 F736                  		bsr.w	SpeedToPos
0000DF72 4E75                       		rts	
0000DF74                            ; ===========================================================================
0000DF74                            
0000DF74                            Obj42_Type01:				; XREF: Obj42_Index2
0000DF74 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DF7A 6600                       		bne.s	Obj42_FireMissile
0000DF7C 117C 000C 0020             		move.b	#$C,$20(a0)
0000DF82                            
0000DF82                            Obj42_FireMissile:
0000DF82 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DF88 6600                       		bne.s	locret_DF14
0000DF8A 4A28 0032                  		tst.b	$32(a0)
0000DF8E 6600                       		bne.s	locret_DF14
0000DF90 117C 0001 0032             		move.b	#1,$32(a0)
0000DF96 6100 FBBA                  		bsr.w	SingleObjLoad
0000DF9A 6600                       		bne.s	locret_DF14
0000DF9C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000DFA0 3368 0008 0008             		move.w	8(a0),8(a1)
0000DFA6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DFAC 5169 000C                  		subq.w	#8,$C(a1)
0000DFB0 337C 0200 0010             		move.w	#$200,$10(a1)
0000DFB6 303C 0014                  		move.w	#$14,d0
0000DFBA 0828 0000 0022             		btst	#0,$22(a0)
0000DFC0 6600                       		bne.s	loc_DF04
0000DFC2 4440                       		neg.w	d0
0000DFC4 4469 0010                  		neg.w	$10(a1)
0000DFC8                            
0000DFC8                            loc_DF04:
0000DFC8 D169 0008                  		add.w	d0,8(a1)
0000DFCC 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000DFD2 137C 0001 0028             		move.b	#1,$28(a1)
0000DFD8                            
0000DFD8                            locret_DF14:
0000DFD8 4E75                       		rts	
0000DFDA                            ; ===========================================================================
0000DFDA                            
0000DFDA                            Obj42_Delete:				; XREF: Obj42_Index
0000DFDA 6000 F72C                  		bra.w	DeleteObject
0000DFDE                            ; ===========================================================================
0000DFDE                            Ani_obj42:
0000DFDE                            	include "_anim\obj42.asm"
0000DFDE                            ; ---------------------------------------------------------------------------
0000DFDE                            ; Animation script - Newtron enemy
0000DFDE                            ; ---------------------------------------------------------------------------
0000DFDE 0000                       		dc.w byte_DF24-Ani_obj42
0000DFE0 0000                       		dc.w byte_DF28-Ani_obj42
0000DFE2 0000                       		dc.w byte_DF30-Ani_obj42
0000DFE4 0000                       		dc.w byte_DF34-Ani_obj42
0000DFE6 0000                       		dc.w byte_DF38-Ani_obj42
0000DFE8 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000DFEC 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000DFF4 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000DFF8 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000DFFC 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E006                            		even
0000E006                            		even
0000E006                            
0000E006                            ; ---------------------------------------------------------------------------
0000E006                            ; Sprite mappings - Newtron enemy (GHZ)
0000E006                            ; ---------------------------------------------------------------------------
0000E006                            Map_obj42:
0000E006                            	include "_maps\obj42.asm"
0000E006                            ; ---------------------------------------------------------------------------
0000E006                            ; Sprite mappings - Newtron enemy (GHZ)
0000E006                            ; ---------------------------------------------------------------------------
0000E006 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E00A 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E00E 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E012 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E016 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E01A 0000                       		dc.w byte_DFF8-Map_obj42
0000E01C 03                         byte_DF58:	dc.b 3
0000E01D EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E022 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E027 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E02C 03                         byte_DF68:	dc.b 3
0000E02D EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E032 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E037 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E03C 03                         byte_DF78:	dc.b 3
0000E03D EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E042 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E047 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E04C 04                         byte_DF88:	dc.b 4
0000E04D EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E052 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E057 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E05C 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E061 03                         byte_DF9D:	dc.b 3
0000E062 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E067 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E06C 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E071 02                         byte_DFAD:	dc.b 2
0000E072 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E077 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E07C 03                         byte_DFB8:	dc.b 3
0000E07D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E082 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E087 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E08C 03                         byte_DFC8:	dc.b 3
0000E08D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E092 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E097 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E09C 03                         byte_DFD8:	dc.b 3
0000E09D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E0A2 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E0A7 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E0AC 03                         byte_DFE8:	dc.b 3
0000E0AD F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E0B2 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E0B7 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E0BC 00                         byte_DFF8:	dc.b 0
0000E0BE 00                         		even
0000E0BE 00                         		even
0000E0BE                            
0000E0BE                            ; ===========================================================================
0000E0BE                            ; ---------------------------------------------------------------------------
0000E0BE                            ; Object 43 - Roller enemy (SYZ)
0000E0BE                            ; ---------------------------------------------------------------------------
0000E0BE                            
0000E0BE                            Obj43:					; XREF: Obj_Index
0000E0BE 7000                       		moveq	#0,d0
0000E0C0 1028 0024                  		move.b	$24(a0),d0
0000E0C4 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E0C8 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E0CC                            ; ===========================================================================
0000E0CC 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E0CE 0000                       		dc.w Obj43_Action-Obj43_Index
0000E0D0                            ; ===========================================================================
0000E0D0                            
0000E0D0                            Obj43_Main:				; XREF: Obj43_Index
0000E0D0 117C 000E 0016             		move.b	#$E,$16(a0)
0000E0D6 117C 0008 0017             		move.b	#8,$17(a0)
0000E0DC 6100 F59C                  		bsr.w	ObjectFall
0000E0E0 6100 0000                  		bsr.w	ObjHitFloor
0000E0E4 4A41                       		tst.w	d1
0000E0E6 6A00                       		bpl.s	locret_E052
0000E0E8 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E0EC 317C 0000 0012             		move.w	#0,$12(a0)
0000E0F2 5428 0024                  		addq.b	#2,$24(a0)
0000E0F6 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E0FE 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E104 117C 0004 0001             		move.b	#4,1(a0)
0000E10A 117C 0004 0018             		move.b	#4,$18(a0)
0000E110 117C 0010 0019             		move.b	#$10,$19(a0)
0000E116                            
0000E116                            locret_E052:
0000E116 4E75                       		rts	
0000E118                            ; ===========================================================================
0000E118                            
0000E118                            Obj43_Action:				; XREF: Obj43_Index
0000E118 7000                       		moveq	#0,d0
0000E11A 1028 0025                  		move.b	$25(a0),d0
0000E11E 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E122 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E126 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E12C 6100 C6CA                  		bsr.w	AnimateSprite
0000E130 3028 0008                  		move.w	8(a0),d0
0000E134 0240 FF80                  		andi.w	#$FF80,d0
0000E138 3238 F700                  		move.w	($FFFFF700).w,d1
0000E13C 0441 0080                  		subi.w	#$80,d1
0000E140 0241 FF80                  		andi.w	#$FF80,d1
0000E144 9041                       		sub.w	d1,d0
0000E146 0C40 0280                  		cmpi.w	#$280,d0
0000E14A 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E14E 6000 F57C                  		bra.w	DisplaySprite
0000E152                            ; ===========================================================================
0000E152                            
0000E152                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E152 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E156 7000                       		moveq	#0,d0
0000E158 1028 0023                  		move.b	$23(a0),d0
0000E15C 6700                       		beq.s	Obj43_Delete
0000E15E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E164                            
0000E164                            Obj43_Delete:
0000E164 6000 F5A2                  		bra.w	DeleteObject
0000E168                            ; ===========================================================================
0000E168 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E16A 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E16C 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E16E 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E170                            ; ===========================================================================
0000E170                            
0000E170                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E170 3038 D008                  		move.w	($FFFFD008).w,d0
0000E174 0440 0100                  		subi.w	#$100,d0
0000E178 6500                       		bcs.s	loc_E0D2
0000E17A 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E17E 6500                       		bcs.s	loc_E0D2
0000E180 5828 0025                  		addq.b	#4,$25(a0)
0000E184 117C 0002 001C             		move.b	#2,$1C(a0)
0000E18A 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E190 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E196                            
0000E196                            loc_E0D2:
0000E196 588F                       		addq.l	#4,sp
0000E198 4E75                       		rts	
0000E19A                            ; ===========================================================================
0000E19A                            
0000E19A                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E19A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E1A0 6700                       		beq.s	loc_E0F8
0000E1A2 5368 0030                  		subq.w	#1,$30(a0)
0000E1A6 6A00                       		bpl.s	locret_E0F6
0000E1A8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E1AE 317C 0700 0010             		move.w	#$700,$10(a0)
0000E1B4 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E1BA                            
0000E1BA                            locret_E0F6:
0000E1BA 4E75                       		rts	
0000E1BC                            ; ===========================================================================
0000E1BC                            
0000E1BC                            loc_E0F8:
0000E1BC 5428 0025                  		addq.b	#2,$25(a0)
0000E1C0 4E75                       		rts	
0000E1C2                            ; ===========================================================================
0000E1C2                            
0000E1C2                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E1C2 6100 0000                  		bsr.w	Obj43_Stop
0000E1C6 6100 F4DE                  		bsr.w	SpeedToPos
0000E1CA 6100 0000                  		bsr.w	ObjHitFloor
0000E1CE 0C41 FFF8                  		cmpi.w	#-8,d1
0000E1D2 6D00                       		blt.s	Obj43_Jump
0000E1D4 0C41 000C                  		cmpi.w	#$C,d1
0000E1D8 6C00                       		bge.s	Obj43_Jump
0000E1DA D368 000C                  		add.w	d1,$C(a0)
0000E1DE 4E75                       		rts	
0000E1E0                            ; ===========================================================================
0000E1E0                            
0000E1E0                            Obj43_Jump:
0000E1E0 5428 0025                  		addq.b	#2,$25(a0)
0000E1E4 08E8 0000 0032             		bset	#0,$32(a0)
0000E1EA 6700                       		beq.s	locret_E12E
0000E1EC 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E1F2                            
0000E1F2                            locret_E12E:
0000E1F2 4E75                       		rts	
0000E1F4                            ; ===========================================================================
0000E1F4                            
0000E1F4                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E1F4 6100 F484                  		bsr.w	ObjectFall
0000E1F8 4A68 0012                  		tst.w	$12(a0)
0000E1FC 6B00                       		bmi.s	locret_E150
0000E1FE 6100 0000                  		bsr.w	ObjHitFloor
0000E202 4A41                       		tst.w	d1
0000E204 6A00                       		bpl.s	locret_E150
0000E206 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E20A 5528 0025                  		subq.b	#2,$25(a0)
0000E20E 317C 0000 0012             		move.w	#0,$12(a0)
0000E214                            
0000E214                            locret_E150:
0000E214 4E75                       		rts	
0000E216                            
0000E216                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E216                            
0000E216                            
0000E216                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E216 4A28 0032                  		tst.b	$32(a0)
0000E21A 6B00                       		bmi.s	locret_E188
0000E21C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E220 0440 0030                  		subi.w	#$30,d0
0000E224 9068 0008                  		sub.w	8(a0),d0
0000E228 6400                       		bcc.s	locret_E188
0000E22A 117C 0000 001C             		move.b	#0,$1C(a0)
0000E230 117C 000E 0020             		move.b	#$E,$20(a0)
0000E236 4268 0010                  		clr.w	$10(a0)
0000E23A 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E240 117C 0002 0025             		move.b	#2,$25(a0)
0000E246 08E8 0007 0032             		bset	#7,$32(a0)
0000E24C                            
0000E24C                            locret_E188:
0000E24C 4E75                       		rts	
0000E24E                            ; End of function Obj43_Stop
0000E24E                            
0000E24E                            ; ===========================================================================
0000E24E                            Ani_obj43:
0000E24E                            	include "_anim\obj43.asm"
0000E24E                            ; ---------------------------------------------------------------------------
0000E24E                            ; Animation script - Roller enemy
0000E24E                            ; ---------------------------------------------------------------------------
0000E24E 0000                       		dc.w byte_E190-Ani_obj43
0000E250 0000                       		dc.w byte_E196-Ani_obj43
0000E252 0000                       		dc.w byte_E19C-Ani_obj43
0000E254 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E25A 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E260 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E266 00                         		even
0000E266 00                         		even
0000E266                            
0000E266                            ; ---------------------------------------------------------------------------
0000E266                            ; Sprite mappings - Roller enemy (SYZ)
0000E266                            ; ---------------------------------------------------------------------------
0000E266                            Map_obj43:
0000E266                            	include "_maps\obj43.asm"
0000E266                            ; ---------------------------------------------------------------------------
0000E266                            ; Sprite mappings - Roller enemy (SYZ)
0000E266                            ; ---------------------------------------------------------------------------
0000E266 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E26A 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E26E 0000                       		dc.w byte_E1CE-Map_obj43
0000E270 02                         byte_E1AC:	dc.b 2
0000E271 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E276 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E27B 02                         byte_E1B7:	dc.b 2
0000E27C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E281 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E286 01                         byte_E1C2:	dc.b 1
0000E287 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E28C 01                         byte_E1C8:	dc.b 1
0000E28D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E292 01                         byte_E1CE:	dc.b 1
0000E293 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E298                            		even
0000E298                            		even
0000E298                            
0000E298                            ; ===========================================================================
0000E298                            ; ---------------------------------------------------------------------------
0000E298                            ; Object 44 - walls (GHZ)
0000E298                            ; ---------------------------------------------------------------------------
0000E298                            
0000E298                            Obj44:					; XREF: Obj_Index
0000E298 7000                       		moveq	#0,d0
0000E29A 1028 0024                  		move.b	$24(a0),d0
0000E29E 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E2A2 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E2A6                            ; ===========================================================================
0000E2A6 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E2A8 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E2AA 0000                       		dc.w Obj44_Display-Obj44_Index
0000E2AC                            ; ===========================================================================
0000E2AC                            
0000E2AC                            Obj44_Main:				; XREF: Obj44_Index
0000E2AC 5428 0024                  		addq.b	#2,$24(a0)
0000E2B0 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E2B8 317C 434C 0002             		move.w	#$434C,2(a0)
0000E2BE 0028 0004 0001             		ori.b	#4,1(a0)
0000E2C4 117C 0008 0019             		move.b	#8,$19(a0)
0000E2CA 117C 0006 0018             		move.b	#6,$18(a0)
0000E2D0 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E2D6 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E2DC 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E2DE 5428 0024                  		addq.b	#2,$24(a0)
0000E2E2 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E2E4                            ; ===========================================================================
0000E2E4                            
0000E2E4                            Obj44_Solid:				; XREF: Obj44_Index
0000E2E4 323C 0013                  		move.w	#$13,d1
0000E2E8 343C 0028                  		move.w	#$28,d2
0000E2EC 6100 A86E                  		bsr.w	Obj44_SolidWall
0000E2F0                            
0000E2F0                            Obj44_Display:				; XREF: Obj44_Index
0000E2F0 6100 F3DA                  		bsr.w	DisplaySprite
0000E2F4 3028 0008                  		move.w	8(a0),d0
0000E2F8 0240 FF80                  		andi.w	#$FF80,d0
0000E2FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000E300 0441 0080                  		subi.w	#$80,d1
0000E304 0241 FF80                  		andi.w	#$FF80,d1
0000E308 9041                       		sub.w	d1,d0
0000E30A 0C40 0280                  		cmpi.w	#$280,d0
0000E30E 6200 F3F8                  		bhi.w	DeleteObject
0000E312 4E75                       		rts	
0000E314                            ; ===========================================================================
0000E314                            ; ---------------------------------------------------------------------------
0000E314                            ; Sprite mappings - walls (GHZ)
0000E314                            ; ---------------------------------------------------------------------------
0000E314                            Map_obj44:
0000E314                            	include "_maps\obj44.asm"
0000E314                            ; ---------------------------------------------------------------------------
0000E314                            ; Sprite mappings - walls (GHZ)
0000E314                            ; ---------------------------------------------------------------------------
0000E314 0000                       		dc.w byte_E256-Map_obj44
0000E316 0000                       		dc.w byte_E26B-Map_obj44
0000E318 0000                       		dc.w byte_E280-Map_obj44
0000E31A 04                         byte_E256:	dc.b 4
0000E31B E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E320 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E325 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E32A 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E32F 04                         byte_E26B:	dc.b 4
0000E330 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E335 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E33A 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E33F 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E344 04                         byte_E280:	dc.b 4
0000E345 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E34A F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E34F 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E354 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E35A 00                         		even
0000E35A 00                         		even
0000E35A                            
0000E35A                            ; ===========================================================================
0000E35A                            ; ---------------------------------------------------------------------------
0000E35A                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E35A                            ; ---------------------------------------------------------------------------
0000E35A                            
0000E35A                            Obj13:					; XREF: Obj_Index
0000E35A 7000                       		moveq	#0,d0
0000E35C 1028 0024                  		move.b	$24(a0),d0
0000E360 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E364 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E368 6000 0000                  		bra.w	Obj14_ChkDel
0000E36C                            ; ===========================================================================
0000E36C 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E36E 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E370                            ; ---------------------------------------------------------------------------
0000E370                            ;
0000E370                            ; Lava ball production rates
0000E370                            ;
0000E370 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E376                            ; ===========================================================================
0000E376                            
0000E376                            Obj13_Main:				; XREF: Obj13_Index
0000E376 5428 0024                  		addq.b	#2,$24(a0)
0000E37A 1028 0028                  		move.b	$28(a0),d0
0000E37E E848                       		lsr.w	#4,d0
0000E380 0240 000F                  		andi.w	#$F,d0
0000E384 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E38A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E390 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E396                            
0000E396                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E396 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E39A 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E39C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E3A2 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E3A6 6600                       		bne.s	locret_E302
0000E3A8 6100 F7A8                  		bsr.w	SingleObjLoad
0000E3AC 6600                       		bne.s	locret_E302
0000E3AE 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E3B2 3368 0008 0008             		move.w	8(a0),8(a1)
0000E3B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E3BE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E3C4                            
0000E3C4                            locret_E302:
0000E3C4 4E75                       		rts	
0000E3C6                            ; ===========================================================================
0000E3C6                            ; ---------------------------------------------------------------------------
0000E3C6                            ; Object 14 - lava balls (MZ, SLZ)
0000E3C6                            ; ---------------------------------------------------------------------------
0000E3C6                            
0000E3C6                            Obj14:					; XREF: Obj_Index
0000E3C6 7000                       		moveq	#0,d0
0000E3C8 1028 0024                  		move.b	$24(a0),d0
0000E3CC 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E3D0 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E3D4 6000 F2F6                  		bra.w	DisplaySprite
0000E3D8                            ; ===========================================================================
0000E3D8 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E3DA 0000                       		dc.w Obj14_Action-Obj14_Index
0000E3DC 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E3DE                            
0000E3DE FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E3E8 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E3F0                            ; ===========================================================================
0000E3F0                            
0000E3F0                            Obj14_Main:				; XREF: Obj14_Index
0000E3F0 5428 0024                  		addq.b	#2,$24(a0)
0000E3F4 117C 0008 0016             		move.b	#8,$16(a0)
0000E3FA 117C 0008 0017             		move.b	#8,$17(a0)
0000E400 217C 0000 B44A 0004        		move.l	#Map_obj14,4(a0)
0000E408 317C 0345 0002             		move.w	#$345,2(a0)
0000E40E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E414 6600                       		bne.s	loc_E35A
0000E416 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E41C                            
0000E41C                            loc_E35A:
0000E41C 117C 0004 0001             		move.b	#4,1(a0)
0000E422 117C 0003 0018             		move.b	#3,$18(a0)
0000E428 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E42E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E434 4A28 0029                  		tst.b	$29(a0)
0000E438 6700                       		beq.s	Obj14_SetSpeed
0000E43A 5428 0018                  		addq.b	#2,$18(a0)
0000E43E                            
0000E43E                            Obj14_SetSpeed:
0000E43E 7000                       		moveq	#0,d0
0000E440 1028 0028                  		move.b	$28(a0),d0
0000E444 D040                       		add.w	d0,d0
0000E446 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E44C 117C 0008 0019             		move.b	#8,$19(a0)
0000E452 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E458 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E45A 117C 0010 0019             		move.b	#$10,$19(a0)
0000E460 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E466 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E46C 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E472                            
0000E472                            Obj14_PlaySnd:
0000E472 303C 00AE                  		move.w	#$AE,d0
0000E476 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E47C                            
0000E47C                            Obj14_Action:				; XREF: Obj14_Index
0000E47C 7000                       		moveq	#0,d0
0000E47E 1028 0028                  		move.b	$28(a0),d0
0000E482 D040                       		add.w	d0,d0
0000E484 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E488 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E48C 6100 F218                  		bsr.w	SpeedToPos
0000E490 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E496 6100 C360                  		bsr.w	AnimateSprite
0000E49A                            
0000E49A                            Obj14_ChkDel:				; XREF: Obj13
0000E49A 3028 0008                  		move.w	8(a0),d0
0000E49E 0240 FF80                  		andi.w	#$FF80,d0
0000E4A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000E4A6 0441 0080                  		subi.w	#$80,d1
0000E4AA 0241 FF80                  		andi.w	#$FF80,d1
0000E4AE 9041                       		sub.w	d1,d0
0000E4B0 0C40 0280                  		cmpi.w	#$280,d0
0000E4B4 6200 F252                  		bhi.w	DeleteObject
0000E4B8 4E75                       		rts	
0000E4BA                            ; ===========================================================================
0000E4BA 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E4BE 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E4C2 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E4C6 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E4CA 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E4CC                            ; ===========================================================================
0000E4CC                            ; lavaball types 00-03 fly up and fall back down
0000E4CC                            
0000E4CC                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E4CC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E4D2 3028 0030                  		move.w	$30(a0),d0
0000E4D6 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E4DA 6400                       		bcc.s	loc_E41E	; if not, branch
0000E4DC 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E4E0                            
0000E4E0                            loc_E41E:
0000E4E0 08A8 0001 0022             		bclr	#1,$22(a0)
0000E4E6 4A68 0012                  		tst.w	$12(a0)
0000E4EA 6A00                       		bpl.s	locret_E430
0000E4EC 08E8 0001 0022             		bset	#1,$22(a0)
0000E4F2                            
0000E4F2                            locret_E430:
0000E4F2 4E75                       		rts	
0000E4F4                            ; ===========================================================================
0000E4F4                            ; lavaball type	04 flies up until it hits the ceiling
0000E4F4                            
0000E4F4                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E4F4 08E8 0001 0022             		bset	#1,$22(a0)
0000E4FA 6100 0000                  		bsr.w	ObjHitCeiling
0000E4FE 4A41                       		tst.w	d1
0000E500 6A00                       		bpl.s	locret_E452
0000E502 117C 0008 0028             		move.b	#8,$28(a0)
0000E508 117C 0001 001C             		move.b	#1,$1C(a0)
0000E50E 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E514                            
0000E514                            locret_E452:
0000E514 4E75                       		rts	
0000E516                            ; ===========================================================================
0000E516                            ; lavaball type	05 falls down until it hits the	floor
0000E516                            
0000E516                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E516 08A8 0001 0022             		bclr	#1,$22(a0)
0000E51C 6100 0000                  		bsr.w	ObjHitFloor
0000E520 4A41                       		tst.w	d1
0000E522 6A00                       		bpl.s	locret_E474
0000E524 117C 0008 0028             		move.b	#8,$28(a0)
0000E52A 117C 0001 001C             		move.b	#1,$1C(a0)
0000E530 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E536                            
0000E536                            locret_E474:
0000E536 4E75                       		rts	
0000E538                            ; ===========================================================================
0000E538                            ; lavaball types 06-07 move sideways
0000E538                            
0000E538                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E538 08E8 0000 0022             		bset	#0,$22(a0)
0000E53E 76F8                       		moveq	#-8,d3
0000E540 6100 0000                  		bsr.w	ObjHitWallLeft
0000E544 4A41                       		tst.w	d1
0000E546 6A00                       		bpl.s	locret_E498
0000E548 117C 0008 0028             		move.b	#8,$28(a0)
0000E54E 117C 0003 001C             		move.b	#3,$1C(a0)
0000E554 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E55A                            
0000E55A                            locret_E498:
0000E55A 4E75                       		rts	
0000E55C                            ; ===========================================================================
0000E55C                            
0000E55C                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E55C 08A8 0000 0022             		bclr	#0,$22(a0)
0000E562 7608                       		moveq	#8,d3
0000E564 6100 0000                  		bsr.w	ObjHitWallRight
0000E568 4A41                       		tst.w	d1
0000E56A 6A00                       		bpl.s	locret_E4BC
0000E56C 117C 0008 0028             		move.b	#8,$28(a0)
0000E572 117C 0003 001C             		move.b	#3,$1C(a0)
0000E578 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E57E                            
0000E57E                            locret_E4BC:
0000E57E 4E75                       		rts	
0000E580                            ; ===========================================================================
0000E580                            
0000E580                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000E580 4E75                       		rts	
0000E582                            ; ===========================================================================
0000E582                            
0000E582                            Obj14_Delete:				; XREF: Obj14_Index
0000E582 6000 F184                  		bra.w	DeleteObject
0000E586                            ; ===========================================================================
0000E586                            Ani_obj14:
0000E586                            	include "_anim\obj14.asm"
0000E586                            ; ---------------------------------------------------------------------------
0000E586                            ; Animation script - lava balls
0000E586                            ; ---------------------------------------------------------------------------
0000E586 0000                       		dc.w byte_E4CC-Ani_obj14
0000E588 0000                       		dc.w byte_E4D2-Ani_obj14
0000E58A 0000                       		dc.w byte_E4D6-Ani_obj14
0000E58C 0000                       		dc.w byte_E4DC-Ani_obj14
0000E58E 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000E594 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000E598 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000E59E 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000E5A2                            		even
0000E5A2                            		even
0000E5A2                            
0000E5A2                            ; ===========================================================================
0000E5A2                            ; ---------------------------------------------------------------------------
0000E5A2                            ; Object 6D - flame thrower (SBZ)
0000E5A2                            ; ---------------------------------------------------------------------------
0000E5A2                            
0000E5A2                            Obj6D:					; XREF: Obj_Index
0000E5A2 7000                       		moveq	#0,d0
0000E5A4 1028 0024                  		move.b	$24(a0),d0
0000E5A8 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000E5AC 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000E5B0                            ; ===========================================================================
0000E5B0 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000E5B2 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000E5B4                            ; ===========================================================================
0000E5B4                            
0000E5B4                            Obj6D_Main:				; XREF: Obj6D_Index
0000E5B4 5428 0024                  		addq.b	#2,$24(a0)
0000E5B8 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000E5C0 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000E5C6 0028 0004 0001             		ori.b	#4,1(a0)
0000E5CC 117C 0001 0018             		move.b	#1,$18(a0)
0000E5D2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E5D8 117C 000C 0019             		move.b	#$C,$19(a0)
0000E5DE 1028 0028                  		move.b	$28(a0),d0
0000E5E2 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000E5E6 D040                       		add.w	d0,d0		; multiply by 2
0000E5E8 3140 0030                  		move.w	d0,$30(a0)
0000E5EC 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000E5F0 1028 0028                  		move.b	$28(a0),d0
0000E5F4 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000E5F8 EB48                       		lsl.w	#5,d0		; multiply by $20
0000E5FA 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000E5FE 117C 000A 0036             		move.b	#$A,$36(a0)
0000E604 0828 0001 0022             		btst	#1,$22(a0)
0000E60A 6700                       		beq.s	Obj6D_Action
0000E60C 117C 0002 001C             		move.b	#2,$1C(a0)
0000E612 117C 0015 0036             		move.b	#$15,$36(a0)
0000E618                            
0000E618                            Obj6D_Action:				; XREF: Obj6D_Index
0000E618 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000E61C 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000E61E 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000E624 0868 0000 001C             		bchg	#0,$1C(a0)
0000E62A 6700                       		beq.s	loc_E57A
0000E62C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000E632 303C 00B3                  		move.w	#$B3,d0
0000E636 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000E63C                            
0000E63C                            loc_E57A:
0000E63C 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000E642 6100 C1B4                  		bsr.w	AnimateSprite
0000E646 117C 0000 0020             		move.b	#0,$20(a0)
0000E64C 1028 0036                  		move.b	$36(a0),d0
0000E650 B028 001A                  		cmp.b	$1A(a0),d0
0000E654 6600                       		bne.s	Obj6D_ChkDel
0000E656 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000E65C                            
0000E65C                            Obj6D_ChkDel:
0000E65C 3028 0008                  		move.w	8(a0),d0
0000E660 0240 FF80                  		andi.w	#$FF80,d0
0000E664 3238 F700                  		move.w	($FFFFF700).w,d1
0000E668 0441 0080                  		subi.w	#$80,d1
0000E66C 0241 FF80                  		andi.w	#$FF80,d1
0000E670 9041                       		sub.w	d1,d0
0000E672 0C40 0280                  		cmpi.w	#$280,d0
0000E676 6200 F090                  		bhi.w	DeleteObject
0000E67A 6000 F050                  		bra.w	DisplaySprite
0000E67E                            ; ===========================================================================
0000E67E                            Ani_obj6D:
0000E67E                            	include "_anim\obj6D.asm"
0000E67E                            ; ---------------------------------------------------------------------------
0000E67E                            ; Animation script - flamethrower (SBZ)
0000E67E                            ; ---------------------------------------------------------------------------
0000E67E 0000                       		dc.w byte_E5C4-Ani_obj6D
0000E680 0000                       		dc.w byte_E5D2-Ani_obj6D
0000E682 0000                       		dc.w byte_E5DC-Ani_obj6D
0000E684 0000                       		dc.w byte_E5EA-Ani_obj6D
0000E686 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000E694 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000E69E 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000E6AC 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000E6B6                            		even
0000E6B6                            		even
0000E6B6                            
0000E6B6                            ; ---------------------------------------------------------------------------
0000E6B6                            ; Sprite mappings - flame thrower (SBZ)
0000E6B6                            ; ---------------------------------------------------------------------------
0000E6B6                            Map_obj6D:
0000E6B6                            	include "_maps\obj6D.asm"
0000E6B6                            ; ---------------------------------------------------------------------------
0000E6B6                            ; Sprite mappings - flame thrower (SBZ)
0000E6B6                            ; ---------------------------------------------------------------------------
0000E6B6 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000E6BA 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000E6BE 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000E6C2 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000E6C6 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000E6CA 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000E6CE 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000E6D2 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000E6D6 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000E6DA 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000E6DE 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000E6E2 01                         byte_E620:	dc.b 1
0000E6E3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E6E8 02                         byte_E626:	dc.b 2
0000E6E9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6EE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E6F3 02                         byte_E631:	dc.b 2
0000E6F4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E6F9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E6FE 03                         byte_E63C:	dc.b 3
0000E6FF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E704 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E709 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E70E 03                         byte_E64C:	dc.b 3
0000E70F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E714 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E719 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E71E 04                         byte_E65C:	dc.b 4
0000E71F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E724 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E729 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E72E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E733 04                         byte_E671:	dc.b 4
0000E734 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E739 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E73E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E743 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E748 05                         byte_E686:	dc.b 5
0000E749 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E74E 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E753 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E758 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E75D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E762 05                         byte_E6A0:	dc.b 5
0000E763 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E768 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E76D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E772 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E777 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E77C 06                         byte_E6BA:	dc.b 6
0000E77D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E782 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E787 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E78C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E791 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E796 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E79B 06                         byte_E6D9:	dc.b 6
0000E79C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E7A1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E7A6 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E7AB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E7B0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7B5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7BA 01                         byte_E6F8:	dc.b 1
0000E7BB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7C0 02                         byte_E6FE:	dc.b 2
0000E7C1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7C6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E7CB 02                         byte_E709:	dc.b 2
0000E7CC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7D1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7D6 03                         byte_E714:	dc.b 3
0000E7D7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E7DC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7E1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E7E6 03                         byte_E724:	dc.b 3
0000E7E7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E7EC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7F1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7F6 04                         byte_E734:	dc.b 4
0000E7F7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E7FC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E801 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E806 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E80B 04                         byte_E749:	dc.b 4
0000E80C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E811 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E816 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E81B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E820 05                         byte_E75E:	dc.b 5
0000E821 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E826 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E82B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E830 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E835 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E83A 05                         byte_E778:	dc.b 5
0000E83B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E840 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E845 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E84A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E84F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E854 06                         byte_E792:	dc.b 6
0000E855 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E85A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E85F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E864 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E869 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E86E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E873 06                         byte_E7B1:	dc.b 6
0000E874 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E879 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E87E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E883 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E888 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E88D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E892                            		even
0000E892                            		even
0000E892                            
0000E892                            ; ===========================================================================
0000E892                            ; ---------------------------------------------------------------------------
0000E892                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000E892                            ; ---------------------------------------------------------------------------
0000E892                            
0000E892                            Obj46:					; XREF: Obj_Index
0000E892 7000                       		moveq	#0,d0
0000E894 1028 0024                  		move.b	$24(a0),d0
0000E898 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000E89C 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000E8A0                            ; ===========================================================================
0000E8A0 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000E8A2 0000                       		dc.w Obj46_Action-Obj46_Index
0000E8A4                            ; ===========================================================================
0000E8A4                            
0000E8A4                            Obj46_Main:				; XREF: Obj46_Index
0000E8A4 5428 0024                  		addq.b	#2,$24(a0)
0000E8A8 117C 000F 0016             		move.b	#$F,$16(a0)
0000E8AE 117C 000F 0017             		move.b	#$F,$17(a0)
0000E8B4 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000E8BC 317C 4000 0002             		move.w	#$4000,2(a0)
0000E8C2 117C 0004 0001             		move.b	#4,1(a0)
0000E8C8 117C 0003 0018             		move.b	#3,$18(a0)
0000E8CE 117C 0010 0019             		move.b	#$10,$19(a0)
0000E8D4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E8DA 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000E8E0                            
0000E8E0                            Obj46_Action:				; XREF: Obj46_Index
0000E8E0 4A28 0001                  		tst.b	1(a0)
0000E8E4 6A00                       		bpl.s	Obj46_ChkDel
0000E8E6 7000                       		moveq	#0,d0
0000E8E8 1028 0028                  		move.b	$28(a0),d0	; get object type
0000E8EC 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000E8F0 D040                       		add.w	d0,d0
0000E8F2 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000E8F6 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000E8FA 323C 001B                  		move.w	#$1B,d1
0000E8FE 343C 0010                  		move.w	#$10,d2
0000E902 363C 0011                  		move.w	#$11,d3
0000E906 3828 0008                  		move.w	8(a0),d4
0000E90A 6100 0000                  		bsr.w	SolidObject
0000E90E                            
0000E90E                            Obj46_ChkDel:
0000E90E 6100 EDBC                  		bsr.w	DisplaySprite
0000E912 3028 0008                  		move.w	8(a0),d0
0000E916 0240 FF80                  		andi.w	#$FF80,d0
0000E91A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E91E 0441 0080                  		subi.w	#$80,d1
0000E922 0241 FF80                  		andi.w	#$FF80,d1
0000E926 9041                       		sub.w	d1,d0
0000E928 0C40 0280                  		cmpi.w	#$280,d0
0000E92C 6200 EDDA                  		bhi.w	DeleteObject
0000E930 4E75                       		rts	
0000E932                            ; ===========================================================================
0000E932 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000E934 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000E936 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000E938 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000E93A 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000E93C                            ; ===========================================================================
0000E93C                            
0000E93C                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000E93C 4E75                       		rts	
0000E93E                            ; ===========================================================================
0000E93E                            
0000E93E                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000E93E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E942 9068 0008                  		sub.w	8(a0),d0
0000E946 6400                       		bcc.s	loc_E888
0000E948 4440                       		neg.w	d0
0000E94A                            
0000E94A                            loc_E888:
0000E94A 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000E94E 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000E950 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000E956                            
0000E956                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000E956 7000                       		moveq	#0,d0
0000E958 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000E95C 0828 0003 0028             		btst	#3,$28(a0)
0000E962 6700                       		beq.s	loc_E8A8
0000E964 4440                       		neg.w	d0
0000E966 0640 0010                  		addi.w	#$10,d0
0000E96A                            
0000E96A                            loc_E8A8:
0000E96A 3228 0030                  		move.w	$30(a0),d1
0000E96E 9240                       		sub.w	d0,d1
0000E970 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000E974 4E75                       		rts	
0000E976                            ; ===========================================================================
0000E976                            
0000E976                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000E976 6100 ED2E                  		bsr.w	SpeedToPos
0000E97A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000E980 6100 0000                  		bsr.w	ObjHitFloor
0000E984 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000E986 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000E98A D368 000C                  		add.w	d1,$C(a0)
0000E98E 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000E992 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E998 117C 0004 0028             		move.b	#4,$28(a0)
0000E99E 3011                       		move.w	(a1),d0
0000E9A0 0240 03FF                  		andi.w	#$3FF,d0
0000E9A4 0C40 02E8                  		cmpi.w	#$2E8,d0
0000E9A8 6400                       		bcc.s	locret_E8EE
0000E9AA 117C 0000 0028             		move.b	#0,$28(a0)
0000E9B0                            
0000E9B0                            locret_E8EE:
0000E9B0 4E75                       		rts	
0000E9B2                            ; ===========================================================================
0000E9B2                            
0000E9B2                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000E9B2 7000                       		moveq	#0,d0
0000E9B4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E9B8 E648                       		lsr.w	#3,d0
0000E9BA 3228 0030                  		move.w	$30(a0),d1
0000E9BE 9240                       		sub.w	d0,d1
0000E9C0 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000E9C4 4E75                       		rts	
0000E9C6                            ; ===========================================================================
0000E9C6                            ; ---------------------------------------------------------------------------
0000E9C6                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000E9C6                            ; ---------------------------------------------------------------------------
0000E9C6                            Map_obj46:
0000E9C6                            	include "_maps\obj46.asm"
0000E9C6                            ; ---------------------------------------------------------------------------
0000E9C6                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000E9C6                            ; ---------------------------------------------------------------------------
0000E9C6 0000                       		dc.w byte_E906-Map_obj46
0000E9C8 01                         byte_E906:	dc.b 1
0000E9C9 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000E9CE                            		even
0000E9CE                            		even
0000E9CE                            
0000E9CE                            ; ===========================================================================
0000E9CE                            ; ---------------------------------------------------------------------------
0000E9CE                            ; Object 12 - lamp (SYZ)
0000E9CE                            ; ---------------------------------------------------------------------------
0000E9CE                            
0000E9CE                            Obj12:					; XREF: Obj_Index
0000E9CE 7000                       		moveq	#0,d0
0000E9D0 1028 0024                  		move.b	$24(a0),d0
0000E9D4 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000E9D8 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000E9DC                            ; ===========================================================================
0000E9DC 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000E9DE 0000                       		dc.w Obj12_Animate-Obj12_Index
0000E9E0                            ; ===========================================================================
0000E9E0                            
0000E9E0                            Obj12_Main:				; XREF: Obj12_Index
0000E9E0 5428 0024                  		addq.b	#2,$24(a0)
0000E9E4 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000E9EC 317C 0000 0002             		move.w	#0,2(a0)
0000E9F2 117C 0004 0001             		move.b	#4,1(a0)
0000E9F8 117C 0010 0019             		move.b	#$10,$19(a0)
0000E9FE 117C 0006 0018             		move.b	#6,$18(a0)
0000EA04                            
0000EA04                            Obj12_Animate:				; XREF: Obj12_Index
0000EA04 5328 001E                  		subq.b	#1,$1E(a0)
0000EA08 6A00                       		bpl.s	Obj12_ChkDel
0000EA0A 117C 0007 001E             		move.b	#7,$1E(a0)
0000EA10 5228 001A                  		addq.b	#1,$1A(a0)
0000EA14 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EA1A 6500                       		bcs.s	Obj12_ChkDel
0000EA1C 117C 0000 001A             		move.b	#0,$1A(a0)
0000EA22                            
0000EA22                            Obj12_ChkDel:
0000EA22 3028 0008                  		move.w	8(a0),d0
0000EA26 0240 FF80                  		andi.w	#$FF80,d0
0000EA2A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA2E 0441 0080                  		subi.w	#$80,d1
0000EA32 0241 FF80                  		andi.w	#$FF80,d1
0000EA36 9041                       		sub.w	d1,d0
0000EA38 0C40 0280                  		cmpi.w	#$280,d0
0000EA3C 6200 ECCA                  		bhi.w	DeleteObject
0000EA40 6000 EC8A                  		bra.w	DisplaySprite
0000EA44                            ; ===========================================================================
0000EA44                            ; ---------------------------------------------------------------------------
0000EA44                            ; Sprite mappings - lamp (SYZ)
0000EA44                            ; ---------------------------------------------------------------------------
0000EA44                            Map_obj12:
0000EA44                            	include "_maps\obj12.asm"
0000EA44                            ; ---------------------------------------------------------------------------
0000EA44                            ; Sprite mappings - lamp (SYZ)
0000EA44                            ; ---------------------------------------------------------------------------
0000EA44 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EA48 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EA4C 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EA50 02                         byte_E98E:	dc.b 2
0000EA51 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EA56 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EA5B 02                         byte_E999:	dc.b 2
0000EA5C F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EA61 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EA66 02                         byte_E9A4:	dc.b 2
0000EA67 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EA6C 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EA71 02                         byte_E9AF:	dc.b 2
0000EA72 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EA77 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EA7C 02                         byte_E9BA:	dc.b 2
0000EA7D F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EA82 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EA87 02                         byte_E9C5:	dc.b 2
0000EA88 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EA8D 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EA92                            		even
0000EA92                            		even
0000EA92                            
0000EA92                            ; ===========================================================================
0000EA92                            ; ---------------------------------------------------------------------------
0000EA92                            ; Object 47 - pinball bumper (SYZ)
0000EA92                            ; ---------------------------------------------------------------------------
0000EA92                            
0000EA92                            Obj47:					; XREF: Obj_Index
0000EA92 7000                       		moveq	#0,d0
0000EA94 1028 0024                  		move.b	$24(a0),d0
0000EA98 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EA9C 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EAA0                            ; ===========================================================================
0000EAA0 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EAA2 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EAA4                            ; ===========================================================================
0000EAA4                            
0000EAA4                            Obj47_Main:				; XREF: Obj47_Index
0000EAA4 5428 0024                  		addq.b	#2,$24(a0)
0000EAA8 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EAB0 317C 0380 0002             		move.w	#$380,2(a0)
0000EAB6 117C 0004 0001             		move.b	#4,1(a0)
0000EABC 117C 0010 0019             		move.b	#$10,$19(a0)
0000EAC2 117C 0001 0018             		move.b	#1,$18(a0)
0000EAC8 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EACE                            
0000EACE                            Obj47_Hit:				; XREF: Obj47_Index
0000EACE 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EAD2 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EAD6 4228 0021                  		clr.b	$21(a0)
0000EADA 43F8 D000                  		lea	($FFFFD000).w,a1
0000EADE 3228 0008                  		move.w	8(a0),d1
0000EAE2 3428 000C                  		move.w	$C(a0),d2
0000EAE6 9269 0008                  		sub.w	8(a1),d1
0000EAEA 9469 000C                  		sub.w	$C(a1),d2
0000EAEE 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0000EAF4 4EB9 0000 29DA             		jsr	(CalcSine).l
0000EAFA C3FC F900                  		muls.w	#-$700,d1
0000EAFE E081                       		asr.l	#8,d1
0000EB00 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EB04 C1FC F900                  		muls.w	#-$700,d0
0000EB08 E080                       		asr.l	#8,d0
0000EB0A 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EB0E 08E9 0001 0022             		bset	#1,$22(a1)
0000EB14 08A9 0004 0022             		bclr	#4,$22(a1)
0000EB1A 08A9 0005 0022             		bclr	#5,$22(a1)
0000EB20 4229 003C                  		clr.b	$3C(a1)
0000EB24 117C 0001 001C             		move.b	#1,$1C(a0)
0000EB2A 303C 00B4                  		move.w	#$B4,d0
0000EB2E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EB34 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EB38 7000                       		moveq	#0,d0
0000EB3A 1028 0023                  		move.b	$23(a0),d0
0000EB3E 6700                       		beq.s	Obj47_Score
0000EB40 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EB46 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EB48 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EB4C                            
0000EB4C                            Obj47_Score:
0000EB4C 7001                       		moveq	#1,d0
0000EB4E 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EB54 6100 EFFC                  		bsr.w	SingleObjLoad
0000EB58 6600                       		bne.s	Obj47_Display
0000EB5A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EB5E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EB64 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EB6A 137C 0004 001A             		move.b	#4,$1A(a1)
0000EB70                            
0000EB70                            Obj47_Display:
0000EB70 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000EB76 6100 BC80                  		bsr.w	AnimateSprite
0000EB7A 3028 0008                  		move.w	8(a0),d0
0000EB7E 0240 FF80                  		andi.w	#$FF80,d0
0000EB82 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB86 0441 0080                  		subi.w	#$80,d1
0000EB8A 0241 FF80                  		andi.w	#$FF80,d1
0000EB8E 9041                       		sub.w	d1,d0
0000EB90 0C40 0280                  		cmpi.w	#$280,d0
0000EB94 6200                       		bhi.s	Obj47_ChkHit
0000EB96 6000 EB34                  		bra.w	DisplaySprite
0000EB9A                            ; ===========================================================================
0000EB9A                            
0000EB9A                            Obj47_ChkHit:				; XREF: Obj47_Display
0000EB9A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EB9E 7000                       		moveq	#0,d0
0000EBA0 1028 0023                  		move.b	$23(a0),d0
0000EBA4 6700                       		beq.s	Obj47_Delete
0000EBA6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EBAC                            
0000EBAC                            Obj47_Delete:
0000EBAC 6000 EB5A                  		bra.w	DeleteObject
0000EBB0                            ; ===========================================================================
0000EBB0                            Ani_obj47:
0000EBB0                            	include "_anim\obj47.asm"
0000EBB0                            ; ---------------------------------------------------------------------------
0000EBB0                            ; Animation script - flamethrower (SBZ)
0000EBB0                            ; ---------------------------------------------------------------------------
0000EBB0 0000                       		dc.w byte_EAF4-Ani_obj47
0000EBB2 0000                       		dc.w byte_EAF8-Ani_obj47
0000EBB4 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000EBB8 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000EBC0                            		even
0000EBC0                            		even
0000EBC0                            
0000EBC0                            ; ---------------------------------------------------------------------------
0000EBC0                            ; Sprite mappings - pinball bumper (SYZ)
0000EBC0                            ; ---------------------------------------------------------------------------
0000EBC0                            Map_obj47:
0000EBC0                            	include "_maps\obj47.asm"
0000EBC0                            ; ---------------------------------------------------------------------------
0000EBC0                            ; Sprite mappings - pinball bumper (SYZ)
0000EBC0                            ; ---------------------------------------------------------------------------
0000EBC0 0000                       		dc.w byte_EB06-Map_obj47
0000EBC2 0000                       		dc.w byte_EB11-Map_obj47
0000EBC4 0000                       		dc.w byte_EB1C-Map_obj47
0000EBC6 02                         byte_EB06:	dc.b 2
0000EBC7 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000EBCC F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000EBD1 02                         byte_EB11:	dc.b 2
0000EBD2 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000EBD7 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000EBDC 02                         byte_EB1C:	dc.b 2
0000EBDD F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000EBE2 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000EBE8 00                         		even
0000EBE8 00                         		even
0000EBE8                            
0000EBE8                            ; ===========================================================================
0000EBE8                            ; ---------------------------------------------------------------------------
0000EBE8                            ; Object 0D - signpost at the end of a level
0000EBE8                            ; ---------------------------------------------------------------------------
0000EBE8                            
0000EBE8                            Obj0D:					; XREF: Obj_Index
0000EBE8 7000                       		moveq	#0,d0
0000EBEA 1028 0024                  		move.b	$24(a0),d0
0000EBEE 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000EBF2 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000EBF6 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000EBFC 6100 BBFA                  		bsr.w	AnimateSprite
0000EC00 6100 EACA                  		bsr.w	DisplaySprite
0000EC04 3028 0008                  		move.w	8(a0),d0
0000EC08 0240 FF80                  		andi.w	#$FF80,d0
0000EC0C 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC10 0441 0080                  		subi.w	#$80,d1
0000EC14 0241 FF80                  		andi.w	#$FF80,d1
0000EC18 9041                       		sub.w	d1,d0
0000EC1A 0C40 0280                  		cmpi.w	#$280,d0
0000EC1E 6200 EAE8                  		bhi.w	DeleteObject
0000EC22 4E75                       		rts	
0000EC24                            ; ===========================================================================
0000EC24 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000EC26 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000EC28 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000EC2A 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000EC2C 0000                       		dc.w locret_ED1A-Obj0D_Index
0000EC2E                            ; ===========================================================================
0000EC2E                            
0000EC2E                            Obj0D_Main:				; XREF: Obj0D_Index
0000EC2E 5428 0024                  		addq.b	#2,$24(a0)
0000EC32 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000EC3A 317C 0680 0002             		move.w	#$680,2(a0)
0000EC40 117C 0004 0001             		move.b	#4,1(a0)
0000EC46 117C 0018 0019             		move.b	#$18,$19(a0)
0000EC4C 117C 0004 0018             		move.b	#4,$18(a0)
0000EC52                            
0000EC52                            Obj0D_Touch:				; XREF: Obj0D_Index
0000EC52 3038 D008                  		move.w	($FFFFD008).w,d0
0000EC56 9068 0008                  		sub.w	8(a0),d0
0000EC5A 6500                       		bcs.s	locret_EBBA
0000EC5C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000EC60 6400                       		bcc.s	locret_EBBA	; if not, branch
0000EC62 303C 00CF                  		move.w	#$CF,d0
0000EC66 4EB9 0000 1396             		jsr	(PlaySound).l	; play signpost	sound
0000EC6C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EC70 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000EC76 5428 0024                  		addq.b	#2,$24(a0)
0000EC7A                            
0000EC7A                            locret_EBBA:
0000EC7A 4E75                       		rts	
0000EC7C                            ; ===========================================================================
0000EC7C                            
0000EC7C                            Obj0D_Spin:				; XREF: Obj0D_Index
0000EC7C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000EC80 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000EC82 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000EC88 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000EC8C 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000EC92 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000EC94 5428 0024                  		addq.b	#2,$24(a0)
0000EC98                            
0000EC98                            Obj0D_Sparkle:
0000EC98 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000EC9C 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000EC9E 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000ECA4 7000                       		moveq	#0,d0
0000ECA6 1028 0034                  		move.b	$34(a0),d0
0000ECAA 5428 0034                  		addq.b	#2,$34(a0)
0000ECAE 0228 000E 0034             		andi.b	#$E,$34(a0)
0000ECB4 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000ECB8 6100 EE98                  		bsr.w	SingleObjLoad
0000ECBC 6600                       		bne.s	locret_EC42
0000ECBE 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000ECC2 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000ECC8 101A                       		move.b	(a2)+,d0
0000ECCA 4880                       		ext.w	d0
0000ECCC D068 0008                  		add.w	8(a0),d0
0000ECD0 3340 0008                  		move.w	d0,8(a1)
0000ECD4 101A                       		move.b	(a2)+,d0
0000ECD6 4880                       		ext.w	d0
0000ECD8 D068 000C                  		add.w	$C(a0),d0
0000ECDC 3340 000C                  		move.w	d0,$C(a1)
0000ECE0 237C 0000 A072 0004        		move.l	#Map_obj25,4(a1)
0000ECE8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000ECEE 137C 0004 0001             		move.b	#4,1(a1)
0000ECF4 137C 0002 0018             		move.b	#2,$18(a1)
0000ECFA 137C 0008 0019             		move.b	#8,$19(a1)
0000ED00                            
0000ED00                            locret_EC42:
0000ED00 4E75                       		rts	
0000ED02                            ; ===========================================================================
0000ED02 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000ED04 0808                       		dc.b	8,   8
0000ED06 F000                       		dc.b -$10,   0
0000ED08 18F8                       		dc.b  $18,  -8
0000ED0A 00F8                       		dc.b	0,  -8
0000ED0C 1000                       		dc.b  $10,   0
0000ED0E E808                       		dc.b -$18,   8
0000ED10 1810                       		dc.b  $18, $10
0000ED12                            ; ===========================================================================
0000ED12                            
0000ED12                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000ED12 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000ED16 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000ED1A 0838 0001 D022             		btst	#1,($FFFFD022).w
0000ED20 6600                       		bne.s	loc_EC70
0000ED22 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000ED28 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000ED2E 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000ED30 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000ED36 6000                       		bra.s	loc_EC70
0000ED38                            
0000ED38                            Obj0D_MoveLeft:
0000ED38 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000ED3E                            
0000ED3E                            loc_EC70:
0000ED3E 4A38 D000                  		tst.b	($FFFFD000).w
0000ED42 6700                       		beq.s	loc_EC86
0000ED44 3038 D008                  		move.w	($FFFFD008).w,d0
0000ED48 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000ED4C 0641 0128                  		addi.w	#$128,d1
0000ED50 B041                       		cmp.w	d1,d0
0000ED52 6500                       		bcs.s	locret_ECEE
0000ED54                            
0000ED54                            loc_EC86:
0000ED54 5428 0024                  		addq.b	#2,$24(a0)
0000ED58                            
0000ED58                            ; ---------------------------------------------------------------------------
0000ED58                            ; Subroutine to	set up bonuses at the end of an	act
0000ED58                            ; ---------------------------------------------------------------------------
0000ED58                            
0000ED58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED58                            
0000ED58                            
0000ED58                            GotThroughAct:				; XREF: Obj3E_EndAct
0000ED58 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000ED5C 6600                       		bne.s	locret_ECEE
0000ED5E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000ED64 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000ED68 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000ED6C 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000ED72 7010                       		moveq	#$10,d0
0000ED74 4EB9 0000 15B2             		jsr	(LoadPLC2).l	; load title card patterns
0000ED7A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000ED80 7000                       		moveq	#0,d0
0000ED82 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000ED86 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000ED8A 7200                       		moveq	#0,d1
0000ED8C 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000ED90 D041                       		add.w	d1,d0		; add up your time
0000ED92 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000ED96 7214                       		moveq	#$14,d1
0000ED98 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000ED9A 6500                       		bcs.s	loc_ECD0	; if not, branch
0000ED9C 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000ED9E                            
0000ED9E                            loc_ECD0:
0000ED9E D040                       		add.w	d0,d0
0000EDA0 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000EDA6 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000EDAA C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000EDAE 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000EDB2 303C 008E                  		move.w	#$8E,d0
0000EDB6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000EDBC                            
0000EDBC                            locret_ECEE:
0000EDBC 4E75                       		rts	
0000EDBE                            ; End of function GotThroughAct
0000EDBE                            
0000EDBE                            ; ===========================================================================
0000EDBE 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000EDD2 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000EDE8                            ; ===========================================================================
0000EDE8                            
0000EDE8                            locret_ED1A:				; XREF: Obj0D_Index
0000EDE8 4E75                       		rts	
0000EDEA                            ; ===========================================================================
0000EDEA                            Ani_obj0D:
0000EDEA                            	include "_anim\obj0D.asm"
0000EDEA                            ; ---------------------------------------------------------------------------
0000EDEA                            ; Animation script - signpost
0000EDEA                            ; ---------------------------------------------------------------------------
0000EDEA 0000                       		dc.w byte_ED24-Ani_obj0D
0000EDEC 0000                       		dc.w byte_ED28-Ani_obj0D
0000EDEE 0000                       		dc.w byte_ED2E-Ani_obj0D
0000EDF0 0000                       		dc.w byte_ED34-Ani_obj0D
0000EDF2 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000EDF6 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000EDFC 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000EE02 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000EE06 00                         		even
0000EE06 00                         		even
0000EE06                            
0000EE06                            ; ---------------------------------------------------------------------------
0000EE06                            ; Sprite mappings - signpost
0000EE06                            ; ---------------------------------------------------------------------------
0000EE06                            Map_obj0D:
0000EE06                            	include "_maps\obj0D.asm"
0000EE06                            ; ---------------------------------------------------------------------------
0000EE06                            ; Sprite mappings - signpost
0000EE06                            ; ---------------------------------------------------------------------------
0000EE06 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000EE0A 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000EE0E 0000                       		dc.w byte_ED73-Map_obj0D
0000EE10 03                         byte_ED42:	dc.b 3
0000EE11 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EE16 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000EE1B 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EE20 02                         byte_ED52:	dc.b 2
0000EE21 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000EE26 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EE2B 02                         byte_ED5D:	dc.b 2
0000EE2C F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000EE31 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000EE36 02                         byte_ED68:	dc.b 2
0000EE37 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000EE3C 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000EE41 03                         byte_ED73:	dc.b 3
0000EE42 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000EE47 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000EE4C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EE52 00                         		even
0000EE52 00                         		even
0000EE52                            
0000EE52                            ; ===========================================================================
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52                            
0000EE52                            Obj4C:					; XREF: Obj_Index
0000EE52 7000                       		moveq	#0,d0
0000EE54 1028 0024                  		move.b	$24(a0),d0
0000EE58 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000EE5C 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000EE60 6000 0000                  		bra.w	Obj4D_ChkDel
0000EE64                            ; ===========================================================================
0000EE64 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000EE66 0000                       		dc.w loc_EDCC-Obj4C_Index
0000EE68 0000                       		dc.w loc_EE3E-Obj4C_Index
0000EE6A 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000EE6C 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000EE6E 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000EE70                            ; ===========================================================================
0000EE70                            
0000EE70                            Obj4C_Main:				; XREF: Obj4C_Index
0000EE70 5428 0024                  		addq.b	#2,$24(a0)
0000EE74 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000EE7C 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000EE82 117C 0004 0001             		move.b	#4,1(a0)
0000EE88 117C 0001 0018             		move.b	#1,$18(a0)
0000EE8E 117C 0038 0019             		move.b	#$38,$19(a0)
0000EE94 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000EE9A                            
0000EE9A                            loc_EDCC:				; XREF: Obj4C_Index
0000EE9A 5368 0032                  		subq.w	#1,$32(a0)
0000EE9E 6A00                       		bpl.s	locret_EDF0
0000EEA0 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000EEA6 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000EEAA 3228 000C                  		move.w	$C(a0),d1
0000EEAE B041                       		cmp.w	d1,d0
0000EEB0 6400                       		bcc.s	locret_EDF0
0000EEB2 0441 0170                  		subi.w	#$170,d1
0000EEB6 B041                       		cmp.w	d1,d0
0000EEB8 6500                       		bcs.s	locret_EDF0
0000EEBA 5428 0024                  		addq.b	#2,$24(a0)
0000EEBE                            
0000EEBE                            locret_EDF0:
0000EEBE 4E75                       		rts	
0000EEC0                            ; ===========================================================================
0000EEC0                            
0000EEC0                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000EEC0 5428 0024                  		addq.b	#2,$24(a0)
0000EEC4 6100 ECA2                  		bsr.w	SingleObjLoad2
0000EEC8 6600                       		bne.s	loc_EE18
0000EECA 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000EECE 3368 0008 0008             		move.w	8(a0),8(a1)
0000EED4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EEDA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EEE0 2348 003C                  		move.l	a0,$3C(a1)
0000EEE4                            
0000EEE4                            loc_EE18:
0000EEE4 117C 0001 001C             		move.b	#1,$1C(a0)
0000EEEA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EEEE 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000EEF0 117C 0004 001C             		move.b	#4,$1C(a0)
0000EEF6 6000                       		bra.s	Obj4C_Display
0000EEF8                            ; ===========================================================================
0000EEF8                            
0000EEF8                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000EEF8 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000EEFC 08E9 0001 0022             		bset	#1,$22(a1)
0000EF02 337C FA80 0012             		move.w	#-$580,$12(a1)
0000EF08 6000                       		bra.s	Obj4C_Display
0000EF0A                            ; ===========================================================================
0000EF0A                            
0000EF0A                            loc_EE3E:				; XREF: Obj4C_Index
0000EF0A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EF0E 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000EF10 5428 0024                  		addq.b	#2,$24(a0)
0000EF14 4E75                       		rts	
0000EF16                            ; ===========================================================================
0000EF16                            
0000EF16                            Obj4C_Display:				; XREF: Obj4C_Index
0000EF16 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000EF1C 6100 B8DA                  		bsr.w	AnimateSprite
0000EF20 6100 E7AA                  		bsr.w	DisplaySprite
0000EF24 4E75                       		rts	
0000EF26                            ; ===========================================================================
0000EF26                            
0000EF26                            Obj4C_Delete:				; XREF: Obj4C_Index
0000EF26 117C 0000 001C             		move.b	#0,$1C(a0)
0000EF2C 117C 0002 0024             		move.b	#2,$24(a0)
0000EF32 4A28 0028                  		tst.b	$28(a0)
0000EF36 6700 E7D0                  		beq.w	DeleteObject
0000EF3A 4E75                       		rts	
0000EF3C                            ; ===========================================================================
0000EF3C                            ; ---------------------------------------------------------------------------
0000EF3C                            ; Object 4D - lava geyser / lavafall (MZ)
0000EF3C                            ; ---------------------------------------------------------------------------
0000EF3C                            
0000EF3C                            Obj4D:					; XREF: Obj_Index
0000EF3C 7000                       		moveq	#0,d0
0000EF3E 1028 0024                  		move.b	$24(a0),d0
0000EF42 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000EF46 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000EF4A 6000 E780                  		bra.w	DisplaySprite
0000EF4E                            ; ===========================================================================
0000EF4E 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000EF50 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000EF52 0000                       		dc.w loc_EFFC-Obj4D_Index
0000EF54 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000EF56                            
0000EF56 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000EF5A                            ; ===========================================================================
0000EF5A                            
0000EF5A                            Obj4D_Main:				; XREF: Obj4D_Index
0000EF5A 5428 0024                  		addq.b	#2,$24(a0)
0000EF5E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF64 4A28 0028                  		tst.b	$28(a0)
0000EF68 6700                       		beq.s	loc_EEA4
0000EF6A 0468 0250 000C             		subi.w	#$250,$C(a0)
0000EF70                            
0000EF70                            loc_EEA4:
0000EF70 7000                       		moveq	#0,d0
0000EF72 1028 0028                  		move.b	$28(a0),d0
0000EF76 D040                       		add.w	d0,d0
0000EF78 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000EF7E 2248                       		movea.l	a0,a1
0000EF80 7201                       		moveq	#1,d1
0000EF82 6100                       		bsr.s	Obj4D_MakeLava
0000EF84 6000                       		bra.s	loc_EF10
0000EF86                            ; ===========================================================================
0000EF86                            
0000EF86                            Obj4D_Loop:
0000EF86 6100 EBE0                  		bsr.w	SingleObjLoad2
0000EF8A 6600                       		bne.s	loc_EF0A
0000EF8C                            
0000EF8C                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000EF8C 12BC 004D                  		move.b	#$4D,0(a1)
0000EF90 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000EF98 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000EF9E 137C 0004 0001             		move.b	#4,1(a1)
0000EFA4 137C 0020 0019             		move.b	#$20,$19(a1)
0000EFAA 3368 0008 0008             		move.w	8(a0),8(a1)
0000EFB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EFB6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EFBC 137C 0001 0018             		move.b	#1,$18(a1)
0000EFC2 137C 0005 001C             		move.b	#5,$1C(a1)
0000EFC8 4A28 0028                  		tst.b	$28(a0)
0000EFCC 6700                       		beq.s	loc_EF0A
0000EFCE 137C 0002 001C             		move.b	#2,$1C(a1)
0000EFD4                            
0000EFD4                            loc_EF0A:
0000EFD4 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000EFD8 4E75                       		rts	
0000EFDA                            ; ===========================================================================
0000EFDA                            
0000EFDA                            loc_EF10:				; XREF: Obj4D_Main
0000EFDA 0669 0060 000C             		addi.w	#$60,$C(a1)
0000EFE0 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000EFE6 0669 0060 0030             		addi.w	#$60,$30(a1)
0000EFEC 137C 0093 0020             		move.b	#$93,$20(a1)
0000EFF2 137C 0080 0016             		move.b	#$80,$16(a1)
0000EFF8 08E9 0004 0001             		bset	#4,1(a1)
0000EFFE 5829 0024                  		addq.b	#4,$24(a1)
0000F002 2348 003C                  		move.l	a0,$3C(a1)
0000F006 4A28 0028                  		tst.b	$28(a0)
0000F00A 6700                       		beq.s	Obj4D_PlaySnd
0000F00C 7200                       		moveq	#0,d1
0000F00E 6100 FF76                  		bsr.w	Obj4D_Loop
0000F012 5429 0024                  		addq.b	#2,$24(a1)
0000F016 08E9 0004 0002             		bset	#4,2(a1)
0000F01C 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F022 137C 0000 0018             		move.b	#0,$18(a1)
0000F028 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F02E 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F034 117C 0000 0028             		move.b	#0,$28(a0)
0000F03A                            
0000F03A                            Obj4D_PlaySnd:
0000F03A 303C 00C8                  		move.w	#$C8,d0
0000F03E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000F044                            
0000F044                            Obj4D_Action:				; XREF: Obj4D_Index
0000F044 7000                       		moveq	#0,d0
0000F046 1028 0028                  		move.b	$28(a0),d0
0000F04A D040                       		add.w	d0,d0
0000F04C 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F050 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F054 6100 E650                  		bsr.w	SpeedToPos
0000F058 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F05E 6100 B798                  		bsr.w	AnimateSprite
0000F062                            
0000F062                            Obj4D_ChkDel:				; XREF: Obj4C
0000F062 3028 0008                  		move.w	8(a0),d0
0000F066 0240 FF80                  		andi.w	#$FF80,d0
0000F06A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F06E 0441 0080                  		subi.w	#$80,d1
0000F072 0241 FF80                  		andi.w	#$FF80,d1
0000F076 9041                       		sub.w	d1,d0
0000F078 0C40 0280                  		cmpi.w	#$280,d0
0000F07C 6200 E68A                  		bhi.w	DeleteObject
0000F080 4E75                       		rts	
0000F082                            ; ===========================================================================
0000F082 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F084 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F086                            ; ===========================================================================
0000F086                            
0000F086                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F086 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F08C 3028 0030                  		move.w	$30(a0),d0
0000F090 B068 000C                  		cmp.w	$C(a0),d0
0000F094 6400                       		bcc.s	locret_EFDA
0000F096 5828 0024                  		addq.b	#4,$24(a0)
0000F09A 2268 003C                  		movea.l	$3C(a0),a1
0000F09E 137C 0003 001C             		move.b	#3,$1C(a1)
0000F0A4                            
0000F0A4                            locret_EFDA:
0000F0A4 4E75                       		rts	
0000F0A6                            ; ===========================================================================
0000F0A6                            
0000F0A6                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F0A6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F0AC 3028 0030                  		move.w	$30(a0),d0
0000F0B0 B068 000C                  		cmp.w	$C(a0),d0
0000F0B4 6400                       		bcc.s	locret_EFFA
0000F0B6 5828 0024                  		addq.b	#4,$24(a0)
0000F0BA 2268 003C                  		movea.l	$3C(a0),a1
0000F0BE 137C 0001 001C             		move.b	#1,$1C(a1)
0000F0C4                            
0000F0C4                            locret_EFFA:
0000F0C4 4E75                       		rts	
0000F0C6                            ; ===========================================================================
0000F0C6                            
0000F0C6                            loc_EFFC:				; XREF: Obj4D_Index
0000F0C6 2268 003C                  		movea.l	$3C(a0),a1
0000F0CA 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F0D0 6700 0000                  		beq.w	Obj4D_Delete
0000F0D4 3029 000C                  		move.w	$C(a1),d0
0000F0D8 0640 0060                  		addi.w	#$60,d0
0000F0DC 3140 000C                  		move.w	d0,$C(a0)
0000F0E0 9068 0030                  		sub.w	$30(a0),d0
0000F0E4 4440                       		neg.w	d0
0000F0E6 7208                       		moveq	#8,d1
0000F0E8 0C40 0040                  		cmpi.w	#$40,d0
0000F0EC 6C00                       		bge.s	loc_F026
0000F0EE 720B                       		moveq	#$B,d1
0000F0F0                            
0000F0F0                            loc_F026:
0000F0F0 0C40 0080                  		cmpi.w	#$80,d0
0000F0F4 6F00                       		ble.s	loc_F02E
0000F0F6 720E                       		moveq	#$E,d1
0000F0F8                            
0000F0F8                            loc_F02E:
0000F0F8 5328 001E                  		subq.b	#1,$1E(a0)
0000F0FC 6A00                       		bpl.s	loc_F04C
0000F0FE 117C 0007 001E             		move.b	#7,$1E(a0)
0000F104 5228 001B                  		addq.b	#1,$1B(a0)
0000F108 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F10E 6500                       		bcs.s	loc_F04C
0000F110 117C 0000 001B             		move.b	#0,$1B(a0)
0000F116                            
0000F116                            loc_F04C:
0000F116 1028 001B                  		move.b	$1B(a0),d0
0000F11A D001                       		add.b	d1,d0
0000F11C 1140 001A                  		move.b	d0,$1A(a0)
0000F120 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F124                            ; ===========================================================================
0000F124                            
0000F124                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F124 6000 E5E2                  		bra.w	DeleteObject
0000F128                            ; ===========================================================================
0000F128                            ; ---------------------------------------------------------------------------
0000F128                            ; Object 4E - advancing	wall of	lava (MZ)
0000F128                            ; ---------------------------------------------------------------------------
0000F128                            
0000F128                            Obj4E:					; XREF: Obj_Index
0000F128 7000                       		moveq	#0,d0
0000F12A 1028 0024                  		move.b	$24(a0),d0
0000F12E 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F132 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F136                            ; ===========================================================================
0000F136 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F138 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F13A 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F13C 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F13E 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F140                            ; ===========================================================================
0000F140                            
0000F140                            Obj4E_Main:				; XREF: Obj4E_Index
0000F140 5828 0024                  		addq.b	#4,$24(a0)
0000F144 2248                       		movea.l	a0,a1
0000F146 7201                       		moveq	#1,d1
0000F148 6000                       		bra.s	Obj4E_Main2
0000F14A                            ; ===========================================================================
0000F14A                            
0000F14A                            Obj4E_Loop:
0000F14A 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F14E 6600                       		bne.s	loc_F0C8
0000F150                            
0000F150                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F150 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F154 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F15C 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F162 137C 0004 0001             		move.b	#4,1(a1)
0000F168 137C 0050 0019             		move.b	#$50,$19(a1)
0000F16E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F174 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F17A 137C 0001 0018             		move.b	#1,$18(a1)
0000F180 137C 0000 001C             		move.b	#0,$1C(a1)
0000F186 137C 0094 0020             		move.b	#$94,$20(a1)
0000F18C 2348 003C                  		move.l	a0,$3C(a1)
0000F190                            
0000F190                            loc_F0C8:
0000F190 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F194                            
0000F194 5C29 0024                  		addq.b	#6,$24(a1)
0000F198 137C 0004 001A             		move.b	#4,$1A(a1)
0000F19E                            
0000F19E                            Obj4E_Action:				; XREF: Obj4E_Index
0000F19E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F1A2 9068 0008                  		sub.w	8(a0),d0
0000F1A6 6400                       		bcc.s	Obj4E_ChkSonic
0000F1A8 4440                       		neg.w	d0
0000F1AA                            
0000F1AA                            Obj4E_ChkSonic:
0000F1AA 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F1AE 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F1B0 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F1B4 9068 000C                  		sub.w	$C(a0),d0
0000F1B8 6400                       		bcc.s	loc_F0F4
0000F1BA 4440                       		neg.w	d0
0000F1BC                            
0000F1BC                            loc_F0F4:
0000F1BC 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F1C0 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F1C2 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F1C8 6000                       		bra.s	Obj4E_Solid
0000F1CA                            ; ===========================================================================
0000F1CA                            
0000F1CA                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F1CA 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F1CE 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F1D0 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F1D6 5528 0024                  		subq.b	#2,$24(a0)
0000F1DA                            
0000F1DA                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F1DA 323C 002B                  		move.w	#$2B,d1
0000F1DE 343C 0018                  		move.w	#$18,d2
0000F1E2 3602                       		move.w	d2,d3
0000F1E4 5243                       		addq.w	#1,d3
0000F1E6 3828 0008                  		move.w	8(a0),d4
0000F1EA 1028 0024                  		move.b	$24(a0),d0
0000F1EE 3F00                       		move.w	d0,-(sp)
0000F1F0 6100 0000                  		bsr.w	SolidObject
0000F1F4 301F                       		move.w	(sp)+,d0
0000F1F6 1140 0024                  		move.b	d0,$24(a0)
0000F1FA 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F200 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F202 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F206 4228 0036                  		clr.b	$36(a0)
0000F20A                            
0000F20A                            Obj4E_Animate:
0000F20A 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F210 6100 B5E6                  		bsr.w	AnimateSprite
0000F214 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F21A 6400                       		bcc.s	Obj4E_ChkDel
0000F21C 6100 E488                  		bsr.w	SpeedToPos
0000F220                            
0000F220                            Obj4E_ChkDel:
0000F220 6100 E4AA                  		bsr.w	DisplaySprite
0000F224 4A28 0036                  		tst.b	$36(a0)
0000F228 6600                       		bne.s	locret_F17E
0000F22A 3028 0008                  		move.w	8(a0),d0
0000F22E 0240 FF80                  		andi.w	#$FF80,d0
0000F232 3238 F700                  		move.w	($FFFFF700).w,d1
0000F236 0441 0080                  		subi.w	#$80,d1
0000F23A 0241 FF80                  		andi.w	#$FF80,d1
0000F23E 9041                       		sub.w	d1,d0
0000F240 0C40 0280                  		cmpi.w	#$280,d0
0000F244 6200                       		bhi.s	Obj4E_ChkGone
0000F246                            
0000F246                            locret_F17E:
0000F246 4E75                       		rts	
0000F248                            ; ===========================================================================
0000F248                            
0000F248                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F248 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F24C 7000                       		moveq	#0,d0
0000F24E 1028 0023                  		move.b	$23(a0),d0
0000F252 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F258 117C 0008 0024             		move.b	#8,$24(a0)
0000F25E 4E75                       		rts	
0000F260                            ; ===========================================================================
0000F260                            
0000F260                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F260 2268 003C                  		movea.l	$3C(a0),a1
0000F264 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F26A 6700                       		beq.s	Obj4E_Delete
0000F26C 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F272 0468 0080 0008             		subi.w	#$80,8(a0)
0000F278 6000 E452                  		bra.w	DisplaySprite
0000F27C                            ; ===========================================================================
0000F27C                            
0000F27C                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F27C 6000 E48A                  		bra.w	DeleteObject
0000F280                            ; ===========================================================================
0000F280                            ; ---------------------------------------------------------------------------
0000F280                            ; Object 54 - invisible	lava tag (MZ)
0000F280                            ; ---------------------------------------------------------------------------
0000F280                            
0000F280                            Obj54:					; XREF: Obj_Index
0000F280 7000                       		moveq	#0,d0
0000F282 1028 0024                  		move.b	$24(a0),d0
0000F286 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F28A 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F28E                            ; ===========================================================================
0000F28E 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F290 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F292                            
0000F292 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F296                            ; ===========================================================================
0000F296                            
0000F296                            Obj54_Main:				; XREF: Obj54_Index
0000F296 5428 0024                  		addq.b	#2,$24(a0)
0000F29A 7000                       		moveq	#0,d0
0000F29C 1028 0028                  		move.b	$28(a0),d0
0000F2A0 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F2A6 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F2AE 117C 0084 0001             		move.b	#$84,1(a0)
0000F2B4                            
0000F2B4                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F2B4 3028 0008                  		move.w	8(a0),d0
0000F2B8 0240 FF80                  		andi.w	#$FF80,d0
0000F2BC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2C0 0441 0080                  		subi.w	#$80,d1
0000F2C4 0241 FF80                  		andi.w	#$FF80,d1
0000F2C8 9041                       		sub.w	d1,d0
0000F2CA 6B00 E43C                  		bmi.w	DeleteObject
0000F2CE 0C40 0280                  		cmpi.w	#$280,d0
0000F2D2 6200 E434                  		bhi.w	DeleteObject
0000F2D6 4E75                       		rts	
0000F2D8                            ; ===========================================================================
0000F2D8                            ; ---------------------------------------------------------------------------
0000F2D8                            ; Sprite mappings - invisible lava tag (MZ)
0000F2D8                            ; ---------------------------------------------------------------------------
0000F2D8                            Map_obj54:
0000F2D8                            	include "_maps\obj54.asm"
0000F2D8                            ; ---------------------------------------------------------------------------
0000F2D8                            ; Sprite mappings - invisible lava tag (MZ)
0000F2D8                            ; ---------------------------------------------------------------------------
0000F2D8 0000                       		dc.w byte_F212-Map_obj54
0000F2DA 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F2DC 00                         		even
0000F2DC 00                         		even
0000F2DC                            
0000F2DC                            Ani_obj4C:
0000F2DC                            	include "_anim\obj4C.asm"
0000F2DC                            ; ---------------------------------------------------------------------------
0000F2DC                            ; Animation script - geyser of lava (MZ)
0000F2DC                            ; ---------------------------------------------------------------------------
0000F2DC 0000                       		dc.w byte_F220-Ani_obj4C
0000F2DE 0000                       		dc.w byte_F22A-Ani_obj4C
0000F2E0 0000                       		dc.w byte_F22E-Ani_obj4C
0000F2E2 0000                       		dc.w byte_F232-Ani_obj4C
0000F2E4 0000                       		dc.w byte_F23A-Ani_obj4C
0000F2E6 0000                       		dc.w byte_F23E-Ani_obj4C
0000F2E8 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F2F2 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F2F6 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F2FA 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F302 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F306 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F30A                            		even
0000F30A                            		even
0000F30A                            
0000F30A                            Ani_obj4E:
0000F30A                            	include "_anim\obj4E.asm"
0000F30A                            ; ---------------------------------------------------------------------------
0000F30A                            ; Animation script - advancing wall of lava (MZ)
0000F30A                            ; ---------------------------------------------------------------------------
0000F30A 0000                       		dc.w byte_F244-Ani_obj4E
0000F30C 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F312                            		even
0000F312                            		even
0000F312                            
0000F312                            ; ---------------------------------------------------------------------------
0000F312                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F312                            ; ---------------------------------------------------------------------------
0000F312                            Map_obj4C:
0000F312                            	include "_maps\obj4C.asm"
0000F312                            ; ---------------------------------------------------------------------------
0000F312                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F312                            ; ---------------------------------------------------------------------------
0000F312 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F316 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F31A 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F31E 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F322 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F326 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F32A 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F32E 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F332 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F336 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F33A 02                         byte_F272:	dc.b 2
0000F33B EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F340 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F345 02                         byte_F27D:	dc.b 2
0000F346 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F34B EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F350 04                         byte_F288:	dc.b 4
0000F351 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F356 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F35B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F360 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F365 04                         byte_F29D:	dc.b 4
0000F366 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F36B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F370 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F375 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F37A 06                         byte_F2B2:	dc.b 6
0000F37B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F380 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F385 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F38A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F38F E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F394 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F399 06                         byte_F2D1:	dc.b 6
0000F39A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F39F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F3A4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F3A9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F3AE E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F3B3 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F3B8 02                         byte_F2F0:	dc.b 2
0000F3B9 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F3BE E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F3C3 02                         byte_F2FB:	dc.b 2
0000F3C4 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F3C9 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F3CE 0A                         byte_F306:	dc.b $A
0000F3CF 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F3D4 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F3D9 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F3DE B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F3E3 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F3E8 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F3ED F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F3F2 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F3F7 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F3FC 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F401 0A                         byte_F339:	dc.b $A
0000F402 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F407 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F40C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F411 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F416 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F41B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F420 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F425 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F42A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F42F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F434 0A                         byte_F36C:	dc.b $A
0000F435 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F43A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F43F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F444 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F449 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F44E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F453 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F458 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F45D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F462 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F467 06                         byte_F39F:	dc.b 6
0000F468 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F46D 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F472 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F477 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F47C D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F481 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F486 06                         byte_F3BE:	dc.b 6
0000F487 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F48C 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F491 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F496 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F49B D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F4A0 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F4A5 06                         byte_F3DD:	dc.b 6
0000F4A6 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F4AB 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F4B0 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F4B5 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F4BA D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F4BF D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F4C4 10                         byte_F3FC:	dc.b $10
0000F4C5 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F4CA 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F4CF B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F4D4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F4D9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F4DE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F4E3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F4E8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F4ED 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F4F2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F4F7 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F4FC 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F501 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F506 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F50B 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F510 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F515 10                         byte_F44D:	dc.b $10
0000F516 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F51B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F520 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F525 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F52A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F52F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F534 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F539 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F53E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F543 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F548 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F54D 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F552 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F557 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F55C 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000F561 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000F566 10                         byte_F49E:	dc.b $10
0000F567 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F56C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F571 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F576 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F57B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F580 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F585 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F58A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F58F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F594 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F599 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000F59E 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000F5A3 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000F5A8 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000F5AD 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000F5B2 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000F5B7 06                         byte_F4EF:	dc.b 6
0000F5B8 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000F5BD E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000F5C2 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000F5C7 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000F5CC D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000F5D1 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000F5D6 06                         byte_F50E:	dc.b 6
0000F5D7 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000F5DC E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000F5E1 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000F5E6 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000F5EB D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000F5F0 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000F5F5 00                         byte_F52D:	dc.b 0
0000F5F6                            		even
0000F5F6                            		even
0000F5F6                            
0000F5F6                            ; ---------------------------------------------------------------------------
0000F5F6                            ; Sprite mappings - advancing wall of lava (MZ)
0000F5F6                            ; ---------------------------------------------------------------------------
0000F5F6                            Map_obj4E:
0000F5F6                            	include "_maps\obj4E.asm"
0000F5F6                            ; ---------------------------------------------------------------------------
0000F5F6                            ; Sprite mappings - advancing wall of lava (MZ)
0000F5F6                            ; ---------------------------------------------------------------------------
0000F5F6 0000                       		dc.w byte_F538-Map_obj4E
0000F5F8 0000                       		dc.w byte_F566-Map_obj4E
0000F5FA 0000                       		dc.w byte_F594-Map_obj4E
0000F5FC 0000                       		dc.w byte_F5C2-Map_obj4E
0000F5FE 0000                       		dc.w byte_F5F0-Map_obj4E
0000F600 09                         byte_F538:	dc.b 9
0000F601 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000F606 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F60B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F610 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F615 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F61A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F61F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F624 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F629 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F62E 09                         byte_F566:	dc.b 9
0000F62F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F634 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000F639 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F63E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F643 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F648 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F64D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F652 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F657 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F65C 09                         byte_F594:	dc.b 9
0000F65D E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000F662 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F667 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F66C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F671 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F676 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F67B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F680 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F685 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F68A 09                         byte_F5C2:	dc.b 9
0000F68B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F690 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000F695 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F69A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F69F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F6A4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F6A9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F6AE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F6B3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F6B8 08                         byte_F5F0:	dc.b 8
0000F6B9 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000F6BE 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F6C3 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F6C8 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F6CD E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F6D2 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F6D7 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F6DC 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F6E2 00                         		even
0000F6E2 00                         		even
0000F6E2                            
0000F6E2                            ; ===========================================================================
0000F6E2                            ; ---------------------------------------------------------------------------
0000F6E2                            ; Object 40 - Moto Bug enemy (GHZ)
0000F6E2                            ; ---------------------------------------------------------------------------
0000F6E2                            
0000F6E2                            Obj40:					; XREF: Obj_Index
0000F6E2 7000                       		moveq	#0,d0
0000F6E4 1028 0024                  		move.b	$24(a0),d0
0000F6E8 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000F6EC 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000F6F0                            ; ===========================================================================
0000F6F0 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000F6F2 0000                       		dc.w Obj40_Action-Obj40_Index
0000F6F4 0000                       		dc.w Obj40_Animate-Obj40_Index
0000F6F6 0000                       		dc.w Obj40_Delete-Obj40_Index
0000F6F8                            ; ===========================================================================
0000F6F8                            
0000F6F8                            Obj40_Main:				; XREF: Obj40_Index
0000F6F8 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000F700 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000F706 117C 0004 0001             		move.b	#4,1(a0)
0000F70C 117C 0004 0018             		move.b	#4,$18(a0)
0000F712 117C 0014 0019             		move.b	#$14,$19(a0)
0000F718 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000F71C 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000F71E 117C 000E 0016             		move.b	#$E,$16(a0)
0000F724 117C 0008 0017             		move.b	#8,$17(a0)
0000F72A 117C 000C 0020             		move.b	#$C,$20(a0)
0000F730 6100 DF48                  		bsr.w	ObjectFall
0000F734 4EB9 0000 0000             		jsr	ObjHitFloor
0000F73A 4A41                       		tst.w	d1
0000F73C 6A00                       		bpl.s	locret_F68A
0000F73E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F742 317C 0000 0012             		move.w	#0,$12(a0)
0000F748 5428 0024                  		addq.b	#2,$24(a0)
0000F74C 0868 0000 0022             		bchg	#0,$22(a0)
0000F752                            
0000F752                            locret_F68A:
0000F752 4E75                       		rts	
0000F754                            ; ===========================================================================
0000F754                            
0000F754                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000F754 5828 0024                  		addq.b	#4,$24(a0)
0000F758 6000 0000                  		bra.w	Obj40_Animate
0000F75C                            ; ===========================================================================
0000F75C                            
0000F75C                            Obj40_Action:				; XREF: Obj40_Index
0000F75C 7000                       		moveq	#0,d0
0000F75E 1028 0025                  		move.b	$25(a0),d0
0000F762 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000F766 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000F76A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F770 6100 B086                  		bsr.w	AnimateSprite
0000F774                            
0000F774                            ; ---------------------------------------------------------------------------
0000F774                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000F774                            ; ---------------------------------------------------------------------------
0000F774                            
0000F774                            MarkObjGone:
0000F774 3028 0008                  		move.w	8(a0),d0
0000F778 0240 FF80                  		andi.w	#$FF80,d0
0000F77C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F780 0441 0080                  		subi.w	#$80,d1
0000F784 0241 FF80                  		andi.w	#$FF80,d1
0000F788 9041                       		sub.w	d1,d0
0000F78A 0C40 0280                  		cmpi.w	#$280,d0
0000F78E 6200 0000                  		bhi.w	Mark_ChkGone
0000F792 6000 DF38                  		bra.w	DisplaySprite
0000F796                            ; ===========================================================================
0000F796                            
0000F796                            Mark_ChkGone:
0000F796 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F79A 7000                       		moveq	#0,d0
0000F79C 1028 0023                  		move.b	$23(a0),d0
0000F7A0 6700                       		beq.s	Mark_Delete
0000F7A2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F7A8                            
0000F7A8                            Mark_Delete:
0000F7A8 6000 DF5E                  		bra.w	DeleteObject
0000F7AC                            
0000F7AC                            ; ===========================================================================
0000F7AC 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000F7AE 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000F7B0                            ; ===========================================================================
0000F7B0                            
0000F7B0                            Obj40_Move:				; XREF: Obj40_Index2
0000F7B0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F7B4 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000F7B6 5428 0025                  		addq.b	#2,$25(a0)
0000F7BA 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000F7C0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F7C6 0868 0000 0022             		bchg	#0,$22(a0)
0000F7CC 6600                       		bne.s	locret_F70A
0000F7CE 4468 0010                  		neg.w	$10(a0)		; change direction
0000F7D2                            
0000F7D2                            locret_F70A:
0000F7D2 4E75                       		rts	
0000F7D4                            ; ===========================================================================
0000F7D4                            
0000F7D4                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000F7D4 6100 DED0                  		bsr.w	SpeedToPos
0000F7D8 4EB9 0000 0000             		jsr	ObjHitFloor
0000F7DE 0C41 FFF8                  		cmpi.w	#-8,d1
0000F7E2 6D00                       		blt.s	Obj40_Pause
0000F7E4 0C41 000C                  		cmpi.w	#$C,d1
0000F7E8 6C00                       		bge.s	Obj40_Pause
0000F7EA D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F7EE 5328 0033                  		subq.b	#1,$33(a0)
0000F7F2 6A00                       		bpl.s	locret_F756
0000F7F4 117C 000F 0033             		move.b	#$F,$33(a0)
0000F7FA 6100 E356                  		bsr.w	SingleObjLoad
0000F7FE 6600                       		bne.s	locret_F756
0000F800 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000F804 3368 0008 0008             		move.w	8(a0),8(a1)
0000F80A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F810 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F816 137C 0002 001C             		move.b	#2,$1C(a1)
0000F81C                            
0000F81C                            locret_F756:
0000F81C 4E75                       		rts	
0000F81E                            ; ===========================================================================
0000F81E                            
0000F81E                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000F81E 5528 0025                  		subq.b	#2,$25(a0)
0000F822 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F828 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000F82E 117C 0000 001C             		move.b	#0,$1C(a0)
0000F834 4E75                       		rts	
0000F836                            ; ===========================================================================
0000F836                            
0000F836                            Obj40_Animate:				; XREF: Obj40_Index
0000F836 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F83C 6100 AFBA                  		bsr.w	AnimateSprite
0000F840 6000 DE8A                  		bra.w	DisplaySprite
0000F844                            ; ===========================================================================
0000F844                            
0000F844                            Obj40_Delete:				; XREF: Obj40_Index
0000F844 6000 DEC2                  		bra.w	DeleteObject
0000F848                            ; ===========================================================================
0000F848                            Ani_obj40:
0000F848                            	include "_anim\obj40.asm"
0000F848                            ; ---------------------------------------------------------------------------
0000F848                            ; Animation script - Motobug enemy
0000F848                            ; ---------------------------------------------------------------------------
0000F848 0000                       		dc.w byte_F788-Ani_obj40
0000F84A 0000                       		dc.w byte_F78C-Ani_obj40
0000F84C 0000                       		dc.w byte_F792-Ani_obj40
0000F84E 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000F852 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000F858 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000F866                            		even
0000F866                            		even
0000F866                            
0000F866                            ; ---------------------------------------------------------------------------
0000F866                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F866                            ; ---------------------------------------------------------------------------
0000F866                            Map_obj40:
0000F866                            	include "_maps\obj40.asm"
0000F866                            ; ---------------------------------------------------------------------------
0000F866                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F866                            ; ---------------------------------------------------------------------------
0000F866 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0000F86A 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0000F86E 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0000F872 0000                       		dc.w byte_F804-Map_obj40
0000F874 04                         byte_F7AE:	dc.b 4
0000F875 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F87A 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0000F87F F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F884 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0000F889 04                         byte_F7C3:	dc.b 4
0000F88A F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0000F88F 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
0000F894 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0000F899 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0000F89E 05                         byte_F7D8:	dc.b 5
0000F89F F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F8A4 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0000F8A9 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F8AE 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0000F8B3 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0000F8B8 01                         byte_F7F2:	dc.b 1
0000F8B9 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
0000F8BE 01                         byte_F7F8:	dc.b 1
0000F8BF FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0000F8C4 01                         byte_F7FE:	dc.b 1
0000F8C5 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
0000F8CA 00                         byte_F804:	dc.b 0
0000F8CC 00                         		even
0000F8CC 00                         		even
0000F8CC                            
0000F8CC                            ; ===========================================================================
0000F8CC                            ; ---------------------------------------------------------------------------
0000F8CC                            ; Object 4F - blank
0000F8CC                            ; ---------------------------------------------------------------------------
0000F8CC                            
0000F8CC                            Obj4F:					; XREF: Obj_Index
0000F8CC 4E75                       		rts	
0000F8CE                            
0000F8CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F8CE                            
0000F8CE                            
0000F8CE                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000F8CE 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000F8D2 D047                       		add.w	d7,d0
0000F8D4 0240 0003                  		andi.w	#3,d0
0000F8D8 6600                       		bne.s	loc_F836
0000F8DA 7600                       		moveq	#0,d3
0000F8DC 1628 0019                  		move.b	$19(a0),d3
0000F8E0 4A68 0010                  		tst.w	$10(a0)
0000F8E4 6B00                       		bmi.s	loc_F82C
0000F8E6 6100 0000                  		bsr.w	ObjHitWallRight
0000F8EA 4A41                       		tst.w	d1
0000F8EC 6A00                       		bpl.s	loc_F836
0000F8EE                            
0000F8EE                            loc_F828:
0000F8EE 7001                       		moveq	#1,d0
0000F8F0 4E75                       		rts	
0000F8F2                            ; ===========================================================================
0000F8F2                            
0000F8F2                            loc_F82C:
0000F8F2 4643                       		not.w	d3
0000F8F4 6100 0000                  		bsr.w	ObjHitWallLeft
0000F8F8 4A41                       		tst.w	d1
0000F8FA 6BF2                       		bmi.s	loc_F828
0000F8FC                            
0000F8FC                            loc_F836:
0000F8FC 7000                       		moveq	#0,d0
0000F8FE 4E75                       		rts	
0000F900                            ; End of function Obj50_ChkWall
0000F900                            
0000F900                            ; ===========================================================================
0000F900                            ; ---------------------------------------------------------------------------
0000F900                            ; Object 50 - Yadrin enemy (SYZ)
0000F900                            ; ---------------------------------------------------------------------------
0000F900                            
0000F900                            Obj50:					; XREF: Obj_Index
0000F900 7000                       		moveq	#0,d0
0000F902 1028 0024                  		move.b	$24(a0),d0
0000F906 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000F90A 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000F90E                            ; ===========================================================================
0000F90E 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000F910 0000                       		dc.w Obj50_Action-Obj50_Index
0000F912                            ; ===========================================================================
0000F912                            
0000F912                            Obj50_Main:				; XREF: Obj50_Index
0000F912 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000F91A 317C 247B 0002             		move.w	#$247B,2(a0)
0000F920 117C 0004 0001             		move.b	#4,1(a0)
0000F926 117C 0004 0018             		move.b	#4,$18(a0)
0000F92C 117C 0014 0019             		move.b	#$14,$19(a0)
0000F932 117C 0011 0016             		move.b	#$11,$16(a0)
0000F938 117C 0008 0017             		move.b	#8,$17(a0)
0000F93E 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000F944 6100 DD34                  		bsr.w	ObjectFall
0000F948 6100 0000                  		bsr.w	ObjHitFloor
0000F94C 4A41                       		tst.w	d1
0000F94E 6A00                       		bpl.s	locret_F89E
0000F950 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F954 317C 0000 0012             		move.w	#0,$12(a0)
0000F95A 5428 0024                  		addq.b	#2,$24(a0)
0000F95E 0868 0000 0022             		bchg	#0,$22(a0)
0000F964                            
0000F964                            locret_F89E:
0000F964 4E75                       		rts	
0000F966                            ; ===========================================================================
0000F966                            
0000F966                            Obj50_Action:				; XREF: Obj50_Index
0000F966 7000                       		moveq	#0,d0
0000F968 1028 0025                  		move.b	$25(a0),d0
0000F96C 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000F970 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000F974 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000F97A 6100 AE7C                  		bsr.w	AnimateSprite
0000F97E 6000 FDF4                  		bra.w	MarkObjGone
0000F982                            ; ===========================================================================
0000F982 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000F984 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000F986                            ; ===========================================================================
0000F986                            
0000F986                            Obj50_Move:				; XREF: Obj50_Index2
0000F986 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F98A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000F98C 5428 0025                  		addq.b	#2,$25(a0)
0000F990 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000F996 117C 0001 001C             		move.b	#1,$1C(a0)
0000F99C 0868 0000 0022             		bchg	#0,$22(a0)
0000F9A2 6600                       		bne.s	locret_F8E2
0000F9A4 4468 0010                  		neg.w	$10(a0)		; change direction
0000F9A8                            
0000F9A8                            locret_F8E2:
0000F9A8 4E75                       		rts	
0000F9AA                            ; ===========================================================================
0000F9AA                            
0000F9AA                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000F9AA 6100 DCFA                  		bsr.w	SpeedToPos
0000F9AE 6100 0000                  		bsr.w	ObjHitFloor
0000F9B2 0C41 FFF8                  		cmpi.w	#-8,d1
0000F9B6 6D00                       		blt.s	Obj50_Pause
0000F9B8 0C41 000C                  		cmpi.w	#$C,d1
0000F9BC 6C00                       		bge.s	Obj50_Pause
0000F9BE D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000F9C2 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000F9C6 6600                       		bne.s	Obj50_Pause
0000F9C8 4E75                       		rts	
0000F9CA                            ; ===========================================================================
0000F9CA                            
0000F9CA                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000F9CA 5528 0025                  		subq.b	#2,$25(a0)
0000F9CE 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F9D4 317C 0000 0010             		move.w	#0,$10(a0)
0000F9DA 117C 0000 001C             		move.b	#0,$1C(a0)
0000F9E0 4E75                       		rts	
0000F9E2                            ; ===========================================================================
0000F9E2                            Ani_obj50:
0000F9E2                            	include "_anim\obj50.asm"
0000F9E2                            ; ---------------------------------------------------------------------------
0000F9E2                            ; Animation script - Yadrin enemy
0000F9E2                            ; ---------------------------------------------------------------------------
0000F9E2 0000                       		dc.w byte_F920-Ani_obj50
0000F9E4 0000                       		dc.w byte_F924-Ani_obj50
0000F9E6 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000F9EA 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000F9F4                            		even
0000F9F4                            		even
0000F9F4                            
0000F9F4                            ; ---------------------------------------------------------------------------
0000F9F4                            ; Sprite mappings - Yadrin enemy (SYZ)
0000F9F4                            ; ---------------------------------------------------------------------------
0000F9F4                            Map_obj50:
0000F9F4                            	include "_maps\obj50.asm"
0000F9F4                            ; ---------------------------------------------------------------------------
0000F9F4                            ; Sprite mappings - Yadrin enemy (SYZ)
0000F9F4                            ; ---------------------------------------------------------------------------
0000F9F4 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000F9F8 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000F9FC 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FA00 05                         byte_F93A:	dc.b 5
0000FA01 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FA06 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FA0B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA10 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA15 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FA1A 05                         byte_F954:	dc.b 5
0000FA1B F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FA20 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FA25 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA2A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA2F 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FA34 05                         byte_F96E:	dc.b 5
0000FA35 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FA3A 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FA3F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA44 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA49 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FA4E 05                         byte_F988:	dc.b 5
0000FA4F F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FA54 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FA59 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA5E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA63 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FA68 05                         byte_F9A2:	dc.b 5
0000FA69 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FA6E FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FA73 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA78 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA7D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FA82 05                         byte_F9BC:	dc.b 5
0000FA83 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FA88 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FA8D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA92 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA97 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FA9C                            		even
0000FA9C                            		even
0000FA9C                            
0000FA9C                            ; ---------------------------------------------------------------------------
0000FA9C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FA9C                            ;
0000FA9C                            ; variables:
0000FA9C                            ; d1 = width
0000FA9C                            ; d2 = height /	2 (when	jumping)
0000FA9C                            ; d3 = height /	2 (when	walking)
0000FA9C                            ; d4 = x-axis position
0000FA9C                            ; ---------------------------------------------------------------------------
0000FA9C                            
0000FA9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA9C                            
0000FA9C                            
0000FA9C                            SolidObject:
0000FA9C 4A28 0025                  		tst.b	$25(a0)
0000FAA0 6700 0000                  		beq.w	loc_FAC8
0000FAA4 3401                       		move.w	d1,d2
0000FAA6 D442                       		add.w	d2,d2
0000FAA8 43F8 D000                  		lea	($FFFFD000).w,a1
0000FAAC 0829 0001 0022             		btst	#1,$22(a1)
0000FAB2 6600                       		bne.s	loc_F9FE
0000FAB4 3029 0008                  		move.w	8(a1),d0
0000FAB8 9068 0008                  		sub.w	8(a0),d0
0000FABC D041                       		add.w	d1,d0
0000FABE 6B00                       		bmi.s	loc_F9FE
0000FAC0 B042                       		cmp.w	d2,d0
0000FAC2 6500                       		bcs.s	loc_FA12
0000FAC4                            
0000FAC4                            loc_F9FE:
0000FAC4 08A9 0003 0022             		bclr	#3,$22(a1)
0000FACA 08A8 0003 0022             		bclr	#3,$22(a0)
0000FAD0 4228 0025                  		clr.b	$25(a0)
0000FAD4 7800                       		moveq	#0,d4
0000FAD6 4E75                       		rts	
0000FAD8                            ; ===========================================================================
0000FAD8                            
0000FAD8                            loc_FA12:
0000FAD8 3404                       		move.w	d4,d2
0000FADA 6100 8148                  		bsr.w	MvSonicOnPtfm
0000FADE 7800                       		moveq	#0,d4
0000FAE0 4E75                       		rts	
0000FAE2                            ; ===========================================================================
0000FAE2                            
0000FAE2                            SolidObject71:				; XREF: Obj71_Solid
0000FAE2 4A28 0025                  		tst.b	$25(a0)
0000FAE6 6700 0000                  		beq.w	loc_FAD0
0000FAEA 3401                       		move.w	d1,d2
0000FAEC D442                       		add.w	d2,d2
0000FAEE 43F8 D000                  		lea	($FFFFD000).w,a1
0000FAF2 0829 0001 0022             		btst	#1,$22(a1)
0000FAF8 6600                       		bne.s	loc_FA44
0000FAFA 3029 0008                  		move.w	8(a1),d0
0000FAFE 9068 0008                  		sub.w	8(a0),d0
0000FB02 D041                       		add.w	d1,d0
0000FB04 6B00                       		bmi.s	loc_FA44
0000FB06 B042                       		cmp.w	d2,d0
0000FB08 6500                       		bcs.s	loc_FA58
0000FB0A                            
0000FB0A                            loc_FA44:
0000FB0A 08A9 0003 0022             		bclr	#3,$22(a1)
0000FB10 08A8 0003 0022             		bclr	#3,$22(a0)
0000FB16 4228 0025                  		clr.b	$25(a0)
0000FB1A 7800                       		moveq	#0,d4
0000FB1C 4E75                       		rts	
0000FB1E                            ; ===========================================================================
0000FB1E                            
0000FB1E                            loc_FA58:
0000FB1E 3404                       		move.w	d4,d2
0000FB20 6100 8102                  		bsr.w	MvSonicOnPtfm
0000FB24 7800                       		moveq	#0,d4
0000FB26 4E75                       		rts	
0000FB28                            ; ===========================================================================
0000FB28                            
0000FB28                            SolidObject2F:				; XREF: Obj2F_Solid
0000FB28 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB2C 4A28 0001                  		tst.b	1(a0)
0000FB30 6A00 0000                  		bpl.w	loc_FB92
0000FB34 3029 0008                  		move.w	8(a1),d0
0000FB38 9068 0008                  		sub.w	8(a0),d0
0000FB3C D041                       		add.w	d1,d0
0000FB3E 6B00 0000                  		bmi.w	loc_FB92
0000FB42 3601                       		move.w	d1,d3
0000FB44 D643                       		add.w	d3,d3
0000FB46 B043                       		cmp.w	d3,d0
0000FB48 6200 0000                  		bhi.w	loc_FB92
0000FB4C 3A00                       		move.w	d0,d5
0000FB4E 0828 0000 0001             		btst	#0,1(a0)
0000FB54 6700                       		beq.s	loc_FA94
0000FB56 4645                       		not.w	d5
0000FB58 DA43                       		add.w	d3,d5
0000FB5A                            
0000FB5A                            loc_FA94:
0000FB5A E24D                       		lsr.w	#1,d5
0000FB5C 7600                       		moveq	#0,d3
0000FB5E 1632 5000                  		move.b	(a2,d5.w),d3
0000FB62 9612                       		sub.b	(a2),d3
0000FB64 3A28 000C                  		move.w	$C(a0),d5
0000FB68 9A43                       		sub.w	d3,d5
0000FB6A 1629 0016                  		move.b	$16(a1),d3
0000FB6E 4883                       		ext.w	d3
0000FB70 D443                       		add.w	d3,d2
0000FB72 3629 000C                  		move.w	$C(a1),d3
0000FB76 9645                       		sub.w	d5,d3
0000FB78 5843                       		addq.w	#4,d3
0000FB7A D642                       		add.w	d2,d3
0000FB7C 6B00 0000                  		bmi.w	loc_FB92
0000FB80 3802                       		move.w	d2,d4
0000FB82 D844                       		add.w	d4,d4
0000FB84 B644                       		cmp.w	d4,d3
0000FB86 6400 0000                  		bcc.w	loc_FB92
0000FB8A 6000 0000                  		bra.w	loc_FB0E
0000FB8E                            ; ===========================================================================
0000FB8E                            
0000FB8E                            loc_FAC8:
0000FB8E 4A28 0001                  		tst.b	1(a0)
0000FB92 6A00 0000                  		bpl.w	loc_FB92
0000FB96                            
0000FB96                            loc_FAD0:
0000FB96 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB9A 3029 0008                  		move.w	8(a1),d0
0000FB9E 9068 0008                  		sub.w	8(a0),d0
0000FBA2 D041                       		add.w	d1,d0
0000FBA4 6B00 0000                  		bmi.w	loc_FB92
0000FBA8 3601                       		move.w	d1,d3
0000FBAA D643                       		add.w	d3,d3
0000FBAC B043                       		cmp.w	d3,d0
0000FBAE 6200 0000                  		bhi.w	loc_FB92
0000FBB2 1629 0016                  		move.b	$16(a1),d3
0000FBB6 4883                       		ext.w	d3
0000FBB8 D443                       		add.w	d3,d2
0000FBBA 3629 000C                  		move.w	$C(a1),d3
0000FBBE 9668 000C                  		sub.w	$C(a0),d3
0000FBC2 5843                       		addq.w	#4,d3
0000FBC4 D642                       		add.w	d2,d3
0000FBC6 6B00 0000                  		bmi.w	loc_FB92
0000FBCA 3802                       		move.w	d2,d4
0000FBCC D844                       		add.w	d4,d4
0000FBCE B644                       		cmp.w	d4,d3
0000FBD0 6400 0000                  		bcc.w	loc_FB92
0000FBD4                            
0000FBD4                            loc_FB0E:
0000FBD4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000FBD8 6B00 0000                  		bmi.w	loc_FB92
0000FBDC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000FBE2 6400 0000                  		bcc.w	loc_FB92
0000FBE6 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FBEA 6600 0000                  		bne.w	loc_FBAC
0000FBEE 3A00                       		move.w	d0,d5
0000FBF0 B240                       		cmp.w	d0,d1
0000FBF2 6400                       		bcc.s	loc_FB36
0000FBF4 D241                       		add.w	d1,d1
0000FBF6 9041                       		sub.w	d1,d0
0000FBF8 3A00                       		move.w	d0,d5
0000FBFA 4445                       		neg.w	d5
0000FBFC                            
0000FBFC                            loc_FB36:
0000FBFC 3203                       		move.w	d3,d1
0000FBFE B443                       		cmp.w	d3,d2
0000FC00 6400                       		bcc.s	loc_FB44
0000FC02 5943                       		subq.w	#4,d3
0000FC04 9644                       		sub.w	d4,d3
0000FC06 3203                       		move.w	d3,d1
0000FC08 4441                       		neg.w	d1
0000FC0A                            
0000FC0A                            loc_FB44:
0000FC0A BA41                       		cmp.w	d1,d5
0000FC0C 6200 0000                  		bhi.w	loc_FBB0
0000FC10 0C41 0004                  		cmpi.w	#4,d1
0000FC14 6300                       		bls.s	loc_FB8C
0000FC16 4A40                       		tst.w	d0
0000FC18 6700                       		beq.s	loc_FB70
0000FC1A 6B00                       		bmi.s	loc_FB5E
0000FC1C 4A69 0010                  		tst.w	$10(a1)
0000FC20 6B00                       		bmi.s	loc_FB70
0000FC22 6000                       		bra.s	loc_FB64
0000FC24                            ; ===========================================================================
0000FC24                            
0000FC24                            loc_FB5E:
0000FC24 4A69 0010                  		tst.w	$10(a1)
0000FC28 6A00                       		bpl.s	loc_FB70
0000FC2A                            
0000FC2A                            loc_FB64:
0000FC2A 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0000FC30 337C 0000 0010             		move.w	#0,$10(a1)
0000FC36                            
0000FC36                            loc_FB70:
0000FC36 9169 0008                  		sub.w	d0,8(a1)
0000FC3A 0829 0001 0022             		btst	#1,$22(a1)
0000FC40 6600                       		bne.s	loc_FB8C
0000FC42 08E9 0005 0022             		bset	#5,$22(a1)
0000FC48 08E8 0005 0022             		bset	#5,$22(a0)
0000FC4E 7801                       		moveq	#1,d4
0000FC50 4E75                       		rts	
0000FC52                            ; ===========================================================================
0000FC52                            
0000FC52                            loc_FB8C:
0000FC52 6100                       		bsr.s	loc_FBA0
0000FC54 7801                       		moveq	#1,d4
0000FC56 4E75                       		rts	
0000FC58                            ; ===========================================================================
0000FC58                            
0000FC58                            loc_FB92:
0000FC58 0828 0005 0022             		btst	#5,$22(a0)
0000FC5E 6700                       		beq.s	loc_FBAC
0000FC60 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0000FC66                            
0000FC66                            loc_FBA0:
0000FC66 08A8 0005 0022             		bclr	#5,$22(a0)
0000FC6C 08A9 0005 0022             		bclr	#5,$22(a1)
0000FC72                            
0000FC72                            loc_FBAC:
0000FC72 7800                       		moveq	#0,d4
0000FC74 4E75                       		rts	
0000FC76                            ; ===========================================================================
0000FC76                            
0000FC76                            loc_FBB0:
0000FC76 4A43                       		tst.w	d3
0000FC78 6B00                       		bmi.s	loc_FBBC
0000FC7A 0C43 0010                  		cmpi.w	#$10,d3
0000FC7E 6500                       		bcs.s	loc_FBEE
0000FC80 60D6                       		bra.s	loc_FB92
0000FC82                            ; ===========================================================================
0000FC82                            
0000FC82                            loc_FBBC:
0000FC82 4A69 0012                  		tst.w	$12(a1)
0000FC86 6700                       		beq.s	loc_FBD6
0000FC88 6A00                       		bpl.s	loc_FBD2
0000FC8A 4A43                       		tst.w	d3
0000FC8C 6A00                       		bpl.s	loc_FBD2
0000FC8E 9769 000C                  		sub.w	d3,$C(a1)
0000FC92 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0000FC98                            
0000FC98                            loc_FBD2:
0000FC98 78FF                       		moveq	#-1,d4
0000FC9A 4E75                       		rts	
0000FC9C                            ; ===========================================================================
0000FC9C                            
0000FC9C                            loc_FBD6:
0000FC9C 0829 0001 0022             		btst	#1,$22(a1)
0000FCA2 66F4                       		bne.s	loc_FBD2
0000FCA4 2F08                       		move.l	a0,-(sp)
0000FCA6 2049                       		movea.l	a1,a0
0000FCA8 4EB9 0000 0000             		jsr	KillSonic
0000FCAE 205F                       		movea.l	(sp)+,a0
0000FCB0 78FF                       		moveq	#-1,d4
0000FCB2 4E75                       		rts	
0000FCB4                            ; ===========================================================================
0000FCB4                            
0000FCB4                            loc_FBEE:
0000FCB4 5943                       		subq.w	#4,d3
0000FCB6 7200                       		moveq	#0,d1
0000FCB8 1228 0019                  		move.b	$19(a0),d1
0000FCBC 3401                       		move.w	d1,d2
0000FCBE D442                       		add.w	d2,d2
0000FCC0 D269 0008                  		add.w	8(a1),d1
0000FCC4 9268 0008                  		sub.w	8(a0),d1
0000FCC8 6B00                       		bmi.s	loc_FC28
0000FCCA B242                       		cmp.w	d2,d1
0000FCCC 6400                       		bcc.s	loc_FC28
0000FCCE 4A69 0012                  		tst.w	$12(a1)
0000FCD2 6B00                       		bmi.s	loc_FC28
0000FCD4 9769 000C                  		sub.w	d3,$C(a1)
0000FCD8 5369 000C                  		subq.w	#1,$C(a1)
0000FCDC 6100                       		bsr.s	sub_FC2C
0000FCDE 117C 0002 0025             		move.b	#2,$25(a0)
0000FCE4 08E8 0003 0022             		bset	#3,$22(a0)
0000FCEA 78FF                       		moveq	#-1,d4
0000FCEC 4E75                       		rts	
0000FCEE                            ; ===========================================================================
0000FCEE                            
0000FCEE                            loc_FC28:
0000FCEE 7800                       		moveq	#0,d4
0000FCF0 4E75                       		rts	
0000FCF2                            ; End of function SolidObject
0000FCF2                            
0000FCF2                            
0000FCF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FCF2                            
0000FCF2                            
0000FCF2                            sub_FC2C:				; XREF: SolidObject
0000FCF2 0829 0003 0022             		btst	#3,$22(a1)
0000FCF8 6700                       		beq.s	loc_FC4E
0000FCFA 7000                       		moveq	#0,d0
0000FCFC 1029 003D                  		move.b	$3D(a1),d0
0000FD00 ED48                       		lsl.w	#6,d0
0000FD02 0680 00FF D000             		addi.l	#$FFD000,d0
0000FD08 2440                       		movea.l	d0,a2
0000FD0A 08AA 0003 0022             		bclr	#3,$22(a2)
0000FD10 422A 0025                  		clr.b	$25(a2)
0000FD14                            
0000FD14                            loc_FC4E:
0000FD14 3008                       		move.w	a0,d0
0000FD16 0440 D000                  		subi.w	#-$3000,d0
0000FD1A EC48                       		lsr.w	#6,d0
0000FD1C 0240 007F                  		andi.w	#$7F,d0
0000FD20 1340 003D                  		move.b	d0,$3D(a1)
0000FD24 137C 0000 0026             		move.b	#0,$26(a1)
0000FD2A 337C 0000 0012             		move.w	#0,$12(a1)
0000FD30 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000FD36 0829 0001 0022             		btst	#1,$22(a1)
0000FD3C 6700                       		beq.s	loc_FC84
0000FD3E 2F08                       		move.l	a0,-(sp)
0000FD40 2049                       		movea.l	a1,a0
0000FD42 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000FD48 205F                       		movea.l	(sp)+,a0
0000FD4A                            
0000FD4A                            loc_FC84:
0000FD4A 08E9 0003 0022             		bset	#3,$22(a1)
0000FD50 08E8 0003 0022             		bset	#3,$22(a0)
0000FD56 4E75                       		rts	
0000FD58                            ; End of function sub_FC2C
0000FD58                            
0000FD58                            ; ===========================================================================
0000FD58                            ; ---------------------------------------------------------------------------
0000FD58                            ; Object 51 - smashable	green block (MZ)
0000FD58                            ; ---------------------------------------------------------------------------
0000FD58                            
0000FD58                            Obj51:					; XREF: Obj_Index
0000FD58 7000                       		moveq	#0,d0
0000FD5A 1028 0024                  		move.b	$24(a0),d0
0000FD5E 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0000FD62 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0000FD66 6000 FA0C                  		bra.w	MarkObjGone
0000FD6A                            ; ===========================================================================
0000FD6A 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0000FD6C 0000                       		dc.w Obj51_Solid-Obj51_Index
0000FD6E 0000                       		dc.w Obj51_Display-Obj51_Index
0000FD70                            ; ===========================================================================
0000FD70                            
0000FD70                            Obj51_Main:				; XREF: Obj51_Index
0000FD70 5428 0024                  		addq.b	#2,$24(a0)
0000FD74 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0000FD7C 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FD82 117C 0004 0001             		move.b	#4,1(a0)
0000FD88 117C 0010 0019             		move.b	#$10,$19(a0)
0000FD8E 117C 0004 0018             		move.b	#4,$18(a0)
0000FD94 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FD9A                            
0000FD9A                            Obj51_Solid:				; XREF: Obj51_Index
0000FD9A 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0000FDA0 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0000FDA6 323C 001B                  		move.w	#$1B,d1
0000FDAA 343C 0010                  		move.w	#$10,d2
0000FDAE 363C 0011                  		move.w	#$11,d3
0000FDB2 3828 0008                  		move.w	8(a0),d4
0000FDB6 6100 FCE4                  		bsr.w	SolidObject
0000FDBA 0828 0003 0022             		btst	#3,$22(a0)
0000FDC0 6600                       		bne.s	Obj51_Smash
0000FDC2                            
0000FDC2                            locret_FCFC:
0000FDC2 4E75                       		rts	
0000FDC4                            ; ===========================================================================
0000FDC4                            
0000FDC4                            Obj51_Smash:				; XREF: Obj51_Solid
0000FDC4 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0000FDCA 66F6                       		bne.s	locret_FCFC	; if not, branch
0000FDCC 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0000FDD2 08E9 0002 0022             		bset	#2,$22(a1)
0000FDD8 137C 000E 0016             		move.b	#$E,$16(a1)
0000FDDE 137C 0007 0017             		move.b	#7,$17(a1)
0000FDE4 137C 0002 001C             		move.b	#2,$1C(a1)
0000FDEA 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0000FDF0 08E9 0001 0022             		bset	#1,$22(a1)
0000FDF6 08A9 0003 0022             		bclr	#3,$22(a1)
0000FDFC 137C 0002 0024             		move.b	#2,$24(a1)
0000FE02 08A8 0003 0022             		bclr	#3,$22(a0)
0000FE08 4228 0025                  		clr.b	$25(a0)
0000FE0C 117C 0001 001A             		move.b	#1,$1A(a0)
0000FE12 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0000FE18 7203                       		moveq	#3,d1		; set number of	fragments to 4
0000FE1A 343C 0038                  		move.w	#$38,d2
0000FE1E 6100 D49A                  		bsr.w	SmashObject
0000FE22 6100 DD2E                  		bsr.w	SingleObjLoad
0000FE26 6600                       		bne.s	Obj51_Display
0000FE28 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FE2C 3368 0008 0008             		move.w	8(a0),8(a1)
0000FE32 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FE38 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0000FE3C 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0000FE40 0C42 0006                  		cmpi.w	#6,d2
0000FE44 6500                       		bcs.s	Obj51_Bonus
0000FE46 7406                       		moveq	#6,d2
0000FE48                            
0000FE48                            Obj51_Bonus:
0000FE48 7000                       		moveq	#0,d0
0000FE4A 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0000FE4E 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0000FE54 6500                       		bcs.s	loc_FD98	; if not, branch
0000FE56 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0000FE5A 740A                       		moveq	#10,d2
0000FE5C                            
0000FE5C                            loc_FD98:
0000FE5C 4EB9 0000 0000             		jsr	AddPoints
0000FE62 E24A                       		lsr.w	#1,d2
0000FE64 1342 001A                  		move.b	d2,$1A(a1)
0000FE68                            
0000FE68                            Obj51_Display:				; XREF: Obj51_Index
0000FE68 6100 D83C                  		bsr.w	SpeedToPos
0000FE6C 0668 0038 0012             		addi.w	#$38,$12(a0)
0000FE72 6100 D858                  		bsr.w	DisplaySprite
0000FE76 4A28 0001                  		tst.b	1(a0)
0000FE7A 6A00 D88C                  		bpl.w	DeleteObject
0000FE7E 4E75                       		rts	
0000FE80                            ; ===========================================================================
0000FE80 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0000FE84 FF00 FF00                  		dc.w $FF00, $FF00
0000FE88 0200 FE00                  		dc.w $200, $FE00
0000FE8C 0100 FF00                  		dc.w $100, $FF00
0000FE90                            
0000FE90 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0000FE98                            ; ---------------------------------------------------------------------------
0000FE98                            ; Sprite mappings - smashable green block (MZ)
0000FE98                            ; ---------------------------------------------------------------------------
0000FE98                            Map_obj51:
0000FE98                            	include "_maps\obj51.asm"
0000FE98                            ; ---------------------------------------------------------------------------
0000FE98                            ; Sprite mappings - smashable green block (MZ)
0000FE98                            ; ---------------------------------------------------------------------------
0000FE98 0000                       		dc.w byte_FDD8-Map_obj51
0000FE9A 0000                       		dc.w byte_FDE3-Map_obj51
0000FE9C 02                         byte_FDD8:	dc.b 2
0000FE9D F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0000FEA2 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0000FEA7 04                         byte_FDE3:	dc.b 4
0000FEA8 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0000FEAD 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0000FEB2 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0000FEB7 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0000FEBC                            		even
0000FEBC                            		even
0000FEBC                            
0000FEBC                            ; ===========================================================================
0000FEBC                            ; ---------------------------------------------------------------------------
0000FEBC                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0000FEBC                            ; ---------------------------------------------------------------------------
0000FEBC                            
0000FEBC                            Obj52:					; XREF: Obj_Index
0000FEBC 7000                       		moveq	#0,d0
0000FEBE 1028 0024                  		move.b	$24(a0),d0
0000FEC2 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0000FEC6 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0000FECA                            ; ===========================================================================
0000FECA 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0000FECC 0000                       		dc.w Obj52_Platform-Obj52_Index
0000FECE 0000                       		dc.w Obj52_StandOn-Obj52_Index
0000FED0                            
0000FED0 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0000FED2 2001                       		dc.b $20, 1
0000FED4 2002                       		dc.b $20, 2
0000FED6 4003                       		dc.b $40, 3
0000FED8 3004                       		dc.b $30, 4
0000FEDA                            ; ===========================================================================
0000FEDA                            
0000FEDA                            Obj52_Main:				; XREF: Obj52_Index
0000FEDA 5428 0024                  		addq.b	#2,$24(a0)
0000FEDE 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0000FEE6 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FEEC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000FEF2 6600                       		bne.s	loc_FE44
0000FEF4 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0000FEFC 317C 43BC 0002             		move.w	#$43BC,2(a0)
0000FF02 117C 0007 0016             		move.b	#7,$16(a0)
0000FF08                            
0000FF08                            loc_FE44:
0000FF08 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000FF0E 6600                       		bne.s	loc_FE60
0000FF10 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0000FF16 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0000FF1C 6700                       		beq.s	loc_FE60	; if yes, branch
0000FF1E 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0000FF24                            
0000FF24                            loc_FE60:
0000FF24 117C 0004 0001             		move.b	#4,1(a0)
0000FF2A 7000                       		moveq	#0,d0
0000FF2C 1028 0028                  		move.b	$28(a0),d0
0000FF30 E648                       		lsr.w	#3,d0
0000FF32 0240 001E                  		andi.w	#$1E,d0
0000FF36 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0000FF3A 115A 0019                  		move.b	(a2)+,$19(a0)
0000FF3E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000FF42 117C 0004 0018             		move.b	#4,$18(a0)
0000FF48 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FF4E 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000FF54 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FF5A                            
0000FF5A                            Obj52_Platform:				; XREF: Obj52_Index
0000FF5A 6100 0000                  		bsr.w	Obj52_Move
0000FF5E 7200                       		moveq	#0,d1
0000FF60 1228 0019                  		move.b	$19(a0),d1
0000FF64 4EB9 0000 7552             		jsr	(PlatformObject).l
0000FF6A 6000                       		bra.s	Obj52_ChkDel
0000FF6C                            ; ===========================================================================
0000FF6C                            
0000FF6C                            Obj52_StandOn:				; XREF: Obj52_Index
0000FF6C 7200                       		moveq	#0,d1
0000FF6E 1228 0019                  		move.b	$19(a0),d1
0000FF72 4EB9 0000 76C6             		jsr	(ExitPlatform).l
0000FF78 3F28 0008                  		move.w	8(a0),-(sp)
0000FF7C 6100 0000                  		bsr.w	Obj52_Move
0000FF80 341F                       		move.w	(sp)+,d2
0000FF82 4EB9 0000 7C30             		jsr	(MvSonicOnPtfm2).l
0000FF88                            
0000FF88                            Obj52_ChkDel:				; XREF: Obj52_Platform
0000FF88 3028 0030                  		move.w	$30(a0),d0
0000FF8C 0240 FF80                  		andi.w	#$FF80,d0
0000FF90 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF94 0441 0080                  		subi.w	#$80,d1
0000FF98 0241 FF80                  		andi.w	#$FF80,d1
0000FF9C 9041                       		sub.w	d1,d0
0000FF9E 0C40 0280                  		cmpi.w	#$280,d0
0000FFA2 6200 D764                  		bhi.w	DeleteObject
0000FFA6 6000 D724                  		bra.w	DisplaySprite
0000FFAA                            ; ===========================================================================
0000FFAA                            
0000FFAA                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0000FFAA 7000                       		moveq	#0,d0
0000FFAC 1028 0028                  		move.b	$28(a0),d0
0000FFB0 0240 000F                  		andi.w	#$F,d0
0000FFB4 D040                       		add.w	d0,d0
0000FFB6 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0000FFBA 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0000FFBE                            ; ===========================================================================
0000FFBE 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0000FFC2 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0000FFC6 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0000FFCA 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0000FFCE 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0000FFD2 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0000FFD4                            ; ===========================================================================
0000FFD4                            
0000FFD4                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0000FFD4 4E75                       		rts	
0000FFD6                            ; ===========================================================================
0000FFD6                            
0000FFD6                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0000FFD6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000FFDA 323C 0060                  		move.w	#$60,d1
0000FFDE 0828 0000 0022             		btst	#0,$22(a0)
0000FFE4 6700                       		beq.s	loc_FF26
0000FFE6 4440                       		neg.w	d0
0000FFE8 D041                       		add.w	d1,d0
0000FFEA                            
0000FFEA                            loc_FF26:
0000FFEA 3228 0030                  		move.w	$30(a0),d1
0000FFEE 9240                       		sub.w	d0,d1
0000FFF0 3141 0008                  		move.w	d1,8(a0)
0000FFF4 4E75                       		rts	
0000FFF6                            ; ===========================================================================
0000FFF6                            
0000FFF6                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0000FFF6 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0000FFFC 6600                       		bne.s	Obj52_02_Wait
0000FFFE 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010002                            
00010002                            Obj52_02_Wait:
00010002 4E75                       		rts	
00010004                            ; ===========================================================================
00010004                            
00010004                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010004 7600                       		moveq	#0,d3
00010006 1628 0019                  		move.b	$19(a0),d3
0001000A 6100 0000                  		bsr.w	ObjHitWallRight
0001000E 4A41                       		tst.w	d1		; has the platform hit a wall?
00010010 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010012 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010016 3168 0008 0030             		move.w	8(a0),$30(a0)
0001001C 4E75                       		rts	
0001001E                            ; ===========================================================================
0001001E                            
0001001E                            Obj52_03_End:
0001001E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010022 4E75                       		rts	
00010024                            ; ===========================================================================
00010024                            
00010024                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010024 7600                       		moveq	#0,d3
00010026 1628 0019                  		move.b	$19(a0),d3
0001002A 6100 0000                  		bsr.w	ObjHitWallRight
0001002E 4A41                       		tst.w	d1		; has the platform hit a wall?
00010030 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010032 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010036 3168 0008 0030             		move.w	8(a0),$30(a0)
0001003C 4E75                       		rts	
0001003E                            ; ===========================================================================
0001003E                            
0001003E                            Obj52_05_End:
0001003E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010042 4E75                       		rts	
00010044                            ; ===========================================================================
00010044                            
00010044                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010044 6100 D660                  		bsr.w	SpeedToPos
00010048 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
0001004E 6100 0000                  		bsr.w	ObjHitFloor
00010052 4A41                       		tst.w	d1		; has platform hit the floor?
00010054 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010058 D368 000C                  		add.w	d1,$C(a0)
0001005C 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010060 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010064                            
00010064                            locret_FFA0:
00010064 4E75                       		rts	
00010066                            ; ===========================================================================
00010066                            
00010066                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010066 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001006A 6700                       		beq.s	Obj52_07_ChkDel
0001006C 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010070                            
00010070                            Obj52_07_ChkDel:
00010070 588F                       		addq.l	#4,sp
00010072 3028 0030                  		move.w	$30(a0),d0
00010076 0240 FF80                  		andi.w	#$FF80,d0
0001007A 3238 F700                  		move.w	($FFFFF700).w,d1
0001007E 0441 0080                  		subi.w	#$80,d1
00010082 0241 FF80                  		andi.w	#$FF80,d1
00010086 9041                       		sub.w	d1,d0
00010088 0C40 0280                  		cmpi.w	#$280,d0
0001008C 6200 D67A                  		bhi.w	DeleteObject
00010090 4E75                       		rts	
00010092                            ; ===========================================================================
00010092                            
00010092                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010092 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010096 323C 0080                  		move.w	#$80,d1
0001009A 0828 0000 0022             		btst	#0,$22(a0)
000100A0 6700                       		beq.s	loc_FFE2
000100A2 4440                       		neg.w	d0
000100A4 D041                       		add.w	d1,d0
000100A6                            
000100A6                            loc_FFE2:
000100A6 3228 0032                  		move.w	$32(a0),d1
000100AA 9240                       		sub.w	d0,d1
000100AC 3141 000C                  		move.w	d1,$C(a0)
000100B0 4E75                       		rts	
000100B2                            ; ===========================================================================
000100B2                            
000100B2                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000100B2 7600                       		moveq	#0,d3
000100B4 1628 0019                  		move.b	$19(a0),d3
000100B8 D643                       		add.w	d3,d3
000100BA 7208                       		moveq	#8,d1
000100BC 0828 0000 0022             		btst	#0,$22(a0)
000100C2 6700                       		beq.s	loc_10004
000100C4 4441                       		neg.w	d1
000100C6 4443                       		neg.w	d3
000100C8                            
000100C8                            loc_10004:
000100C8 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000100CC 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000100CE 3028 0008                  		move.w	8(a0),d0
000100D2 9068 0030                  		sub.w	$30(a0),d0
000100D6 B043                       		cmp.w	d3,d0
000100D8 6700                       		beq.s	Obj52_0A_Wait
000100DA D368 0008                  		add.w	d1,8(a0)	; move platform
000100DE 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000100E4 4E75                       		rts	
000100E6                            ; ===========================================================================
000100E6                            
000100E6                            Obj52_0A_Wait:
000100E6 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000100EA 6600                       		bne.s	locret_1002E	; if time remains, branch
000100EC 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000100F2                            
000100F2                            locret_1002E:
000100F2 4E75                       		rts	
000100F4                            ; ===========================================================================
000100F4                            
000100F4                            Obj52_0A_Back:
000100F4 3028 0008                  		move.w	8(a0),d0
000100F8 9068 0030                  		sub.w	$30(a0),d0
000100FC 6700                       		beq.s	Obj52_0A_Reset
000100FE 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010102 4E75                       		rts	
00010104                            ; ===========================================================================
00010104                            
00010104                            Obj52_0A_Reset:
00010104 4268 0036                  		clr.w	$36(a0)
00010108 5328 0028                  		subq.b	#1,$28(a0)
0001010C 4E75                       		rts	
0001010E                            ; ===========================================================================
0001010E                            ; ---------------------------------------------------------------------------
0001010E                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001010E                            ; ---------------------------------------------------------------------------
0001010E                            Map_obj52:
0001010E                            	include "_maps\obj52mz.asm"
0001010E                            ; ---------------------------------------------------------------------------
0001010E                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001010E                            ; ---------------------------------------------------------------------------
0001010E 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010112 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010116 0000                       		dc.w byte_1008F-Map_obj52
00010118 01                         byte_10054:	dc.b 1
00010119 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001011E 02                         byte_1005A:	dc.b 2
0001011F F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010124 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010129 04                         byte_10065:	dc.b 4
0001012A F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001012F 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010134 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010139 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0001013E 04                         byte_1007A:	dc.b 4
0001013F F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010144 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010149 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001014E F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010153 03                         byte_1008F:	dc.b 3
00010154 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010159 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001015E F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010164 00                         		even
00010164 00                         		even
00010164                            
00010164                            ; ---------------------------------------------------------------------------
00010164                            ; Sprite mappings - moving block (LZ)
00010164                            ; ---------------------------------------------------------------------------
00010164                            Map_obj52a:
00010164                            	include "_maps\obj52lz.asm"
00010164                            ; ---------------------------------------------------------------------------
00010164                            ; Sprite mappings - moving block (LZ)
00010164                            ; ---------------------------------------------------------------------------
00010164 0000                       		dc.w byte_100A2-Map_obj52a
00010166 01                         byte_100A2:	dc.b 1
00010167 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001016C                            		even
0001016C                            		even
0001016C                            
0001016C                            ; ===========================================================================
0001016C                            ; ---------------------------------------------------------------------------
0001016C                            ; Object 55 - Basaran enemy (MZ)
0001016C                            ; ---------------------------------------------------------------------------
0001016C                            
0001016C                            Obj55:					; XREF: Obj_Index
0001016C 7000                       		moveq	#0,d0
0001016E 1028 0024                  		move.b	$24(a0),d0
00010172 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010176 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001017A                            ; ===========================================================================
0001017A 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001017C 0000                       		dc.w Obj55_Action-Obj55_Index
0001017E                            ; ===========================================================================
0001017E                            
0001017E                            Obj55_Main:				; XREF: Obj55_Index
0001017E 5428 0024                  		addq.b	#2,$24(a0)
00010182 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001018A 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010190 117C 0004 0001             		move.b	#4,1(a0)
00010196 117C 000C 0016             		move.b	#$C,$16(a0)
0001019C 117C 0002 0018             		move.b	#2,$18(a0)
000101A2 117C 000B 0020             		move.b	#$B,$20(a0)
000101A8 117C 0010 0019             		move.b	#$10,$19(a0)
000101AE                            
000101AE                            Obj55_Action:				; XREF: Obj55_Index
000101AE 7000                       		moveq	#0,d0
000101B0 1028 0025                  		move.b	$25(a0),d0
000101B4 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000101B8 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000101BC 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000101C2 6100 A634                  		bsr.w	AnimateSprite
000101C6 6000 F5AC                  		bra.w	MarkObjGone
000101CA                            ; ===========================================================================
000101CA 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000101CC 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000101CE 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000101D0 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000101D2                            ; ===========================================================================
000101D2                            
000101D2                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000101D2 343C 0080                  		move.w	#$80,d2
000101D6 6100 0000                  		bsr.w	Obj55_ChkSonic
000101DA 6400                       		bcc.s	Obj55_NoDrop
000101DC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000101E0 3140 0036                  		move.w	d0,$36(a0)
000101E4 9068 000C                  		sub.w	$C(a0),d0
000101E8 6500                       		bcs.s	Obj55_NoDrop
000101EA 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000101EE 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000101F0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000101F4 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000101F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000101FA D007                       		add.b	d7,d0
000101FC 0200 0007                  		andi.b	#7,d0
00010200 6600                       		bne.s	Obj55_NoDrop
00010202 117C 0001 001C             		move.b	#1,$1C(a0)
00010208 5428 0025                  		addq.b	#2,$25(a0)
0001020C                            
0001020C                            Obj55_NoDrop:
0001020C 4E75                       		rts	
0001020E                            ; ===========================================================================
0001020E                            
0001020E                            Obj55_DropFly:				; XREF: Obj55_Index2
0001020E 6100 D496                  		bsr.w	SpeedToPos
00010212 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010218 343C 0080                  		move.w	#$80,d2
0001021C 6100 0000                  		bsr.w	Obj55_ChkSonic
00010220 3028 0036                  		move.w	$36(a0),d0
00010224 9068 000C                  		sub.w	$C(a0),d0
00010228 6500                       		bcs.s	Obj55_ChkDel
0001022A 0C40 0010                  		cmpi.w	#$10,d0
0001022E 6400                       		bcc.s	locret_10180
00010230 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010234 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
0001023A 117C 0002 001C             		move.b	#2,$1C(a0)
00010240 5428 0025                  		addq.b	#2,$25(a0)
00010244                            
00010244                            locret_10180:
00010244 4E75                       		rts	
00010246                            ; ===========================================================================
00010246                            
00010246                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010246 4A28 0001                  		tst.b	1(a0)
0001024A 6A00 D4BC                  		bpl.w	DeleteObject
0001024E 4E75                       		rts	
00010250                            ; ===========================================================================
00010250                            
00010250                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010250 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010254 0200 000F                  		andi.b	#$F,d0
00010258 6600                       		bne.s	loc_101A0
0001025A 303C 00C0                  		move.w	#$C0,d0
0001025E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flapping sound
00010264                            
00010264                            loc_101A0:
00010264 6100 D440                  		bsr.w	SpeedToPos
00010268 3038 D008                  		move.w	($FFFFD008).w,d0
0001026C 9068 0008                  		sub.w	8(a0),d0
00010270 6400                       		bcc.s	loc_101B0
00010272 4440                       		neg.w	d0
00010274                            
00010274                            loc_101B0:
00010274 0C40 0080                  		cmpi.w	#$80,d0
00010278 6500                       		bcs.s	locret_101C6
0001027A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001027E D007                       		add.b	d7,d0
00010280 0200 0007                  		andi.b	#7,d0
00010284 6600                       		bne.s	locret_101C6
00010286 5428 0025                  		addq.b	#2,$25(a0)
0001028A                            
0001028A                            locret_101C6:
0001028A 4E75                       		rts	
0001028C                            ; ===========================================================================
0001028C                            
0001028C                            Obj55_FlyUp:				; XREF: Obj55_Index2
0001028C 6100 D418                  		bsr.w	SpeedToPos
00010290 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010296 6100 0000                  		bsr.w	ObjHitCeiling
0001029A 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001029C 6A00                       		bpl.s	locret_101F4	; if not, branch
0001029E 9368 000C                  		sub.w	d1,$C(a0)
000102A2 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000102A8 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
000102AC 4268 0012                  		clr.w	$12(a0)
000102B0 4228 001C                  		clr.b	$1C(a0)
000102B4 4228 0025                  		clr.b	$25(a0)
000102B8                            
000102B8                            locret_101F4:
000102B8 4E75                       		rts	
000102BA                            ; ===========================================================================
000102BA                            
000102BA                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000102BA 323C 0100                  		move.w	#$100,d1
000102BE 08E8 0000 0022             		bset	#0,$22(a0)
000102C4 3038 D008                  		move.w	($FFFFD008).w,d0
000102C8 9068 0008                  		sub.w	8(a0),d0
000102CC 6400                       		bcc.s	loc_10214
000102CE 4440                       		neg.w	d0
000102D0 4441                       		neg.w	d1
000102D2 08A8 0000 0022             		bclr	#0,$22(a0)
000102D8                            
000102D8                            loc_10214:
000102D8 B042                       		cmp.w	d2,d0
000102DA 4E75                       		rts	
000102DC                            ; ===========================================================================
000102DC 6100 D3C8                  		bsr.w	SpeedToPos
000102E0 6100 D3EA                  		bsr.w	DisplaySprite
000102E4 4A28 0001                  		tst.b	1(a0)
000102E8 6A00 D41E                  		bpl.w	DeleteObject
000102EC 4E75                       		rts	
000102EE                            ; ===========================================================================
000102EE                            Ani_obj55:
000102EE                            	include "_anim\obj55.asm"
000102EE                            ; ---------------------------------------------------------------------------
000102EE                            ; Animation script - Basaran enemy
000102EE                            ; ---------------------------------------------------------------------------
000102EE 0000                       		dc.w byte_10230-Ani_obj55
000102F0 0000                       		dc.w byte_10234-Ani_obj55
000102F2 0000                       		dc.w byte_10238-Ani_obj55
000102F4 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000102F8 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000102FC 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010302                            		even
00010302                            		even
00010302                            
00010302                            ; ---------------------------------------------------------------------------
00010302                            ; Sprite mappings - Basaran enemy (MZ)
00010302                            ; ---------------------------------------------------------------------------
00010302                            Map_obj55:
00010302                            	include "_maps\obj55.asm"
00010302                            ; ---------------------------------------------------------------------------
00010302                            ; Sprite mappings - Basaran enemy (MZ)
00010302                            ; ---------------------------------------------------------------------------
00010302 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010306 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
0001030A 01                         byte_10246:	dc.b 1
0001030B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010310 03                         byte_1024C:	dc.b 3
00010311 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010316 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
0001031B 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010320 04                         byte_1025C:	dc.b 4
00010321 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010326 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
0001032B 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010330 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010335 04                         byte_10271:	dc.b 4
00010336 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
0001033B 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010340 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010345 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
0001034A                            		even
0001034A                            		even
0001034A                            
0001034A                            ; ===========================================================================
0001034A                            ; ---------------------------------------------------------------------------
0001034A                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
0001034A                            ; ---------------------------------------------------------------------------
0001034A                            
0001034A                            Obj56:					; XREF: Obj_Index
0001034A 7000                       		moveq	#0,d0
0001034C 1028 0024                  		move.b	$24(a0),d0
00010350 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010354 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010358                            ; ===========================================================================
00010358 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
0001035A 0000                       		dc.w Obj56_Action-Obj56_Index
0001035C                            
0001035C 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
0001035E 2020                       		dc.b  $20, $20
00010360 1020                       		dc.b  $10, $20
00010362 201A                       		dc.b  $20, $1A
00010364 1027                       		dc.b  $10, $27
00010366 1010                       		dc.b  $10, $10
00010368 0820                       		dc.b	8, $20
0001036A 4010                       		dc.b  $40, $10
0001036C                            ; ===========================================================================
0001036C                            
0001036C                            Obj56_Main:				; XREF: Obj56_Index
0001036C 5428 0024                  		addq.b	#2,$24(a0)
00010370 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010378 317C 4000 0002             		move.w	#$4000,2(a0)
0001037E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010384 6600                       		bne.s	loc_102C8
00010386 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
0001038C                            
0001038C                            loc_102C8:
0001038C 117C 0004 0001             		move.b	#4,1(a0)
00010392 117C 0003 0018             		move.b	#3,$18(a0)
00010398 7000                       		moveq	#0,d0
0001039A 1028 0028                  		move.b	$28(a0),d0
0001039E E648                       		lsr.w	#3,d0
000103A0 0240 000E                  		andi.w	#$E,d0
000103A4 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
000103A8 115A 0019                  		move.b	(a2)+,$19(a0)
000103AC 1152 0016                  		move.b	(a2),$16(a0)
000103B0 E248                       		lsr.w	#1,d0
000103B2 1140 001A                  		move.b	d0,$1A(a0)
000103B6 3168 0008 0034             		move.w	8(a0),$34(a0)
000103BC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000103C2 7000                       		moveq	#0,d0
000103C4 1012                       		move.b	(a2),d0
000103C6 D040                       		add.w	d0,d0
000103C8 3140 003A                  		move.w	d0,$3A(a0)
000103CC 7000                       		moveq	#0,d0
000103CE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000103D4 6700                       		beq.s	loc_10332
000103D6 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
000103DA 0240 000F                  		andi.w	#$F,d0
000103DE 5140                       		subq.w	#8,d0
000103E0 6500                       		bcs.s	loc_10332
000103E2 E548                       		lsl.w	#2,d0
000103E4 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
000103E8 45F2 0000                  		lea	(a2,d0.w),a2
000103EC 4A52                       		tst.w	(a2)
000103EE 6A00                       		bpl.s	loc_10332
000103F0 0868 0000 0022             		bchg	#0,$22(a0)
000103F6                            
000103F6                            loc_10332:
000103F6 1028 0028                  		move.b	$28(a0),d0
000103FA 6A00                       		bpl.s	Obj56_Action
000103FC 0200 000F                  		andi.b	#$F,d0
00010400 1140 003C                  		move.b	d0,$3C(a0)
00010404 117C 0005 0028             		move.b	#5,$28(a0)
0001040A 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010410 6600                       		bne.s	Obj56_ChkGone
00010412 117C 000C 0028             		move.b	#$C,$28(a0)
00010418 317C 0080 003A             		move.w	#$80,$3A(a0)
0001041E                            
0001041E                            Obj56_ChkGone:
0001041E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010422 7000                       		moveq	#0,d0
00010424 1028 0023                  		move.b	$23(a0),d0
00010428 6700                       		beq.s	Obj56_Action
0001042A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010430 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010436 6700                       		beq.s	Obj56_Action
00010438 5228 0028                  		addq.b	#1,$28(a0)
0001043C 4268 003A                  		clr.w	$3A(a0)
00010440                            
00010440                            Obj56_Action:				; XREF: Obj56_Index
00010440 3F28 0008                  		move.w	8(a0),-(sp)
00010444 7000                       		moveq	#0,d0
00010446 1028 0028                  		move.b	$28(a0),d0	; get object type
0001044A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001044E D040                       		add.w	d0,d0
00010450 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010454 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010458 381F                       		move.w	(sp)+,d4
0001045A 4A28 0001                  		tst.b	1(a0)
0001045E 6A00                       		bpl.s	Obj56_ChkDel
00010460 7200                       		moveq	#0,d1
00010462 1228 0019                  		move.b	$19(a0),d1
00010466 0641 000B                  		addi.w	#$B,d1
0001046A 7400                       		moveq	#0,d2
0001046C 1428 0016                  		move.b	$16(a0),d2
00010470 3602                       		move.w	d2,d3
00010472 5243                       		addq.w	#1,d3
00010474 6100 F626                  		bsr.w	SolidObject
00010478                            
00010478                            Obj56_ChkDel:
00010478 3028 0034                  		move.w	$34(a0),d0
0001047C 0240 FF80                  		andi.w	#$FF80,d0
00010480 3238 F700                  		move.w	($FFFFF700).w,d1
00010484 0441 0080                  		subi.w	#$80,d1
00010488 0241 FF80                  		andi.w	#$FF80,d1
0001048C 9041                       		sub.w	d1,d0
0001048E 0C40 0280                  		cmpi.w	#$280,d0
00010492 6200 D274                  		bhi.w	DeleteObject
00010496 6000 D234                  		bra.w	DisplaySprite
0001049A                            ; ===========================================================================
0001049A 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0001049E 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
000104A2 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
000104A6 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
000104AA 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
000104AE 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
000104B2 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
000104B6                            ; ===========================================================================
000104B6                            
000104B6                            Obj56_Type00:				; XREF: Obj56_TypeIndex
000104B6 4E75                       		rts	
000104B8                            ; ===========================================================================
000104B8                            
000104B8                            Obj56_Type01:				; XREF: Obj56_TypeIndex
000104B8 323C 0040                  		move.w	#$40,d1
000104BC 7000                       		moveq	#0,d0
000104BE 1038 FE68                  		move.b	($FFFFFE68).w,d0
000104C2 6000                       		bra.s	Obj56_Move_LR
000104C4                            ; ===========================================================================
000104C4                            
000104C4                            Obj56_Type02:				; XREF: Obj56_TypeIndex
000104C4 323C 0080                  		move.w	#$80,d1
000104C8 7000                       		moveq	#0,d0
000104CA 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000104CE                            
000104CE                            Obj56_Move_LR:
000104CE 0828 0000 0022             		btst	#0,$22(a0)
000104D4 6700                       		beq.s	loc_10416
000104D6 4440                       		neg.w	d0
000104D8 D041                       		add.w	d1,d0
000104DA                            
000104DA                            loc_10416:
000104DA 3228 0034                  		move.w	$34(a0),d1
000104DE 9240                       		sub.w	d0,d1
000104E0 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000104E4 4E75                       		rts	
000104E6                            ; ===========================================================================
000104E6                            
000104E6                            Obj56_Type03:				; XREF: Obj56_TypeIndex
000104E6 323C 0040                  		move.w	#$40,d1
000104EA 7000                       		moveq	#0,d0
000104EC 1038 FE68                  		move.b	($FFFFFE68).w,d0
000104F0 6000                       		bra.s	Obj56_Move_UD
000104F2                            ; ===========================================================================
000104F2                            
000104F2                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000104F2 323C 0080                  		move.w	#$80,d1
000104F6 7000                       		moveq	#0,d0
000104F8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000104FC                            
000104FC                            Obj56_Move_UD:
000104FC 0828 0000 0022             		btst	#0,$22(a0)
00010502 6700                       		beq.s	loc_10444
00010504 4440                       		neg.w	d0
00010506 D041                       		add.w	d1,d0
00010508                            
00010508                            loc_10444:
00010508 3228 0030                  		move.w	$30(a0),d1
0001050C 9240                       		sub.w	d0,d1
0001050E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010512 4E75                       		rts	
00010514                            ; ===========================================================================
00010514                            
00010514                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010514 4A28 0038                  		tst.b	$38(a0)
00010518 6600                       		bne.s	loc_104A4
0001051A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010520 6600                       		bne.s	loc_1047A	; if not, branch
00010522 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010528 6600                       		bne.s	loc_1047A
0001052A 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001052E 3038 D008                  		move.w	($FFFFD008).w,d0
00010532 B068 0008                  		cmp.w	8(a0),d0
00010536 6400                       		bcc.s	loc_1047A
00010538 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
0001053E                            
0001053E                            loc_1047A:
0001053E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010542 7000                       		moveq	#0,d0
00010544 1028 003C                  		move.b	$3C(a0),d0
00010548 0832 0000 0000             		btst	#0,(a2,d0.w)
0001054E 6700                       		beq.s	loc_104AE
00010550 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010556 6600                       		bne.s	loc_1049E	; if not, branch
00010558 0C00 0003                  		cmpi.b	#3,d0
0001055C 6600                       		bne.s	loc_1049E
0001055E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010562                            
00010562                            loc_1049E:
00010562 117C 0001 0038             		move.b	#1,$38(a0)
00010568                            
00010568                            loc_104A4:
00010568 4A68 003A                  		tst.w	$3A(a0)
0001056C 6700                       		beq.s	loc_104C8
0001056E 5568 003A                  		subq.w	#2,$3A(a0)
00010572                            
00010572                            loc_104AE:
00010572 3028 003A                  		move.w	$3A(a0),d0
00010576 0828 0000 0022             		btst	#0,$22(a0)
0001057C 6700                       		beq.s	loc_104BC
0001057E 4440                       		neg.w	d0
00010580                            
00010580                            loc_104BC:
00010580 3228 0030                  		move.w	$30(a0),d1
00010584 D240                       		add.w	d0,d1
00010586 3141 000C                  		move.w	d1,$C(a0)
0001058A 4E75                       		rts	
0001058C                            ; ===========================================================================
0001058C                            
0001058C                            loc_104C8:
0001058C 5228 0028                  		addq.b	#1,$28(a0)
00010590 4228 0038                  		clr.b	$38(a0)
00010594 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010598 7000                       		moveq	#0,d0
0001059A 1028 0023                  		move.b	$23(a0),d0
0001059E 67D2                       		beq.s	loc_104AE
000105A0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000105A6 60CA                       		bra.s	loc_104AE
000105A8                            ; ===========================================================================
000105A8                            
000105A8                            Obj56_Type06:				; XREF: Obj56_TypeIndex
000105A8 4A28 0038                  		tst.b	$38(a0)
000105AC 6600                       		bne.s	loc_10500
000105AE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000105B2 7000                       		moveq	#0,d0
000105B4 1028 003C                  		move.b	$3C(a0),d0
000105B8 4A32 0000                  		tst.b	(a2,d0.w)
000105BC 6A00                       		bpl.s	loc_10512
000105BE 117C 0001 0038             		move.b	#1,$38(a0)
000105C4                            
000105C4                            loc_10500:
000105C4 7000                       		moveq	#0,d0
000105C6 1028 0016                  		move.b	$16(a0),d0
000105CA D040                       		add.w	d0,d0
000105CC B068 003A                  		cmp.w	$3A(a0),d0
000105D0 6700                       		beq.s	loc_1052C
000105D2 5468 003A                  		addq.w	#2,$3A(a0)
000105D6                            
000105D6                            loc_10512:
000105D6 3028 003A                  		move.w	$3A(a0),d0
000105DA 0828 0000 0022             		btst	#0,$22(a0)
000105E0 6700                       		beq.s	loc_10520
000105E2 4440                       		neg.w	d0
000105E4                            
000105E4                            loc_10520:
000105E4 3228 0030                  		move.w	$30(a0),d1
000105E8 D240                       		add.w	d0,d1
000105EA 3141 000C                  		move.w	d1,$C(a0)
000105EE 4E75                       		rts	
000105F0                            ; ===========================================================================
000105F0                            
000105F0                            loc_1052C:
000105F0 5328 0028                  		subq.b	#1,$28(a0)
000105F4 4228 0038                  		clr.b	$38(a0)
000105F8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000105FC 7000                       		moveq	#0,d0
000105FE 1028 0023                  		move.b	$23(a0),d0
00010602 67D2                       		beq.s	loc_10512
00010604 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001060A 60CA                       		bra.s	loc_10512
0001060C                            ; ===========================================================================
0001060C                            
0001060C                            Obj56_Type07:				; XREF: Obj56_TypeIndex
0001060C 4A28 0038                  		tst.b	$38(a0)
00010610 6600                       		bne.s	loc_1055E
00010612 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010616 6700                       		beq.s	locret_10578
00010618 117C 0001 0038             		move.b	#1,$38(a0)
0001061E 4268 003A                  		clr.w	$3A(a0)
00010622                            
00010622                            loc_1055E:
00010622 5268 0008                  		addq.w	#1,8(a0)
00010626 3168 0008 0034             		move.w	8(a0),$34(a0)
0001062C 5268 003A                  		addq.w	#1,$3A(a0)
00010630 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010636 6600                       		bne.s	locret_10578
00010638 4228 0028                  		clr.b	$28(a0)
0001063C                            
0001063C                            locret_10578:
0001063C 4E75                       		rts	
0001063E                            ; ===========================================================================
0001063E                            
0001063E                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
0001063E 4A28 0038                  		tst.b	$38(a0)
00010642 6600                       		bne.s	loc_10598
00010644 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010648 7000                       		moveq	#0,d0
0001064A 1028 003C                  		move.b	$3C(a0),d0
0001064E 0832 0000 0000             		btst	#0,(a2,d0.w)
00010654 6700                       		beq.s	loc_105A2
00010656 117C 0001 0038             		move.b	#1,$38(a0)
0001065C                            
0001065C                            loc_10598:
0001065C 4A68 003A                  		tst.w	$3A(a0)
00010660 6700                       		beq.s	loc_105C0
00010662 5568 003A                  		subq.w	#2,$3A(a0)
00010666                            
00010666                            loc_105A2:
00010666 3028 003A                  		move.w	$3A(a0),d0
0001066A 0828 0000 0022             		btst	#0,$22(a0)
00010670 6700                       		beq.s	loc_105B4
00010672 4440                       		neg.w	d0
00010674 0640 0080                  		addi.w	#$80,d0
00010678                            
00010678                            loc_105B4:
00010678 3228 0034                  		move.w	$34(a0),d1
0001067C D240                       		add.w	d0,d1
0001067E 3141 0008                  		move.w	d1,8(a0)
00010682 4E75                       		rts	
00010684                            ; ===========================================================================
00010684                            
00010684                            loc_105C0:
00010684 5228 0028                  		addq.b	#1,$28(a0)
00010688 4228 0038                  		clr.b	$38(a0)
0001068C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010690 7000                       		moveq	#0,d0
00010692 1028 0023                  		move.b	$23(a0),d0
00010696 67CE                       		beq.s	loc_105A2
00010698 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001069E 60C6                       		bra.s	loc_105A2
000106A0                            ; ===========================================================================
000106A0                            
000106A0                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
000106A0 4A28 0038                  		tst.b	$38(a0)
000106A4 6600                       		bne.s	loc_105F8
000106A6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000106AA 7000                       		moveq	#0,d0
000106AC 1028 003C                  		move.b	$3C(a0),d0
000106B0 4A32 0000                  		tst.b	(a2,d0.w)
000106B4 6A00                       		bpl.s	loc_10606
000106B6 117C 0001 0038             		move.b	#1,$38(a0)
000106BC                            
000106BC                            loc_105F8:
000106BC 303C 0080                  		move.w	#$80,d0
000106C0 B068 003A                  		cmp.w	$3A(a0),d0
000106C4 6700                       		beq.s	loc_10624
000106C6 5468 003A                  		addq.w	#2,$3A(a0)
000106CA                            
000106CA                            loc_10606:
000106CA 3028 003A                  		move.w	$3A(a0),d0
000106CE 0828 0000 0022             		btst	#0,$22(a0)
000106D4 6700                       		beq.s	loc_10618
000106D6 4440                       		neg.w	d0
000106D8 0640 0080                  		addi.w	#$80,d0
000106DC                            
000106DC                            loc_10618:
000106DC 3228 0034                  		move.w	$34(a0),d1
000106E0 D240                       		add.w	d0,d1
000106E2 3141 0008                  		move.w	d1,8(a0)
000106E6 4E75                       		rts	
000106E8                            ; ===========================================================================
000106E8                            
000106E8                            loc_10624:
000106E8 5328 0028                  		subq.b	#1,$28(a0)
000106EC 4228 0038                  		clr.b	$38(a0)
000106F0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000106F4 7000                       		moveq	#0,d0
000106F6 1028 0023                  		move.b	$23(a0),d0
000106FA 67CE                       		beq.s	loc_10606
000106FC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010702 60C6                       		bra.s	loc_10606
00010704                            ; ===========================================================================
00010704                            
00010704                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010704 323C 0010                  		move.w	#$10,d1
00010708 7000                       		moveq	#0,d0
0001070A 1038 FE88                  		move.b	($FFFFFE88).w,d0
0001070E E248                       		lsr.w	#1,d0
00010710 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010714 6000                       		bra.s	Obj56_Move_Sqr
00010716                            ; ===========================================================================
00010716                            
00010716                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010716 323C 0030                  		move.w	#$30,d1
0001071A 7000                       		moveq	#0,d0
0001071C 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010720 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010724 6000                       		bra.s	Obj56_Move_Sqr
00010726                            ; ===========================================================================
00010726                            
00010726                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010726 323C 0050                  		move.w	#$50,d1
0001072A 7000                       		moveq	#0,d0
0001072C 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010730 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010734 6000                       		bra.s	Obj56_Move_Sqr
00010736                            ; ===========================================================================
00010736                            
00010736                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010736 323C 0070                  		move.w	#$70,d1
0001073A 7000                       		moveq	#0,d0
0001073C 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010740 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010744                            
00010744                            Obj56_Move_Sqr:
00010744 4A43                       		tst.w	d3
00010746 6600                       		bne.s	loc_1068E
00010748 5228 0022                  		addq.b	#1,$22(a0)
0001074C 0228 0003 0022             		andi.b	#3,$22(a0)
00010752                            
00010752                            loc_1068E:
00010752 1428 0022                  		move.b	$22(a0),d2
00010756 0202 0003                  		andi.b	#3,d2
0001075A 6600                       		bne.s	loc_106AE
0001075C 9041                       		sub.w	d1,d0
0001075E D068 0034                  		add.w	$34(a0),d0
00010762 3140 0008                  		move.w	d0,8(a0)
00010766 4441                       		neg.w	d1
00010768 D268 0030                  		add.w	$30(a0),d1
0001076C 3141 000C                  		move.w	d1,$C(a0)
00010770 4E75                       		rts	
00010772                            ; ===========================================================================
00010772                            
00010772                            loc_106AE:
00010772 5302                       		subq.b	#1,d2
00010774 6600                       		bne.s	loc_106CC
00010776 5341                       		subq.w	#1,d1
00010778 9041                       		sub.w	d1,d0
0001077A 4440                       		neg.w	d0
0001077C D068 0030                  		add.w	$30(a0),d0
00010780 3140 000C                  		move.w	d0,$C(a0)
00010784 5241                       		addq.w	#1,d1
00010786 D268 0034                  		add.w	$34(a0),d1
0001078A 3141 0008                  		move.w	d1,8(a0)
0001078E 4E75                       		rts	
00010790                            ; ===========================================================================
00010790                            
00010790                            loc_106CC:
00010790 5302                       		subq.b	#1,d2
00010792 6600                       		bne.s	loc_106EA
00010794 5341                       		subq.w	#1,d1
00010796 9041                       		sub.w	d1,d0
00010798 4440                       		neg.w	d0
0001079A D068 0034                  		add.w	$34(a0),d0
0001079E 3140 0008                  		move.w	d0,8(a0)
000107A2 5241                       		addq.w	#1,d1
000107A4 D268 0030                  		add.w	$30(a0),d1
000107A8 3141 000C                  		move.w	d1,$C(a0)
000107AC 4E75                       		rts	
000107AE                            ; ===========================================================================
000107AE                            
000107AE                            loc_106EA:
000107AE 9041                       		sub.w	d1,d0
000107B0 D068 0030                  		add.w	$30(a0),d0
000107B4 3140 000C                  		move.w	d0,$C(a0)
000107B8 4441                       		neg.w	d1
000107BA D268 0034                  		add.w	$34(a0),d1
000107BE 3141 0008                  		move.w	d1,8(a0)
000107C2 4E75                       		rts	
000107C4                            ; ===========================================================================
000107C4                            ; ---------------------------------------------------------------------------
000107C4                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000107C4                            ; ---------------------------------------------------------------------------
000107C4                            Map_obj56:
000107C4                            	include "_maps\obj56.asm"
000107C4                            ; ---------------------------------------------------------------------------
000107C4                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000107C4                            ; ---------------------------------------------------------------------------
000107C4 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000107C8 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000107CC 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000107D0 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000107D4 01                         byte_10710:	dc.b 1
000107D5 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000107DA 04                         byte_10716:	dc.b 4
000107DB E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
000107E0 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000107E5 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
000107EA 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
000107EF 02                         byte_1072B:	dc.b 2
000107F0 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
000107F5 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000107FA 04                         byte_10736:	dc.b 4
000107FB E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010800 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010805 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001080A 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0001080F 03                         byte_1074B:	dc.b 3
00010810 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010815 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001081A 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001081F 01                         byte_1075B:	dc.b 1
00010820 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010825 02                         byte_10761:	dc.b 2
00010826 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001082B 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010830 04                         byte_1076C:	dc.b 4
00010831 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010836 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001083B F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010840 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010846 00                         		even
00010846 00                         		even
00010846                            
00010846                            ; ===========================================================================
00010846                            ; ---------------------------------------------------------------------------
00010846                            ; Object 57 - spiked balls (SYZ, LZ)
00010846                            ; ---------------------------------------------------------------------------
00010846                            
00010846                            Obj57:					; XREF: Obj_Index
00010846 7000                       		moveq	#0,d0
00010848 1028 0024                  		move.b	$24(a0),d0
0001084C 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010850 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010854                            ; ===========================================================================
00010854 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010856 0000                       		dc.w Obj57_Move-Obj57_Index
00010858 0000                       		dc.w Obj57_Display-Obj57_Index
0001085A                            ; ===========================================================================
0001085A                            
0001085A                            Obj57_Main:				; XREF: Obj57_Index
0001085A 5428 0024                  		addq.b	#2,$24(a0)
0001085E 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010866 317C 03BA 0002             		move.w	#$3BA,2(a0)
0001086C 117C 0004 0001             		move.b	#4,1(a0)
00010872 117C 0004 0018             		move.b	#4,$18(a0)
00010878 117C 0008 0019             		move.b	#8,$19(a0)
0001087E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010884 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001088A 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010890 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010896 6600                       		bne.s	loc_107E8
00010898 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001089E 317C 0310 0002             		move.w	#$310,2(a0)
000108A4 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000108AC                            
000108AC                            loc_107E8:
000108AC 1228 0028                  		move.b	$28(a0),d1	; get object type
000108B0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000108B4 4881                       		ext.w	d1
000108B6 E741                       		asl.w	#3,d1		; multiply by 8
000108B8 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000108BC 1028 0022                  		move.b	$22(a0),d0
000108C0 E418                       		ror.b	#2,d0
000108C2 0200 00C0                  		andi.b	#-$40,d0
000108C6 1140 0026                  		move.b	d0,$26(a0)
000108CA 45E8 0029                  		lea	$29(a0),a2
000108CE 1228 0028                  		move.b	$28(a0),d1	; get object type
000108D2 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000108D6 14FC 0000                  		move.b	#0,(a2)+
000108DA 3601                       		move.w	d1,d3
000108DC E94B                       		lsl.w	#4,d3
000108DE 1143 003C                  		move.b	d3,$3C(a0)
000108E2 5341                       		subq.w	#1,d1		; set chain length (type-1)
000108E4 6500                       		bcs.s	loc_10894
000108E6 0828 0003 0028             		btst	#3,$28(a0)
000108EC 6700                       		beq.s	Obj57_MakeChain
000108EE 5341                       		subq.w	#1,d1
000108F0 6500                       		bcs.s	loc_10894
000108F2                            
000108F2                            Obj57_MakeChain:
000108F2 6100 D25E                  		bsr.w	SingleObjLoad
000108F6 6600                       		bne.s	loc_10894
000108F8 5228 0029                  		addq.b	#1,$29(a0)
000108FC 3A09                       		move.w	a1,d5
000108FE 0445 D000                  		subi.w	#-$3000,d5
00010902 EC4D                       		lsr.w	#6,d5
00010904 0245 007F                  		andi.w	#$7F,d5
00010908 14C5                       		move.b	d5,(a2)+
0001090A 137C 0004 0024             		move.b	#4,$24(a1)
00010910 1290                       		move.b	0(a0),0(a1)
00010912 2368 0004 0004             		move.l	4(a0),4(a1)
00010918 3368 0002 0002             		move.w	2(a0),2(a1)
0001091E 1368 0001 0001             		move.b	1(a0),1(a1)
00010924 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001092A 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010930 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010936 0403 0010                  		subi.b	#$10,d3
0001093A 1343 003C                  		move.b	d3,$3C(a1)
0001093E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010944 6600                       		bne.s	loc_10890
00010946 4A03                       		tst.b	d3
00010948 6600                       		bne.s	loc_10890
0001094A 137C 0002 001A             		move.b	#2,$1A(a1)
00010950                            
00010950                            loc_10890:
00010950 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010954                            
00010954                            loc_10894:
00010954 3A08                       		move.w	a0,d5
00010956 0445 D000                  		subi.w	#-$3000,d5
0001095A EC4D                       		lsr.w	#6,d5
0001095C 0245 007F                  		andi.w	#$7F,d5
00010960 14C5                       		move.b	d5,(a2)+
00010962 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010968 6600                       		bne.s	Obj57_Move
0001096A 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010970 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010976                            
00010976                            Obj57_Move:				; XREF: Obj57_Index
00010976 6100 0000                  		bsr.w	Obj57_MoveSub
0001097A 6000 0000                  		bra.w	Obj57_ChkDel
0001097E                            ; ===========================================================================
0001097E                            
0001097E                            Obj57_MoveSub:				; XREF: Obj57_Move
0001097E 3028 003E                  		move.w	$3E(a0),d0
00010982 D168 0026                  		add.w	d0,$26(a0)
00010986 1028 0026                  		move.b	$26(a0),d0
0001098A 4EB9 0000 29DA             		jsr	(CalcSine).l
00010990 3428 0038                  		move.w	$38(a0),d2
00010994 3628 003A                  		move.w	$3A(a0),d3
00010998 45E8 0029                  		lea	$29(a0),a2
0001099C 7C00                       		moveq	#0,d6
0001099E 1C1A                       		move.b	(a2)+,d6
000109A0                            
000109A0                            Obj57_MoveLoop:
000109A0 7800                       		moveq	#0,d4
000109A2 181A                       		move.b	(a2)+,d4
000109A4 ED4C                       		lsl.w	#6,d4
000109A6 0684 00FF D000             		addi.l	#$FFD000,d4
000109AC 2244                       		movea.l	d4,a1
000109AE 7800                       		moveq	#0,d4
000109B0 1829 003C                  		move.b	$3C(a1),d4
000109B4 2A04                       		move.l	d4,d5
000109B6 C9C0                       		muls.w	d0,d4
000109B8 E084                       		asr.l	#8,d4
000109BA CBC1                       		muls.w	d1,d5
000109BC E085                       		asr.l	#8,d5
000109BE D842                       		add.w	d2,d4
000109C0 DA43                       		add.w	d3,d5
000109C2 3344 000C                  		move.w	d4,$C(a1)
000109C6 3345 0008                  		move.w	d5,8(a1)
000109CA 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000109CE 4E75                       		rts	
000109D0                            ; ===========================================================================
000109D0                            
000109D0                            Obj57_ChkDel:				; XREF: Obj57_Move
000109D0 3028 003A                  		move.w	$3A(a0),d0
000109D4 0240 FF80                  		andi.w	#$FF80,d0
000109D8 3238 F700                  		move.w	($FFFFF700).w,d1
000109DC 0441 0080                  		subi.w	#$80,d1
000109E0 0241 FF80                  		andi.w	#$FF80,d1
000109E4 9041                       		sub.w	d1,d0
000109E6 0C40 0280                  		cmpi.w	#$280,d0
000109EA 6200 0000                  		bhi.w	Obj57_Delete
000109EE 6000 CCDC                  		bra.w	DisplaySprite
000109F2                            ; ===========================================================================
000109F2                            
000109F2                            Obj57_Delete:				; XREF: Obj57_ChkDel
000109F2 7400                       		moveq	#0,d2
000109F4 45E8 0029                  		lea	$29(a0),a2
000109F8 141A                       		move.b	(a2)+,d2
000109FA                            
000109FA                            Obj57_DelLoop:
000109FA 7000                       		moveq	#0,d0
000109FC 101A                       		move.b	(a2)+,d0
000109FE ED48                       		lsl.w	#6,d0
00010A00 0680 00FF D000             		addi.l	#$FFD000,d0
00010A06 2240                       		movea.l	d0,a1
00010A08 6100 CD00                  		bsr.w	DeleteObject2
00010A0C 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010A10                            
00010A10 4E75                       		rts	
00010A12                            ; ===========================================================================
00010A12                            
00010A12                            Obj57_Display:				; XREF: Obj57_Index
00010A12 6000 CCB8                  		bra.w	DisplaySprite
00010A16                            ; ===========================================================================
00010A16                            ; ---------------------------------------------------------------------------
00010A16                            ; Sprite mappings - chain of spiked balls (SYZ)
00010A16                            ; ---------------------------------------------------------------------------
00010A16                            Map_obj57:
00010A16                            	include "_maps\obj57syz.asm"
00010A16                            ; ---------------------------------------------------------------------------
00010A16                            ; Sprite mappings - chain of spiked balls (SYZ)
00010A16                            ; ---------------------------------------------------------------------------
00010A16 0000                       		dc.w byte_10958-Map_obj57
00010A18 01                         byte_10958:	dc.b 1
00010A19 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010A1E                            		even
00010A1E                            		even
00010A1E                            
00010A1E                            ; ---------------------------------------------------------------------------
00010A1E                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010A1E                            ; ---------------------------------------------------------------------------
00010A1E                            Map_obj57a:
00010A1E                            	include "_maps\obj57lz.asm"
00010A1E                            ; ---------------------------------------------------------------------------
00010A1E                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010A1E                            ; ---------------------------------------------------------------------------
00010A1E 0000                       		dc.w byte_10964-Map_obj57a
00010A20 0000                       		dc.w byte_1096A-Map_obj57a
00010A22 0000                       		dc.w byte_10970-Map_obj57a
00010A24 01                         byte_10964:	dc.b 1
00010A25 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010A2A 01                         byte_1096A:	dc.b 1
00010A2B F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010A30 01                         byte_10970:	dc.b 1
00010A31 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010A36                            		even
00010A36                            		even
00010A36                            
00010A36                            ; ===========================================================================
00010A36                            ; ---------------------------------------------------------------------------
00010A36                            ; Object 58 - giant spiked balls (SYZ)
00010A36                            ; ---------------------------------------------------------------------------
00010A36                            
00010A36                            Obj58:					; XREF: Obj_Index
00010A36 7000                       		moveq	#0,d0
00010A38 1028 0024                  		move.b	$24(a0),d0
00010A3C 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010A40 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010A44                            ; ===========================================================================
00010A44 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010A46 0000                       		dc.w Obj58_Move-Obj58_Index
00010A48                            ; ===========================================================================
00010A48                            
00010A48                            Obj58_Main:				; XREF: Obj58_Index
00010A48 5428 0024                  		addq.b	#2,$24(a0)
00010A4C 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010A54 317C 0396 0002             		move.w	#$396,2(a0)
00010A5A 117C 0004 0001             		move.b	#4,1(a0)
00010A60 117C 0004 0018             		move.b	#4,$18(a0)
00010A66 117C 0018 0019             		move.b	#$18,$19(a0)
00010A6C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010A72 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010A78 117C 0086 0020             		move.b	#$86,$20(a0)
00010A7E 1228 0028                  		move.b	$28(a0),d1	; get object type
00010A82 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010A86 4881                       		ext.w	d1
00010A88 E741                       		asl.w	#3,d1		; multiply by 8
00010A8A 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010A8E 1028 0022                  		move.b	$22(a0),d0
00010A92 E418                       		ror.b	#2,d0
00010A94 0200 00C0                  		andi.b	#$C0,d0
00010A98 1140 0026                  		move.b	d0,$26(a0)
00010A9C 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010AA2                            
00010AA2                            Obj58_Move:				; XREF: Obj58_Index
00010AA2 7000                       		moveq	#0,d0
00010AA4 1028 0028                  		move.b	$28(a0),d0	; get object type
00010AA8 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010AAC D040                       		add.w	d0,d0
00010AAE 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010AB2 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010AB6 3028 003A                  		move.w	$3A(a0),d0
00010ABA 0240 FF80                  		andi.w	#$FF80,d0
00010ABE 3238 F700                  		move.w	($FFFFF700).w,d1
00010AC2 0441 0080                  		subi.w	#$80,d1
00010AC6 0241 FF80                  		andi.w	#$FF80,d1
00010ACA 9041                       		sub.w	d1,d0
00010ACC 0C40 0280                  		cmpi.w	#$280,d0
00010AD0 6200 CC36                  		bhi.w	DeleteObject
00010AD4 6000 CBF6                  		bra.w	DisplaySprite
00010AD8                            ; ===========================================================================
00010AD8 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010ADA 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010ADC 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010ADE 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010AE0                            ; ===========================================================================
00010AE0                            
00010AE0                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010AE0 4E75                       		rts	
00010AE2                            ; ===========================================================================
00010AE2                            
00010AE2                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010AE2 323C 0060                  		move.w	#$60,d1
00010AE6 7000                       		moveq	#0,d0
00010AE8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010AEC 0828 0000 0022             		btst	#0,$22(a0)
00010AF2 6700                       		beq.s	loc_10A38
00010AF4 4440                       		neg.w	d0
00010AF6 D041                       		add.w	d1,d0
00010AF8                            
00010AF8                            loc_10A38:
00010AF8 3228 003A                  		move.w	$3A(a0),d1
00010AFC 9240                       		sub.w	d0,d1
00010AFE 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010B02 4E75                       		rts	
00010B04                            ; ===========================================================================
00010B04                            
00010B04                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010B04 323C 0060                  		move.w	#$60,d1
00010B08 7000                       		moveq	#0,d0
00010B0A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010B0E 0828 0000 0022             		btst	#0,$22(a0)
00010B14 6700                       		beq.s	loc_10A5C
00010B16 4440                       		neg.w	d0
00010B18 0640 0080                  		addi.w	#$80,d0
00010B1C                            
00010B1C                            loc_10A5C:
00010B1C 3228 0038                  		move.w	$38(a0),d1
00010B20 9240                       		sub.w	d0,d1
00010B22 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010B26 4E75                       		rts	
00010B28                            ; ===========================================================================
00010B28                            
00010B28                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010B28 3028 003E                  		move.w	$3E(a0),d0
00010B2C D168 0026                  		add.w	d0,$26(a0)
00010B30 1028 0026                  		move.b	$26(a0),d0
00010B34 4EB9 0000 29DA             		jsr	(CalcSine).l
00010B3A 3428 0038                  		move.w	$38(a0),d2
00010B3E 3628 003A                  		move.w	$3A(a0),d3
00010B42 7800                       		moveq	#0,d4
00010B44 1828 003C                  		move.b	$3C(a0),d4
00010B48 2A04                       		move.l	d4,d5
00010B4A C9C0                       		muls.w	d0,d4
00010B4C E084                       		asr.l	#8,d4
00010B4E CBC1                       		muls.w	d1,d5
00010B50 E085                       		asr.l	#8,d5
00010B52 D842                       		add.w	d2,d4
00010B54 DA43                       		add.w	d3,d5
00010B56 3144 000C                  		move.w	d4,$C(a0)
00010B5A 3145 0008                  		move.w	d5,8(a0)
00010B5E 4E75                       		rts	
00010B60                            ; ===========================================================================
00010B60                            ; ---------------------------------------------------------------------------
00010B60                            ; Sprite mappings - SBZ	spiked ball on a chain
00010B60                            ; ---------------------------------------------------------------------------
00010B60                            Map_obj15b:
00010B60                            	include "_maps\obj15sbz.asm"
00010B60                            ; ---------------------------------------------------------------------------
00010B60                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010B60                            ; ---------------------------------------------------------------------------
00010B60 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010B64 0000                       		dc.w byte_10AC6-Map_obj15b
00010B66 05                         byte_10AA6:	dc.b 5
00010B67 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00010B6C F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00010B71 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00010B76 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00010B7B 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00010B80 01                         byte_10AC0:	dc.b 1
00010B81 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00010B86 02                         byte_10AC6:	dc.b 2
00010B87 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00010B8C E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00010B92 00                         		even
00010B92 00                         		even
00010B92                            
00010B92                            ; ===========================================================================
00010B92                            ; ---------------------------------------------------------------------------
00010B92                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00010B92                            ; ---------------------------------------------------------------------------
00010B92                            
00010B92                            Obj59:					; XREF: Obj_Index
00010B92 7000                       		moveq	#0,d0
00010B94 1028 0024                  		move.b	$24(a0),d0
00010B98 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00010B9C 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00010BA0 3028 0032                  		move.w	$32(a0),d0
00010BA4 0240 FF80                  		andi.w	#$FF80,d0
00010BA8 3238 F700                  		move.w	($FFFFF700).w,d1
00010BAC 0441 0080                  		subi.w	#$80,d1
00010BB0 0241 FF80                  		andi.w	#$FF80,d1
00010BB4 9041                       		sub.w	d1,d0
00010BB6 0C40 0280                  		cmpi.w	#$280,d0
00010BBA 6200 CB4C                  		bhi.w	DeleteObject
00010BBE 6000 CB0C                  		bra.w	DisplaySprite
00010BC2                            ; ===========================================================================
00010BC2 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00010BC4 0000                       		dc.w Obj59_Platform-Obj59_Index
00010BC6 0000                       		dc.w Obj59_Action-Obj59_Index
00010BC8 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00010BCA                            
00010BCA 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00010BCC                            
00010BCC 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00010BCE 2001                       		dc.b $20, 1
00010BD0 3401                       		dc.b $34, 1
00010BD2 1003                       		dc.b $10, 3
00010BD4 2003                       		dc.b $20, 3
00010BD6 3403                       		dc.b $34, 3
00010BD8 1401                       		dc.b $14, 1
00010BDA 2401                       		dc.b $24, 1
00010BDC 2C01                       		dc.b $2C, 1
00010BDE 1403                       		dc.b $14, 3
00010BE0 2403                       		dc.b $24, 3
00010BE2 2C03                       		dc.b $2C, 3
00010BE4 2005                       		dc.b $20, 5
00010BE6 2007                       		dc.b $20, 7
00010BE8 3009                       		dc.b $30, 9
00010BEA                            ; ===========================================================================
00010BEA                            
00010BEA                            Obj59_Main:				; XREF: Obj59_Index
00010BEA 5428 0024                  		addq.b	#2,$24(a0)
00010BEE 7000                       		moveq	#0,d0
00010BF0 1028 0028                  		move.b	$28(a0),d0
00010BF4 6A00                       		bpl.s	Obj59_Main2
00010BF6 5828 0024                  		addq.b	#4,$24(a0)
00010BFA 0240 007F                  		andi.w	#$7F,d0
00010BFE C0FC 0006                  		mulu.w	#6,d0
00010C02 3140 003C                  		move.w	d0,$3C(a0)
00010C06 3140 003E                  		move.w	d0,$3E(a0)
00010C0A 588F                       		addq.l	#4,sp
00010C0C 4E75                       		rts	
00010C0E                            ; ===========================================================================
00010C0E                            
00010C0E                            Obj59_Main2:
00010C0E E648                       		lsr.w	#3,d0
00010C10 0240 001E                  		andi.w	#$1E,d0
00010C14 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00010C18 115A 0019                  		move.b	(a2)+,$19(a0)
00010C1C 115A 001A                  		move.b	(a2)+,$1A(a0)
00010C20 7000                       		moveq	#0,d0
00010C22 1028 0028                  		move.b	$28(a0),d0
00010C26 D040                       		add.w	d0,d0
00010C28 0240 001E                  		andi.w	#$1E,d0
00010C2C 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00010C30 101A                       		move.b	(a2)+,d0
00010C32 E548                       		lsl.w	#2,d0
00010C34 3140 003C                  		move.w	d0,$3C(a0)
00010C38 115A 0028                  		move.b	(a2)+,$28(a0)
00010C3C 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00010C44 317C 4000 0002             		move.w	#$4000,2(a0)
00010C4A 117C 0004 0001             		move.b	#4,1(a0)
00010C50 117C 0004 0018             		move.b	#4,$18(a0)
00010C56 3168 0008 0032             		move.w	8(a0),$32(a0)
00010C5C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010C62                            
00010C62                            Obj59_Platform:				; XREF: Obj59_Index
00010C62 7200                       		moveq	#0,d1
00010C64 1228 0019                  		move.b	$19(a0),d1
00010C68 4EB9 0000 7552             		jsr	(PlatformObject).l
00010C6E 6000 0000                  		bra.w	Obj59_Types
00010C72                            ; ===========================================================================
00010C72                            
00010C72                            Obj59_Action:				; XREF: Obj59_Index
00010C72 7200                       		moveq	#0,d1
00010C74 1228 0019                  		move.b	$19(a0),d1
00010C78 4EB9 0000 76C6             		jsr	(ExitPlatform).l
00010C7E 3F28 0008                  		move.w	8(a0),-(sp)
00010C82 6100 0000                  		bsr.w	Obj59_Types
00010C86 341F                       		move.w	(sp)+,d2
00010C88 4A10                       		tst.b	0(a0)
00010C8A 6700                       		beq.s	locret_10BD4
00010C8C 4EF9 0000 7C30             		jmp	(MvSonicOnPtfm2).l
00010C92                            ; ===========================================================================
00010C92                            
00010C92                            locret_10BD4:
00010C92 4E75                       		rts	
00010C94                            ; ===========================================================================
00010C94                            
00010C94                            Obj59_Types:
00010C94 7000                       		moveq	#0,d0
00010C96 1028 0028                  		move.b	$28(a0),d0
00010C9A 0240 000F                  		andi.w	#$F,d0
00010C9E D040                       		add.w	d0,d0
00010CA0 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00010CA4 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00010CA8                            ; ===========================================================================
00010CA8 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010CAC 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010CB0 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010CB4 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010CB8 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00010CBC                            ; ===========================================================================
00010CBC                            
00010CBC                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00010CBC 4E75                       		rts	
00010CBE                            ; ===========================================================================
00010CBE                            
00010CBE                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00010CBE 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00010CC4 6600                       		bne.s	locret_10C0C
00010CC6 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010CCA                            
00010CCA                            locret_10C0C:
00010CCA 4E75                       		rts	
00010CCC                            ; ===========================================================================
00010CCC                            
00010CCC                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00010CCC 6100 0000                  		bsr.w	Obj59_Move
00010CD0 3028 0034                  		move.w	$34(a0),d0
00010CD4 4440                       		neg.w	d0
00010CD6 D068 0030                  		add.w	$30(a0),d0
00010CDA 3140 000C                  		move.w	d0,$C(a0)
00010CDE 4E75                       		rts	
00010CE0                            ; ===========================================================================
00010CE0                            
00010CE0                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00010CE0 6100 0000                  		bsr.w	Obj59_Move
00010CE4 3028 0034                  		move.w	$34(a0),d0
00010CE8 D068 0030                  		add.w	$30(a0),d0
00010CEC 3140 000C                  		move.w	d0,$C(a0)
00010CF0 4E75                       		rts	
00010CF2                            ; ===========================================================================
00010CF2                            
00010CF2                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00010CF2 6100 0000                  		bsr.w	Obj59_Move
00010CF6 3028 0034                  		move.w	$34(a0),d0
00010CFA E240                       		asr.w	#1,d0
00010CFC 4440                       		neg.w	d0
00010CFE D068 0030                  		add.w	$30(a0),d0
00010D02 3140 000C                  		move.w	d0,$C(a0)
00010D06 3028 0034                  		move.w	$34(a0),d0
00010D0A D068 0032                  		add.w	$32(a0),d0
00010D0E 3140 0008                  		move.w	d0,8(a0)
00010D12 4E75                       		rts	
00010D14                            ; ===========================================================================
00010D14                            
00010D14                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00010D14 6100 0000                  		bsr.w	Obj59_Move
00010D18 3028 0034                  		move.w	$34(a0),d0
00010D1C E240                       		asr.w	#1,d0
00010D1E D068 0030                  		add.w	$30(a0),d0
00010D22 3140 000C                  		move.w	d0,$C(a0)
00010D26 3028 0034                  		move.w	$34(a0),d0
00010D2A 4440                       		neg.w	d0
00010D2C D068 0032                  		add.w	$32(a0),d0
00010D30 3140 0008                  		move.w	d0,8(a0)
00010D34 4E75                       		rts	
00010D36                            ; ===========================================================================
00010D36                            
00010D36                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00010D36 6100 0000                  		bsr.w	Obj59_Move
00010D3A 3028 0034                  		move.w	$34(a0),d0
00010D3E 4440                       		neg.w	d0
00010D40 D068 0030                  		add.w	$30(a0),d0
00010D44 3140 000C                  		move.w	d0,$C(a0)
00010D48 4A28 0028                  		tst.b	$28(a0)
00010D4C 6700 0000                  		beq.w	loc_10C94
00010D50 4E75                       		rts	
00010D52                            ; ===========================================================================
00010D52                            
00010D52                            loc_10C94:
00010D52 0828 0003 0022             		btst	#3,$22(a0)
00010D58 6700                       		beq.s	Obj59_Delete
00010D5A 08E9 0001 0022             		bset	#1,$22(a1)
00010D60 08A9 0003 0022             		bclr	#3,$22(a1)
00010D66 137C 0002 0024             		move.b	#2,$24(a1)
00010D6C                            
00010D6C                            Obj59_Delete:
00010D6C 6000 C99A                  		bra.w	DeleteObject
00010D70                            
00010D70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010D70                            
00010D70                            
00010D70                            Obj59_Move:				; XREF: Obj59_Type02; et al
00010D70 3028 0038                  		move.w	$38(a0),d0
00010D74 4A28 003A                  		tst.b	$3A(a0)
00010D78 6600                       		bne.s	loc_10CC8
00010D7A 0C40 0800                  		cmpi.w	#$800,d0
00010D7E 6400                       		bcc.s	loc_10CD0
00010D80 0640 0010                  		addi.w	#$10,d0
00010D84 6000                       		bra.s	loc_10CD0
00010D86                            ; ===========================================================================
00010D86                            
00010D86                            loc_10CC8:
00010D86 4A40                       		tst.w	d0
00010D88 6700                       		beq.s	loc_10CD0
00010D8A 0440 0010                  		subi.w	#$10,d0
00010D8E                            
00010D8E                            loc_10CD0:
00010D8E 3140 0038                  		move.w	d0,$38(a0)
00010D92 48C0                       		ext.l	d0
00010D94 E180                       		asl.l	#8,d0
00010D96 D0A8 0034                  		add.l	$34(a0),d0
00010D9A 2140 0034                  		move.l	d0,$34(a0)
00010D9E 4840                       		swap	d0
00010DA0 3428 003C                  		move.w	$3C(a0),d2
00010DA4 B042                       		cmp.w	d2,d0
00010DA6 6300                       		bls.s	loc_10CF0
00010DA8 117C 0001 003A             		move.b	#1,$3A(a0)
00010DAE                            
00010DAE                            loc_10CF0:
00010DAE D442                       		add.w	d2,d2
00010DB0 B042                       		cmp.w	d2,d0
00010DB2 6600                       		bne.s	locret_10CFA
00010DB4 4228 0028                  		clr.b	$28(a0)
00010DB8                            
00010DB8                            locret_10CFA:
00010DB8 4E75                       		rts	
00010DBA                            ; End of function Obj59_Move
00010DBA                            
00010DBA                            ; ===========================================================================
00010DBA                            
00010DBA                            Obj59_MakeMulti:			; XREF: Obj59_Index
00010DBA 5368 003C                  		subq.w	#1,$3C(a0)
00010DBE 6600                       		bne.s	Obj59_ChkDel
00010DC0 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00010DC6 6100 CD8A                  		bsr.w	SingleObjLoad
00010DCA 6600                       		bne.s	Obj59_ChkDel
00010DCC 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00010DD0 3368 0008 0008             		move.w	8(a0),8(a1)
00010DD6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010DDC 137C 000E 0028             		move.b	#$E,$28(a1)
00010DE2                            
00010DE2                            Obj59_ChkDel:
00010DE2 588F                       		addq.l	#4,sp
00010DE4 3028 0008                  		move.w	8(a0),d0
00010DE8 0240 FF80                  		andi.w	#$FF80,d0
00010DEC 3238 F700                  		move.w	($FFFFF700).w,d1
00010DF0 0441 0080                  		subi.w	#$80,d1
00010DF4 0241 FF80                  		andi.w	#$FF80,d1
00010DF8 9041                       		sub.w	d1,d0
00010DFA 0C40 0280                  		cmpi.w	#$280,d0
00010DFE 6200 C908                  		bhi.w	DeleteObject
00010E02 4E75                       		rts	
00010E04                            ; ===========================================================================
00010E04                            ; ---------------------------------------------------------------------------
00010E04                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010E04                            ; ---------------------------------------------------------------------------
00010E04                            Map_obj59:
00010E04                            	include "_maps\obj59.asm"
00010E04                            ; ---------------------------------------------------------------------------
00010E04                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010E04                            ; ---------------------------------------------------------------------------
00010E04 0000                       		dc.w byte_10D4A-Map_obj59
00010E06 03                         byte_10D4A:	dc.b 3
00010E07 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00010E0C F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00010E11 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00010E16                            		even
00010E16                            		even
00010E16                            
00010E16                            ; ===========================================================================
00010E16                            ; ---------------------------------------------------------------------------
00010E16                            ; Object 5A - platforms	moving in circles (SLZ)
00010E16                            ; ---------------------------------------------------------------------------
00010E16                            
00010E16                            Obj5A:					; XREF: Obj_Index
00010E16 7000                       		moveq	#0,d0
00010E18 1028 0024                  		move.b	$24(a0),d0
00010E1C 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00010E20 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00010E24 3028 0032                  		move.w	$32(a0),d0
00010E28 0240 FF80                  		andi.w	#$FF80,d0
00010E2C 3238 F700                  		move.w	($FFFFF700).w,d1
00010E30 0441 0080                  		subi.w	#$80,d1
00010E34 0241 FF80                  		andi.w	#$FF80,d1
00010E38 9041                       		sub.w	d1,d0
00010E3A 0C40 0280                  		cmpi.w	#$280,d0
00010E3E 6200 C8C8                  		bhi.w	DeleteObject
00010E42 6000 C888                  		bra.w	DisplaySprite
00010E46                            ; ===========================================================================
00010E46 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00010E48 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00010E4A 0000                       		dc.w Obj5A_Action-Obj5A_Index
00010E4C                            ; ===========================================================================
00010E4C                            
00010E4C                            Obj5A_Main:				; XREF: Obj5A_Index
00010E4C 5428 0024                  		addq.b	#2,$24(a0)
00010E50 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00010E58 317C 4000 0002             		move.w	#$4000,2(a0)
00010E5E 117C 0004 0001             		move.b	#4,1(a0)
00010E64 117C 0004 0018             		move.b	#4,$18(a0)
00010E6A 117C 0018 0019             		move.b	#$18,$19(a0)
00010E70 3168 0008 0032             		move.w	8(a0),$32(a0)
00010E76 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010E7C                            
00010E7C                            Obj5A_Platform:				; XREF: Obj5A_Index
00010E7C 7200                       		moveq	#0,d1
00010E7E 1228 0019                  		move.b	$19(a0),d1
00010E82 4EB9 0000 7552             		jsr	(PlatformObject).l
00010E88 6000 0000                  		bra.w	Obj5A_Types
00010E8C                            ; ===========================================================================
00010E8C                            
00010E8C                            Obj5A_Action:				; XREF: Obj5A_Index
00010E8C 7200                       		moveq	#0,d1
00010E8E 1228 0019                  		move.b	$19(a0),d1
00010E92 4EB9 0000 76C6             		jsr	(ExitPlatform).l
00010E98 3F28 0008                  		move.w	8(a0),-(sp)
00010E9C 6100 0000                  		bsr.w	Obj5A_Types
00010EA0 341F                       		move.w	(sp)+,d2
00010EA2 4EF9 0000 7C30             		jmp	(MvSonicOnPtfm2).l
00010EA8                            ; ===========================================================================
00010EA8                            
00010EA8                            Obj5A_Types:
00010EA8 7000                       		moveq	#0,d0
00010EAA 1028 0028                  		move.b	$28(a0),d0
00010EAE 0240 000C                  		andi.w	#$C,d0
00010EB2 E248                       		lsr.w	#1,d0
00010EB4 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00010EB8 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00010EBC                            ; ===========================================================================
00010EBC 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00010EBE 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00010EC0                            ; ===========================================================================
00010EC0                            
00010EC0                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00010EC0 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010EC4 0401 0050                  		subi.b	#$50,d1
00010EC8 4881                       		ext.w	d1
00010ECA 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010ECE 0402 0050                  		subi.b	#$50,d2
00010ED2 4882                       		ext.w	d2
00010ED4 0828 0000 0028             		btst	#0,$28(a0)
00010EDA 6700                       		beq.s	loc_10E24
00010EDC 4441                       		neg.w	d1
00010EDE 4442                       		neg.w	d2
00010EE0                            
00010EE0                            loc_10E24:
00010EE0 0828 0001 0028             		btst	#1,$28(a0)
00010EE6 6700                       		beq.s	loc_10E30
00010EE8 4441                       		neg.w	d1
00010EEA C342                       		exg	d1,d2
00010EEC                            
00010EEC                            loc_10E30:
00010EEC D268 0032                  		add.w	$32(a0),d1
00010EF0 3141 0008                  		move.w	d1,8(a0)
00010EF4 D468 0030                  		add.w	$30(a0),d2
00010EF8 3142 000C                  		move.w	d2,$C(a0)
00010EFC 4E75                       		rts	
00010EFE                            ; ===========================================================================
00010EFE                            
00010EFE                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00010EFE 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010F02 0401 0050                  		subi.b	#$50,d1
00010F06 4881                       		ext.w	d1
00010F08 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010F0C 0402 0050                  		subi.b	#$50,d2
00010F10 4882                       		ext.w	d2
00010F12 0828 0000 0028             		btst	#0,$28(a0)
00010F18 6700                       		beq.s	loc_10E62
00010F1A 4441                       		neg.w	d1
00010F1C 4442                       		neg.w	d2
00010F1E                            
00010F1E                            loc_10E62:
00010F1E 0828 0001 0028             		btst	#1,$28(a0)
00010F24 6700                       		beq.s	loc_10E6E
00010F26 4441                       		neg.w	d1
00010F28 C342                       		exg	d1,d2
00010F2A                            
00010F2A                            loc_10E6E:
00010F2A 4441                       		neg.w	d1
00010F2C D268 0032                  		add.w	$32(a0),d1
00010F30 3141 0008                  		move.w	d1,8(a0)
00010F34 D468 0030                  		add.w	$30(a0),d2
00010F38 3142 000C                  		move.w	d2,$C(a0)
00010F3C 4E75                       		rts	
00010F3E                            ; ===========================================================================
00010F3E                            ; ---------------------------------------------------------------------------
00010F3E                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010F3E                            ; ---------------------------------------------------------------------------
00010F3E                            Map_obj5A:
00010F3E                            	include "_maps\obj5A.asm"
00010F3E                            ; ---------------------------------------------------------------------------
00010F3E                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010F3E                            ; ---------------------------------------------------------------------------
00010F3E 0000                       		dc.w byte_10E84-Map_obj5A
00010F40 02                         byte_10E84:	dc.b 2
00010F41 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00010F46 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00010F4C 00                         		even
00010F4C 00                         		even
00010F4C                            
00010F4C                            ; ===========================================================================
00010F4C                            ; ---------------------------------------------------------------------------
00010F4C                            ; Object 5B - blocks that form a staircase (SLZ)
00010F4C                            ; ---------------------------------------------------------------------------
00010F4C                            
00010F4C                            Obj5B:					; XREF: Obj_Index
00010F4C 7000                       		moveq	#0,d0
00010F4E 1028 0024                  		move.b	$24(a0),d0
00010F52 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00010F56 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00010F5A 3028 0030                  		move.w	$30(a0),d0
00010F5E 0240 FF80                  		andi.w	#$FF80,d0
00010F62 3238 F700                  		move.w	($FFFFF700).w,d1
00010F66 0441 0080                  		subi.w	#$80,d1
00010F6A 0241 FF80                  		andi.w	#$FF80,d1
00010F6E 9041                       		sub.w	d1,d0
00010F70 0C40 0280                  		cmpi.w	#$280,d0
00010F74 6200 C792                  		bhi.w	DeleteObject
00010F78 6000 C752                  		bra.w	DisplaySprite
00010F7C                            ; ===========================================================================
00010F7C 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00010F7E 0000                       		dc.w Obj5B_Move-Obj5B_Index
00010F80 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00010F82                            ; ===========================================================================
00010F82                            
00010F82                            Obj5B_Main:				; XREF: Obj5B_Index
00010F82 5428 0024                  		addq.b	#2,$24(a0)
00010F86 7638                       		moveq	#$38,d3
00010F88 7801                       		moveq	#1,d4
00010F8A 0828 0000 0022             		btst	#0,$22(a0)
00010F90 6700                       		beq.s	loc_10EDA
00010F92 763B                       		moveq	#$3B,d3
00010F94 78FF                       		moveq	#-1,d4
00010F96                            
00010F96                            loc_10EDA:
00010F96 3428 0008                  		move.w	8(a0),d2
00010F9A 2248                       		movea.l	a0,a1
00010F9C 7203                       		moveq	#3,d1
00010F9E 6000                       		bra.s	Obj5B_MakeBlocks
00010FA0                            ; ===========================================================================
00010FA0                            
00010FA0                            Obj5B_Loop:
00010FA0 6100 CBC6                  		bsr.w	SingleObjLoad2
00010FA4 6600 0000                  		bne.w	Obj5B_Move
00010FA8 137C 0004 0024             		move.b	#4,$24(a1)
00010FAE                            
00010FAE                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00010FAE 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00010FB2 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00010FBA 337C 4000 0002             		move.w	#$4000,2(a1)
00010FC0 137C 0004 0001             		move.b	#4,1(a1)
00010FC6 137C 0003 0018             		move.b	#3,$18(a1)
00010FCC 137C 0010 0019             		move.b	#$10,$19(a1)
00010FD2 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010FD8 3342 0008                  		move.w	d2,8(a1)
00010FDC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010FE2 3368 0008 0030             		move.w	8(a0),$30(a1)
00010FE8 3369 000C 0032             		move.w	$C(a1),$32(a1)
00010FEE 0642 0020                  		addi.w	#$20,d2
00010FF2 1343 0037                  		move.b	d3,$37(a1)
00010FF6 2348 003C                  		move.l	a0,$3C(a1)
00010FFA D604                       		add.b	d4,d3
00010FFC 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011000                            
00011000                            Obj5B_Move:				; XREF: Obj5B_Index
00011000 7000                       		moveq	#0,d0
00011002 1028 0028                  		move.b	$28(a0),d0
00011006 0240 0007                  		andi.w	#7,d0
0001100A D040                       		add.w	d0,d0
0001100C 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011010 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011014                            
00011014                            Obj5B_Solid:				; XREF: Obj5B_Index
00011014 2468 003C                  		movea.l	$3C(a0),a2
00011018 7000                       		moveq	#0,d0
0001101A 1028 0037                  		move.b	$37(a0),d0
0001101E 1032 0000                  		move.b	(a2,d0.w),d0
00011022 D068 0032                  		add.w	$32(a0),d0
00011026 3140 000C                  		move.w	d0,$C(a0)
0001102A 7200                       		moveq	#0,d1
0001102C 1228 0019                  		move.b	$19(a0),d1
00011030 0641 000B                  		addi.w	#$B,d1
00011034 343C 0010                  		move.w	#$10,d2
00011038 363C 0011                  		move.w	#$11,d3
0001103C 3828 0008                  		move.w	8(a0),d4
00011040 6100 EA5A                  		bsr.w	SolidObject
00011044 4A04                       		tst.b	d4
00011046 6A00                       		bpl.s	loc_10F92
00011048 1544 0036                  		move.b	d4,$36(a2)
0001104C                            
0001104C                            loc_10F92:
0001104C 0828 0003 0022             		btst	#3,$22(a0)
00011052 6700                       		beq.s	locret_10FA0
00011054 157C 0001 0036             		move.b	#1,$36(a2)
0001105A                            
0001105A                            locret_10FA0:
0001105A 4E75                       		rts	
0001105C                            ; ===========================================================================
0001105C 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0001105E 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011060 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011062 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011064                            ; ===========================================================================
00011064                            
00011064                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011064 4A68 0034                  		tst.w	$34(a0)
00011068 6600                       		bne.s	loc_10FC0
0001106A 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011070 6600                       		bne.s	locret_10FBE
00011072 317C 001E 0034             		move.w	#$1E,$34(a0)
00011078                            
00011078                            locret_10FBE:
00011078 4E75                       		rts	
0001107A                            ; ===========================================================================
0001107A                            
0001107A                            loc_10FC0:
0001107A 5368 0034                  		subq.w	#1,$34(a0)
0001107E 66F8                       		bne.s	locret_10FBE
00011080 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011084 4E75                       		rts	
00011086                            ; ===========================================================================
00011086                            
00011086                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011086 4A68 0034                  		tst.w	$34(a0)
0001108A 6600                       		bne.s	loc_10FE0
0001108C 4A28 0036                  		tst.b	$36(a0)
00011090 6A00                       		bpl.s	locret_10FDE
00011092 317C 003C 0034             		move.w	#$3C,$34(a0)
00011098                            
00011098                            locret_10FDE:
00011098 4E75                       		rts	
0001109A                            ; ===========================================================================
0001109A                            
0001109A                            loc_10FE0:
0001109A 5368 0034                  		subq.w	#1,$34(a0)
0001109E 6600                       		bne.s	loc_10FEC
000110A0 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000110A4 4E75                       		rts	
000110A6                            ; ===========================================================================
000110A6                            
000110A6                            loc_10FEC:
000110A6 43E8 0038                  		lea	$38(a0),a1
000110AA 3028 0034                  		move.w	$34(a0),d0
000110AE E408                       		lsr.b	#2,d0
000110B0 0200 0001                  		andi.b	#1,d0
000110B4 12C0                       		move.b	d0,(a1)+
000110B6 0A00 0001                  		eori.b	#1,d0
000110BA 12C0                       		move.b	d0,(a1)+
000110BC 0A00 0001                  		eori.b	#1,d0
000110C0 12C0                       		move.b	d0,(a1)+
000110C2 0A00 0001                  		eori.b	#1,d0
000110C6 12C0                       		move.b	d0,(a1)+
000110C8 4E75                       		rts	
000110CA                            ; ===========================================================================
000110CA                            
000110CA                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000110CA 43E8 0038                  		lea	$38(a0),a1
000110CE 0C11 0080                  		cmpi.b	#$80,(a1)
000110D2 6700                       		beq.s	locret_11038
000110D4 5211                       		addq.b	#1,(a1)
000110D6 7200                       		moveq	#0,d1
000110D8 1219                       		move.b	(a1)+,d1
000110DA 4841                       		swap	d1
000110DC E289                       		lsr.l	#1,d1
000110DE 2401                       		move.l	d1,d2
000110E0 E289                       		lsr.l	#1,d1
000110E2 2601                       		move.l	d1,d3
000110E4 D682                       		add.l	d2,d3
000110E6 4841                       		swap	d1
000110E8 4842                       		swap	d2
000110EA 4843                       		swap	d3
000110EC 12C3                       		move.b	d3,(a1)+
000110EE 12C2                       		move.b	d2,(a1)+
000110F0 12C1                       		move.b	d1,(a1)+
000110F2                            
000110F2                            locret_11038:
000110F2 4E75                       		rts	
000110F4 4E75                       		rts	
000110F6                            ; ===========================================================================
000110F6                            ; ---------------------------------------------------------------------------
000110F6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000110F6                            ; ---------------------------------------------------------------------------
000110F6                            Map_obj5B:
000110F6                            	include "_maps\obj5B.asm"
000110F6                            ; ---------------------------------------------------------------------------
000110F6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000110F6                            ; ---------------------------------------------------------------------------
000110F6 0000                       		dc.w byte_1103E-Map_obj5B
000110F8 01                         byte_1103E:	dc.b 1
000110F9 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000110FE                            		even
000110FE                            		even
000110FE                            
000110FE                            ; ===========================================================================
000110FE                            ; ---------------------------------------------------------------------------
000110FE                            ; Object 5C - metal girders in foreground (SLZ)
000110FE                            ; ---------------------------------------------------------------------------
000110FE                            
000110FE                            Obj5C:					; XREF: Obj_Index
000110FE 7000                       		moveq	#0,d0
00011100 1028 0024                  		move.b	$24(a0),d0
00011104 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011108 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0001110C                            ; ===========================================================================
0001110C 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0001110E 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011110                            ; ===========================================================================
00011110                            
00011110                            Obj5C_Main:				; XREF: Obj5C_Index
00011110 5428 0024                  		addq.b	#2,$24(a0)
00011114 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
0001111C 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011122 117C 0010 0019             		move.b	#$10,$19(a0)
00011128                            
00011128                            Obj5C_Display:				; XREF: Obj5C_Index
00011128 2238 F700                  		move.l	($FFFFF700).w,d1
0001112C D281                       		add.l	d1,d1
0001112E 4841                       		swap	d1
00011130 4441                       		neg.w	d1
00011132 3141 0008                  		move.w	d1,8(a0)
00011136 2238 F704                  		move.l	($FFFFF704).w,d1
0001113A D281                       		add.l	d1,d1
0001113C 4841                       		swap	d1
0001113E 0241 003F                  		andi.w	#$3F,d1
00011142 4441                       		neg.w	d1
00011144 0641 0100                  		addi.w	#$100,d1
00011148 3141 000A                  		move.w	d1,$A(a0)
0001114C 6000 C57E                  		bra.w	DisplaySprite
00011150                            ; ===========================================================================
00011150                            ; ---------------------------------------------------------------------------
00011150                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011150                            ; ---------------------------------------------------------------------------
00011150                            Map_obj5C:
00011150                            	include "_maps\obj5C.asm"
00011150                            ; ---------------------------------------------------------------------------
00011150                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011150                            ; ---------------------------------------------------------------------------
00011150 0000                       		dc.w byte_11098-Map_obj5C
00011152 09                         byte_11098:	dc.b 9
00011153 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011158 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001115D C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011162 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011167 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001116C 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011171 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011176 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001117B 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011180                            		even
00011180                            		even
00011180                            
00011180                            ; ===========================================================================
00011180                            ; ---------------------------------------------------------------------------
00011180                            ; Object 1B - water surface (LZ)
00011180                            ; ---------------------------------------------------------------------------
00011180                            
00011180                            Obj1B:					; XREF: Obj_Index
00011180 7000                       		moveq	#0,d0
00011182 1028 0024                  		move.b	$24(a0),d0
00011186 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001118A 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001118E                            ; ===========================================================================
0001118E 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011190 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011192                            ; ===========================================================================
00011192                            
00011192                            Obj1B_Main:				; XREF: Obj1B_Index
00011192 5428 0024                  		addq.b	#2,$24(a0)
00011196 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001119E 317C C300 0002             		move.w	#$C300,2(a0)
000111A4 117C 0004 0001             		move.b	#4,1(a0)
000111AA 117C 0080 0019             		move.b	#$80,$19(a0)
000111B0 3168 0008 0030             		move.w	8(a0),$30(a0)
000111B6                            
000111B6                            Obj1B_Action:				; XREF: Obj1B_Index
000111B6 3238 F700                  		move.w	($FFFFF700).w,d1
000111BA 0241 FFE0                  		andi.w	#$FFE0,d1
000111BE D268 0030                  		add.w	$30(a0),d1
000111C2 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000111C8 6700                       		beq.s	loc_11114
000111CA 0641 0020                  		addi.w	#$20,d1
000111CE                            
000111CE                            loc_11114:
000111CE 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000111D2 3238 F646                  		move.w	($FFFFF646).w,d1
000111D6 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000111DA 4A28 0032                  		tst.b	$32(a0)
000111DE 6600                       		bne.s	Obj1B_Animate
000111E0 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000111E6 6700                       		beq.s	loc_1114A	; if not, branch
000111E8 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000111EC 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000111F2 6000                       		bra.s	Obj1B_Display
000111F4                            ; ===========================================================================
000111F4                            
000111F4                            Obj1B_Animate:				; XREF: loc_11114
000111F4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000111F8 6600                       		bne.s	Obj1B_Display	; if yes, branch
000111FA 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011200 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011204                            
00011204                            loc_1114A:				; XREF: loc_11114
00011204 5328 001E                  		subq.b	#1,$1E(a0)
00011208 6A00                       		bpl.s	Obj1B_Display
0001120A 117C 0007 001E             		move.b	#7,$1E(a0)
00011210 5228 001A                  		addq.b	#1,$1A(a0)
00011214 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
0001121A 6500                       		bcs.s	Obj1B_Display
0001121C 117C 0000 001A             		move.b	#0,$1A(a0)
00011222                            
00011222                            Obj1B_Display:
00011222 6000 C4A8                  		bra.w	DisplaySprite
00011226                            ; ===========================================================================
00011226                            ; ---------------------------------------------------------------------------
00011226                            ; Sprite mappings - water surface (LZ)
00011226                            ; ---------------------------------------------------------------------------
00011226                            Map_obj1B:
00011226                            	include "_maps\obj1B.asm"
00011226                            ; ---------------------------------------------------------------------------
00011226                            ; Sprite mappings - water surface (LZ)
00011226                            ; ---------------------------------------------------------------------------
00011226 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0001122A 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
0001122E 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011232 03                         byte_11178:	dc.b 3
00011233 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011238 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001123D FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011242 03                         byte_11188:	dc.b 3
00011243 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011248 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001124D FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011252 03                         byte_11198:	dc.b 3
00011253 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011258 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001125D FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011262 06                         byte_111A8:	dc.b 6
00011263 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011268 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001126D FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011272 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011277 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001127C FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011281 06                         byte_111C7:	dc.b 6
00011282 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011287 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001128C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011291 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011296 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001129B FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
000112A0 06                         byte_111E6:	dc.b 6
000112A1 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000112A6 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
000112AB FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000112B0 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000112B5 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000112BA FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000112C0 00                         		even
000112C0 00                         		even
000112C0                            
000112C0                            ; ===========================================================================
000112C0                            ; ---------------------------------------------------------------------------
000112C0                            ; Object 0B - pole that	breaks (LZ)
000112C0                            ; ---------------------------------------------------------------------------
000112C0                            
000112C0                            Obj0B:					; XREF: Obj_Index
000112C0 7000                       		moveq	#0,d0
000112C2 1028 0024                  		move.b	$24(a0),d0
000112C6 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000112CA 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000112CE                            ; ===========================================================================
000112CE 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000112D0 0000                       		dc.w Obj0B_Action-Obj0B_Index
000112D2 0000                       		dc.w Obj0B_Display-Obj0B_Index
000112D4                            ; ===========================================================================
000112D4                            
000112D4                            Obj0B_Main:				; XREF: Obj0B_Index
000112D4 5428 0024                  		addq.b	#2,$24(a0)
000112D8 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000112E0 317C 43DE 0002             		move.w	#$43DE,2(a0)
000112E6 117C 0004 0001             		move.b	#4,1(a0)
000112EC 117C 0008 0019             		move.b	#8,$19(a0)
000112F2 117C 0004 0018             		move.b	#4,$18(a0)
000112F8 117C 00E1 0020             		move.b	#$E1,$20(a0)
000112FE 7000                       		moveq	#0,d0
00011300 1028 0028                  		move.b	$28(a0),d0	; get object type
00011304 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011308 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
0001130C                            
0001130C                            Obj0B_Action:				; XREF: Obj0B_Index
0001130C 4A28 0032                  		tst.b	$32(a0)
00011310 6700                       		beq.s	Obj0B_Grab
00011312 4A68 0030                  		tst.w	$30(a0)
00011316 6700                       		beq.s	Obj0B_MoveUp
00011318 5368 0030                  		subq.w	#1,$30(a0)
0001131C 6600                       		bne.s	Obj0B_MoveUp
0001131E 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011324 6000                       		bra.s	Obj0B_Release
00011326                            ; ===========================================================================
00011326                            
00011326                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011326 43F8 D000                  		lea	($FFFFD000).w,a1
0001132A 3028 000C                  		move.w	$C(a0),d0
0001132E 0440 0018                  		subi.w	#$18,d0
00011332 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011338 6700                       		beq.s	Obj0B_MoveDown
0001133A 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0001133E B069 000C                  		cmp.w	$C(a1),d0
00011342 6500                       		bcs.s	Obj0B_MoveDown
00011344 3340 000C                  		move.w	d0,$C(a1)
00011348                            
00011348                            Obj0B_MoveDown:
00011348 0640 0024                  		addi.w	#$24,d0
0001134C 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011352 6700                       		beq.s	Obj0B_LetGo
00011354 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011358 B069 000C                  		cmp.w	$C(a1),d0
0001135C 6400                       		bcc.s	Obj0B_LetGo
0001135E 3340 000C                  		move.w	d0,$C(a1)
00011362                            
00011362                            Obj0B_LetGo:
00011362 1038 F603                  		move.b	($FFFFF603).w,d0
00011366 0240 0070                  		andi.w	#$70,d0
0001136A 6700                       		beq.s	Obj0B_Display
0001136C                            
0001136C                            Obj0B_Release:				; XREF: Obj0B_Action
0001136C 4228 0020                  		clr.b	$20(a0)
00011370 5428 0024                  		addq.b	#2,$24(a0)
00011374 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011378 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001137C 4228 0032                  		clr.b	$32(a0)
00011380 6000                       		bra.s	Obj0B_Display
00011382                            ; ===========================================================================
00011382                            
00011382                            Obj0B_Grab:				; XREF: Obj0B_Action
00011382 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011386 6700                       		beq.s	Obj0B_Display	; if not, branch
00011388 43F8 D000                  		lea	($FFFFD000).w,a1
0001138C 3028 0008                  		move.w	8(a0),d0
00011390 0640 0014                  		addi.w	#$14,d0
00011394 B069 0008                  		cmp.w	8(a1),d0
00011398 6400                       		bcc.s	Obj0B_Display
0001139A 4228 0021                  		clr.b	$21(a0)
0001139E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000113A4 6400                       		bcc.s	Obj0B_Display
000113A6 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
000113AA 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
000113AE 3028 0008                  		move.w	8(a0),d0
000113B2 0640 0014                  		addi.w	#$14,d0
000113B6 3340 0008                  		move.w	d0,8(a1)
000113BA 08A9 0000 0022             		bclr	#0,$22(a1)
000113C0 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
000113C6 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000113CC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000113D2 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
000113D8                            
000113D8                            Obj0B_Display:				; XREF: Obj0B_Index
000113D8 6000 E39A                  		bra.w	MarkObjGone
000113DC                            ; ===========================================================================
000113DC                            ; ---------------------------------------------------------------------------
000113DC                            ; Sprite mappings - pole that breaks (LZ)
000113DC                            ; ---------------------------------------------------------------------------
000113DC                            Map_obj0B:
000113DC                            	include "_maps\obj0B.asm"
000113DC                            ; ---------------------------------------------------------------------------
000113DC                            ; Sprite mappings - pole that breaks (LZ)
000113DC                            ; ---------------------------------------------------------------------------
000113DC 0000                       		dc.w byte_11326-Map_obj0B
000113DE 0000                       		dc.w byte_11331-Map_obj0B
000113E0 02                         byte_11326:	dc.b 2			; normal pole
000113E1 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000113E6 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000113EB 04                         byte_11331:	dc.b 4			; broken pole
000113EC E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000113F1 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000113F6 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000113FB 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011400                            		even
00011400                            		even
00011400                            
00011400                            ; ===========================================================================
00011400                            ; ---------------------------------------------------------------------------
00011400                            ; Object 0C - flapping door (LZ)
00011400                            ; ---------------------------------------------------------------------------
00011400                            
00011400                            Obj0C:					; XREF: Obj_Index
00011400 7000                       		moveq	#0,d0
00011402 1028 0024                  		move.b	$24(a0),d0
00011406 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
0001140A 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
0001140E                            ; ===========================================================================
0001140E 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011410 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011412                            ; ===========================================================================
00011412                            
00011412                            Obj0C_Main:				; XREF: Obj0C_Index
00011412 5428 0024                  		addq.b	#2,$24(a0)
00011416 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
0001141E 317C 4328 0002             		move.w	#$4328,2(a0)
00011424 0028 0004 0001             		ori.b	#4,1(a0)
0001142A 117C 0028 0019             		move.b	#$28,$19(a0)
00011430 7000                       		moveq	#0,d0
00011432 1028 0028                  		move.b	$28(a0),d0	; get object type
00011436 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001143A 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
0001143E                            
0001143E                            Obj0C_OpenClose:			; XREF: Obj0C_Index
0001143E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011442 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011444 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
0001144A 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011450 4A28 0001                  		tst.b	1(a0)
00011454 6A00                       		bpl.s	Obj0C_Solid
00011456 303C 00BB                  		move.w	#$BB,d0
0001145A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play door sound
00011460                            
00011460                            Obj0C_Solid:
00011460 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011466 6100 9390                  		bsr.w	AnimateSprite
0001146A 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001146E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011472 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011474 3038 D008                  		move.w	($FFFFD008).w,d0
00011478 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0001147C 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001147E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011484 323C 0013                  		move.w	#$13,d1
00011488 343C 0020                  		move.w	#$20,d2
0001148C 3602                       		move.w	d2,d3
0001148E 5243                       		addq.w	#1,d3
00011490 3828 0008                  		move.w	8(a0),d4
00011494 6100 E606                  		bsr.w	SolidObject	; make the door	solid
00011498                            
00011498                            Obj0C_Display:
00011498 6000 E2DA                  		bra.w	MarkObjGone
0001149C                            ; ===========================================================================
0001149C                            Ani_obj0C:
0001149C                            	include "_anim\obj0C.asm"
0001149C                            ; ---------------------------------------------------------------------------
0001149C                            ; Animation script - flapping door (LZ)
0001149C                            ; ---------------------------------------------------------------------------
0001149C 0000                       		dc.w byte_113E6-Ani_obj0C
0001149E 0000                       		dc.w byte_113EC-Ani_obj0C
000114A0 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
000114A6 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
000114AC                            		even
000114AC                            		even
000114AC                            
000114AC                            ; ---------------------------------------------------------------------------
000114AC                            ; Sprite mappings - flapping door (LZ)
000114AC                            ; ---------------------------------------------------------------------------
000114AC                            Map_obj0C:
000114AC                            	include "_maps\obj0C.asm"
000114AC                            ; ---------------------------------------------------------------------------
000114AC                            ; Sprite mappings - flapping door (LZ)
000114AC                            ; ---------------------------------------------------------------------------
000114AC 0000                       		dc.w byte_113F8-Map_obj0C
000114AE 0000                       		dc.w byte_11403-Map_obj0C
000114B0 0000                       		dc.w byte_1140E-Map_obj0C
000114B2 02                         byte_113F8:	dc.b 2
000114B3 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000114B8 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000114BD 02                         byte_11403:	dc.b 2
000114BE DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000114C3 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000114C8 02                         byte_1140E:	dc.b 2
000114C9 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000114CE 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000114D4 00                         		even
000114D4 00                         		even
000114D4                            
000114D4                            ; ===========================================================================
000114D4                            ; ---------------------------------------------------------------------------
000114D4                            ; Object 71 - invisible	solid blocks
000114D4                            ; ---------------------------------------------------------------------------
000114D4                            
000114D4                            Obj71:					; XREF: Obj_Index
000114D4 7000                       		moveq	#0,d0
000114D6 1028 0024                  		move.b	$24(a0),d0
000114DA 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
000114DE 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
000114E2                            ; ===========================================================================
000114E2 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
000114E4 0000                       		dc.w Obj71_Solid-Obj71_Index
000114E6                            ; ===========================================================================
000114E6                            
000114E6                            Obj71_Main:				; XREF: Obj71_Index
000114E6 5428 0024                  		addq.b	#2,$24(a0)
000114EA 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000114F2 317C 8680 0002             		move.w	#$8680,2(a0)
000114F8 0028 0004 0001             		ori.b	#4,1(a0)
000114FE 1028 0028                  		move.b	$28(a0),d0	; get object type
00011502 1200                       		move.b	d0,d1
00011504 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011508 0640 0010                  		addi.w	#$10,d0
0001150C E248                       		lsr.w	#1,d0
0001150E 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011512 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011516 5241                       		addq.w	#1,d1
00011518 E749                       		lsl.w	#3,d1
0001151A 1141 0016                  		move.b	d1,$16(a0)	; set object height
0001151E                            
0001151E                            Obj71_Solid:				; XREF: Obj71_Index
0001151E 6100 C426                  		bsr.w	ChkObjOnScreen
00011522 6600                       		bne.s	Obj71_ChkDel
00011524 7200                       		moveq	#0,d1
00011526 1228 0019                  		move.b	$19(a0),d1
0001152A 0641 000B                  		addi.w	#$B,d1
0001152E 7400                       		moveq	#0,d2
00011530 1428 0016                  		move.b	$16(a0),d2
00011534 3602                       		move.w	d2,d3
00011536 5243                       		addq.w	#1,d3
00011538 3828 0008                  		move.w	8(a0),d4
0001153C 6100 E5A4                  		bsr.w	SolidObject71
00011540                            
00011540                            Obj71_ChkDel:
00011540 3028 0008                  		move.w	8(a0),d0
00011544 0240 FF80                  		andi.w	#$FF80,d0
00011548 3238 F700                  		move.w	($FFFFF700).w,d1
0001154C 0441 0080                  		subi.w	#$80,d1
00011550 0241 FF80                  		andi.w	#$FF80,d1
00011554 9041                       		sub.w	d1,d0
00011556 0C40 0280                  		cmpi.w	#$280,d0
0001155A 6200                       		bhi.s	Obj71_Delete
0001155C 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011560 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011562 4EFA C168                  		jmp	DisplaySprite	; if yes, display the object
00011566                            ; ===========================================================================
00011566                            
00011566                            Obj71_NoDisplay:
00011566 4E75                       		rts	
00011568                            ; ===========================================================================
00011568                            
00011568                            Obj71_Delete:
00011568 4EFA C19E                  		jmp	DeleteObject
0001156C                            ; ===========================================================================
0001156C                            ; ---------------------------------------------------------------------------
0001156C                            ; Sprite mappings - invisible solid blocks
0001156C                            ; ---------------------------------------------------------------------------
0001156C                            Map_obj71:
0001156C                            	include "_maps\obj71.asm"
0001156C                            ; ---------------------------------------------------------------------------
0001156C                            ; Sprite mappings - invisible solid blocks
0001156C                            ; ---------------------------------------------------------------------------
0001156C 0000                       		dc.w byte_114BC-Map_obj71
0001156E 0000                       		dc.w byte_114D1-Map_obj71
00011570 0000                       		dc.w byte_114E6-Map_obj71
00011572 04                         byte_114BC:	dc.b 4
00011573 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011578 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
0001157D 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011582 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011587 04                         byte_114D1:	dc.b 4
00011588 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
0001158D E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011592 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011597 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001159C 04                         byte_114E6:	dc.b 4
0001159D E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
000115A2 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
000115A7 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
000115AC 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
000115B2 00                         		even
000115B2 00                         		even
000115B2                            
000115B2                            ; ===========================================================================
000115B2                            ; ---------------------------------------------------------------------------
000115B2                            ; Object 5D - fans (SLZ)
000115B2                            ; ---------------------------------------------------------------------------
000115B2                            
000115B2                            Obj5D:					; XREF: Obj_Index
000115B2 7000                       		moveq	#0,d0
000115B4 1028 0024                  		move.b	$24(a0),d0
000115B8 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
000115BC 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
000115C0                            ; ===========================================================================
000115C0 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
000115C2 0000                       		dc.w Obj5D_Delay-Obj5D_Index
000115C4                            ; ===========================================================================
000115C4                            
000115C4                            Obj5D_Main:				; XREF: Obj5D_Index
000115C4 5428 0024                  		addq.b	#2,$24(a0)
000115C8 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
000115D0 317C 43A0 0002             		move.w	#$43A0,2(a0)
000115D6 0028 0004 0001             		ori.b	#4,1(a0)
000115DC 117C 0010 0019             		move.b	#$10,$19(a0)
000115E2 117C 0004 0018             		move.b	#4,$18(a0)
000115E8                            
000115E8                            Obj5D_Delay:				; XREF: Obj5D_Index
000115E8 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
000115EE 6600                       		bne.s	Obj5D_Blow	; if yes, branch
000115F0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000115F4 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
000115F6 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
000115FC 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011602 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011604 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001160A                            
0001160A                            Obj5D_Blow:
0001160A 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
0001160E 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011612 43F8 D000                  		lea	($FFFFD000).w,a1
00011616 3029 0008                  		move.w	8(a1),d0
0001161A 9068 0008                  		sub.w	8(a0),d0
0001161E 0828 0000 0022             		btst	#0,$22(a0)
00011624 6600                       		bne.s	Obj5D_ChkSonic
00011626 4440                       		neg.w	d0
00011628                            
00011628                            Obj5D_ChkSonic:
00011628 0640 0050                  		addi.w	#$50,d0
0001162C 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011630 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011632 3229 000C                  		move.w	$C(a1),d1
00011636 0641 0060                  		addi.w	#$60,d1
0001163A 9268 000C                  		sub.w	$C(a0),d1
0001163E 6500                       		bcs.s	Obj5D_Animate
00011640 0C41 0070                  		cmpi.w	#$70,d1
00011644 6400                       		bcc.s	Obj5D_Animate
00011646 0440 0050                  		subi.w	#$50,d0
0001164A 6400                       		bcc.s	loc_1159A
0001164C 4640                       		not.w	d0
0001164E D040                       		add.w	d0,d0
00011650                            
00011650                            loc_1159A:
00011650 0640 0060                  		addi.w	#$60,d0
00011654 0828 0000 0022             		btst	#0,$22(a0)
0001165A 6600                       		bne.s	loc_115A8
0001165C 4440                       		neg.w	d0
0001165E                            
0001165E                            loc_115A8:
0001165E 4400                       		neg.b	d0
00011660 E840                       		asr.w	#4,d0
00011662 0828 0000 0028             		btst	#0,$28(a0)
00011668 6700                       		beq.s	Obj5D_MoveSonic
0001166A 4440                       		neg.w	d0
0001166C                            
0001166C                            Obj5D_MoveSonic:
0001166C D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011670                            
00011670                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011670 5328 001E                  		subq.b	#1,$1E(a0)
00011674 6A00                       		bpl.s	Obj5D_ChkDel
00011676 117C 0000 001E             		move.b	#0,$1E(a0)
0001167C 5228 001B                  		addq.b	#1,$1B(a0)
00011680 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011686 6500                       		bcs.s	loc_115D8
00011688 117C 0000 001B             		move.b	#0,$1B(a0)
0001168E                            
0001168E                            loc_115D8:
0001168E 7000                       		moveq	#0,d0
00011690 0828 0000 0028             		btst	#0,$28(a0)
00011696 6700                       		beq.s	loc_115E4
00011698 7002                       		moveq	#2,d0
0001169A                            
0001169A                            loc_115E4:
0001169A D028 001B                  		add.b	$1B(a0),d0
0001169E 1140 001A                  		move.b	d0,$1A(a0)
000116A2                            
000116A2                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
000116A2 6100 C028                  		bsr.w	DisplaySprite
000116A6 3028 0008                  		move.w	8(a0),d0
000116AA 0240 FF80                  		andi.w	#$FF80,d0
000116AE 3238 F700                  		move.w	($FFFFF700).w,d1
000116B2 0441 0080                  		subi.w	#$80,d1
000116B6 0241 FF80                  		andi.w	#$FF80,d1
000116BA 9041                       		sub.w	d1,d0
000116BC 0C40 0280                  		cmpi.w	#$280,d0
000116C0 6200 C046                  		bhi.w	DeleteObject
000116C4 4E75                       		rts	
000116C6                            ; ===========================================================================
000116C6                            ; ---------------------------------------------------------------------------
000116C6                            ; Sprite mappings - fans (SLZ)
000116C6                            ; ---------------------------------------------------------------------------
000116C6                            Map_obj5D:
000116C6                            	include "_maps\obj5D.asm"
000116C6                            ; ---------------------------------------------------------------------------
000116C6                            ; Sprite mappings - fans (SLZ)
000116C6                            ; ---------------------------------------------------------------------------
000116C6 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
000116CA 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
000116CE 0000                       		dc.w byte_1161A-Map_obj5D
000116D0 02                         byte_1161A:	dc.b 2
000116D1 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000116D6 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000116DB 02                         byte_11625:	dc.b 2
000116DC F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000116E1 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000116E6 02                         byte_11630:	dc.b 2
000116E7 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000116EC 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000116F2 00                         		even
000116F2 00                         		even
000116F2                            
000116F2                            ; ===========================================================================
000116F2                            ; ---------------------------------------------------------------------------
000116F2                            ; Object 5E - seesaws (SLZ)
000116F2                            ; ---------------------------------------------------------------------------
000116F2                            
000116F2                            Obj5E:					; XREF: Obj_Index
000116F2 7000                       		moveq	#0,d0
000116F4 1028 0024                  		move.b	$24(a0),d0
000116F8 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
000116FC 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011700 3028 0030                  		move.w	$30(a0),d0
00011704 0240 FF80                  		andi.w	#$FF80,d0
00011708 3238 F700                  		move.w	($FFFFF700).w,d1
0001170C 0441 0080                  		subi.w	#$80,d1
00011710 0241 FF80                  		andi.w	#$FF80,d1
00011714 9041                       		sub.w	d1,d0
00011716 6B00 BFF0                  		bmi.w	DeleteObject
0001171A 0C40 0280                  		cmpi.w	#$280,d0
0001171E 6200 BFE8                  		bhi.w	DeleteObject
00011722 6000 BFA8                  		bra.w	DisplaySprite
00011726                            ; ===========================================================================
00011726 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011728 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0001172A 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
0001172C 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0001172E 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011730 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011732                            ; ===========================================================================
00011732                            
00011732                            Obj5E_Main:				; XREF: Obj5E_Index
00011732 5428 0024                  		addq.b	#2,$24(a0)
00011736 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
0001173E 317C 0374 0002             		move.w	#$374,2(a0)
00011744 0028 0004 0001             		ori.b	#4,1(a0)
0001174A 117C 0004 0018             		move.b	#4,$18(a0)
00011750 117C 0030 0019             		move.b	#$30,$19(a0)
00011756 3168 0008 0030             		move.w	8(a0),$30(a0)
0001175C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011760 6600                       		bne.s	loc_116D2	; if not, branch
00011762 6100 C404                  		bsr.w	SingleObjLoad2
00011766 6600                       		bne.s	loc_116D2
00011768 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
0001176C 5C29 0024                  		addq.b	#6,$24(a1)
00011770 3368 0008 0008             		move.w	8(a0),8(a1)
00011776 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001177C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011782 2348 003C                  		move.l	a0,$3C(a1)
00011786                            
00011786                            loc_116D2:
00011786 0828 0000 0022             		btst	#0,$22(a0)
0001178C 6700                       		beq.s	loc_116E0
0001178E 117C 0002 001A             		move.b	#2,$1A(a0)
00011794                            
00011794                            loc_116E0:
00011794 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001179A                            
0001179A                            Obj5E_Slope:				; XREF: Obj5E_Index
0001179A 1228 003A                  		move.b	$3A(a0),d1
0001179E 6100 0000                  		bsr.w	loc_11766
000117A2 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000117A8 0828 0000 001A             		btst	#0,$1A(a0)
000117AE 6700                       		beq.s	loc_11702
000117B0 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000117B6                            
000117B6                            loc_11702:
000117B6 43F8 D000                  		lea	($FFFFD000).w,a1
000117BA 3169 0012 0038             		move.w	$12(a1),$38(a0)
000117C0 323C 0030                  		move.w	#$30,d1
000117C4 4EB9 0000 7626             		jsr	(SlopeObject).l
000117CA 4E75                       		rts	
000117CC                            ; ===========================================================================
000117CC                            
000117CC                            Obj5E_Slope2:				; XREF: Obj5E_Index
000117CC 6100 0000                  		bsr.w	loc_1174A
000117D0 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000117D6 0828 0000 001A             		btst	#0,$1A(a0)
000117DC 6700                       		beq.s	loc_11730
000117DE 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000117E4                            
000117E4                            loc_11730:
000117E4 323C 0030                  		move.w	#$30,d1
000117E8 4EB9 0000 76C6             		jsr	(ExitPlatform).l
000117EE 323C 0030                  		move.w	#$30,d1
000117F2 3428 0008                  		move.w	8(a0),d2
000117F6 4EB9 0000 8624             		jsr	SlopeObject2
000117FC 4E75                       		rts	
000117FE                            ; ===========================================================================
000117FE                            
000117FE                            loc_1174A:				; XREF: Obj5E_Slope2
000117FE 7202                       		moveq	#2,d1
00011800 43F8 D000                  		lea	($FFFFD000).w,a1
00011804 3028 0008                  		move.w	8(a0),d0
00011808 9069 0008                  		sub.w	8(a1),d0
0001180C 6400                       		bcc.s	loc_1175E
0001180E 4440                       		neg.w	d0
00011810 7200                       		moveq	#0,d1
00011812                            
00011812                            loc_1175E:
00011812 0C40 0008                  		cmpi.w	#8,d0
00011816 6400                       		bcc.s	loc_11766
00011818 7201                       		moveq	#1,d1
0001181A                            
0001181A                            loc_11766:
0001181A 1028 001A                  		move.b	$1A(a0),d0
0001181E B001                       		cmp.b	d1,d0
00011820 6700                       		beq.s	locret_11790
00011822 6400                       		bcc.s	loc_11772
00011824 5400                       		addq.b	#2,d0
00011826                            
00011826                            loc_11772:
00011826 5300                       		subq.b	#1,d0
00011828 1140 001A                  		move.b	d0,$1A(a0)
0001182C 1141 003A                  		move.b	d1,$3A(a0)
00011830 08A8 0000 0001             		bclr	#0,1(a0)
00011836 0828 0001 001A             		btst	#1,$1A(a0)
0001183C 6700                       		beq.s	locret_11790
0001183E 08E8 0000 0001             		bset	#0,1(a0)
00011844                            
00011844                            locret_11790:
00011844 4E75                       		rts	
00011846                            ; ===========================================================================
00011846                            
00011846                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011846 5428 0024                  		addq.b	#2,$24(a0)
0001184A 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011852 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011858 0028 0004 0001             		ori.b	#4,1(a0)
0001185E 117C 0004 0018             		move.b	#4,$18(a0)
00011864 117C 008B 0020             		move.b	#$8B,$20(a0)
0001186A 117C 000C 0019             		move.b	#$C,$19(a0)
00011870 3168 0008 0030             		move.w	8(a0),$30(a0)
00011876 0668 0028 0008             		addi.w	#$28,8(a0)
0001187C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011882 117C 0001 001A             		move.b	#1,$1A(a0)
00011888 0828 0000 0022             		btst	#0,$22(a0)
0001188E 6700                       		beq.s	Obj5E_MoveSpike
00011890 0468 0050 0008             		subi.w	#$50,8(a0)
00011896 117C 0002 003A             		move.b	#2,$3A(a0)
0001189C                            
0001189C                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001189C 2268 003C                  		movea.l	$3C(a0),a1
000118A0 7000                       		moveq	#0,d0
000118A2 1028 003A                  		move.b	$3A(a0),d0
000118A6 9029 003A                  		sub.b	$3A(a1),d0
000118AA 6700                       		beq.s	loc_1183E
000118AC 6400                       		bcc.s	loc_117FC
000118AE 4400                       		neg.b	d0
000118B0                            
000118B0                            loc_117FC:
000118B0 323C F7E8                  		move.w	#-$818,d1
000118B4 343C FEEC                  		move.w	#-$114,d2
000118B8 0C00 0001                  		cmpi.b	#1,d0
000118BC 6700                       		beq.s	loc_11822
000118BE 323C F510                  		move.w	#-$AF0,d1
000118C2 343C FF34                  		move.w	#-$CC,d2
000118C6 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000118CC 6D00                       		blt.s	loc_11822
000118CE 323C F200                  		move.w	#-$E00,d1
000118D2 343C FF60                  		move.w	#-$A0,d2
000118D6                            
000118D6                            loc_11822:
000118D6 3141 0012                  		move.w	d1,$12(a0)
000118DA 3142 0010                  		move.w	d2,$10(a0)
000118DE 3028 0008                  		move.w	8(a0),d0
000118E2 9068 0030                  		sub.w	$30(a0),d0
000118E6 6400                       		bcc.s	loc_11838
000118E8 4468 0010                  		neg.w	$10(a0)
000118EC                            
000118EC                            loc_11838:
000118EC 5428 0024                  		addq.b	#2,$24(a0)
000118F0 6000                       		bra.s	Obj5E_SpikeFall
000118F2                            ; ===========================================================================
000118F2                            
000118F2                            loc_1183E:				; XREF: Obj5E_MoveSpike
000118F2 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000118F8 7000                       		moveq	#0,d0
000118FA 1029 001A                  		move.b	$1A(a1),d0
000118FE 343C 0028                  		move.w	#$28,d2
00011902 3228 0008                  		move.w	8(a0),d1
00011906 9268 0030                  		sub.w	$30(a0),d1
0001190A 6400                       		bcc.s	loc_1185C
0001190C 4442                       		neg.w	d2
0001190E 5440                       		addq.w	#2,d0
00011910                            
00011910                            loc_1185C:
00011910 D040                       		add.w	d0,d0
00011912 3228 0034                  		move.w	$34(a0),d1
00011916 D272 0000                  		add.w	(a2,d0.w),d1
0001191A 3141 000C                  		move.w	d1,$C(a0)
0001191E D468 0030                  		add.w	$30(a0),d2
00011922 3142 0008                  		move.w	d2,8(a0)
00011926 4268 000E                  		clr.w	$E(a0)
0001192A 4268 000A                  		clr.w	$A(a0)
0001192E 4E75                       		rts	
00011930                            ; ===========================================================================
00011930                            
00011930                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011930 4A68 0012                  		tst.w	$12(a0)
00011934 6A00                       		bpl.s	loc_1189A
00011936 6100 BD42                  		bsr.w	ObjectFall
0001193A 3028 0034                  		move.w	$34(a0),d0
0001193E 0440 002F                  		subi.w	#$2F,d0
00011942 B068 000C                  		cmp.w	$C(a0),d0
00011946 6E00                       		bgt.s	locret_11898
00011948 6100 BD30                  		bsr.w	ObjectFall
0001194C                            
0001194C                            locret_11898:
0001194C 4E75                       		rts	
0001194E                            ; ===========================================================================
0001194E                            
0001194E                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001194E 6100 BD2A                  		bsr.w	ObjectFall
00011952 2268 003C                  		movea.l	$3C(a0),a1
00011956 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001195C 7000                       		moveq	#0,d0
0001195E 1029 001A                  		move.b	$1A(a1),d0
00011962 3228 0008                  		move.w	8(a0),d1
00011966 9268 0030                  		sub.w	$30(a0),d1
0001196A 6400                       		bcc.s	loc_118BA
0001196C 5440                       		addq.w	#2,d0
0001196E                            
0001196E                            loc_118BA:
0001196E D040                       		add.w	d0,d0
00011970 3228 0034                  		move.w	$34(a0),d1
00011974 D272 0000                  		add.w	(a2,d0.w),d1
00011978 B268 000C                  		cmp.w	$C(a0),d1
0001197C 6E00                       		bgt.s	locret_11938
0001197E 2268 003C                  		movea.l	$3C(a0),a1
00011982 7202                       		moveq	#2,d1
00011984 4A68 0010                  		tst.w	$10(a0)
00011988 6B00                       		bmi.s	Obj5E_Spring
0001198A 7200                       		moveq	#0,d1
0001198C                            
0001198C                            Obj5E_Spring:
0001198C 1341 003A                  		move.b	d1,$3A(a1)
00011990 1141 003A                  		move.b	d1,$3A(a0)
00011994 B229 001A                  		cmp.b	$1A(a1),d1
00011998 6700                       		beq.s	loc_1192C
0001199A 08A9 0003 0022             		bclr	#3,$22(a1)
000119A0 6700                       		beq.s	loc_1192C
000119A2 4229 0025                  		clr.b	$25(a1)
000119A6 137C 0002 0024             		move.b	#2,$24(a1)
000119AC 45F8 D000                  		lea	($FFFFD000).w,a2
000119B0 3568 0012 0012             		move.w	$12(a0),$12(a2)
000119B6 446A 0012                  		neg.w	$12(a2)
000119BA 08EA 0001 0022             		bset	#1,$22(a2)
000119C0 08AA 0003 0022             		bclr	#3,$22(a2)
000119C6 422A 003C                  		clr.b	$3C(a2)
000119CA 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000119D0 157C 0002 0024             		move.b	#2,$24(a2)
000119D6 303C 00CC                  		move.w	#$CC,d0
000119DA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
000119E0                            
000119E0                            loc_1192C:
000119E0 4268 0010                  		clr.w	$10(a0)
000119E4 4268 0012                  		clr.w	$12(a0)
000119E8 5528 0024                  		subq.b	#2,$24(a0)
000119EC                            
000119EC                            locret_11938:
000119EC 4E75                       		rts	
000119EE                            ; ===========================================================================
000119EE FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000119F8                            
000119F8                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011A28                            		even
00011A28                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011A58                            		even
00011A58                            ; ---------------------------------------------------------------------------
00011A58                            ; Sprite mappings - seesaws (SLZ)
00011A58                            ; ---------------------------------------------------------------------------
00011A58                            Map_obj5E:
00011A58                            	include "_maps\obj5E.asm"
00011A58                            ; ---------------------------------------------------------------------------
00011A58                            ; Sprite mappings - seesaws (SLZ)
00011A58                            ; ---------------------------------------------------------------------------
00011A58 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011A5C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011A60 07                         byte_119AC:	dc.b 7
00011A61 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011A66 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011A6B E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011A70 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011A75 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011A7A F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011A7F FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011A84 04                         byte_119D0:	dc.b 4
00011A85 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011A8A E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011A8F E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011A94 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011A9A 00                         		even
00011A9A 00                         		even
00011A9A                            
00011A9A                            ; ---------------------------------------------------------------------------
00011A9A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011A9A                            ; ---------------------------------------------------------------------------
00011A9A                            Map_obj5Ea:
00011A9A                            	include "_maps\obj5Eballs.asm"
00011A9A                            ; ---------------------------------------------------------------------------
00011A9A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011A9A                            ; ---------------------------------------------------------------------------
00011A9A 0000                       		dc.w byte_119EA-Map_obj5Ea
00011A9C 0000                       		dc.w byte_119F0-Map_obj5Ea
00011A9E 01                         byte_119EA:	dc.b 1
00011A9F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011AA4 01                         byte_119F0:	dc.b 1
00011AA5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011AAA                            		even
00011AAA                            		even
00011AAA                            
00011AAA                            ; ===========================================================================
00011AAA                            ; ---------------------------------------------------------------------------
00011AAA                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011AAA                            ; ---------------------------------------------------------------------------
00011AAA                            
00011AAA                            Obj5F:					; XREF: Obj_Index
00011AAA 7000                       		moveq	#0,d0
00011AAC 1028 0024                  		move.b	$24(a0),d0
00011AB0 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011AB4 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011AB8                            ; ===========================================================================
00011AB8 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011ABA 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011ABC 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011ABE 0000                       		dc.w Obj5F_End-Obj5F_Index
00011AC0                            ; ===========================================================================
00011AC0                            
00011AC0                            Obj5F_Main:				; XREF: Obj5F_Index
00011AC0 5428 0024                  		addq.b	#2,$24(a0)
00011AC4 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011ACC 317C 0400 0002             		move.w	#$400,2(a0)
00011AD2 0028 0004 0001             		ori.b	#4,1(a0)
00011AD8 117C 0003 0018             		move.b	#3,$18(a0)
00011ADE 117C 000C 0019             		move.b	#$C,$19(a0)
00011AE4 1028 0028                  		move.b	$28(a0),d0
00011AE8 6700                       		beq.s	loc_11A3C
00011AEA 1140 0024                  		move.b	d0,$24(a0)
00011AEE 4E75                       		rts	
00011AF0                            ; ===========================================================================
00011AF0                            
00011AF0                            loc_11A3C:
00011AF0 117C 009A 0020             		move.b	#$9A,$20(a0)
00011AF6 0868 0000 0022             		bchg	#0,$22(a0)
00011AFC                            
00011AFC                            Obj5F_Action:				; XREF: Obj5F_Index
00011AFC 7000                       		moveq	#0,d0
00011AFE 1028 0025                  		move.b	$25(a0),d0
00011B02 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011B06 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011B0A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011B10 6100 8CE6                  		bsr.w	AnimateSprite
00011B14 6000 DC5E                  		bra.w	MarkObjGone
00011B18                            ; ===========================================================================
00011B18 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011B1A 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011B1C 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011B1E                            ; ===========================================================================
00011B1E                            
00011B1E                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011B1E 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011B22 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B26 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011B28 5428 0025                  		addq.b	#2,$25(a0)
00011B2C 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011B32 317C 0010 0010             		move.w	#$10,$10(a0)
00011B38 117C 0001 001C             		move.b	#1,$1C(a0)
00011B3E 0868 0000 0022             		bchg	#0,$22(a0)
00011B44 6700                       		beq.s	locret_11A96
00011B46 4468 0010                  		neg.w	$10(a0)		; change direction
00011B4A                            
00011B4A                            locret_11A96:
00011B4A 4E75                       		rts	
00011B4C                            ; ===========================================================================
00011B4C                            
00011B4C                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011B4C 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011B50 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B54 6B00                       		bmi.s	loc_11AA8
00011B56 6100 BB4E                  		bsr.w	SpeedToPos
00011B5A 4E75                       		rts	
00011B5C                            ; ===========================================================================
00011B5C                            
00011B5C                            loc_11AA8:
00011B5C 5528 0025                  		subq.b	#2,$25(a0)
00011B60 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011B66 4268 0010                  		clr.w	$10(a0)		; stop walking
00011B6A 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00011B70 4E75                       		rts	
00011B72                            ; ===========================================================================
00011B72                            
00011B72                            Obj5F_Explode:				; XREF: Obj5F_Index2
00011B72 5368 0030                  		subq.w	#1,$30(a0)
00011B76 6A00                       		bpl.s	locret_11AD0
00011B78 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00011B7C 117C 0000 0024             		move.b	#0,$24(a0)
00011B82                            
00011B82                            locret_11AD0:
00011B82 4E75                       		rts	
00011B84                            ; ===========================================================================
00011B84                            
00011B84                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00011B84 3038 D008                  		move.w	($FFFFD008).w,d0
00011B88 9068 0008                  		sub.w	8(a0),d0
00011B8C 6400                       		bcc.s	loc_11ADE
00011B8E 4440                       		neg.w	d0
00011B90                            
00011B90                            loc_11ADE:
00011B90 0C40 0060                  		cmpi.w	#$60,d0
00011B94 6400                       		bcc.s	locret_11B5E
00011B96 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011B9A 9068 000C                  		sub.w	$C(a0),d0
00011B9E 6400                       		bcc.s	Obj5F_MakeFuse
00011BA0 4440                       		neg.w	d0
00011BA2                            
00011BA2                            Obj5F_MakeFuse:
00011BA2 0C40 0060                  		cmpi.w	#$60,d0
00011BA6 6400                       		bcc.s	locret_11B5E
00011BA8 4A78 FE08                  		tst.w	($FFFFFE08).w
00011BAC 6600                       		bne.s	locret_11B5E
00011BAE 117C 0004 0025             		move.b	#4,$25(a0)
00011BB4 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00011BBA 4268 0010                  		clr.w	$10(a0)
00011BBE 117C 0002 001C             		move.b	#2,$1C(a0)
00011BC4 6100 BFA2                  		bsr.w	SingleObjLoad2
00011BC8 6600                       		bne.s	locret_11B5E
00011BCA 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00011BCE 3368 0008 0008             		move.w	8(a0),8(a1)
00011BD4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011BDA 3368 000C 0034             		move.w	$C(a0),$34(a1)
00011BE0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011BE6 137C 0004 0028             		move.b	#4,$28(a1)
00011BEC 137C 0003 001C             		move.b	#3,$1C(a1)
00011BF2 337C 0010 0012             		move.w	#$10,$12(a1)
00011BF8 0828 0001 0022             		btst	#1,$22(a0)
00011BFE 6700                       		beq.s	loc_11B54
00011C00 4469 0012                  		neg.w	$12(a1)
00011C04                            
00011C04                            loc_11B54:
00011C04 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00011C0A 2348 003C                  		move.l	a0,$3C(a1)
00011C0E                            
00011C0E                            locret_11B5E:
00011C0E 4E75                       		rts	
00011C10                            ; ===========================================================================
00011C10                            
00011C10                            Obj5F_Display:				; XREF: Obj5F_Index
00011C10 6100                       		bsr.s	loc_11B70
00011C12 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011C18 6100 8BDE                  		bsr.w	AnimateSprite
00011C1C 6000 DB56                  		bra.w	MarkObjGone
00011C20                            ; ===========================================================================
00011C20                            
00011C20                            loc_11B70:
00011C20 5368 0030                  		subq.w	#1,$30(a0)
00011C24 6B00                       		bmi.s	loc_11B7C
00011C26 6100 BA7E                  		bsr.w	SpeedToPos
00011C2A 4E75                       		rts	
00011C2C                            ; ===========================================================================
00011C2C                            
00011C2C                            loc_11B7C:
00011C2C 4268 0030                  		clr.w	$30(a0)
00011C30 4228 0024                  		clr.b	$24(a0)
00011C34 3168 0034 000C             		move.w	$34(a0),$C(a0)
00011C3A 7203                       		moveq	#3,d1
00011C3C 2248                       		movea.l	a0,a1
00011C3E 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00011C44 6000                       		bra.s	Obj5F_MakeShrap
00011C46                            ; ===========================================================================
00011C46                            
00011C46                            Obj5F_Loop:
00011C46 6100 BF20                  		bsr.w	SingleObjLoad2
00011C4A 6600                       		bne.s	loc_11BCE
00011C4C                            
00011C4C                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00011C4C 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00011C50 3368 0008 0008             		move.w	8(a0),8(a1)
00011C56 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C5C 137C 0006 0028             		move.b	#6,$28(a1)
00011C62 137C 0004 001C             		move.b	#4,$1C(a1)
00011C68 335A 0010                  		move.w	(a2)+,$10(a1)
00011C6C 335A 0012                  		move.w	(a2)+,$12(a1)
00011C70 137C 0098 0020             		move.b	#$98,$20(a1)
00011C76 08E9 0007 0001             		bset	#7,1(a1)
00011C7C                            
00011C7C                            loc_11BCE:
00011C7C 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00011C80                            
00011C80 117C 0006 0024             		move.b	#6,$24(a0)
00011C86                            
00011C86                            Obj5F_End:				; XREF: Obj5F_Index
00011C86 6100 BA1E                  		bsr.w	SpeedToPos
00011C8A 0668 0018 0012             		addi.w	#$18,$12(a0)
00011C90 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011C96 6100 8B60                  		bsr.w	AnimateSprite
00011C9A 4A28 0001                  		tst.b	1(a0)
00011C9E 6A00 BA68                  		bpl.w	DeleteObject
00011CA2 6000 BA28                  		bra.w	DisplaySprite
00011CA6                            ; ===========================================================================
00011CA6 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00011CB6                            
00011CB6                            Ani_obj5F:
00011CB6                            	include "_anim\obj5F.asm"
00011CB6                            ; ---------------------------------------------------------------------------
00011CB6                            ; Animation script - Bomb enemy
00011CB6                            ; ---------------------------------------------------------------------------
00011CB6 0000                       		dc.w byte_11C12-Ani_obj5F
00011CB8 0000                       		dc.w byte_11C16-Ani_obj5F
00011CBA 0000                       		dc.w byte_11C1C-Ani_obj5F
00011CBC 0000                       		dc.w byte_11C20-Ani_obj5F
00011CBE 0000                       		dc.w byte_11C24-Ani_obj5F
00011CC0 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00011CC4 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00011CCA 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00011CCE 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00011CD2 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00011CD6                            		even
00011CD6                            		even
00011CD6                            
00011CD6                            ; ---------------------------------------------------------------------------
00011CD6                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011CD6                            ; ---------------------------------------------------------------------------
00011CD6                            Map_obj5F:
00011CD6                            	include "_maps\obj5F.asm"
00011CD6                            ; ---------------------------------------------------------------------------
00011CD6                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011CD6                            ; ---------------------------------------------------------------------------
00011CD6 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00011CDA 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00011CDE 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00011CE2 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00011CE6 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00011CEA 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00011CEE 03                         byte_11C40:	dc.b 3
00011CEF F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011CF4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011CF9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011CFE 03                         byte_11C50:	dc.b 3
00011CFF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011D04 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011D09 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011D0E 03                         byte_11C60:	dc.b 3
00011D0F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011D14 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00011D19 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011D1E 03                         byte_11C70:	dc.b 3
00011D1F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011D24 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00011D29 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011D2E 03                         byte_11C80:	dc.b 3
00011D2F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011D34 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00011D39 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011D3E 03                         byte_11C90:	dc.b 3
00011D3F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011D44 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00011D49 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011D4E 02                         byte_11CA0:	dc.b 2
00011D4F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011D54 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011D59 02                         byte_11CAB:	dc.b 2
00011D5A F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011D5F 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011D64 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00011D65 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00011D6A 01                         byte_11CBC:	dc.b 1			; fuse
00011D6B E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00011D70 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00011D71 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00011D76 01                         byte_11CC8:	dc.b 1			; fireball
00011D77 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00011D7C                            		even
00011D7C                            		even
00011D7C                            
00011D7C                            ; ===========================================================================
00011D7C                            ; ---------------------------------------------------------------------------
00011D7C                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00011D7C                            ; ---------------------------------------------------------------------------
00011D7C                            
00011D7C                            Obj60:					; XREF: Obj_Index
00011D7C 7000                       		moveq	#0,d0
00011D7E 1028 0024                  		move.b	$24(a0),d0
00011D82 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00011D86 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00011D8A                            ; ===========================================================================
00011D8A 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00011D8C 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00011D8E 0000                       		dc.w Obj60_Display-Obj60_Index
00011D90 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00011D92 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00011D94                            ; ===========================================================================
00011D94                            
00011D94                            Obj60_Main:				; XREF: Obj60_Index
00011D94 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00011D9C 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00011DA2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011DA8 6700                       		beq.s	loc_11D02
00011DAA 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00011DB0                            
00011DB0                            loc_11D02:
00011DB0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011DB6 6600                       		bne.s	loc_11D10
00011DB8 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00011DBE                            
00011DBE                            loc_11D10:
00011DBE 0028 0004 0001             		ori.b	#4,1(a0)
00011DC4 117C 0004 0018             		move.b	#4,$18(a0)
00011DCA 117C 000B 0020             		move.b	#$B,$20(a0)
00011DD0 117C 000C 0019             		move.b	#$C,$19(a0)
00011DD6 7400                       		moveq	#0,d2
00011DD8 45E8 0037                  		lea	$37(a0),a2
00011DDC 264A                       		movea.l	a2,a3
00011DDE 524A                       		addq.w	#1,a2
00011DE0 7203                       		moveq	#3,d1
00011DE2                            
00011DE2                            Obj60_MakeOrbs:
00011DE2 6100 BD84                  		bsr.w	SingleObjLoad2
00011DE6 6600                       		bne.s	loc_11D90
00011DE8 5213                       		addq.b	#1,(a3)
00011DEA 3A09                       		move.w	a1,d5
00011DEC 0445 D000                  		subi.w	#-$3000,d5
00011DF0 EC4D                       		lsr.w	#6,d5
00011DF2 0245 007F                  		andi.w	#$7F,d5
00011DF6 14C5                       		move.b	d5,(a2)+
00011DF8 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00011DFA 137C 0006 0024             		move.b	#6,$24(a1)
00011E00 2368 0004 0004             		move.l	4(a0),4(a1)
00011E06 3368 0002 0002             		move.w	2(a0),2(a1)
00011E0C 0029 0004 0001             		ori.b	#4,1(a1)
00011E12 137C 0004 0018             		move.b	#4,$18(a1)
00011E18 137C 0008 0019             		move.b	#8,$19(a1)
00011E1E 137C 0003 001A             		move.b	#3,$1A(a1)
00011E24 137C 0098 0020             		move.b	#$98,$20(a1)
00011E2A 1342 0026                  		move.b	d2,$26(a1)
00011E2E 0602 0040                  		addi.b	#$40,d2
00011E32 2348 003C                  		move.l	a0,$3C(a1)
00011E36 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00011E3A                            
00011E3A                            loc_11D90:
00011E3A 7001                       		moveq	#1,d0
00011E3C 0828 0000 0022             		btst	#0,$22(a0)
00011E42 6700                       		beq.s	Obj60_Move
00011E44 4440                       		neg.w	d0
00011E46                            
00011E46                            Obj60_Move:
00011E46 1140 0036                  		move.b	d0,$36(a0)
00011E4A 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00011E50 5428 0024                  		addq.b	#2,$24(a0)
00011E54 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00011E5A 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00011E60 6700                       		beq.s	locret_11DBC	; if not, branch
00011E62 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00011E66                            
00011E66                            locret_11DBC:
00011E66 4E75                       		rts	
00011E68                            ; ===========================================================================
00011E68                            
00011E68                            Obj60_ChkSonic:				; XREF: Obj60_Index
00011E68 3038 D008                  		move.w	($FFFFD008).w,d0
00011E6C 9068 0008                  		sub.w	8(a0),d0
00011E70 6400                       		bcc.s	loc_11DCA
00011E72 4440                       		neg.w	d0
00011E74                            
00011E74                            loc_11DCA:
00011E74 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00011E78 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011E7A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011E7E 9068 000C                  		sub.w	$C(a0),d0
00011E82 6400                       		bcc.s	loc_11DDC
00011E84 4440                       		neg.w	d0
00011E86                            
00011E86                            loc_11DDC:
00011E86 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00011E8A 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011E8C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011E90 6600                       		bne.s	Obj60_Animate	; if yes, branch
00011E92 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00011E98                            
00011E98                            Obj60_Animate:
00011E98 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00011E9E 6100 8958                  		bsr.w	AnimateSprite
00011EA2 6000 0000                  		bra.w	Obj60_ChkDel
00011EA6                            ; ===========================================================================
00011EA6                            
00011EA6                            Obj60_Display:				; XREF: Obj60_Index
00011EA6 6100 B7FE                  		bsr.w	SpeedToPos
00011EAA                            
00011EAA                            Obj60_ChkDel:				; XREF: Obj60_Animate
00011EAA 3028 0008                  		move.w	8(a0),d0
00011EAE 0240 FF80                  		andi.w	#$FF80,d0
00011EB2 3238 F700                  		move.w	($FFFFF700).w,d1
00011EB6 0441 0080                  		subi.w	#$80,d1
00011EBA 0241 FF80                  		andi.w	#$FF80,d1
00011EBE 9041                       		sub.w	d1,d0
00011EC0 0C40 0280                  		cmpi.w	#$280,d0
00011EC4 6200 0000                  		bhi.w	Obj60_ChkGone
00011EC8 6000 B802                  		bra.w	DisplaySprite
00011ECC                            ; ===========================================================================
00011ECC                            
00011ECC                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00011ECC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011ED0 7000                       		moveq	#0,d0
00011ED2 1028 0023                  		move.b	$23(a0),d0
00011ED6 6700                       		beq.s	loc_11E34
00011ED8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011EDE                            
00011EDE                            loc_11E34:
00011EDE 45E8 0037                  		lea	$37(a0),a2
00011EE2 7400                       		moveq	#0,d2
00011EE4 141A                       		move.b	(a2)+,d2
00011EE6 5342                       		subq.w	#1,d2
00011EE8 6500                       		bcs.s	Obj60_Delete
00011EEA                            
00011EEA                            loc_11E40:
00011EEA 7000                       		moveq	#0,d0
00011EEC 101A                       		move.b	(a2)+,d0
00011EEE ED48                       		lsl.w	#6,d0
00011EF0 0680 00FF D000             		addi.l	#$FFD000,d0
00011EF6 2240                       		movea.l	d0,a1
00011EF8 6100 B810                  		bsr.w	DeleteObject2
00011EFC 51CA FFEC                  		dbf	d2,loc_11E40
00011F00                            
00011F00                            Obj60_Delete:
00011F00 6000 B806                  		bra.w	DeleteObject
00011F04                            ; ===========================================================================
00011F04                            
00011F04                            Obj60_MoveOrb:				; XREF: Obj60_Index
00011F04 2268 003C                  		movea.l	$3C(a0),a1
00011F08 0C11 0060                  		cmpi.b	#$60,0(a1)
00011F0C 6600 B7FA                  		bne.w	DeleteObject
00011F10 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00011F16 6600                       		bne.s	Obj60_Circle
00011F18 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00011F1E 6600                       		bne.s	Obj60_Circle
00011F20 5428 0024                  		addq.b	#2,$24(a0)
00011F24 5329 0037                  		subq.b	#1,$37(a1)
00011F28 6600                       		bne.s	Obj60_FireOrb
00011F2A 5429 0024                  		addq.b	#2,$24(a1)
00011F2E                            
00011F2E                            Obj60_FireOrb:
00011F2E 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00011F34 0829 0000 0022             		btst	#0,$22(a1)
00011F3A 6700                       		beq.s	Obj60_Display2
00011F3C 4468 0010                  		neg.w	$10(a0)
00011F40                            
00011F40                            Obj60_Display2:
00011F40 6000 B78A                  		bra.w	DisplaySprite
00011F44                            ; ===========================================================================
00011F44                            
00011F44                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00011F44 1028 0026                  		move.b	$26(a0),d0
00011F48 4EB9 0000 29DA             		jsr	(CalcSine).l
00011F4E E841                       		asr.w	#4,d1
00011F50 D269 0008                  		add.w	8(a1),d1
00011F54 3141 0008                  		move.w	d1,8(a0)
00011F58 E840                       		asr.w	#4,d0
00011F5A D069 000C                  		add.w	$C(a1),d0
00011F5E 3140 000C                  		move.w	d0,$C(a0)
00011F62 1029 0036                  		move.b	$36(a1),d0
00011F66 D128 0026                  		add.b	d0,$26(a0)
00011F6A 6000 B760                  		bra.w	DisplaySprite
00011F6E                            ; ===========================================================================
00011F6E                            
00011F6E                            Obj60_ChkDel2:				; XREF: Obj60_Index
00011F6E 6100 B736                  		bsr.w	SpeedToPos
00011F72 4A28 0001                  		tst.b	1(a0)
00011F76 6A00 B790                  		bpl.w	DeleteObject
00011F7A 6000 B750                  		bra.w	DisplaySprite
00011F7E                            ; ===========================================================================
00011F7E                            Ani_obj60:
00011F7E                            	include "_anim\obj60.asm"
00011F7E                            ; ---------------------------------------------------------------------------
00011F7E                            ; Animation script - Orbinaut enemy
00011F7E                            ; ---------------------------------------------------------------------------
00011F7E 0000                       		dc.w byte_11EDA-Ani_obj60
00011F80 0000                       		dc.w byte_11EDE-Ani_obj60
00011F82 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00011F86 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00011F8C                            		even
00011F8C                            		even
00011F8C                            
00011F8C                            ; ---------------------------------------------------------------------------
00011F8C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011F8C                            ; ---------------------------------------------------------------------------
00011F8C                            Map_obj60:
00011F8C                            	include "_maps\obj60.asm"
00011F8C                            ; ---------------------------------------------------------------------------
00011F8C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011F8C                            ; ---------------------------------------------------------------------------
00011F8C 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00011F90 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00011F94 01                         byte_11EEC:	dc.b 1
00011F95 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011F9A 01                         byte_11EF2:	dc.b 1
00011F9B F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00011FA0 01                         byte_11EF8:	dc.b 1
00011FA1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00011FA6 01                         byte_11EFE:	dc.b 1
00011FA7 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00011FAC                            		even
00011FAC                            		even
00011FAC                            
00011FAC                            ; ===========================================================================
00011FAC                            ; ---------------------------------------------------------------------------
00011FAC                            ; Object 16 - harpoon (LZ)
00011FAC                            ; ---------------------------------------------------------------------------
00011FAC                            
00011FAC                            Obj16:					; XREF: Obj_Index
00011FAC 7000                       		moveq	#0,d0
00011FAE 1028 0024                  		move.b	$24(a0),d0
00011FB2 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00011FB6 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00011FBA                            ; ===========================================================================
00011FBA 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00011FBC 0000                       		dc.w Obj16_Move-Obj16_Index
00011FBE 0000                       		dc.w Obj16_Wait-Obj16_Index
00011FC0                            ; ===========================================================================
00011FC0                            
00011FC0                            Obj16_Main:				; XREF: Obj16_Index
00011FC0 5428 0024                  		addq.b	#2,$24(a0)
00011FC4 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00011FCC 317C 03CC 0002             		move.w	#$3CC,2(a0)
00011FD2 0028 0004 0001             		ori.b	#4,1(a0)
00011FD8 117C 0004 0018             		move.b	#4,$18(a0)
00011FDE 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00011FE4 117C 0014 0019             		move.b	#$14,$19(a0)
00011FEA 317C 003C 0030             		move.w	#60,$30(a0)
00011FF0                            
00011FF0                            Obj16_Move:				; XREF: Obj16_Index
00011FF0 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00011FF6 6100 8800                  		bsr.w	AnimateSprite
00011FFA 7000                       		moveq	#0,d0
00011FFC 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012000 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012006 6000 D76C                  		bra.w	MarkObjGone
0001200A                            ; ===========================================================================
0001200A 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012010                            ; ===========================================================================
00012010                            
00012010                            Obj16_Wait:				; XREF: Obj16_Index
00012010 5368 0030                  		subq.w	#1,$30(a0)
00012014 6A00                       		bpl.s	Obj16_ChkDel
00012016 317C 003C 0030             		move.w	#60,$30(a0)
0001201C 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012020 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012026                            
00012026                            Obj16_ChkDel:
00012026 6000 D74C                  		bra.w	MarkObjGone
0001202A                            ; ===========================================================================
0001202A                            Ani_obj16:
0001202A                            	include "_anim\obj16.asm"
0001202A                            ; ---------------------------------------------------------------------------
0001202A                            ; Animation script - harpoon (LZ)
0001202A                            ; ---------------------------------------------------------------------------
0001202A 0000                       		dc.w byte_11F8A-Ani_obj16
0001202C 0000                       		dc.w byte_11F8E-Ani_obj16
0001202E 0000                       		dc.w byte_11F92-Ani_obj16
00012030 0000                       		dc.w byte_11F96-Ani_obj16
00012032 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012036 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001203A 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
0001203E 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012042                            		even
00012042                            		even
00012042                            
00012042                            ; ---------------------------------------------------------------------------
00012042                            ; Sprite mappings - harpoon (LZ)
00012042                            ; ---------------------------------------------------------------------------
00012042                            Map_obj16:
00012042                            	include "_maps\obj16.asm"
00012042                            ; ---------------------------------------------------------------------------
00012042                            ; Sprite mappings - harpoon (LZ)
00012042                            ; ---------------------------------------------------------------------------
00012042 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012046 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001204A 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
0001204E 01                         byte_11FA6:	dc.b 1
0001204F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012054 01                         byte_11FAC:	dc.b 1
00012055 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001205A 02                         byte_11FB2:	dc.b 2
0001205B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012060 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012065 01                         byte_11FBD:	dc.b 1
00012066 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001206B 01                         byte_11FC3:	dc.b 1
0001206C E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012071 02                         byte_11FC9:	dc.b 2
00012072 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012077 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001207C                            		even
0001207C                            		even
0001207C                            
0001207C                            ; ===========================================================================
0001207C                            ; ---------------------------------------------------------------------------
0001207C                            ; Object 61 - blocks (LZ)
0001207C                            ; ---------------------------------------------------------------------------
0001207C                            
0001207C                            Obj61:					; XREF: Obj_Index
0001207C 7000                       		moveq	#0,d0
0001207E 1028 0024                  		move.b	$24(a0),d0
00012082 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012086 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001208A                            ; ===========================================================================
0001208A 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001208C 0000                       		dc.w Obj61_Action-Obj61_Index
0001208E                            
0001208E 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012090 200C                       		dc.b $20, $C
00012092 1010                       		dc.b $10, $10
00012094 1010                       		dc.b $10, $10
00012096                            ; ===========================================================================
00012096                            
00012096                            Obj61_Main:				; XREF: Obj61_Index
00012096 5428 0024                  		addq.b	#2,$24(a0)
0001209A 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000120A2 317C 43E6 0002             		move.w	#$43E6,2(a0)
000120A8 117C 0004 0001             		move.b	#4,1(a0)
000120AE 117C 0003 0018             		move.b	#3,$18(a0)
000120B4 7000                       		moveq	#0,d0
000120B6 1028 0028                  		move.b	$28(a0),d0
000120BA E648                       		lsr.w	#3,d0
000120BC 0240 000E                  		andi.w	#$E,d0
000120C0 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000120C4 115A 0019                  		move.b	(a2)+,$19(a0)
000120C8 1152 0016                  		move.b	(a2),$16(a0)
000120CC E248                       		lsr.w	#1,d0
000120CE 1140 001A                  		move.b	d0,$1A(a0)
000120D2 3168 0008 0034             		move.w	8(a0),$34(a0)
000120D8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000120DE 1028 0028                  		move.b	$28(a0),d0
000120E2 0200 000F                  		andi.b	#$F,d0
000120E6 6700                       		beq.s	Obj61_Action
000120E8 0C00 0007                  		cmpi.b	#7,d0
000120EC 6700                       		beq.s	Obj61_Action
000120EE 117C 0001 0038             		move.b	#1,$38(a0)
000120F4                            
000120F4                            Obj61_Action:				; XREF: Obj61_Index
000120F4 3F28 0008                  		move.w	8(a0),-(sp)
000120F8 7000                       		moveq	#0,d0
000120FA 1028 0028                  		move.b	$28(a0),d0
000120FE 0240 000F                  		andi.w	#$F,d0
00012102 D040                       		add.w	d0,d0
00012104 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012108 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
0001210C 381F                       		move.w	(sp)+,d4
0001210E 4A28 0001                  		tst.b	1(a0)
00012112 6A00                       		bpl.s	Obj61_ChkDel
00012114 7200                       		moveq	#0,d1
00012116 1228 0019                  		move.b	$19(a0),d1
0001211A 0641 000B                  		addi.w	#$B,d1
0001211E 7400                       		moveq	#0,d2
00012120 1428 0016                  		move.b	$16(a0),d2
00012124 3602                       		move.w	d2,d3
00012126 5243                       		addq.w	#1,d3
00012128 6100 D972                  		bsr.w	SolidObject
0001212C 1144 003F                  		move.b	d4,$3F(a0)
00012130 6100 0000                  		bsr.w	loc_12180
00012134                            
00012134                            Obj61_ChkDel:
00012134 3028 0034                  		move.w	$34(a0),d0
00012138 0240 FF80                  		andi.w	#$FF80,d0
0001213C 3238 F700                  		move.w	($FFFFF700).w,d1
00012140 0441 0080                  		subi.w	#$80,d1
00012144 0241 FF80                  		andi.w	#$FF80,d1
00012148 9041                       		sub.w	d1,d0
0001214A 0C40 0280                  		cmpi.w	#$280,d0
0001214E 6200 B5B8                  		bhi.w	DeleteObject
00012152 6000 B578                  		bra.w	DisplaySprite
00012156                            ; ===========================================================================
00012156 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001215A 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001215E 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012162 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012166                            ; ===========================================================================
00012166                            
00012166                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012166 4E75                       		rts	
00012168                            ; ===========================================================================
00012168                            
00012168                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012168 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001216C 6600                       		bne.s	loc_120D6	; if yes, branch
0001216E 0828 0003 0022             		btst	#3,$22(a0)
00012174 6700                       		beq.s	locret_120D4
00012176 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
0001217C                            
0001217C                            locret_120D4:
0001217C 4E75                       		rts	
0001217E                            ; ===========================================================================
0001217E                            
0001217E                            loc_120D6:
0001217E 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012182 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012184 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012188 4228 0038                  		clr.b	$38(a0)
0001218C 4E75                       		rts	
0001218E                            ; ===========================================================================
0001218E                            
0001218E                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001218E 6100 B516                  		bsr.w	SpeedToPos
00012192 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012196 6100 0000                  		bsr.w	ObjHitFloor
0001219A 4A41                       		tst.w	d1
0001219C 6A00 0000                  		bpl.w	locret_12106
000121A0 5241                       		addq.w	#1,d1
000121A2 D368 000C                  		add.w	d1,$C(a0)
000121A6 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
000121AA 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000121AE                            
000121AE                            locret_12106:
000121AE 4E75                       		rts	
000121B0                            ; ===========================================================================
000121B0                            
000121B0                            Obj61_Type04:				; XREF: Obj61_TypeIndex
000121B0 6100 B4F4                  		bsr.w	SpeedToPos
000121B4 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000121B8 6100 0000                  		bsr.w	ObjHitCeiling
000121BC 4A41                       		tst.w	d1
000121BE 6A00 0000                  		bpl.w	locret_12126
000121C2 9368 000C                  		sub.w	d1,$C(a0)
000121C6 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000121CA 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000121CE                            
000121CE                            locret_12126:
000121CE 4E75                       		rts	
000121D0                            ; ===========================================================================
000121D0                            
000121D0                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000121D0 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000121D6 6600                       		bne.s	locret_12138	; if not, branch
000121D8 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000121DC 4228 0038                  		clr.b	$38(a0)
000121E0                            
000121E0                            locret_12138:
000121E0 4E75                       		rts	
000121E2                            ; ===========================================================================
000121E2                            
000121E2                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000121E2 3038 F646                  		move.w	($FFFFF646).w,d0
000121E6 9068 000C                  		sub.w	$C(a0),d0
000121EA 6700                       		beq.s	locret_1217E
000121EC 6400                       		bcc.s	loc_12162
000121EE 0C40 FFFE                  		cmpi.w	#-2,d0
000121F2 6C00                       		bge.s	loc_1214E
000121F4 70FE                       		moveq	#-2,d0
000121F6                            
000121F6                            loc_1214E:
000121F6 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000121FA 6100 0000                  		bsr.w	ObjHitCeiling
000121FE 4A41                       		tst.w	d1
00012200 6A00 0000                  		bpl.w	locret_12160
00012204 9368 000C                  		sub.w	d1,$C(a0)
00012208                            
00012208                            locret_12160:
00012208 4E75                       		rts	
0001220A                            ; ===========================================================================
0001220A                            
0001220A                            loc_12162:				; XREF: Obj61_Type07
0001220A 0C40 0002                  		cmpi.w	#2,d0
0001220E 6F00                       		ble.s	loc_1216A
00012210 7002                       		moveq	#2,d0
00012212                            
00012212                            loc_1216A:
00012212 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012216 6100 0000                  		bsr.w	ObjHitFloor
0001221A 4A41                       		tst.w	d1
0001221C 6A00 0000                  		bpl.w	locret_1217E
00012220 5241                       		addq.w	#1,d1
00012222 D368 000C                  		add.w	d1,$C(a0)
00012226                            
00012226                            locret_1217E:
00012226 4E75                       		rts	
00012228                            ; ===========================================================================
00012228                            
00012228                            loc_12180:				; XREF: Obj61_Action
00012228 4A28 0038                  		tst.b	$38(a0)
0001222C 6700                       		beq.s	locret_121C0
0001222E 0828 0003 0022             		btst	#3,$22(a0)
00012234 6600                       		bne.s	loc_1219A
00012236 4A28 003E                  		tst.b	$3E(a0)
0001223A 6700                       		beq.s	locret_121C0
0001223C 5928 003E                  		subq.b	#4,$3E(a0)
00012240 6000                       		bra.s	loc_121A6
00012242                            ; ===========================================================================
00012242                            
00012242                            loc_1219A:
00012242 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012248 6700                       		beq.s	locret_121C0
0001224A 5828 003E                  		addq.b	#4,$3E(a0)
0001224E                            
0001224E                            loc_121A6:
0001224E 1028 003E                  		move.b	$3E(a0),d0
00012252 4EB9 0000 29DA             		jsr	(CalcSine).l
00012258 323C 0400                  		move.w	#$400,d1
0001225C C1C1                       		muls.w	d1,d0
0001225E 4840                       		swap	d0
00012260 D068 0030                  		add.w	$30(a0),d0
00012264 3140 000C                  		move.w	d0,$C(a0)
00012268                            
00012268                            locret_121C0:
00012268 4E75                       		rts	
0001226A                            ; ===========================================================================
0001226A                            ; ---------------------------------------------------------------------------
0001226A                            ; Sprite mappings - blocks (LZ)
0001226A                            ; ---------------------------------------------------------------------------
0001226A                            Map_obj61:
0001226A                            	include "_maps\obj61.asm"
0001226A                            ; ---------------------------------------------------------------------------
0001226A                            ; Sprite mappings - blocks (LZ)
0001226A                            ; ---------------------------------------------------------------------------
0001226A 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001226E 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012272 01                         byte_121CA:	dc.b 1
00012273 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012278 02                         byte_121D0:	dc.b 2
00012279 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001227E F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012283 01                         byte_121DB:	dc.b 1
00012284 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012289 01                         byte_121E1:	dc.b 1
0001228A F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012290 00                         		even
00012290 00                         		even
00012290                            
00012290                            ; ===========================================================================
00012290                            ; ---------------------------------------------------------------------------
00012290                            ; Object 62 - gargoyle head (LZ)
00012290                            ; ---------------------------------------------------------------------------
00012290                            
00012290                            Obj62:					; XREF: Obj_Index
00012290 7000                       		moveq	#0,d0
00012292 1028 0024                  		move.b	$24(a0),d0
00012296 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001229A 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001229E 6000 D4D4                  		bra.w	MarkObjGone
000122A2                            ; ===========================================================================
000122A2 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
000122A4 0000                       		dc.w Obj62_MakeFire-Obj62_Index
000122A6 0000                       		dc.w Obj62_FireBall-Obj62_Index
000122A8 0000                       		dc.w Obj62_AniFire-Obj62_Index
000122AA                            
000122AA 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000122B2                            ; ===========================================================================
000122B2                            
000122B2                            Obj62_Main:				; XREF: Obj62_Index
000122B2 5428 0024                  		addq.b	#2,$24(a0)
000122B6 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000122BE 317C 42E9 0002             		move.w	#$42E9,2(a0)
000122C4 0028 0004 0001             		ori.b	#4,1(a0)
000122CA 117C 0003 0018             		move.b	#3,$18(a0)
000122D0 117C 0010 0019             		move.b	#$10,$19(a0)
000122D6 1028 0028                  		move.b	$28(a0),d0	; get object type
000122DA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000122DE 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000122E4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000122EA 0228 000F 0028             		andi.b	#$F,$28(a0)
000122F0                            
000122F0                            Obj62_MakeFire:				; XREF: Obj62_Index
000122F0 5328 001E                  		subq.b	#1,$1E(a0)
000122F4 6600                       		bne.s	Obj62_NoFire
000122F6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000122FC 6100 B648                  		bsr.w	ChkObjOnScreen
00012300 6600                       		bne.s	Obj62_NoFire
00012302 6100 B84E                  		bsr.w	SingleObjLoad
00012306 6600                       		bne.s	Obj62_NoFire
00012308 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
0001230C 5829 0024                  		addq.b	#4,$24(a1)
00012310 3368 0008 0008             		move.w	8(a0),8(a1)
00012316 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001231C 1368 0001 0001             		move.b	1(a0),1(a1)
00012322 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012328                            
00012328                            Obj62_NoFire:
00012328 4E75                       		rts	
0001232A                            ; ===========================================================================
0001232A                            
0001232A                            Obj62_FireBall:				; XREF: Obj62_Index
0001232A 5428 0024                  		addq.b	#2,$24(a0)
0001232E 117C 0008 0016             		move.b	#8,$16(a0)
00012334 117C 0008 0017             		move.b	#8,$17(a0)
0001233A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012342 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012348 0028 0004 0001             		ori.b	#4,1(a0)
0001234E 117C 0004 0018             		move.b	#4,$18(a0)
00012354 117C 0098 0020             		move.b	#$98,$20(a0)
0001235A 117C 0008 0019             		move.b	#8,$19(a0)
00012360 117C 0002 001A             		move.b	#2,$1A(a0)
00012366 5068 000C                  		addq.w	#8,$C(a0)
0001236A 317C 0200 0010             		move.w	#$200,$10(a0)
00012370 0828 0000 0022             		btst	#0,$22(a0)
00012376 6600                       		bne.s	Obj62_Sound
00012378 4468 0010                  		neg.w	$10(a0)
0001237C                            
0001237C                            Obj62_Sound:
0001237C 303C 00AE                  		move.w	#$AE,d0
00012380 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012386                            
00012386                            Obj62_AniFire:				; XREF: Obj62_Index
00012386 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001238A 0200 0007                  		andi.b	#7,d0
0001238E 6600                       		bne.s	Obj62_StopFire
00012390 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012396                            
00012396                            Obj62_StopFire:
00012396 6100 B30E                  		bsr.w	SpeedToPos
0001239A 0828 0000 0022             		btst	#0,$22(a0)
000123A0 6600                       		bne.s	Obj62_StopFire2
000123A2 76F8                       		moveq	#-8,d3
000123A4 6100 0000                  		bsr.w	ObjHitWallLeft
000123A8 4A41                       		tst.w	d1
000123AA 6B00 B35C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000123AE 4E75                       		rts	
000123B0                            ; ===========================================================================
000123B0                            
000123B0                            Obj62_StopFire2:
000123B0 7608                       		moveq	#8,d3
000123B2 6100 0000                  		bsr.w	ObjHitWallRight
000123B6 4A41                       		tst.w	d1
000123B8 6B00 B34E                  		bmi.w	DeleteObject
000123BC 4E75                       		rts	
000123BE                            ; ===========================================================================
000123BE                            ; ---------------------------------------------------------------------------
000123BE                            ; Sprite mappings - gargoyle head (LZ)
000123BE                            ; ---------------------------------------------------------------------------
000123BE                            Map_obj62:
000123BE                            	include "_maps\obj62.asm"
000123BE                            ; ---------------------------------------------------------------------------
000123BE                            ; Sprite mappings - gargoyle head (LZ)
000123BE                            ; ---------------------------------------------------------------------------
000123BE 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
000123C2 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
000123C6 03                         byte_12320:	dc.b 3
000123C7 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000123CC F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000123D1 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000123D6 01                         byte_12330:	dc.b 1
000123D7 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000123DC 01                         byte_12336:	dc.b 1
000123DD FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000123E2                            		even
000123E2                            		even
000123E2                            
000123E2                            ; ===========================================================================
000123E2                            ; ---------------------------------------------------------------------------
000123E2                            ; Object 63 - platforms	on a conveyor belt (LZ)
000123E2                            ; ---------------------------------------------------------------------------
000123E2                            
000123E2                            Obj63:					; XREF: Obj_Index
000123E2 7000                       		moveq	#0,d0
000123E4 1028 0024                  		move.b	$24(a0),d0
000123E8 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
000123EC 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000123F0 3028 0030                  		move.w	$30(a0),d0
000123F4 0240 FF80                  		andi.w	#$FF80,d0
000123F8 3238 F700                  		move.w	($FFFFF700).w,d1
000123FC 0441 0080                  		subi.w	#$80,d1
00012400 0241 FF80                  		andi.w	#$FF80,d1
00012404 9041                       		sub.w	d1,d0
00012406 0C40 0280                  		cmpi.w	#$280,d0
0001240A 6200                       		bhi.s	loc_1236A
0001240C                            
0001240C                            Obj63_Display:				; XREF: loc_1236A
0001240C 6000 B2BE                  		bra.w	DisplaySprite
00012410                            ; ===========================================================================
00012410                            
00012410                            loc_1236A:				; XREF: Obj63
00012410 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012416 6600                       		bne.s	loc_12378
00012418 0C40 FF80                  		cmpi.w	#-$80,d0
0001241C 64EE                       		bcc.s	Obj63_Display
0001241E                            
0001241E                            loc_12378:
0001241E 1028 002F                  		move.b	$2F(a0),d0
00012422 6A00 B2E4                  		bpl.w	DeleteObject
00012426 0240 007F                  		andi.w	#$7F,d0
0001242A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001242E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012434 6000 B2D2                  		bra.w	DeleteObject
00012438                            ; ===========================================================================
00012438 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
0001243A 0000                       		dc.w loc_124B2-Obj63_Index
0001243C 0000                       		dc.w loc_124C2-Obj63_Index
0001243E 0000                       		dc.w loc_124DE-Obj63_Index
00012440                            ; ===========================================================================
00012440                            
00012440                            Obj63_Main:				; XREF: Obj63_Index
00012440 1028 0028                  		move.b	$28(a0),d0
00012444 6B00 0000                  		bmi.w	loc_12460
00012448 5428 0024                  		addq.b	#2,$24(a0)
0001244C 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012454 317C 43F6 0002             		move.w	#$43F6,2(a0)
0001245A 0028 0004 0001             		ori.b	#4,1(a0)
00012460 117C 0010 0019             		move.b	#$10,$19(a0)
00012466 117C 0004 0018             		move.b	#4,$18(a0)
0001246C 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012472 6600                       		bne.s	loc_123E2
00012474 5828 0024                  		addq.b	#4,$24(a0)
00012478 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001247E 117C 0001 0018             		move.b	#1,$18(a0)
00012484 6000 0000                  		bra.w	loc_124DE
00012488                            ; ===========================================================================
00012488                            
00012488                            loc_123E2:
00012488 117C 0004 001A             		move.b	#4,$1A(a0)
0001248E 7000                       		moveq	#0,d0
00012490 1028 0028                  		move.b	$28(a0),d0
00012494 3200                       		move.w	d0,d1
00012496 E648                       		lsr.w	#3,d0
00012498 0240 001E                  		andi.w	#$1E,d0
0001249C 45FA 0000                  		lea	Obj63_Data(pc),a2
000124A0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000124A4 315A 0038                  		move.w	(a2)+,$38(a0)
000124A8 315A 0030                  		move.w	(a2)+,$30(a0)
000124AC 214A 003C                  		move.l	a2,$3C(a0)
000124B0 0241 000F                  		andi.w	#$F,d1
000124B4 E549                       		lsl.w	#2,d1
000124B6 1141 0038                  		move.b	d1,$38(a0)
000124BA 117C 0004 003A             		move.b	#4,$3A(a0)
000124C0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000124C4 6700                       		beq.s	loc_1244C
000124C6 117C 0001 003B             		move.b	#1,$3B(a0)
000124CC 4428 003A                  		neg.b	$3A(a0)
000124D0 7200                       		moveq	#0,d1
000124D2 1228 0038                  		move.b	$38(a0),d1
000124D6 D228 003A                  		add.b	$3A(a0),d1
000124DA B228 0039                  		cmp.b	$39(a0),d1
000124DE 6500                       		bcs.s	loc_12448
000124E0 1001                       		move.b	d1,d0
000124E2 7200                       		moveq	#0,d1
000124E4 4A00                       		tst.b	d0
000124E6 6A00                       		bpl.s	loc_12448
000124E8 1228 0039                  		move.b	$39(a0),d1
000124EC 5901                       		subq.b	#4,d1
000124EE                            
000124EE                            loc_12448:
000124EE 1141 0038                  		move.b	d1,$38(a0)
000124F2                            
000124F2                            loc_1244C:
000124F2 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000124F8 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000124FE 6100 0000                  		bsr.w	Obj63_ChangeDir
00012502 6000 0000                  		bra.w	loc_124B2
00012506                            ; ===========================================================================
00012506                            
00012506                            loc_12460:				; XREF: Obj63_Main
00012506 1140 002F                  		move.b	d0,$2F(a0)
0001250A 0240 007F                  		andi.w	#$7F,d0
0001250E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012512 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012518 6600 B1EE                  		bne.w	DeleteObject
0001251C D040                       		add.w	d0,d0
0001251E 0240 001E                  		andi.w	#$1E,d0
00012522 0640 0070                  		addi.w	#$70,d0
00012526 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001252C D4F2 0000                  		adda.w	(a2,d0.w),a2
00012530 321A                       		move.w	(a2)+,d1
00012532 2248                       		movea.l	a0,a1
00012534 6000                       		bra.s	Obj63_MakePtfms
00012536                            ; ===========================================================================
00012536                            
00012536                            Obj63_Loop:
00012536 6100 B61A                  		bsr.w	SingleObjLoad
0001253A 6600                       		bne.s	loc_124AA
0001253C                            
0001253C                            Obj63_MakePtfms:			; XREF: loc_12460
0001253C 12BC 0063                  		move.b	#$63,0(a1)
00012540 335A 0008                  		move.w	(a2)+,8(a1)
00012544 335A 000C                  		move.w	(a2)+,$C(a1)
00012548 301A                       		move.w	(a2)+,d0
0001254A 1340 0028                  		move.b	d0,$28(a1)
0001254E                            
0001254E                            loc_124AA:
0001254E 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012552                            
00012552 588F                       		addq.l	#4,sp
00012554 4E75                       		rts	
00012556                            ; ===========================================================================
00012556                            
00012556                            loc_124B2:				; XREF: Obj63_Index
00012556 7200                       		moveq	#0,d1
00012558 1228 0019                  		move.b	$19(a0),d1
0001255C 4EB9 0000 7552             		jsr	(PlatformObject).l
00012562 6000 0000                  		bra.w	sub_12502
00012566                            ; ===========================================================================
00012566                            
00012566                            loc_124C2:				; XREF: Obj63_Index
00012566 7200                       		moveq	#0,d1
00012568 1228 0019                  		move.b	$19(a0),d1
0001256C 4EB9 0000 76C6             		jsr	(ExitPlatform).l
00012572 3F28 0008                  		move.w	8(a0),-(sp)
00012576 6100 0000                  		bsr.w	sub_12502
0001257A 341F                       		move.w	(sp)+,d2
0001257C 4EF9 0000 7C30             		jmp	(MvSonicOnPtfm2).l
00012582                            ; ===========================================================================
00012582                            
00012582                            loc_124DE:				; XREF: Obj63_Index
00012582 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012586 0240 0003                  		andi.w	#3,d0
0001258A 6600                       		bne.s	loc_124FC
0001258C 7201                       		moveq	#1,d1
0001258E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012592 6700                       		beq.s	loc_124F2
00012594 4401                       		neg.b	d1
00012596                            
00012596                            loc_124F2:
00012596 D328 001A                  		add.b	d1,$1A(a0)
0001259A 0228 0003 001A             		andi.b	#3,$1A(a0)
000125A0                            
000125A0                            loc_124FC:
000125A0 588F                       		addq.l	#4,sp
000125A2 6000 D1D0                  		bra.w	MarkObjGone
000125A6                            
000125A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000125A6                            
000125A6                            
000125A6                            sub_12502:				; XREF: loc_124B2; loc_124C2
000125A6 4A38 F7EE                  		tst.b	($FFFFF7EE).w
000125AA 6700                       		beq.s	loc_12520
000125AC 4A28 003B                  		tst.b	$3B(a0)
000125B0 6600                       		bne.s	loc_12520
000125B2 117C 0001 003B             		move.b	#1,$3B(a0)
000125B8 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
000125BE 4428 003A                  		neg.b	$3A(a0)
000125C2 6000                       		bra.s	loc_12534
000125C4                            ; ===========================================================================
000125C4                            
000125C4                            loc_12520:
000125C4 3028 0008                  		move.w	8(a0),d0
000125C8 B068 0034                  		cmp.w	$34(a0),d0
000125CC 6600                       		bne.s	loc_1256A
000125CE 3028 000C                  		move.w	$C(a0),d0
000125D2 B068 0036                  		cmp.w	$36(a0),d0
000125D6 6600                       		bne.s	loc_1256A
000125D8                            
000125D8                            loc_12534:
000125D8 7200                       		moveq	#0,d1
000125DA 1228 0038                  		move.b	$38(a0),d1
000125DE D228 003A                  		add.b	$3A(a0),d1
000125E2 B228 0039                  		cmp.b	$39(a0),d1
000125E6 6500                       		bcs.s	loc_12552
000125E8 1001                       		move.b	d1,d0
000125EA 7200                       		moveq	#0,d1
000125EC 4A00                       		tst.b	d0
000125EE 6A00                       		bpl.s	loc_12552
000125F0 1228 0039                  		move.b	$39(a0),d1
000125F4 5901                       		subq.b	#4,d1
000125F6                            
000125F6                            loc_12552:
000125F6 1141 0038                  		move.b	d1,$38(a0)
000125FA 2268 003C                  		movea.l	$3C(a0),a1
000125FE 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012604 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001260A 6100 0000                  		bsr.w	Obj63_ChangeDir
0001260E                            
0001260E                            loc_1256A:
0001260E 6100 B096                  		bsr.w	SpeedToPos
00012612 4E75                       		rts	
00012614                            ; End of function sub_12502
00012614                            
00012614                            
00012614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012614                            
00012614                            
00012614                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012614 7000                       		moveq	#0,d0
00012616 343C FF00                  		move.w	#-$100,d2
0001261A 3028 0008                  		move.w	8(a0),d0
0001261E 9068 0034                  		sub.w	$34(a0),d0
00012622 6400                       		bcc.s	loc_12584
00012624 4440                       		neg.w	d0
00012626 4442                       		neg.w	d2
00012628                            
00012628                            loc_12584:
00012628 7200                       		moveq	#0,d1
0001262A 363C FF00                  		move.w	#-$100,d3
0001262E 3228 000C                  		move.w	$C(a0),d1
00012632 9268 0036                  		sub.w	$36(a0),d1
00012636 6400                       		bcc.s	loc_12598
00012638 4441                       		neg.w	d1
0001263A 4443                       		neg.w	d3
0001263C                            
0001263C                            loc_12598:
0001263C B240                       		cmp.w	d0,d1
0001263E 6500                       		bcs.s	loc_125C2
00012640 3028 0008                  		move.w	8(a0),d0
00012644 9068 0034                  		sub.w	$34(a0),d0
00012648 6700                       		beq.s	loc_125AE
0001264A 48C0                       		ext.l	d0
0001264C E180                       		asl.l	#8,d0
0001264E 81C1                       		divs.w	d1,d0
00012650 4440                       		neg.w	d0
00012652                            
00012652                            loc_125AE:
00012652 3140 0010                  		move.w	d0,$10(a0)
00012656 3143 0012                  		move.w	d3,$12(a0)
0001265A 4840                       		swap	d0
0001265C 3140 000A                  		move.w	d0,$A(a0)
00012660 4268 000E                  		clr.w	$E(a0)
00012664 4E75                       		rts	
00012666                            ; ===========================================================================
00012666                            
00012666                            loc_125C2:				; XREF: Obj63_ChangeDir
00012666 3228 000C                  		move.w	$C(a0),d1
0001266A 9268 0036                  		sub.w	$36(a0),d1
0001266E 6700                       		beq.s	loc_125D4
00012670 48C1                       		ext.l	d1
00012672 E181                       		asl.l	#8,d1
00012674 83C0                       		divs.w	d0,d1
00012676 4441                       		neg.w	d1
00012678                            
00012678                            loc_125D4:
00012678 3141 0012                  		move.w	d1,$12(a0)
0001267C 3142 0010                  		move.w	d2,$10(a0)
00012680 4841                       		swap	d1
00012682 3141 000E                  		move.w	d1,$E(a0)
00012686 4268 000A                  		clr.w	$A(a0)
0001268A 4E75                       		rts	
0001268C                            ; End of function Obj63_ChangeDir
0001268C                            
0001268C                            ; ===========================================================================
0001268C 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001268E 0000                       		dc.w word_12610-Obj63_Data
00012690 0000                       		dc.w word_12628-Obj63_Data
00012692 0000                       		dc.w word_1263C-Obj63_Data
00012694 0000                       		dc.w word_12650-Obj63_Data
00012696 0000                       		dc.w word_12668-Obj63_Data
00012698 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000126A8 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000126B4 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000126C4 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000126CC 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000126E0 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000126F4 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001270C 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012720                            
00012720                            ; ---------------------------------------------------------------------------
00012720                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012720                            ; ---------------------------------------------------------------------------
00012720                            Map_obj63:
00012720                            	include "_maps\obj63.asm"
00012720                            ; ---------------------------------------------------------------------------
00012720                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012720                            ; ---------------------------------------------------------------------------
00012720 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012724 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012728 0000                       		dc.w byte_1269E-Map_obj63
0001272A 01                         byte_12686:	dc.b 1
0001272B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012730 01                         byte_1268C:	dc.b 1
00012731 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012736 01                         byte_12692:	dc.b 1
00012737 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001273C 01                         byte_12698:	dc.b 1
0001273D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012742 01                         byte_1269E:	dc.b 1
00012743 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012748                            		even
00012748                            		even
00012748                            
00012748                            ; ===========================================================================
00012748                            ; ---------------------------------------------------------------------------
00012748                            ; Object 64 - bubbles (LZ)
00012748                            ; ---------------------------------------------------------------------------
00012748                            
00012748                            Obj64:					; XREF: Obj_Index
00012748 7000                       		moveq	#0,d0
0001274A 1028 0024                  		move.b	$24(a0),d0
0001274E 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012752 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012756                            ; ===========================================================================
00012756 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012758 0000                       		dc.w Obj64_Animate-Obj64_Index
0001275A 0000                       		dc.w Obj64_ChkWater-Obj64_Index
0001275C 0000                       		dc.w Obj64_Display2-Obj64_Index
0001275E 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012760 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012762                            ; ===========================================================================
00012762                            
00012762                            Obj64_Main:				; XREF: Obj64_Index
00012762 5428 0024                  		addq.b	#2,$24(a0)
00012766 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001276E 317C 8348 0002             		move.w	#$8348,2(a0)
00012774 117C 0084 0001             		move.b	#$84,1(a0)
0001277A 117C 0010 0019             		move.b	#$10,$19(a0)
00012780 117C 0001 0018             		move.b	#1,$18(a0)
00012786 1028 0028                  		move.b	$28(a0),d0	; get object type
0001278A 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001278C 5028 0024                  		addq.b	#8,$24(a0)
00012790 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012794 1140 0032                  		move.b	d0,$32(a0)
00012798 1140 0033                  		move.b	d0,$33(a0)
0001279C 117C 0006 001C             		move.b	#6,$1C(a0)
000127A2 6000 0000                  		bra.w	Obj64_BblMaker
000127A6                            ; ===========================================================================
000127A6                            
000127A6                            Obj64_Bubble:				; XREF: Obj64_Main
000127A6 1140 001C                  		move.b	d0,$1C(a0)
000127AA 3168 0008 0030             		move.w	8(a0),$30(a0)
000127B0 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000127B6 4EB9 0000 29B4             		jsr	(RandomNumber).l
000127BC 1140 0026                  		move.b	d0,$26(a0)
000127C0                            
000127C0                            Obj64_Animate:				; XREF: Obj64_Index
000127C0 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000127C6 4EBA 8030                  		jsr	AnimateSprite
000127CA 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000127D0 6600                       		bne.s	Obj64_ChkWater
000127D2 117C 0001 002E             		move.b	#1,$2E(a0)
000127D8                            
000127D8                            Obj64_ChkWater:				; XREF: Obj64_Index
000127D8 3038 F646                  		move.w	($FFFFF646).w,d0
000127DC B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000127E0 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000127E2                            
000127E2                            Obj64_Burst:				; XREF: Obj64_Wobble
000127E2 117C 0006 0024             		move.b	#6,$24(a0)
000127E8 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000127EC 6000 0000                  		bra.w	Obj64_Display2
000127F0                            ; ===========================================================================
000127F0                            
000127F0                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000127F0 1028 0026                  		move.b	$26(a0),d0
000127F4 5228 0026                  		addq.b	#1,$26(a0)
000127F8 0240 007F                  		andi.w	#$7F,d0
000127FC 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012802 1031 0000                  		move.b	(a1,d0.w),d0
00012806 4880                       		ext.w	d0
00012808 D068 0030                  		add.w	$30(a0),d0
0001280C 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012810 4A28 002E                  		tst.b	$2E(a0)
00012814 6700                       		beq.s	Obj64_Display
00012816 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001281A 6700                       		beq.s	Obj64_Display	; if not, branch
0001281C                            
0001281C 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012820 303C 00AD                  		move.w	#$AD,d0
00012824 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001282A 43F8 D000                  		lea	($FFFFD000).w,a1
0001282E 4269 0010                  		clr.w	$10(a1)
00012832 4269 0012                  		clr.w	$12(a1)
00012836 4269 0014                  		clr.w	$14(a1)
0001283A 137C 0015 001C             		move.b	#$15,$1C(a1)
00012840 337C 0023 003E             		move.w	#$23,$3E(a1)
00012846 137C 0000 003C             		move.b	#0,$3C(a1)
0001284C 08A9 0005 0022             		bclr	#5,$22(a1)
00012852 08A9 0004 0022             		bclr	#4,$22(a1)
00012858 0829 0002 0022             		btst	#2,$22(a1)
0001285E 6700 FF82                  		beq.w	Obj64_Burst
00012862 08A9 0002 0022             		bclr	#2,$22(a1)
00012868 137C 0013 0016             		move.b	#$13,$16(a1)
0001286E 137C 0009 0017             		move.b	#9,$17(a1)
00012874 5B69 000C                  		subq.w	#5,$C(a1)
00012878 6000 FF68                  		bra.w	Obj64_Burst
0001287C                            ; ===========================================================================
0001287C                            
0001287C                            Obj64_Display:				; XREF: Obj64_Wobble
0001287C 6100 AE28                  		bsr.w	SpeedToPos
00012880 4A28 0001                  		tst.b	1(a0)
00012884 6A00                       		bpl.s	Obj64_Delete
00012886 4EFA AE44                  		jmp	DisplaySprite
0001288A                            ; ===========================================================================
0001288A                            
0001288A                            Obj64_Delete:
0001288A 4EFA AE7C                  		jmp	DeleteObject
0001288E                            ; ===========================================================================
0001288E                            
0001288E                            Obj64_Display2:				; XREF: Obj64_Index
0001288E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012894 4EB9 0000 A7F8             		jsr	AnimateSprite
0001289A 4A28 0001                  		tst.b	1(a0)
0001289E 6A00                       		bpl.s	Obj64_Delete2
000128A0 4EFA AE2A                  		jmp	DisplaySprite
000128A4                            ; ===========================================================================
000128A4                            
000128A4                            Obj64_Delete2:
000128A4 4EFA AE62                  		jmp	DeleteObject
000128A8                            ; ===========================================================================
000128A8                            
000128A8                            Obj64_Delete3:				; XREF: Obj64_Index
000128A8 6000 AE5E                  		bra.w	DeleteObject
000128AC                            ; ===========================================================================
000128AC                            
000128AC                            Obj64_BblMaker:				; XREF: Obj64_Index
000128AC 4A68 0036                  		tst.w	$36(a0)
000128B0 6600                       		bne.s	loc_12874
000128B2 3038 F646                  		move.w	($FFFFF646).w,d0
000128B6 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000128BA 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000128BE 4A28 0001                  		tst.b	1(a0)
000128C2 6A00 0000                  		bpl.w	Obj64_ChkDel
000128C6 5368 0038                  		subq.w	#1,$38(a0)
000128CA 6A00 0000                  		bpl.w	loc_12914
000128CE 317C 0001 0036             		move.w	#1,$36(a0)
000128D4                            
000128D4                            loc_1283A:
000128D4 4EB9 0000 29B4             		jsr	(RandomNumber).l
000128DA 3200                       		move.w	d0,d1
000128DC 0240 0007                  		andi.w	#7,d0
000128E0 0C40 0006                  		cmpi.w	#6,d0
000128E4 64EE                       		bcc.s	loc_1283A
000128E6                            
000128E6 1140 0034                  		move.b	d0,$34(a0)
000128EA 0241 000C                  		andi.w	#$C,d1
000128EE 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000128F4 D2C1                       		adda.w	d1,a1
000128F6 2149 003C                  		move.l	a1,$3C(a0)
000128FA 5328 0032                  		subq.b	#1,$32(a0)
000128FE 6A00                       		bpl.s	loc_12872
00012900 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012906 08E8 0007 0036             		bset	#7,$36(a0)
0001290C                            
0001290C                            loc_12872:
0001290C 6000                       		bra.s	loc_1287C
0001290E                            ; ===========================================================================
0001290E                            
0001290E                            loc_12874:				; XREF: Obj64_BblMaker
0001290E 5368 0038                  		subq.w	#1,$38(a0)
00012912 6A00 0000                  		bpl.w	loc_12914
00012916                            
00012916                            loc_1287C:
00012916 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001291C 0240 001F                  		andi.w	#$1F,d0
00012920 3140 0038                  		move.w	d0,$38(a0)
00012924 6100 B22C                  		bsr.w	SingleObjLoad
00012928 6600                       		bne.s	loc_128F8
0001292A 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001292E 3368 0008 0008             		move.w	8(a0),8(a1)
00012934 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001293A 0240 000F                  		andi.w	#$F,d0
0001293E 5140                       		subq.w	#8,d0
00012940 D169 0008                  		add.w	d0,8(a1)
00012944 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001294A 7000                       		moveq	#0,d0
0001294C 1028 0034                  		move.b	$34(a0),d0
00012950 2468 003C                  		movea.l	$3C(a0),a2
00012954 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
0001295A 0828 0007 0036             		btst	#7,$36(a0)
00012960 6700                       		beq.s	loc_128F8
00012962 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012968 0240 0003                  		andi.w	#3,d0
0001296C 6600                       		bne.s	loc_128E4
0001296E 08E8 0006 0036             		bset	#6,$36(a0)
00012974 6600                       		bne.s	loc_128F8
00012976 137C 0002 0028             		move.b	#2,$28(a1)
0001297C                            
0001297C                            loc_128E4:
0001297C 4A28 0034                  		tst.b	$34(a0)
00012980 6600                       		bne.s	loc_128F8
00012982 08E8 0006 0036             		bset	#6,$36(a0)
00012988 6600                       		bne.s	loc_128F8
0001298A 137C 0002 0028             		move.b	#2,$28(a1)
00012990                            
00012990                            loc_128F8:
00012990 5328 0034                  		subq.b	#1,$34(a0)
00012994 6A00                       		bpl.s	loc_12914
00012996 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001299C 0240 007F                  		andi.w	#$7F,d0
000129A0 0640 0080                  		addi.w	#$80,d0
000129A4 D168 0038                  		add.w	d0,$38(a0)
000129A8 4268 0036                  		clr.w	$36(a0)
000129AC                            
000129AC                            loc_12914:
000129AC 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000129B2 4EB9 0000 A7F8             		jsr	AnimateSprite
000129B8                            
000129B8                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000129B8 3028 0008                  		move.w	8(a0),d0
000129BC 0240 FF80                  		andi.w	#$FF80,d0
000129C0 3238 F700                  		move.w	($FFFFF700).w,d1
000129C4 0441 0080                  		subi.w	#$80,d1
000129C8 0241 FF80                  		andi.w	#$FF80,d1
000129CC 9041                       		sub.w	d1,d0
000129CE 0C40 0280                  		cmpi.w	#$280,d0
000129D2 6200 AD34                  		bhi.w	DeleteObject
000129D6 3038 F646                  		move.w	($FFFFF646).w,d0
000129DA B068 000C                  		cmp.w	$C(a0),d0
000129DE 6500 ACEC                  		bcs.w	DisplaySprite
000129E2 4E75                       		rts	
000129E4                            ; ===========================================================================
000129E4                            ; bubble production sequence
000129E4                            
000129E4                            ; 0 = small bubble, 1 =	large bubble
000129E4                            
000129E4 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000129F6                            
000129F6                            ; ===========================================================================
000129F6                            
000129F6                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000129F6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000129FA 6B00                       		bmi.s	loc_12998
000129FC 43F8 D000                  		lea	($FFFFD000).w,a1
00012A00 3029 0008                  		move.w	8(a1),d0
00012A04 3228 0008                  		move.w	8(a0),d1
00012A08 0441 0010                  		subi.w	#$10,d1
00012A0C B240                       		cmp.w	d0,d1
00012A0E 6400                       		bcc.s	loc_12998
00012A10 0641 0020                  		addi.w	#$20,d1
00012A14 B240                       		cmp.w	d0,d1
00012A16 6500                       		bcs.s	loc_12998
00012A18 3029 000C                  		move.w	$C(a1),d0
00012A1C 3228 000C                  		move.w	$C(a0),d1
00012A20 B240                       		cmp.w	d0,d1
00012A22 6400                       		bcc.s	loc_12998
00012A24 0641 0010                  		addi.w	#$10,d1
00012A28 B240                       		cmp.w	d0,d1
00012A2A 6500                       		bcs.s	loc_12998
00012A2C 7001                       		moveq	#1,d0
00012A2E 4E75                       		rts	
00012A30                            ; ===========================================================================
00012A30                            
00012A30                            loc_12998:
00012A30 7000                       		moveq	#0,d0
00012A32 4E75                       		rts	
00012A34                            ; ===========================================================================
00012A34                            Ani_obj64:
00012A34                            	include "_anim\obj64.asm"
00012A34                            ; ---------------------------------------------------------------------------
00012A34                            ; Animation script - bubbles (LZ)
00012A34                            ; ---------------------------------------------------------------------------
00012A34 0000                       		dc.w byte_129AA-Ani_obj64
00012A36 0000                       		dc.w byte_129B0-Ani_obj64
00012A38 0000                       		dc.w byte_129B6-Ani_obj64
00012A3A 0000                       		dc.w byte_129BE-Ani_obj64
00012A3C 0000                       		dc.w byte_129BE-Ani_obj64
00012A3E 0000                       		dc.w byte_129C0-Ani_obj64
00012A40 0000                       		dc.w byte_129C6-Ani_obj64
00012A42 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012A48 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012A4E 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012A56 04FC                       byte_129BE:	dc.b 4,	$FC
00012A58 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012A5E 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012A64 00                         		even
00012A64 00                         		even
00012A64                            
00012A64                            ; ---------------------------------------------------------------------------
00012A64                            ; Sprite mappings - bubbles (LZ)
00012A64                            ; ---------------------------------------------------------------------------
00012A64                            Map_obj64:
00012A64                            	include "_maps\obj64.asm"
00012A64                            ; ---------------------------------------------------------------------------
00012A64                            ; Sprite mappings - bubbles (LZ)
00012A64                            ; ---------------------------------------------------------------------------
00012A64 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012A68 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012A6C 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012A70 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012A74 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012A78 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012A7C 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012A80 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012A84 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012A88 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012A8C 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012A90 0000                       		dc.w byte_12A9C-Map_obj64
00012A92 01                         byte_129FA:	dc.b 1
00012A93 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012A98 01                         byte_12A00:	dc.b 1
00012A99 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012A9E 01                         byte_12A06:	dc.b 1
00012A9F FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012AA4 01                         byte_12A0C:	dc.b 1
00012AA5 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012AAA 01                         byte_12A12:	dc.b 1
00012AAB F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012AB0 01                         byte_12A18:	dc.b 1
00012AB1 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012AB6 01                         byte_12A1E:	dc.b 1
00012AB7 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012ABC 04                         byte_12A24:	dc.b 4
00012ABD F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012AC2 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012AC7 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012ACC 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012AD1 04                         byte_12A39:	dc.b 4
00012AD2 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012AD7 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012ADC 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012AE1 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012AE6 01                         byte_12A4E:	dc.b 1
00012AE7 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012AEC 01                         byte_12A54:	dc.b 1
00012AED F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012AF2 01                         byte_12A5A:	dc.b 1
00012AF3 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012AF8 01                         byte_12A60:	dc.b 1
00012AF9 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012AFE 01                         byte_12A66:	dc.b 1
00012AFF F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012B04 01                         byte_12A6C:	dc.b 1
00012B05 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012B0A 01                         byte_12A72:	dc.b 1
00012B0B F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012B10 01                         byte_12A78:	dc.b 1
00012B11 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012B16 01                         byte_12A7E:	dc.b 1
00012B17 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012B1C 01                         byte_12A84:	dc.b 1
00012B1D F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012B22 01                         byte_12A8A:	dc.b 1
00012B23 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012B28 01                         byte_12A90:	dc.b 1
00012B29 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012B2E 01                         byte_12A96:	dc.b 1
00012B2F F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012B34 00                         byte_12A9C:	dc.b 0
00012B36 00                         		even
00012B36 00                         		even
00012B36                            
00012B36                            ; ===========================================================================
00012B36                            ; ---------------------------------------------------------------------------
00012B36                            ; Object 65 - waterfalls (LZ)
00012B36                            ; ---------------------------------------------------------------------------
00012B36                            
00012B36                            Obj65:					; XREF: Obj_Index
00012B36 7000                       		moveq	#0,d0
00012B38 1028 0024                  		move.b	$24(a0),d0
00012B3C 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012B40 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012B44                            ; ===========================================================================
00012B44 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012B46 0000                       		dc.w Obj65_Animate-Obj65_Index
00012B48 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012B4A 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012B4C 0000                       		dc.w loc_12B36-Obj65_Index
00012B4E                            ; ===========================================================================
00012B4E                            
00012B4E                            Obj65_Main:				; XREF: Obj65_Index
00012B4E 5828 0024                  		addq.b	#4,$24(a0)
00012B52 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012B5A 317C 4259 0002             		move.w	#$4259,2(a0)
00012B60 0028 0004 0001             		ori.b	#4,1(a0)
00012B66 117C 0018 0019             		move.b	#$18,$19(a0)
00012B6C 117C 0001 0018             		move.b	#1,$18(a0)
00012B72 1028 0028                  		move.b	$28(a0),d0	; get object type
00012B76 6A00                       		bpl.s	loc_12AE6
00012B78 08E8 0007 0002             		bset	#7,2(a0)
00012B7E                            
00012B7E                            loc_12AE6:
00012B7E 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00012B82 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00012B86 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00012B8A 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00012B8C 4228 0018                  		clr.b	$18(a0)
00012B90 5528 0024                  		subq.b	#2,$24(a0)
00012B94 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00012B9A 6700                       		beq.s	loc_12B0A	; if not, branch
00012B9C 117C 0006 0024             		move.b	#6,$24(a0)
00012BA2                            
00012BA2                            loc_12B0A:
00012BA2 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00012BA8 6700                       		beq.s	Obj65_Animate	; if not, branch
00012BAA 117C 0008 0024             		move.b	#8,$24(a0)
00012BB0                            
00012BB0                            Obj65_Animate:				; XREF: Obj65_Index
00012BB0 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00012BB6 4EB9 0000 A7F8             		jsr	AnimateSprite
00012BBC                            
00012BBC                            Obj65_ChkDel:				; XREF: Obj65_Index
00012BBC 6000 CBB6                  		bra.w	MarkObjGone
00012BC0                            ; ===========================================================================
00012BC0                            
00012BC0                            Obj65_FixHeight:			; XREF: Obj65_Index
00012BC0 3038 F646                  		move.w	($FFFFF646).w,d0
00012BC4 0440 0010                  		subi.w	#$10,d0
00012BC8 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00012BCC 60E2                       		bra.s	Obj65_Animate
00012BCE                            ; ===========================================================================
00012BCE                            
00012BCE                            loc_12B36:				; XREF: Obj65_Index
00012BCE 08A8 0007 0002             		bclr	#7,2(a0)
00012BD4 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00012BDA 6600                       		bne.s	Obj65_Animate2
00012BDC 08E8 0007 0002             		bset	#7,2(a0)
00012BE2                            
00012BE2                            Obj65_Animate2:
00012BE2 60CC                       		bra.s	Obj65_Animate
00012BE4                            ; ===========================================================================
00012BE4                            Ani_obj65:
00012BE4                            	include "_anim\obj65.asm"
00012BE4                            ; ---------------------------------------------------------------------------
00012BE4                            ; Animation script - waterfall (LZ)
00012BE4                            ; ---------------------------------------------------------------------------
00012BE4 0000                       		dc.w byte_12B4E-Ani_obj65
00012BE6 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00012BEC 00                         		even
00012BEC 00                         		even
00012BEC                            
00012BEC                            ; ---------------------------------------------------------------------------
00012BEC                            ; Sprite mappings - waterfalls (LZ)
00012BEC                            ; ---------------------------------------------------------------------------
00012BEC                            Map_obj65:
00012BEC                            	include "_maps\obj65.asm"
00012BEC                            ; ---------------------------------------------------------------------------
00012BEC                            ; Sprite mappings - waterfalls (LZ)
00012BEC                            ; ---------------------------------------------------------------------------
00012BEC 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00012BF0 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00012BF4 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00012BF8 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00012BFC 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00012C00 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00012C04 01                         byte_12B6C:	dc.b 1
00012C05 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00012C0A 02                         byte_12B72:	dc.b 2
00012C0B F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00012C10 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00012C15 02                         byte_12B7D:	dc.b 2
00012C16 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012C1B 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012C20 01                         byte_12B88:	dc.b 1
00012C21 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00012C26 02                         byte_12B8E:	dc.b 2
00012C27 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012C2C 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012C31 01                         byte_12B99:	dc.b 1
00012C32 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00012C37 01                         byte_12B9F:	dc.b 1
00012C38 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00012C3D 01                         byte_12BA5:	dc.b 1
00012C3E F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00012C43 02                         byte_12BAB:	dc.b 2
00012C44 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00012C49 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00012C4E 02                         byte_12BB6:	dc.b 2
00012C4F F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00012C54 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00012C59 02                         byte_12BC1:	dc.b 2
00012C5A F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00012C5F F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00012C64 02                         byte_12BCC:	dc.b 2
00012C65 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00012C6A F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00012C70 00                         		even
00012C70 00                         		even
00012C70                            
00012C70                            ; ===========================================================================
00012C70                            ; ---------------------------------------------------------------------------
00012C70                            ; Object 01 - Sonic
00012C70                            ; ---------------------------------------------------------------------------
00012C70                            
00012C70                            Obj01:					; XREF: Obj_Index
00012C70 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00012C74 6700                       		beq.s	Obj01_Normal	; if not, branch
00012C76 4EF9 0000 0000             		jmp	DebugMode
00012C7C                            ; ===========================================================================
00012C7C                            
00012C7C                            Obj01_Normal:
00012C7C 7000                       		moveq	#0,d0
00012C7E 1028 0024                  		move.b	$24(a0),d0
00012C82 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00012C86 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00012C8A                            ; ===========================================================================
00012C8A 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00012C8C 0000                       		dc.w Obj01_Control-Obj01_Index
00012C8E 0000                       		dc.w Obj01_Hurt-Obj01_Index
00012C90 0000                       		dc.w Obj01_Death-Obj01_Index
00012C92 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00012C94                            ; ===========================================================================
00012C94                            
00012C94                            Obj01_Main:				; XREF: Obj01_Index
00012C94 5428 0024                  		addq.b	#2,$24(a0)
00012C98 117C 0013 0016             		move.b	#$13,$16(a0)
00012C9E 117C 0009 0017             		move.b	#9,$17(a0)
00012CA4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00012CAC 317C 0780 0002             		move.w	#$780,2(a0)
00012CB2 117C 0002 0018             		move.b	#2,$18(a0)
00012CB8 117C 0018 0019             		move.b	#$18,$19(a0)
00012CBE 117C 0004 0001             		move.b	#4,1(a0)
00012CC4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00012CCA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00012CD0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00012CD6                            
00012CD6                            Obj01_Control:				; XREF: Obj01_Index
00012CD6 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00012CDA 6700                       		beq.s	loc_12C58	; if not, branch
00012CDC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00012CE2 6700                       		beq.s	loc_12C58	; if not, branch
00012CE4 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00012CEA 4238 F7CC                  		clr.b	($FFFFF7CC).w
00012CEE 4E75                       		rts	
00012CF0                            ; ===========================================================================
00012CF0                            
00012CF0                            loc_12C58:
00012CF0 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00012CF4 6600                       		bne.s	loc_12C64	; if yes, branch
00012CF6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00012CFC                            
00012CFC                            loc_12C64:
00012CFC 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00012D02 6600                       		bne.s	loc_12C7E	; if yes, branch
00012D04 7000                       		moveq	#0,d0
00012D06 1028 0022                  		move.b	$22(a0),d0
00012D0A 0240 0006                  		andi.w	#6,d0
00012D0E 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00012D12 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00012D16                            
00012D16                            loc_12C7E:
00012D16 6100                       		bsr.s	Sonic_Display
00012D18 6100 0000                  		bsr.w	Sonic_RecordPos
00012D1C 6100 0000                  		bsr.w	Sonic_Water
00012D20 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00012D26 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00012D2C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00012D30 6700                       		beq.s	loc_12CA6
00012D32 4A28 001C                  		tst.b	$1C(a0)
00012D36 6600                       		bne.s	loc_12CA6
00012D38 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00012D3E                            
00012D3E                            loc_12CA6:
00012D3E 6100 0000                  		bsr.w	Sonic_Animate
00012D42 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012D46 6B00                       		bmi.s	loc_12CB6
00012D48 4EB9 0000 0000             		jsr	TouchResponse
00012D4E                            
00012D4E                            loc_12CB6:
00012D4E 6100 0000                  		bsr.w	Sonic_Loops
00012D52 6100 0000                  		bsr.w	LoadSonicDynPLC
00012D56 4E75                       		rts	
00012D58                            ; ===========================================================================
00012D58 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00012D5A 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00012D5C 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00012D5E 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00012D60                            ; ---------------------------------------------------------------------------
00012D60                            ; Music	to play	after invincibility wears off
00012D60                            ; ---------------------------------------------------------------------------
00012D60                            MusicList2:	incbin	misc\muslist2.bin
00012D66                            		even
00012D66                            ; ===========================================================================
00012D66                            
00012D66                            Sonic_Display:				; XREF: loc_12C7E
00012D66 3028 0030                  		move.w	$30(a0),d0
00012D6A 6700                       		beq.s	Obj01_Display
00012D6C 5368 0030                  		subq.w	#1,$30(a0)
00012D70 E648                       		lsr.w	#3,d0
00012D72 6400                       		bcc.s	Obj01_ChkInvin
00012D74                            
00012D74                            Obj01_Display:
00012D74 4EBA A956                  		jsr	DisplaySprite
00012D78                            
00012D78                            Obj01_ChkInvin:
00012D78 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00012D7C 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00012D7E 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00012D82 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00012D84 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00012D88 6600                       		bne.s	Obj01_ChkShoes
00012D8A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00012D8E 6600                       		bne.s	Obj01_RmvInvin
00012D90 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00012D96 6500                       		bcs.s	Obj01_RmvInvin
00012D98 7000                       		moveq	#0,d0
00012D9A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00012D9E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
00012DA4 6600                       		bne.s	Obj01_PlayMusic
00012DA6 7005                       		moveq	#5,d0		; play SBZ music
00012DA8                            
00012DA8                            Obj01_PlayMusic:
00012DA8 43F9 0001 2D60             		lea	(MusicList2).l,a1
00012DAE 1031 0000                  		move.b	(a1,d0.w),d0
00012DB2 4EB9 0000 1396             		jsr	(PlaySound).l	; play normal music
00012DB8                            
00012DB8                            Obj01_RmvInvin:
00012DB8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00012DBE                            
00012DBE                            Obj01_ChkShoes:
00012DBE 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00012DC2 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00012DC4 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00012DC8 6700                       		beq.s	Obj01_ExitChk
00012DCA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00012DCE 6600                       		bne.s	Obj01_ExitChk
00012DD0 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012DD6 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012DDC 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012DE2 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00012DE8 303C 00E3                  		move.w	#$E3,d0
00012DEC 4EF9 0000 1396             		jmp	(PlaySound).l	; run music at normal speed
00012DF2                            ; ===========================================================================
00012DF2                            
00012DF2                            Obj01_ExitChk:
00012DF2 4E75                       		rts	
00012DF4                            
00012DF4                            ; ---------------------------------------------------------------------------
00012DF4                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00012DF4                            ; ---------------------------------------------------------------------------
00012DF4                            
00012DF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012DF4                            
00012DF4                            
00012DF4                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00012DF4 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00012DF8 43F8 CB00                  		lea	($FFFFCB00).w,a1
00012DFC 43F1 0000                  		lea	(a1,d0.w),a1
00012E00 32E8 0008                  		move.w	8(a0),(a1)+
00012E04 32E8 000C                  		move.w	$C(a0),(a1)+
00012E08 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00012E0C 4E75                       		rts	
00012E0E                            ; End of function Sonic_RecordPos
00012E0E                            
00012E0E                            ; ---------------------------------------------------------------------------
00012E0E                            ; Subroutine for Sonic when he's underwater
00012E0E                            ; ---------------------------------------------------------------------------
00012E0E                            
00012E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012E0E                            
00012E0E                            
00012E0E                            Sonic_Water:				; XREF: loc_12C7E
00012E0E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00012E14 6700                       		beq.s	Obj01_InWater	; if yes, branch
00012E16                            
00012E16                            locret_12D80:
00012E16 4E75                       		rts	
00012E18                            ; ===========================================================================
00012E18                            
00012E18                            Obj01_InWater:
00012E18 3038 F646                  		move.w	($FFFFF646).w,d0
00012E1C B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00012E20 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00012E22 08E8 0006 0022             		bset	#6,$22(a0)
00012E28 66EC                       		bne.s	locret_12D80
00012E2A 6100 0000                  		bsr.w	ResumeMusic
00012E2E 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00012E34 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00012E3A 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00012E40 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00012E46 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00012E4C E0E8 0010                  		asr	$10(a0)
00012E50 E0E8 0012                  		asr	$12(a0)
00012E54 E0E8 0012                  		asr	$12(a0)
00012E58 67BC                       		beq.s	locret_12D80
00012E5A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012E60 303C 00AA                  		move.w	#$AA,d0
00012E64 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play splash sound
00012E6A                            ; ===========================================================================
00012E6A                            
00012E6A                            Obj01_OutWater:
00012E6A 08A8 0006 0022             		bclr	#6,$22(a0)
00012E70 67A4                       		beq.s	locret_12D80
00012E72 6100 0000                  		bsr.w	ResumeMusic
00012E76 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012E7C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012E82 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012E88 E1E8 0012                  		asl	$12(a0)
00012E8C 6700 FF88                  		beq.w	locret_12D80
00012E90 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012E96 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00012E9C 6E00                       		bgt.s	loc_12E0E
00012E9E 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00012EA4                            
00012EA4                            loc_12E0E:
00012EA4 303C 00AA                  		move.w	#$AA,d0
00012EA8 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play splash sound
00012EAE                            ; End of function Sonic_Water
00012EAE                            
00012EAE                            ; ===========================================================================
00012EAE                            ; ---------------------------------------------------------------------------
00012EAE                            ; Modes	for controlling	Sonic
00012EAE                            ; ---------------------------------------------------------------------------
00012EAE                            
00012EAE                            Obj01_MdNormal:				; XREF: Obj01_Modes
00012EAE 6100 0000                  		bsr.w	Sonic_Jump
00012EB2 6100 0000                  		bsr.w	Sonic_SlopeResist
00012EB6 6100 0000                  		bsr.w	Sonic_Move
00012EBA 6100 0000                  		bsr.w	Sonic_Roll
00012EBE 6100 0000                  		bsr.w	Sonic_LevelBound
00012EC2 4EBA A7E2                  		jsr	SpeedToPos
00012EC6 6100 0000                  		bsr.w	Sonic_AnglePos
00012ECA 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012ECE 4E75                       		rts	
00012ED0                            ; ===========================================================================
00012ED0                            
00012ED0                            Obj01_MdJump:				; XREF: Obj01_Modes
00012ED0 6100 0000                  		bsr.w	Sonic_JumpHeight
00012ED4 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012ED8 6100 0000                  		bsr.w	Sonic_LevelBound
00012EDC 4EBA A79C                  		jsr	ObjectFall
00012EE0 0828 0006 0022             		btst	#6,$22(a0)
00012EE6 6700                       		beq.s	loc_12E5C
00012EE8 0468 0028 0012             		subi.w	#$28,$12(a0)
00012EEE                            
00012EEE                            loc_12E5C:
00012EEE 6100 0000                  		bsr.w	Sonic_JumpAngle
00012EF2 6100 0000                  		bsr.w	Sonic_Floor
00012EF6 4E75                       		rts	
00012EF8                            ; ===========================================================================
00012EF8                            
00012EF8                            Obj01_MdRoll:				; XREF: Obj01_Modes
00012EF8 6100 0000                  		bsr.w	Sonic_Jump
00012EFC 6100 0000                  		bsr.w	Sonic_RollRepel
00012F00 6100 0000                  		bsr.w	Sonic_RollSpeed
00012F04 6100 0000                  		bsr.w	Sonic_LevelBound
00012F08 4EBA A79C                  		jsr	SpeedToPos
00012F0C 6100 0000                  		bsr.w	Sonic_AnglePos
00012F10 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012F14 4E75                       		rts	
00012F16                            ; ===========================================================================
00012F16                            
00012F16                            Obj01_MdJump2:				; XREF: Obj01_Modes
00012F16 6100 0000                  		bsr.w	Sonic_JumpHeight
00012F1A 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012F1E 6100 0000                  		bsr.w	Sonic_LevelBound
00012F22 4EBA A756                  		jsr	ObjectFall
00012F26 0828 0006 0022             		btst	#6,$22(a0)
00012F2C 6700                       		beq.s	loc_12EA6
00012F2E 0468 0028 0012             		subi.w	#$28,$12(a0)
00012F34                            
00012F34                            loc_12EA6:
00012F34 6100 0000                  		bsr.w	Sonic_JumpAngle
00012F38 6100 0000                  		bsr.w	Sonic_Floor
00012F3C 4E75                       		rts	
00012F3E                            ; ---------------------------------------------------------------------------
00012F3E                            ; Subroutine to	make Sonic walk/run
00012F3E                            ; ---------------------------------------------------------------------------
00012F3E                            
00012F3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F3E                            
00012F3E                            
00012F3E                            Sonic_Move:				; XREF: Obj01_MdNormal
00012F3E 3C38 F760                  		move.w	($FFFFF760).w,d6
00012F42 3A38 F762                  		move.w	($FFFFF762).w,d5
00012F46 3838 F764                  		move.w	($FFFFF764).w,d4
00012F4A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00012F4E 6600 0000                  		bne.w	loc_12FEE
00012F52 4A68 003E                  		tst.w	$3E(a0)
00012F56 6600 0000                  		bne.w	Obj01_ResetScr
00012F5A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00012F60 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00012F62 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00012F68 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00012F6A 6100 0000                  		bsr.w	Sonic_MoveLeft
00012F6E                            
00012F6E                            Obj01_NotLeft:
00012F6E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00012F74 6700                       		beq.s	Obj01_NotRight	; if not, branch
00012F76 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00012F7C 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00012F7E 6100 0000                  		bsr.w	Sonic_MoveLeft
00012F82 6000                       		bra.s	Obj01_NotRight
00012F84                            
00012F84                            Obj01_MoveRight:
00012F84 6100 0000                  		bsr.w	Sonic_MoveRight
00012F88                            
00012F88                            Obj01_NotRight:
00012F88 1028 0026                  		move.b	$26(a0),d0
00012F8C 0600 0020                  		addi.b	#$20,d0
00012F90 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00012F94 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00012F98 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00012F9C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00012FA0 08A8 0005 0022             		bclr	#5,$22(a0)
00012FA6 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00012FAC 0828 0003 0022             		btst	#3,$22(a0)
00012FB2 6700                       		beq.s	Sonic_Balance
00012FB4 7000                       		moveq	#0,d0
00012FB6 1028 003D                  		move.b	$3D(a0),d0
00012FBA ED48                       		lsl.w	#6,d0
00012FBC 43F8 D000                  		lea	($FFFFD000).w,a1
00012FC0 43F1 0000                  		lea	(a1,d0.w),a1
00012FC4 4A29 0022                  		tst.b	$22(a1)
00012FC8 6B00                       		bmi.s	Sonic_LookUp
00012FCA 7200                       		moveq	#0,d1
00012FCC 1229 0019                  		move.b	$19(a1),d1
00012FD0 3401                       		move.w	d1,d2
00012FD2 D442                       		add.w	d2,d2
00012FD4 5942                       		subq.w	#4,d2
00012FD6 D268 0008                  		add.w	8(a0),d1
00012FDA 9269 0008                  		sub.w	8(a1),d1
00012FDE 0C41 0004                  		cmpi.w	#4,d1
00012FE2 6D00                       		blt.s	loc_12F6A
00012FE4 B242                       		cmp.w	d2,d1
00012FE6 6C00                       		bge.s	loc_12F5A
00012FE8 6000                       		bra.s	Sonic_LookUp
00012FEA                            ; ===========================================================================
00012FEA                            
00012FEA                            Sonic_Balance:
00012FEA 4EB9 0000 0000             		jsr	ObjHitFloor
00012FF0 0C41 000C                  		cmpi.w	#$C,d1
00012FF4 6D00                       		blt.s	Sonic_LookUp
00012FF6 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00012FFC 6600                       		bne.s	loc_12F62
00012FFE                            
00012FFE                            loc_12F5A:
00012FFE 08A8 0000 0022             		bclr	#0,$22(a0)
00013004 6000                       		bra.s	loc_12F70
00013006                            ; ===========================================================================
00013006                            
00013006                            loc_12F62:
00013006 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001300C 6600                       		bne.s	Sonic_LookUp
0001300E                            
0001300E                            loc_12F6A:
0001300E 08E8 0000 0022             		bset	#0,$22(a0)
00013014                            
00013014                            loc_12F70:
00013014 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001301A 6000                       		bra.s	Obj01_ResetScr
0001301C                            ; ===========================================================================
0001301C                            
0001301C                            Sonic_LookUp:
0001301C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013022 6700                       		beq.s	Sonic_Duck	; if not, branch
00013024 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001302A 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013030 6700                       		beq.s	loc_12FC2
00013032 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013036 6000                       		bra.s	loc_12FC2
00013038                            ; ===========================================================================
00013038                            
00013038                            Sonic_Duck:
00013038 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001303E 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013040 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013046 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
0001304C 6700                       		beq.s	loc_12FC2
0001304E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013052 6000                       		bra.s	loc_12FC2
00013054                            ; ===========================================================================
00013054                            
00013054                            Obj01_ResetScr:
00013054 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001305A 6700                       		beq.s	loc_12FC2	; if yes, branch
0001305C 6400                       		bcc.s	loc_12FBE
0001305E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013062                            
00013062                            loc_12FBE:
00013062 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013066                            
00013066                            loc_12FC2:
00013066 1038 F602                  		move.b	($FFFFF602).w,d0
0001306A 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001306E 6600                       		bne.s	loc_12FEE	; if yes, branch
00013070 3028 0014                  		move.w	$14(a0),d0
00013074 6700                       		beq.s	loc_12FEE
00013076 6B00                       		bmi.s	loc_12FE2
00013078 9045                       		sub.w	d5,d0
0001307A 6400                       		bcc.s	loc_12FDC
0001307C 303C 0000                  		move.w	#0,d0
00013080                            
00013080                            loc_12FDC:
00013080 3140 0014                  		move.w	d0,$14(a0)
00013084 6000                       		bra.s	loc_12FEE
00013086                            ; ===========================================================================
00013086                            
00013086                            loc_12FE2:
00013086 D045                       		add.w	d5,d0
00013088 6400                       		bcc.s	loc_12FEA
0001308A 303C 0000                  		move.w	#0,d0
0001308E                            
0001308E                            loc_12FEA:
0001308E 3140 0014                  		move.w	d0,$14(a0)
00013092                            
00013092                            loc_12FEE:
00013092 1028 0026                  		move.b	$26(a0),d0
00013096 4EB9 0000 29DA             		jsr	(CalcSine).l
0001309C C3E8 0014                  		muls.w	$14(a0),d1
000130A0 E081                       		asr.l	#8,d1
000130A2 3141 0010                  		move.w	d1,$10(a0)
000130A6 C1E8 0014                  		muls.w	$14(a0),d0
000130AA E080                       		asr.l	#8,d0
000130AC 3140 0012                  		move.w	d0,$12(a0)
000130B0                            
000130B0                            loc_1300C:
000130B0 1028 0026                  		move.b	$26(a0),d0
000130B4 0600 0040                  		addi.b	#$40,d0
000130B8 6B00                       		bmi.s	locret_1307C
000130BA 123C 0040                  		move.b	#$40,d1
000130BE 4A68 0014                  		tst.w	$14(a0)
000130C2 6700                       		beq.s	locret_1307C
000130C4 6B00                       		bmi.s	loc_13024
000130C6 4441                       		neg.w	d1
000130C8                            
000130C8                            loc_13024:
000130C8 1028 0026                  		move.b	$26(a0),d0
000130CC D001                       		add.b	d1,d0
000130CE 3F00                       		move.w	d0,-(sp)
000130D0 6100 0000                  		bsr.w	Sonic_WalkSpeed
000130D4 301F                       		move.w	(sp)+,d0
000130D6 4A41                       		tst.w	d1
000130D8 6A00                       		bpl.s	locret_1307C
000130DA E141                       		asl.w	#8,d1
000130DC 0600 0020                  		addi.b	#$20,d0
000130E0 0200 00C0                  		andi.b	#$C0,d0
000130E4 6700                       		beq.s	loc_13078
000130E6 0C00 0040                  		cmpi.b	#$40,d0
000130EA 6700                       		beq.s	loc_13066
000130EC 0C00 0080                  		cmpi.b	#$80,d0
000130F0 6700                       		beq.s	loc_13060
000130F2 D368 0010                  		add.w	d1,$10(a0)
000130F6 08E8 0005 0022             		bset	#5,$22(a0)
000130FC 317C 0000 0014             		move.w	#0,$14(a0)
00013102 4E75                       		rts	
00013104                            ; ===========================================================================
00013104                            
00013104                            loc_13060:
00013104 9368 0012                  		sub.w	d1,$12(a0)
00013108 4E75                       		rts	
0001310A                            ; ===========================================================================
0001310A                            
0001310A                            loc_13066:
0001310A 9368 0010                  		sub.w	d1,$10(a0)
0001310E 08E8 0005 0022             		bset	#5,$22(a0)
00013114 317C 0000 0014             		move.w	#0,$14(a0)
0001311A 4E75                       		rts	
0001311C                            ; ===========================================================================
0001311C                            
0001311C                            loc_13078:
0001311C D368 0012                  		add.w	d1,$12(a0)
00013120                            
00013120                            locret_1307C:
00013120 4E75                       		rts	
00013122                            ; End of function Sonic_Move
00013122                            
00013122                            
00013122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013122                            
00013122                            
00013122                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013122 3028 0014                  		move.w	$14(a0),d0
00013126 6700                       		beq.s	loc_13086
00013128 6A00                       		bpl.s	loc_130B2
0001312A                            
0001312A                            loc_13086:
0001312A 08E8 0000 0022             		bset	#0,$22(a0)
00013130 6600                       		bne.s	loc_1309A
00013132 08A8 0005 0022             		bclr	#5,$22(a0)
00013138 117C 0001 001D             		move.b	#1,$1D(a0)
0001313E                            
0001313E                            loc_1309A:
0001313E 9045                       		sub.w	d5,d0
00013140 3206                       		move.w	d6,d1
00013142 4441                       		neg.w	d1
00013144 B041                       		cmp.w	d1,d0
00013146 6E00                       		bgt.s	loc_130A6
00013148 3001                       		move.w	d1,d0
0001314A                            
0001314A                            loc_130A6:
0001314A 3140 0014                  		move.w	d0,$14(a0)
0001314E 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013154 4E75                       		rts	
00013156                            ; ===========================================================================
00013156                            
00013156                            loc_130B2:				; XREF: Sonic_MoveLeft
00013156 9044                       		sub.w	d4,d0
00013158 6400                       		bcc.s	loc_130BA
0001315A 303C FF80                  		move.w	#-$80,d0
0001315E                            
0001315E                            loc_130BA:
0001315E 3140 0014                  		move.w	d0,$14(a0)
00013162 1028 0026                  		move.b	$26(a0),d0
00013166 0600 0020                  		addi.b	#$20,d0
0001316A 0200 00C0                  		andi.b	#$C0,d0
0001316E 6600                       		bne.s	locret_130E8
00013170 0C40 0400                  		cmpi.w	#$400,d0
00013174 6D00                       		blt.s	locret_130E8
00013176 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001317C 08A8 0000 0022             		bclr	#0,$22(a0)
00013182 303C 00A4                  		move.w	#$A4,d0
00013186 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stopping sound
0001318C                            
0001318C                            locret_130E8:
0001318C 4E75                       		rts	
0001318E                            ; End of function Sonic_MoveLeft
0001318E                            
0001318E                            
0001318E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001318E                            
0001318E                            
0001318E                            Sonic_MoveRight:			; XREF: Sonic_Move
0001318E 3028 0014                  		move.w	$14(a0),d0
00013192 6B00                       		bmi.s	loc_13118
00013194 08A8 0000 0022             		bclr	#0,$22(a0)
0001319A 6700                       		beq.s	loc_13104
0001319C 08A8 0005 0022             		bclr	#5,$22(a0)
000131A2 117C 0001 001D             		move.b	#1,$1D(a0)
000131A8                            
000131A8                            loc_13104:
000131A8 D045                       		add.w	d5,d0
000131AA B046                       		cmp.w	d6,d0
000131AC 6D00                       		blt.s	loc_1310C
000131AE 3006                       		move.w	d6,d0
000131B0                            
000131B0                            loc_1310C:
000131B0 3140 0014                  		move.w	d0,$14(a0)
000131B4 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000131BA 4E75                       		rts	
000131BC                            ; ===========================================================================
000131BC                            
000131BC                            loc_13118:				; XREF: Sonic_MoveRight
000131BC D044                       		add.w	d4,d0
000131BE 6400                       		bcc.s	loc_13120
000131C0 303C 0080                  		move.w	#$80,d0
000131C4                            
000131C4                            loc_13120:
000131C4 3140 0014                  		move.w	d0,$14(a0)
000131C8 1028 0026                  		move.b	$26(a0),d0
000131CC 0600 0020                  		addi.b	#$20,d0
000131D0 0200 00C0                  		andi.b	#$C0,d0
000131D4 6600                       		bne.s	locret_1314E
000131D6 0C40 FC00                  		cmpi.w	#-$400,d0
000131DA 6E00                       		bgt.s	locret_1314E
000131DC 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000131E2 08E8 0000 0022             		bset	#0,$22(a0)
000131E8 303C 00A4                  		move.w	#$A4,d0
000131EC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stopping sound
000131F2                            
000131F2                            locret_1314E:
000131F2 4E75                       		rts	
000131F4                            ; End of function Sonic_MoveRight
000131F4                            
000131F4                            ; ---------------------------------------------------------------------------
000131F4                            ; Subroutine to	change Sonic's speed as he rolls
000131F4                            ; ---------------------------------------------------------------------------
000131F4                            
000131F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000131F4                            
000131F4                            
000131F4                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000131F4 3C38 F760                  		move.w	($FFFFF760).w,d6
000131F8 E346                       		asl.w	#1,d6
000131FA 3A38 F762                  		move.w	($FFFFF762).w,d5
000131FE E245                       		asr.w	#1,d5
00013200 3838 F764                  		move.w	($FFFFF764).w,d4
00013204 E444                       		asr.w	#2,d4
00013206 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001320A 6600 0000                  		bne.w	loc_131CC
0001320E 4A68 003E                  		tst.w	$3E(a0)
00013212 6600                       		bne.s	loc_13188
00013214 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001321A 6700                       		beq.s	loc_1317C	; if not, branch
0001321C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013222 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013224 6100 0000                  		bsr.w	Sonic_RollLeft
00013228                            
00013228                            loc_1317C:
00013228 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001322E 6700                       		beq.s	loc_13188	; if not, branch
00013230 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013236 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013238 6100 0000                  		bsr.w	Sonic_RollLeft
0001323C 6000                       		bra.s	loc_13188
0001323E                            
0001323E                            SonicRS_RollRight:
0001323E 6100 0000                  		bsr.w	Sonic_RollRight
00013242                            
00013242                            loc_13188:
00013242 3028 0014                  		move.w	$14(a0),d0
00013246 6700                       		beq.s	loc_131AA
00013248 6B00                       		bmi.s	loc_1319E
0001324A 9045                       		sub.w	d5,d0
0001324C 6400                       		bcc.s	loc_13198
0001324E 303C 0000                  		move.w	#0,d0
00013252                            
00013252                            loc_13198:
00013252 3140 0014                  		move.w	d0,$14(a0)
00013256 6000                       		bra.s	loc_131AA
00013258                            ; ===========================================================================
00013258                            
00013258                            loc_1319E:				; XREF: Sonic_RollSpeed
00013258 D045                       		add.w	d5,d0
0001325A 6400                       		bcc.s	loc_131A6
0001325C 303C 0000                  		move.w	#0,d0
00013260                            
00013260                            loc_131A6:
00013260 3140 0014                  		move.w	d0,$14(a0)
00013264                            
00013264                            loc_131AA:
00013264 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013268 6600                       		bne.s	loc_131CC	; if yes, branch
0001326A 08A8 0002 0022             		bclr	#2,$22(a0)
00013270 117C 0013 0016             		move.b	#$13,$16(a0)
00013276 117C 0009 0017             		move.b	#9,$17(a0)
0001327C 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013282 5B68 000C                  		subq.w	#5,$C(a0)
00013286                            
00013286                            loc_131CC:
00013286 1028 0026                  		move.b	$26(a0),d0
0001328A 4EB9 0000 29DA             		jsr	(CalcSine).l
00013290 C1E8 0014                  		muls.w	$14(a0),d0
00013294 E080                       		asr.l	#8,d0
00013296 3140 0012                  		move.w	d0,$12(a0)
0001329A C3E8 0014                  		muls.w	$14(a0),d1
0001329E E081                       		asr.l	#8,d1
000132A0 0C41 1000                  		cmpi.w	#$1000,d1
000132A4 6F00                       		ble.s	loc_131F0
000132A6 323C 1000                  		move.w	#$1000,d1
000132AA                            
000132AA                            loc_131F0:
000132AA 0C41 F000                  		cmpi.w	#-$1000,d1
000132AE 6C00                       		bge.s	loc_131FA
000132B0 323C F000                  		move.w	#-$1000,d1
000132B4                            
000132B4                            loc_131FA:
000132B4 3141 0010                  		move.w	d1,$10(a0)
000132B8 6000 FDF6                  		bra.w	loc_1300C
000132BC                            ; End of function Sonic_RollSpeed
000132BC                            
000132BC                            
000132BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132BC                            
000132BC                            
000132BC                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000132BC 3028 0014                  		move.w	$14(a0),d0
000132C0 6700                       		beq.s	loc_1320A
000132C2 6A00                       		bpl.s	loc_13218
000132C4                            
000132C4                            loc_1320A:
000132C4 08E8 0000 0022             		bset	#0,$22(a0)
000132CA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000132D0 4E75                       		rts	
000132D2                            ; ===========================================================================
000132D2                            
000132D2                            loc_13218:
000132D2 9044                       		sub.w	d4,d0
000132D4 6400                       		bcc.s	loc_13220
000132D6 303C FF80                  		move.w	#-$80,d0
000132DA                            
000132DA                            loc_13220:
000132DA 3140 0014                  		move.w	d0,$14(a0)
000132DE 4E75                       		rts	
000132E0                            ; End of function Sonic_RollLeft
000132E0                            
000132E0                            
000132E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132E0                            
000132E0                            
000132E0                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000132E0 3028 0014                  		move.w	$14(a0),d0
000132E4 6B00                       		bmi.s	loc_1323A
000132E6 08A8 0000 0022             		bclr	#0,$22(a0)
000132EC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000132F2 4E75                       		rts	
000132F4                            ; ===========================================================================
000132F4                            
000132F4                            loc_1323A:
000132F4 D044                       		add.w	d4,d0
000132F6 6400                       		bcc.s	loc_13242
000132F8 303C 0080                  		move.w	#$80,d0
000132FC                            
000132FC                            loc_13242:
000132FC 3140 0014                  		move.w	d0,$14(a0)
00013300 4E75                       		rts	
00013302                            ; End of function Sonic_RollRight
00013302                            
00013302                            ; ---------------------------------------------------------------------------
00013302                            ; Subroutine to	change Sonic's direction while jumping
00013302                            ; ---------------------------------------------------------------------------
00013302                            
00013302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013302                            
00013302                            
00013302                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013302 3C38 F760                  		move.w	($FFFFF760).w,d6
00013306 3A38 F762                  		move.w	($FFFFF762).w,d5
0001330A E345                       		asl.w	#1,d5
0001330C 0828 0004 0022             		btst	#4,$22(a0)
00013312 6600                       		bne.s	Obj01_ResetScr2
00013314 3028 0010                  		move.w	$10(a0),d0
00013318 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001331E 6700                       		beq.s	loc_13278	; if not, branch
00013320 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013326 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013328 6100 0000                  		bsr.w	SonicCJD_JumpLeft
0001332C 6E00                       		bgt.s	loc_13278
0001332E 3001                       		move.w	d1,d0
00013330                            
00013330                            loc_13278:
00013330 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013336 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013338 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001333E 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013340 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013344 6E00                       		bgt.s	Obj01_JumpMove
00013346 3001                       		move.w	d1,d0
00013348 6000                       		bra.s	Obj01_JumpMove
0001334A                            
0001334A                            SonicCJD_JumpLeft:
0001334A 08E8 0000 0022             		bset	#0,$22(a0)
00013350 9045                       		sub.w	d5,d0
00013352 3206                       		move.w	d6,d1
00013354 4441                       		neg.w	d1
00013356 B041                       		cmp.w	d1,d0
00013358                            		; bgt.s	loc_13278
00013358                            		; move.w	d1,d0
00013358 4E75                       		rts
0001335A                            
0001335A                            SonicCJD_JumpRight:
0001335A 08A8 0000 0022             		bclr	#0,$22(a0)
00013360 D045                       		add.w	d5,d0
00013362 B046                       		cmp.w	d6,d0
00013364 6D00                       		blt.s	Obj01_JumpMove
00013366 3006                       		move.w	d6,d0
00013368                            
00013368                            Obj01_JumpMove:
00013368 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
0001336C                            
0001336C                            Obj01_ResetScr2:
0001336C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013372 6700                       		beq.s	loc_132A4	; if yes, branch
00013374 6400                       		bcc.s	loc_132A0
00013376 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001337A                            
0001337A                            loc_132A0:
0001337A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001337E                            
0001337E                            loc_132A4:
0001337E 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013384 6500                       		bcs.s	locret_132D2	; if yes, branch
00013386 3028 0010                  		move.w	$10(a0),d0
0001338A 3200                       		move.w	d0,d1
0001338C EA41                       		asr.w	#5,d1
0001338E 6700                       		beq.s	locret_132D2
00013390 6B00                       		bmi.s	loc_132C6
00013392 9041                       		sub.w	d1,d0
00013394 6400                       		bcc.s	loc_132C0
00013396 303C 0000                  		move.w	#0,d0
0001339A                            
0001339A                            loc_132C0:
0001339A 3140 0010                  		move.w	d0,$10(a0)
0001339E 4E75                       		rts	
000133A0                            ; ===========================================================================
000133A0                            
000133A0                            loc_132C6:
000133A0 9041                       		sub.w	d1,d0
000133A2 6500                       		bcs.s	loc_132CE
000133A4 303C 0000                  		move.w	#0,d0
000133A8                            
000133A8                            loc_132CE:
000133A8 3140 0010                  		move.w	d0,$10(a0)
000133AC                            
000133AC                            locret_132D2:
000133AC 4E75                       		rts	
000133AE                            ; End of function Sonic_ChgJumpDir
000133AE                            
000133AE                            ; ===========================================================================
000133AE                            ; ---------------------------------------------------------------------------
000133AE                            ; Unused subroutine to squash Sonic
000133AE                            ; ---------------------------------------------------------------------------
000133AE 1028 0026                  		move.b	$26(a0),d0
000133B2 0600 0020                  		addi.b	#$20,d0
000133B6 0200 00C0                  		andi.b	#$C0,d0
000133BA 6600                       		bne.s	locret_13302
000133BC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000133C0 4A41                       		tst.w	d1
000133C2 6A00                       		bpl.s	locret_13302
000133C4 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000133CA 317C 0000 0010             		move.w	#0,$10(a0)
000133D0 317C 0000 0012             		move.w	#0,$12(a0)
000133D6 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000133DC                            
000133DC                            locret_13302:
000133DC 4E75                       		rts	
000133DE                            ; ---------------------------------------------------------------------------
000133DE                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000133DE                            ; ---------------------------------------------------------------------------
000133DE                            
000133DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133DE                            
000133DE                            
000133DE                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000133DE 2228 0008                  		move.l	8(a0),d1
000133E2 3028 0010                  		move.w	$10(a0),d0
000133E6 48C0                       		ext.l	d0
000133E8 E180                       		asl.l	#8,d0
000133EA D280                       		add.l	d0,d1
000133EC 4841                       		swap	d1
000133EE 3038 F728                  		move.w	($FFFFF728).w,d0
000133F2 0640 0010                  		addi.w	#$10,d0
000133F6 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000133F8 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000133FA 3038 F72A                  		move.w	($FFFFF72A).w,d0
000133FE 0640 0128                  		addi.w	#$128,d0
00013402 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013406 6600                       		bne.s	loc_13332
00013408 0640 0040                  		addi.w	#$40,d0
0001340C                            
0001340C                            loc_13332:
0001340C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001340E 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013410                            
00013410                            loc_13336:
00013410 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013414 0640 00E0                  		addi.w	#$E0,d0
00013418 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
0001341C 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
0001341E 4E75                       		rts	
00013420                            ; ===========================================================================
00013420                            
00013420                            Boundary_Bottom:
00013420 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013426 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
0001342A 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013430 6500 0000                  		bcs.w	KillSonic
00013434 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013438 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001343E 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013444 4E75                       		rts	
00013446                            ; ===========================================================================
00013446                            
00013446                            Boundary_Sides:
00013446 3140 0008                  		move.w	d0,8(a0)
0001344A 317C 0000 000A             		move.w	#0,$A(a0)
00013450 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013456 317C 0000 0014             		move.w	#0,$14(a0)
0001345C 60B2                       		bra.s	loc_13336
0001345E                            ; End of function Sonic_LevelBound
0001345E                            
0001345E                            ; ---------------------------------------------------------------------------
0001345E                            ; Subroutine allowing Sonic to roll when he's moving
0001345E                            ; ---------------------------------------------------------------------------
0001345E                            
0001345E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001345E                            
0001345E                            
0001345E                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001345E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013462 6600                       		bne.s	Obj01_NoRoll
00013464 3028 0014                  		move.w	$14(a0),d0
00013468 6A00                       		bpl.s	loc_13392
0001346A 4440                       		neg.w	d0
0001346C                            
0001346C                            loc_13392:
0001346C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013470 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013472 1038 F602                  		move.b	($FFFFF602).w,d0
00013476 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
0001347A 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
0001347C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013482 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013484                            
00013484                            Obj01_NoRoll:
00013484 4E75                       		rts	
00013486                            ; ===========================================================================
00013486                            
00013486                            Obj01_ChkRoll:
00013486 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
0001348C 6700                       		beq.s	Obj01_DoRoll	; if not, branch
0001348E 4E75                       		rts	
00013490                            ; ===========================================================================
00013490                            
00013490                            Obj01_DoRoll:
00013490 08E8 0002 0022             		bset	#2,$22(a0)
00013496 117C 000E 0016             		move.b	#$E,$16(a0)
0001349C 117C 0007 0017             		move.b	#7,$17(a0)
000134A2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000134A8 5A68 000C                  		addq.w	#5,$C(a0)
000134AC 303C 00BE                  		move.w	#$BE,d0
000134B0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rolling sound
000134B6 4A68 0014                  		tst.w	$14(a0)
000134BA 6600                       		bne.s	locret_133E8
000134BC 317C 0200 0014             		move.w	#$200,$14(a0)
000134C2                            
000134C2                            locret_133E8:
000134C2 4E75                       		rts	
000134C4                            ; End of function Sonic_Roll
000134C4                            
000134C4                            ; ---------------------------------------------------------------------------
000134C4                            ; Subroutine allowing Sonic to jump
000134C4                            ; ---------------------------------------------------------------------------
000134C4                            
000134C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134C4                            
000134C4                            
000134C4                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000134C4 1038 F603                  		move.b	($FFFFF603).w,d0
000134C8 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000134CC 6700 0000                  		beq.w	locret_1348E	; if not, branch
000134D0 7000                       		moveq	#0,d0
000134D2 1028 0026                  		move.b	$26(a0),d0
000134D6 0600 0080                  		addi.b	#$80,d0
000134DA 6100 0000                  		bsr.w	sub_14D48
000134DE 0C41 0006                  		cmpi.w	#6,d1
000134E2 6D00 0000                  		blt.w	locret_1348E
000134E6 343C 0680                  		move.w	#$680,d2
000134EA 0828 0006 0022             		btst	#6,$22(a0)
000134F0 6700                       		beq.s	loc_1341C
000134F2 343C 0380                  		move.w	#$380,d2
000134F6                            
000134F6                            loc_1341C:
000134F6 7000                       		moveq	#0,d0
000134F8 1028 0026                  		move.b	$26(a0),d0
000134FC 0400 0040                  		subi.b	#$40,d0
00013500 4EB9 0000 29DA             		jsr	(CalcSine).l
00013506 C3C2                       		muls.w	d2,d1
00013508 E081                       		asr.l	#8,d1
0001350A D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
0001350E C1C2                       		muls.w	d2,d0
00013510 E080                       		asr.l	#8,d0
00013512 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013516 08E8 0001 0022             		bset	#1,$22(a0)
0001351C 08A8 0005 0022             		bclr	#5,$22(a0)
00013522 588F                       		addq.l	#4,sp
00013524 117C 0001 003C             		move.b	#1,$3C(a0)
0001352A 4228 0038                  		clr.b	$38(a0)
0001352E 303C 00A0                  		move.w	#$A0,d0
00013532 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play jumping sound
00013538 117C 0013 0016             		move.b	#$13,$16(a0)
0001353E 117C 0009 0017             		move.b	#9,$17(a0)
00013544 0828 0002 0022             		btst	#2,$22(a0)
0001354A 6600                       		bne.s	loc_13490
0001354C 117C 000E 0016             		move.b	#$E,$16(a0)
00013552 117C 0007 0017             		move.b	#7,$17(a0)
00013558 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
0001355E 08E8 0002 0022             		bset	#2,$22(a0)
00013564 5A68 000C                  		addq.w	#5,$C(a0)
00013568                            
00013568                            locret_1348E:
00013568 4E75                       		rts	
0001356A                            ; ===========================================================================
0001356A                            
0001356A                            loc_13490:
0001356A 08E8 0004 0022             		bset	#4,$22(a0)
00013570 4E75                       		rts	
00013572                            ; End of function Sonic_Jump
00013572                            
00013572                            
00013572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013572                            
00013572                            
00013572                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013572 4A28 003C                  		tst.b	$3C(a0)
00013576 6700                       		beq.s	loc_134C4
00013578 323C FC00                  		move.w	#-$400,d1
0001357C 0828 0006 0022             		btst	#6,$22(a0)
00013582 6700                       		beq.s	loc_134AE
00013584 323C FE00                  		move.w	#-$200,d1
00013588                            
00013588                            loc_134AE:
00013588 B268 0012                  		cmp.w	$12(a0),d1
0001358C 6F00                       		ble.s	locret_134C2
0001358E 1038 F602                  		move.b	($FFFFF602).w,d0
00013592 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013596 6600                       		bne.s	locret_134C2	; if yes, branch
00013598 3141 0012                  		move.w	d1,$12(a0)
0001359C                            
0001359C                            locret_134C2:
0001359C 4E75                       		rts	
0001359E                            ; ===========================================================================
0001359E                            
0001359E                            loc_134C4:
0001359E 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000135A4 6C00                       		bge.s	locret_134D2
000135A6 317C F040 0012             		move.w	#-$FC0,$12(a0)
000135AC                            
000135AC                            locret_134D2:
000135AC 4E75                       		rts	
000135AE                            ; End of function Sonic_JumpHeight
000135AE                            
000135AE                            ; ---------------------------------------------------------------------------
000135AE                            ; Subroutine to	slow Sonic walking up a	slope
000135AE                            ; ---------------------------------------------------------------------------
000135AE                            
000135AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135AE                            
000135AE                            
000135AE                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000135AE 1028 0026                  		move.b	$26(a0),d0
000135B2 0600 0060                  		addi.b	#$60,d0
000135B6 0C00 00C0                  		cmpi.b	#$C0,d0
000135BA 6400                       		bcc.s	locret_13508
000135BC 1028 0026                  		move.b	$26(a0),d0
000135C0 4EB9 0000 29DA             		jsr	(CalcSine).l
000135C6 C1FC 0020                  		muls.w	#$20,d0
000135CA E080                       		asr.l	#8,d0
000135CC 4A68 0014                  		tst.w	$14(a0)
000135D0 6700                       		beq.s	locret_13508
000135D2 6B00                       		bmi.s	loc_13504
000135D4 4A40                       		tst.w	d0
000135D6 6700                       		beq.s	locret_13502
000135D8 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
000135DC                            
000135DC                            locret_13502:
000135DC 4E75                       		rts	
000135DE                            ; ===========================================================================
000135DE                            
000135DE                            loc_13504:
000135DE D168 0014                  		add.w	d0,$14(a0)
000135E2                            
000135E2                            locret_13508:
000135E2 4E75                       		rts	
000135E4                            ; End of function Sonic_SlopeResist
000135E4                            
000135E4                            ; ---------------------------------------------------------------------------
000135E4                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000135E4                            ; ---------------------------------------------------------------------------
000135E4                            
000135E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135E4                            
000135E4                            
000135E4                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
000135E4 1028 0026                  		move.b	$26(a0),d0
000135E8 0600 0060                  		addi.b	#$60,d0
000135EC 0C00 00C0                  		cmpi.b	#-$40,d0
000135F0 6400                       		bcc.s	locret_13544
000135F2 1028 0026                  		move.b	$26(a0),d0
000135F6 4EB9 0000 29DA             		jsr	(CalcSine).l
000135FC C1FC 0050                  		muls.w	#$50,d0
00013600 E080                       		asr.l	#8,d0
00013602 4A68 0014                  		tst.w	$14(a0)
00013606 6B00                       		bmi.s	loc_1353A
00013608 4A40                       		tst.w	d0
0001360A 6A00                       		bpl.s	loc_13534
0001360C E480                       		asr.l	#2,d0
0001360E                            
0001360E                            loc_13534:
0001360E D168 0014                  		add.w	d0,$14(a0)
00013612 4E75                       		rts	
00013614                            ; ===========================================================================
00013614                            
00013614                            loc_1353A:
00013614 4A40                       		tst.w	d0
00013616 6B00                       		bmi.s	loc_13540
00013618 E480                       		asr.l	#2,d0
0001361A                            
0001361A                            loc_13540:
0001361A D168 0014                  		add.w	d0,$14(a0)
0001361E                            
0001361E                            locret_13544:
0001361E 4E75                       		rts	
00013620                            ; End of function Sonic_RollRepel
00013620                            
00013620                            ; ---------------------------------------------------------------------------
00013620                            ; Subroutine to	push Sonic down	a slope
00013620                            ; ---------------------------------------------------------------------------
00013620                            
00013620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013620                            
00013620                            
00013620                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013620 4E71                       		nop	
00013622 4A28 0038                  		tst.b	$38(a0)
00013626 6600                       		bne.s	locret_13580
00013628 4A68 003E                  		tst.w	$3E(a0)
0001362C 6600                       		bne.s	loc_13582
0001362E 1028 0026                  		move.b	$26(a0),d0
00013632 0600 0020                  		addi.b	#$20,d0
00013636 0200 00C0                  		andi.b	#$C0,d0
0001363A 6700                       		beq.s	locret_13580
0001363C 3028 0014                  		move.w	$14(a0),d0
00013640 6A00                       		bpl.s	loc_1356A
00013642 4440                       		neg.w	d0
00013644                            
00013644                            loc_1356A:
00013644 0C40 0280                  		cmpi.w	#$280,d0
00013648 6400                       		bcc.s	locret_13580
0001364A 4268 0014                  		clr.w	$14(a0)
0001364E 08E8 0001 0022             		bset	#1,$22(a0)
00013654 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001365A                            
0001365A                            locret_13580:
0001365A 4E75                       		rts	
0001365C                            ; ===========================================================================
0001365C                            
0001365C                            loc_13582:
0001365C 5368 003E                  		subq.w	#1,$3E(a0)
00013660 4E75                       		rts	
00013662                            ; End of function Sonic_SlopeRepel
00013662                            
00013662                            ; ---------------------------------------------------------------------------
00013662                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013662                            ; ---------------------------------------------------------------------------
00013662                            
00013662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013662                            
00013662                            
00013662                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013662 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013666 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013668 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001366A                            
0001366A 5400                       		addq.b	#2,d0		; increase angle
0001366C 6400                       		bcc.s	loc_13596
0001366E 7000                       		moveq	#0,d0
00013670                            
00013670                            loc_13596:
00013670 6000                       		bra.s	loc_1359E
00013672                            ; ===========================================================================
00013672                            
00013672                            loc_13598:
00013672 5500                       		subq.b	#2,d0		; decrease angle
00013674 6400                       		bcc.s	loc_1359E
00013676 7000                       		moveq	#0,d0
00013678                            
00013678                            loc_1359E:
00013678 1140 0026                  		move.b	d0,$26(a0)
0001367C                            
0001367C                            locret_135A2:
0001367C 4E75                       		rts	
0001367E                            ; End of function Sonic_JumpAngle
0001367E                            
0001367E                            ; ---------------------------------------------------------------------------
0001367E                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001367E                            ; ---------------------------------------------------------------------------
0001367E                            
0001367E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001367E                            
0001367E                            
0001367E                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001367E 3228 0010                  		move.w	$10(a0),d1
00013682 3428 0012                  		move.w	$12(a0),d2
00013686 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0001368C 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013690 0400 0020                  		subi.b	#$20,d0
00013694 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013698 0200 00C0                  		andi.b	#$C0,d0
0001369C 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000136A0 0C00 0040                  		cmpi.b	#$40,d0
000136A4 6700 0000                  		beq.w	loc_13680
000136A8 0C00 0080                  		cmpi.b	#$80,d0
000136AC 6700 0000                  		beq.w	loc_136E2
000136B0 0C00 00C0                  		cmpi.b	#-$40,d0
000136B4 6700 0000                  		beq.w	loc_1373E
000136B8 6100 0000                  		bsr.w	Sonic_HitWall
000136BC 4A41                       		tst.w	d1
000136BE 6A00                       		bpl.s	loc_135F0
000136C0 9368 0008                  		sub.w	d1,8(a0)
000136C4 317C 0000 0010             		move.w	#0,$10(a0)
000136CA                            
000136CA                            loc_135F0:
000136CA 6100 0000                  		bsr.w	sub_14EB4
000136CE 4A41                       		tst.w	d1
000136D0 6A00                       		bpl.s	loc_13602
000136D2 D368 0008                  		add.w	d1,8(a0)
000136D6 317C 0000 0010             		move.w	#0,$10(a0)
000136DC                            
000136DC                            loc_13602:
000136DC 6100 0000                  		bsr.w	Sonic_HitFloor
000136E0 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000136E4 4A41                       		tst.w	d1
000136E6 6A00                       		bpl.s	locret_1367E
000136E8 1428 0012                  		move.b	$12(a0),d2
000136EC 5002                       		addq.b	#8,d2
000136EE 4402                       		neg.b	d2
000136F0 B202                       		cmp.b	d2,d1
000136F2 6C00                       		bge.s	loc_1361E
000136F4 B002                       		cmp.b	d2,d0
000136F6 6D00                       		blt.s	locret_1367E
000136F8                            
000136F8                            loc_1361E:
000136F8 D368 000C                  		add.w	d1,$C(a0)
000136FC 1143 0026                  		move.b	d3,$26(a0)
00013700 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013704 117C 0000 001C             		move.b	#0,$1C(a0)
0001370A 1003                       		move.b	d3,d0
0001370C 0600 0020                  		addi.b	#$20,d0
00013710 0200 0040                  		andi.b	#$40,d0
00013714 6600                       		bne.s	loc_1365C
00013716 1003                       		move.b	d3,d0
00013718 0600 0010                  		addi.b	#$10,d0
0001371C 0200 0020                  		andi.b	#$20,d0
00013720 6700                       		beq.s	loc_1364E
00013722 E0E8 0012                  		asr	$12(a0)
00013726 6000                       		bra.s	loc_13670
00013728                            ; ===========================================================================
00013728                            
00013728                            loc_1364E:
00013728 317C 0000 0012             		move.w	#0,$12(a0)
0001372E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013734 4E75                       		rts	
00013736                            ; ===========================================================================
00013736                            
00013736                            loc_1365C:
00013736 317C 0000 0010             		move.w	#0,$10(a0)
0001373C 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013742 6F00                       		ble.s	loc_13670
00013744 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001374A                            
0001374A                            loc_13670:
0001374A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013750 4A03                       		tst.b	d3
00013752 6A00                       		bpl.s	locret_1367E
00013754 4468 0014                  		neg.w	$14(a0)
00013758                            
00013758                            locret_1367E:
00013758 4E75                       		rts	
0001375A                            ; ===========================================================================
0001375A                            
0001375A                            loc_13680:
0001375A 6100 0000                  		bsr.w	Sonic_HitWall
0001375E 4A41                       		tst.w	d1
00013760 6A00                       		bpl.s	loc_1369A
00013762 9368 0008                  		sub.w	d1,8(a0)
00013766 317C 0000 0010             		move.w	#0,$10(a0)
0001376C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013772 4E75                       		rts	
00013774                            ; ===========================================================================
00013774                            
00013774                            loc_1369A:
00013774 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013778 4A41                       		tst.w	d1
0001377A 6A00                       		bpl.s	loc_136B4
0001377C 9368 000C                  		sub.w	d1,$C(a0)
00013780 4A68 0012                  		tst.w	$12(a0)
00013784 6A00                       		bpl.s	locret_136B2
00013786 317C 0000 0012             		move.w	#0,$12(a0)
0001378C                            
0001378C                            locret_136B2:
0001378C 4E75                       		rts	
0001378E                            ; ===========================================================================
0001378E                            
0001378E                            loc_136B4:
0001378E 4A68 0012                  		tst.w	$12(a0)
00013792 6B00                       		bmi.s	locret_136E0
00013794 6100 0000                  		bsr.w	Sonic_HitFloor
00013798 4A41                       		tst.w	d1
0001379A 6A00                       		bpl.s	locret_136E0
0001379C D368 000C                  		add.w	d1,$C(a0)
000137A0 1143 0026                  		move.b	d3,$26(a0)
000137A4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000137A8 117C 0000 001C             		move.b	#0,$1C(a0)
000137AE 317C 0000 0012             		move.w	#0,$12(a0)
000137B4 3168 0010 0014             		move.w	$10(a0),$14(a0)
000137BA                            
000137BA                            locret_136E0:
000137BA 4E75                       		rts	
000137BC                            ; ===========================================================================
000137BC                            
000137BC                            loc_136E2:
000137BC 6100 0000                  		bsr.w	Sonic_HitWall
000137C0 4A41                       		tst.w	d1
000137C2 6A00                       		bpl.s	loc_136F4
000137C4 9368 0008                  		sub.w	d1,8(a0)
000137C8 317C 0000 0010             		move.w	#0,$10(a0)
000137CE                            
000137CE                            loc_136F4:
000137CE 6100 0000                  		bsr.w	sub_14EB4
000137D2 4A41                       		tst.w	d1
000137D4 6A00                       		bpl.s	loc_13706
000137D6 D368 0008                  		add.w	d1,8(a0)
000137DA 317C 0000 0010             		move.w	#0,$10(a0)
000137E0                            
000137E0                            loc_13706:
000137E0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000137E4 4A41                       		tst.w	d1
000137E6 6A00                       		bpl.s	locret_1373C
000137E8 9368 000C                  		sub.w	d1,$C(a0)
000137EC 1003                       		move.b	d3,d0
000137EE 0600 0020                  		addi.b	#$20,d0
000137F2 0200 0040                  		andi.b	#$40,d0
000137F6 6600                       		bne.s	loc_13726
000137F8 317C 0000 0012             		move.w	#0,$12(a0)
000137FE 4E75                       		rts	
00013800                            ; ===========================================================================
00013800                            
00013800                            loc_13726:
00013800 1143 0026                  		move.b	d3,$26(a0)
00013804 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013808 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001380E 4A03                       		tst.b	d3
00013810 6A00                       		bpl.s	locret_1373C
00013812 4468 0014                  		neg.w	$14(a0)
00013816                            
00013816                            locret_1373C:
00013816 4E75                       		rts	
00013818                            ; ===========================================================================
00013818                            
00013818                            loc_1373E:
00013818 6100 0000                  		bsr.w	sub_14EB4
0001381C 4A41                       		tst.w	d1
0001381E 6A00                       		bpl.s	loc_13758
00013820 D368 0008                  		add.w	d1,8(a0)
00013824 317C 0000 0010             		move.w	#0,$10(a0)
0001382A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013830 4E75                       		rts	
00013832                            ; ===========================================================================
00013832                            
00013832                            loc_13758:
00013832 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013836 4A41                       		tst.w	d1
00013838 6A00                       		bpl.s	loc_13772
0001383A 9368 000C                  		sub.w	d1,$C(a0)
0001383E 4A68 0012                  		tst.w	$12(a0)
00013842 6A00                       		bpl.s	locret_13770
00013844 317C 0000 0012             		move.w	#0,$12(a0)
0001384A                            
0001384A                            locret_13770:
0001384A 4E75                       		rts	
0001384C                            ; ===========================================================================
0001384C                            
0001384C                            loc_13772:
0001384C 4A68 0012                  		tst.w	$12(a0)
00013850 6B00                       		bmi.s	locret_1379E
00013852 6100 0000                  		bsr.w	Sonic_HitFloor
00013856 4A41                       		tst.w	d1
00013858 6A00                       		bpl.s	locret_1379E
0001385A D368 000C                  		add.w	d1,$C(a0)
0001385E 1143 0026                  		move.b	d3,$26(a0)
00013862 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013866 117C 0000 001C             		move.b	#0,$1C(a0)
0001386C 317C 0000 0012             		move.w	#0,$12(a0)
00013872 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013878                            
00013878                            locret_1379E:
00013878 4E75                       		rts	
0001387A                            ; End of function Sonic_Floor
0001387A                            
0001387A                            ; ---------------------------------------------------------------------------
0001387A                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001387A                            ; ---------------------------------------------------------------------------
0001387A                            
0001387A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001387A                            
0001387A                            
0001387A                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001387A 0828 0004 0022             		btst	#4,$22(a0)
00013880 6700                       		beq.s	loc_137AE
00013882 4E71                       		nop	
00013884 4E71                       		nop	
00013886 4E71                       		nop	
00013888                            
00013888                            loc_137AE:
00013888 08A8 0005 0022             		bclr	#5,$22(a0)
0001388E 08A8 0001 0022             		bclr	#1,$22(a0)
00013894 08A8 0004 0022             		bclr	#4,$22(a0)
0001389A 0828 0002 0022             		btst	#2,$22(a0)
000138A0 6700                       		beq.s	loc_137E4
000138A2 08A8 0002 0022             		bclr	#2,$22(a0)
000138A8 117C 0013 0016             		move.b	#$13,$16(a0)
000138AE 117C 0009 0017             		move.b	#9,$17(a0)
000138B4 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000138BA 5B68 000C                  		subq.w	#5,$C(a0)
000138BE                            
000138BE                            loc_137E4:
000138BE 117C 0000 003C             		move.b	#0,$3C(a0)
000138C4 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000138CA 4E75                       		rts	
000138CC                            ; End of function Sonic_ResetOnFloor
000138CC                            
000138CC                            ; ===========================================================================
000138CC                            ; ---------------------------------------------------------------------------
000138CC                            ; Sonic	when he	gets hurt
000138CC                            ; ---------------------------------------------------------------------------
000138CC                            
000138CC                            Obj01_Hurt:				; XREF: Obj01_Index
000138CC 4EBA 9DD8                  		jsr	SpeedToPos
000138D0 0668 0030 0012             		addi.w	#$30,$12(a0)
000138D6 0828 0006 0022             		btst	#6,$22(a0)
000138DC 6700                       		beq.s	loc_1380C
000138DE 0468 0020 0012             		subi.w	#$20,$12(a0)
000138E4                            
000138E4                            loc_1380C:
000138E4 6100 0000                  		bsr.w	Sonic_HurtStop
000138E8 6100 FAF4                  		bsr.w	Sonic_LevelBound
000138EC 6100 F506                  		bsr.w	Sonic_RecordPos
000138F0 6100 0000                  		bsr.w	Sonic_Animate
000138F4 6100 0000                  		bsr.w	LoadSonicDynPLC
000138F8 4EFA 9DD2                  		jmp	DisplaySprite
000138FC                            
000138FC                            ; ---------------------------------------------------------------------------
000138FC                            ; Subroutine to	stop Sonic falling after he's been hurt
000138FC                            ; ---------------------------------------------------------------------------
000138FC                            
000138FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138FC                            
000138FC                            
000138FC                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000138FC 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013900 0640 00E0                  		addi.w	#$E0,d0
00013904 B068 000C                  		cmp.w	$C(a0),d0
00013908 6500 0000                  		bcs.w	KillSonic
0001390C 6100 FD70                  		bsr.w	Sonic_Floor
00013910 0828 0001 0022             		btst	#1,$22(a0)
00013916 6600                       		bne.s	locret_13860
00013918 7000                       		moveq	#0,d0
0001391A 3140 0012                  		move.w	d0,$12(a0)
0001391E 3140 0010                  		move.w	d0,$10(a0)
00013922 3140 0014                  		move.w	d0,$14(a0)
00013926 117C 0000 001C             		move.b	#0,$1C(a0)
0001392C 5528 0024                  		subq.b	#2,$24(a0)
00013930 317C 0078 0030             		move.w	#$78,$30(a0)
00013936                            
00013936                            locret_13860:
00013936 4E75                       		rts	
00013938                            ; End of function Sonic_HurtStop
00013938                            
00013938                            ; ===========================================================================
00013938                            ; ---------------------------------------------------------------------------
00013938                            ; Sonic	when he	dies
00013938                            ; ---------------------------------------------------------------------------
00013938                            
00013938                            Obj01_Death:				; XREF: Obj01_Index
00013938 6100 0000                  		bsr.w	GameOver
0001393C 4EBA 9D3C                  		jsr	ObjectFall
00013940 6100 F4B2                  		bsr.w	Sonic_RecordPos
00013944 6100 0000                  		bsr.w	Sonic_Animate
00013948 6100 0000                  		bsr.w	LoadSonicDynPLC
0001394C 4EFA 9D7E                  		jmp	DisplaySprite
00013950                            
00013950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013950                            
00013950                            
00013950                            GameOver:				; XREF: Obj01_Death
00013950 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013954 0640 0100                  		addi.w	#$100,d0
00013958 B068 000C                  		cmp.w	$C(a0),d0
0001395C 6400 0000                  		bcc.w	locret_13900
00013960 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013966 5428 0024                  		addq.b	#2,$24(a0)
0001396A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001396E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013972 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013976 6600                       		bne.s	loc_138D4
00013978 317C 0000 003A             		move.w	#0,$3A(a0)
0001397E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013984 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001398A 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013990 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013994                            
00013994                            loc_138C2:
00013994 303C 008F                  		move.w	#$8F,d0
00013998 4EB9 0000 1396             		jsr	(PlaySound).l	; play game over music
0001399E 7003                       		moveq	#3,d0
000139A0 4EF9 0000 1580             		jmp	(LoadPLC).l	; load game over patterns
000139A6                            ; ===========================================================================
000139A6                            
000139A6                            loc_138D4:
000139A6 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000139AC 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000139B0 6700                       		beq.s	locret_13900	; if not, branch
000139B2 317C 0000 003A             		move.w	#0,$3A(a0)
000139B8 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000139BE 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000139C4 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000139CA 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000139D0 60C2                       		bra.s	loc_138C2
000139D2                            ; ===========================================================================
000139D2                            
000139D2                            locret_13900:
000139D2 4E75                       		rts	
000139D4                            ; End of function GameOver
000139D4                            
000139D4                            ; ===========================================================================
000139D4                            ; ---------------------------------------------------------------------------
000139D4                            ; Sonic	when the level is restarted
000139D4                            ; ---------------------------------------------------------------------------
000139D4                            
000139D4                            Obj01_ResetLevel:			; XREF: Obj01_Index
000139D4 4A68 003A                  		tst.w	$3A(a0)
000139D8 6700                       		beq.s	locret_13914
000139DA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000139DE 6600                       		bne.s	locret_13914
000139E0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000139E6                            
000139E6                            locret_13914:
000139E6 4E75                       		rts	
000139E8                            
000139E8                            ; ---------------------------------------------------------------------------
000139E8                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000139E8                            ; ---------------------------------------------------------------------------
000139E8                            
000139E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139E8                            
000139E8                            
000139E8                            Sonic_Loops:				; XREF: Obj01_Control
000139E8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
000139EE 6700                       		beq.s	loc_13926	; if yes, branch
000139F0 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
000139F4 6600 0000                  		bne.w	locret_139C2	; if not, branch
000139F8                            
000139F8                            loc_13926:
000139F8 3028 000C                  		move.w	$C(a0),d0
000139FC E248                       		lsr.w	#1,d0
000139FE 0240 0380                  		andi.w	#$380,d0
00013A02 1228 0008                  		move.b	8(a0),d1
00013A06 0241 007F                  		andi.w	#$7F,d1
00013A0A D041                       		add.w	d1,d0
00013A0C 43F8 A400                  		lea	($FFFFA400).w,a1
00013A10 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013A14 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013A18 6700 FA6C                  		beq.w	Obj01_ChkRoll
00013A1C B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013A20 6700 FA64                  		beq.w	Obj01_ChkRoll
00013A24 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013A28 6700                       		beq.s	loc_13976
00013A2A B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013A2E 6700                       		beq.s	loc_13966
00013A30 08A8 0006 0001             		bclr	#6,1(a0)
00013A36 4E75                       		rts	
00013A38                            ; ===========================================================================
00013A38                            
00013A38                            loc_13966:
00013A38 0828 0001 0022             		btst	#1,$22(a0)
00013A3E 6700                       		beq.s	loc_13976
00013A40 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013A46 4E75                       		rts	
00013A48                            ; ===========================================================================
00013A48                            
00013A48                            loc_13976:
00013A48 3428 0008                  		move.w	8(a0),d2
00013A4C 0C02 002C                  		cmpi.b	#$2C,d2
00013A50 6400                       		bcc.s	loc_13988
00013A52 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013A58 4E75                       		rts	
00013A5A                            ; ===========================================================================
00013A5A                            
00013A5A                            loc_13988:
00013A5A 0C02 00E0                  		cmpi.b	#-$20,d2
00013A5E 6500                       		bcs.s	loc_13996
00013A60 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013A66 4E75                       		rts	
00013A68                            ; ===========================================================================
00013A68                            
00013A68                            loc_13996:
00013A68 0828 0006 0001             		btst	#6,1(a0)
00013A6E 6600                       		bne.s	loc_139B2
00013A70 1228 0026                  		move.b	$26(a0),d1
00013A74 6700                       		beq.s	locret_139C2
00013A76 0C01 0080                  		cmpi.b	#-$80,d1
00013A7A 6200                       		bhi.s	locret_139C2
00013A7C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013A82 4E75                       		rts	
00013A84                            ; ===========================================================================
00013A84                            
00013A84                            loc_139B2:
00013A84 1228 0026                  		move.b	$26(a0),d1
00013A88 0C01 0080                  		cmpi.b	#-$80,d1
00013A8C 6300                       		bls.s	locret_139C2
00013A8E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013A94                            
00013A94                            locret_139C2:
00013A94 4E75                       		rts	
00013A96                            ; End of function Sonic_Loops
00013A96                            
00013A96                            ; ---------------------------------------------------------------------------
00013A96                            ; Subroutine to	animate	Sonic's sprites
00013A96                            ; ---------------------------------------------------------------------------
00013A96                            
00013A96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A96                            
00013A96                            
00013A96                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013A96 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013A9C 7000                       		moveq	#0,d0
00013A9E 1028 001C                  		move.b	$1C(a0),d0
00013AA2 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013AA6 6700                       		beq.s	SAnim_Do	; if not, branch
00013AA8 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013AAC 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013AB2 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013AB8                            
00013AB8                            SAnim_Do:
00013AB8 D040                       		add.w	d0,d0
00013ABA D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013ABE 1011                       		move.b	(a1),d0
00013AC0 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013AC2 1228 0022                  		move.b	$22(a0),d1
00013AC6 0201 0001                  		andi.b	#1,d1
00013ACA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013AD0 8328 0001                  		or.b	d1,1(a0)
00013AD4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013AD8 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013ADA 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013ADE                            
00013ADE                            SAnim_Do2:
00013ADE 7200                       		moveq	#0,d1
00013AE0 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013AE4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013AE8 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013AEA                            
00013AEA                            SAnim_Next:
00013AEA 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013AEE 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013AF2                            
00013AF2                            SAnim_Delay:
00013AF2 4E75                       		rts	
00013AF4                            ; ===========================================================================
00013AF4                            
00013AF4                            SAnim_End_FF:
00013AF4 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013AF6 6600                       		bne.s	SAnim_End_FE	; if not, branch
00013AF8 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013AFE 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013B02 60E6                       		bra.s	SAnim_Next
00013B04                            ; ===========================================================================
00013B04                            
00013B04                            SAnim_End_FE:
00013B04 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013B06 6600                       		bne.s	SAnim_End_FD	; if not, branch
00013B08 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013B0C 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013B10 9200                       		sub.b	d0,d1
00013B12 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00013B16 60D2                       		bra.s	SAnim_Next
00013B18                            ; ===========================================================================
00013B18                            
00013B18                            SAnim_End_FD:
00013B18 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00013B1A 6600                       		bne.s	SAnim_End	; if not, branch
00013B1C 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00013B22                            
00013B22                            SAnim_End:
00013B22 4E75                       		rts	
00013B24                            ; ===========================================================================
00013B24                            
00013B24                            SAnim_WalkRun:				; XREF: SAnim_Do
00013B24 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013B28 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00013B2A 5200                       		addq.b	#1,d0		; is animation walking/running?
00013B2C 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00013B30 7200                       		moveq	#0,d1
00013B32 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013B36 1428 0022                  		move.b	$22(a0),d2
00013B3A 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00013B3E 6600                       		bne.s	loc_13A70	; if yes, branch
00013B40 4600                       		not.b	d0		; reverse angle
00013B42                            
00013B42                            loc_13A70:
00013B42 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00013B46 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00013B48 7203                       		moveq	#3,d1
00013B4A                            
00013B4A                            loc_13A78:
00013B4A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013B50 B302                       		eor.b	d1,d2
00013B52 8528 0001                  		or.b	d2,1(a0)
00013B56 0828 0005 0022             		btst	#5,$22(a0)
00013B5C 6600 0000                  		bne.w	SAnim_Push
00013B60 E808                       		lsr.b	#4,d0		; divide angle by $10
00013B62 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00013B66 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013B6A 6A00                       		bpl.s	loc_13A9C
00013B6C 4442                       		neg.w	d2
00013B6E                            
00013B6E                            loc_13A9C:
00013B6E 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00013B74 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00013B78 6400                       		bcc.s	loc_13AB4	; if yes, branch
00013B7A 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00013B80 1200                       		move.b	d0,d1
00013B82 E209                       		lsr.b	#1,d1
00013B84 D001                       		add.b	d1,d0
00013B86                            
00013B86                            loc_13AB4:
00013B86 D000                       		add.b	d0,d0
00013B88 1600                       		move.b	d0,d3
00013B8A 4442                       		neg.w	d2
00013B8C 0642 0800                  		addi.w	#$800,d2
00013B90 6A00                       		bpl.s	loc_13AC2
00013B92 7400                       		moveq	#0,d2
00013B94                            
00013B94                            loc_13AC2:
00013B94 E04A                       		lsr.w	#8,d2
00013B96 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013B9A 6100 FF42                  		bsr.w	SAnim_Do2
00013B9E D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00013BA2 4E75                       		rts	
00013BA4                            ; ===========================================================================
00013BA4                            
00013BA4                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00013BA4 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00013BA6 6600                       		bne.s	SAnim_Push	; if not, branch
00013BA8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013BAC 6A00                       		bpl.s	loc_13ADE
00013BAE 4442                       		neg.w	d2
00013BB0                            
00013BB0                            loc_13ADE:
00013BB0 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00013BB6 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00013BBA 6400                       		bcc.s	loc_13AF0	; if yes, branch
00013BBC 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00013BC2                            
00013BC2                            loc_13AF0:
00013BC2 4442                       		neg.w	d2
00013BC4 0642 0400                  		addi.w	#$400,d2
00013BC8 6A00                       		bpl.s	loc_13AFA
00013BCA 7400                       		moveq	#0,d2
00013BCC                            
00013BCC                            loc_13AFA:
00013BCC E04A                       		lsr.w	#8,d2
00013BCE 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013BD2 1228 0022                  		move.b	$22(a0),d1
00013BD6 0201 0001                  		andi.b	#1,d1
00013BDA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013BE0 8328 0001                  		or.b	d1,1(a0)
00013BE4 6000 FEF8                  		bra.w	SAnim_Do2
00013BE8                            ; ===========================================================================
00013BE8                            
00013BE8                            SAnim_Push:				; XREF: SAnim_RollJump
00013BE8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013BEC 6B00                       		bmi.s	loc_13B1E
00013BEE 4442                       		neg.w	d2
00013BF0                            
00013BF0                            loc_13B1E:
00013BF0 0642 0800                  		addi.w	#$800,d2
00013BF4 6A00                       		bpl.s	loc_13B26
00013BF6 7400                       		moveq	#0,d2
00013BF8                            
00013BF8                            loc_13B26:
00013BF8 EC4A                       		lsr.w	#6,d2
00013BFA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013BFE 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00013C04 1228 0022                  		move.b	$22(a0),d1
00013C08 0201 0001                  		andi.b	#1,d1
00013C0C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013C12 8328 0001                  		or.b	d1,1(a0)
00013C16 6000 FEC6                  		bra.w	SAnim_Do2
00013C1A                            ; End of function Sonic_Animate
00013C1A                            
00013C1A                            ; ===========================================================================
00013C1A                            SonicAniData:
00013C1A                            	include "_anim\Sonic.asm"
00013C1A                            ; ---------------------------------------------------------------------------
00013C1A                            ; Animation script - Sonic
00013C1A                            ; ---------------------------------------------------------------------------
00013C1A 0000                       		dc.w SonAni_Walk-SonicAniData
00013C1C 0000                       		dc.w SonAni_Run-SonicAniData
00013C1E 0000                       		dc.w SonAni_Roll-SonicAniData
00013C20 0000                       		dc.w SonAni_Roll2-SonicAniData
00013C22 0000                       		dc.w SonAni_Push-SonicAniData
00013C24 0000                       		dc.w SonAni_Wait-SonicAniData
00013C26 0000                       		dc.w SonAni_Balance-SonicAniData
00013C28 0000                       		dc.w SonAni_LookUp-SonicAniData
00013C2A 0000                       		dc.w SonAni_Duck-SonicAniData
00013C2C 0000                       		dc.w SonAni_Warp1-SonicAniData
00013C2E 0000                       		dc.w SonAni_Warp2-SonicAniData
00013C30 0000                       		dc.w SonAni_Warp3-SonicAniData
00013C32 0000                       		dc.w SonAni_Warp4-SonicAniData
00013C34 0000                       		dc.w SonAni_Stop-SonicAniData
00013C36 0000                       		dc.w SonAni_Float1-SonicAniData
00013C38 0000                       		dc.w SonAni_Float2-SonicAniData
00013C3A 0000                       		dc.w SonAni_Spring-SonicAniData
00013C3C 0000                       		dc.w SonAni_LZHang-SonicAniData
00013C3E 0000                       		dc.w SonAni_Leap1-SonicAniData
00013C40 0000                       		dc.w SonAni_Leap2-SonicAniData
00013C42 0000                       		dc.w SonAni_Surf-SonicAniData
00013C44 0000                       		dc.w SonAni_Bubble-SonicAniData
00013C46 0000                       		dc.w SonAni_Death1-SonicAniData
00013C48 0000                       		dc.w SonAni_Drown-SonicAniData
00013C4A 0000                       		dc.w SonAni_Death2-SonicAniData
00013C4C 0000                       		dc.w SonAni_Shrink-SonicAniData
00013C4E 0000                       		dc.w SonAni_Hurt-SonicAniData
00013C50 0000                       		dc.w SonAni_LZSlide-SonicAniData
00013C52 0000                       		dc.w SonAni_Blank-SonicAniData
00013C54 0000                       		dc.w SonAni_Float3-SonicAniData
00013C56 0000                       		dc.w SonAni_Float4-SonicAniData
00013C58 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00013C60 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00013C68 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00013C70 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00013C78 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00013C80 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00013C96 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00013C9A 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00013C9E 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00013CA2 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00013CA6 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00013CAA 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00013CAE 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00013CB2 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00013CB6 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00013CBA 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00013CC2 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00013CC6 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00013CCA 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00013CD0 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00013CD6 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00013CDA 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00013CE2 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00013CE6 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00013CEA 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00013CEE 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00013CF8 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00013CFC 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00013D00 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00013D04 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00013D0C 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00013D10                            		even
00013D10                            		even
00013D10                            
00013D10                            ; ---------------------------------------------------------------------------
00013D10                            ; Sonic	pattern	loading	subroutine
00013D10                            ; ---------------------------------------------------------------------------
00013D10                            
00013D10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D10                            
00013D10                            
00013D10                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00013D10 7000                       		moveq	#0,d0
00013D12 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00013D16 B038 F766                  		cmp.b	($FFFFF766).w,d0
00013D1A 6700                       		beq.s	locret_13C96
00013D1C 11C0 F766                  		move.b	d0,($FFFFF766).w
00013D20 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00013D26 D040                       		add.w	d0,d0
00013D28 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013D2C 7200                       		moveq	#0,d1
00013D2E 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00013D30 5301                       		subq.b	#1,d1
00013D32 6B00                       		bmi.s	locret_13C96
00013D34 47F8 C800                  		lea	($FFFFC800).w,a3
00013D38 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00013D3E                            
00013D3E                            SPLC_ReadEntry:
00013D3E 7400                       		moveq	#0,d2
00013D40 141A                       		move.b	(a2)+,d2
00013D42 3002                       		move.w	d2,d0
00013D44 E808                       		lsr.b	#4,d0
00013D46 E14A                       		lsl.w	#8,d2
00013D48 141A                       		move.b	(a2)+,d2
00013D4A EB4A                       		lsl.w	#5,d2
00013D4C 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00013D52 D3C2                       		adda.l	d2,a1
00013D54                            
00013D54                            SPLC_LoadTile:
00013D54 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00013D58 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00013D5C 47EB 0020                  		lea	$20(a3),a3	; next tile
00013D60 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00013D64                            
00013D64 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00013D68                            
00013D68                            locret_13C96:
00013D68 4E75                       		rts	
00013D6A                            ; End of function LoadSonicDynPLC
00013D6A                            
00013D6A                            ; ===========================================================================
00013D6A                            ; ---------------------------------------------------------------------------
00013D6A                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00013D6A                            ; ---------------------------------------------------------------------------
00013D6A                            
00013D6A                            Obj0A:					; XREF: Obj_Index
00013D6A 7000                       		moveq	#0,d0
00013D6C 1028 0024                  		move.b	$24(a0),d0
00013D70 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00013D74 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00013D78                            ; ===========================================================================
00013D78 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00013D7C 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00013D80 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00013D84 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00013D88 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00013D8A                            ; ===========================================================================
00013D8A                            
00013D8A                            Obj0A_Main:				; XREF: Obj0A_Index
00013D8A 5428 0024                  		addq.b	#2,$24(a0)
00013D8E 217C 0001 2A64 0004        		move.l	#Map_obj64,4(a0)
00013D96 317C 8348 0002             		move.w	#$8348,2(a0)
00013D9C 117C 0084 0001             		move.b	#$84,1(a0)
00013DA2 117C 0010 0019             		move.b	#$10,$19(a0)
00013DA8 117C 0001 0018             		move.b	#1,$18(a0)
00013DAE 1028 0028                  		move.b	$28(a0),d0
00013DB2 6A00                       		bpl.s	loc_13D00
00013DB4 5028 0024                  		addq.b	#8,$24(a0)
00013DB8 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00013DC0 317C 0440 0002             		move.w	#$440,2(a0)
00013DC6 0240 007F                  		andi.w	#$7F,d0
00013DCA 1140 0033                  		move.b	d0,$33(a0)
00013DCE 6000 0000                  		bra.w	Obj0A_Countdown
00013DD2                            ; ===========================================================================
00013DD2                            
00013DD2                            loc_13D00:
00013DD2 1140 001C                  		move.b	d0,$1C(a0)
00013DD6 3168 0008 0030             		move.w	8(a0),$30(a0)
00013DDC 317C FF78 0012             		move.w	#-$88,$12(a0)
00013DE2                            
00013DE2                            Obj0A_Animate:				; XREF: Obj0A_Index
00013DE2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013DE8 4EB9 0000 A7F8             		jsr	AnimateSprite
00013DEE                            
00013DEE                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00013DEE 3038 F646                  		move.w	($FFFFF646).w,d0
00013DF2 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00013DF6 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00013DF8 117C 0006 0024             		move.b	#6,$24(a0)
00013DFE 5E28 001C                  		addq.b	#7,$1C(a0)
00013E02 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00013E08 6700                       		beq.s	Obj0A_Display
00013E0A 6000                       		bra.s	Obj0A_Display
00013E0C                            ; ===========================================================================
00013E0C                            
00013E0C                            Obj0A_Wobble:
00013E0C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013E10 6700                       		beq.s	loc_13D44
00013E12 5868 0030                  		addq.w	#4,$30(a0)
00013E16                            
00013E16                            loc_13D44:
00013E16 1028 0026                  		move.b	$26(a0),d0
00013E1A 5228 0026                  		addq.b	#1,$26(a0)
00013E1E 0240 007F                  		andi.w	#$7F,d0
00013E22 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013E28 1031 0000                  		move.b	(a1,d0.w),d0
00013E2C 4880                       		ext.w	d0
00013E2E D068 0030                  		add.w	$30(a0),d0
00013E32 3140 0008                  		move.w	d0,8(a0)
00013E36 6100                       		bsr.s	Obj0A_ShowNumber
00013E38 4EBA 986C                  		jsr	SpeedToPos
00013E3C 4A28 0001                  		tst.b	1(a0)
00013E40 6A00                       		bpl.s	Obj0A_Delete
00013E42 4EFA 9888                  		jmp	DisplaySprite
00013E46                            ; ===========================================================================
00013E46                            
00013E46                            Obj0A_Delete:
00013E46 4EFA 98C0                  		jmp	DeleteObject
00013E4A                            ; ===========================================================================
00013E4A                            
00013E4A                            Obj0A_Display:				; XREF: Obj0A_Index
00013E4A 6100                       		bsr.s	Obj0A_ShowNumber
00013E4C 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013E52 4EB9 0000 A7F8             		jsr	AnimateSprite
00013E58 4EFA 9872                  		jmp	DisplaySprite
00013E5C                            ; ===========================================================================
00013E5C                            
00013E5C                            Obj0A_Delete2:				; XREF: Obj0A_Index
00013E5C 4EFA 98AA                  		jmp	DeleteObject
00013E60                            ; ===========================================================================
00013E60                            
00013E60                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00013E60 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00013E66 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00013E68 5368 0038                  		subq.w	#1,$38(a0)
00013E6C 6600                       		bne.s	Obj0A_Display2
00013E6E 117C 000E 0024             		move.b	#$E,$24(a0)
00013E74 5E28 001C                  		addq.b	#7,$1C(a0)
00013E78 60D0                       		bra.s	Obj0A_Display
00013E7A                            ; ===========================================================================
00013E7A                            
00013E7A                            Obj0A_Display2:
00013E7A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013E80 4EB9 0000 A7F8             		jsr	AnimateSprite
00013E86 4A28 0001                  		tst.b	1(a0)
00013E8A 6A00                       		bpl.s	Obj0A_Delete3
00013E8C 4EFA 983E                  		jmp	DisplaySprite
00013E90                            ; ===========================================================================
00013E90                            
00013E90                            Obj0A_Delete3:
00013E90 4EFA 9876                  		jmp	DeleteObject
00013E94                            ; ===========================================================================
00013E94                            
00013E94                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00013E94 4A68 0038                  		tst.w	$38(a0)
00013E98 6700                       		beq.s	locret_13E1A
00013E9A 5368 0038                  		subq.w	#1,$38(a0)
00013E9E 6600                       		bne.s	locret_13E1A
00013EA0 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00013EA6 6400                       		bcc.s	locret_13E1A
00013EA8 317C 000F 0038             		move.w	#$F,$38(a0)
00013EAE 4268 0012                  		clr.w	$12(a0)
00013EB2 117C 0080 0001             		move.b	#$80,1(a0)
00013EB8 3028 0008                  		move.w	8(a0),d0
00013EBC 9078 F700                  		sub.w	($FFFFF700).w,d0
00013EC0 0640 0080                  		addi.w	#$80,d0
00013EC4 3140 0008                  		move.w	d0,8(a0)
00013EC8 3028 000C                  		move.w	$C(a0),d0
00013ECC 9078 F704                  		sub.w	($FFFFF704).w,d0
00013ED0 0640 0080                  		addi.w	#$80,d0
00013ED4 3140 000A                  		move.w	d0,$A(a0)
00013ED8 117C 000C 0024             		move.b	#$C,$24(a0)
00013EDE                            
00013EDE                            locret_13E1A:
00013EDE 4E75                       		rts	
00013EE0                            ; ===========================================================================
00013EE0                            Obj0A_WobbleData:
00013EE0 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00013EF1 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00013F02 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00013F13 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00013F23 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00013F30 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00013F3D FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00013F4A FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00013F57 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00013F60                            ; ===========================================================================
00013F60                            
00013F60                            Obj0A_Countdown:			; XREF: Obj0A_Index
00013F60 4A68 002C                  		tst.w	$2C(a0)
00013F64 6600 0000                  		bne.w	loc_13F86
00013F68 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00013F6E 6400 0000                  		bcc.w	locret_1408C
00013F72 0838 0006 D022             		btst	#6,($FFFFD022).w
00013F78 6700 0000                  		beq.w	locret_1408C
00013F7C 5368 0038                  		subq.w	#1,$38(a0)
00013F80 6A00 0000                  		bpl.w	loc_13FAC
00013F84 317C 003B 0038             		move.w	#59,$38(a0)
00013F8A 317C 0001 0036             		move.w	#1,$36(a0)
00013F90 4EB9 0000 29B4             		jsr	(RandomNumber).l
00013F96 0240 0001                  		andi.w	#1,d0
00013F9A 1140 0034                  		move.b	d0,$34(a0)
00013F9E 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00013FA2 0C40 0019                  		cmpi.w	#$19,d0
00013FA6 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00013FA8 0C40 0014                  		cmpi.w	#$14,d0
00013FAC 6700                       		beq.s	Obj0A_WarnSound
00013FAE 0C40 000F                  		cmpi.w	#$F,d0
00013FB2 6700                       		beq.s	Obj0A_WarnSound
00013FB4 0C40 000C                  		cmpi.w	#$C,d0
00013FB8 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00013FBA 6600                       		bne.s	loc_13F02
00013FBC 303C 0092                  		move.w	#$92,d0
00013FC0 4EB9 0000 1396             		jsr	(PlaySound).l	; play countdown music
00013FC6                            
00013FC6                            loc_13F02:
00013FC6 5328 0032                  		subq.b	#1,$32(a0)
00013FCA 6A00                       		bpl.s	Obj0A_ReduceAir
00013FCC 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013FD2 08E8 0007 0036             		bset	#7,$36(a0)
00013FD8 6000                       		bra.s	Obj0A_ReduceAir
00013FDA                            ; ===========================================================================
00013FDA                            
00013FDA                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00013FDA 303C 00C2                  		move.w	#$C2,d0
00013FDE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00013FE4                            
00013FE4                            Obj0A_ReduceAir:
00013FE4 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00013FE8 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00013FEC 6100 0000                  		bsr.w	ResumeMusic
00013FF0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00013FF6 303C 00B2                  		move.w	#$B2,d0
00013FFA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play drowning sound
00014000 117C 000A 0034             		move.b	#$A,$34(a0)
00014006 317C 0001 0036             		move.w	#1,$36(a0)
0001400C 317C 0078 002C             		move.w	#$78,$2C(a0)
00014012 2F08                       		move.l	a0,-(sp)
00014014 41F8 D000                  		lea	($FFFFD000).w,a0
00014018 6100 F860                  		bsr.w	Sonic_ResetOnFloor
0001401C 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014022 08E8 0001 0022             		bset	#1,$22(a0)
00014028 08E8 0007 0002             		bset	#7,2(a0)
0001402E 317C 0000 0012             		move.w	#0,$12(a0)
00014034 317C 0000 0010             		move.w	#0,$10(a0)
0001403A 317C 0000 0014             		move.w	#0,$14(a0)
00014040 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014046 205F                       		movea.l	(sp)+,a0
00014048 4E75                       		rts	
0001404A                            ; ===========================================================================
0001404A                            
0001404A                            loc_13F86:
0001404A 5368 002C                  		subq.w	#1,$2C(a0)
0001404E 6600                       		bne.s	loc_13F94
00014050 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014056 4E75                       		rts	
00014058                            ; ===========================================================================
00014058                            
00014058                            loc_13F94:
00014058 2F08                       		move.l	a0,-(sp)
0001405A 41F8 D000                  		lea	($FFFFD000).w,a0
0001405E 4EBA 9646                  		jsr	SpeedToPos
00014062 0668 0010 0012             		addi.w	#$10,$12(a0)
00014068 205F                       		movea.l	(sp)+,a0
0001406A 6000                       		bra.s	loc_13FAC
0001406C                            ; ===========================================================================
0001406C                            
0001406C                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001406C 6000                       		bra.s	Obj0A_MakeItem
0001406E                            ; ===========================================================================
0001406E                            
0001406E                            loc_13FAC:
0001406E 4A68 0036                  		tst.w	$36(a0)
00014072 6700 0000                  		beq.w	locret_1408C
00014076 5368 003A                  		subq.w	#1,$3A(a0)
0001407A 6A00 0000                  		bpl.w	locret_1408C
0001407E                            
0001407E                            Obj0A_MakeItem:
0001407E 4EB9 0000 29B4             		jsr	(RandomNumber).l
00014084 0240 000F                  		andi.w	#$F,d0
00014088 3140 003A                  		move.w	d0,$3A(a0)
0001408C 4EBA 9AC4                  		jsr	SingleObjLoad
00014090 6600 0000                  		bne.w	locret_1408C
00014094 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014098 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001409E 7006                       		moveq	#6,d0
000140A0 0838 0000 D022             		btst	#0,($FFFFD022).w
000140A6 6700                       		beq.s	loc_13FF2
000140A8 4440                       		neg.w	d0
000140AA 137C 0040 0026             		move.b	#$40,$26(a1)
000140B0                            
000140B0                            loc_13FF2:
000140B0 D169 0008                  		add.w	d0,8(a1)
000140B4 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000140BA 137C 0006 0028             		move.b	#6,$28(a1)
000140C0 4A68 002C                  		tst.w	$2C(a0)
000140C4 6700 0000                  		beq.w	loc_1403E
000140C8 0268 0007 003A             		andi.w	#7,$3A(a0)
000140CE 0668 0000 003A             		addi.w	#0,$3A(a0)
000140D4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000140D8 0440 000C                  		subi.w	#$C,d0
000140DC 3340 000C                  		move.w	d0,$C(a1)
000140E0 4EB9 0000 29B4             		jsr	(RandomNumber).l
000140E6 1340 0026                  		move.b	d0,$26(a1)
000140EA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000140EE 0200 0003                  		andi.b	#3,d0
000140F2 6600                       		bne.s	loc_14082
000140F4 137C 000E 0028             		move.b	#$E,$28(a1)
000140FA 6000                       		bra.s	loc_14082
000140FC                            ; ===========================================================================
000140FC                            
000140FC                            loc_1403E:
000140FC 0828 0007 0036             		btst	#7,$36(a0)
00014102 6700                       		beq.s	loc_14082
00014104 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014108 E24A                       		lsr.w	#1,d2
0001410A 4EB9 0000 29B4             		jsr	(RandomNumber).l
00014110 0240 0003                  		andi.w	#3,d0
00014114 6600                       		bne.s	loc_1406A
00014116 08E8 0006 0036             		bset	#6,$36(a0)
0001411C 6600                       		bne.s	loc_14082
0001411E 1342 0028                  		move.b	d2,$28(a1)
00014122 337C 001C 0038             		move.w	#$1C,$38(a1)
00014128                            
00014128                            loc_1406A:
00014128 4A28 0034                  		tst.b	$34(a0)
0001412C 6600                       		bne.s	loc_14082
0001412E 08E8 0006 0036             		bset	#6,$36(a0)
00014134 6600                       		bne.s	loc_14082
00014136 1342 0028                  		move.b	d2,$28(a1)
0001413A 337C 001C 0038             		move.w	#$1C,$38(a1)
00014140                            
00014140                            loc_14082:
00014140 5328 0034                  		subq.b	#1,$34(a0)
00014144 6A00                       		bpl.s	locret_1408C
00014146 4268 0036                  		clr.w	$36(a0)
0001414A                            
0001414A                            locret_1408C:
0001414A 4E75                       		rts	
0001414C                            
0001414C                            ; ---------------------------------------------------------------------------
0001414C                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001414C                            ; ---------------------------------------------------------------------------
0001414C                            
0001414C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001414C                            
0001414C                            
0001414C                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001414C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014152 6200                       		bhi.s	loc_140AC
00014154 303C 0082                  		move.w	#$82,d0		; play LZ music
00014158 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
0001415E 6600                       		bne.s	loc_140A6
00014160 303C 0086                  		move.w	#$86,d0		; play SBZ music
00014164                            
00014164                            loc_140A6:
00014164 4EB9 0000 1396             		jsr	(PlaySound).l
0001416A                            
0001416A                            loc_140AC:
0001416A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014170 4238 D372                  		clr.b	($FFFFD372).w
00014174 4E75                       		rts	
00014176                            ; End of function ResumeMusic
00014176                            
00014176                            ; ===========================================================================
00014176                            Ani_obj0A:
00014176                            	include "_anim\obj0A.asm"
00014176                            ; ---------------------------------------------------------------------------
00014176                            ; Animation script - countdown numbers and bubbles (LZ)
00014176                            ; ---------------------------------------------------------------------------
00014176 0000                       		dc.w byte_140D6-Ani_obj0A
00014178 0000                       		dc.w byte_140E0-Ani_obj0A
0001417A 0000                       		dc.w byte_140EA-Ani_obj0A
0001417C 0000                       		dc.w byte_140F4-Ani_obj0A
0001417E 0000                       		dc.w byte_140FE-Ani_obj0A
00014180 0000                       		dc.w byte_14108-Ani_obj0A
00014182 0000                       		dc.w byte_14112-Ani_obj0A
00014184 0000                       		dc.w byte_14118-Ani_obj0A
00014186 0000                       		dc.w byte_14120-Ani_obj0A
00014188 0000                       		dc.w byte_14128-Ani_obj0A
0001418A 0000                       		dc.w byte_14130-Ani_obj0A
0001418C 0000                       		dc.w byte_14138-Ani_obj0A
0001418E 0000                       		dc.w byte_14140-Ani_obj0A
00014190 0000                       		dc.w byte_14148-Ani_obj0A
00014192 0000                       		dc.w byte_1414A-Ani_obj0A
00014194 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
0001419E 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000141A8 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000141B2 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000141BC 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000141C6 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000141D0 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000141D6 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000141DE 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000141E6 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000141EE 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000141F6 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000141FE 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014206 0EFC                       byte_14148:	dc.b $E, $FC
00014208 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001420E                            		even
0001420E                            		even
0001420E                            
0001420E                            ; ---------------------------------------------------------------------------
0001420E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001420E                            ; ---------------------------------------------------------------------------
0001420E                            Map_obj0A:
0001420E                            	include "_maps\obj0A.asm"
0001420E                            ; ---------------------------------------------------------------------------
0001420E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001420E                            ; ---------------------------------------------------------------------------
0001420E 0000                       		dc.w byte_14152-Map_obj0A
00014210 01                         byte_14152:	dc.b 1
00014211 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014216                            		even
00014216                            		even
00014216                            
00014216                            ; ===========================================================================
00014216                            ; ---------------------------------------------------------------------------
00014216                            ; Object 38 - shield and invincibility stars
00014216                            ; ---------------------------------------------------------------------------
00014216                            
00014216                            Obj38:					; XREF: Obj_Index
00014216 7000                       		moveq	#0,d0
00014218 1028 0024                  		move.b	$24(a0),d0
0001421C 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014220 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014224                            ; ===========================================================================
00014224 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014226 0000                       		dc.w Obj38_Shield-Obj38_Index
00014228 0000                       		dc.w Obj38_Stars-Obj38_Index
0001422A                            ; ===========================================================================
0001422A                            
0001422A                            Obj38_Main:				; XREF: Obj38_Index
0001422A 5428 0024                  		addq.b	#2,$24(a0)
0001422E 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014236 117C 0004 0001             		move.b	#4,1(a0)
0001423C 117C 0001 0018             		move.b	#1,$18(a0)
00014242 117C 0010 0019             		move.b	#$10,$19(a0)
00014248 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001424C 6600                       		bne.s	Obj38_DoStars	; if not, branch
0001424E 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014254 4E75                       		rts	
00014256                            ; ===========================================================================
00014256                            
00014256                            Obj38_DoStars:
00014256 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001425A 317C 055C 0002             		move.w	#$55C,2(a0)
00014260 4E75                       		rts	
00014262                            ; ===========================================================================
00014262                            
00014262                            Obj38_Shield:				; XREF: Obj38_Index
00014262 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014266 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014268 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001426C 6700                       		beq.s	Obj38_Delete	; if not, branch
0001426E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014274 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001427A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014280 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014286 4EB9 0000 A7F8             		jsr	AnimateSprite
0001428C 4EFA 943E                  		jmp	DisplaySprite
00014290                            ; ===========================================================================
00014290                            
00014290                            Obj38_RmvShield:
00014290 4E75                       		rts	
00014292                            ; ===========================================================================
00014292                            
00014292                            Obj38_Delete:
00014292 4EFA 9474                  		jmp	DeleteObject
00014296                            ; ===========================================================================
00014296                            
00014296                            Obj38_Stars:				; XREF: Obj38_Index
00014296 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001429A 6700                       		beq.s	Obj38_Delete2	; if not, branch
0001429C 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000142A0 1228 001C                  		move.b	$1C(a0),d1
000142A4 5301                       		subq.b	#1,d1
000142A6 6000                       		bra.s	Obj38_StarTrail
000142A8                            ; ===========================================================================
000142A8 E909                       		lsl.b	#4,d1
000142AA 5801                       		addq.b	#4,d1
000142AC 9001                       		sub.b	d1,d0
000142AE 1228 0030                  		move.b	$30(a0),d1
000142B2 9001                       		sub.b	d1,d0
000142B4 5801                       		addq.b	#4,d1
000142B6 0201 000F                  		andi.b	#$F,d1
000142BA 1141 0030                  		move.b	d1,$30(a0)
000142BE 6000                       		bra.s	Obj38_StarTrail2a
000142C0                            ; ===========================================================================
000142C0                            
000142C0                            Obj38_StarTrail:			; XREF: Obj38_Stars
000142C0 E709                       		lsl.b	#3,d1
000142C2 1401                       		move.b	d1,d2
000142C4 D201                       		add.b	d1,d1
000142C6 D202                       		add.b	d2,d1
000142C8 5801                       		addq.b	#4,d1
000142CA 9001                       		sub.b	d1,d0
000142CC 1228 0030                  		move.b	$30(a0),d1
000142D0 9001                       		sub.b	d1,d0
000142D2 5801                       		addq.b	#4,d1
000142D4 0C01 0018                  		cmpi.b	#$18,d1
000142D8 6500                       		bcs.s	Obj38_StarTrail2
000142DA 7200                       		moveq	#0,d1
000142DC                            
000142DC                            Obj38_StarTrail2:
000142DC 1141 0030                  		move.b	d1,$30(a0)
000142E0                            
000142E0                            Obj38_StarTrail2a:
000142E0 43F8 CB00                  		lea	($FFFFCB00).w,a1
000142E4 43F1 0000                  		lea	(a1,d0.w),a1
000142E8 3159 0008                  		move.w	(a1)+,8(a0)
000142EC 3159 000C                  		move.w	(a1)+,$C(a0)
000142F0 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000142F6 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000142FC 4EB9 0000 A7F8             		jsr	AnimateSprite
00014302 4EFA 93C8                  		jmp	DisplaySprite
00014306                            ; ===========================================================================
00014306                            
00014306                            Obj38_Delete2:				; XREF: Obj38_Stars
00014306 4EFA 9400                  		jmp	DeleteObject
0001430A                            ; ===========================================================================
0001430A                            ; ---------------------------------------------------------------------------
0001430A                            ; Object 4A - special stage entry from beta
0001430A                            ; ---------------------------------------------------------------------------
0001430A                            
0001430A                            Obj4A:					; XREF: Obj_Index
0001430A 7000                       		moveq	#0,d0
0001430C 1028 0024                  		move.b	$24(a0),d0
00014310 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014314 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014318                            ; ===========================================================================
00014318 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001431A 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001431C 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001431E                            ; ===========================================================================
0001431E                            
0001431E                            Obj4A_Main:				; XREF: Obj4A_Index
0001431E 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014322 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014324 4E75                       		rts	
00014326                            ; ===========================================================================
00014326                            
00014326                            Obj4A_Main2:
00014326 5428 0024                  		addq.b	#2,$24(a0)
0001432A 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014332 117C 0004 0001             		move.b	#4,1(a0)
00014338 117C 0001 0018             		move.b	#1,$18(a0)
0001433E 117C 0038 0019             		move.b	#$38,$19(a0)
00014344 317C 0541 0002             		move.w	#$541,2(a0)
0001434A 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014350                            
00014350                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014350 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014356 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001435C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014362 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014368 4EB9 0000 A7F8             		jsr	AnimateSprite
0001436E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014374 6600                       		bne.s	Obj4A_Display
00014376 4A38 D000                  		tst.b	($FFFFD000).w
0001437A 6700                       		beq.s	Obj4A_Display
0001437C 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014382 303C 00A8                  		move.w	#$A8,d0
00014386 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001438C                            
0001438C                            Obj4A_Display:
0001438C 4EFA 933E                  		jmp	DisplaySprite
00014390                            ; ===========================================================================
00014390                            
00014390                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014390 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014394 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014396 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0001439C 4EFA 936A                  		jmp	DeleteObject
000143A0                            ; ===========================================================================
000143A0                            
000143A0                            Obj4A_Wait:
000143A0 4E75                       		rts	
000143A2                            ; ===========================================================================
000143A2                            ; ---------------------------------------------------------------------------
000143A2                            ; Object 08 - water splash (LZ)
000143A2                            ; ---------------------------------------------------------------------------
000143A2                            
000143A2                            Obj08:					; XREF: Obj_Index
000143A2 7000                       		moveq	#0,d0
000143A4 1028 0024                  		move.b	$24(a0),d0
000143A8 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000143AC 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000143B0                            ; ===========================================================================
000143B0 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000143B2 0000                       		dc.w Obj08_Display-Obj08_Index
000143B4 0000                       		dc.w Obj08_Delete-Obj08_Index
000143B6                            ; ===========================================================================
000143B6                            
000143B6                            Obj08_Main:				; XREF: Obj08_Index
000143B6 5428 0024                  		addq.b	#2,$24(a0)
000143BA 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000143C2 0028 0004 0001             		ori.b	#4,1(a0)
000143C8 117C 0001 0018             		move.b	#1,$18(a0)
000143CE 117C 0010 0019             		move.b	#$10,$19(a0)
000143D4 317C 4259 0002             		move.w	#$4259,2(a0)
000143DA 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
000143E0                            
000143E0                            Obj08_Display:				; XREF: Obj08_Index
000143E0 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
000143E6 43F9 0000 0000             		lea	(Ani_obj08).l,a1
000143EC 4EB9 0000 A7F8             		jsr	AnimateSprite
000143F2 4EFA 92D8                  		jmp	DisplaySprite
000143F6                            ; ===========================================================================
000143F6                            
000143F6                            Obj08_Delete:				; XREF: Obj08_Index
000143F6 4EFA 9310                  		jmp	DeleteObject	; delete when animation	is complete
000143FA                            ; ===========================================================================
000143FA                            Ani_obj38:
000143FA                            	include "_anim\obj38.asm"
000143FA                            ; ---------------------------------------------------------------------------
000143FA                            ; Animation script - shield and invincibility stars
000143FA                            ; ---------------------------------------------------------------------------
000143FA 0000                       		dc.w byte_14356-Ani_obj38
000143FC 0000                       		dc.w byte_1435E-Ani_obj38
000143FE 0000                       		dc.w byte_14364-Ani_obj38
00014400 0000                       		dc.w byte_1437E-Ani_obj38
00014402 0000                       		dc.w byte_14398-Ani_obj38
00014404 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001440C 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014412 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014423 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001442C 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001443D 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014446 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014457 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014460                            		even
00014460                            		even
00014460                            
00014460                            ; ---------------------------------------------------------------------------
00014460                            ; Sprite mappings - shield and invincibility stars
00014460                            ; ---------------------------------------------------------------------------
00014460                            Map_obj38:
00014460                            	include "_maps\obj38.asm"
00014460                            ; ---------------------------------------------------------------------------
00014460                            ; Sprite mappings - shield and invincibility stars
00014460                            ; ---------------------------------------------------------------------------
00014460 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014464 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014468 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
0001446C 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014470 04                         byte_143C2:	dc.b 4
00014471 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014476 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
0001447B 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014480 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014485 04                         byte_143D7:	dc.b 4
00014486 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
0001448B E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014490 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014495 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
0001449A 04                         byte_143EC:	dc.b 4
0001449B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000144A0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000144A5 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000144AA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000144AF 04                         byte_14401:	dc.b 4
000144B0 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000144B5 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000144BA 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000144BF 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000144C4 04                         byte_14416:	dc.b 4
000144C5 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000144CA E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000144CF 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000144D4 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000144D9 04                         byte_1442B:	dc.b 4
000144DA E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000144DF E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000144E4 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000144E9 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000144EE 04                         byte_14440:	dc.b 4
000144EF E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000144F4 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000144F9 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000144FE 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014504 00                         		even
00014504 00                         		even
00014504                            
00014504                            Ani_obj4A:
00014504                            	include "_anim\obj4A.asm"
00014504                            ; ---------------------------------------------------------------------------
00014504                            ; Animation script - special stage entry effect from beta
00014504                            ; ---------------------------------------------------------------------------
00014504 0000                       		dc.w byte_14458-Ani_obj4A
00014506 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
0001451A                            		even
0001451A                            		even
0001451A                            
0001451A                            ; ---------------------------------------------------------------------------
0001451A                            ; Sprite mappings - special stage entry	from beta
0001451A                            ; ---------------------------------------------------------------------------
0001451A                            Map_obj4A:
0001451A                            	include "_maps\obj4A.asm"
0001451A                            ; ---------------------------------------------------------------------------
0001451A                            ; Sprite mappings - special stage entry	from beta
0001451A                            ; ---------------------------------------------------------------------------
0001451A 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
0001451E 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014522 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014526 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
0001452A 03                         byte_1447C:	dc.b 3
0001452B F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014530 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014535 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001453A 03                         byte_1448C:	dc.b 3
0001453B F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014540 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014545 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001454A 05                         byte_1449C:	dc.b 5
0001454B E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014550 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014555 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001455A 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001455F 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014564 09                         byte_144B6:	dc.b 9
00014565 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001456A F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001456F 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014574 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014579 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001457E F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014583 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014588 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001458D F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014592 12                         byte_144E4:	dc.b $12
00014593 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014598 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001459D F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000145A2 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000145A7 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000145AC 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000145B1 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000145B6 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000145BB 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000145C0 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000145C5 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000145CA 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000145CF F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
000145D4 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
000145D9 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
000145DE F800 1826 30               		dc.b $F8, 0, $18, $26, $30
000145E3 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
000145E8 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
000145ED 11                         byte_1453F:	dc.b $11
000145EE F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000145F3 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000145F8 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000145FD 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014602 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014607 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001460C 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014611 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014616 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001461B 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014620 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014625 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001462A F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001462F 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014634 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014639 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001463E 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014643 09                         byte_14595:	dc.b 9
00014644 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014649 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001464E 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014653 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014658 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001465D FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014662 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014667 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001466C 04                         		dc.b 4
0001466D 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014672                            		even
00014672                            		even
00014672                            
00014672                            Ani_obj08:
00014672                            	include "_anim\obj08.asm"
00014672                            ; ---------------------------------------------------------------------------
00014672                            ; Animation script - water splash (LZ)
00014672                            ; ---------------------------------------------------------------------------
00014672 0000                       		dc.w byte_145C6-Ani_obj08
00014674 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
0001467A                            		even
0001467A                            		even
0001467A                            
0001467A                            ; ---------------------------------------------------------------------------
0001467A                            ; Sprite mappings - water splash (LZ)
0001467A                            ; ---------------------------------------------------------------------------
0001467A                            Map_obj08:
0001467A                            	include "_maps\obj08.asm"
0001467A                            ; ---------------------------------------------------------------------------
0001467A                            ; Sprite mappings - water splash (LZ)
0001467A                            ; ---------------------------------------------------------------------------
0001467A 0000                       		dc.w byte_145D2-Map_obj08
0001467C 0000                       		dc.w byte_145DD-Map_obj08
0001467E 0000                       		dc.w byte_145E8-Map_obj08
00014680 02                         byte_145D2:	dc.b 2
00014681 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014686 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001468B 02                         byte_145DD:	dc.b 2
0001468C E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014691 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014696 01                         byte_145E8:	dc.b 1
00014697 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001469C                            		even
0001469C                            		even
0001469C                            
0001469C                            ; ---------------------------------------------------------------------------
0001469C                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001469C                            ; ---------------------------------------------------------------------------
0001469C                            
0001469C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001469C                            
0001469C                            
0001469C                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001469C 0828 0003 0022             		btst	#3,$22(a0)
000146A2 6700                       		beq.s	loc_14602
000146A4 7000                       		moveq	#0,d0
000146A6 11C0 F768                  		move.b	d0,($FFFFF768).w
000146AA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000146AE 4E75                       		rts	
000146B0                            ; ===========================================================================
000146B0                            
000146B0                            loc_14602:
000146B0 7003                       		moveq	#3,d0
000146B2 11C0 F768                  		move.b	d0,($FFFFF768).w
000146B6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000146BA 1028 0026                  		move.b	$26(a0),d0
000146BE 0600 0020                  		addi.b	#$20,d0
000146C2 6A00                       		bpl.s	loc_14624
000146C4 1028 0026                  		move.b	$26(a0),d0
000146C8 6A00                       		bpl.s	loc_1461E
000146CA 5300                       		subq.b	#1,d0
000146CC                            
000146CC                            loc_1461E:
000146CC 0600 0020                  		addi.b	#$20,d0
000146D0 6000                       		bra.s	loc_14630
000146D2                            ; ===========================================================================
000146D2                            
000146D2                            loc_14624:
000146D2 1028 0026                  		move.b	$26(a0),d0
000146D6 6A00                       		bpl.s	loc_1462C
000146D8 5200                       		addq.b	#1,d0
000146DA                            
000146DA                            loc_1462C:
000146DA 0600 001F                  		addi.b	#$1F,d0
000146DE                            
000146DE                            loc_14630:
000146DE 0200 00C0                  		andi.b	#$C0,d0
000146E2 0C00 0040                  		cmpi.b	#$40,d0
000146E6 6700 0000                  		beq.w	Sonic_WalkVertL
000146EA 0C00 0080                  		cmpi.b	#$80,d0
000146EE 6700 0000                  		beq.w	Sonic_WalkCeiling
000146F2 0C00 00C0                  		cmpi.b	#$C0,d0
000146F6 6700 0000                  		beq.w	Sonic_WalkVertR
000146FA 3428 000C                  		move.w	$C(a0),d2
000146FE 3628 0008                  		move.w	8(a0),d3
00014702 7000                       		moveq	#0,d0
00014704 1028 0016                  		move.b	$16(a0),d0
00014708 4880                       		ext.w	d0
0001470A D440                       		add.w	d0,d2
0001470C 1028 0017                  		move.b	$17(a0),d0
00014710 4880                       		ext.w	d0
00014712 D640                       		add.w	d0,d3
00014714 49F8 F768                  		lea	($FFFFF768).w,a4
00014718 367C 0010                  		movea.w	#$10,a3
0001471C 3C3C 0000                  		move.w	#0,d6
00014720 7A0D                       		moveq	#$D,d5
00014722 6100 0000                  		bsr.w	FindFloor
00014726 3F01                       		move.w	d1,-(sp)
00014728 3428 000C                  		move.w	$C(a0),d2
0001472C 3628 0008                  		move.w	8(a0),d3
00014730 7000                       		moveq	#0,d0
00014732 1028 0016                  		move.b	$16(a0),d0
00014736 4880                       		ext.w	d0
00014738 D440                       		add.w	d0,d2
0001473A 1028 0017                  		move.b	$17(a0),d0
0001473E 4880                       		ext.w	d0
00014740 4440                       		neg.w	d0
00014742 D640                       		add.w	d0,d3
00014744 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014748 367C 0010                  		movea.w	#$10,a3
0001474C 3C3C 0000                  		move.w	#0,d6
00014750 7A0D                       		moveq	#$D,d5
00014752 6100 0000                  		bsr.w	FindFloor
00014756 301F                       		move.w	(sp)+,d0
00014758 6100 0000                  		bsr.w	Sonic_Angle
0001475C 4A41                       		tst.w	d1
0001475E 6700                       		beq.s	locret_146BE
00014760 6A00                       		bpl.s	loc_146C0
00014762 0C41 FFF2                  		cmpi.w	#-$E,d1
00014766 6D00                       		blt.s	locret_146E6
00014768 D368 000C                  		add.w	d1,$C(a0)
0001476C                            
0001476C                            locret_146BE:
0001476C 4E75                       		rts	
0001476E                            ; ===========================================================================
0001476E                            
0001476E                            loc_146C0:
0001476E 0C41 000E                  		cmpi.w	#$E,d1
00014772 6E00                       		bgt.s	loc_146CC
00014774                            
00014774                            loc_146C6:
00014774 D368 000C                  		add.w	d1,$C(a0)
00014778 4E75                       		rts	
0001477A                            ; ===========================================================================
0001477A                            
0001477A                            loc_146CC:
0001477A 4A28 0038                  		tst.b	$38(a0)
0001477E 66F4                       		bne.s	loc_146C6
00014780 08E8 0001 0022             		bset	#1,$22(a0)
00014786 08A8 0005 0022             		bclr	#5,$22(a0)
0001478C 117C 0001 001D             		move.b	#1,$1D(a0)
00014792 4E75                       		rts	
00014794                            ; ===========================================================================
00014794                            
00014794                            locret_146E6:
00014794 4E75                       		rts	
00014796                            ; End of function Sonic_AnglePos
00014796                            
00014796                            ; ===========================================================================
00014796 2428 0008                  		move.l	8(a0),d2
0001479A 3028 0010                  		move.w	$10(a0),d0
0001479E 48C0                       		ext.l	d0
000147A0 E180                       		asl.l	#8,d0
000147A2 9480                       		sub.l	d0,d2
000147A4 2142 0008                  		move.l	d2,8(a0)
000147A8 303C 0038                  		move.w	#$38,d0
000147AC 48C0                       		ext.l	d0
000147AE E180                       		asl.l	#8,d0
000147B0 9680                       		sub.l	d0,d3
000147B2 2143 000C                  		move.l	d3,$C(a0)
000147B6 4E75                       		rts	
000147B8                            ; ===========================================================================
000147B8                            
000147B8                            locret_1470A:
000147B8 4E75                       		rts	
000147BA                            ; ===========================================================================
000147BA 2628 000C                  		move.l	$C(a0),d3
000147BE 3028 0012                  		move.w	$12(a0),d0
000147C2 0440 0038                  		subi.w	#$38,d0
000147C6 3140 0012                  		move.w	d0,$12(a0)
000147CA 48C0                       		ext.l	d0
000147CC E180                       		asl.l	#8,d0
000147CE 9680                       		sub.l	d0,d3
000147D0 2143 000C                  		move.l	d3,$C(a0)
000147D4 4E75                       		rts	
000147D6 4E75                       		rts	
000147D8                            ; ===========================================================================
000147D8 2428 0008                  		move.l	8(a0),d2
000147DC 2628 000C                  		move.l	$C(a0),d3
000147E0 3028 0010                  		move.w	$10(a0),d0
000147E4 48C0                       		ext.l	d0
000147E6 E180                       		asl.l	#8,d0
000147E8 9480                       		sub.l	d0,d2
000147EA 3028 0012                  		move.w	$12(a0),d0
000147EE 48C0                       		ext.l	d0
000147F0 E180                       		asl.l	#8,d0
000147F2 9680                       		sub.l	d0,d3
000147F4 2142 0008                  		move.l	d2,8(a0)
000147F8 2143 000C                  		move.l	d3,$C(a0)
000147FC 4E75                       		rts	
000147FE                            
000147FE                            ; ---------------------------------------------------------------------------
000147FE                            ; Subroutine to	change Sonic's angle as he walks along the floor
000147FE                            ; ---------------------------------------------------------------------------
000147FE                            
000147FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147FE                            
000147FE                            
000147FE                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000147FE 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014802 B240                       		cmp.w	d0,d1
00014804 6F00                       		ble.s	loc_1475E
00014806 1438 F768                  		move.b	($FFFFF768).w,d2
0001480A 3200                       		move.w	d0,d1
0001480C                            
0001480C                            loc_1475E:
0001480C 0802 0000                  		btst	#0,d2
00014810 6600                       		bne.s	loc_1476A
00014812 1142 0026                  		move.b	d2,$26(a0)
00014816 4E75                       		rts	
00014818                            ; ===========================================================================
00014818                            
00014818                            loc_1476A:
00014818 1428 0026                  		move.b	$26(a0),d2
0001481C 0602 0020                  		addi.b	#$20,d2
00014820 0202 00C0                  		andi.b	#$C0,d2
00014824 1142 0026                  		move.b	d2,$26(a0)
00014828 4E75                       		rts	
0001482A                            ; End of function Sonic_Angle
0001482A                            
0001482A                            ; ---------------------------------------------------------------------------
0001482A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001482A                            ; ---------------------------------------------------------------------------
0001482A                            
0001482A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001482A                            
0001482A                            
0001482A                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
0001482A 3428 000C                  		move.w	$C(a0),d2
0001482E 3628 0008                  		move.w	8(a0),d3
00014832 7000                       		moveq	#0,d0
00014834 1028 0017                  		move.b	$17(a0),d0
00014838 4880                       		ext.w	d0
0001483A 4440                       		neg.w	d0
0001483C D440                       		add.w	d0,d2
0001483E 1028 0016                  		move.b	$16(a0),d0
00014842 4880                       		ext.w	d0
00014844 D640                       		add.w	d0,d3
00014846 49F8 F768                  		lea	($FFFFF768).w,a4
0001484A 367C 0010                  		movea.w	#$10,a3
0001484E 3C3C 0000                  		move.w	#0,d6
00014852 7A0D                       		moveq	#$D,d5
00014854 6100 0000                  		bsr.w	FindWall
00014858 3F01                       		move.w	d1,-(sp)
0001485A 3428 000C                  		move.w	$C(a0),d2
0001485E 3628 0008                  		move.w	8(a0),d3
00014862 7000                       		moveq	#0,d0
00014864 1028 0017                  		move.b	$17(a0),d0
00014868 4880                       		ext.w	d0
0001486A D440                       		add.w	d0,d2
0001486C 1028 0016                  		move.b	$16(a0),d0
00014870 4880                       		ext.w	d0
00014872 D640                       		add.w	d0,d3
00014874 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014878 367C 0010                  		movea.w	#$10,a3
0001487C 3C3C 0000                  		move.w	#0,d6
00014880 7A0D                       		moveq	#$D,d5
00014882 6100 0000                  		bsr.w	FindWall
00014886 301F                       		move.w	(sp)+,d0
00014888 6100 FF74                  		bsr.w	Sonic_Angle
0001488C 4A41                       		tst.w	d1
0001488E 6700                       		beq.s	locret_147F0
00014890 6A00                       		bpl.s	loc_147F2
00014892 0C41 FFF2                  		cmpi.w	#-$E,d1
00014896 6D00 FF20                  		blt.w	locret_1470A
0001489A D368 0008                  		add.w	d1,8(a0)
0001489E                            
0001489E                            locret_147F0:
0001489E 4E75                       		rts	
000148A0                            ; ===========================================================================
000148A0                            
000148A0                            loc_147F2:
000148A0 0C41 000E                  		cmpi.w	#$E,d1
000148A4 6E00                       		bgt.s	loc_147FE
000148A6                            
000148A6                            loc_147F8:
000148A6 D368 0008                  		add.w	d1,8(a0)
000148AA 4E75                       		rts	
000148AC                            ; ===========================================================================
000148AC                            
000148AC                            loc_147FE:
000148AC 4A28 0038                  		tst.b	$38(a0)
000148B0 66F4                       		bne.s	loc_147F8
000148B2 08E8 0001 0022             		bset	#1,$22(a0)
000148B8 08A8 0005 0022             		bclr	#5,$22(a0)
000148BE 117C 0001 001D             		move.b	#1,$1D(a0)
000148C4 4E75                       		rts	
000148C6                            ; End of function Sonic_WalkVertR
000148C6                            
000148C6                            ; ---------------------------------------------------------------------------
000148C6                            ; Subroutine allowing Sonic to walk upside-down
000148C6                            ; ---------------------------------------------------------------------------
000148C6                            
000148C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148C6                            
000148C6                            
000148C6                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000148C6 3428 000C                  		move.w	$C(a0),d2
000148CA 3628 0008                  		move.w	8(a0),d3
000148CE 7000                       		moveq	#0,d0
000148D0 1028 0016                  		move.b	$16(a0),d0
000148D4 4880                       		ext.w	d0
000148D6 9440                       		sub.w	d0,d2
000148D8 0A42 000F                  		eori.w	#$F,d2
000148DC 1028 0017                  		move.b	$17(a0),d0
000148E0 4880                       		ext.w	d0
000148E2 D640                       		add.w	d0,d3
000148E4 49F8 F768                  		lea	($FFFFF768).w,a4
000148E8 367C FFF0                  		movea.w	#-$10,a3
000148EC 3C3C 1000                  		move.w	#$1000,d6
000148F0 7A0D                       		moveq	#$D,d5
000148F2 6100 0000                  		bsr.w	FindFloor
000148F6 3F01                       		move.w	d1,-(sp)
000148F8 3428 000C                  		move.w	$C(a0),d2
000148FC 3628 0008                  		move.w	8(a0),d3
00014900 7000                       		moveq	#0,d0
00014902 1028 0016                  		move.b	$16(a0),d0
00014906 4880                       		ext.w	d0
00014908 9440                       		sub.w	d0,d2
0001490A 0A42 000F                  		eori.w	#$F,d2
0001490E 1028 0017                  		move.b	$17(a0),d0
00014912 4880                       		ext.w	d0
00014914 9640                       		sub.w	d0,d3
00014916 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001491A 367C FFF0                  		movea.w	#-$10,a3
0001491E 3C3C 1000                  		move.w	#$1000,d6
00014922 7A0D                       		moveq	#$D,d5
00014924 6100 0000                  		bsr.w	FindFloor
00014928 301F                       		move.w	(sp)+,d0
0001492A 6100 FED2                  		bsr.w	Sonic_Angle
0001492E 4A41                       		tst.w	d1
00014930 6700                       		beq.s	locret_14892
00014932 6A00                       		bpl.s	loc_14894
00014934 0C41 FFF2                  		cmpi.w	#-$E,d1
00014938 6D00 FE5A                  		blt.w	locret_146E6
0001493C 9368 000C                  		sub.w	d1,$C(a0)
00014940                            
00014940                            locret_14892:
00014940 4E75                       		rts	
00014942                            ; ===========================================================================
00014942                            
00014942                            loc_14894:
00014942 0C41 000E                  		cmpi.w	#$E,d1
00014946 6E00                       		bgt.s	loc_148A0
00014948                            
00014948                            loc_1489A:
00014948 9368 000C                  		sub.w	d1,$C(a0)
0001494C 4E75                       		rts	
0001494E                            ; ===========================================================================
0001494E                            
0001494E                            loc_148A0:
0001494E 4A28 0038                  		tst.b	$38(a0)
00014952 66F4                       		bne.s	loc_1489A
00014954 08E8 0001 0022             		bset	#1,$22(a0)
0001495A 08A8 0005 0022             		bclr	#5,$22(a0)
00014960 117C 0001 001D             		move.b	#1,$1D(a0)
00014966 4E75                       		rts	
00014968                            ; End of function Sonic_WalkCeiling
00014968                            
00014968                            ; ---------------------------------------------------------------------------
00014968                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014968                            ; ---------------------------------------------------------------------------
00014968                            
00014968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014968                            
00014968                            
00014968                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014968 3428 000C                  		move.w	$C(a0),d2
0001496C 3628 0008                  		move.w	8(a0),d3
00014970 7000                       		moveq	#0,d0
00014972 1028 0017                  		move.b	$17(a0),d0
00014976 4880                       		ext.w	d0
00014978 9440                       		sub.w	d0,d2
0001497A 1028 0016                  		move.b	$16(a0),d0
0001497E 4880                       		ext.w	d0
00014980 9640                       		sub.w	d0,d3
00014982 0A43 000F                  		eori.w	#$F,d3
00014986 49F8 F768                  		lea	($FFFFF768).w,a4
0001498A 367C FFF0                  		movea.w	#-$10,a3
0001498E 3C3C 0800                  		move.w	#$800,d6
00014992 7A0D                       		moveq	#$D,d5
00014994 6100 0000                  		bsr.w	FindWall
00014998 3F01                       		move.w	d1,-(sp)
0001499A 3428 000C                  		move.w	$C(a0),d2
0001499E 3628 0008                  		move.w	8(a0),d3
000149A2 7000                       		moveq	#0,d0
000149A4 1028 0017                  		move.b	$17(a0),d0
000149A8 4880                       		ext.w	d0
000149AA D440                       		add.w	d0,d2
000149AC 1028 0016                  		move.b	$16(a0),d0
000149B0 4880                       		ext.w	d0
000149B2 9640                       		sub.w	d0,d3
000149B4 0A43 000F                  		eori.w	#$F,d3
000149B8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000149BC 367C FFF0                  		movea.w	#-$10,a3
000149C0 3C3C 0800                  		move.w	#$800,d6
000149C4 7A0D                       		moveq	#$D,d5
000149C6 6100 0000                  		bsr.w	FindWall
000149CA 301F                       		move.w	(sp)+,d0
000149CC 6100 FE30                  		bsr.w	Sonic_Angle
000149D0 4A41                       		tst.w	d1
000149D2 6700                       		beq.s	locret_14934
000149D4 6A00                       		bpl.s	loc_14936
000149D6 0C41 FFF2                  		cmpi.w	#-$E,d1
000149DA 6D00 FDDC                  		blt.w	locret_1470A
000149DE 9368 0008                  		sub.w	d1,8(a0)
000149E2                            
000149E2                            locret_14934:
000149E2 4E75                       		rts	
000149E4                            ; ===========================================================================
000149E4                            
000149E4                            loc_14936:
000149E4 0C41 000E                  		cmpi.w	#$E,d1
000149E8 6E00                       		bgt.s	loc_14942
000149EA                            
000149EA                            loc_1493C:
000149EA 9368 0008                  		sub.w	d1,8(a0)
000149EE 4E75                       		rts	
000149F0                            ; ===========================================================================
000149F0                            
000149F0                            loc_14942:
000149F0 4A28 0038                  		tst.b	$38(a0)
000149F4 66F4                       		bne.s	loc_1493C
000149F6 08E8 0001 0022             		bset	#1,$22(a0)
000149FC 08A8 0005 0022             		bclr	#5,$22(a0)
00014A02 117C 0001 001D             		move.b	#1,$1D(a0)
00014A08 4E75                       		rts	
00014A0A                            ; End of function Sonic_WalkVertL
00014A0A                            
00014A0A                            ; ---------------------------------------------------------------------------
00014A0A                            ; Subroutine to	find which tile	the object is standing on
00014A0A                            ; ---------------------------------------------------------------------------
00014A0A                            
00014A0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A0A                            
00014A0A                            
00014A0A                            Floor_ChkTile:				; XREF: FindFloor; et al
00014A0A 3002                       		move.w	d2,d0
00014A0C E248                       		lsr.w	#1,d0
00014A0E 0240 0380                  		andi.w	#$380,d0
00014A12 3203                       		move.w	d3,d1
00014A14 E049                       		lsr.w	#8,d1
00014A16 0241 007F                  		andi.w	#$7F,d1
00014A1A D041                       		add.w	d1,d0
00014A1C 72FF                       		moveq	#-1,d1
00014A1E 43F8 A400                  		lea	($FFFFA400).w,a1
00014A22 1231 0000                  		move.b	(a1,d0.w),d1
00014A26 6700                       		beq.s	loc_14996
00014A28 6B00                       		bmi.s	loc_1499A
00014A2A 5301                       		subq.b	#1,d1
00014A2C 4881                       		ext.w	d1
00014A2E EE59                       		ror.w	#7,d1
00014A30 3002                       		move.w	d2,d0
00014A32 D040                       		add.w	d0,d0
00014A34 0240 01E0                  		andi.w	#$1E0,d0
00014A38 D240                       		add.w	d0,d1
00014A3A 3003                       		move.w	d3,d0
00014A3C E648                       		lsr.w	#3,d0
00014A3E 0240 001E                  		andi.w	#$1E,d0
00014A42 D240                       		add.w	d0,d1
00014A44                            
00014A44                            loc_14996:
00014A44 2241                       		movea.l	d1,a1
00014A46 4E75                       		rts	
00014A48                            ; ===========================================================================
00014A48                            
00014A48                            loc_1499A:
00014A48 0241 007F                  		andi.w	#$7F,d1
00014A4C 0828 0006 0001             		btst	#6,1(a0)
00014A52 6700                       		beq.s	loc_149B2
00014A54 5241                       		addq.w	#1,d1
00014A56 0C41 0029                  		cmpi.w	#$29,d1
00014A5A 6600                       		bne.s	loc_149B2
00014A5C 323C 0051                  		move.w	#$51,d1
00014A60                            
00014A60                            loc_149B2:
00014A60 5301                       		subq.b	#1,d1
00014A62 EE59                       		ror.w	#7,d1
00014A64 3002                       		move.w	d2,d0
00014A66 D040                       		add.w	d0,d0
00014A68 0240 01E0                  		andi.w	#$1E0,d0
00014A6C D240                       		add.w	d0,d1
00014A6E 3003                       		move.w	d3,d0
00014A70 E648                       		lsr.w	#3,d0
00014A72 0240 001E                  		andi.w	#$1E,d0
00014A76 D240                       		add.w	d0,d1
00014A78 2241                       		movea.l	d1,a1
00014A7A 4E75                       		rts	
00014A7C                            ; End of function Floor_ChkTile
00014A7C                            
00014A7C                            
00014A7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A7C                            
00014A7C                            
00014A7C                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014A7C 618C                       		bsr.s	Floor_ChkTile
00014A7E 3011                       		move.w	(a1),d0
00014A80 3800                       		move.w	d0,d4
00014A82 0240 07FF                  		andi.w	#$7FF,d0
00014A86 6700                       		beq.s	loc_149DE
00014A88 0B04                       		btst	d5,d4
00014A8A 6600                       		bne.s	loc_149EC
00014A8C                            
00014A8C                            loc_149DE:
00014A8C D44B                       		add.w	a3,d2
00014A8E 6100 0000                  		bsr.w	FindFloor2
00014A92 944B                       		sub.w	a3,d2
00014A94 0641 0010                  		addi.w	#$10,d1
00014A98 4E75                       		rts	
00014A9A                            ; ===========================================================================
00014A9A                            
00014A9A                            loc_149EC:
00014A9A 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014A9E 1032 0000                  		move.b	(a2,d0.w),d0
00014AA2 0240 00FF                  		andi.w	#$FF,d0
00014AA6 67E4                       		beq.s	loc_149DE
00014AA8 45F9 0000 0000             		lea	(AngleMap).l,a2
00014AAE 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014AB2 E948                       		lsl.w	#4,d0
00014AB4 3203                       		move.w	d3,d1
00014AB6 0804 000B                  		btst	#$B,d4
00014ABA 6700                       		beq.s	loc_14A12
00014ABC 4641                       		not.w	d1
00014ABE 4414                       		neg.b	(a4)
00014AC0                            
00014AC0                            loc_14A12:
00014AC0 0804 000C                  		btst	#$C,d4
00014AC4 6700                       		beq.s	loc_14A22
00014AC6 0614 0040                  		addi.b	#$40,(a4)
00014ACA 4414                       		neg.b	(a4)
00014ACC 0414 0040                  		subi.b	#$40,(a4)
00014AD0                            
00014AD0                            loc_14A22:
00014AD0 0241 000F                  		andi.w	#$F,d1
00014AD4 D240                       		add.w	d0,d1
00014AD6 45F9 0000 0000             		lea	(CollArray1).l,a2
00014ADC 1032 1000                  		move.b	(a2,d1.w),d0
00014AE0 4880                       		ext.w	d0
00014AE2 BD44                       		eor.w	d6,d4
00014AE4 0804 000C                  		btst	#$C,d4
00014AE8 6700                       		beq.s	loc_14A3E
00014AEA 4440                       		neg.w	d0
00014AEC                            
00014AEC                            loc_14A3E:
00014AEC 4A40                       		tst.w	d0
00014AEE 679C                       		beq.s	loc_149DE
00014AF0 6B00                       		bmi.s	loc_14A5A
00014AF2 0C00 0010                  		cmpi.b	#$10,d0
00014AF6 6700                       		beq.s	loc_14A66
00014AF8 3202                       		move.w	d2,d1
00014AFA 0241 000F                  		andi.w	#$F,d1
00014AFE D041                       		add.w	d1,d0
00014B00 323C 000F                  		move.w	#$F,d1
00014B04 9240                       		sub.w	d0,d1
00014B06 4E75                       		rts	
00014B08                            ; ===========================================================================
00014B08                            
00014B08                            loc_14A5A:
00014B08 3202                       		move.w	d2,d1
00014B0A 0241 000F                  		andi.w	#$F,d1
00014B0E D041                       		add.w	d1,d0
00014B10 6A00 FF7A                  		bpl.w	loc_149DE
00014B14                            
00014B14                            loc_14A66:
00014B14 944B                       		sub.w	a3,d2
00014B16 6100 0000                  		bsr.w	FindFloor2
00014B1A D44B                       		add.w	a3,d2
00014B1C 0441 0010                  		subi.w	#$10,d1
00014B20 4E75                       		rts	
00014B22                            ; End of function FindFloor
00014B22                            
00014B22                            
00014B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B22                            
00014B22                            
00014B22                            FindFloor2:				; XREF: FindFloor
00014B22 6100 FEE6                  		bsr.w	Floor_ChkTile
00014B26 3011                       		move.w	(a1),d0
00014B28 3800                       		move.w	d0,d4
00014B2A 0240 07FF                  		andi.w	#$7FF,d0
00014B2E 6700                       		beq.s	loc_14A86
00014B30 0B04                       		btst	d5,d4
00014B32 6600                       		bne.s	loc_14A94
00014B34                            
00014B34                            loc_14A86:
00014B34 323C 000F                  		move.w	#$F,d1
00014B38 3002                       		move.w	d2,d0
00014B3A 0240 000F                  		andi.w	#$F,d0
00014B3E 9240                       		sub.w	d0,d1
00014B40 4E75                       		rts	
00014B42                            ; ===========================================================================
00014B42                            
00014B42                            loc_14A94:
00014B42 2478 F796                  		movea.l	($FFFFF796).w,a2
00014B46 1032 0000                  		move.b	(a2,d0.w),d0
00014B4A 0240 00FF                  		andi.w	#$FF,d0
00014B4E 67E4                       		beq.s	loc_14A86
00014B50 45F9 0000 0000             		lea	(AngleMap).l,a2
00014B56 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014B5A E948                       		lsl.w	#4,d0
00014B5C 3203                       		move.w	d3,d1
00014B5E 0804 000B                  		btst	#$B,d4
00014B62 6700                       		beq.s	loc_14ABA
00014B64 4641                       		not.w	d1
00014B66 4414                       		neg.b	(a4)
00014B68                            
00014B68                            loc_14ABA:
00014B68 0804 000C                  		btst	#$C,d4
00014B6C 6700                       		beq.s	loc_14ACA
00014B6E 0614 0040                  		addi.b	#$40,(a4)
00014B72 4414                       		neg.b	(a4)
00014B74 0414 0040                  		subi.b	#$40,(a4)
00014B78                            
00014B78                            loc_14ACA:
00014B78 0241 000F                  		andi.w	#$F,d1
00014B7C D240                       		add.w	d0,d1
00014B7E 45F9 0000 0000             		lea	(CollArray1).l,a2
00014B84 1032 1000                  		move.b	(a2,d1.w),d0
00014B88 4880                       		ext.w	d0
00014B8A BD44                       		eor.w	d6,d4
00014B8C 0804 000C                  		btst	#$C,d4
00014B90 6700                       		beq.s	loc_14AE6
00014B92 4440                       		neg.w	d0
00014B94                            
00014B94                            loc_14AE6:
00014B94 4A40                       		tst.w	d0
00014B96 679C                       		beq.s	loc_14A86
00014B98 6B00                       		bmi.s	loc_14AFC
00014B9A 3202                       		move.w	d2,d1
00014B9C 0241 000F                  		andi.w	#$F,d1
00014BA0 D041                       		add.w	d1,d0
00014BA2 323C 000F                  		move.w	#$F,d1
00014BA6 9240                       		sub.w	d0,d1
00014BA8 4E75                       		rts	
00014BAA                            ; ===========================================================================
00014BAA                            
00014BAA                            loc_14AFC:
00014BAA 3202                       		move.w	d2,d1
00014BAC 0241 000F                  		andi.w	#$F,d1
00014BB0 D041                       		add.w	d1,d0
00014BB2 6A00 FF80                  		bpl.w	loc_14A86
00014BB6 4641                       		not.w	d1
00014BB8 4E75                       		rts	
00014BBA                            ; End of function FindFloor2
00014BBA                            
00014BBA                            
00014BBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BBA                            
00014BBA                            
00014BBA                            FindWall:				; XREF: Sonic_WalkVertR; et al
00014BBA 6100 FE4E                  		bsr.w	Floor_ChkTile
00014BBE 3011                       		move.w	(a1),d0
00014BC0 3800                       		move.w	d0,d4
00014BC2 0240 07FF                  		andi.w	#$7FF,d0
00014BC6 6700                       		beq.s	loc_14B1E
00014BC8 0B04                       		btst	d5,d4
00014BCA 6600                       		bne.s	loc_14B2C
00014BCC                            
00014BCC                            loc_14B1E:
00014BCC D64B                       		add.w	a3,d3
00014BCE 6100 0000                  		bsr.w	FindWall2
00014BD2 964B                       		sub.w	a3,d3
00014BD4 0641 0010                  		addi.w	#$10,d1
00014BD8 4E75                       		rts	
00014BDA                            ; ===========================================================================
00014BDA                            
00014BDA                            loc_14B2C:
00014BDA 2478 F796                  		movea.l	($FFFFF796).w,a2
00014BDE 1032 0000                  		move.b	(a2,d0.w),d0
00014BE2 0240 00FF                  		andi.w	#$FF,d0
00014BE6 67E4                       		beq.s	loc_14B1E
00014BE8 45F9 0000 0000             		lea	(AngleMap).l,a2
00014BEE 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014BF2 E948                       		lsl.w	#4,d0
00014BF4 3202                       		move.w	d2,d1
00014BF6 0804 000C                  		btst	#$C,d4
00014BFA 6700                       		beq.s	loc_14B5A
00014BFC 4641                       		not.w	d1
00014BFE 0614 0040                  		addi.b	#$40,(a4)
00014C02 4414                       		neg.b	(a4)
00014C04 0414 0040                  		subi.b	#$40,(a4)
00014C08                            
00014C08                            loc_14B5A:
00014C08 0804 000B                  		btst	#$B,d4
00014C0C 6700                       		beq.s	loc_14B62
00014C0E 4414                       		neg.b	(a4)
00014C10                            
00014C10                            loc_14B62:
00014C10 0241 000F                  		andi.w	#$F,d1
00014C14 D240                       		add.w	d0,d1
00014C16 45F9 0000 0000             		lea	(CollArray2).l,a2
00014C1C 1032 1000                  		move.b	(a2,d1.w),d0
00014C20 4880                       		ext.w	d0
00014C22 BD44                       		eor.w	d6,d4
00014C24 0804 000B                  		btst	#$B,d4
00014C28 6700                       		beq.s	loc_14B7E
00014C2A 4440                       		neg.w	d0
00014C2C                            
00014C2C                            loc_14B7E:
00014C2C 4A40                       		tst.w	d0
00014C2E 679C                       		beq.s	loc_14B1E
00014C30 6B00                       		bmi.s	loc_14B9A
00014C32 0C00 0010                  		cmpi.b	#$10,d0
00014C36 6700                       		beq.s	loc_14BA6
00014C38 3203                       		move.w	d3,d1
00014C3A 0241 000F                  		andi.w	#$F,d1
00014C3E D041                       		add.w	d1,d0
00014C40 323C 000F                  		move.w	#$F,d1
00014C44 9240                       		sub.w	d0,d1
00014C46 4E75                       		rts	
00014C48                            ; ===========================================================================
00014C48                            
00014C48                            loc_14B9A:
00014C48 3203                       		move.w	d3,d1
00014C4A 0241 000F                  		andi.w	#$F,d1
00014C4E D041                       		add.w	d1,d0
00014C50 6A00 FF7A                  		bpl.w	loc_14B1E
00014C54                            
00014C54                            loc_14BA6:
00014C54 964B                       		sub.w	a3,d3
00014C56 6100 0000                  		bsr.w	FindWall2
00014C5A D64B                       		add.w	a3,d3
00014C5C 0441 0010                  		subi.w	#$10,d1
00014C60 4E75                       		rts	
00014C62                            ; End of function FindWall
00014C62                            
00014C62                            
00014C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C62                            
00014C62                            
00014C62                            FindWall2:				; XREF: FindWall
00014C62 6100 FDA6                  		bsr.w	Floor_ChkTile
00014C66 3011                       		move.w	(a1),d0
00014C68 3800                       		move.w	d0,d4
00014C6A 0240 07FF                  		andi.w	#$7FF,d0
00014C6E 6700                       		beq.s	loc_14BC6
00014C70 0B04                       		btst	d5,d4
00014C72 6600                       		bne.s	loc_14BD4
00014C74                            
00014C74                            loc_14BC6:
00014C74 323C 000F                  		move.w	#$F,d1
00014C78 3003                       		move.w	d3,d0
00014C7A 0240 000F                  		andi.w	#$F,d0
00014C7E 9240                       		sub.w	d0,d1
00014C80 4E75                       		rts	
00014C82                            ; ===========================================================================
00014C82                            
00014C82                            loc_14BD4:
00014C82 2478 F796                  		movea.l	($FFFFF796).w,a2
00014C86 1032 0000                  		move.b	(a2,d0.w),d0
00014C8A 0240 00FF                  		andi.w	#$FF,d0
00014C8E 67E4                       		beq.s	loc_14BC6
00014C90 45F9 0000 0000             		lea	(AngleMap).l,a2
00014C96 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014C9A E948                       		lsl.w	#4,d0
00014C9C 3202                       		move.w	d2,d1
00014C9E 0804 000C                  		btst	#$C,d4
00014CA2 6700                       		beq.s	loc_14C02
00014CA4 4641                       		not.w	d1
00014CA6 0614 0040                  		addi.b	#$40,(a4)
00014CAA 4414                       		neg.b	(a4)
00014CAC 0414 0040                  		subi.b	#$40,(a4)
00014CB0                            
00014CB0                            loc_14C02:
00014CB0 0804 000B                  		btst	#$B,d4
00014CB4 6700                       		beq.s	loc_14C0A
00014CB6 4414                       		neg.b	(a4)
00014CB8                            
00014CB8                            loc_14C0A:
00014CB8 0241 000F                  		andi.w	#$F,d1
00014CBC D240                       		add.w	d0,d1
00014CBE 45F9 0000 0000             		lea	(CollArray2).l,a2
00014CC4 1032 1000                  		move.b	(a2,d1.w),d0
00014CC8 4880                       		ext.w	d0
00014CCA BD44                       		eor.w	d6,d4
00014CCC 0804 000B                  		btst	#$B,d4
00014CD0 6700                       		beq.s	loc_14C26
00014CD2 4440                       		neg.w	d0
00014CD4                            
00014CD4                            loc_14C26:
00014CD4 4A40                       		tst.w	d0
00014CD6 679C                       		beq.s	loc_14BC6
00014CD8 6B00                       		bmi.s	loc_14C3C
00014CDA 3203                       		move.w	d3,d1
00014CDC 0241 000F                  		andi.w	#$F,d1
00014CE0 D041                       		add.w	d1,d0
00014CE2 323C 000F                  		move.w	#$F,d1
00014CE6 9240                       		sub.w	d0,d1
00014CE8 4E75                       		rts	
00014CEA                            ; ===========================================================================
00014CEA                            
00014CEA                            loc_14C3C:
00014CEA 3203                       		move.w	d3,d1
00014CEC 0241 000F                  		andi.w	#$F,d1
00014CF0 D041                       		add.w	d1,d0
00014CF2 6A00 FF80                  		bpl.w	loc_14BC6
00014CF6 4641                       		not.w	d1
00014CF8 4E75                       		rts	
00014CFA                            ; End of function FindWall2
00014CFA                            
00014CFA                            ; ---------------------------------------------------------------------------
00014CFA                            ; Unused floor/wall subroutine - logs something	to do with collision
00014CFA                            ; ---------------------------------------------------------------------------
00014CFA                            
00014CFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CFA                            
00014CFA                            
00014CFA                            FloorLog_Unk:				; XREF: Level
00014CFA 4E75                       		rts	
00014CFC                            
00014CFC 43F9 0000 0000             		lea	(CollArray1).l,a1
00014D02 45F9 0000 0000             		lea	(CollArray1).l,a2
00014D08 363C 00FF                  		move.w	#$FF,d3
00014D0C                            
00014D0C                            loc_14C5E:
00014D0C 7A10                       		moveq	#$10,d5
00014D0E 343C 000F                  		move.w	#$F,d2
00014D12                            
00014D12                            loc_14C64:
00014D12 7800                       		moveq	#0,d4
00014D14 323C 000F                  		move.w	#$F,d1
00014D18                            
00014D18                            loc_14C6A:
00014D18 3019                       		move.w	(a1)+,d0
00014D1A EAA8                       		lsr.l	d5,d0
00014D1C D944                       		addx.w	d4,d4
00014D1E 51C9 FFF8                  		dbf	d1,loc_14C6A
00014D22                            
00014D22 34C4                       		move.w	d4,(a2)+
00014D24 92FC 0020                  		suba.w	#$20,a1
00014D28 5345                       		subq.w	#1,d5
00014D2A 51CA FFE6                  		dbf	d2,loc_14C64
00014D2E                            
00014D2E D2FC 0020                  		adda.w	#$20,a1
00014D32 51CB FFD8                  		dbf	d3,loc_14C5E
00014D36                            
00014D36 43F9 0000 0000             		lea	(CollArray1).l,a1
00014D3C 45F9 0000 0000             		lea	(CollArray2).l,a2
00014D42 6100                       		bsr.s	FloorLog_Unk2
00014D44 43F9 0000 0000             		lea	(CollArray1).l,a1
00014D4A 45F9 0000 0000             		lea	(CollArray1).l,a2
00014D50                            
00014D50                            ; End of function FloorLog_Unk
00014D50                            
00014D50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D50                            
00014D50                            
00014D50                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00014D50 363C 0FFF                  		move.w	#$FFF,d3
00014D54                            
00014D54                            loc_14CA6:
00014D54 7400                       		moveq	#0,d2
00014D56 323C 000F                  		move.w	#$F,d1
00014D5A 3019                       		move.w	(a1)+,d0
00014D5C 6700                       		beq.s	loc_14CD4
00014D5E 6B00                       		bmi.s	loc_14CBE
00014D60                            
00014D60                            loc_14CB2:
00014D60 E248                       		lsr.w	#1,d0
00014D62 6400                       		bcc.s	loc_14CB8
00014D64 5202                       		addq.b	#1,d2
00014D66                            
00014D66                            loc_14CB8:
00014D66 51C9 FFF8                  		dbf	d1,loc_14CB2
00014D6A                            
00014D6A 6000                       		bra.s	loc_14CD6
00014D6C                            ; ===========================================================================
00014D6C                            
00014D6C                            loc_14CBE:
00014D6C 0C40 FFFF                  		cmpi.w	#-1,d0
00014D70 6700                       		beq.s	loc_14CD0
00014D72                            
00014D72                            loc_14CC4:
00014D72 E348                       		lsl.w	#1,d0
00014D74 6400                       		bcc.s	loc_14CCA
00014D76 5302                       		subq.b	#1,d2
00014D78                            
00014D78                            loc_14CCA:
00014D78 51C9 FFF8                  		dbf	d1,loc_14CC4
00014D7C                            
00014D7C 6000                       		bra.s	loc_14CD6
00014D7E                            ; ===========================================================================
00014D7E                            
00014D7E                            loc_14CD0:
00014D7E 303C 0010                  		move.w	#$10,d0
00014D82                            
00014D82                            loc_14CD4:
00014D82 3400                       		move.w	d0,d2
00014D84                            
00014D84                            loc_14CD6:
00014D84 14C2                       		move.b	d2,(a2)+
00014D86 51CB FFCC                  		dbf	d3,loc_14CA6
00014D8A                            
00014D8A 4E75                       		rts	
00014D8C                            
00014D8C                            ; End of function FloorLog_Unk2
00014D8C                            
00014D8C                            
00014D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D8C                            
00014D8C                            
00014D8C                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00014D8C 2628 0008                  		move.l	8(a0),d3
00014D90 2428 000C                  		move.l	$C(a0),d2
00014D94 3228 0010                  		move.w	$10(a0),d1
00014D98 48C1                       		ext.l	d1
00014D9A E181                       		asl.l	#8,d1
00014D9C D681                       		add.l	d1,d3
00014D9E 3228 0012                  		move.w	$12(a0),d1
00014DA2 48C1                       		ext.l	d1
00014DA4 E181                       		asl.l	#8,d1
00014DA6 D481                       		add.l	d1,d2
00014DA8 4842                       		swap	d2
00014DAA 4843                       		swap	d3
00014DAC 11C0 F768                  		move.b	d0,($FFFFF768).w
00014DB0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014DB4 1200                       		move.b	d0,d1
00014DB6 0600 0020                  		addi.b	#$20,d0
00014DBA 6A00                       		bpl.s	loc_14D1A
00014DBC 1001                       		move.b	d1,d0
00014DBE 6A00                       		bpl.s	loc_14D14
00014DC0 5300                       		subq.b	#1,d0
00014DC2                            
00014DC2                            loc_14D14:
00014DC2 0600 0020                  		addi.b	#$20,d0
00014DC6 6000                       		bra.s	loc_14D24
00014DC8                            ; ===========================================================================
00014DC8                            
00014DC8                            loc_14D1A:
00014DC8 1001                       		move.b	d1,d0
00014DCA 6A00                       		bpl.s	loc_14D20
00014DCC 5200                       		addq.b	#1,d0
00014DCE                            
00014DCE                            loc_14D20:
00014DCE 0600 001F                  		addi.b	#$1F,d0
00014DD2                            
00014DD2                            loc_14D24:
00014DD2 0200 00C0                  		andi.b	#$C0,d0
00014DD6 6700 0000                  		beq.w	loc_14DF0
00014DDA 0C00 0080                  		cmpi.b	#$80,d0
00014DDE 6700 0000                  		beq.w	loc_14F7C
00014DE2 0201 0038                  		andi.b	#$38,d1
00014DE6 6600                       		bne.s	loc_14D3C
00014DE8 5042                       		addq.w	#8,d2
00014DEA                            
00014DEA                            loc_14D3C:
00014DEA 0C00 0040                  		cmpi.b	#$40,d0
00014DEE 6700 0000                  		beq.w	loc_1504A
00014DF2 6000 0000                  		bra.w	loc_14EBC
00014DF6                            
00014DF6                            ; End of function Sonic_WalkSpeed
00014DF6                            
00014DF6                            
00014DF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DF6                            
00014DF6                            
00014DF6                            sub_14D48:				; XREF: Sonic_Jump
00014DF6 11C0 F768                  		move.b	d0,($FFFFF768).w
00014DFA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014DFE 0600 0020                  		addi.b	#$20,d0
00014E02 0200 00C0                  		andi.b	#$C0,d0
00014E06 0C00 0040                  		cmpi.b	#$40,d0
00014E0A 6700 0000                  		beq.w	loc_14FD6
00014E0E 0C00 0080                  		cmpi.b	#$80,d0
00014E12 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00014E16 0C00 00C0                  		cmpi.b	#$C0,d0
00014E1A 6700 0000                  		beq.w	sub_14E50
00014E1E                            
00014E1E                            ; End of function sub_14D48
00014E1E                            
00014E1E                            ; ---------------------------------------------------------------------------
00014E1E                            ; Subroutine to	make Sonic land	on the floor after jumping
00014E1E                            ; ---------------------------------------------------------------------------
00014E1E                            
00014E1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E1E                            
00014E1E                            
00014E1E                            Sonic_HitFloor:				; XREF: Sonic_Floor
00014E1E 3428 000C                  		move.w	$C(a0),d2
00014E22 3628 0008                  		move.w	8(a0),d3
00014E26 7000                       		moveq	#0,d0
00014E28 1028 0016                  		move.b	$16(a0),d0
00014E2C 4880                       		ext.w	d0
00014E2E D440                       		add.w	d0,d2
00014E30 1028 0017                  		move.b	$17(a0),d0
00014E34 4880                       		ext.w	d0
00014E36 D640                       		add.w	d0,d3
00014E38 49F8 F768                  		lea	($FFFFF768).w,a4
00014E3C 367C 0010                  		movea.w	#$10,a3
00014E40 3C3C 0000                  		move.w	#0,d6
00014E44 7A0D                       		moveq	#$D,d5
00014E46 6100 FC34                  		bsr.w	FindFloor
00014E4A 3F01                       		move.w	d1,-(sp)
00014E4C 3428 000C                  		move.w	$C(a0),d2
00014E50 3628 0008                  		move.w	8(a0),d3
00014E54 7000                       		moveq	#0,d0
00014E56 1028 0016                  		move.b	$16(a0),d0
00014E5A 4880                       		ext.w	d0
00014E5C D440                       		add.w	d0,d2
00014E5E 1028 0017                  		move.b	$17(a0),d0
00014E62 4880                       		ext.w	d0
00014E64 9640                       		sub.w	d0,d3
00014E66 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E6A 367C 0010                  		movea.w	#$10,a3
00014E6E 3C3C 0000                  		move.w	#0,d6
00014E72 7A0D                       		moveq	#$D,d5
00014E74 6100 FC06                  		bsr.w	FindFloor
00014E78 301F                       		move.w	(sp)+,d0
00014E7A 143C 0000                  		move.b	#0,d2
00014E7E                            
00014E7E                            loc_14DD0:
00014E7E 1638 F76A                  		move.b	($FFFFF76A).w,d3
00014E82 B240                       		cmp.w	d0,d1
00014E84 6F00                       		ble.s	loc_14DDE
00014E86 1638 F768                  		move.b	($FFFFF768).w,d3
00014E8A C141                       		exg	d0,d1
00014E8C                            
00014E8C                            loc_14DDE:
00014E8C 0803 0000                  		btst	#0,d3
00014E90 6700                       		beq.s	locret_14DE6
00014E92 1602                       		move.b	d2,d3
00014E94                            
00014E94                            locret_14DE6:
00014E94 4E75                       		rts	
00014E96                            
00014E96                            ; End of function Sonic_HitFloor
00014E96                            
00014E96                            ; ===========================================================================
00014E96 3428 000C                  		move.w	$C(a0),d2
00014E9A 3628 0008                  		move.w	8(a0),d3
00014E9E                            
00014E9E                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00014E9E 0642 000A                  		addi.w	#$A,d2
00014EA2 49F8 F768                  		lea	($FFFFF768).w,a4
00014EA6 367C 0010                  		movea.w	#$10,a3
00014EAA 3C3C 0000                  		move.w	#0,d6
00014EAE 7A0E                       		moveq	#$E,d5
00014EB0 6100 FBCA                  		bsr.w	FindFloor
00014EB4 143C 0000                  		move.b	#0,d2
00014EB8                            
00014EB8                            loc_14E0A:				; XREF: sub_14EB4
00014EB8 1638 F768                  		move.b	($FFFFF768).w,d3
00014EBC 0803 0000                  		btst	#0,d3
00014EC0 6700                       		beq.s	locret_14E16
00014EC2 1602                       		move.b	d2,d3
00014EC4                            
00014EC4                            locret_14E16:
00014EC4 4E75                       		rts	
00014EC6                            
00014EC6                            ; ---------------------------------------------------------------------------
00014EC6                            ; Subroutine allowing objects to interact with the floor
00014EC6                            ; ---------------------------------------------------------------------------
00014EC6                            
00014EC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EC6                            
00014EC6                            
00014EC6                            ObjHitFloor:
00014EC6 3628 0008                  		move.w	8(a0),d3
00014ECA                            
00014ECA                            ; End of function ObjHitFloor
00014ECA                            
00014ECA                            
00014ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014ECA                            
00014ECA                            
00014ECA                            ObjHitFloor2:
00014ECA 3428 000C                  		move.w	$C(a0),d2
00014ECE 7000                       		moveq	#0,d0
00014ED0 1028 0016                  		move.b	$16(a0),d0
00014ED4 4880                       		ext.w	d0
00014ED6 D440                       		add.w	d0,d2
00014ED8 49F8 F768                  		lea	($FFFFF768).w,a4
00014EDC 18BC 0000                  		move.b	#0,(a4)
00014EE0 367C 0010                  		movea.w	#$10,a3
00014EE4 3C3C 0000                  		move.w	#0,d6
00014EE8 7A0D                       		moveq	#$D,d5
00014EEA 6100 FB90                  		bsr.w	FindFloor
00014EEE 1638 F768                  		move.b	($FFFFF768).w,d3
00014EF2 0803 0000                  		btst	#0,d3
00014EF6 6700                       		beq.s	locret_14E4E
00014EF8 163C 0000                  		move.b	#0,d3
00014EFC                            
00014EFC                            locret_14E4E:
00014EFC 4E75                       		rts	
00014EFE                            ; End of function ObjHitFloor2
00014EFE                            
00014EFE                            
00014EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EFE                            
00014EFE                            
00014EFE                            sub_14E50:				; XREF: sub_14D48
00014EFE 3428 000C                  		move.w	$C(a0),d2
00014F02 3628 0008                  		move.w	8(a0),d3
00014F06 7000                       		moveq	#0,d0
00014F08 1028 0017                  		move.b	$17(a0),d0
00014F0C 4880                       		ext.w	d0
00014F0E 9440                       		sub.w	d0,d2
00014F10 1028 0016                  		move.b	$16(a0),d0
00014F14 4880                       		ext.w	d0
00014F16 D640                       		add.w	d0,d3
00014F18 49F8 F768                  		lea	($FFFFF768).w,a4
00014F1C 367C 0010                  		movea.w	#$10,a3
00014F20 3C3C 0000                  		move.w	#0,d6
00014F24 7A0E                       		moveq	#$E,d5
00014F26 6100 FC92                  		bsr.w	FindWall
00014F2A 3F01                       		move.w	d1,-(sp)
00014F2C 3428 000C                  		move.w	$C(a0),d2
00014F30 3628 0008                  		move.w	8(a0),d3
00014F34 7000                       		moveq	#0,d0
00014F36 1028 0017                  		move.b	$17(a0),d0
00014F3A 4880                       		ext.w	d0
00014F3C D440                       		add.w	d0,d2
00014F3E 1028 0016                  		move.b	$16(a0),d0
00014F42 4880                       		ext.w	d0
00014F44 D640                       		add.w	d0,d3
00014F46 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F4A 367C 0010                  		movea.w	#$10,a3
00014F4E 3C3C 0000                  		move.w	#0,d6
00014F52 7A0E                       		moveq	#$E,d5
00014F54 6100 FC64                  		bsr.w	FindWall
00014F58 301F                       		move.w	(sp)+,d0
00014F5A 143C 00C0                  		move.b	#-$40,d2
00014F5E 6000 FF1E                  		bra.w	loc_14DD0
00014F62                            
00014F62                            ; End of function sub_14E50
00014F62                            
00014F62                            
00014F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F62                            
00014F62                            
00014F62                            sub_14EB4:				; XREF: Sonic_Floor
00014F62 3428 000C                  		move.w	$C(a0),d2
00014F66 3628 0008                  		move.w	8(a0),d3
00014F6A                            
00014F6A                            loc_14EBC:
00014F6A 0643 000A                  		addi.w	#$A,d3
00014F6E 49F8 F768                  		lea	($FFFFF768).w,a4
00014F72 367C 0010                  		movea.w	#$10,a3
00014F76 3C3C 0000                  		move.w	#0,d6
00014F7A 7A0E                       		moveq	#$E,d5
00014F7C 6100 FC3C                  		bsr.w	FindWall
00014F80 143C 00C0                  		move.b	#-$40,d2
00014F84 6000 FF32                  		bra.w	loc_14E0A
00014F88                            
00014F88                            ; End of function sub_14EB4
00014F88                            
00014F88                            ; ---------------------------------------------------------------------------
00014F88                            ; Subroutine to	detect when an object hits a wall to its right
00014F88                            ; ---------------------------------------------------------------------------
00014F88                            
00014F88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F88                            
00014F88                            
00014F88                            ObjHitWallRight:
00014F88 D668 0008                  		add.w	8(a0),d3
00014F8C 3428 000C                  		move.w	$C(a0),d2
00014F90 49F8 F768                  		lea	($FFFFF768).w,a4
00014F94 18BC 0000                  		move.b	#0,(a4)
00014F98 367C 0010                  		movea.w	#$10,a3
00014F9C 3C3C 0000                  		move.w	#0,d6
00014FA0 7A0E                       		moveq	#$E,d5
00014FA2 6100 FC16                  		bsr.w	FindWall
00014FA6 1638 F768                  		move.b	($FFFFF768).w,d3
00014FAA 0803 0000                  		btst	#0,d3
00014FAE 6700                       		beq.s	locret_14F06
00014FB0 163C 00C0                  		move.b	#-$40,d3
00014FB4                            
00014FB4                            locret_14F06:
00014FB4 4E75                       		rts	
00014FB6                            
00014FB6                            ; End of function ObjHitWallRight
00014FB6                            
00014FB6                            ; ---------------------------------------------------------------------------
00014FB6                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00014FB6                            ; touches them
00014FB6                            ; ---------------------------------------------------------------------------
00014FB6                            
00014FB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FB6                            
00014FB6                            
00014FB6                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00014FB6 3428 000C                  		move.w	$C(a0),d2
00014FBA 3628 0008                  		move.w	8(a0),d3
00014FBE 7000                       		moveq	#0,d0
00014FC0 1028 0016                  		move.b	$16(a0),d0
00014FC4 4880                       		ext.w	d0
00014FC6 9440                       		sub.w	d0,d2
00014FC8 0A42 000F                  		eori.w	#$F,d2
00014FCC 1028 0017                  		move.b	$17(a0),d0
00014FD0 4880                       		ext.w	d0
00014FD2 D640                       		add.w	d0,d3
00014FD4 49F8 F768                  		lea	($FFFFF768).w,a4
00014FD8 367C FFF0                  		movea.w	#-$10,a3
00014FDC 3C3C 1000                  		move.w	#$1000,d6
00014FE0 7A0E                       		moveq	#$E,d5
00014FE2 6100 FA98                  		bsr.w	FindFloor
00014FE6 3F01                       		move.w	d1,-(sp)
00014FE8 3428 000C                  		move.w	$C(a0),d2
00014FEC 3628 0008                  		move.w	8(a0),d3
00014FF0 7000                       		moveq	#0,d0
00014FF2 1028 0016                  		move.b	$16(a0),d0
00014FF6 4880                       		ext.w	d0
00014FF8 9440                       		sub.w	d0,d2
00014FFA 0A42 000F                  		eori.w	#$F,d2
00014FFE 1028 0017                  		move.b	$17(a0),d0
00015002 4880                       		ext.w	d0
00015004 9640                       		sub.w	d0,d3
00015006 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001500A 367C FFF0                  		movea.w	#-$10,a3
0001500E 3C3C 1000                  		move.w	#$1000,d6
00015012 7A0E                       		moveq	#$E,d5
00015014 6100 FA66                  		bsr.w	FindFloor
00015018 301F                       		move.w	(sp)+,d0
0001501A 143C 0080                  		move.b	#-$80,d2
0001501E 6000 FE5E                  		bra.w	loc_14DD0
00015022                            ; End of function Sonic_DontRunOnWalls
00015022                            
00015022                            ; ===========================================================================
00015022 3428 000C                  		move.w	$C(a0),d2
00015026 3628 0008                  		move.w	8(a0),d3
0001502A                            
0001502A                            loc_14F7C:
0001502A 0442 000A                  		subi.w	#$A,d2
0001502E 0A42 000F                  		eori.w	#$F,d2
00015032 49F8 F768                  		lea	($FFFFF768).w,a4
00015036 367C FFF0                  		movea.w	#-$10,a3
0001503A 3C3C 1000                  		move.w	#$1000,d6
0001503E 7A0E                       		moveq	#$E,d5
00015040 6100 FA3A                  		bsr.w	FindFloor
00015044 143C 0080                  		move.b	#-$80,d2
00015048 6000 FE6E                  		bra.w	loc_14E0A
0001504C                            
0001504C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001504C                            
0001504C                            
0001504C                            ObjHitCeiling:
0001504C 3428 000C                  		move.w	$C(a0),d2
00015050 3628 0008                  		move.w	8(a0),d3
00015054 7000                       		moveq	#0,d0
00015056 1028 0016                  		move.b	$16(a0),d0
0001505A 4880                       		ext.w	d0
0001505C 9440                       		sub.w	d0,d2
0001505E 0A42 000F                  		eori.w	#$F,d2
00015062 49F8 F768                  		lea	($FFFFF768).w,a4
00015066 367C FFF0                  		movea.w	#-$10,a3
0001506A 3C3C 1000                  		move.w	#$1000,d6
0001506E 7A0E                       		moveq	#$E,d5
00015070 6100 FA0A                  		bsr.w	FindFloor
00015074 1638 F768                  		move.b	($FFFFF768).w,d3
00015078 0803 0000                  		btst	#0,d3
0001507C 6700                       		beq.s	locret_14FD4
0001507E 163C 0080                  		move.b	#-$80,d3
00015082                            
00015082                            locret_14FD4:
00015082 4E75                       		rts	
00015084                            ; End of function ObjHitCeiling
00015084                            
00015084                            ; ===========================================================================
00015084                            
00015084                            loc_14FD6:				; XREF: sub_14D48
00015084 3428 000C                  		move.w	$C(a0),d2
00015088 3628 0008                  		move.w	8(a0),d3
0001508C 7000                       		moveq	#0,d0
0001508E 1028 0017                  		move.b	$17(a0),d0
00015092 4880                       		ext.w	d0
00015094 9440                       		sub.w	d0,d2
00015096 1028 0016                  		move.b	$16(a0),d0
0001509A 4880                       		ext.w	d0
0001509C 9640                       		sub.w	d0,d3
0001509E 0A43 000F                  		eori.w	#$F,d3
000150A2 49F8 F768                  		lea	($FFFFF768).w,a4
000150A6 367C FFF0                  		movea.w	#-$10,a3
000150AA 3C3C 0800                  		move.w	#$800,d6
000150AE 7A0E                       		moveq	#$E,d5
000150B0 6100 FB08                  		bsr.w	FindWall
000150B4 3F01                       		move.w	d1,-(sp)
000150B6 3428 000C                  		move.w	$C(a0),d2
000150BA 3628 0008                  		move.w	8(a0),d3
000150BE 7000                       		moveq	#0,d0
000150C0 1028 0017                  		move.b	$17(a0),d0
000150C4 4880                       		ext.w	d0
000150C6 D440                       		add.w	d0,d2
000150C8 1028 0016                  		move.b	$16(a0),d0
000150CC 4880                       		ext.w	d0
000150CE 9640                       		sub.w	d0,d3
000150D0 0A43 000F                  		eori.w	#$F,d3
000150D4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000150D8 367C FFF0                  		movea.w	#-$10,a3
000150DC 3C3C 0800                  		move.w	#$800,d6
000150E0 7A0E                       		moveq	#$E,d5
000150E2 6100 FAD6                  		bsr.w	FindWall
000150E6 301F                       		move.w	(sp)+,d0
000150E8 143C 0040                  		move.b	#$40,d2
000150EC 6000 FD90                  		bra.w	loc_14DD0
000150F0                            
000150F0                            ; ---------------------------------------------------------------------------
000150F0                            ; Subroutine to	stop Sonic when	he jumps at a wall
000150F0                            ; ---------------------------------------------------------------------------
000150F0                            
000150F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150F0                            
000150F0                            
000150F0                            Sonic_HitWall:				; XREF: Sonic_Floor
000150F0 3428 000C                  		move.w	$C(a0),d2
000150F4 3628 0008                  		move.w	8(a0),d3
000150F8                            
000150F8                            loc_1504A:
000150F8 0443 000A                  		subi.w	#$A,d3
000150FC 0A43 000F                  		eori.w	#$F,d3
00015100 49F8 F768                  		lea	($FFFFF768).w,a4
00015104 367C FFF0                  		movea.w	#-$10,a3
00015108 3C3C 0800                  		move.w	#$800,d6
0001510C 7A0E                       		moveq	#$E,d5
0001510E 6100 FAAA                  		bsr.w	FindWall
00015112 143C 0040                  		move.b	#$40,d2
00015116 6000 FDA0                  		bra.w	loc_14E0A
0001511A                            ; End of function Sonic_HitWall
0001511A                            
0001511A                            ; ---------------------------------------------------------------------------
0001511A                            ; Subroutine to	detect when an object hits a wall to its left
0001511A                            ; ---------------------------------------------------------------------------
0001511A                            
0001511A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001511A                            
0001511A                            
0001511A                            ObjHitWallLeft:
0001511A D668 0008                  		add.w	8(a0),d3
0001511E 3428 000C                  		move.w	$C(a0),d2
00015122 49F8 F768                  		lea	($FFFFF768).w,a4
00015126 18BC 0000                  		move.b	#0,(a4)
0001512A 367C FFF0                  		movea.w	#-$10,a3
0001512E 3C3C 0800                  		move.w	#$800,d6
00015132 7A0E                       		moveq	#$E,d5
00015134 6100 FA84                  		bsr.w	FindWall
00015138 1638 F768                  		move.b	($FFFFF768).w,d3
0001513C 0803 0000                  		btst	#0,d3
00015140 6700                       		beq.s	locret_15098
00015142 163C 0040                  		move.b	#$40,d3
00015146                            
00015146                            locret_15098:
00015146 4E75                       		rts	
00015148                            ; End of function ObjHitWallLeft
00015148                            
00015148                            ; ===========================================================================
00015148                            ; ---------------------------------------------------------------------------
00015148                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015148                            ; ---------------------------------------------------------------------------
00015148                            
00015148                            Obj66:					; XREF: Obj_Index
00015148 7000                       		moveq	#0,d0
0001514A 1028 0024                  		move.b	$24(a0),d0
0001514E 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015152 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015156                            ; ===========================================================================
00015156 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015158 0000                       		dc.w Obj66_Action-Obj66_Index
0001515A 0000                       		dc.w Obj66_Display-Obj66_Index
0001515C 0000                       		dc.w Obj66_Release-Obj66_Index
0001515E                            ; ===========================================================================
0001515E                            
0001515E                            Obj66_Main:				; XREF: Obj66_Index
0001515E 5428 0024                  		addq.b	#2,$24(a0)
00015162 323C 0001                  		move.w	#1,d1
00015166 2248                       		movea.l	a0,a1
00015168 6000                       		bra.s	Obj66_MakeItem
0001516A                            ; ===========================================================================
0001516A                            
0001516A                            Obj66_Loop:
0001516A 6100 89E6                  		bsr.w	SingleObjLoad
0001516E 6600                       		bne.s	loc_150FE
00015170 12BC 0066                  		move.b	#$66,0(a1)
00015174 5829 0024                  		addq.b	#4,$24(a1)
00015178 3368 0008 0008             		move.w	8(a0),8(a1)
0001517E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015184 137C 0003 0018             		move.b	#3,$18(a1)
0001518A 137C 0010 001A             		move.b	#$10,$1A(a1)
00015190                            
00015190                            Obj66_MakeItem:				; XREF: Obj66_Main
00015190 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015198 337C 4348 0002             		move.w	#$4348,2(a1)
0001519E 0029 0004 0001             		ori.b	#4,1(a1)
000151A4 137C 0038 0019             		move.b	#$38,$19(a1)
000151AA                            
000151AA                            loc_150FE:
000151AA 51C9 FFBE                  		dbf	d1,Obj66_Loop
000151AE                            
000151AE 117C 0030 0019             		move.b	#$30,$19(a0)
000151B4 117C 0004 0018             		move.b	#4,$18(a0)
000151BA 317C 003C 0030             		move.w	#$3C,$30(a0)
000151C0 117C 0001 0034             		move.b	#1,$34(a0)
000151C6 1168 0028 0038             		move.b	$28(a0),$38(a0)
000151CC                            
000151CC                            Obj66_Action:				; XREF: Obj66_Index
000151CC 6100 0000                  		bsr.w	Obj66_ChkSwitch
000151D0 4A28 0001                  		tst.b	1(a0)
000151D4 6A00 0000                  		bpl.w	Obj66_Display
000151D8 323C 0030                  		move.w	#$30,d1
000151DC 3401                       		move.w	d1,d2
000151DE 3602                       		move.w	d2,d3
000151E0 5243                       		addq.w	#1,d3
000151E2 3828 0008                  		move.w	8(a0),d4
000151E6 6100 A8B4                  		bsr.w	SolidObject
000151EA 0828 0005 0022             		btst	#5,$22(a0)
000151F0 6700 0000                  		beq.w	Obj66_Display
000151F4 43F8 D000                  		lea	($FFFFD000).w,a1
000151F8 720E                       		moveq	#$E,d1
000151FA 3029 0008                  		move.w	8(a1),d0
000151FE B068 0008                  		cmp.w	8(a0),d0
00015202 6500                       		bcs.s	Obj66_GrabSonic
00015204 7207                       		moveq	#7,d1
00015206                            
00015206                            Obj66_GrabSonic:
00015206 B228 001A                  		cmp.b	$1A(a0),d1
0001520A 6600                       		bne.s	Obj66_Display
0001520C 1141 0032                  		move.b	d1,$32(a0)
00015210 5828 0024                  		addq.b	#4,$24(a0)
00015214 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001521A 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015220 337C 0800 0014             		move.w	#$800,$14(a1)
00015226 337C 0000 0010             		move.w	#0,$10(a1)
0001522C 337C 0000 0012             		move.w	#0,$12(a1)
00015232 08A8 0005 0022             		bclr	#5,$22(a0)
00015238 08A9 0005 0022             		bclr	#5,$22(a1)
0001523E 08E9 0001 0022             		bset	#1,$22(a1)
00015244 3429 0008                  		move.w	8(a1),d2
00015248 3629 000C                  		move.w	$C(a1),d3
0001524C 6100 0000                  		bsr.w	Obj66_ChgPos
00015250 D569 0008                  		add.w	d2,8(a1)
00015254 D769 000C                  		add.w	d3,$C(a1)
00015258 E0E9 0008                  		asr	8(a1)
0001525C E0E9 000C                  		asr	$C(a1)
00015260                            
00015260                            Obj66_Display:				; XREF: Obj66_Index
00015260 6000 A512                  		bra.w	MarkObjGone
00015264                            ; ===========================================================================
00015264                            
00015264                            Obj66_Release:				; XREF: Obj66_Index
00015264 1028 001A                  		move.b	$1A(a0),d0
00015268 0C00 0004                  		cmpi.b	#4,d0
0001526C 6700                       		beq.s	loc_151C8
0001526E 0C00 0007                  		cmpi.b	#7,d0
00015272 6600                       		bne.s	loc_151F8
00015274                            
00015274                            loc_151C8:
00015274 B028 0032                  		cmp.b	$32(a0),d0
00015278 6700                       		beq.s	loc_151F8
0001527A 43F8 D000                  		lea	($FFFFD000).w,a1
0001527E 337C 0000 0010             		move.w	#0,$10(a1)
00015284 337C 0800 0012             		move.w	#$800,$12(a1)
0001528A 0C00 0004                  		cmpi.b	#4,d0
0001528E 6700                       		beq.s	loc_151F0
00015290 337C 0800 0010             		move.w	#$800,$10(a1)
00015296 337C 0800 0012             		move.w	#$800,$12(a1)
0001529C                            
0001529C                            loc_151F0:
0001529C 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000152A0 5928 0024                  		subq.b	#4,$24(a0)
000152A4                            
000152A4                            loc_151F8:
000152A4 6100                       		bsr.s	Obj66_ChkSwitch
000152A6 6100                       		bsr.s	Obj66_ChgPos
000152A8 6000 A4CA                  		bra.w	MarkObjGone
000152AC                            
000152AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152AC                            
000152AC                            
000152AC                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000152AC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000152B0 7000                       		moveq	#0,d0
000152B2 1028 0038                  		move.b	$38(a0),d0
000152B6 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000152BC 6700                       		beq.s	loc_15224	; if not, branch
000152BE 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000152C2 6600                       		bne.s	Obj66_Animate	; if yes, branch
000152C4 4428 0034                  		neg.b	$34(a0)
000152C8 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000152CE 6000                       		bra.s	Obj66_Animate
000152D0                            ; ===========================================================================
000152D0                            
000152D0                            loc_15224:
000152D0 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000152D4                            
000152D4                            Obj66_Animate:
000152D4 5328 001E                  		subq.b	#1,$1E(a0)
000152D8 6A00                       		bpl.s	locret_15246
000152DA 117C 0007 001E             		move.b	#7,$1E(a0)
000152E0 1228 0034                  		move.b	$34(a0),d1
000152E4 1028 001A                  		move.b	$1A(a0),d0
000152E8 D001                       		add.b	d1,d0
000152EA 0200 000F                  		andi.b	#$F,d0
000152EE 1140 001A                  		move.b	d0,$1A(a0)
000152F2                            
000152F2                            locret_15246:
000152F2 4E75                       		rts	
000152F4                            ; End of function Obj66_ChkSwitch
000152F4                            
000152F4                            
000152F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152F4                            
000152F4                            
000152F4                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000152F4 43F8 D000                  		lea	($FFFFD000).w,a1
000152F8 7000                       		moveq	#0,d0
000152FA 1028 001A                  		move.b	$1A(a0),d0
000152FE D040                       		add.w	d0,d0
00015300 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015304 101A                       		move.b	(a2)+,d0
00015306 4880                       		ext.w	d0
00015308 D068 0008                  		add.w	8(a0),d0
0001530C 3340 0008                  		move.w	d0,8(a1)
00015310 101A                       		move.b	(a2)+,d0
00015312 4880                       		ext.w	d0
00015314 D068 000C                  		add.w	$C(a0),d0
00015318 3340 000C                  		move.w	d0,$C(a1)
0001531C 4E75                       		rts	
0001531E                            ; End of function Obj66_ChgPos
0001531E                            
0001531E                            ; ===========================================================================
0001531E E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015322 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015326 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001532A 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001532E 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015332 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015336 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001533A E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001533E                            ; ---------------------------------------------------------------------------
0001533E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001533E                            ; ---------------------------------------------------------------------------
0001533E                            Map_obj66:
0001533E                            	include "_maps\obj66.asm"
0001533E                            ; ---------------------------------------------------------------------------
0001533E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001533E                            ; ---------------------------------------------------------------------------
0001533E 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015342 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015346 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001534A 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001534E 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015352 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015356 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001535A 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001535E 0000                       		dc.w byte_154A4-Map_obj66
00015360 06                         byte_152B4:	dc.b 6
00015361 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015366 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001536B E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015370 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015375 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001537A 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001537F 06                         byte_152D3:	dc.b 6
00015380 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015385 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001538A F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001538F F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015394 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015399 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001539E 06                         byte_152F2:	dc.b 6
0001539F 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000153A4 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000153A9 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000153AE 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000153B3 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000153B8 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000153BD 06                         byte_15311:	dc.b 6
000153BE 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000153C3 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000153C8 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000153CD 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000153D2 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000153D7 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000153DC 06                         byte_15330:	dc.b 6
000153DD 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000153E2 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000153E7 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000153EC 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000153F1 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000153F6 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000153FB 06                         byte_1534F:	dc.b 6
000153FC 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015401 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015406 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001540B 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015410 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015415 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001541A 06                         byte_1536E:	dc.b 6
0001541B 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015420 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015425 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001542A 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001542F 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015434 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015439 06                         byte_1538D:	dc.b 6
0001543A 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001543F F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015444 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015449 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001544E 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015453 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015458 06                         byte_153AC:	dc.b 6
00015459 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001545E 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015463 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015468 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001546D 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015472 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015477 06                         byte_153CB:	dc.b 6
00015478 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001547D E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015482 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015487 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001548C F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015491 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015496 06                         byte_153EA:	dc.b 6
00015497 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001549C E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000154A1 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000154A6 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000154AB E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000154B0 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000154B5 06                         byte_15409:	dc.b 6
000154B6 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000154BB D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000154C0 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000154C5 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000154CA E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000154CF E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000154D4 06                         byte_15428:	dc.b 6
000154D5 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000154DA D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000154DF C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000154E4 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000154E9 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000154EE E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000154F3 06                         byte_15447:	dc.b 6
000154F4 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000154F9 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000154FE CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015503 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015508 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001550D E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015512 06                         byte_15466:	dc.b 6
00015513 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015518 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001551D D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015522 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015527 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001552C E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015531 06                         byte_15485:	dc.b 6
00015532 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015537 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001553C DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015541 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015546 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001554B F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015550 0C                         byte_154A4:	dc.b $C
00015551 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015556 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001555B E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015560 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015565 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001556A E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001556F 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015574 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015579 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001557E 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015583 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015588 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001558E 00                         		even
0001558E 00                         		even
0001558E                            
0001558E                            ; ===========================================================================
0001558E                            ; ---------------------------------------------------------------------------
0001558E                            ; Object 67 - disc that	you run	around (SBZ)
0001558E                            ; ---------------------------------------------------------------------------
0001558E                            
0001558E                            Obj67:					; XREF: Obj_Index
0001558E 7000                       		moveq	#0,d0
00015590 1028 0024                  		move.b	$24(a0),d0
00015594 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015598 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001559C                            ; ===========================================================================
0001559C 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
0001559E 0000                       		dc.w Obj67_Action-Obj67_Index
000155A0                            ; ===========================================================================
000155A0                            
000155A0                            Obj67_Main:				; XREF: Obj67_Index
000155A0 5428 0024                  		addq.b	#2,$24(a0)
000155A4 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
000155AC 317C C344 0002             		move.w	#$C344,2(a0)
000155B2 117C 0004 0001             		move.b	#4,1(a0)
000155B8 117C 0004 0018             		move.b	#4,$18(a0)
000155BE 117C 0008 0019             		move.b	#8,$19(a0)
000155C4 3168 0008 0032             		move.w	8(a0),$32(a0)
000155CA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000155D0 117C 0018 0034             		move.b	#$18,$34(a0)
000155D6 117C 0048 0038             		move.b	#$48,$38(a0)
000155DC 1228 0028                  		move.b	$28(a0),d1	; get object type
000155E0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000155E4 6700                       		beq.s	loc_15546
000155E6 117C 0010 0034             		move.b	#$10,$34(a0)
000155EC 117C 0038 0038             		move.b	#$38,$38(a0)
000155F2                            
000155F2                            loc_15546:
000155F2 1228 0028                  		move.b	$28(a0),d1	; get object type
000155F6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000155FA 4881                       		ext.w	d1
000155FC E741                       		asl.w	#3,d1
000155FE 3141 0036                  		move.w	d1,$36(a0)
00015602 1028 0022                  		move.b	$22(a0),d0
00015606 E418                       		ror.b	#2,d0
00015608 0200 00C0                  		andi.b	#-$40,d0
0001560C 1140 0026                  		move.b	d0,$26(a0)
00015610                            
00015610                            Obj67_Action:				; XREF: Obj67_Index
00015610 6100 0000                  		bsr.w	Obj67_MoveSonic
00015614 6100 0000                  		bsr.w	Obj67_MoveSpot
00015618 6000 0000                  		bra.w	Obj67_ChkDel
0001561C                            ; ===========================================================================
0001561C                            
0001561C                            Obj67_MoveSonic:			; XREF: Obj67_Action
0001561C 7400                       		moveq	#0,d2
0001561E 1428 0038                  		move.b	$38(a0),d2
00015622 3602                       		move.w	d2,d3
00015624 D643                       		add.w	d3,d3
00015626 43F8 D000                  		lea	($FFFFD000).w,a1
0001562A 3029 0008                  		move.w	8(a1),d0
0001562E 9068 0032                  		sub.w	$32(a0),d0
00015632 D042                       		add.w	d2,d0
00015634 B043                       		cmp.w	d3,d0
00015636 6400                       		bcc.s	loc_155A8
00015638 3229 000C                  		move.w	$C(a1),d1
0001563C 9268 0030                  		sub.w	$30(a0),d1
00015640 D242                       		add.w	d2,d1
00015642 B243                       		cmp.w	d3,d1
00015644 6400                       		bcc.s	loc_155A8
00015646 0829 0001 0022             		btst	#1,$22(a1)
0001564C 6700                       		beq.s	loc_155B8
0001564E 4228 003A                  		clr.b	$3A(a0)
00015652 4E75                       		rts	
00015654                            ; ===========================================================================
00015654                            
00015654                            loc_155A8:
00015654 4A28 003A                  		tst.b	$3A(a0)
00015658 6700                       		beq.s	locret_155B6
0001565A 4229 0038                  		clr.b	$38(a1)
0001565E 4228 003A                  		clr.b	$3A(a0)
00015662                            
00015662                            locret_155B6:
00015662 4E75                       		rts	
00015664                            ; ===========================================================================
00015664                            
00015664                            loc_155B8:
00015664 4A28 003A                  		tst.b	$3A(a0)
00015668 6600                       		bne.s	loc_155E2
0001566A 117C 0001 003A             		move.b	#1,$3A(a0)
00015670 0829 0002 0022             		btst	#2,$22(a1)
00015676 6600                       		bne.s	loc_155D0
00015678 4229 001C                  		clr.b	$1C(a1)
0001567C                            
0001567C                            loc_155D0:
0001567C 08A9 0005 0022             		bclr	#5,$22(a1)
00015682 137C 0001 001D             		move.b	#1,$1D(a1)
00015688 137C 0001 0038             		move.b	#1,$38(a1)
0001568E                            
0001568E                            loc_155E2:
0001568E 3029 0014                  		move.w	$14(a1),d0
00015692 4A68 0036                  		tst.w	$36(a0)
00015696 6A00                       		bpl.s	loc_15608
00015698 0C40 FC00                  		cmpi.w	#-$400,d0
0001569C 6F00                       		ble.s	loc_155FA
0001569E 337C FC00 0014             		move.w	#-$400,$14(a1)
000156A4 4E75                       		rts	
000156A6                            ; ===========================================================================
000156A6                            
000156A6                            loc_155FA:
000156A6 0C40 F100                  		cmpi.w	#-$F00,d0
000156AA 6C00                       		bge.s	locret_15606
000156AC 337C F100 0014             		move.w	#-$F00,$14(a1)
000156B2                            
000156B2                            locret_15606:
000156B2 4E75                       		rts	
000156B4                            ; ===========================================================================
000156B4                            
000156B4                            loc_15608:
000156B4 0C40 0400                  		cmpi.w	#$400,d0
000156B8 6C00                       		bge.s	loc_15616
000156BA 337C 0400 0014             		move.w	#$400,$14(a1)
000156C0 4E75                       		rts	
000156C2                            ; ===========================================================================
000156C2                            
000156C2                            loc_15616:
000156C2 0C40 0F00                  		cmpi.w	#$F00,d0
000156C6 6F00                       		ble.s	locret_15622
000156C8 337C 0F00 0014             		move.w	#$F00,$14(a1)
000156CE                            
000156CE                            locret_15622:
000156CE 4E75                       		rts	
000156D0                            ; ===========================================================================
000156D0                            
000156D0                            Obj67_MoveSpot:				; XREF: Obj67_Action
000156D0 3028 0036                  		move.w	$36(a0),d0
000156D4 D168 0026                  		add.w	d0,$26(a0)
000156D8 1028 0026                  		move.b	$26(a0),d0
000156DC 4EB9 0000 29DA             		jsr	(CalcSine).l
000156E2 3428 0030                  		move.w	$30(a0),d2
000156E6 3628 0032                  		move.w	$32(a0),d3
000156EA 7800                       		moveq	#0,d4
000156EC 1828 0034                  		move.b	$34(a0),d4
000156F0 E14C                       		lsl.w	#8,d4
000156F2 2A04                       		move.l	d4,d5
000156F4 C9C0                       		muls.w	d0,d4
000156F6 4844                       		swap	d4
000156F8 CBC1                       		muls.w	d1,d5
000156FA 4845                       		swap	d5
000156FC D842                       		add.w	d2,d4
000156FE DA43                       		add.w	d3,d5
00015700 3144 000C                  		move.w	d4,$C(a0)
00015704 3145 0008                  		move.w	d5,8(a0)
00015708 4E75                       		rts	
0001570A                            ; ===========================================================================
0001570A                            
0001570A                            Obj67_ChkDel:				; XREF: Obj67_Action
0001570A 3028 0032                  		move.w	$32(a0),d0
0001570E 0240 FF80                  		andi.w	#-$80,d0
00015712 3238 F700                  		move.w	($FFFFF700).w,d1
00015716 0441 0080                  		subi.w	#$80,d1
0001571A 0241 FF80                  		andi.w	#-$80,d1
0001571E 9041                       		sub.w	d1,d0
00015720 0C40 0280                  		cmpi.w	#$280,d0
00015724 6200                       		bhi.s	Obj67_Delete
00015726 4EF9 0000 D6CC             		jmp	DisplaySprite
0001572C                            ; ===========================================================================
0001572C                            
0001572C                            Obj67_Delete:
0001572C 4EF9 0000 D708             		jmp	DeleteObject
00015732                            ; ===========================================================================
00015732                            ; ---------------------------------------------------------------------------
00015732                            ; Sprite mappings - disc that you run around (SBZ)
00015732                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015732                            ; part of the level tiles.)
00015732                            ; ---------------------------------------------------------------------------
00015732                            Map_obj67:
00015732                            	include "_maps\obj67.asm"
00015732                            ; ---------------------------------------------------------------------------
00015732                            ; Sprite mappings - disc that you run around (SBZ)
00015732                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015732                            ; part of the level tiles.)
00015732                            ; ---------------------------------------------------------------------------
00015732 0000                       		dc.w byte_15688-Map_obj67
00015734 01                         byte_15688:	dc.b 1
00015735 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001573A                            		even
0001573A                            		even
0001573A                            
0001573A                            ; ===========================================================================
0001573A                            ; ---------------------------------------------------------------------------
0001573A                            ; Object 68 - conveyor belts (SBZ)
0001573A                            ; ---------------------------------------------------------------------------
0001573A                            
0001573A                            Obj68:					; XREF: Obj_Index
0001573A 7000                       		moveq	#0,d0
0001573C 1028 0024                  		move.b	$24(a0),d0
00015740 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015744 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015748                            ; ===========================================================================
00015748 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001574A 0000                       		dc.w Obj68_Action-Obj68_Index
0001574C                            ; ===========================================================================
0001574C                            
0001574C                            Obj68_Main:				; XREF: Obj68_Index
0001574C 5428 0024                  		addq.b	#2,$24(a0)
00015750 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015756 1228 0028                  		move.b	$28(a0),d1	; get object type
0001575A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001575E 6700                       		beq.s	loc_156BA	; if zero, branch
00015760 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015766                            
00015766                            loc_156BA:
00015766 1228 0028                  		move.b	$28(a0),d1	; get object type
0001576A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001576E 4881                       		ext.w	d1
00015770 E841                       		asr.w	#4,d1
00015772 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015776                            
00015776                            Obj68_Action:				; XREF: Obj68_Index
00015776 6100                       		bsr.s	Obj68_MoveSonic
00015778 3028 0008                  		move.w	8(a0),d0
0001577C 0240 FF80                  		andi.w	#$FF80,d0
00015780 3238 F700                  		move.w	($FFFFF700).w,d1
00015784 0441 0080                  		subi.w	#$80,d1
00015788 0241 FF80                  		andi.w	#$FF80,d1
0001578C 9041                       		sub.w	d1,d0
0001578E 0C40 0280                  		cmpi.w	#$280,d0
00015792 6200                       		bhi.s	Obj68_Delete
00015794 4E75                       		rts	
00015796                            ; ===========================================================================
00015796                            
00015796                            Obj68_Delete:
00015796 4EF9 0000 D708             		jmp	DeleteObject
0001579C                            ; ===========================================================================
0001579C                            
0001579C                            Obj68_MoveSonic:			; XREF: Obj68_Action
0001579C 7400                       		moveq	#0,d2
0001579E 1428 0038                  		move.b	$38(a0),d2
000157A2 3602                       		move.w	d2,d3
000157A4 D643                       		add.w	d3,d3
000157A6 43F8 D000                  		lea	($FFFFD000).w,a1
000157AA 3029 0008                  		move.w	8(a1),d0
000157AE 9068 0008                  		sub.w	8(a0),d0
000157B2 D042                       		add.w	d2,d0
000157B4 B043                       		cmp.w	d3,d0
000157B6 6400                       		bcc.s	locret_1572E
000157B8 3229 000C                  		move.w	$C(a1),d1
000157BC 9268 000C                  		sub.w	$C(a0),d1
000157C0 0641 0030                  		addi.w	#$30,d1
000157C4 0C41 0030                  		cmpi.w	#$30,d1
000157C8 6400                       		bcc.s	locret_1572E
000157CA 0829 0001 0022             		btst	#1,$22(a1)
000157D0 6600                       		bne.s	locret_1572E
000157D2 3028 0036                  		move.w	$36(a0),d0
000157D6 D169 0008                  		add.w	d0,8(a1)
000157DA                            
000157DA                            locret_1572E:
000157DA 4E75                       		rts	
000157DC                            
000157DC                            ; ===========================================================================
000157DC                            ; ---------------------------------------------------------------------------
000157DC                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000157DC                            ; ---------------------------------------------------------------------------
000157DC                            
000157DC                            Obj69:					; XREF: Obj_Index
000157DC 7000                       		moveq	#0,d0
000157DE 1028 0024                  		move.b	$24(a0),d0
000157E2 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000157E6 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000157EA                            ; ===========================================================================
000157EA 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000157EC 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000157EE 0000                       		dc.w Obj69_Spinner-Obj69_Index
000157F0                            ; ===========================================================================
000157F0                            
000157F0                            Obj69_Main:				; XREF: Obj69_Index
000157F0 5428 0024                  		addq.b	#2,$24(a0)
000157F4 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000157FC 317C 4492 0002             		move.w	#$4492,2(a0)
00015802 0028 0004 0001             		ori.b	#4,1(a0)
00015808 117C 0080 0019             		move.b	#$80,$19(a0)
0001580E 7000                       		moveq	#0,d0
00015810 1028 0028                  		move.b	$28(a0),d0
00015814 0240 000F                  		andi.w	#$F,d0
00015818 C0FC 003C                  		mulu.w	#$3C,d0
0001581C 3140 0032                  		move.w	d0,$32(a0)
00015820 4A28 0028                  		tst.b	$28(a0)
00015824 6A00                       		bpl.s	Obj69_Trapdoor
00015826 5428 0024                  		addq.b	#2,$24(a0)
0001582A 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015832 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015838 117C 0010 0019             		move.b	#$10,$19(a0)
0001583E 117C 0002 001C             		move.b	#2,$1C(a0)
00015844 7000                       		moveq	#0,d0
00015846 1028 0028                  		move.b	$28(a0),d0	; get object type
0001584A 3200                       		move.w	d0,d1
0001584C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015850 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015854 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015858 3140 0032                  		move.w	d0,$32(a0)
0001585C 0241 0070                  		andi.w	#$70,d1
00015860 0641 0010                  		addi.w	#$10,d1
00015864 E549                       		lsl.w	#2,d1
00015866 5341                       		subq.w	#1,d1
00015868 3141 0036                  		move.w	d1,$36(a0)
0001586C 6000                       		bra.s	Obj69_Spinner
0001586E                            ; ===========================================================================
0001586E                            
0001586E                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001586E 5368 0030                  		subq.w	#1,$30(a0)
00015872 6A00                       		bpl.s	Obj69_Animate
00015874 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001587A 0868 0000 001C             		bchg	#0,$1C(a0)
00015880 4A28 0001                  		tst.b	1(a0)
00015884 6A00                       		bpl.s	Obj69_Animate
00015886 303C 00BB                  		move.w	#$BB,d0
0001588A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play door sound
00015890                            
00015890                            Obj69_Animate:
00015890 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015896 4EB9 0000 A7F8             		jsr	AnimateSprite
0001589C 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000158A0 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000158A2 323C 004B                  		move.w	#$4B,d1
000158A6 343C 000C                  		move.w	#$C,d2
000158AA 3602                       		move.w	d2,d3
000158AC 5243                       		addq.w	#1,d3
000158AE 3828 0008                  		move.w	8(a0),d4
000158B2 6100 A1E8                  		bsr.w	SolidObject
000158B6 6000 9EBC                  		bra.w	MarkObjGone
000158BA                            ; ===========================================================================
000158BA                            
000158BA                            Obj69_NotSolid:
000158BA 0828 0003 0022             		btst	#3,$22(a0)
000158C0 6700                       		beq.s	Obj69_Display
000158C2 43F8 D000                  		lea	($FFFFD000).w,a1
000158C6 08A9 0003 0022             		bclr	#3,$22(a1)
000158CC 08A8 0003 0022             		bclr	#3,$22(a0)
000158D2 4228 0025                  		clr.b	$25(a0)
000158D6                            
000158D6                            Obj69_Display:
000158D6 6000 9E9C                  		bra.w	MarkObjGone
000158DA                            ; ===========================================================================
000158DA                            
000158DA                            Obj69_Spinner:				; XREF: Obj69_Index
000158DA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000158DE C068 0036                  		and.w	$36(a0),d0
000158E2 6600                       		bne.s	Obj69_Delay
000158E4 117C 0001 0034             		move.b	#1,$34(a0)
000158EA                            
000158EA                            Obj69_Delay:
000158EA 4A28 0034                  		tst.b	$34(a0)
000158EE 6700                       		beq.s	Obj69_Animate2
000158F0 5368 0030                  		subq.w	#1,$30(a0)
000158F4 6A00                       		bpl.s	Obj69_Animate2
000158F6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000158FC 4228 0034                  		clr.b	$34(a0)
00015900 0868 0000 001C             		bchg	#0,$1C(a0)
00015906                            
00015906                            Obj69_Animate2:
00015906 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001590C 4EB9 0000 A7F8             		jsr	AnimateSprite
00015912 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015916 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015918 323C 001B                  		move.w	#$1B,d1
0001591C 343C 0007                  		move.w	#7,d2
00015920 3602                       		move.w	d2,d3
00015922 5243                       		addq.w	#1,d3
00015924 3828 0008                  		move.w	8(a0),d4
00015928 6100 A172                  		bsr.w	SolidObject
0001592C 6000 9E46                  		bra.w	MarkObjGone
00015930                            ; ===========================================================================
00015930                            
00015930                            Obj69_NotSolid2:
00015930 0828 0003 0022             		btst	#3,$22(a0)
00015936 6700                       		beq.s	Obj69_Display2
00015938 43F8 D000                  		lea	($FFFFD000).w,a1
0001593C 08A9 0003 0022             		bclr	#3,$22(a1)
00015942 08A8 0003 0022             		bclr	#3,$22(a0)
00015948 4228 0025                  		clr.b	$25(a0)
0001594C                            
0001594C                            Obj69_Display2:
0001594C 6000 9E26                  		bra.w	MarkObjGone
00015950                            ; ===========================================================================
00015950                            Ani_obj69:
00015950                            	include "_anim\obj69.asm"
00015950                            ; ---------------------------------------------------------------------------
00015950                            ; Animation script - trapdoor (SBZ)
00015950                            ; ---------------------------------------------------------------------------
00015950 0000                       		dc.w byte_158AC-Ani_obj69
00015952 0000                       		dc.w byte_158B2-Ani_obj69
00015954 0000                       		dc.w byte_158B8-Ani_obj69
00015956 0000                       		dc.w byte_158CC-Ani_obj69
00015958 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001595E 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015964 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015971 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015978 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015985 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001598C                            		even
0001598C                            		even
0001598C                            
0001598C                            ; ---------------------------------------------------------------------------
0001598C                            ; Sprite mappings - trapdoor (SBZ)
0001598C                            ; ---------------------------------------------------------------------------
0001598C                            Map_obj69:
0001598C                            	include "_maps\obj69.asm"
0001598C                            ; ---------------------------------------------------------------------------
0001598C                            ; Sprite mappings - trapdoor (SBZ)
0001598C                            ; ---------------------------------------------------------------------------
0001598C 0000                       		dc.w byte_158E6-Map_obj69
0001598E 0000                       		dc.w byte_158FB-Map_obj69
00015990 0000                       		dc.w byte_15924-Map_obj69
00015992 04                         byte_158E6:	dc.b 4
00015993 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015998 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001599D F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000159A2 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000159A7 08                         byte_158FB:	dc.b 8
000159A8 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000159AD 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000159B2 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000159B7 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000159BC F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000159C1 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000159C6 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000159CB 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000159D0 04                         byte_15924:	dc.b 4
000159D1 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000159D6 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000159DB 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000159E0 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000159E6 00                         		even
000159E6 00                         		even
000159E6                            
000159E6                            ; ---------------------------------------------------------------------------
000159E6                            ; Sprite mappings - spinning platforms (SBZ)
000159E6                            ; ---------------------------------------------------------------------------
000159E6                            Map_obj69a:
000159E6                            	include "_maps\obj69a.asm"
000159E6                            ; ---------------------------------------------------------------------------
000159E6                            ; Sprite mappings - spinning platforms (SBZ)
000159E6                            ; ---------------------------------------------------------------------------
000159E6 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000159EA 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000159EE 0000                       		dc.w byte_15970-Map_obj69a
000159F0 02                         byte_15944:	dc.b 2
000159F1 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000159F6 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000159FB 02                         byte_1594F:	dc.b 2
000159FC F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015A01 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015A06 02                         byte_1595A:	dc.b 2
00015A07 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015A0C 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015A11 02                         byte_15965:	dc.b 2
00015A12 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015A17 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015A1C 02                         byte_15970:	dc.b 2
00015A1D F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015A22 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015A28 00                         		even
00015A28 00                         		even
00015A28                            
00015A28                            ; ===========================================================================
00015A28                            ; ---------------------------------------------------------------------------
00015A28                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015A28                            ; ---------------------------------------------------------------------------
00015A28                            
00015A28                            Obj6A:					; XREF: Obj_Index
00015A28 7000                       		moveq	#0,d0
00015A2A 1028 0024                  		move.b	$24(a0),d0
00015A2E 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015A32 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015A36                            ; ===========================================================================
00015A36 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015A38 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015A3A                            ; ===========================================================================
00015A3A                            
00015A3A                            Obj6A_Main:				; XREF: Obj6A_Index
00015A3A 5428 0024                  		addq.b	#2,$24(a0)
00015A3E 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015A46 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015A4C 117C 0004 0001             		move.b	#4,1(a0)
00015A52 117C 0004 0018             		move.b	#4,$18(a0)
00015A58 117C 0020 0019             		move.b	#$20,$19(a0)
00015A5E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015A64 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015A6A 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015A70 6400                       		bcc.s	Obj6A_Action
00015A72 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015A78                            
00015A78                            Obj6A_Action:				; XREF: Obj6A_Index
00015A78 7000                       		moveq	#0,d0
00015A7A 1028 0028                  		move.b	$28(a0),d0
00015A7E 0240 0007                  		andi.w	#7,d0
00015A82 D040                       		add.w	d0,d0
00015A84 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015A88 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015A8C 3028 003A                  		move.w	$3A(a0),d0
00015A90 0240 FF80                  		andi.w	#$FF80,d0
00015A94 3238 F700                  		move.w	($FFFFF700).w,d1
00015A98 0441 0080                  		subi.w	#$80,d1
00015A9C 0241 FF80                  		andi.w	#$FF80,d1
00015AA0 9041                       		sub.w	d1,d0
00015AA2 0C40 0280                  		cmpi.w	#$280,d0
00015AA6 6200                       		bhi.s	Obj6A_Delete
00015AA8 4EF9 0000 D6CC             		jmp	DisplaySprite
00015AAE                            ; ===========================================================================
00015AAE                            
00015AAE                            Obj6A_Delete:
00015AAE 4EF9 0000 D708             		jmp	DeleteObject
00015AB4                            ; ===========================================================================
00015AB4 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015AB8 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015ABC 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015ABE                            ; ===========================================================================
00015ABE                            
00015ABE                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015ABE 4E75                       		rts	
00015AC0                            ; ===========================================================================
00015AC0                            
00015AC0                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015AC0 323C 0060                  		move.w	#$60,d1
00015AC4 7000                       		moveq	#0,d0
00015AC6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00015ACA 0828 0000 0022             		btst	#0,$22(a0)
00015AD0 6700                       		beq.s	Obj6A_Animate01
00015AD2 4440                       		neg.w	d0
00015AD4 D041                       		add.w	d1,d0
00015AD6                            
00015AD6                            Obj6A_Animate01:
00015AD6 3228 003A                  		move.w	$3A(a0),d1
00015ADA 9240                       		sub.w	d0,d1
00015ADC 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015AE0 5328 001E                  		subq.b	#1,$1E(a0)
00015AE4 6A00                       		bpl.s	loc_15A46
00015AE6 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00015AEC 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00015AF2                            
00015AF2                            loc_15A46:
00015AF2 4A28 0001                  		tst.b	1(a0)
00015AF6 6A00                       		bpl.s	locret_15A60
00015AF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015AFC 0240 000F                  		andi.w	#$F,d0
00015B00 6600                       		bne.s	locret_15A60
00015B02 303C 00B0                  		move.w	#$B0,d0
00015B06 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015B0C                            
00015B0C                            locret_15A60:
00015B0C 4E75                       		rts	
00015B0E                            ; ===========================================================================
00015B0E                            
00015B0E                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00015B0E 323C 0030                  		move.w	#$30,d1
00015B12 7000                       		moveq	#0,d0
00015B14 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015B18 0828 0000 0022             		btst	#0,$22(a0)
00015B1E 6700                       		beq.s	Obj6A_Animate02
00015B20 4440                       		neg.w	d0
00015B22 0640 0080                  		addi.w	#$80,d0
00015B26                            
00015B26                            Obj6A_Animate02:
00015B26 3228 0038                  		move.w	$38(a0),d1
00015B2A 9240                       		sub.w	d0,d1
00015B2C 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00015B30 5328 001E                  		subq.b	#1,$1E(a0)
00015B34 6A00                       		bpl.s	loc_15A96
00015B36 117C 0002 001E             		move.b	#2,$1E(a0)
00015B3C 0868 0000 001A             		bchg	#0,$1A(a0)
00015B42                            
00015B42                            loc_15A96:
00015B42 4A28 0001                  		tst.b	1(a0)
00015B46 6A00                       		bpl.s	locret_15AB0
00015B48 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015B4C 0C00 0018                  		cmpi.b	#$18,d0
00015B50 6600                       		bne.s	locret_15AB0
00015B52 303C 00B0                  		move.w	#$B0,d0
00015B56 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015B5C                            
00015B5C                            locret_15AB0:
00015B5C 4E75                       		rts	
00015B5E                            ; ===========================================================================
00015B5E                            
00015B5E                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00015B5E 4A28 003D                  		tst.b	$3D(a0)
00015B62 6600                       		bne.s	Obj6A_Animate03
00015B64 3038 D008                  		move.w	($FFFFD008).w,d0
00015B68 0440 00C0                  		subi.w	#$C0,d0
00015B6C 6500                       		bcs.s	loc_15B02
00015B6E 9068 0008                  		sub.w	8(a0),d0
00015B72 6500                       		bcs.s	loc_15B02
00015B74 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015B78 0440 0080                  		subi.w	#$80,d0
00015B7C B068 000C                  		cmp.w	$C(a0),d0
00015B80 6400                       		bcc.s	locret_15B04
00015B82 0640 0100                  		addi.w	#$100,d0
00015B86 B068 000C                  		cmp.w	$C(a0),d0
00015B8A 6500                       		bcs.s	locret_15B04
00015B8C 117C 0001 003D             		move.b	#1,$3D(a0)
00015B92 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00015B98 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015B9E 117C 0002 001A             		move.b	#2,$1A(a0)
00015BA4 303C 00B0                  		move.w	#$B0,d0
00015BA8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015BAE                            
00015BAE                            loc_15B02:
00015BAE 588F                       		addq.l	#4,sp
00015BB0                            
00015BB0                            locret_15B04:
00015BB0 4E75                       		rts	
00015BB2                            ; ===========================================================================
00015BB2                            
00015BB2                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00015BB2 4EB9 0000 D6A6             		jsr	SpeedToPos
00015BB8 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015BBE 5328 001E                  		subq.b	#1,$1E(a0)
00015BC2 6A00                       		bpl.s	locret_15B24
00015BC4 117C 0002 001E             		move.b	#2,$1E(a0)
00015BCA 0868 0000 001A             		bchg	#0,$1A(a0)
00015BD0                            
00015BD0                            locret_15B24:
00015BD0 4E75                       		rts	
00015BD2                            ; ===========================================================================
00015BD2                            
00015BD2                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00015BD2 4A28 003D                  		tst.b	$3D(a0)
00015BD6 6600                       		bne.s	Obj6A_Animate04
00015BD8 3038 D008                  		move.w	($FFFFD008).w,d0
00015BDC 0640 00E0                  		addi.w	#$E0,d0
00015BE0 9068 0008                  		sub.w	8(a0),d0
00015BE4 6400                       		bcc.s	loc_15B74
00015BE6 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015BEA 0440 0080                  		subi.w	#$80,d0
00015BEE B068 000C                  		cmp.w	$C(a0),d0
00015BF2 6400                       		bcc.s	locret_15B76
00015BF4 0640 0100                  		addi.w	#$100,d0
00015BF8 B068 000C                  		cmp.w	$C(a0),d0
00015BFC 6500                       		bcs.s	locret_15B76
00015BFE 117C 0001 003D             		move.b	#1,$3D(a0)
00015C04 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00015C0A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015C10 117C 0002 001A             		move.b	#2,$1A(a0)
00015C16 303C 00B0                  		move.w	#$B0,d0
00015C1A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015C20                            
00015C20                            loc_15B74:
00015C20 588F                       		addq.l	#4,sp
00015C22                            
00015C22                            locret_15B76:
00015C22 4E75                       		rts	
00015C24                            ; ===========================================================================
00015C24                            
00015C24                            Obj6A_Animate04:
00015C24 4EB9 0000 D6A6             		jsr	SpeedToPos
00015C2A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015C30 5328 001E                  		subq.b	#1,$1E(a0)
00015C34 6A00                       		bpl.s	locret_15B96
00015C36 117C 0002 001E             		move.b	#2,$1E(a0)
00015C3C 0868 0000 001A             		bchg	#0,$1A(a0)
00015C42                            
00015C42                            locret_15B96:
00015C42 4E75                       		rts	
00015C44                            ; ===========================================================================
00015C44                            ; ---------------------------------------------------------------------------
00015C44                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015C44                            ; ---------------------------------------------------------------------------
00015C44                            Map_obj6A:
00015C44                            	include "_maps\obj6A.asm"
00015C44                            ; ---------------------------------------------------------------------------
00015C44                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015C44                            ; ---------------------------------------------------------------------------
00015C44 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00015C48 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00015C4C 07                         byte_15BA0:	dc.b 7
00015C4D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015C52 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015C57 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015C5C E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015C61 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015C66 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015C6B 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015C70 07                         byte_15BC4:	dc.b 7
00015C71 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015C76 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015C7B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015C80 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015C85 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015C8A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015C8F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015C94 04                         byte_15BE8:	dc.b 4
00015C95 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015C9A E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015C9F 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015CA4 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015CA9 04                         byte_15BFD:	dc.b 4
00015CAA E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015CAF E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015CB4 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015CB9 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015CBE                            		even
00015CBE                            		even
00015CBE                            
00015CBE                            ; ===========================================================================
00015CBE                            ; ---------------------------------------------------------------------------
00015CBE                            ; Object 6B - stomper (SBZ)
00015CBE                            ; ---------------------------------------------------------------------------
00015CBE                            
00015CBE                            Obj6B:					; XREF: Obj_Index
00015CBE 7000                       		moveq	#0,d0
00015CC0 1028 0024                  		move.b	$24(a0),d0
00015CC4 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00015CC8 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00015CCC                            ; ===========================================================================
00015CCC 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00015CCE 0000                       		dc.w Obj6B_Action-Obj6B_Index
00015CD0                            
00015CD0 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00015CD4 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00015CD8 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00015CDC 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00015CE0 8040 0005                  		dc.b  $80, $40,	  0,   5
00015CE4                            ; ===========================================================================
00015CE4                            
00015CE4                            Obj6B_Main:				; XREF: Obj6B_Index
00015CE4 5428 0024                  		addq.b	#2,$24(a0)
00015CE8 7000                       		moveq	#0,d0
00015CEA 1028 0028                  		move.b	$28(a0),d0
00015CEE E448                       		lsr.w	#2,d0
00015CF0 0240 001C                  		andi.w	#$1C,d0
00015CF4 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00015CF8 115B 0019                  		move.b	(a3)+,$19(a0)
00015CFC 115B 0016                  		move.b	(a3)+,$16(a0)
00015D00 E448                       		lsr.w	#2,d0
00015D02 1140 001A                  		move.b	d0,$1A(a0)
00015D06 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00015D0E 317C 22C0 0002             		move.w	#$22C0,2(a0)
00015D14 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00015D1A 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00015D1C 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00015D22 6700                       		beq.s	Obj6B_SBZ3
00015D24                            
00015D24                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00015D24 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015D28 7000                       		moveq	#0,d0
00015D2A 1028 0023                  		move.b	$23(a0),d0
00015D2E 6700                       		beq.s	Obj6B_Delete
00015D30 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015D36                            
00015D36                            Obj6B_Delete:
00015D36 4EF9 0000 D708             		jmp	DeleteObject
00015D3C                            ; ===========================================================================
00015D3C                            
00015D3C                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00015D3C 317C 41F0 0002             		move.w	#$41F0,2(a0)
00015D42 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00015D48 6600                       		bne.s	Obj6B_SBZ12
00015D4A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015D4E 7000                       		moveq	#0,d0
00015D50 1028 0023                  		move.b	$23(a0),d0
00015D54 6700                       		beq.s	Obj6B_SBZ12
00015D56 0832 0000 0002             		btst	#0,2(a2,d0.w)
00015D5C 6700                       		beq.s	Obj6B_SBZ12
00015D5E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015D62 60C0                       		bra.s	Obj6B_ChkGone
00015D64                            ; ===========================================================================
00015D64                            
00015D64                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00015D64 0028 0004 0001             		ori.b	#4,1(a0)
00015D6A 117C 0004 0018             		move.b	#4,$18(a0)
00015D70 3168 0008 0034             		move.w	8(a0),$34(a0)
00015D76 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015D7C 7000                       		moveq	#0,d0
00015D7E 101B                       		move.b	(a3)+,d0
00015D80 3140 003C                  		move.w	d0,$3C(a0)
00015D84 7000                       		moveq	#0,d0
00015D86 1028 0028                  		move.b	$28(a0),d0
00015D8A 6A00                       		bpl.s	Obj6B_Action
00015D8C 0200 000F                  		andi.b	#$F,d0
00015D90 1140 003E                  		move.b	d0,$3E(a0)
00015D94 1153 0028                  		move.b	(a3),$28(a0)
00015D98 0C13 0005                  		cmpi.b	#5,(a3)
00015D9C 6600                       		bne.s	Obj6B_ChkGone2
00015D9E 08E8 0004 0001             		bset	#4,1(a0)
00015DA4                            
00015DA4                            Obj6B_ChkGone2:
00015DA4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015DA8 7000                       		moveq	#0,d0
00015DAA 1028 0023                  		move.b	$23(a0),d0
00015DAE 6700                       		beq.s	Obj6B_Action
00015DB0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015DB6                            
00015DB6                            Obj6B_Action:				; XREF: Obj6B_Index
00015DB6 3F28 0008                  		move.w	8(a0),-(sp)
00015DBA 7000                       		moveq	#0,d0
00015DBC 1028 0028                  		move.b	$28(a0),d0
00015DC0 0240 000F                  		andi.w	#$F,d0
00015DC4 D040                       		add.w	d0,d0
00015DC6 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00015DCA 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00015DCE 381F                       		move.w	(sp)+,d4
00015DD0 4A28 0001                  		tst.b	1(a0)
00015DD4 6A00                       		bpl.s	Obj6B_ChkDel
00015DD6 7200                       		moveq	#0,d1
00015DD8 1228 0019                  		move.b	$19(a0),d1
00015DDC 0641 000B                  		addi.w	#$B,d1
00015DE0 7400                       		moveq	#0,d2
00015DE2 1428 0016                  		move.b	$16(a0),d2
00015DE6 3602                       		move.w	d2,d3
00015DE8 5243                       		addq.w	#1,d3
00015DEA 6100 9CB0                  		bsr.w	SolidObject
00015DEE                            
00015DEE                            Obj6B_ChkDel:
00015DEE 3028 0034                  		move.w	$34(a0),d0
00015DF2 0240 FF80                  		andi.w	#$FF80,d0
00015DF6 3238 F700                  		move.w	($FFFFF700).w,d1
00015DFA 0441 0080                  		subi.w	#$80,d1
00015DFE 0241 FF80                  		andi.w	#$FF80,d1
00015E02 9041                       		sub.w	d1,d0
00015E04 0C40 0280                  		cmpi.w	#$280,d0
00015E08 6200                       		bhi.s	loc_15D64
00015E0A 4EF9 0000 D6CC             		jmp	DisplaySprite
00015E10                            ; ===========================================================================
00015E10                            
00015E10                            loc_15D64:
00015E10 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00015E16 6600                       		bne.s	Obj6B_Delete2
00015E18 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015E1C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015E20 7000                       		moveq	#0,d0
00015E22 1028 0023                  		move.b	$23(a0),d0
00015E26 6700                       		beq.s	Obj6B_Delete2
00015E28 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015E2E                            
00015E2E                            Obj6B_Delete2:
00015E2E 4EF9 0000 D708             		jmp	DeleteObject
00015E34                            ; ===========================================================================
00015E34 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00015E38 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00015E3C 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00015E40                            ; ===========================================================================
00015E40                            
00015E40                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00015E40 4E75                       		rts	
00015E42                            ; ===========================================================================
00015E42                            
00015E42                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00015E42 4A28 0038                  		tst.b	$38(a0)
00015E46 6600                       		bne.s	loc_15DB4
00015E48 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015E4C 7000                       		moveq	#0,d0
00015E4E 1028 003E                  		move.b	$3E(a0),d0
00015E52 0832 0000 0000             		btst	#0,(a2,d0.w)
00015E58 6700                       		beq.s	loc_15DC2
00015E5A 117C 0001 0038             		move.b	#1,$38(a0)
00015E60                            
00015E60                            loc_15DB4:
00015E60 3028 003C                  		move.w	$3C(a0),d0
00015E64 B068 003A                  		cmp.w	$3A(a0),d0
00015E68 6700                       		beq.s	loc_15DE0
00015E6A 5468 003A                  		addq.w	#2,$3A(a0)
00015E6E                            
00015E6E                            loc_15DC2:
00015E6E 3028 003A                  		move.w	$3A(a0),d0
00015E72 0828 0000 0022             		btst	#0,$22(a0)
00015E78 6700                       		beq.s	loc_15DD4
00015E7A 4440                       		neg.w	d0
00015E7C 0640 0080                  		addi.w	#$80,d0
00015E80                            
00015E80                            loc_15DD4:
00015E80 3228 0034                  		move.w	$34(a0),d1
00015E84 9240                       		sub.w	d0,d1
00015E86 3141 0008                  		move.w	d1,8(a0)
00015E8A 4E75                       		rts	
00015E8C                            ; ===========================================================================
00015E8C                            
00015E8C                            loc_15DE0:
00015E8C 5228 0028                  		addq.b	#1,$28(a0)
00015E90 317C 00B4 0036             		move.w	#$B4,$36(a0)
00015E96 4228 0038                  		clr.b	$38(a0)
00015E9A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015E9E 7000                       		moveq	#0,d0
00015EA0 1028 0023                  		move.b	$23(a0),d0
00015EA4 67C8                       		beq.s	loc_15DC2
00015EA6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00015EAC 60C0                       		bra.s	loc_15DC2
00015EAE                            ; ===========================================================================
00015EAE                            
00015EAE                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00015EAE 4A28 0038                  		tst.b	$38(a0)
00015EB2 6600                       		bne.s	loc_15E14
00015EB4 5368 0036                  		subq.w	#1,$36(a0)
00015EB8 6600                       		bne.s	loc_15E1E
00015EBA 117C 0001 0038             		move.b	#1,$38(a0)
00015EC0                            
00015EC0                            loc_15E14:
00015EC0 4A68 003A                  		tst.w	$3A(a0)
00015EC4 6700                       		beq.s	loc_15E3C
00015EC6 5568 003A                  		subq.w	#2,$3A(a0)
00015ECA                            
00015ECA                            loc_15E1E:
00015ECA 3028 003A                  		move.w	$3A(a0),d0
00015ECE 0828 0000 0022             		btst	#0,$22(a0)
00015ED4 6700                       		beq.s	loc_15E30
00015ED6 4440                       		neg.w	d0
00015ED8 0640 0080                  		addi.w	#$80,d0
00015EDC                            
00015EDC                            loc_15E30:
00015EDC 3228 0034                  		move.w	$34(a0),d1
00015EE0 9240                       		sub.w	d0,d1
00015EE2 3141 0008                  		move.w	d1,8(a0)
00015EE6 4E75                       		rts	
00015EE8                            ; ===========================================================================
00015EE8                            
00015EE8                            loc_15E3C:
00015EE8 5328 0028                  		subq.b	#1,$28(a0)
00015EEC 4228 0038                  		clr.b	$38(a0)
00015EF0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015EF4 7000                       		moveq	#0,d0
00015EF6 1028 0023                  		move.b	$23(a0),d0
00015EFA 67CE                       		beq.s	loc_15E1E
00015EFC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00015F02 60C6                       		bra.s	loc_15E1E
00015F04                            ; ===========================================================================
00015F04                            
00015F04                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00015F04 4A28 0038                  		tst.b	$38(a0)
00015F08 6600                       		bne.s	loc_15E7C
00015F0A 4A68 003A                  		tst.w	$3A(a0)
00015F0E 6700                       		beq.s	loc_15E6A
00015F10 5368 003A                  		subq.w	#1,$3A(a0)
00015F14 6000                       		bra.s	loc_15E8E
00015F16                            ; ===========================================================================
00015F16                            
00015F16                            loc_15E6A:
00015F16 5368 0036                  		subq.w	#1,$36(a0)
00015F1A 6A00                       		bpl.s	loc_15E8E
00015F1C 317C 003C 0036             		move.w	#$3C,$36(a0)
00015F22 117C 0001 0038             		move.b	#1,$38(a0)
00015F28                            
00015F28                            loc_15E7C:
00015F28 5068 003A                  		addq.w	#8,$3A(a0)
00015F2C 3028 003A                  		move.w	$3A(a0),d0
00015F30 B068 003C                  		cmp.w	$3C(a0),d0
00015F34 6600                       		bne.s	loc_15E8E
00015F36 4228 0038                  		clr.b	$38(a0)
00015F3A                            
00015F3A                            loc_15E8E:
00015F3A 3028 003A                  		move.w	$3A(a0),d0
00015F3E 0828 0000 0022             		btst	#0,$22(a0)
00015F44 6700                       		beq.s	loc_15EA0
00015F46 4440                       		neg.w	d0
00015F48 0640 0038                  		addi.w	#$38,d0
00015F4C                            
00015F4C                            loc_15EA0:
00015F4C 3228 0030                  		move.w	$30(a0),d1
00015F50 D240                       		add.w	d0,d1
00015F52 3141 000C                  		move.w	d1,$C(a0)
00015F56 4E75                       		rts	
00015F58                            ; ===========================================================================
00015F58                            
00015F58                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00015F58 4A28 0038                  		tst.b	$38(a0)
00015F5C 6600                       		bne.s	loc_15ED0
00015F5E 4A68 003A                  		tst.w	$3A(a0)
00015F62 6700                       		beq.s	loc_15EBE
00015F64 5168 003A                  		subq.w	#8,$3A(a0)
00015F68 6000                       		bra.s	loc_15EF0
00015F6A                            ; ===========================================================================
00015F6A                            
00015F6A                            loc_15EBE:
00015F6A 5368 0036                  		subq.w	#1,$36(a0)
00015F6E 6A00                       		bpl.s	loc_15EF0
00015F70 317C 003C 0036             		move.w	#$3C,$36(a0)
00015F76 117C 0001 0038             		move.b	#1,$38(a0)
00015F7C                            
00015F7C                            loc_15ED0:
00015F7C 3028 003A                  		move.w	$3A(a0),d0
00015F80 B068 003C                  		cmp.w	$3C(a0),d0
00015F84 6700                       		beq.s	loc_15EE0
00015F86 5068 003A                  		addq.w	#8,$3A(a0)
00015F8A 6000                       		bra.s	loc_15EF0
00015F8C                            ; ===========================================================================
00015F8C                            
00015F8C                            loc_15EE0:
00015F8C 5368 0036                  		subq.w	#1,$36(a0)
00015F90 6A00                       		bpl.s	loc_15EF0
00015F92 317C 003C 0036             		move.w	#$3C,$36(a0)
00015F98 4228 0038                  		clr.b	$38(a0)
00015F9C                            
00015F9C                            loc_15EF0:
00015F9C 3028 003A                  		move.w	$3A(a0),d0
00015FA0 0828 0000 0022             		btst	#0,$22(a0)
00015FA6 6700                       		beq.s	loc_15F02
00015FA8 4440                       		neg.w	d0
00015FAA 0640 0038                  		addi.w	#$38,d0
00015FAE                            
00015FAE                            loc_15F02:
00015FAE 3228 0030                  		move.w	$30(a0),d1
00015FB2 D240                       		add.w	d0,d1
00015FB4 3141 000C                  		move.w	d1,$C(a0)
00015FB8 4E75                       		rts	
00015FBA                            ; ===========================================================================
00015FBA                            
00015FBA                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00015FBA 4A28 0038                  		tst.b	$38(a0)
00015FBE 6600                       		bne.s	loc_15F3E
00015FC0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015FC4 7000                       		moveq	#0,d0
00015FC6 1028 003E                  		move.b	$3E(a0),d0
00015FCA 0832 0000 0000             		btst	#0,(a2,d0.w)
00015FD0 6700                       		beq.s	locret_15F5C
00015FD2 117C 0001 0038             		move.b	#1,$38(a0)
00015FD8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015FDC 7000                       		moveq	#0,d0
00015FDE 1028 0023                  		move.b	$23(a0),d0
00015FE2 6700                       		beq.s	loc_15F3E
00015FE4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00015FEA                            
00015FEA                            loc_15F3E:
00015FEA 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00015FF2 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00015FFA 3168 0008 0034             		move.w	8(a0),$34(a0)
00016000 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016006 6700                       		beq.s	loc_15F5E
00016008                            
00016008                            locret_15F5C:
00016008 4E75                       		rts	
0001600A                            ; ===========================================================================
0001600A                            
0001600A                            loc_15F5E:
0001600A 4228 0028                  		clr.b	$28(a0)
0001600E 4228 0038                  		clr.b	$38(a0)
00016012 4E75                       		rts	
00016014                            ; ===========================================================================
00016014                            ; ---------------------------------------------------------------------------
00016014                            ; Sprite mappings - stomper and	platforms (SBZ)
00016014                            ; ---------------------------------------------------------------------------
00016014                            Map_obj6B:
00016014                            	include "_maps\obj6B.asm"
00016014                            ; ---------------------------------------------------------------------------
00016014                            ; Sprite mappings - stomper and	platforms (SBZ)
00016014                            ; ---------------------------------------------------------------------------
00016014 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016018 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001601C 0000                       		dc.w byte_15FB0-Map_obj6B
0001601E 04                         byte_15F72:	dc.b 4
0001601F F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016024 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016029 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001602E F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016033 08                         byte_15F87:	dc.b 8
00016034 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016039 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001603E E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016043 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016048 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001604D 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016052 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016057 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001605C 0E                         byte_15FB0:	dc.b $E
0001605D C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016062 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016067 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001606C C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016071 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016076 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001607B C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016080 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016085 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
0001608A E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001608F E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016094 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016099 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001609E 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000160A4 00                         		even
000160A4 00                         		even
000160A4                            
000160A4                            ; ===========================================================================
000160A4                            ; ---------------------------------------------------------------------------
000160A4                            ; Object 6C - vanishing	platforms (SBZ)
000160A4                            ; ---------------------------------------------------------------------------
000160A4                            
000160A4                            Obj6C:					; XREF: Obj_Index
000160A4 7000                       		moveq	#0,d0
000160A6 1028 0024                  		move.b	$24(a0),d0
000160AA 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000160AE 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000160B2                            ; ===========================================================================
000160B2 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000160B4 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000160B6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000160B8 0000                       		dc.w loc_16068-Obj6C_Index
000160BA                            ; ===========================================================================
000160BA                            
000160BA                            Obj6C_Main:				; XREF: Obj6C_Index
000160BA 5C28 0024                  		addq.b	#6,$24(a0)
000160BE 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000160C6 317C 44C3 0002             		move.w	#$44C3,2(a0)
000160CC 0028 0004 0001             		ori.b	#4,1(a0)
000160D2 117C 0010 0019             		move.b	#$10,$19(a0)
000160D8 117C 0004 0018             		move.b	#4,$18(a0)
000160DE 7000                       		moveq	#0,d0
000160E0 1028 0028                  		move.b	$28(a0),d0	; get object type
000160E4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000160E8 5240                       		addq.w	#1,d0		; add 1
000160EA EF48                       		lsl.w	#7,d0		; multiply by $80
000160EC 3200                       		move.w	d0,d1
000160EE 5340                       		subq.w	#1,d0
000160F0 3140 0030                  		move.w	d0,$30(a0)
000160F4 3140 0032                  		move.w	d0,$32(a0)
000160F8 7000                       		moveq	#0,d0
000160FA 1028 0028                  		move.b	$28(a0),d0	; get object type
000160FE 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016102 0641 0080                  		addi.w	#$80,d1
00016106 C0C1                       		mulu.w	d1,d0
00016108 E088                       		lsr.l	#8,d0
0001610A 3140 0036                  		move.w	d0,$36(a0)
0001610E 5341                       		subq.w	#1,d1
00016110 3141 0038                  		move.w	d1,$38(a0)
00016114                            
00016114                            loc_16068:				; XREF: Obj6C_Index
00016114 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016118 9068 0036                  		sub.w	$36(a0),d0
0001611C C068 0038                  		and.w	$38(a0),d0
00016120 6600                       		bne.s	Obj6C_Animate
00016122 5928 0024                  		subq.b	#4,$24(a0)
00016126 6000                       		bra.s	Obj6C_Vanish
00016128                            ; ===========================================================================
00016128                            
00016128                            Obj6C_Animate:
00016128 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001612E 4EB9 0000 A7F8             		jsr	AnimateSprite
00016134 6000 963E                  		bra.w	MarkObjGone
00016138                            ; ===========================================================================
00016138                            
00016138                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016138 5368 0030                  		subq.w	#1,$30(a0)
0001613C 6A00                       		bpl.s	loc_160AA
0001613E 317C 007F 0030             		move.w	#127,$30(a0)
00016144 4A28 001C                  		tst.b	$1C(a0)
00016148 6700                       		beq.s	loc_160A4
0001614A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016150                            
00016150                            loc_160A4:
00016150 0868 0000 001C             		bchg	#0,$1C(a0)
00016156                            
00016156                            loc_160AA:
00016156 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001615C 4EB9 0000 A7F8             		jsr	AnimateSprite
00016162 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016168 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
0001616A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016170 6600                       		bne.s	loc_160D6
00016172 7200                       		moveq	#0,d1
00016174 1228 0019                  		move.b	$19(a0),d1
00016178 4EB9 0000 7552             		jsr	(PlatformObject).l
0001617E 6000 95F4                  		bra.w	MarkObjGone
00016182                            ; ===========================================================================
00016182                            
00016182                            loc_160D6:
00016182 7200                       		moveq	#0,d1
00016184 1228 0019                  		move.b	$19(a0),d1
00016188 4EB9 0000 76C6             		jsr	(ExitPlatform).l
0001618E 3428 0008                  		move.w	8(a0),d2
00016192 4EB9 0000 7C30             		jsr	(MvSonicOnPtfm2).l
00016198 6000 95DA                  		bra.w	MarkObjGone
0001619C                            ; ===========================================================================
0001619C                            
0001619C                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
0001619C 0828 0003 0022             		btst	#3,$22(a0)
000161A2 6700                       		beq.s	Obj6C_Display
000161A4 43F8 D000                  		lea	($FFFFD000).w,a1
000161A8 08A9 0003 0022             		bclr	#3,$22(a1)
000161AE 08A8 0003 0022             		bclr	#3,$22(a0)
000161B4 117C 0002 0024             		move.b	#2,$24(a0)
000161BA 4228 0025                  		clr.b	$25(a0)
000161BE                            
000161BE                            Obj6C_Display:
000161BE 6000 95B4                  		bra.w	MarkObjGone
000161C2                            ; ===========================================================================
000161C2                            Ani_obj6C:
000161C2                            	include "_anim\obj6C.asm"
000161C2                            ; ---------------------------------------------------------------------------
000161C2                            ; Animation script - vanishing platforms (SBZ)
000161C2                            ; ---------------------------------------------------------------------------
000161C2 0000                       		dc.w byte_1611A-Ani_obj6C
000161C4 0000                       		dc.w byte_16122-Ani_obj6C
000161C6 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000161CE 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000161D6                            		even
000161D6                            		even
000161D6                            
000161D6                            ; ---------------------------------------------------------------------------
000161D6                            ; Sprite mappings - vanishing platforms	(SBZ)
000161D6                            ; ---------------------------------------------------------------------------
000161D6                            Map_obj6C:
000161D6                            	include "_maps\obj6C.asm"
000161D6                            ; ---------------------------------------------------------------------------
000161D6                            ; Sprite mappings - vanishing platforms	(SBZ)
000161D6                            ; ---------------------------------------------------------------------------
000161D6 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000161DA 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000161DE 01                         byte_16132:	dc.b 1
000161DF F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000161E4 01                         byte_16138:	dc.b 1
000161E5 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000161EA 01                         byte_1613E:	dc.b 1
000161EB F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000161F0 00                         byte_16144:	dc.b 0
000161F2 00                         		even
000161F2 00                         		even
000161F2                            
000161F2                            ; ===========================================================================
000161F2                            ; ---------------------------------------------------------------------------
000161F2                            ; Object 6E - electrocution orbs (SBZ)
000161F2                            ; ---------------------------------------------------------------------------
000161F2                            
000161F2                            Obj6E:					; XREF: Obj_Index
000161F2 7000                       		moveq	#0,d0
000161F4 1028 0024                  		move.b	$24(a0),d0
000161F8 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000161FC 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016200                            ; ===========================================================================
00016200 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016202 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016204                            ; ===========================================================================
00016204                            
00016204                            Obj6E_Main:				; XREF: Obj6E_Index
00016204 5428 0024                  		addq.b	#2,$24(a0)
00016208 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016210 317C 047E 0002             		move.w	#$47E,2(a0)
00016216 0028 0004 0001             		ori.b	#4,1(a0)
0001621C 117C 0028 0019             		move.b	#$28,$19(a0)
00016222 7000                       		moveq	#0,d0
00016224 1028 0028                  		move.b	$28(a0),d0	; read object type
00016228 E948                       		lsl.w	#4,d0		; multiply by $10
0001622A 5340                       		subq.w	#1,d0
0001622C 3140 0034                  		move.w	d0,$34(a0)
00016230                            
00016230                            Obj6E_Shock:				; XREF: Obj6E_Index
00016230 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016234 C068 0034                  		and.w	$34(a0),d0
00016238 6600                       		bne.s	Obj6E_Animate
0001623A 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016240 4A28 0001                  		tst.b	1(a0)
00016244 6A00                       		bpl.s	Obj6E_Animate
00016246 303C 00B1                  		move.w	#$B1,d0
0001624A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play electricity sound
00016250                            
00016250                            Obj6E_Animate:
00016250 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016256 4EB9 0000 A7F8             		jsr	AnimateSprite
0001625C 117C 0000 0020             		move.b	#0,$20(a0)
00016262 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016268 6600                       		bne.s	Obj6E_Display	; if not, branch
0001626A 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016270                            
00016270                            Obj6E_Display:
00016270 6000 9502                  		bra.w	MarkObjGone
00016274                            ; ===========================================================================
00016274                            Ani_obj6E:
00016274                            	include "_anim\obj6E.asm"
00016274                            ; ---------------------------------------------------------------------------
00016274                            ; Animation script - electrocution orbs (SBZ)
00016274                            ; ---------------------------------------------------------------------------
00016274 0000                       		dc.w byte_161CC-Ani_obj6E
00016276 0000                       		dc.w byte_161D0-Ani_obj6E
00016278 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
0001627C 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
0001628C                            		even
0001628C                            		even
0001628C                            
0001628C                            ; ---------------------------------------------------------------------------
0001628C                            ; Sprite mappings - electrocution orbs (SBZ)
0001628C                            ; ---------------------------------------------------------------------------
0001628C                            Map_obj6E:
0001628C                            	include "_maps\obj6E.asm"
0001628C                            ; ---------------------------------------------------------------------------
0001628C                            ; Sprite mappings - electrocution orbs (SBZ)
0001628C                            ; ---------------------------------------------------------------------------
0001628C 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00016290 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00016294 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00016298 02                         byte_161EC:	dc.b 2
00016299 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001629E 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000162A3 03                         byte_161F7:	dc.b 3
000162A4 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000162A9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000162AE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000162B3 05                         byte_16207:	dc.b 5
000162B4 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000162B9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000162BE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000162C3 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000162C8 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000162CD 04                         byte_16221:	dc.b 4
000162CE F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000162D3 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000162D8 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000162DD F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000162E2 06                         byte_16236:	dc.b 6
000162E3 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000162E8 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000162ED F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000162F2 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000162F7 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000162FC F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00016301 04                         byte_16255:	dc.b 4
00016302 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016307 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001630C F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00016311 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00016316                            		even
00016316                            		even
00016316                            
00016316                            ; ===========================================================================
00016316                            ; ---------------------------------------------------------------------------
00016316                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016316                            ; ---------------------------------------------------------------------------
00016316                            
00016316                            Obj6F:					; XREF: Obj_Index
00016316 7000                       		moveq	#0,d0
00016318 1028 0024                  		move.b	$24(a0),d0
0001631C 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016320 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016324 3028 0030                  		move.w	$30(a0),d0
00016328 0240 FF80                  		andi.w	#$FF80,d0
0001632C 3238 F700                  		move.w	($FFFFF700).w,d1
00016330 0441 0080                  		subi.w	#$80,d1
00016334 0241 FF80                  		andi.w	#$FF80,d1
00016338 9041                       		sub.w	d1,d0
0001633A 0C40 0280                  		cmpi.w	#$280,d0
0001633E 6200                       		bhi.s	loc_1629A
00016340                            
00016340                            Obj6F_Display:
00016340 4EF9 0000 D6CC             		jmp	DisplaySprite
00016346                            ; ===========================================================================
00016346                            
00016346                            loc_1629A:
00016346 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001634C 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001634E 0C40 FF80                  		cmpi.w	#-$80,d0
00016352 64EC                       		bcc.s	Obj6F_Display
00016354                            
00016354                            Obj6F_Act1or2:
00016354 1028 002F                  		move.b	$2F(a0),d0
00016358 6A00                       		bpl.s	Obj6F_Delete
0001635A 0240 007F                  		andi.w	#$7F,d0
0001635E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016362 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016368                            
00016368                            Obj6F_Delete:
00016368 4EF9 0000 D708             		jmp	DeleteObject
0001636E                            ; ===========================================================================
0001636E 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016370 0000                       		dc.w loc_163D8-Obj6F_Index
00016372                            ; ===========================================================================
00016372                            
00016372                            Obj6F_Main:				; XREF: Obj6F_Index
00016372 1028 0028                  		move.b	$28(a0),d0
00016376 6B00 0000                  		bmi.w	loc_16380
0001637A 5428 0024                  		addq.b	#2,$24(a0)
0001637E 217C 0001 59E6 0004        		move.l	#Map_obj69a,4(a0)
00016386 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001638C 117C 0010 0019             		move.b	#$10,$19(a0)
00016392 0028 0004 0001             		ori.b	#4,1(a0)
00016398 117C 0004 0018             		move.b	#4,$18(a0)
0001639E 7000                       		moveq	#0,d0
000163A0 1028 0028                  		move.b	$28(a0),d0
000163A4 3200                       		move.w	d0,d1
000163A6 E648                       		lsr.w	#3,d0
000163A8 0240 001E                  		andi.w	#$1E,d0
000163AC 45FA 0000                  		lea	off_164A6(pc),a2
000163B0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000163B4 315A 0038                  		move.w	(a2)+,$38(a0)
000163B8 315A 0030                  		move.w	(a2)+,$30(a0)
000163BC 214A 003C                  		move.l	a2,$3C(a0)
000163C0 0241 000F                  		andi.w	#$F,d1
000163C4 E549                       		lsl.w	#2,d1
000163C6 1141 0038                  		move.b	d1,$38(a0)
000163CA 117C 0004 003A             		move.b	#4,$3A(a0)
000163D0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000163D4 6700                       		beq.s	loc_16356
000163D6 117C 0001 003B             		move.b	#1,$3B(a0)
000163DC 4428 003A                  		neg.b	$3A(a0)
000163E0 7200                       		moveq	#0,d1
000163E2 1228 0038                  		move.b	$38(a0),d1
000163E6 D228 003A                  		add.b	$3A(a0),d1
000163EA B228 0039                  		cmp.b	$39(a0),d1
000163EE 6500                       		bcs.s	loc_16352
000163F0 1001                       		move.b	d1,d0
000163F2 7200                       		moveq	#0,d1
000163F4 4A00                       		tst.b	d0
000163F6 6A00                       		bpl.s	loc_16352
000163F8 1228 0039                  		move.b	$39(a0),d1
000163FC 5901                       		subq.b	#4,d1
000163FE                            
000163FE                            loc_16352:
000163FE 1141 0038                  		move.b	d1,$38(a0)
00016402                            
00016402                            loc_16356:
00016402 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016408 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001640E 4A41                       		tst.w	d1
00016410 6600                       		bne.s	loc_1636C
00016412 117C 0001 001C             		move.b	#1,$1C(a0)
00016418                            
00016418                            loc_1636C:
00016418 0C41 0008                  		cmpi.w	#8,d1
0001641C 6600                       		bne.s	loc_16378
0001641E 117C 0000 001C             		move.b	#0,$1C(a0)
00016424                            
00016424                            loc_16378:
00016424 6100 C1EE                  		bsr.w	Obj63_ChangeDir
00016428 6000 0000                  		bra.w	loc_163D8
0001642C                            ; ===========================================================================
0001642C                            
0001642C                            loc_16380:				; XREF: Obj6F_Main
0001642C 1140 002F                  		move.b	d0,$2F(a0)
00016430 0240 007F                  		andi.w	#$7F,d0
00016434 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016438 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001643E 6700                       		beq.s	loc_1639A
00016440 4EF9 0000 D708             		jmp	DeleteObject
00016446                            ; ===========================================================================
00016446                            
00016446                            loc_1639A:
00016446 D040                       		add.w	d0,d0
00016448 0240 001E                  		andi.w	#$1E,d0
0001644C 0640 0080                  		addi.w	#$80,d0
00016450 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016456 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001645A 321A                       		move.w	(a2)+,d1
0001645C 2248                       		movea.l	a0,a1
0001645E 6000                       		bra.s	Obj6F_LoadPform
00016460                            ; ===========================================================================
00016460                            
00016460                            Obj6F_Loop:
00016460 4EB9 0000 DB52             		jsr	SingleObjLoad
00016466 6600                       		bne.s	loc_163D0
00016468                            
00016468                            Obj6F_LoadPform:			; XREF: loc_1639A
00016468 12BC 006F                  		move.b	#$6F,0(a1)
0001646C 335A 0008                  		move.w	(a2)+,8(a1)
00016470 335A 000C                  		move.w	(a2)+,$C(a1)
00016474 301A                       		move.w	(a2)+,d0
00016476 1340 0028                  		move.b	d0,$28(a1)
0001647A                            
0001647A                            loc_163D0:
0001647A 51C9 FFE4                  		dbf	d1,Obj6F_Loop
0001647E                            
0001647E 588F                       		addq.l	#4,sp
00016480 4E75                       		rts	
00016482                            ; ===========================================================================
00016482                            
00016482                            loc_163D8:				; XREF: Obj6F_Index
00016482 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016488 4EB9 0000 A7F8             		jsr	AnimateSprite
0001648E 4A28 001A                  		tst.b	$1A(a0)
00016492 6600                       		bne.s	loc_16404
00016494 3F28 0008                  		move.w	8(a0),-(sp)
00016498 6100 0000                  		bsr.w	loc_16424
0001649C 323C 001B                  		move.w	#$1B,d1
000164A0 343C 0007                  		move.w	#7,d2
000164A4 3602                       		move.w	d2,d3
000164A6 5243                       		addq.w	#1,d3
000164A8 381F                       		move.w	(sp)+,d4
000164AA 6000 95F0                  		bra.w	SolidObject
000164AE                            ; ===========================================================================
000164AE                            
000164AE                            loc_16404:
000164AE 0828 0003 0022             		btst	#3,$22(a0)
000164B4 6700                       		beq.s	loc_16420
000164B6 43F8 D000                  		lea	($FFFFD000).w,a1
000164BA 08A9 0003 0022             		bclr	#3,$22(a1)
000164C0 08A8 0003 0022             		bclr	#3,$22(a0)
000164C6 4228 0025                  		clr.b	$25(a0)
000164CA                            
000164CA                            loc_16420:
000164CA 6000 0002                  		bra.w	*+4
000164CE                            
000164CE                            loc_16424:
000164CE 3028 0008                  		move.w	8(a0),d0
000164D2 B068 0034                  		cmp.w	$34(a0),d0
000164D6 6600                       		bne.s	loc_16484
000164D8 3028 000C                  		move.w	$C(a0),d0
000164DC B068 0036                  		cmp.w	$36(a0),d0
000164E0 6600                       		bne.s	loc_16484
000164E2 7200                       		moveq	#0,d1
000164E4 1228 0038                  		move.b	$38(a0),d1
000164E8 D228 003A                  		add.b	$3A(a0),d1
000164EC B228 0039                  		cmp.b	$39(a0),d1
000164F0 6500                       		bcs.s	loc_16456
000164F2 1001                       		move.b	d1,d0
000164F4 7200                       		moveq	#0,d1
000164F6 4A00                       		tst.b	d0
000164F8 6A00                       		bpl.s	loc_16456
000164FA 1228 0039                  		move.b	$39(a0),d1
000164FE 5901                       		subq.b	#4,d1
00016500                            
00016500                            loc_16456:
00016500 1141 0038                  		move.b	d1,$38(a0)
00016504 2268 003C                  		movea.l	$3C(a0),a1
00016508 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001650E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016514 4A41                       		tst.w	d1
00016516 6600                       		bne.s	loc_16474
00016518 117C 0001 001C             		move.b	#1,$1C(a0)
0001651E                            
0001651E                            loc_16474:
0001651E 0C41 0008                  		cmpi.w	#8,d1
00016522 6600                       		bne.s	loc_16480
00016524 117C 0000 001C             		move.b	#0,$1C(a0)
0001652A                            
0001652A                            loc_16480:
0001652A 6100 C0E8                  		bsr.w	Obj63_ChangeDir
0001652E                            
0001652E                            loc_16484:
0001652E 4EF9 0000 D6A6             		jmp	SpeedToPos
00016534                            ; ===========================================================================
00016534                            Ani_obj6F:
00016534                            	include "_anim\obj6F.asm"
00016534                            ; ---------------------------------------------------------------------------
00016534                            ; Animation script - platform on conveyor belt (SBZ)
00016534                            ; ---------------------------------------------------------------------------
00016534 0000                       		dc.w byte_1648E-Ani_obj6F
00016536 0000                       		dc.w byte_164A2-Ani_obj6F
00016538 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016545 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
0001654C 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016550 00                         		even
00016550 00                         		even
00016550                            
00016550 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016556 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001655C 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016570 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016584 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016598 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000165AC 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000165C0 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
000165D4                            ; ===========================================================================
000165D4                            ; ---------------------------------------------------------------------------
000165D4                            ; Object 70 - large girder block (SBZ)
000165D4                            ; ---------------------------------------------------------------------------
000165D4                            
000165D4                            Obj70:					; XREF: Obj_Index
000165D4 7000                       		moveq	#0,d0
000165D6 1028 0024                  		move.b	$24(a0),d0
000165DA 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
000165DE 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
000165E2                            ; ===========================================================================
000165E2 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
000165E4 0000                       		dc.w Obj70_Action-Obj70_Index
000165E6                            ; ===========================================================================
000165E6                            
000165E6                            Obj70_Main:				; XREF: Obj70_Index
000165E6 5428 0024                  		addq.b	#2,$24(a0)
000165EA 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000165F2 317C 42F0 0002             		move.w	#$42F0,2(a0)
000165F8 0028 0004 0001             		ori.b	#4,1(a0)
000165FE 117C 0004 0018             		move.b	#4,$18(a0)
00016604 117C 0060 0019             		move.b	#$60,$19(a0)
0001660A 117C 0018 0016             		move.b	#$18,$16(a0)
00016610 3168 0008 0032             		move.w	8(a0),$32(a0)
00016616 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001661C 6100 0000                  		bsr.w	Obj70_Move2
00016620                            
00016620                            Obj70_Action:				; XREF: Obj70_Index
00016620 3F28 0008                  		move.w	8(a0),-(sp)
00016624 4A68 003A                  		tst.w	$3A(a0)
00016628 6700                       		beq.s	Obj70_Move
0001662A 5368 003A                  		subq.w	#1,$3A(a0)
0001662E 6600                       		bne.s	Obj70_Solid
00016630                            
00016630                            Obj70_Move:
00016630 4EB9 0000 D6A6             		jsr	SpeedToPos
00016636 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
0001663A 6600                       		bne.s	Obj70_Solid	; if time remains, branch
0001663C 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016640                            
00016640                            Obj70_Solid:
00016640 381F                       		move.w	(sp)+,d4
00016642 4A28 0001                  		tst.b	1(a0)
00016646 6A00                       		bpl.s	Obj70_ChkDel
00016648 7200                       		moveq	#0,d1
0001664A 1228 0019                  		move.b	$19(a0),d1
0001664E 0641 000B                  		addi.w	#$B,d1
00016652 7400                       		moveq	#0,d2
00016654 1428 0016                  		move.b	$16(a0),d2
00016658 3602                       		move.w	d2,d3
0001665A 5243                       		addq.w	#1,d3
0001665C 6100 943E                  		bsr.w	SolidObject
00016660                            
00016660                            Obj70_ChkDel:
00016660 3028 0032                  		move.w	$32(a0),d0
00016664 0240 FF80                  		andi.w	#$FF80,d0
00016668 3238 F700                  		move.w	($FFFFF700).w,d1
0001666C 0441 0080                  		subi.w	#$80,d1
00016670 0241 FF80                  		andi.w	#$FF80,d1
00016674 9041                       		sub.w	d1,d0
00016676 0C40 0280                  		cmpi.w	#$280,d0
0001667A 6200                       		bhi.s	Obj70_Delete
0001667C 4EF9 0000 D6CC             		jmp	DisplaySprite
00016682                            ; ===========================================================================
00016682                            
00016682                            Obj70_Delete:
00016682 4EF9 0000 D708             		jmp	DeleteObject
00016688                            ; ===========================================================================
00016688                            
00016688                            Obj70_Move2:				; XREF: Obj70_Main
00016688 1028 0038                  		move.b	$38(a0),d0
0001668C 0240 0018                  		andi.w	#$18,d0
00016690 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016696 43F1 0000                  		lea	(a1,d0.w),a1
0001669A 3159 0010                  		move.w	(a1)+,$10(a0)
0001669E 3159 0012                  		move.w	(a1)+,$12(a0)
000166A2 3159 0034                  		move.w	(a1)+,$34(a0)
000166A6 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000166AA 317C 0007 003A             		move.w	#7,$3A(a0)
000166B0 4E75                       		rts	
000166B2                            ; ===========================================================================
000166B2 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
000166BA 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
000166C2 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
000166CA 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
000166D2                            ; ---------------------------------------------------------------------------
000166D2                            ; Sprite mappings - large girder block (SBZ)
000166D2                            ; ---------------------------------------------------------------------------
000166D2                            Map_obj70:
000166D2                            	include "_maps\obj70.asm"
000166D2                            ; ---------------------------------------------------------------------------
000166D2                            ; Sprite mappings - large girder block (SBZ)
000166D2                            ; ---------------------------------------------------------------------------
000166D2 0000                       		dc.w byte_1662A-Map_obj70
000166D4 0C                         byte_1662A:	dc.b $C
000166D5 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
000166DA 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
000166DF E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000166E4 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000166E9 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000166EE 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000166F3 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000166F8 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000166FD E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016702 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016707 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001670C 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016712 00                         		even
00016712 00                         		even
00016712                            
00016712                            ; ===========================================================================
00016712                            ; ---------------------------------------------------------------------------
00016712                            ; Object 72 - teleporter (SBZ)
00016712                            ; ---------------------------------------------------------------------------
00016712                            
00016712                            Obj72:					; XREF: Obj_Index
00016712 7000                       		moveq	#0,d0
00016714 1028 0024                  		move.b	$24(a0),d0
00016718 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001671C 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016720 3028 0008                  		move.w	8(a0),d0
00016724 0240 FF80                  		andi.w	#$FF80,d0
00016728 3238 F700                  		move.w	($FFFFF700).w,d1
0001672C 0441 0080                  		subi.w	#$80,d1
00016730 0241 FF80                  		andi.w	#$FF80,d1
00016734 9041                       		sub.w	d1,d0
00016736 0C40 0280                  		cmpi.w	#$280,d0
0001673A 6200                       		bhi.s	Obj72_Delete
0001673C 4E75                       		rts	
0001673E                            ; ===========================================================================
0001673E                            
0001673E                            Obj72_Delete:
0001673E 4EF9 0000 D708             		jmp	DeleteObject
00016744                            ; ===========================================================================
00016744 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016746 0000                       		dc.w loc_166C8-Obj72_Index
00016748 0000                       		dc.w loc_1675E-Obj72_Index
0001674A 0000                       		dc.w loc_16798-Obj72_Index
0001674C                            ; ===========================================================================
0001674C                            
0001674C                            Obj72_Main:				; XREF: Obj72_Index
0001674C 5428 0024                  		addq.b	#2,$24(a0)
00016750 1028 0028                  		move.b	$28(a0),d0
00016754 D040                       		add.w	d0,d0
00016756 0240 001E                  		andi.w	#$1E,d0
0001675A 45FA 0000                  		lea	Obj72_Data(pc),a2
0001675E D4F2 0000                  		adda.w	(a2,d0.w),a2
00016762 315A 003A                  		move.w	(a2)+,$3A(a0)
00016766 214A 003C                  		move.l	a2,$3C(a0)
0001676A 315A 0036                  		move.w	(a2)+,$36(a0)
0001676E 315A 0038                  		move.w	(a2)+,$38(a0)
00016772                            
00016772                            loc_166C8:				; XREF: Obj72_Index
00016772 43F8 D000                  		lea	($FFFFD000).w,a1
00016776 3029 0008                  		move.w	8(a1),d0
0001677A 9068 0008                  		sub.w	8(a0),d0
0001677E 0828 0000 0022             		btst	#0,$22(a0)
00016784 6700                       		beq.s	loc_166E0
00016786 0640 000F                  		addi.w	#$F,d0
0001678A                            
0001678A                            loc_166E0:
0001678A 0C40 0010                  		cmpi.w	#$10,d0
0001678E 6400                       		bcc.s	locret_1675C
00016790 3229 000C                  		move.w	$C(a1),d1
00016794 9268 000C                  		sub.w	$C(a0),d1
00016798 0641 0020                  		addi.w	#$20,d1
0001679C 0C41 0040                  		cmpi.w	#$40,d1
000167A0 6400                       		bcc.s	locret_1675C
000167A2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000167A6 6600                       		bne.s	locret_1675C
000167A8 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000167AE 6600                       		bne.s	loc_1670E
000167B0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000167B6 6500                       		bcs.s	locret_1675C
000167B8                            
000167B8                            loc_1670E:
000167B8 5428 0024                  		addq.b	#2,$24(a0)
000167BC 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000167C2 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000167C8 337C 0800 0014             		move.w	#$800,$14(a1)
000167CE 337C 0000 0010             		move.w	#0,$10(a1)
000167D4 337C 0000 0012             		move.w	#0,$12(a1)
000167DA 08A8 0005 0022             		bclr	#5,$22(a0)
000167E0 08A9 0005 0022             		bclr	#5,$22(a1)
000167E6 08E9 0001 0022             		bset	#1,$22(a1)
000167EC 3368 0008 0008             		move.w	8(a0),8(a1)
000167F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000167F8 4228 0032                  		clr.b	$32(a0)
000167FC 303C 00BE                  		move.w	#$BE,d0
00016800 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016806                            
00016806                            locret_1675C:
00016806 4E75                       		rts	
00016808                            ; ===========================================================================
00016808                            
00016808                            loc_1675E:				; XREF: Obj72_Index
00016808 43F8 D000                  		lea	($FFFFD000).w,a1
0001680C 1028 0032                  		move.b	$32(a0),d0
00016810 5428 0032                  		addq.b	#2,$32(a0)
00016814 4EB9 0000 29DA             		jsr	(CalcSine).l
0001681A EA40                       		asr.w	#5,d0
0001681C 3428 000C                  		move.w	$C(a0),d2
00016820 9440                       		sub.w	d0,d2
00016822 3342 000C                  		move.w	d2,$C(a1)
00016826 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001682C 6600                       		bne.s	locret_16796
0001682E 6100 0000                  		bsr.w	sub_1681C
00016832 5428 0024                  		addq.b	#2,$24(a0)
00016836 303C 00BC                  		move.w	#$BC,d0
0001683A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play teleport sound
00016840                            
00016840                            locret_16796:
00016840 4E75                       		rts	
00016842                            ; ===========================================================================
00016842                            
00016842                            loc_16798:				; XREF: Obj72_Index
00016842 588F                       		addq.l	#4,sp
00016844 43F8 D000                  		lea	($FFFFD000).w,a1
00016848 5328 002E                  		subq.b	#1,$2E(a0)
0001684C 6A00                       		bpl.s	loc_167DA
0001684E 3368 0036 0008             		move.w	$36(a0),8(a1)
00016854 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001685A 7200                       		moveq	#0,d1
0001685C 1228 003A                  		move.b	$3A(a0),d1
00016860 5801                       		addq.b	#4,d1
00016862 B228 003B                  		cmp.b	$3B(a0),d1
00016866 6500                       		bcs.s	loc_167C2
00016868 7200                       		moveq	#0,d1
0001686A 6000                       		bra.s	loc_16800
0001686C                            ; ===========================================================================
0001686C                            
0001686C                            loc_167C2:
0001686C 1141 003A                  		move.b	d1,$3A(a0)
00016870 2468 003C                  		movea.l	$3C(a0),a2
00016874 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001687A 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016880 6000 0000                  		bra.w	sub_1681C
00016884                            ; ===========================================================================
00016884                            
00016884                            loc_167DA:
00016884 2429 0008                  		move.l	8(a1),d2
00016888 2629 000C                  		move.l	$C(a1),d3
0001688C 3029 0010                  		move.w	$10(a1),d0
00016890 48C0                       		ext.l	d0
00016892 E180                       		asl.l	#8,d0
00016894 D480                       		add.l	d0,d2
00016896 3029 0012                  		move.w	$12(a1),d0
0001689A 48C0                       		ext.l	d0
0001689C E180                       		asl.l	#8,d0
0001689E D680                       		add.l	d0,d3
000168A0 2342 0008                  		move.l	d2,8(a1)
000168A4 2343 000C                  		move.l	d3,$C(a1)
000168A8 4E75                       		rts	
000168AA                            ; ===========================================================================
000168AA                            
000168AA                            loc_16800:
000168AA 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000168B0 4228 0024                  		clr.b	$24(a0)
000168B4 4238 F7C8                  		clr.b	($FFFFF7C8).w
000168B8 337C 0000 0010             		move.w	#0,$10(a1)
000168BE 337C 0200 0012             		move.w	#$200,$12(a1)
000168C4 4E75                       		rts	
000168C6                            
000168C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168C6                            
000168C6                            
000168C6                            sub_1681C:
000168C6 7000                       		moveq	#0,d0
000168C8 343C 1000                  		move.w	#$1000,d2
000168CC 3028 0036                  		move.w	$36(a0),d0
000168D0 9069 0008                  		sub.w	8(a1),d0
000168D4 6C00                       		bge.s	loc_16830
000168D6 4440                       		neg.w	d0
000168D8 4442                       		neg.w	d2
000168DA                            
000168DA                            loc_16830:
000168DA 7200                       		moveq	#0,d1
000168DC 363C 1000                  		move.w	#$1000,d3
000168E0 3228 0038                  		move.w	$38(a0),d1
000168E4 9269 000C                  		sub.w	$C(a1),d1
000168E8 6C00                       		bge.s	loc_16844
000168EA 4441                       		neg.w	d1
000168EC 4443                       		neg.w	d3
000168EE                            
000168EE                            loc_16844:
000168EE B240                       		cmp.w	d0,d1
000168F0 6500                       		bcs.s	loc_1687A
000168F2 7200                       		moveq	#0,d1
000168F4 3228 0038                  		move.w	$38(a0),d1
000168F8 9269 000C                  		sub.w	$C(a1),d1
000168FC 4841                       		swap	d1
000168FE 83C3                       		divs.w	d3,d1
00016900 7000                       		moveq	#0,d0
00016902 3028 0036                  		move.w	$36(a0),d0
00016906 9069 0008                  		sub.w	8(a1),d0
0001690A 6700                       		beq.s	loc_16866
0001690C 4840                       		swap	d0
0001690E 81C1                       		divs.w	d1,d0
00016910                            
00016910                            loc_16866:
00016910 3340 0010                  		move.w	d0,$10(a1)
00016914 3343 0012                  		move.w	d3,$12(a1)
00016918 4A41                       		tst.w	d1
0001691A 6A00                       		bpl.s	loc_16874
0001691C 4441                       		neg.w	d1
0001691E                            
0001691E                            loc_16874:
0001691E 3141 002E                  		move.w	d1,$2E(a0)
00016922 4E75                       		rts	
00016924                            ; ===========================================================================
00016924                            
00016924                            loc_1687A:
00016924 7000                       		moveq	#0,d0
00016926 3028 0036                  		move.w	$36(a0),d0
0001692A 9069 0008                  		sub.w	8(a1),d0
0001692E 4840                       		swap	d0
00016930 81C2                       		divs.w	d2,d0
00016932 7200                       		moveq	#0,d1
00016934 3228 0038                  		move.w	$38(a0),d1
00016938 9269 000C                  		sub.w	$C(a1),d1
0001693C 6700                       		beq.s	loc_16898
0001693E 4841                       		swap	d1
00016940 83C0                       		divs.w	d0,d1
00016942                            
00016942                            loc_16898:
00016942 3341 0012                  		move.w	d1,$12(a1)
00016946 3342 0010                  		move.w	d2,$10(a1)
0001694A 4A40                       		tst.w	d0
0001694C 6A00                       		bpl.s	loc_168A6
0001694E 4440                       		neg.w	d0
00016950                            
00016950                            loc_168A6:
00016950 3140 002E                  		move.w	d0,$2E(a0)
00016954 4E75                       		rts	
00016956                            ; End of function sub_1681C
00016956                            
00016956                            ; ===========================================================================
00016956 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
0001695C 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016962 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016966 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
0001696C 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016972 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016978 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001697E 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016984 0884 0298 0894             		dc.w $884, $298, $894
0001698A 0270 0894 0190             		dc.w $270, $894, $190
00016990 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016996 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
0001699C 1184 0498 1158             		dc.w $1184, $498, $1158
000169A2 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000169A8 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000169AE 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000169B4 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000169BA 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000169C0 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000169C6 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000169CC 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000169D2 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000169D8 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000169DE                            ; ===========================================================================
000169DE                            ; ---------------------------------------------------------------------------
000169DE                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000169DE                            ; ---------------------------------------------------------------------------
000169DE                            
000169DE                            Obj78:					; XREF: Obj_Index
000169DE 7000                       		moveq	#0,d0
000169E0 1028 0024                  		move.b	$24(a0),d0
000169E4 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000169E8 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000169EC                            ; ===========================================================================
000169EC 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000169EE 0000                       		dc.w Obj78_Action-Obj78_Index
000169F0 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000169F2 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000169F4 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000169F6 0000                       		dc.w Obj78_Delete-Obj78_Index
000169F8 0000                       		dc.w loc_16CC0-Obj78_Index
000169FA                            ; ===========================================================================
000169FA                            
000169FA                            locret_16950:
000169FA 4E75                       		rts	
000169FC                            ; ===========================================================================
000169FC                            
000169FC                            Obj78_Main:				; XREF: Obj78_Index
000169FC 117C 0007 0016             		move.b	#7,$16(a0)
00016A02 117C 0008 0017             		move.b	#8,$17(a0)
00016A08 4EB9 0000 D67A             		jsr	ObjectFall
00016A0E 4EBA E4B6                  		jsr	ObjHitFloor
00016A12 4A41                       		tst.w	d1
00016A14 6AE4                       		bpl.s	locret_16950
00016A16 D368 000C                  		add.w	d1,$C(a0)
00016A1A 4268 0012                  		clr.w	$12(a0)
00016A1E 5428 0024                  		addq.b	#2,$24(a0)
00016A22 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016A2A 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016A30 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016A36 6700                       		beq.s	loc_16996
00016A38 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016A3E                            
00016A3E                            loc_16996:
00016A3E 0228 0003 0001             		andi.b	#3,1(a0)
00016A44 0028 0004 0001             		ori.b	#4,1(a0)
00016A4A 1168 0001 0022             		move.b	1(a0),$22(a0)
00016A50 117C 0004 0018             		move.b	#4,$18(a0)
00016A56 117C 0008 0019             		move.b	#8,$19(a0)
00016A5C 117C 000B 0020             		move.b	#$B,$20(a0)
00016A62 3428 0008                  		move.w	8(a0),d2
00016A66 7A0C                       		moveq	#$C,d5
00016A68 0828 0000 0022             		btst	#0,$22(a0)
00016A6E 6700                       		beq.s	loc_169CA
00016A70 4445                       		neg.w	d5
00016A72                            
00016A72                            loc_169CA:
00016A72 1C3C 0004                  		move.b	#4,d6
00016A76 7600                       		moveq	#0,d3
00016A78 7804                       		moveq	#4,d4
00016A7A 2448                       		movea.l	a0,a2
00016A7C 7202                       		moveq	#2,d1
00016A7E                            
00016A7E                            Obj78_LoadBody:
00016A7E 4EB9 0000 DB68             		jsr	SingleObjLoad2
00016A84 6600                       		bne.s	Obj78_QuitLoad
00016A86 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016A8A 1346 0024                  		move.b	d6,$24(a1)
00016A8E 5406                       		addq.b	#2,d6
00016A90 2368 0004 0004             		move.l	4(a0),4(a1)
00016A96 3368 0002 0002             		move.w	2(a0),2(a1)
00016A9C 137C 0005 0018             		move.b	#5,$18(a1)
00016AA2 137C 0008 0019             		move.b	#8,$19(a1)
00016AA8 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016AAE D445                       		add.w	d5,d2
00016AB0 3342 0008                  		move.w	d2,8(a1)
00016AB4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016ABA 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016AC0 1368 0022 0001             		move.b	$22(a0),1(a1)
00016AC6 137C 0008 001A             		move.b	#8,$1A(a1)
00016ACC 234A 003C                  		move.l	a2,$3C(a1)
00016AD0 1344 003C                  		move.b	d4,$3C(a1)
00016AD4 5804                       		addq.b	#4,d4
00016AD6 2449                       		movea.l	a1,a2
00016AD8                            
00016AD8                            Obj78_QuitLoad:
00016AD8 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00016ADC                            
00016ADC 117C 0007 002A             		move.b	#7,$2A(a0)
00016AE2 4228 003C                  		clr.b	$3C(a0)
00016AE6                            
00016AE6                            Obj78_Action:				; XREF: Obj78_Index
00016AE6 4A28 0022                  		tst.b	$22(a0)
00016AEA 6B00 0000                  		bmi.w	loc_16C96
00016AEE 7000                       		moveq	#0,d0
00016AF0 1028 0025                  		move.b	$25(a0),d0
00016AF4 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00016AF8 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00016AFC 1228 002B                  		move.b	$2B(a0),d1
00016B00 6A00                       		bpl.s	Obj78_Display
00016B02 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016B08 1028 0026                  		move.b	$26(a0),d0
00016B0C 0240 007F                  		andi.w	#$7F,d0
00016B10 5828 0026                  		addq.b	#4,$26(a0)
00016B14 1031 0000                  		move.b	(a1,d0.w),d0
00016B18 6A00                       		bpl.s	Obj78_AniHead
00016B1A 08A8 0007 002B             		bclr	#7,$2B(a0)
00016B20 6000                       		bra.s	Obj78_Display
00016B22                            ; ===========================================================================
00016B22                            
00016B22                            Obj78_AniHead:
00016B22 0201 0010                  		andi.b	#$10,d1
00016B26 D001                       		add.b	d1,d0
00016B28 1140 001A                  		move.b	d0,$1A(a0)
00016B2C                            
00016B2C                            Obj78_Display:
00016B2C 3028 0008                  		move.w	8(a0),d0
00016B30 0240 FF80                  		andi.w	#$FF80,d0
00016B34 3238 F700                  		move.w	($FFFFF700).w,d1
00016B38 0441 0080                  		subi.w	#$80,d1
00016B3C 0241 FF80                  		andi.w	#$FF80,d1
00016B40 9041                       		sub.w	d1,d0
00016B42 0C40 0280                  		cmpi.w	#$280,d0
00016B46 6200 0000                  		bhi.w	Obj78_ChkGone
00016B4A 4EF9 0000 D6CC             		jmp	DisplaySprite
00016B50                            ; ===========================================================================
00016B50                            
00016B50                            Obj78_ChkGone:
00016B50 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016B54 7000                       		moveq	#0,d0
00016B56 1028 0023                  		move.b	$23(a0),d0
00016B5A 6700                       		beq.s	loc_16ABC
00016B5C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016B62                            
00016B62                            loc_16ABC:
00016B62 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00016B68 4E75                       		rts	
00016B6A                            ; ===========================================================================
00016B6A                            
00016B6A                            Obj78_Delete:				; XREF: Obj78_Index
00016B6A 4EF9 0000 D708             		jmp	DeleteObject
00016B70                            ; ===========================================================================
00016B70 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00016B72 0000                       		dc.w loc_16B02-Obj78_Index2
00016B74                            ; ===========================================================================
00016B74                            
00016B74                            Obj78_Move:				; XREF: Obj78_Index2
00016B74 5328 002A                  		subq.b	#1,$2A(a0)
00016B78 6B00                       		bmi.s	Obj78_Move2
00016B7A 4E75                       		rts	
00016B7C                            ; ===========================================================================
00016B7C                            
00016B7C                            Obj78_Move2:
00016B7C 5428 0025                  		addq.b	#2,$25(a0)
00016B80 117C 0010 002A             		move.b	#$10,$2A(a0)
00016B86 317C FF40 0010             		move.w	#-$C0,$10(a0)
00016B8C 317C 0040 0014             		move.w	#$40,$14(a0)
00016B92 0868 0004 002B             		bchg	#4,$2B(a0)
00016B98 6600                       		bne.s	loc_16AFC
00016B9A 4268 0010                  		clr.w	$10(a0)
00016B9E 4468 0014                  		neg.w	$14(a0)
00016BA2                            
00016BA2                            loc_16AFC:
00016BA2 08E8 0007 002B             		bset	#7,$2B(a0)
00016BA8                            
00016BA8                            loc_16B02:				; XREF: Obj78_Index2
00016BA8 5328 002A                  		subq.b	#1,$2A(a0)
00016BAC 6B00                       		bmi.s	loc_16B5E
00016BAE 2F28 0008                  		move.l	8(a0),-(sp)
00016BB2 2428 0008                  		move.l	8(a0),d2
00016BB6 3028 0010                  		move.w	$10(a0),d0
00016BBA 0828 0000 0022             		btst	#0,$22(a0)
00016BC0 6700                       		beq.s	loc_16B1E
00016BC2 4440                       		neg.w	d0
00016BC4                            
00016BC4                            loc_16B1E:
00016BC4 48C0                       		ext.l	d0
00016BC6 E180                       		asl.l	#8,d0
00016BC8 D480                       		add.l	d0,d2
00016BCA 2142 0008                  		move.l	d2,8(a0)
00016BCE 4EBA E2F6                  		jsr	ObjHitFloor
00016BD2 241F                       		move.l	(sp)+,d2
00016BD4 0C41 FFF8                  		cmpi.w	#-8,d1
00016BD8 6D00                       		blt.s	loc_16B70
00016BDA 0C41 000C                  		cmpi.w	#$C,d1
00016BDE 6C00                       		bge.s	loc_16B70
00016BE0 D368 000C                  		add.w	d1,$C(a0)
00016BE4 4842                       		swap	d2
00016BE6 B468 0008                  		cmp.w	8(a0),d2
00016BEA 6700                       		beq.s	locret_16B5C
00016BEC 7000                       		moveq	#0,d0
00016BEE 1028 003C                  		move.b	$3C(a0),d0
00016BF2 5228 003C                  		addq.b	#1,$3C(a0)
00016BF6 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016BFC 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016C00                            
00016C00                            locret_16B5C:
00016C00 4E75                       		rts	
00016C02                            ; ===========================================================================
00016C02                            
00016C02                            loc_16B5E:
00016C02 5528 0025                  		subq.b	#2,$25(a0)
00016C06 117C 0007 002A             		move.b	#7,$2A(a0)
00016C0C 317C 0000 0010             		move.w	#0,$10(a0)
00016C12 4E75                       		rts	
00016C14                            ; ===========================================================================
00016C14                            
00016C14                            loc_16B70:
00016C14 2142 0008                  		move.l	d2,8(a0)
00016C18 0868 0000 0022             		bchg	#0,$22(a0)
00016C1E 1168 0022 0001             		move.b	$22(a0),1(a0)
00016C24 7000                       		moveq	#0,d0
00016C26 1028 003C                  		move.b	$3C(a0),d0
00016C2A 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00016C30 5228 003C                  		addq.b	#1,$3C(a0)
00016C34 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016C3A 4E75                       		rts	
00016C3C                            ; ===========================================================================
00016C3C                            
00016C3C                            Obj78_BodySeg2:				; XREF: Obj78_Index
00016C3C 2268 003C                  		movea.l	$3C(a0),a1
00016C40 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016C46 6A00                       		bpl.s	Obj78_BodySeg1
00016C48 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016C4E 1028 0026                  		move.b	$26(a0),d0
00016C52 0240 007F                  		andi.w	#$7F,d0
00016C56 5828 0026                  		addq.b	#4,$26(a0)
00016C5A 4A31 0004                  		tst.b	4(a1,d0.w)
00016C5E 6A00                       		bpl.s	Obj78_AniBody
00016C60 5828 0026                  		addq.b	#4,$26(a0)
00016C64                            
00016C64                            Obj78_AniBody:
00016C64 1031 0000                  		move.b	(a1,d0.w),d0
00016C68 5000                       		addq.b	#8,d0
00016C6A 1140 001A                  		move.b	d0,$1A(a0)
00016C6E                            
00016C6E                            Obj78_BodySeg1:				; XREF: Obj78_Index
00016C6E 2268 003C                  		movea.l	$3C(a0),a1
00016C72 4A28 0022                  		tst.b	$22(a0)
00016C76 6B00 0000                  		bmi.w	loc_16C90
00016C7A 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016C80 1169 0025 0025             		move.b	$25(a1),$25(a0)
00016C86 6700 0000                  		beq.w	loc_16C64
00016C8A 3169 0014 0014             		move.w	$14(a1),$14(a0)
00016C90 3029 0010                  		move.w	$10(a1),d0
00016C94 D069 0014                  		add.w	$14(a1),d0
00016C98 3140 0010                  		move.w	d0,$10(a0)
00016C9C 2428 0008                  		move.l	8(a0),d2
00016CA0 2602                       		move.l	d2,d3
00016CA2 3028 0010                  		move.w	$10(a0),d0
00016CA6 0828 0000 0022             		btst	#0,$22(a0)
00016CAC 6700                       		beq.s	loc_16C0C
00016CAE 4440                       		neg.w	d0
00016CB0                            
00016CB0                            loc_16C0C:
00016CB0 48C0                       		ext.l	d0
00016CB2 E180                       		asl.l	#8,d0
00016CB4 D480                       		add.l	d0,d2
00016CB6 2142 0008                  		move.l	d2,8(a0)
00016CBA 4843                       		swap	d3
00016CBC B668 0008                  		cmp.w	8(a0),d3
00016CC0 6700                       		beq.s	loc_16C64
00016CC2 7000                       		moveq	#0,d0
00016CC4 1028 003C                  		move.b	$3C(a0),d0
00016CC8 1231 002C                  		move.b	$2C(a1,d0.w),d1
00016CCC 0C01 0080                  		cmpi.b	#-$80,d1
00016CD0 6600                       		bne.s	loc_16C50
00016CD2 4843                       		swap	d3
00016CD4 2143 0008                  		move.l	d3,8(a0)
00016CD8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016CDC 0868 0000 0022             		bchg	#0,$22(a0)
00016CE2 1168 0022 0001             		move.b	$22(a0),1(a0)
00016CE8 5228 003C                  		addq.b	#1,$3C(a0)
00016CEC 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016CF2 6000                       		bra.s	loc_16C64
00016CF4                            ; ===========================================================================
00016CF4                            
00016CF4                            loc_16C50:
00016CF4 4881                       		ext.w	d1
00016CF6 D368 000C                  		add.w	d1,$C(a0)
00016CFA 5228 003C                  		addq.b	#1,$3C(a0)
00016CFE 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016D04 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016D08                            
00016D08                            loc_16C64:
00016D08 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00016D0E 6700                       		beq.s	loc_16C90
00016D10 0C11 0027                  		cmpi.b	#$27,0(a1)
00016D14 6700                       		beq.s	loc_16C7C
00016D16 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00016D1C 6600                       		bne.s	loc_16C82
00016D1E                            
00016D1E                            loc_16C7C:
00016D1E 117C 000A 0024             		move.b	#$A,$24(a0)
00016D24                            
00016D24                            loc_16C82:
00016D24 4EF9 0000 D6CC             		jmp	DisplaySprite
00016D2A                            
00016D2A                            ; ===========================================================================
00016D2A FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00016D32                            ; ===========================================================================
00016D32                            
00016D32                            loc_16C90:
00016D32 08E9 0007 0022             		bset	#7,$22(a1)
00016D38                            
00016D38                            loc_16C96:
00016D38 7000                       		moveq	#0,d0
00016D3A 1028 0024                  		move.b	$24(a0),d0
00016D3E 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00016D42 0828 0000 0022             		btst	#0,$22(a0)
00016D48 6700                       		beq.s	loc_16CAA
00016D4A 4440                       		neg.w	d0
00016D4C                            
00016D4C                            loc_16CAA:
00016D4C 3140 0010                  		move.w	d0,$10(a0)
00016D50 317C FC00 0012             		move.w	#-$400,$12(a0)
00016D56 117C 000C 0024             		move.b	#$C,$24(a0)
00016D5C 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00016D62                            
00016D62                            loc_16CC0:				; XREF: Obj78_Index
00016D62 4EB9 0000 D67A             		jsr	ObjectFall
00016D68 4A68 0012                  		tst.w	$12(a0)
00016D6C 6B00                       		bmi.s	loc_16CE0
00016D6E 4EBA E156                  		jsr	ObjHitFloor
00016D72 4A41                       		tst.w	d1
00016D74 6A00                       		bpl.s	loc_16CE0
00016D76 D368 000C                  		add.w	d1,$C(a0)
00016D7A 317C FC00 0012             		move.w	#-$400,$12(a0)
00016D80                            
00016D80                            loc_16CE0:
00016D80 4A28 0001                  		tst.b	1(a0)
00016D84 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00016D88 4EF9 0000 D6CC             		jmp	DisplaySprite
00016D8E                            ; ===========================================================================
00016D8E                            Ani_obj78:
00016D8E                            	include "_anim\obj78.asm"
00016D8E                            ; ---------------------------------------------------------------------------
00016D8E                            ; Animation script - Caterkiller enemy (uses non-standard format)
00016D8E                            ; ---------------------------------------------------------------------------
00016D8E 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00016D9E 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00016DAE 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00016DBE 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00016DCE 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00016DDE 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00016DEE 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00016DFE 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00016E0E                            	even
00016E0E                            	even
00016E0E                            
00016E0E                            ; ---------------------------------------------------------------------------
00016E0E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016E0E                            ; ---------------------------------------------------------------------------
00016E0E                            Map_obj78:
00016E0E                            	include "_maps\obj78.asm"
00016E0E                            ; ---------------------------------------------------------------------------
00016E0E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016E0E                            ; ---------------------------------------------------------------------------
00016E0E 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00016E12 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00016E16 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00016E1A 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00016E1E 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00016E22 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00016E26 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00016E2A 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00016E2E 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00016E32 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00016E36 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00016E3A 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00016E3E 01                         byte_16D9E:	dc.b 1
00016E3F F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00016E44 01                         byte_16DA4:	dc.b 1
00016E45 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00016E4A 01                         byte_16DAA:	dc.b 1
00016E4B F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00016E50 01                         byte_16DB0:	dc.b 1
00016E51 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00016E56 01                         byte_16DB6:	dc.b 1
00016E57 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00016E5C 01                         byte_16DBC:	dc.b 1
00016E5D ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00016E62 01                         byte_16DC2:	dc.b 1
00016E63 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00016E68 01                         byte_16DC8:	dc.b 1
00016E69 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00016E6E 01                         byte_16DCE:	dc.b 1
00016E6F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00016E74 01                         byte_16DD4:	dc.b 1
00016E75 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00016E7A 01                         byte_16DDA:	dc.b 1
00016E7B F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00016E80 01                         byte_16DE0:	dc.b 1
00016E81 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00016E86 01                         byte_16DE6:	dc.b 1
00016E87 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00016E8C 01                         byte_16DEC:	dc.b 1
00016E8D F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00016E92 01                         byte_16DF2:	dc.b 1
00016E93 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00016E98 01                         byte_16DF8:	dc.b 1
00016E99 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00016E9E 01                         byte_16DFE:	dc.b 1
00016E9F F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00016EA4 01                         byte_16E04:	dc.b 1
00016EA5 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00016EAA 01                         byte_16E0A:	dc.b 1
00016EAB F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00016EB0 01                         byte_16E10:	dc.b 1
00016EB1 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00016EB6 01                         byte_16E16:	dc.b 1
00016EB7 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00016EBC 01                         byte_16E1C:	dc.b 1
00016EBD ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00016EC2 01                         byte_16E22:	dc.b 1
00016EC3 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00016EC8 01                         byte_16E28:	dc.b 1
00016EC9 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00016ECE                            		even
00016ECE                            		even
00016ECE                            
00016ECE                            ; ===========================================================================
00016ECE                            ; ---------------------------------------------------------------------------
00016ECE                            ; Object 79 - lamppost
00016ECE                            ; ---------------------------------------------------------------------------
00016ECE                            
00016ECE                            Obj79:					; XREF: Obj_Index
00016ECE 7000                       		moveq	#0,d0
00016ED0 1028 0024                  		move.b	$24(a0),d0
00016ED4 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00016ED8 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00016EDC 4EFA 8896                  		jmp	MarkObjGone
00016EE0                            ; ===========================================================================
00016EE0 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00016EE2 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00016EE4 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00016EE6 0000                       		dc.w Obj79_Twirl-Obj79_Index
00016EE8                            ; ===========================================================================
00016EE8                            
00016EE8                            Obj79_Main:				; XREF: Obj79_Index
00016EE8 5428 0024                  		addq.b	#2,$24(a0)
00016EEC 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00016EF4 317C 07A0 0002             		move.w	#$7A0,2(a0)
00016EFA 117C 0004 0001             		move.b	#4,1(a0)
00016F00 117C 0008 0019             		move.b	#8,$19(a0)
00016F06 117C 0005 0018             		move.b	#5,$18(a0)
00016F0C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016F10 7000                       		moveq	#0,d0
00016F12 1028 0023                  		move.b	$23(a0),d0
00016F16 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016F1C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016F22 6600                       		bne.s	Obj79_RedLamp
00016F24 1238 FE30                  		move.b	($FFFFFE30).w,d1
00016F28 0201 007F                  		andi.b	#$7F,d1
00016F2C 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00016F30 0202 007F                  		andi.b	#$7F,d2
00016F34 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00016F36 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00016F38                            
00016F38                            Obj79_RedLamp:
00016F38 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016F3E 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00016F44 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00016F4A 4E75                       		rts	
00016F4C                            ; ===========================================================================
00016F4C                            
00016F4C                            Obj79_BlueLamp:				; XREF: Obj79_Index
00016F4C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00016F50 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00016F54 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016F58 6B00 0000                  		bmi.w	locret_16F90
00016F5C 1238 FE30                  		move.b	($FFFFFE30).w,d1
00016F60 0201 007F                  		andi.b	#$7F,d1
00016F64 1428 0028                  		move.b	$28(a0),d2
00016F68 0202 007F                  		andi.b	#$7F,d2
00016F6C B202                       		cmp.b	d2,d1
00016F6E 6500                       		bcs.s	Obj79_HitLamp
00016F70 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016F74 7000                       		moveq	#0,d0
00016F76 1028 0023                  		move.b	$23(a0),d0
00016F7A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016F80 117C 0004 0024             		move.b	#4,$24(a0)
00016F86 117C 0003 001A             		move.b	#3,$1A(a0)
00016F8C 6000 0000                  		bra.w	locret_16F90
00016F90                            ; ===========================================================================
00016F90                            
00016F90                            Obj79_HitLamp:
00016F90 3038 D008                  		move.w	($FFFFD008).w,d0
00016F94 9068 0008                  		sub.w	8(a0),d0
00016F98 5040                       		addq.w	#8,d0
00016F9A 0C40 0010                  		cmpi.w	#$10,d0
00016F9E 6400 0000                  		bcc.w	locret_16F90
00016FA2 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016FA6 9068 000C                  		sub.w	$C(a0),d0
00016FAA 0640 0040                  		addi.w	#$40,d0
00016FAE 0C40 0068                  		cmpi.w	#$68,d0
00016FB2 6400                       		bcc.s	locret_16F90
00016FB4 303C 00A1                  		move.w	#$A1,d0
00016FB8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lamppost sound
00016FBE 5428 0024                  		addq.b	#2,$24(a0)
00016FC2 4EB9 0000 DB52             		jsr	SingleObjLoad
00016FC8 6600                       		bne.s	loc_16F76
00016FCA 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00016FCE 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00016FD4 3368 0008 0030             		move.w	8(a0),$30(a1)
00016FDA 3368 000C 0032             		move.w	$C(a0),$32(a1)
00016FE0 0469 0018 0032             		subi.w	#$18,$32(a1)
00016FE6 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00016FEE 337C 07A0 0002             		move.w	#$7A0,2(a1)
00016FF4 137C 0004 0001             		move.b	#4,1(a1)
00016FFA 137C 0008 0019             		move.b	#8,$19(a1)
00017000 137C 0004 0018             		move.b	#4,$18(a1)
00017006 137C 0002 001A             		move.b	#2,$1A(a1)
0001700C 337C 0020 0036             		move.w	#$20,$36(a1)
00017012                            
00017012                            loc_16F76:
00017012 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017018 6100 0000                  		bsr.w	Obj79_StoreInfo
0001701C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017020 7000                       		moveq	#0,d0
00017022 1028 0023                  		move.b	$23(a0),d0
00017026 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001702C                            
0001702C                            locret_16F90:
0001702C 4E75                       		rts	
0001702E                            ; ===========================================================================
0001702E                            
0001702E                            Obj79_AfterHit:				; XREF: Obj79_Index
0001702E 4E75                       		rts	
00017030                            ; ===========================================================================
00017030                            
00017030                            Obj79_Twirl:				; XREF: Obj79_Index
00017030 5368 0036                  		subq.w	#1,$36(a0)
00017034 6A00                       		bpl.s	loc_16FA0
00017036 117C 0004 0024             		move.b	#4,$24(a0)
0001703C                            
0001703C                            loc_16FA0:
0001703C 1028 0026                  		move.b	$26(a0),d0
00017040 0428 0010 0026             		subi.b	#$10,$26(a0)
00017046 0400 0040                  		subi.b	#$40,d0
0001704A 4EB9 0000 29DA             		jsr	(CalcSine).l
00017050 C3FC 0C00                  		muls.w	#$C00,d1
00017054 4841                       		swap	d1
00017056 D268 0030                  		add.w	$30(a0),d1
0001705A 3141 0008                  		move.w	d1,8(a0)
0001705E C1FC 0C00                  		muls.w	#$C00,d0
00017062 4840                       		swap	d0
00017064 D068 0032                  		add.w	$32(a0),d0
00017068 3140 000C                  		move.w	d0,$C(a0)
0001706C 4E75                       		rts	
0001706E                            ; ===========================================================================
0001706E                            ; ---------------------------------------------------------------------------
0001706E                            ; Subroutine to	store information when you hit a lamppost
0001706E                            ; ---------------------------------------------------------------------------
0001706E                            
0001706E                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001706E 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017074 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0001707A 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017080 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017086 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001708C 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017092 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017098 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001709E 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000170A4 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000170AA 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000170B0 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000170B6 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000170BC 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000170C2 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000170C8 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000170CE 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000170D4 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000170DA 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000170E0 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000170E6 4E75                       		rts	
000170E8                            
000170E8                            ; ---------------------------------------------------------------------------
000170E8                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000170E8                            ; ---------------------------------------------------------------------------
000170E8                            
000170E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000170E8                            
000170E8                            
000170E8                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000170E8 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000170EE 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000170F4 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000170FA 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017100 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017106 4278 FE20                  		clr.w	($FFFFFE20).w
0001710A 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001710E 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017114 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001711A 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001711E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017124 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001712A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017130 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017136 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001713C 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017142 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017148 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001714E 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017154 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
0001715A 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017160 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017166 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001716C 6600                       		bne.s	loc_170E4
0001716E 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017174 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001717A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017180                            
00017180                            loc_170E4:
00017180 4A38 FE30                  		tst.b	($FFFFFE30).w
00017184 6A00                       		bpl.s	locret_170F6
00017186 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001718A 0440 00A0                  		subi.w	#$A0,d0
0001718E 31C0 F728                  		move.w	d0,($FFFFF728).w
00017192                            
00017192                            locret_170F6:
00017192 4E75                       		rts	
00017194                            ; End of function Obj79_LoadInfo
00017194                            
00017194                            ; ===========================================================================
00017194                            ; ---------------------------------------------------------------------------
00017194                            ; Sprite mappings - lamppost
00017194                            ; ---------------------------------------------------------------------------
00017194                            Map_obj79:
00017194                            	include "_maps\obj79.asm"
00017194                            ; ---------------------------------------------------------------------------
00017194                            ; Sprite mappings - lamppost
00017194                            ; ---------------------------------------------------------------------------
00017194 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017198 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001719C 06                         byte_17100:	dc.b 6
0001719D E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000171A2 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000171A7 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000171AC F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000171B1 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000171B6 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000171BB 04                         byte_1711F:	dc.b 4
000171BC E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000171C1 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000171C6 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000171CB F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000171D0 02                         byte_17134:	dc.b 2
000171D1 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000171D6 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
000171DB 06                         byte_1713F:	dc.b 6
000171DC E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000171E1 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000171E6 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000171EB F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000171F0 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000171F5 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000171FA                            		even
000171FA                            		even
000171FA                            
000171FA                            ; ===========================================================================
000171FA                            ; ---------------------------------------------------------------------------
000171FA                            ; Object 7D - hidden points at the end of a level
000171FA                            ; ---------------------------------------------------------------------------
000171FA                            
000171FA                            Obj7D:					; XREF: Obj_Index
000171FA 7000                       		moveq	#0,d0
000171FC 1028 0024                  		move.b	$24(a0),d0
00017200 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017204 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017208                            ; ===========================================================================
00017208 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001720A 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001720C                            ; ===========================================================================
0001720C                            
0001720C                            Obj7D_Main:				; XREF: Obj7D_Index
0001720C 7410                       		moveq	#$10,d2
0001720E 3602                       		move.w	d2,d3
00017210 D643                       		add.w	d3,d3
00017212 43F8 D000                  		lea	($FFFFD000).w,a1
00017216 3029 0008                  		move.w	8(a1),d0
0001721A 9068 0008                  		sub.w	8(a0),d0
0001721E D042                       		add.w	d2,d0
00017220 B043                       		cmp.w	d3,d0
00017222 6400                       		bcc.s	Obj7D_ChkDel
00017224 3229 000C                  		move.w	$C(a1),d1
00017228 9268 000C                  		sub.w	$C(a0),d1
0001722C D242                       		add.w	d2,d1
0001722E B243                       		cmp.w	d3,d1
00017230 6400                       		bcc.s	Obj7D_ChkDel
00017232 4A78 FE08                  		tst.w	($FFFFFE08).w
00017236 6600                       		bne.s	Obj7D_ChkDel
00017238 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001723C 6600                       		bne.s	Obj7D_ChkDel
0001723E 5428 0024                  		addq.b	#2,$24(a0)
00017242 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
0001724A 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017250 0028 0004 0001             		ori.b	#4,1(a0)
00017256 117C 0000 0018             		move.b	#0,$18(a0)
0001725C 117C 0010 0019             		move.b	#$10,$19(a0)
00017262 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017268 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0001726E 303C 00C9                  		move.w	#$C9,d0
00017272 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play bonus sound
00017278 7000                       		moveq	#0,d0
0001727A 1028 0028                  		move.b	$28(a0),d0
0001727E D040                       		add.w	d0,d0
00017280 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017284 4EB9 0000 0000             		jsr	AddPoints
0001728A                            
0001728A                            Obj7D_ChkDel:
0001728A 3028 0008                  		move.w	8(a0),d0
0001728E 0240 FF80                  		andi.w	#$FF80,d0
00017292 3238 F700                  		move.w	($FFFFF700).w,d1
00017296 0441 0080                  		subi.w	#$80,d1
0001729A 0241 FF80                  		andi.w	#$FF80,d1
0001729E 9041                       		sub.w	d1,d0
000172A0 0C40 0280                  		cmpi.w	#$280,d0
000172A4 6200                       		bhi.s	Obj7D_Delete
000172A6 4E75                       		rts	
000172A8                            ; ===========================================================================
000172A8                            
000172A8                            Obj7D_Delete:
000172A8 4EF9 0000 D708             		jmp	DeleteObject
000172AE                            ; ===========================================================================
000172AE 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000172B0 03E8                       		dc.w 1000
000172B2 0064                       		dc.w 100
000172B4 0001                       		dc.w 1
000172B6                            ; ===========================================================================
000172B6                            
000172B6                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000172B6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000172BA 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000172BC 3028 0008                  		move.w	8(a0),d0
000172C0 0240 FF80                  		andi.w	#-$80,d0
000172C4 3238 F700                  		move.w	($FFFFF700).w,d1
000172C8 0441 0080                  		subi.w	#$80,d1
000172CC 0241 FF80                  		andi.w	#-$80,d1
000172D0 9041                       		sub.w	d1,d0
000172D2 0C40 0280                  		cmpi.w	#$280,d0
000172D6 6200                       		bhi.s	Obj7D_Delete2
000172D8 4EF9 0000 D6CC             		jmp	DisplaySprite
000172DE                            ; ===========================================================================
000172DE                            
000172DE                            Obj7D_Delete2:
000172DE 4EF9 0000 D708             		jmp	DeleteObject
000172E4                            ; ===========================================================================
000172E4                            ; ---------------------------------------------------------------------------
000172E4                            ; Sprite mappings - hidden points at the end of	a level
000172E4                            ; ---------------------------------------------------------------------------
000172E4                            Map_obj7D:
000172E4                            	include "_maps\obj7D.asm"
000172E4                            ; ---------------------------------------------------------------------------
000172E4                            ; Sprite mappings - hidden points at the end of	a level
000172E4                            ; ---------------------------------------------------------------------------
000172E4 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
000172E8 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000172EC 00                         byte_17250:	dc.b 0
000172ED 01                         byte_17251:	dc.b 1
000172EE F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000172F3 01                         byte_17257:	dc.b 1
000172F4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000172F9 01                         byte_1725D:	dc.b 1
000172FA F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017300 00                         		even
00017300 00                         		even
00017300                            
00017300                            ; ===========================================================================
00017300                            ; ---------------------------------------------------------------------------
00017300                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017300                            ; ---------------------------------------------------------------------------
00017300                            
00017300                            Obj8A:					; XREF: Obj_Index
00017300 7000                       		moveq	#0,d0
00017302 1028 0024                  		move.b	$24(a0),d0
00017306 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001730A 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001730E                            ; ===========================================================================
0001730E 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017310 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017312                            ; ===========================================================================
00017312                            
00017312                            Obj8A_Main:				; XREF: Obj8A_Index
00017312 5428 0024                  		addq.b	#2,$24(a0)
00017316 317C 0120 0008             		move.w	#$120,8(a0)
0001731C 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017322 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001732A 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017330 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017334 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017338 117C 0000 0001             		move.b	#0,1(a0)
0001733E 117C 0000 0018             		move.b	#0,$18(a0)
00017344 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
0001734A 6600                       		bne.s	Obj8A_Display	; if not, branch
0001734C 317C 00A6 0002             		move.w	#$A6,2(a0)
00017352 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017358 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001735C 6700                       		beq.s	Obj8A_Display	; if not, branch
0001735E 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017364 6600                       		bne.s	Obj8A_Display	; if not, branch
00017366 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
0001736C 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017372 4EF9 0000 D708             		jmp	DeleteObject
00017378                            ; ===========================================================================
00017378                            
00017378                            Obj8A_Display:				; XREF: Obj8A_Index
00017378 4EF9 0000 D6CC             		jmp	DisplaySprite
0001737E                            ; ===========================================================================
0001737E                            ; ---------------------------------------------------------------------------
0001737E                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001737E                            ; ---------------------------------------------------------------------------
0001737E                            Map_obj8A:
0001737E                            	include "_maps\obj8A.asm"
0001737E                            ; ---------------------------------------------------------------------------
0001737E                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001737E                            ; ---------------------------------------------------------------------------
0001737E 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00017382 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00017386 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
0001738A 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
0001738E 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00017392 0000                       		dc.w byte_176A9-Map_obj8A
00017394 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00017395 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001739A F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001739F F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
000173A4 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
000173A9 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
000173AE F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
000173B3 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
000173B8 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000173BD F809 0008 08               		dc.b $F8, 9, 0,	8, 8
000173C2 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
000173C7 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
000173CC F805 0004 48               		dc.b $F8, 5, 0,	4, $48
000173D1 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
000173D6 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
000173DB 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
000173DC D805 0000 80               		dc.b $D8, 5, 0,	0, $80
000173E1 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
000173E6 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
000173EB D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
000173F0 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
000173F5 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
000173FA D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
000173FF D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00017404 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00017409 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
0001740E 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00017413 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00017418 0805 0016 08               		dc.b 8,	5, 0, $16, 8
0001741D 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00017422 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00017427 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
0001742C 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
0001742D D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00017432 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00017437 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
0001743C D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00017441 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00017446 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
0001744B D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00017450 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00017455 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
0001745A 0805 0036 08               		dc.b 8,	5, 0, $36, 8
0001745F 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00017460 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00017465 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
0001746A D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
0001746F D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00017474 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00017479 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
0001747E D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00017483 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00017488 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
0001748D D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00017492 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00017497 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
0001749C D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
000174A1 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
000174A6 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
000174AB 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
000174B0 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
000174B5 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
000174BA 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
000174BF 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
000174C4 0805 0016 00               		dc.b 8,	5, 0, $16, 0
000174C9 0805 0004 10               		dc.b 8,	5, 0, 4, $10
000174CE 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
000174D3 0805 0042 30               		dc.b 8,	5, 0, $42, $30
000174D8 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
000174D9 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
000174DE D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
000174E3 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
000174E8 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
000174ED D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
000174F2 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
000174F7 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
000174FC 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00017501 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00017506 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
0001750B 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00017510 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00017515 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
0001751A 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
0001751F 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00017524 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00017529 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
0001752E 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00017533 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00017538 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
0001753D 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
0001753E D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00017543 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00017548 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
0001754D D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00017552 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00017557 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
0001755C D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00017561 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00017566 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
0001756B D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00017570 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00017575 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
0001757A 0809 0008 88               		dc.b 8,	9, 0, 8, $88
0001757F 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00017584 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00017589 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
0001758E 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00017593 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00017598 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
0001759D 0805 0004 08               		dc.b 8,	5, 0, 4, 8
000175A2 0805 0058 18               		dc.b 8,	5, 0, $58, $18
000175A7 0805 0004 28               		dc.b 8,	5, 0, 4, $28
000175AC 0809 0008 38               		dc.b 8,	9, 0, 8, $38
000175B1 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
000175B6 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
000175BB 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
000175C0 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
000175C1 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
000175C6 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
000175CB D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
000175D0 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
000175D5 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
000175DA D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
000175DF D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
000175E4 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
000175E9 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
000175EE D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
000175F3 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
000175F8 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
000175FD 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00017602 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00017607 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001760C 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00017611 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00017616 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001761B 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00017620 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00017625 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001762A 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001762F 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00017634 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00017635 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
0001763A D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
0001763F D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00017644 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00017649 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
0001764E D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00017653 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00017658 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
0001765D D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00017662 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00017667 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
0001766C D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
00017671 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00017676 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
0001767B 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00017680 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00017685 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001768A 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
0001768F 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00017694 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00017699 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
0001769E 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
000176A3 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
000176A8 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
000176AD 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
000176B2 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
000176B7 0001 0046 74               		dc.b 0,	1, 0, $46, $74
000176BC 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
000176C1 2005 0004 08               		dc.b $20, 5, 0,	4, 8
000176C6 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
000176CB 2005 0004 28               		dc.b $20, 5, 0,	4, $28
000176D0 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
000176D1 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
000176D6 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
000176DB F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
000176E0 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
000176E5 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
000176EA F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
000176EF F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
000176F4 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
000176F9 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
000176FE F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00017703 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00017708 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
0001770D F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00017712 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00017717 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0001771C 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0001771D 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00017722 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00017727 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001772C 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00017731 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00017736 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001773B 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00017740 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00017745 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
00017746 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
0001774B E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
00017750 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
00017755 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
0001775A E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
0001775F E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00017764 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00017769 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
0001776E E809 0008 34               		dc.b $E8, 9, 0,	8, $34
00017773 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
00017778 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
0001777D 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
00017782 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00017787 0005 000E 00               		dc.b 0,	5, 0, $E, 0
0001778C 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
00017791 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00017796 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
0001779C 00                         		even
0001779C 00                         		even
0001779C                            
0001779C                            ; ===========================================================================
0001779C                            ; ---------------------------------------------------------------------------
0001779C                            ; Object 3D - Eggman (GHZ)
0001779C                            ; ---------------------------------------------------------------------------
0001779C                            
0001779C                            Obj3D:					; XREF: Obj_Index
0001779C 7000                       		moveq	#0,d0
0001779E 1028 0024                  		move.b	$24(a0),d0
000177A2 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000177A6 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000177AA                            ; ===========================================================================
000177AA 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000177AC 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000177AE 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000177B0 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000177B2                            
000177B2 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000177B4 0401                       		dc.b 4,	1
000177B6 0607                       		dc.b 6,	7
000177B8                            ; ===========================================================================
000177B8                            
000177B8                            Obj3D_Main:				; XREF: Obj3D_Index
000177B8 45F9 0001 77B2             		lea	(Obj3D_ObjData).l,a2
000177BE 2248                       		movea.l	a0,a1
000177C0 7202                       		moveq	#2,d1
000177C2 6000                       		bra.s	Obj3D_LoadBoss
000177C4                            ; ===========================================================================
000177C4                            
000177C4                            Obj3D_Loop:
000177C4 4EB9 0000 DB68             		jsr	SingleObjLoad2
000177CA 6600                       		bne.s	loc_17772
000177CC                            
000177CC                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000177CC 135A 0024                  		move.b	(a2)+,$24(a1)
000177D0 12BC 003D                  		move.b	#$3D,0(a1)
000177D4 3368 0008 0008             		move.w	8(a0),8(a1)
000177DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000177E0 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000177E8 337C 0400 0002             		move.w	#$400,2(a1)
000177EE 137C 0004 0001             		move.b	#4,1(a1)
000177F4 137C 0020 0019             		move.b	#$20,$19(a1)
000177FA 137C 0003 0018             		move.b	#3,$18(a1)
00017800 135A 001C                  		move.b	(a2)+,$1C(a1)
00017804 2348 0034                  		move.l	a0,$34(a1)
00017808 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001780C                            
0001780C                            loc_17772:
0001780C 3168 0008 0030             		move.w	8(a0),$30(a0)
00017812 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017818 117C 000F 0020             		move.b	#$F,$20(a0)
0001781E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017824                            
00017824                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017824 7000                       		moveq	#0,d0
00017826 1028 0025                  		move.b	$25(a0),d0
0001782A 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001782E 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017832 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017838 4EB9 0000 A7F8             		jsr	AnimateSprite
0001783E 1028 0022                  		move.b	$22(a0),d0
00017842 0200 0003                  		andi.b	#3,d0
00017846 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001784C 8128 0001                  		or.b	d0,1(a0)
00017850 4EF9 0000 D6CC             		jmp	DisplaySprite
00017856                            ; ===========================================================================
00017856 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017858 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001785A 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001785C 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001785E 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017860 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017862 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017864                            ; ===========================================================================
00017864                            
00017864                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017864 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0001786A 6100 0000                  		bsr.w	BossMove
0001786E 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017874 6600                       		bne.s	loc_177E6
00017876 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001787C 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017880                            
00017880                            loc_177E6:
00017880 1028 003F                  		move.b	$3F(a0),d0
00017884 4EB9 0000 29DA             		jsr	(CalcSine).l
0001788A EC40                       		asr.w	#6,d0
0001788C D068 0038                  		add.w	$38(a0),d0
00017890 3140 000C                  		move.w	d0,$C(a0)
00017894 3168 0030 0008             		move.w	$30(a0),8(a0)
0001789A 5428 003F                  		addq.b	#2,$3F(a0)
0001789E 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000178A4 6400                       		bcc.s	locret_1784A
000178A6 4A28 0022                  		tst.b	$22(a0)
000178AA 6B00                       		bmi.s	loc_1784C
000178AC 4A28 0020                  		tst.b	$20(a0)
000178B0 6600                       		bne.s	locret_1784A
000178B2 4A28 003E                  		tst.b	$3E(a0)
000178B6 6600                       		bne.s	Obj3D_ShipFlash
000178B8 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000178BE 303C 00AC                  		move.w	#$AC,d0
000178C2 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
000178C8                            
000178C8                            Obj3D_ShipFlash:
000178C8 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000178CC 7000                       		moveq	#0,d0		; move 0 (black) to d0
000178CE 4A51                       		tst.w	(a1)
000178D0 6600                       		bne.s	loc_1783C
000178D2 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000178D6                            
000178D6                            loc_1783C:
000178D6 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000178D8 5328 003E                  		subq.b	#1,$3E(a0)
000178DC 6600                       		bne.s	locret_1784A
000178DE 117C 000F 0020             		move.b	#$F,$20(a0)
000178E4                            
000178E4                            locret_1784A:
000178E4 4E75                       		rts	
000178E6                            ; ===========================================================================
000178E6                            
000178E6                            loc_1784C:				; XREF: loc_177E6
000178E6 7064                       		moveq	#100,d0
000178E8 6100 0000                  		bsr.w	AddPoints
000178EC 117C 0008 0025             		move.b	#8,$25(a0)
000178F2 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000178F8 4E75                       		rts	
000178FA                            
000178FA                            ; ---------------------------------------------------------------------------
000178FA                            ; Defeated boss	subroutine
000178FA                            ; ---------------------------------------------------------------------------
000178FA                            
000178FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178FA                            
000178FA                            
000178FA                            BossDefeated:
000178FA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000178FE 0200 0007                  		andi.b	#7,d0
00017902 6600                       		bne.s	locret_178A2
00017904 4EB9 0000 DB52             		jsr	SingleObjLoad
0001790A 6600                       		bne.s	locret_178A2
0001790C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017910 3368 0008 0008             		move.w	8(a0),8(a1)
00017916 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001791C 4EB9 0000 29B4             		jsr	(RandomNumber).l
00017922 3200                       		move.w	d0,d1
00017924 7200                       		moveq	#0,d1
00017926 1200                       		move.b	d0,d1
00017928 E409                       		lsr.b	#2,d1
0001792A 0441 0020                  		subi.w	#$20,d1
0001792E D369 0008                  		add.w	d1,8(a1)
00017932 E048                       		lsr.w	#8,d0
00017934 E608                       		lsr.b	#3,d0
00017936 D169 000C                  		add.w	d0,$C(a1)
0001793A                            
0001793A                            locret_178A2:
0001793A 4E75                       		rts	
0001793C                            ; End of function BossDefeated
0001793C                            
0001793C                            ; ---------------------------------------------------------------------------
0001793C                            ; Subroutine to	move a boss
0001793C                            ; ---------------------------------------------------------------------------
0001793C                            
0001793C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001793C                            
0001793C                            
0001793C                            BossMove:
0001793C 2428 0030                  		move.l	$30(a0),d2
00017940 2628 0038                  		move.l	$38(a0),d3
00017944 3028 0010                  		move.w	$10(a0),d0
00017948 48C0                       		ext.l	d0
0001794A E180                       		asl.l	#8,d0
0001794C D480                       		add.l	d0,d2
0001794E 3028 0012                  		move.w	$12(a0),d0
00017952 48C0                       		ext.l	d0
00017954 E180                       		asl.l	#8,d0
00017956 D680                       		add.l	d0,d3
00017958 2142 0030                  		move.l	d2,$30(a0)
0001795C 2143 0038                  		move.l	d3,$38(a0)
00017960 4E75                       		rts	
00017962                            ; End of function BossMove
00017962                            
00017962                            ; ===========================================================================
00017962                            
00017962                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017962 317C FF00 0010             		move.w	#-$100,$10(a0)
00017968 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001796E 6100 FFCC                  		bsr.w	BossMove
00017972 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017978 6600                       		bne.s	loc_17916
0001797A 317C 0000 0010             		move.w	#0,$10(a0)
00017980 317C 0000 0012             		move.w	#0,$12(a0)
00017986 5428 0025                  		addq.b	#2,$25(a0)
0001798A 4EB9 0000 DB68             		jsr	SingleObjLoad2
00017990 6600                       		bne.s	loc_17910
00017992 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017996 3368 0030 0008             		move.w	$30(a0),8(a1)
0001799C 3368 0038 000C             		move.w	$38(a0),$C(a1)
000179A2 2348 0034                  		move.l	a0,$34(a1)
000179A6                            
000179A6                            loc_17910:
000179A6 317C 0077 003C             		move.w	#$77,$3C(a0)
000179AC                            
000179AC                            loc_17916:
000179AC 6000 FED2                  		bra.w	loc_177E6
000179B0                            ; ===========================================================================
000179B0                            
000179B0                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
000179B0 5368 003C                  		subq.w	#1,$3C(a0)
000179B4 6A00                       		bpl.s	Obj3D_Reverse
000179B6 5428 0025                  		addq.b	#2,$25(a0)
000179BA 317C 003F 003C             		move.w	#$3F,$3C(a0)
000179C0 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
000179C6 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000179CC 6600                       		bne.s	Obj3D_Reverse
000179CE 317C 007F 003C             		move.w	#$7F,$3C(a0)
000179D4 317C 0040 0010             		move.w	#$40,$10(a0)
000179DA                            
000179DA                            Obj3D_Reverse:
000179DA 0828 0000 0022             		btst	#0,$22(a0)
000179E0 6600                       		bne.s	loc_17950
000179E2 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
000179E6                            
000179E6                            loc_17950:
000179E6 6000 FE98                  		bra.w	loc_177E6
000179EA                            ; ===========================================================================
000179EA                            
000179EA                            loc_17954:				; XREF: Obj3D_ShipIndex
000179EA 5368 003C                  		subq.w	#1,$3C(a0)
000179EE 6B00                       		bmi.s	loc_17960
000179F0 6100 FF4A                  		bsr.w	BossMove
000179F4 6000                       		bra.s	loc_17976
000179F6                            ; ===========================================================================
000179F6                            
000179F6                            loc_17960:
000179F6 0868 0000 0022             		bchg	#0,$22(a0)
000179FC 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017A02 5528 0025                  		subq.b	#2,$25(a0)
00017A06 317C 0000 0010             		move.w	#0,$10(a0)
00017A0C                            
00017A0C                            loc_17976:
00017A0C 6000 FE72                  		bra.w	loc_177E6
00017A10                            ; ===========================================================================
00017A10                            
00017A10                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017A10 5368 003C                  		subq.w	#1,$3C(a0)
00017A14 6B00                       		bmi.s	loc_17984
00017A16 6000 FEE2                  		bra.w	BossDefeated
00017A1A                            ; ===========================================================================
00017A1A                            
00017A1A                            loc_17984:
00017A1A 08E8 0000 0022             		bset	#0,$22(a0)
00017A20 08A8 0007 0022             		bclr	#7,$22(a0)
00017A26 4268 0010                  		clr.w	$10(a0)
00017A2A 5428 0025                  		addq.b	#2,$25(a0)
00017A2E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017A34 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017A38 6600                       		bne.s	locret_179AA
00017A3A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017A40                            
00017A40                            locret_179AA:
00017A40 4E75                       		rts	
00017A42                            ; ===========================================================================
00017A42                            
00017A42                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017A42 5268 003C                  		addq.w	#1,$3C(a0)
00017A46 6700                       		beq.s	loc_179BC
00017A48 6A00                       		bpl.s	loc_179C2
00017A4A 0668 0018 0012             		addi.w	#$18,$12(a0)
00017A50 6000                       		bra.s	loc_179EE
00017A52                            ; ===========================================================================
00017A52                            
00017A52                            loc_179BC:
00017A52 4268 0012                  		clr.w	$12(a0)
00017A56 6000                       		bra.s	loc_179EE
00017A58                            ; ===========================================================================
00017A58                            
00017A58                            loc_179C2:
00017A58 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017A5E 6500                       		bcs.s	loc_179DA
00017A60 6700                       		beq.s	loc_179E0
00017A62 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017A68 6500                       		bcs.s	loc_179EE
00017A6A 5428 0025                  		addq.b	#2,$25(a0)
00017A6E 6000                       		bra.s	loc_179EE
00017A70                            ; ===========================================================================
00017A70                            
00017A70                            loc_179DA:
00017A70 5168 0012                  		subq.w	#8,$12(a0)
00017A74 6000                       		bra.s	loc_179EE
00017A76                            ; ===========================================================================
00017A76                            
00017A76                            loc_179E0:
00017A76 4268 0012                  		clr.w	$12(a0)
00017A7A 303C 0081                  		move.w	#$81,d0
00017A7E 4EB9 0000 1396             		jsr	(PlaySound).l	; play GHZ music
00017A84                            
00017A84                            loc_179EE:
00017A84 6100 FEB6                  		bsr.w	BossMove
00017A88 6000 FDF6                  		bra.w	loc_177E6
00017A8C                            ; ===========================================================================
00017A8C                            
00017A8C                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017A8C 317C 0400 0010             		move.w	#$400,$10(a0)
00017A92 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017A98 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00017A9E 6700                       		beq.s	loc_17A10
00017AA0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017AA4 6000                       		bra.s	loc_17A16
00017AA6                            ; ===========================================================================
00017AA6                            
00017AA6                            loc_17A10:
00017AA6 4A28 0001                  		tst.b	1(a0)
00017AAA 6A00                       		bpl.s	Obj3D_ShipDel
00017AAC                            
00017AAC                            loc_17A16:
00017AAC 6100 FE8E                  		bsr.w	BossMove
00017AB0 6000 FDCE                  		bra.w	loc_177E6
00017AB4                            ; ===========================================================================
00017AB4                            
00017AB4                            Obj3D_ShipDel:
00017AB4 4EF9 0000 D708             		jmp	DeleteObject
00017ABA                            ; ===========================================================================
00017ABA                            
00017ABA                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00017ABA 7000                       		moveq	#0,d0
00017ABC 7201                       		moveq	#1,d1
00017ABE 2268 0034                  		movea.l	$34(a0),a1
00017AC2 1029 0025                  		move.b	$25(a1),d0
00017AC6 5900                       		subq.b	#4,d0
00017AC8 6600                       		bne.s	loc_17A3E
00017ACA 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00017AD0 6600                       		bne.s	loc_17A46
00017AD2 7204                       		moveq	#4,d1
00017AD4                            
00017AD4                            loc_17A3E:
00017AD4 5D00                       		subq.b	#6,d0
00017AD6 6B00                       		bmi.s	loc_17A46
00017AD8 720A                       		moveq	#$A,d1
00017ADA 6000                       		bra.s	loc_17A5A
00017ADC                            ; ===========================================================================
00017ADC                            
00017ADC                            loc_17A46:
00017ADC 4A29 0020                  		tst.b	$20(a1)
00017AE0 6600                       		bne.s	loc_17A50
00017AE2 7205                       		moveq	#5,d1
00017AE4 6000                       		bra.s	loc_17A5A
00017AE6                            ; ===========================================================================
00017AE6                            
00017AE6                            loc_17A50:
00017AE6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00017AEC 6500                       		bcs.s	loc_17A5A
00017AEE 7204                       		moveq	#4,d1
00017AF0                            
00017AF0                            loc_17A5A:
00017AF0 1141 001C                  		move.b	d1,$1C(a0)
00017AF4 5500                       		subq.b	#2,d0
00017AF6 6600                       		bne.s	Obj3D_FaceDisp
00017AF8 117C 0006 001C             		move.b	#6,$1C(a0)
00017AFE 4A28 0001                  		tst.b	1(a0)
00017B02 6A00                       		bpl.s	Obj3D_FaceDel
00017B04                            
00017B04                            Obj3D_FaceDisp:
00017B04 6000                       		bra.s	Obj3D_Display
00017B06                            ; ===========================================================================
00017B06                            
00017B06                            Obj3D_FaceDel:
00017B06 4EF9 0000 D708             		jmp	DeleteObject
00017B0C                            ; ===========================================================================
00017B0C                            
00017B0C                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00017B0C 117C 0007 001C             		move.b	#7,$1C(a0)
00017B12 2268 0034                  		movea.l	$34(a0),a1
00017B16 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00017B1C 6600                       		bne.s	loc_17A96
00017B1E 117C 000B 001C             		move.b	#$B,$1C(a0)
00017B24 4A28 0001                  		tst.b	1(a0)
00017B28 6A00                       		bpl.s	Obj3D_FlameDel
00017B2A 6000                       		bra.s	Obj3D_FlameDisp
00017B2C                            ; ===========================================================================
00017B2C                            
00017B2C                            loc_17A96:
00017B2C 3029 0010                  		move.w	$10(a1),d0
00017B30 6700                       		beq.s	Obj3D_FlameDisp
00017B32 117C 0008 001C             		move.b	#8,$1C(a0)
00017B38                            
00017B38                            Obj3D_FlameDisp:
00017B38 6000                       		bra.s	Obj3D_Display
00017B3A                            ; ===========================================================================
00017B3A                            
00017B3A                            Obj3D_FlameDel:
00017B3A 4EF9 0000 D708             		jmp	DeleteObject
00017B40                            ; ===========================================================================
00017B40                            
00017B40                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00017B40 2268 0034                  		movea.l	$34(a0),a1
00017B44 3169 0008 0008             		move.w	8(a1),8(a0)
00017B4A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00017B50 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017B56 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017B5C 4EB9 0000 A7F8             		jsr	AnimateSprite
00017B62 1028 0022                  		move.b	$22(a0),d0
00017B66 0200 0003                  		andi.b	#3,d0
00017B6A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017B70 8128 0001                  		or.b	d0,1(a0)
00017B74 4EF9 0000 D6CC             		jmp	DisplaySprite
00017B7A                            ; ===========================================================================
00017B7A                            ; ---------------------------------------------------------------------------
00017B7A                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00017B7A                            ; ---------------------------------------------------------------------------
00017B7A                            
00017B7A                            Obj48:					; XREF: Obj_Index
00017B7A 7000                       		moveq	#0,d0
00017B7C 1028 0024                  		move.b	$24(a0),d0
00017B80 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00017B84 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00017B88                            ; ===========================================================================
00017B88 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00017B8A 0000                       		dc.w Obj48_Base-Obj48_Index
00017B8C 0000                       		dc.w Obj48_Display2-Obj48_Index
00017B8E 0000                       		dc.w loc_17C68-Obj48_Index
00017B90 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00017B92                            ; ===========================================================================
00017B92                            
00017B92                            Obj48_Main:				; XREF: Obj48_Index
00017B92 5428 0024                  		addq.b	#2,$24(a0)
00017B96 317C 4080 0026             		move.w	#$4080,$26(a0)
00017B9C 317C FE00 003E             		move.w	#-$200,$3E(a0)
00017BA2 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00017BAA 317C 046C 0002             		move.w	#$46C,2(a0)
00017BB0 45E8 0028                  		lea	$28(a0),a2
00017BB4 14FC 0000                  		move.b	#0,(a2)+
00017BB8 7205                       		moveq	#5,d1
00017BBA 2248                       		movea.l	a0,a1
00017BBC 6000                       		bra.s	loc_17B60
00017BBE                            ; ===========================================================================
00017BBE                            
00017BBE                            Obj48_MakeLinks:
00017BBE 4EB9 0000 DB68             		jsr	SingleObjLoad2
00017BC4 6600                       		bne.s	Obj48_MakeBall
00017BC6 3368 0008 0008             		move.w	8(a0),8(a1)
00017BCC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017BD2 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00017BD6 137C 0006 0024             		move.b	#6,$24(a1)
00017BDC 237C 0000 7D4A 0004        		move.l	#Map_obj15,4(a1)
00017BE4 337C 0380 0002             		move.w	#$380,2(a1)
00017BEA 137C 0001 001A             		move.b	#1,$1A(a1)
00017BF0 5228 0028                  		addq.b	#1,$28(a0)
00017BF4                            
00017BF4                            loc_17B60:				; XREF: Obj48_Main
00017BF4 3A09                       		move.w	a1,d5
00017BF6 0445 D000                  		subi.w	#$D000,d5
00017BFA EC4D                       		lsr.w	#6,d5
00017BFC 0245 007F                  		andi.w	#$7F,d5
00017C00 14C5                       		move.b	d5,(a2)+
00017C02 137C 0004 0001             		move.b	#4,1(a1)
00017C08 137C 0008 0019             		move.b	#8,$19(a1)
00017C0E 137C 0006 0018             		move.b	#6,$18(a1)
00017C14 2368 0034 0034             		move.l	$34(a0),$34(a1)
00017C1A 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00017C1E                            
00017C1E                            Obj48_MakeBall:
00017C1E 137C 0008 0024             		move.b	#8,$24(a1)
00017C24 237C 0000 82A8 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00017C2C 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00017C32 137C 0001 001A             		move.b	#1,$1A(a1)
00017C38 137C 0005 0018             		move.b	#5,$18(a1)
00017C3E 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00017C44 4E75                       		rts	
00017C46                            ; ===========================================================================
00017C46                            
00017C46 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00017C4C                            
00017C4C                            ; ===========================================================================
00017C4C                            
00017C4C                            Obj48_Base:				; XREF: Obj48_Index
00017C4C 47F9 0001 7C46             		lea	(Obj48_PosData).l,a3
00017C52 45E8 0028                  		lea	$28(a0),a2
00017C56 7C00                       		moveq	#0,d6
00017C58 1C1A                       		move.b	(a2)+,d6
00017C5A                            
00017C5A                            loc_17BC6:
00017C5A 7800                       		moveq	#0,d4
00017C5C 181A                       		move.b	(a2)+,d4
00017C5E ED4C                       		lsl.w	#6,d4
00017C60 0684 00FF D000             		addi.l	#$FFD000,d4
00017C66 2244                       		movea.l	d4,a1
00017C68 101B                       		move.b	(a3)+,d0
00017C6A B029 003C                  		cmp.b	$3C(a1),d0
00017C6E 6700                       		beq.s	loc_17BE0
00017C70 5229 003C                  		addq.b	#1,$3C(a1)
00017C74                            
00017C74                            loc_17BE0:
00017C74 51CE FFE4                  		dbf	d6,loc_17BC6
00017C78                            
00017C78 B029 003C                  		cmp.b	$3C(a1),d0
00017C7C 6600                       		bne.s	loc_17BFA
00017C7E 2268 0034                  		movea.l	$34(a0),a1
00017C82 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00017C88 6600                       		bne.s	loc_17BFA
00017C8A 5428 0024                  		addq.b	#2,$24(a0)
00017C8E                            
00017C8E                            loc_17BFA:
00017C8E 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00017C94 6700                       		beq.s	Obj48_Display
00017C96 5268 0032                  		addq.w	#1,$32(a0)
00017C9A                            
00017C9A                            Obj48_Display:
00017C9A 6100 0000                  		bsr.w	sub_17C2A
00017C9E 1028 0026                  		move.b	$26(a0),d0
00017CA2 4EB9 0000 7CBC             		jsr	(Obj15_Move2).l
00017CA8 4EF9 0000 D6CC             		jmp	DisplaySprite
00017CAE                            ; ===========================================================================
00017CAE                            
00017CAE                            Obj48_Display2:				; XREF: Obj48_Index
00017CAE 6100 0000                  		bsr.w	sub_17C2A
00017CB2 4EB9 0000 7C7C             		jsr	(Obj48_Move).l
00017CB8 4EF9 0000 D6CC             		jmp	DisplaySprite
00017CBE                            
00017CBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017CBE                            
00017CBE                            
00017CBE                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00017CBE 2268 0034                  		movea.l	$34(a0),a1
00017CC2 0628 0020 001B             		addi.b	#$20,$1B(a0)
00017CC8 6400                       		bcc.s	loc_17C3C
00017CCA 0868 0000 001A             		bchg	#0,$1A(a0)
00017CD0                            
00017CD0                            loc_17C3C:
00017CD0 3169 0008 003A             		move.w	8(a1),$3A(a0)
00017CD6 3029 000C                  		move.w	$C(a1),d0
00017CDA D068 0032                  		add.w	$32(a0),d0
00017CDE 3140 0038                  		move.w	d0,$38(a0)
00017CE2 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017CE8 4A29 0022                  		tst.b	$22(a1)
00017CEC 6A00                       		bpl.s	locret_17C66
00017CEE 10BC 003F                  		move.b	#$3F,0(a0)
00017CF2 117C 0000 0024             		move.b	#0,$24(a0)
00017CF8                            
00017CF8                            locret_17C66:
00017CF8 4E75                       		rts	
00017CFA                            ; End of function sub_17C2A
00017CFA                            
00017CFA                            ; ===========================================================================
00017CFA                            
00017CFA                            loc_17C68:				; XREF: Obj48_Index
00017CFA 2268 0034                  		movea.l	$34(a0),a1
00017CFE 4A29 0022                  		tst.b	$22(a1)
00017D02 6A00                       		bpl.s	Obj48_Display3
00017D04 10BC 003F                  		move.b	#$3F,0(a0)
00017D08 117C 0000 0024             		move.b	#0,$24(a0)
00017D0E                            
00017D0E                            Obj48_Display3:
00017D0E 4EF9 0000 D6CC             		jmp	DisplaySprite
00017D14                            ; ===========================================================================
00017D14                            
00017D14                            Obj48_ChkVanish:			; XREF: Obj48_Index
00017D14 7000                       		moveq	#0,d0
00017D16 4A28 001A                  		tst.b	$1A(a0)
00017D1A 6600                       		bne.s	Obj48_Vanish
00017D1C 5200                       		addq.b	#1,d0
00017D1E                            
00017D1E                            Obj48_Vanish:
00017D1E 1140 001A                  		move.b	d0,$1A(a0)
00017D22 2268 0034                  		movea.l	$34(a0),a1
00017D26 4A29 0022                  		tst.b	$22(a1)
00017D2A 6A00                       		bpl.s	Obj48_Display4
00017D2C 117C 0000 0020             		move.b	#0,$20(a0)
00017D32 6100 FBC6                  		bsr.w	BossDefeated
00017D36 5328 003C                  		subq.b	#1,$3C(a0)
00017D3A 6A00                       		bpl.s	Obj48_Display4
00017D3C 10BC 003F                  		move.b	#$3F,(a0)
00017D40 117C 0000 0024             		move.b	#0,$24(a0)
00017D46                            
00017D46                            Obj48_Display4:
00017D46 4EF9 0000 D6CC             		jmp	DisplaySprite
00017D4C                            ; ===========================================================================
00017D4C                            Ani_Eggman:
00017D4C                            	include "_anim\Eggman.asm"
00017D4C                            ; ---------------------------------------------------------------------------
00017D4C                            ; Animation script - Eggman (bosses)
00017D4C                            ; ---------------------------------------------------------------------------
00017D4C 0000                       		dc.w byte_17CD4-Ani_Eggman
00017D4E 0000                       		dc.w byte_17CD8-Ani_Eggman
00017D50 0000                       		dc.w byte_17CDC-Ani_Eggman
00017D52 0000                       		dc.w byte_17CE0-Ani_Eggman
00017D54 0000                       		dc.w byte_17CE4-Ani_Eggman
00017D56 0000                       		dc.w byte_17CE8-Ani_Eggman
00017D58 0000                       		dc.w byte_17CEC-Ani_Eggman
00017D5A 0000                       		dc.w byte_17CF0-Ani_Eggman
00017D5C 0000                       		dc.w byte_17CF4-Ani_Eggman
00017D5E 0000                       		dc.w byte_17CF8-Ani_Eggman
00017D60 0000                       		dc.w byte_17CFC-Ani_Eggman
00017D62 0000                       		dc.w byte_17D00-Ani_Eggman
00017D64 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00017D68 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00017D6C 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00017D70 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00017D74 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00017D78 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00017D7C 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00017D80 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00017D84 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00017D88 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00017D8C 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00017D90 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00017D9C                            		even
00017D9C                            		even
00017D9C                            
00017D9C                            ; ---------------------------------------------------------------------------
00017D9C                            ; Sprite mappings - Eggman (boss levels)
00017D9C                            ; ---------------------------------------------------------------------------
00017D9C                            Map_Eggman:
00017D9C                            	include "_maps\Eggman.asm"
00017D9C                            ; ---------------------------------------------------------------------------
00017D9C                            ; Sprite mappings - Eggman (boss levels)
00017D9C                            ; ---------------------------------------------------------------------------
00017D9C 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00017DA0 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00017DA4 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00017DA8 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00017DAC 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00017DB0 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00017DB4 0000                       		dc.w byte_17DC8-Map_Eggman
00017DB6 06                         byte_17D26:	dc.b 6
00017DB7 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00017DBC EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00017DC1 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00017DC6 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00017DCB 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00017DD0 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00017DD5 02                         byte_17D45:	dc.b 2
00017DD6 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00017DDB EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00017DE0 02                         byte_17D50:	dc.b 2
00017DE1 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00017DE6 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00017DEB 03                         byte_17D5B:	dc.b 3
00017DEC E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00017DF1 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00017DF6 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00017DFB 03                         byte_17D6B:	dc.b 3
00017DFC E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00017E01 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00017E06 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00017E0B 03                         byte_17D7B:	dc.b 3
00017E0C E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00017E11 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00017E16 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00017E1B 03                         byte_17D8B:	dc.b 3
00017E1C E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00017E21 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00017E26 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00017E2B 04                         byte_17D9B:	dc.b 4
00017E2C E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00017E31 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00017E36 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00017E3B EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00017E40 01                         byte_17DB0:	dc.b 1
00017E41 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00017E46 01                         byte_17DB6:	dc.b 1
00017E47 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00017E4C 00                         byte_17DBC:	dc.b 0
00017E4D 02                         byte_17DBD:	dc.b 2
00017E4E 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00017E53 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00017E58 02                         byte_17DC8:	dc.b 2
00017E59 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00017E5E 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00017E64 00                         		even
00017E64 00                         		even
00017E64                            
00017E64                            ; ---------------------------------------------------------------------------
00017E64                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017E64                            ; ---------------------------------------------------------------------------
00017E64                            Map_BossItems:
00017E64                            	include "_maps\Boss items.asm"
00017E64                            ; ---------------------------------------------------------------------------
00017E64                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017E64                            ; ---------------------------------------------------------------------------
00017E64 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00017E68 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00017E6C 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00017E70 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00017E74 01                         byte_17DE4:	dc.b 1
00017E75 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017E7A 02                         byte_17DEA:	dc.b 2
00017E7B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00017E80 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017E85 00                         		dc.b 0
00017E86 01                         byte_17DF6:	dc.b 1
00017E87 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00017E8C 01                         byte_17DFC:	dc.b 1
00017E8D 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00017E92 01                         byte_17E02:	dc.b 1
00017E93 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00017E98 04                         byte_17E08:	dc.b 4
00017E99 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00017E9E F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00017EA3 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00017EA8 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00017EAD 00                         		dc.b 0
00017EAE 02                         byte_17E1E:	dc.b 2
00017EAF 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00017EB4 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00017EB9 00                         		dc.b 0
00017EBA 02                         byte_17E2A:	dc.b 2
00017EBB 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00017EC0 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00017EC6 00                         		even
00017EC6 00                         		even
00017EC6                            
00017EC6                            ; ===========================================================================
00017EC6                            ; ---------------------------------------------------------------------------
00017EC6                            ; Object 77 - Eggman (LZ)
00017EC6                            ; ---------------------------------------------------------------------------
00017EC6                            
00017EC6                            Obj77:					; XREF: Obj_Index
00017EC6 7000                       		moveq	#0,d0
00017EC8 1028 0024                  		move.b	$24(a0),d0
00017ECC 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00017ED0 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00017ED4                            ; ===========================================================================
00017ED4 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00017ED6 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00017ED8 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00017EDA 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00017EDC                            
00017EDC 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00017EDE 0401                       		dc.b 4,	1
00017EE0 0607                       		dc.b 6,	7
00017EE2                            ; ===========================================================================
00017EE2                            
00017EE2                            Obj77_Main:				; XREF: Obj77_Index
00017EE2 317C 1E10 0008             		move.w	#$1E10,8(a0)
00017EE8 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00017EEE 3168 0008 0030             		move.w	8(a0),$30(a0)
00017EF4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017EFA 117C 000F 0020             		move.b	#$F,$20(a0)
00017F00 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017F06 117C 0004 0018             		move.b	#4,$18(a0)
00017F0C 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00017F10 2248                       		movea.l	a0,a1
00017F12 7202                       		moveq	#2,d1
00017F14 6000                       		bra.s	Obj77_LoadBoss
00017F16                            ; ===========================================================================
00017F16                            
00017F16                            Obj77_Loop:
00017F16 4EB9 0000 DB68             		jsr	SingleObjLoad2
00017F1C 6600                       		bne.s	Obj77_ShipMain
00017F1E 12BC 0077                  		move.b	#$77,0(a1)
00017F22 3368 0008 0008             		move.w	8(a0),8(a1)
00017F28 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017F2E                            
00017F2E                            Obj77_LoadBoss:				; XREF: Obj77_Main
00017F2E 08A8 0000 0022             		bclr	#0,$22(a0)
00017F34 4229 0025                  		clr.b	$25(a1)
00017F38 135A 0024                  		move.b	(a2)+,$24(a1)
00017F3C 135A 001C                  		move.b	(a2)+,$1C(a1)
00017F40 1368 0018 0018             		move.b	$18(a0),$18(a1)
00017F46 237C 0001 7D9C 0004        		move.l	#Map_Eggman,4(a1)
00017F4E 337C 0400 0002             		move.w	#$400,2(a1)
00017F54 137C 0004 0001             		move.b	#4,1(a1)
00017F5A 137C 0020 0019             		move.b	#$20,$19(a1)
00017F60 2348 0034                  		move.l	a0,$34(a1)
00017F64 51C9 FFB0                  		dbf	d1,Obj77_Loop
00017F68                            
00017F68                            Obj77_ShipMain:
00017F68 43F8 D000                  		lea	($FFFFD000).w,a1
00017F6C 7000                       		moveq	#0,d0
00017F6E 1028 0025                  		move.b	$25(a0),d0
00017F72 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00017F76 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00017F7A 43F9 0001 7D4C             		lea	(Ani_Eggman).l,a1
00017F80 4EB9 0000 A7F8             		jsr	AnimateSprite
00017F86 7003                       		moveq	#3,d0
00017F88 C028 0022                  		and.b	$22(a0),d0
00017F8C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017F92 8128 0001                  		or.b	d0,1(a0)
00017F96 4EF9 0000 D6CC             		jmp	DisplaySprite
00017F9C                            ; ===========================================================================
00017F9C 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00017FA0 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00017FA4 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00017FA8 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00017FAC                            ; ===========================================================================
00017FAC                            
00017FAC                            loc_17F1E:				; XREF: Obj77_ShipIndex
00017FAC 3029 0008                  		move.w	8(a1),d0
00017FB0 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00017FB4 6500                       		bcs.s	loc_17F38
00017FB6 317C FE80 0012             		move.w	#-$180,$12(a0)
00017FBC 317C 0060 0010             		move.w	#$60,$10(a0)
00017FC2 5428 0025                  		addq.b	#2,$25(a0)
00017FC6                            
00017FC6                            loc_17F38:
00017FC6 6100 F974                  		bsr.w	BossMove
00017FCA 3168 0038 000C             		move.w	$38(a0),$C(a0)
00017FD0 3168 0030 0008             		move.w	$30(a0),8(a0)
00017FD6                            
00017FD6                            loc_17F48:
00017FD6 4A28 003D                  		tst.b	$3D(a0)
00017FDA 6600                       		bne.s	loc_17F8E
00017FDC 4A28 0022                  		tst.b	$22(a0)
00017FE0 6B00                       		bmi.s	loc_17F92
00017FE2 4A28 0020                  		tst.b	$20(a0)
00017FE6 6600                       		bne.s	locret_17F8C
00017FE8 4A28 003E                  		tst.b	$3E(a0)
00017FEC 6600                       		bne.s	loc_17F70
00017FEE 117C 0020 003E             		move.b	#$20,$3E(a0)
00017FF4 303C 00AC                  		move.w	#$AC,d0
00017FF8 4EB9 0000 139C             		jsr	(PlaySound_Special).l
00017FFE                            
00017FFE                            loc_17F70:
00017FFE 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018002 7000                       		moveq	#0,d0
00018004 4A51                       		tst.w	(a1)
00018006 6600                       		bne.s	loc_17F7E
00018008 303C 0EEE                  		move.w	#$EEE,d0
0001800C                            
0001800C                            loc_17F7E:
0001800C 3280                       		move.w	d0,(a1)
0001800E 5328 003E                  		subq.b	#1,$3E(a0)
00018012 6600                       		bne.s	locret_17F8C
00018014 117C 000F 0020             		move.b	#$F,$20(a0)
0001801A                            
0001801A                            locret_17F8C:
0001801A 4E75                       		rts	
0001801C                            ; ===========================================================================
0001801C                            
0001801C                            loc_17F8E:				; XREF: loc_17F48
0001801C 6000 F8DC                  		bra.w	BossDefeated
00018020                            ; ===========================================================================
00018020                            
00018020                            loc_17F92:				; XREF: loc_17F48
00018020 7064                       		moveq	#100,d0
00018022 6100 0000                  		bsr.w	AddPoints
00018026 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001802C 4E75                       		rts	
0001802E                            ; ===========================================================================
0001802E                            
0001802E                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001802E 70FE                       		moveq	#-2,d0
00018030 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00018036 6500                       		bcs.s	loc_17FB6
00018038 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001803E 4268 0010                  		clr.w	$10(a0)
00018042 5240                       		addq.w	#1,d0
00018044                            
00018044                            loc_17FB6:
00018044 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001804A 6E00                       		bgt.s	loc_17FCA
0001804C 317C 0500 0038             		move.w	#$500,$38(a0)
00018052 4268 0012                  		clr.w	$12(a0)
00018056 5240                       		addq.w	#1,d0
00018058                            
00018058                            loc_17FCA:
00018058 6600                       		bne.s	loc_17FDC
0001805A 317C 0140 0010             		move.w	#$140,$10(a0)
00018060 317C FE00 0012             		move.w	#-$200,$12(a0)
00018066 5428 0025                  		addq.b	#2,$25(a0)
0001806A                            
0001806A                            loc_17FDC:
0001806A 6000 FF5A                  		bra.w	loc_17F38
0001806E                            ; ===========================================================================
0001806E                            
0001806E                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001806E 70FE                       		moveq	#-2,d0
00018070 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00018076 6500                       		bcs.s	loc_17FF6
00018078 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001807E 4268 0010                  		clr.w	$10(a0)
00018082 5240                       		addq.w	#1,d0
00018084                            
00018084                            loc_17FF6:
00018084 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001808A 6E00                       		bgt.s	loc_1800A
0001808C 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018092 4268 0012                  		clr.w	$12(a0)
00018096 5240                       		addq.w	#1,d0
00018098                            
00018098                            loc_1800A:
00018098 6600                       		bne.s	loc_1801A
0001809A 317C FE80 0012             		move.w	#-$180,$12(a0)
000180A0 5428 0025                  		addq.b	#2,$25(a0)
000180A4 4228 003F                  		clr.b	$3F(a0)
000180A8                            
000180A8                            loc_1801A:
000180A8 6000 FF1C                  		bra.w	loc_17F38
000180AC                            ; ===========================================================================
000180AC                            
000180AC                            loc_1801E:				; XREF: Obj77_ShipIndex
000180AC 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000180B2 6E00                       		bgt.s	loc_1804E
000180B4 317C 0100 0038             		move.w	#$100,$38(a0)
000180BA 317C 0140 0010             		move.w	#$140,$10(a0)
000180C0 317C FF80 0012             		move.w	#-$80,$12(a0)
000180C6 4A28 003D                  		tst.b	$3D(a0)
000180CA 6700                       		beq.s	loc_18046
000180CC E1E8 0010                  		asl	$10(a0)
000180D0 E1E8 0012                  		asl	$12(a0)
000180D4                            
000180D4                            loc_18046:
000180D4 5428 0025                  		addq.b	#2,$25(a0)
000180D8 6000 FEEC                  		bra.w	loc_17F38
000180DC                            ; ===========================================================================
000180DC                            
000180DC                            loc_1804E:
000180DC 08E8 0000 0022             		bset	#0,$22(a0)
000180E2 5428 003F                  		addq.b	#2,$3F(a0)
000180E6 1028 003F                  		move.b	$3F(a0),d0
000180EA 4EB9 0000 29DA             		jsr	(CalcSine).l
000180F0 4A41                       		tst.w	d1
000180F2 6A00                       		bpl.s	loc_1806C
000180F4 08A8 0000 0022             		bclr	#0,$22(a0)
000180FA                            
000180FA                            loc_1806C:
000180FA E840                       		asr.w	#4,d0
000180FC 4840                       		swap	d0
000180FE 4240                       		clr.w	d0
00018100 D0A8 0030                  		add.l	$30(a0),d0
00018104 4840                       		swap	d0
00018106 3140 0008                  		move.w	d0,8(a0)
0001810A 3028 0012                  		move.w	$12(a0),d0
0001810E 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018112 9268 000C                  		sub.w	$C(a0),d1
00018116 6500                       		bcs.s	loc_180A2
00018118 0441 0048                  		subi.w	#$48,d1
0001811C 6500                       		bcs.s	loc_180A2
0001811E E240                       		asr.w	#1,d0
00018120 0441 0028                  		subi.w	#$28,d1
00018124 6500                       		bcs.s	loc_180A2
00018126 E240                       		asr.w	#1,d0
00018128 0441 0028                  		subi.w	#$28,d1
0001812C 6500                       		bcs.s	loc_180A2
0001812E 7000                       		moveq	#0,d0
00018130                            
00018130                            loc_180A2:
00018130 48C0                       		ext.l	d0
00018132 E180                       		asl.l	#8,d0
00018134 4A28 003D                  		tst.b	$3D(a0)
00018138 6700                       		beq.s	loc_180AE
0001813A D080                       		add.l	d0,d0
0001813C                            
0001813C                            loc_180AE:
0001813C D1A8 0038                  		add.l	d0,$38(a0)
00018140 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018146 6000 FE8E                  		bra.w	loc_17F48
0001814A                            ; ===========================================================================
0001814A                            
0001814A                            loc_180BC:				; XREF: Obj77_ShipIndex
0001814A 70FE                       		moveq	#-2,d0
0001814C 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00018152 6500                       		bcs.s	loc_180D2
00018154 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001815A 4268 0010                  		clr.w	$10(a0)
0001815E 5240                       		addq.w	#1,d0
00018160                            
00018160                            loc_180D2:
00018160 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00018166 6E00                       		bgt.s	loc_180E6
00018168 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001816E 4268 0012                  		clr.w	$12(a0)
00018172 5240                       		addq.w	#1,d0
00018174                            
00018174                            loc_180E6:
00018174 6600                       		bne.s	loc_180F2
00018176 5428 0025                  		addq.b	#2,$25(a0)
0001817A 08A8 0000 0022             		bclr	#0,$22(a0)
00018180                            
00018180                            loc_180F2:
00018180 6000 FE44                  		bra.w	loc_17F38
00018184                            ; ===========================================================================
00018184                            
00018184                            loc_180F6:				; XREF: Obj77_ShipIndex
00018184 4A28 003D                  		tst.b	$3D(a0)
00018188 6600                       		bne.s	loc_18112
0001818A 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00018190 6D00                       		blt.s	loc_18126
00018192 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018198 6E00                       		bgt.s	loc_18126
0001819A 117C 0032 003C             		move.b	#$32,$3C(a0)
000181A0                            
000181A0                            loc_18112:
000181A0 303C 0082                  		move.w	#$82,d0
000181A4 4EB9 0000 1396             		jsr	(PlaySound).l	; play LZ music
000181AA 08E8 0000 0022             		bset	#0,$22(a0)
000181B0 5428 0025                  		addq.b	#2,$25(a0)
000181B4                            
000181B4                            loc_18126:
000181B4 6000 FE10                  		bra.w	loc_17F38
000181B8                            ; ===========================================================================
000181B8                            
000181B8                            loc_1812A:				; XREF: Obj77_ShipIndex
000181B8 4A28 003D                  		tst.b	$3D(a0)
000181BC 6600                       		bne.s	loc_18136
000181BE 5328 003C                  		subq.b	#1,$3C(a0)
000181C2 6600                       		bne.s	loc_1814E
000181C4                            
000181C4                            loc_18136:
000181C4 4228 003C                  		clr.b	$3C(a0)
000181C8 317C 0400 0010             		move.w	#$400,$10(a0)
000181CE 317C FFC0 0012             		move.w	#-$40,$12(a0)
000181D4 4228 003D                  		clr.b	$3D(a0)
000181D8 5428 0025                  		addq.b	#2,$25(a0)
000181DC                            
000181DC                            loc_1814E:
000181DC 6000 FDE8                  		bra.w	loc_17F38
000181E0                            ; ===========================================================================
000181E0                            
000181E0                            loc_18152:				; XREF: Obj77_ShipIndex
000181E0 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
000181E6 6400                       		bcc.s	loc_18160
000181E8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000181EC 6000                       		bra.s	loc_18166
000181EE                            ; ===========================================================================
000181EE                            
000181EE                            loc_18160:
000181EE 4A28 0001                  		tst.b	1(a0)
000181F2 6A00                       		bpl.s	Obj77_ShipDel
000181F4                            
000181F4                            loc_18166:
000181F4 6000 FDD0                  		bra.w	loc_17F38
000181F8                            ; ===========================================================================
000181F8                            
000181F8                            Obj77_ShipDel:
000181F8 4EF9 0000 D708             		jmp	DeleteObject
000181FE                            ; ===========================================================================
000181FE                            
000181FE                            Obj77_FaceMain:				; XREF: Obj77_Index
000181FE 2268 0034                  		movea.l	$34(a0),a1
00018202 1011                       		move.b	(a1),d0
00018204 B010                       		cmp.b	(a0),d0
00018206 6600                       		bne.s	Obj77_FaceDel
00018208 7000                       		moveq	#0,d0
0001820A 1029 0025                  		move.b	$25(a1),d0
0001820E 7201                       		moveq	#1,d1
00018210 4A28 003D                  		tst.b	$3D(a0)
00018214 6700                       		beq.s	loc_1818C
00018216 720A                       		moveq	#$A,d1
00018218 6000                       		bra.s	loc_181A0
0001821A                            ; ===========================================================================
0001821A                            
0001821A                            loc_1818C:
0001821A 4A29 0020                  		tst.b	$20(a1)
0001821E 6600                       		bne.s	loc_18196
00018220 7205                       		moveq	#5,d1
00018222 6000                       		bra.s	loc_181A0
00018224                            ; ===========================================================================
00018224                            
00018224                            loc_18196:
00018224 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001822A 6500                       		bcs.s	loc_181A0
0001822C 7204                       		moveq	#4,d1
0001822E                            
0001822E                            loc_181A0:
0001822E 1141 001C                  		move.b	d1,$1C(a0)
00018232 0C00 000E                  		cmpi.b	#$E,d0
00018236 6600                       		bne.s	loc_181B6
00018238 117C 0006 001C             		move.b	#6,$1C(a0)
0001823E 4A28 0001                  		tst.b	1(a0)
00018242 6A00                       		bpl.s	Obj77_FaceDel
00018244                            
00018244                            loc_181B6:
00018244 6000                       		bra.s	Obj77_Display
00018246                            ; ===========================================================================
00018246                            
00018246                            Obj77_FaceDel:
00018246 4EF9 0000 D708             		jmp	DeleteObject
0001824C                            ; ===========================================================================
0001824C                            
0001824C                            Obj77_FlameMain:			; XREF: Obj77_Index
0001824C 117C 0007 001C             		move.b	#7,$1C(a0)
00018252 2268 0034                  		movea.l	$34(a0),a1
00018256 1011                       		move.b	(a1),d0
00018258 B010                       		cmp.b	(a0),d0
0001825A 6600                       		bne.s	Obj77_FlameDel
0001825C 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00018262 6600                       		bne.s	loc_181F0
00018264 117C 000B 001C             		move.b	#$B,$1C(a0)
0001826A 4A28 0001                  		tst.b	1(a0)
0001826E 6A00                       		bpl.s	Obj77_FlameDel
00018270 6000                       		bra.s	loc_181F0
00018272                            ; ===========================================================================
00018272 4A69 0010                  		tst.w	$10(a1)
00018276 6700                       		beq.s	loc_181F0
00018278 117C 0008 001C             		move.b	#8,$1C(a0)
0001827E                            
0001827E                            loc_181F0:
0001827E 6000                       		bra.s	Obj77_Display
00018280                            ; ===========================================================================
00018280                            
00018280                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018280 4EF9 0000 D708             		jmp	DeleteObject
00018286                            ; ===========================================================================
00018286                            
00018286                            Obj77_Display:
00018286 43F9 0001 7D4C             		lea	(Ani_Eggman).l,a1
0001828C 4EB9 0000 A7F8             		jsr	AnimateSprite
00018292 2268 0034                  		movea.l	$34(a0),a1
00018296 3169 0008 0008             		move.w	8(a1),8(a0)
0001829C 3169 000C 000C             		move.w	$C(a1),$C(a0)
000182A2 1169 0022 0022             		move.b	$22(a1),$22(a0)
000182A8 7003                       		moveq	#3,d0
000182AA C028 0022                  		and.b	$22(a0),d0
000182AE 0228 00FC 0001             		andi.b	#-4,1(a0)
000182B4 8128 0001                  		or.b	d0,1(a0)
000182B8 4EF9 0000 D6CC             		jmp	DisplaySprite
000182BE                            ; ===========================================================================
000182BE                            ; ---------------------------------------------------------------------------
000182BE                            ; Object 73 - Eggman (MZ)
000182BE                            ; ---------------------------------------------------------------------------
000182BE                            
000182BE                            Obj73:					; XREF: Obj_Index
000182BE 7000                       		moveq	#0,d0
000182C0 1028 0024                  		move.b	$24(a0),d0
000182C4 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
000182C8 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
000182CC                            ; ===========================================================================
000182CC 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
000182CE 0000                       		dc.w Obj73_ShipMain-Obj73_Index
000182D0 0000                       		dc.w Obj73_FaceMain-Obj73_Index
000182D2 0000                       		dc.w Obj73_FlameMain-Obj73_Index
000182D4 0000                       		dc.w Obj73_TubeMain-Obj73_Index
000182D6                            
000182D6 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000182D9 0401 04                    		dc.b 4,	1, 4
000182DC 0607 04                    		dc.b 6,	7, 4
000182DF 0800 03                    		dc.b 8,	0, 3
000182E2                            ; ===========================================================================
000182E2                            
000182E2                            Obj73_Main:				; XREF: Obj73_Index
000182E2 3168 0008 0030             		move.w	8(a0),$30(a0)
000182E8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000182EE 117C 000F 0020             		move.b	#$F,$20(a0)
000182F4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000182FA 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
000182FE 2248                       		movea.l	a0,a1
00018300 7203                       		moveq	#3,d1
00018302 6000                       		bra.s	Obj73_LoadBoss
00018304                            ; ===========================================================================
00018304                            
00018304                            Obj73_Loop:
00018304 4EB9 0000 DB68             		jsr	SingleObjLoad2
0001830A 6600                       		bne.s	Obj73_ShipMain
0001830C 12BC 0073                  		move.b	#$73,0(a1)
00018310 3368 0008 0008             		move.w	8(a0),8(a1)
00018316 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001831C                            
0001831C                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001831C 08A8 0000 0022             		bclr	#0,$22(a0)
00018322 4229 0025                  		clr.b	$25(a1)
00018326 135A 0024                  		move.b	(a2)+,$24(a1)
0001832A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001832E 135A 0018                  		move.b	(a2)+,$18(a1)
00018332 237C 0001 7D9C 0004        		move.l	#Map_Eggman,4(a1)
0001833A 337C 0400 0002             		move.w	#$400,2(a1)
00018340 137C 0004 0001             		move.b	#4,1(a1)
00018346 137C 0020 0019             		move.b	#$20,$19(a1)
0001834C 2348 0034                  		move.l	a0,$34(a1)
00018350 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018354                            
00018354                            Obj73_ShipMain:
00018354 7000                       		moveq	#0,d0
00018356 1028 0025                  		move.b	$25(a0),d0
0001835A 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001835E 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018362 43F9 0001 7D4C             		lea	(Ani_Eggman).l,a1
00018368 4EB9 0000 A7F8             		jsr	AnimateSprite
0001836E 7003                       		moveq	#3,d0
00018370 C028 0022                  		and.b	$22(a0),d0
00018374 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001837A 8128 0001                  		or.b	d0,1(a0)
0001837E 4EF9 0000 D6CC             		jmp	DisplaySprite
00018384                            ; ===========================================================================
00018384 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018386 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018388 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001838A 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001838C 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001838E                            ; ===========================================================================
0001838E                            
0001838E                            loc_18302:				; XREF: Obj73_ShipIndex
0001838E 1028 003F                  		move.b	$3F(a0),d0
00018392 5428 003F                  		addq.b	#2,$3F(a0)
00018396 4EB9 0000 29DA             		jsr	(CalcSine).l
0001839C E440                       		asr.w	#2,d0
0001839E 3140 0012                  		move.w	d0,$12(a0)
000183A2 317C FF00 0010             		move.w	#-$100,$10(a0)
000183A8 6100 F592                  		bsr.w	BossMove
000183AC 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000183B2 6600                       		bne.s	loc_18334
000183B4 5428 0025                  		addq.b	#2,$25(a0)
000183B8 4228 0028                  		clr.b	$28(a0)
000183BC 42A8 0010                  		clr.l	$10(a0)
000183C0                            
000183C0                            loc_18334:
000183C0 4EB9 0000 29B4             		jsr	(RandomNumber).l
000183C6 1140 0034                  		move.b	d0,$34(a0)
000183CA                            
000183CA                            loc_1833E:
000183CA 3168 0038 000C             		move.w	$38(a0),$C(a0)
000183D0 3168 0030 0008             		move.w	$30(a0),8(a0)
000183D6 0C28 0004 0025             		cmpi.b	#4,$25(a0)
000183DC 6400                       		bcc.s	locret_18390
000183DE 4A28 0022                  		tst.b	$22(a0)
000183E2 6B00                       		bmi.s	loc_18392
000183E4 4A28 0020                  		tst.b	$20(a0)
000183E8 6600                       		bne.s	locret_18390
000183EA 4A28 003E                  		tst.b	$3E(a0)
000183EE 6600                       		bne.s	loc_18374
000183F0 117C 0028 003E             		move.b	#$28,$3E(a0)
000183F6 303C 00AC                  		move.w	#$AC,d0
000183FA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018400                            
00018400                            loc_18374:
00018400 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018404 7000                       		moveq	#0,d0
00018406 4A51                       		tst.w	(a1)
00018408 6600                       		bne.s	loc_18382
0001840A 303C 0EEE                  		move.w	#$EEE,d0
0001840E                            
0001840E                            loc_18382:
0001840E 3280                       		move.w	d0,(a1)
00018410 5328 003E                  		subq.b	#1,$3E(a0)
00018414 6600                       		bne.s	locret_18390
00018416 117C 000F 0020             		move.b	#$F,$20(a0)
0001841C                            
0001841C                            locret_18390:
0001841C 4E75                       		rts	
0001841E                            ; ===========================================================================
0001841E                            
0001841E                            loc_18392:				; XREF: loc_1833E
0001841E 7064                       		moveq	#100,d0
00018420 6100 0000                  		bsr.w	AddPoints
00018424 117C 0004 0025             		move.b	#4,$25(a0)
0001842A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018430 4268 0010                  		clr.w	$10(a0)
00018434 4E75                       		rts	
00018436                            ; ===========================================================================
00018436                            
00018436                            loc_183AA:				; XREF: Obj73_ShipIndex
00018436 7000                       		moveq	#0,d0
00018438 1028 0028                  		move.b	$28(a0),d0
0001843C 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018440 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018444 0228 0006 0028             		andi.b	#6,$28(a0)
0001844A 6000 FF7E                  		bra.w	loc_1833E
0001844E                            ; ===========================================================================
0001844E 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018450 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018452 0000                       		dc.w loc_183CA-off_183C2
00018454 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018456                            ; ===========================================================================
00018456                            
00018456                            loc_183CA:				; XREF: off_183C2
00018456 4A68 0010                  		tst.w	$10(a0)
0001845A 6600                       		bne.s	loc_183FE
0001845C 7040                       		moveq	#$40,d0
0001845E 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018464 6700                       		beq.s	loc_183E6
00018466 6500                       		bcs.s	loc_183DE
00018468 4440                       		neg.w	d0
0001846A                            
0001846A                            loc_183DE:
0001846A 3140 0012                  		move.w	d0,$12(a0)
0001846E 6000 F4CC                  		bra.w	BossMove
00018472                            ; ===========================================================================
00018472                            
00018472                            loc_183E6:
00018472 317C 0200 0010             		move.w	#$200,$10(a0)
00018478 317C 0100 0012             		move.w	#$100,$12(a0)
0001847E 0828 0000 0022             		btst	#0,$22(a0)
00018484 6600                       		bne.s	loc_183FE
00018486 4468 0010                  		neg.w	$10(a0)
0001848A                            
0001848A                            loc_183FE:
0001848A 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018490 6400                       		bcc.s	Obj73_MakeLava
00018492 6100 F4A8                  		bsr.w	BossMove
00018496 5968 0012                  		subq.w	#4,$12(a0)
0001849A                            
0001849A                            Obj73_MakeLava:
0001849A 5328 0034                  		subq.b	#1,$34(a0)
0001849E 6400                       		bcc.s	loc_1845C
000184A0 4EB9 0000 DB52             		jsr	SingleObjLoad
000184A6 6600                       		bne.s	loc_1844A
000184A8 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000184AC 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
000184B2 4EB9 0000 29B4             		jsr	(RandomNumber).l
000184B8 0280 0000 FFFF             		andi.l	#$FFFF,d0
000184BE 80FC 0050                  		divu.w	#$50,d0
000184C2 4840                       		swap	d0
000184C4 0640 1878                  		addi.w	#$1878,d0
000184C8 3340 0008                  		move.w	d0,8(a1)
000184CC EE09                       		lsr.b	#7,d1
000184CE 337C 00FF 0028             		move.w	#$FF,$28(a1)
000184D4                            
000184D4                            loc_1844A:
000184D4 4EB9 0000 29B4             		jsr	(RandomNumber).l
000184DA 0200 001F                  		andi.b	#$1F,d0
000184DE 0600 0040                  		addi.b	#$40,d0
000184E2 1140 0034                  		move.b	d0,$34(a0)
000184E6                            
000184E6                            loc_1845C:
000184E6 0828 0000 0022             		btst	#0,$22(a0)
000184EC 6700                       		beq.s	loc_18474
000184EE 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000184F4 6D00                       		blt.s	locret_1849C
000184F6 317C 1910 0030             		move.w	#$1910,$30(a0)
000184FC 6000                       		bra.s	loc_18482
000184FE                            ; ===========================================================================
000184FE                            
000184FE                            loc_18474:
000184FE 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018504 6E00                       		bgt.s	locret_1849C
00018506 317C 1830 0030             		move.w	#$1830,$30(a0)
0001850C                            
0001850C                            loc_18482:
0001850C 4268 0010                  		clr.w	$10(a0)
00018510 317C FE80 0012             		move.w	#-$180,$12(a0)
00018516 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001851C 6400                       		bcc.s	loc_18498
0001851E 4468 0012                  		neg.w	$12(a0)
00018522                            
00018522                            loc_18498:
00018522 5428 0028                  		addq.b	#2,$28(a0)
00018526                            
00018526                            locret_1849C:
00018526 4E75                       		rts	
00018528                            ; ===========================================================================
00018528                            
00018528                            Obj73_MakeLava2:			; XREF: off_183C2
00018528 6100 F412                  		bsr.w	BossMove
0001852C 3028 0038                  		move.w	$38(a0),d0
00018530 0440 022C                  		subi.w	#$22C,d0
00018534 6E00                       		bgt.s	locret_184F4
00018536 303C 022C                  		move.w	#$22C,d0
0001853A 4A68 0012                  		tst.w	$12(a0)
0001853E 6700                       		beq.s	loc_184EA
00018540 4268 0012                  		clr.w	$12(a0)
00018544 317C 0050 003C             		move.w	#$50,$3C(a0)
0001854A 0868 0000 0022             		bchg	#0,$22(a0)
00018550 4EB9 0000 DB52             		jsr	SingleObjLoad
00018556 6600                       		bne.s	loc_184EA
00018558 3368 0030 0008             		move.w	$30(a0),8(a1)
0001855E 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018564 0669 0018 000C             		addi.w	#$18,$C(a1)
0001856A 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001856E 137C 0001 0028             		move.b	#1,$28(a1)
00018574                            
00018574                            loc_184EA:
00018574 5368 003C                  		subq.w	#1,$3C(a0)
00018578 6600                       		bne.s	locret_184F4
0001857A 5428 0028                  		addq.b	#2,$28(a0)
0001857E                            
0001857E                            locret_184F4:
0001857E 4E75                       		rts	
00018580                            ; ===========================================================================
00018580                            
00018580                            loc_184F6:				; XREF: Obj73_ShipIndex
00018580 5368 003C                  		subq.w	#1,$3C(a0)
00018584 6B00                       		bmi.s	loc_18500
00018586 6000 F372                  		bra.w	BossDefeated
0001858A                            ; ===========================================================================
0001858A                            
0001858A                            loc_18500:
0001858A 08E8 0000 0022             		bset	#0,$22(a0)
00018590 08A8 0007 0022             		bclr	#7,$22(a0)
00018596 4268 0010                  		clr.w	$10(a0)
0001859A 5428 0025                  		addq.b	#2,$25(a0)
0001859E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000185A4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000185A8 6600                       		bne.s	locret_1852A
000185AA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000185B0 4268 0012                  		clr.w	$12(a0)
000185B4                            
000185B4                            locret_1852A:
000185B4 4E75                       		rts	
000185B6                            ; ===========================================================================
000185B6                            
000185B6                            loc_1852C:				; XREF: Obj73_ShipIndex
000185B6 5268 003C                  		addq.w	#1,$3C(a0)
000185BA 6700                       		beq.s	loc_18544
000185BC 6A00                       		bpl.s	loc_1854E
000185BE 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
000185C4 6400                       		bcc.s	loc_18544
000185C6 0668 0018 0012             		addi.w	#$18,$12(a0)
000185CC 6000                       		bra.s	loc_1857A
000185CE                            ; ===========================================================================
000185CE                            
000185CE                            loc_18544:
000185CE 4268 0012                  		clr.w	$12(a0)
000185D2 4268 003C                  		clr.w	$3C(a0)
000185D6 6000                       		bra.s	loc_1857A
000185D8                            ; ===========================================================================
000185D8                            
000185D8                            loc_1854E:
000185D8 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000185DE 6500                       		bcs.s	loc_18566
000185E0 6700                       		beq.s	loc_1856C
000185E2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000185E8 6500                       		bcs.s	loc_1857A
000185EA 5428 0025                  		addq.b	#2,$25(a0)
000185EE 6000                       		bra.s	loc_1857A
000185F0                            ; ===========================================================================
000185F0                            
000185F0                            loc_18566:
000185F0 5168 0012                  		subq.w	#8,$12(a0)
000185F4 6000                       		bra.s	loc_1857A
000185F6                            ; ===========================================================================
000185F6                            
000185F6                            loc_1856C:
000185F6 4268 0012                  		clr.w	$12(a0)
000185FA 303C 0083                  		move.w	#$83,d0
000185FE 4EB9 0000 1396             		jsr	(PlaySound).l	; play MZ music
00018604                            
00018604                            loc_1857A:
00018604 6100 F336                  		bsr.w	BossMove
00018608 6000 FDC0                  		bra.w	loc_1833E
0001860C                            ; ===========================================================================
0001860C                            
0001860C                            loc_18582:				; XREF: Obj73_ShipIndex
0001860C 317C 0500 0010             		move.w	#$500,$10(a0)
00018612 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018618 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001861E 6400                       		bcc.s	loc_1859C
00018620 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018624 6000                       		bra.s	loc_185A2
00018626                            ; ===========================================================================
00018626                            
00018626                            loc_1859C:
00018626 4A28 0001                  		tst.b	1(a0)
0001862A 6A00                       		bpl.s	Obj73_ShipDel
0001862C                            
0001862C                            loc_185A2:
0001862C 6100 F30E                  		bsr.w	BossMove
00018630 6000 FD98                  		bra.w	loc_1833E
00018634                            ; ===========================================================================
00018634                            
00018634                            Obj73_ShipDel:
00018634 4EF9 0000 D708             		jmp	DeleteObject
0001863A                            ; ===========================================================================
0001863A                            
0001863A                            Obj73_FaceMain:				; XREF: Obj73_Index
0001863A 7000                       		moveq	#0,d0
0001863C 7201                       		moveq	#1,d1
0001863E 2268 0034                  		movea.l	$34(a0),a1
00018642 1029 0025                  		move.b	$25(a1),d0
00018646 5540                       		subq.w	#2,d0
00018648 6600                       		bne.s	loc_185D2
0001864A 0829 0001 0028             		btst	#1,$28(a1)
00018650 6700                       		beq.s	loc_185DA
00018652 4A69 0012                  		tst.w	$12(a1)
00018656 6600                       		bne.s	loc_185DA
00018658 7204                       		moveq	#4,d1
0001865A 6000                       		bra.s	loc_185EE
0001865C                            ; ===========================================================================
0001865C                            
0001865C                            loc_185D2:
0001865C 5500                       		subq.b	#2,d0
0001865E 6B00                       		bmi.s	loc_185DA
00018660 720A                       		moveq	#$A,d1
00018662 6000                       		bra.s	loc_185EE
00018664                            ; ===========================================================================
00018664                            
00018664                            loc_185DA:
00018664 4A29 0020                  		tst.b	$20(a1)
00018668 6600                       		bne.s	loc_185E4
0001866A 7205                       		moveq	#5,d1
0001866C 6000                       		bra.s	loc_185EE
0001866E                            ; ===========================================================================
0001866E                            
0001866E                            loc_185E4:
0001866E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018674 6500                       		bcs.s	loc_185EE
00018676 7204                       		moveq	#4,d1
00018678                            
00018678                            loc_185EE:
00018678 1141 001C                  		move.b	d1,$1C(a0)
0001867C 5900                       		subq.b	#4,d0
0001867E 6600                       		bne.s	loc_18602
00018680 117C 0006 001C             		move.b	#6,$1C(a0)
00018686 4A28 0001                  		tst.b	1(a0)
0001868A 6A00                       		bpl.s	Obj73_FaceDel
0001868C                            
0001868C                            loc_18602:
0001868C 6000                       		bra.s	Obj73_Display
0001868E                            ; ===========================================================================
0001868E                            
0001868E                            Obj73_FaceDel:
0001868E 4EF9 0000 D708             		jmp	DeleteObject
00018694                            ; ===========================================================================
00018694                            
00018694                            Obj73_FlameMain:			; XREF: Obj73_Index
00018694 117C 0007 001C             		move.b	#7,$1C(a0)
0001869A 2268 0034                  		movea.l	$34(a0),a1
0001869E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000186A4 6D00                       		blt.s	loc_1862A
000186A6 117C 000B 001C             		move.b	#$B,$1C(a0)
000186AC 4A28 0001                  		tst.b	1(a0)
000186B0 6A00                       		bpl.s	Obj73_FlameDel
000186B2 6000                       		bra.s	loc_18636
000186B4                            ; ===========================================================================
000186B4                            
000186B4                            loc_1862A:
000186B4 4A69 0010                  		tst.w	$10(a1)
000186B8 6700                       		beq.s	loc_18636
000186BA 117C 0008 001C             		move.b	#8,$1C(a0)
000186C0                            
000186C0                            loc_18636:
000186C0 6000                       		bra.s	Obj73_Display
000186C2                            ; ===========================================================================
000186C2                            
000186C2                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
000186C2 4EF9 0000 D708             		jmp	DeleteObject
000186C8                            ; ===========================================================================
000186C8                            
000186C8                            Obj73_Display:
000186C8 43F9 0001 7D4C             		lea	(Ani_Eggman).l,a1
000186CE 4EB9 0000 A7F8             		jsr	AnimateSprite
000186D4                            
000186D4                            loc_1864A:
000186D4 2268 0034                  		movea.l	$34(a0),a1
000186D8 3169 0008 0008             		move.w	8(a1),8(a0)
000186DE 3169 000C 000C             		move.w	$C(a1),$C(a0)
000186E4 1169 0022 0022             		move.b	$22(a1),$22(a0)
000186EA 7003                       		moveq	#3,d0
000186EC C028 0022                  		and.b	$22(a0),d0
000186F0 0228 00FC 0001             		andi.b	#-4,1(a0)
000186F6 8128 0001                  		or.b	d0,1(a0)
000186FA 4EF9 0000 D6CC             		jmp	DisplaySprite
00018700                            ; ===========================================================================
00018700                            
00018700                            Obj73_TubeMain:				; XREF: Obj73_Index
00018700 2268 0034                  		movea.l	$34(a0),a1
00018704 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001870A 6600                       		bne.s	loc_18688
0001870C 4A28 0001                  		tst.b	1(a0)
00018710 6A00                       		bpl.s	Obj73_TubeDel
00018712                            
00018712                            loc_18688:
00018712 217C 0001 7E64 0004        		move.l	#Map_BossItems,4(a0)
0001871A 317C 246C 0002             		move.w	#$246C,2(a0)
00018720 117C 0004 001A             		move.b	#4,$1A(a0)
00018726 60AC                       		bra.s	loc_1864A
00018728                            ; ===========================================================================
00018728                            
00018728                            Obj73_TubeDel:
00018728 4EF9 0000 D708             		jmp	DeleteObject
0001872E                            ; ===========================================================================
0001872E                            ; ---------------------------------------------------------------------------
0001872E                            ; Object 74 - lava that	Eggman drops (MZ)
0001872E                            ; ---------------------------------------------------------------------------
0001872E                            
0001872E                            Obj74:					; XREF: Obj_Index
0001872E 7000                       		moveq	#0,d0
00018730 1028 0024                  		move.b	$24(a0),d0
00018734 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018738 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001873C 4EF9 0000 D6CC             		jmp	DisplaySprite
00018742                            ; ===========================================================================
00018742 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018744 0000                       		dc.w Obj74_Action-Obj74_Index
00018746 0000                       		dc.w loc_18886-Obj74_Index
00018748 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001874A                            ; ===========================================================================
0001874A                            
0001874A                            Obj74_Main:				; XREF: Obj74_Index
0001874A 117C 0008 0016             		move.b	#8,$16(a0)
00018750 117C 0008 0017             		move.b	#8,$17(a0)
00018756 217C 0000 B44A 0004        		move.l	#Map_obj14,4(a0)
0001875E 317C 0345 0002             		move.w	#$345,2(a0)
00018764 117C 0004 0001             		move.b	#4,1(a0)
0001876A 117C 0005 0018             		move.b	#5,$18(a0)
00018770 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018776 117C 0008 0019             		move.b	#8,$19(a0)
0001877C 5428 0024                  		addq.b	#2,$24(a0)
00018780 4A28 0028                  		tst.b	$28(a0)
00018784 6600                       		bne.s	loc_1870A
00018786 117C 008B 0020             		move.b	#$8B,$20(a0)
0001878C 5428 0024                  		addq.b	#2,$24(a0)
00018790 6000 0000                  		bra.w	loc_18886
00018794                            ; ===========================================================================
00018794                            
00018794                            loc_1870A:
00018794 117C 001E 0029             		move.b	#$1E,$29(a0)
0001879A 303C 00AE                  		move.w	#$AE,d0
0001879E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava sound
000187A4                            
000187A4                            Obj74_Action:				; XREF: Obj74_Index
000187A4 7000                       		moveq	#0,d0
000187A6 1028 0025                  		move.b	$25(a0),d0
000187AA 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
000187AE 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
000187B2 4EB9 0000 D6A6             		jsr	SpeedToPos
000187B8 43F9 0000 E586             		lea	(Ani_obj14).l,a1
000187BE 4EB9 0000 A7F8             		jsr	AnimateSprite
000187C4 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
000187CA 6200                       		bhi.s	Obj74_Delete
000187CC 4E75                       		rts	
000187CE                            ; ===========================================================================
000187CE                            
000187CE                            Obj74_Delete:
000187CE 4EF9 0000 D708             		jmp	DeleteObject
000187D4                            ; ===========================================================================
000187D4 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
000187D6 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
000187D8 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
000187DA 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
000187DC                            ; ===========================================================================
000187DC                            
000187DC                            Obj74_Drop:				; XREF: Obj74_Index2
000187DC 08E8 0001 0022             		bset	#1,$22(a0)
000187E2 5328 0029                  		subq.b	#1,$29(a0)
000187E6 6A00                       		bpl.s	locret_18780
000187E8 117C 008B 0020             		move.b	#$8B,$20(a0)
000187EE 4228 0028                  		clr.b	$28(a0)
000187F2 0668 0018 0012             		addi.w	#$18,$12(a0)
000187F8 08A8 0001 0022             		bclr	#1,$22(a0)
000187FE 6100 C6C6                  		bsr.w	ObjHitFloor
00018802 4A41                       		tst.w	d1
00018804 6A00                       		bpl.s	locret_18780
00018806 5428 0025                  		addq.b	#2,$25(a0)
0001880A                            
0001880A                            locret_18780:
0001880A 4E75                       		rts	
0001880C                            ; ===========================================================================
0001880C                            
0001880C                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001880C 5568 000C                  		subq.w	#2,$C(a0)
00018810 08E8 0007 0002             		bset	#7,2(a0)
00018816 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001881C 4268 0012                  		clr.w	$12(a0)
00018820 3168 0008 0030             		move.w	8(a0),$30(a0)
00018826 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001882C 117C 0003 0029             		move.b	#3,$29(a0)
00018832 4EB9 0000 DB68             		jsr	SingleObjLoad2
00018838 6600                       		bne.s	loc_187CA
0001883A 47D1                       		lea	(a1),a3
0001883C 45D0                       		lea	(a0),a2
0001883E 7003                       		moveq	#3,d0
00018840                            
00018840                            Obj74_Loop:
00018840 26DA                       		move.l	(a2)+,(a3)+
00018842 26DA                       		move.l	(a2)+,(a3)+
00018844 26DA                       		move.l	(a2)+,(a3)+
00018846 26DA                       		move.l	(a2)+,(a3)+
00018848 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001884C                            
0001884C 4469 0010                  		neg.w	$10(a1)
00018850 5429 0025                  		addq.b	#2,$25(a1)
00018854                            
00018854                            loc_187CA:
00018854 5428 0025                  		addq.b	#2,$25(a0)
00018858 4E75                       		rts	
0001885A                            
0001885A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001885A                            
0001885A                            
0001885A                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001885A 4EB9 0000 DB68             		jsr	SingleObjLoad2
00018860 6600                       		bne.s	locret_187EE
00018862 3368 0008 0008             		move.w	8(a0),8(a1)
00018868 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001886E 12BC 0074                  		move.b	#$74,(a1)
00018872 337C 0067 0028             		move.w	#$67,$28(a1)
00018878                            
00018878                            locret_187EE:
00018878 4E75                       		rts	
0001887A                            ; End of function Obj74_Duplicate2
0001887A                            
0001887A                            ; ===========================================================================
0001887A                            
0001887A                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001887A 6100 C64A                  		bsr.w	ObjHitFloor
0001887E 4A41                       		tst.w	d1
00018880 6A00                       		bpl.s	loc_18826
00018882 3028 0008                  		move.w	8(a0),d0
00018886 0C40 1940                  		cmpi.w	#$1940,d0
0001888A 6E00                       		bgt.s	loc_1882C
0001888C 3228 0030                  		move.w	$30(a0),d1
00018890 B240                       		cmp.w	d0,d1
00018892 6700                       		beq.s	loc_1881E
00018894 0240 0010                  		andi.w	#$10,d0
00018898 0241 0010                  		andi.w	#$10,d1
0001889C B240                       		cmp.w	d0,d1
0001889E 6700                       		beq.s	loc_1881E
000188A0 61B8                       		bsr.s	Obj74_Duplicate2
000188A2 3168 0008 0032             		move.w	8(a0),$32(a0)
000188A8                            
000188A8                            loc_1881E:
000188A8 3168 0008 0030             		move.w	8(a0),$30(a0)
000188AE 4E75                       		rts	
000188B0                            ; ===========================================================================
000188B0                            
000188B0                            loc_18826:
000188B0 5428 0025                  		addq.b	#2,$25(a0)
000188B4 4E75                       		rts	
000188B6                            ; ===========================================================================
000188B6                            
000188B6                            loc_1882C:
000188B6 5428 0024                  		addq.b	#2,$24(a0)
000188BA 4E75                       		rts	
000188BC                            ; ===========================================================================
000188BC                            
000188BC                            Obj74_FallEdge:				; XREF: Obj74_Index2
000188BC 08A8 0001 0022             		bclr	#1,$22(a0)
000188C2 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
000188C8 3028 0008                  		move.w	8(a0),d0
000188CC 9068 0032                  		sub.w	$32(a0),d0
000188D0 6A00                       		bpl.s	loc_1884A
000188D2 4440                       		neg.w	d0
000188D4                            
000188D4                            loc_1884A:
000188D4 0C40 0012                  		cmpi.w	#$12,d0
000188D8 6600                       		bne.s	loc_18856
000188DA 08A8 0007 0002             		bclr	#7,2(a0)
000188E0                            
000188E0                            loc_18856:
000188E0 6100 C5E4                  		bsr.w	ObjHitFloor
000188E4 4A41                       		tst.w	d1
000188E6 6A00                       		bpl.s	locret_1887E
000188E8 5328 0029                  		subq.b	#1,$29(a0)
000188EC 6700                       		beq.s	Obj74_Delete2
000188EE 4268 0012                  		clr.w	$12(a0)
000188F2 3168 0032 0008             		move.w	$32(a0),8(a0)
000188F8 3168 0038 000C             		move.w	$38(a0),$C(a0)
000188FE 08E8 0007 0002             		bset	#7,2(a0)
00018904 5528 0025                  		subq.b	#2,$25(a0)
00018908                            
00018908                            locret_1887E:
00018908 4E75                       		rts	
0001890A                            ; ===========================================================================
0001890A                            
0001890A                            Obj74_Delete2:
0001890A 4EF9 0000 D708             		jmp	DeleteObject
00018910                            ; ===========================================================================
00018910                            
00018910                            loc_18886:				; XREF: Obj74_Index
00018910 08E8 0007 0002             		bset	#7,2(a0)
00018916 5328 0029                  		subq.b	#1,$29(a0)
0001891A 6600                       		bne.s	Obj74_Animate
0001891C 117C 0001 001C             		move.b	#1,$1C(a0)
00018922 5968 000C                  		subq.w	#4,$C(a0)
00018926 4228 0020                  		clr.b	$20(a0)
0001892A                            
0001892A                            Obj74_Animate:
0001892A 43F9 0000 E586             		lea	(Ani_obj14).l,a1
00018930 4EF9 0000 A7F8             		jmp	AnimateSprite
00018936                            ; ===========================================================================
00018936                            
00018936                            Obj74_Delete3:				; XREF: Obj74_Index
00018936 4EF9 0000 D708             		jmp	DeleteObject
0001893C                            ; ===========================================================================
0001893C                            
0001893C                            Obj7A_Delete:
0001893C 4EF9 0000 D708             		jmp	DeleteObject
00018942                            ; ===========================================================================
00018942                            ; ---------------------------------------------------------------------------
00018942                            ; Object 7A - Eggman (SLZ)
00018942                            ; ---------------------------------------------------------------------------
00018942                            
00018942                            Obj7A:					; XREF: Obj_Index
00018942 7000                       		moveq	#0,d0
00018944 1028 0024                  		move.b	$24(a0),d0
00018948 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001894C 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018950                            ; ===========================================================================
00018950 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018952 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018954 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018956 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018958 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001895A                            
0001895A 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001895D 0401 04                    		dc.b 4,	1, 4
00018960 0607 04                    		dc.b 6,	7, 4
00018963 0800 03                    		dc.b 8,	0, 3
00018966                            ; ===========================================================================
00018966                            
00018966                            Obj7A_Main:				; XREF: Obj7A_Index
00018966 317C 2188 0008             		move.w	#$2188,8(a0)
0001896C 317C 0228 000C             		move.w	#$228,$C(a0)
00018972 3168 0008 0030             		move.w	8(a0),$30(a0)
00018978 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001897E 117C 000F 0020             		move.b	#$F,$20(a0)
00018984 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001898A 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001898E 2248                       		movea.l	a0,a1
00018990 7203                       		moveq	#3,d1
00018992 6000                       		bra.s	Obj7A_LoadBoss
00018994                            ; ===========================================================================
00018994                            
00018994                            Obj7A_Loop:
00018994 4EB9 0000 DB68             		jsr	SingleObjLoad2
0001899A 6600                       		bne.s	loc_1895C
0001899C 12BC 007A                  		move.b	#$7A,0(a1)
000189A0 3368 0008 0008             		move.w	8(a0),8(a1)
000189A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000189AC                            
000189AC                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
000189AC 08A8 0000 0022             		bclr	#0,$22(a0)
000189B2 4229 0025                  		clr.b	$25(a1)
000189B6 135A 0024                  		move.b	(a2)+,$24(a1)
000189BA 135A 001C                  		move.b	(a2)+,$1C(a1)
000189BE 135A 0018                  		move.b	(a2)+,$18(a1)
000189C2 237C 0001 7D9C 0004        		move.l	#Map_Eggman,4(a1)
000189CA 337C 0400 0002             		move.w	#$400,2(a1)
000189D0 137C 0004 0001             		move.b	#4,1(a1)
000189D6 137C 0020 0019             		move.b	#$20,$19(a1)
000189DC 2348 0034                  		move.l	a0,$34(a1)
000189E0 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
000189E4                            
000189E4                            loc_1895C:
000189E4 43F8 D040                  		lea	($FFFFD040).w,a1
000189E8 45E8 002A                  		lea	$2A(a0),a2
000189EC 705E                       		moveq	#$5E,d0
000189EE 723E                       		moveq	#$3E,d1
000189F0                            
000189F0                            loc_18968:
000189F0 B011                       		cmp.b	(a1),d0
000189F2 6600                       		bne.s	loc_18974
000189F4 4A29 0028                  		tst.b	$28(a1)
000189F8 6700                       		beq.s	loc_18974
000189FA 34C9                       		move.w	a1,(a2)+
000189FC                            
000189FC                            loc_18974:
000189FC D2FC 0040                  		adda.w	#$40,a1
00018A00 51C9 FFEE                  		dbf	d1,loc_18968
00018A04                            
00018A04                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018A04 7000                       		moveq	#0,d0
00018A06 1028 0025                  		move.b	$25(a0),d0
00018A0A 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018A0E 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018A12 43F9 0001 7D4C             		lea	(Ani_Eggman).l,a1
00018A18 4EB9 0000 A7F8             		jsr	AnimateSprite
00018A1E 7003                       		moveq	#3,d0
00018A20 C028 0022                  		and.b	$22(a0),d0
00018A24 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018A2A 8128 0001                  		or.b	d0,1(a0)
00018A2E 4EF9 0000 D6CC             		jmp	DisplaySprite
00018A34                            ; ===========================================================================
00018A34 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018A36 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018A38 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018A3A 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018A3C 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018A3E 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018A40                            ; ===========================================================================
00018A40                            
00018A40                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018A40 317C FF00 0010             		move.w	#-$100,$10(a0)
00018A46 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018A4C 6400                       		bcc.s	loc_189CA
00018A4E 5428 0025                  		addq.b	#2,$25(a0)
00018A52                            
00018A52                            loc_189CA:
00018A52 6100 EEE8                  		bsr.w	BossMove
00018A56 1028 003F                  		move.b	$3F(a0),d0
00018A5A 5428 003F                  		addq.b	#2,$3F(a0)
00018A5E 4EB9 0000 29DA             		jsr	(CalcSine).l
00018A64 EC40                       		asr.w	#6,d0
00018A66 D068 0038                  		add.w	$38(a0),d0
00018A6A 3140 000C                  		move.w	d0,$C(a0)
00018A6E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018A74 6000                       		bra.s	loc_189FE
00018A76                            ; ===========================================================================
00018A76                            
00018A76                            loc_189EE:
00018A76 6100 EEC4                  		bsr.w	BossMove
00018A7A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018A80 3168 0030 0008             		move.w	$30(a0),8(a0)
00018A86                            
00018A86                            loc_189FE:
00018A86 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018A8C 6400                       		bcc.s	locret_18A44
00018A8E 4A28 0022                  		tst.b	$22(a0)
00018A92 6B00                       		bmi.s	loc_18A46
00018A94 4A28 0020                  		tst.b	$20(a0)
00018A98 6600                       		bne.s	locret_18A44
00018A9A 4A28 003E                  		tst.b	$3E(a0)
00018A9E 6600                       		bne.s	loc_18A28
00018AA0 117C 0020 003E             		move.b	#$20,$3E(a0)
00018AA6 303C 00AC                  		move.w	#$AC,d0
00018AAA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018AB0                            
00018AB0                            loc_18A28:
00018AB0 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018AB4 7000                       		moveq	#0,d0
00018AB6 4A51                       		tst.w	(a1)
00018AB8 6600                       		bne.s	loc_18A36
00018ABA 303C 0EEE                  		move.w	#$EEE,d0
00018ABE                            
00018ABE                            loc_18A36:
00018ABE 3280                       		move.w	d0,(a1)
00018AC0 5328 003E                  		subq.b	#1,$3E(a0)
00018AC4 6600                       		bne.s	locret_18A44
00018AC6 117C 000F 0020             		move.b	#$F,$20(a0)
00018ACC                            
00018ACC                            locret_18A44:
00018ACC 4E75                       		rts	
00018ACE                            ; ===========================================================================
00018ACE                            
00018ACE                            loc_18A46:
00018ACE 7064                       		moveq	#100,d0
00018AD0 6100 0000                  		bsr.w	AddPoints
00018AD4 117C 0006 0025             		move.b	#6,$25(a0)
00018ADA 117C 0078 003C             		move.b	#$78,$3C(a0)
00018AE0 4268 0010                  		clr.w	$10(a0)
00018AE4 4E75                       		rts	
00018AE6                            ; ===========================================================================
00018AE6                            
00018AE6                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00018AE6 3028 0030                  		move.w	$30(a0),d0
00018AEA 317C 0200 0010             		move.w	#$200,$10(a0)
00018AF0 0828 0000 0022             		btst	#0,$22(a0)
00018AF6 6600                       		bne.s	loc_18A7C
00018AF8 4468 0010                  		neg.w	$10(a0)
00018AFC 0C40 2008                  		cmpi.w	#$2008,d0
00018B00 6E00                       		bgt.s	loc_18A88
00018B02 6000                       		bra.s	loc_18A82
00018B04                            ; ===========================================================================
00018B04                            
00018B04                            loc_18A7C:
00018B04 0C40 2138                  		cmpi.w	#$2138,d0
00018B08 6D00                       		blt.s	loc_18A88
00018B0A                            
00018B0A                            loc_18A82:
00018B0A 0868 0000 0022             		bchg	#0,$22(a0)
00018B10                            
00018B10                            loc_18A88:
00018B10 3028 0008                  		move.w	8(a0),d0
00018B14 72FF                       		moveq	#-1,d1
00018B16 7402                       		moveq	#2,d2
00018B18 45E8 002A                  		lea	$2A(a0),a2
00018B1C 7828                       		moveq	#$28,d4
00018B1E 4A68 0010                  		tst.w	$10(a0)
00018B22 6A00                       		bpl.s	loc_18A9E
00018B24 4444                       		neg.w	d4
00018B26                            
00018B26                            loc_18A9E:
00018B26 321A                       		move.w	(a2)+,d1
00018B28 2641                       		movea.l	d1,a3
00018B2A 082B 0003 0022             		btst	#3,$22(a3)
00018B30 6600                       		bne.s	loc_18AB4
00018B32 362B 0008                  		move.w	8(a3),d3
00018B36 D644                       		add.w	d4,d3
00018B38 9640                       		sub.w	d0,d3
00018B3A 6700                       		beq.s	loc_18AC0
00018B3C                            
00018B3C                            loc_18AB4:
00018B3C 51CA FFE8                  		dbf	d2,loc_18A9E
00018B40                            
00018B40 1142 0028                  		move.b	d2,$28(a0)
00018B44 6000 FF0C                  		bra.w	loc_189CA
00018B48                            ; ===========================================================================
00018B48                            
00018B48                            loc_18AC0:
00018B48 1142 0028                  		move.b	d2,$28(a0)
00018B4C 5428 0025                  		addq.b	#2,$25(a0)
00018B50 117C 0028 003C             		move.b	#$28,$3C(a0)
00018B56 6000 FEFA                  		bra.w	loc_189CA
00018B5A                            ; ===========================================================================
00018B5A                            
00018B5A                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00018B5A 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00018B60 6600                       		bne.s	loc_18B36
00018B62 70FF                       		moveq	#-1,d0
00018B64 1028 0028                  		move.b	$28(a0),d0
00018B68 4880                       		ext.w	d0
00018B6A 6B00                       		bmi.s	loc_18B40
00018B6C 5540                       		subq.w	#2,d0
00018B6E 4440                       		neg.w	d0
00018B70 D040                       		add.w	d0,d0
00018B72 43E8 002A                  		lea	$2A(a0),a1
00018B76 3031 0000                  		move.w	(a1,d0.w),d0
00018B7A 2440                       		movea.l	d0,a2
00018B7C 43F8 D040                  		lea	($FFFFD040).w,a1
00018B80 723E                       		moveq	#$3E,d1
00018B82                            
00018B82                            loc_18AFA:
00018B82 B0A9 003C                  		cmp.l	$3C(a1),d0
00018B86 6700                       		beq.s	loc_18B40
00018B88 D2FC 0040                  		adda.w	#$40,a1
00018B8C 51C9 FFF4                  		dbf	d1,loc_18AFA
00018B90                            
00018B90 2F08                       		move.l	a0,-(sp)
00018B92 41D2                       		lea	(a2),a0
00018B94 4EB9 0000 DB68             		jsr	SingleObjLoad2
00018B9A 205F                       		movea.l	(sp)+,a0
00018B9C 6600                       		bne.s	loc_18B40
00018B9E 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00018BA2 3368 0008 0008             		move.w	8(a0),8(a1)
00018BA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018BAE 0669 0020 000C             		addi.w	#$20,$C(a1)
00018BB4 136A 0022 0022             		move.b	$22(a2),$22(a1)
00018BBA 234A 003C                  		move.l	a2,$3C(a1)
00018BBE                            
00018BBE                            loc_18B36:
00018BBE 5328 003C                  		subq.b	#1,$3C(a0)
00018BC2 6700                       		beq.s	loc_18B40
00018BC4 6000 FEC0                  		bra.w	loc_189FE
00018BC8                            ; ===========================================================================
00018BC8                            
00018BC8                            loc_18B40:
00018BC8 5528 0025                  		subq.b	#2,$25(a0)
00018BCC 6000 FE84                  		bra.w	loc_189CA
00018BD0                            ; ===========================================================================
00018BD0                            
00018BD0                            loc_18B48:				; XREF: Obj7A_ShipIndex
00018BD0 5328 003C                  		subq.b	#1,$3C(a0)
00018BD4 6B00                       		bmi.s	loc_18B52
00018BD6 6000 ED22                  		bra.w	BossDefeated
00018BDA                            ; ===========================================================================
00018BDA                            
00018BDA                            loc_18B52:
00018BDA 5428 0025                  		addq.b	#2,$25(a0)
00018BDE 4268 0012                  		clr.w	$12(a0)
00018BE2 08E8 0000 0022             		bset	#0,$22(a0)
00018BE8 08A8 0007 0022             		bclr	#7,$22(a0)
00018BEE 4268 0010                  		clr.w	$10(a0)
00018BF2 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00018BF8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018BFC 6600                       		bne.s	loc_18B7C
00018BFE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018C04                            
00018C04                            loc_18B7C:
00018C04 6000 FE80                  		bra.w	loc_189FE
00018C08                            ; ===========================================================================
00018C08                            
00018C08                            loc_18B80:				; XREF: Obj7A_ShipIndex
00018C08 5228 003C                  		addq.b	#1,$3C(a0)
00018C0C 6700                       		beq.s	loc_18B90
00018C0E 6A00                       		bpl.s	loc_18B96
00018C10 0668 0018 0012             		addi.w	#$18,$12(a0)
00018C16 6000                       		bra.s	loc_18BC2
00018C18                            ; ===========================================================================
00018C18                            
00018C18                            loc_18B90:
00018C18 4268 0012                  		clr.w	$12(a0)
00018C1C 6000                       		bra.s	loc_18BC2
00018C1E                            ; ===========================================================================
00018C1E                            
00018C1E                            loc_18B96:
00018C1E 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00018C24 6500                       		bcs.s	loc_18BAE
00018C26 6700                       		beq.s	loc_18BB4
00018C28 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00018C2E 6500                       		bcs.s	loc_18BC2
00018C30 5428 0025                  		addq.b	#2,$25(a0)
00018C34 6000                       		bra.s	loc_18BC2
00018C36                            ; ===========================================================================
00018C36                            
00018C36                            loc_18BAE:
00018C36 5168 0012                  		subq.w	#8,$12(a0)
00018C3A 6000                       		bra.s	loc_18BC2
00018C3C                            ; ===========================================================================
00018C3C                            
00018C3C                            loc_18BB4:
00018C3C 4268 0012                  		clr.w	$12(a0)
00018C40 303C 0084                  		move.w	#$84,d0
00018C44 4EB9 0000 1396             		jsr	(PlaySound).l	; play SLZ music
00018C4A                            
00018C4A                            loc_18BC2:
00018C4A 6000 FE2A                  		bra.w	loc_189EE
00018C4E                            ; ===========================================================================
00018C4E                            
00018C4E                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00018C4E 317C 0400 0010             		move.w	#$400,$10(a0)
00018C54 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018C5A 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00018C60 6400                       		bcc.s	loc_18BE0
00018C62 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018C66 6000                       		bra.s	loc_18BE8
00018C68                            ; ===========================================================================
00018C68                            
00018C68                            loc_18BE0:
00018C68 4A28 0001                  		tst.b	1(a0)
00018C6C 6A00 FCCE                  		bpl.w	Obj7A_Delete
00018C70                            
00018C70                            loc_18BE8:
00018C70 6100 ECCA                  		bsr.w	BossMove
00018C74 6000 FDDC                  		bra.w	loc_189CA
00018C78                            ; ===========================================================================
00018C78                            
00018C78                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00018C78 7000                       		moveq	#0,d0
00018C7A 7201                       		moveq	#1,d1
00018C7C 2268 0034                  		movea.l	$34(a0),a1
00018C80 1029 0025                  		move.b	$25(a1),d0
00018C84 0C00 0006                  		cmpi.b	#6,d0
00018C88 6B00                       		bmi.s	loc_18C06
00018C8A 720A                       		moveq	#$A,d1
00018C8C 6000                       		bra.s	loc_18C1A
00018C8E                            ; ===========================================================================
00018C8E                            
00018C8E                            loc_18C06:
00018C8E 4A29 0020                  		tst.b	$20(a1)
00018C92 6600                       		bne.s	loc_18C10
00018C94 7205                       		moveq	#5,d1
00018C96 6000                       		bra.s	loc_18C1A
00018C98                            ; ===========================================================================
00018C98                            
00018C98                            loc_18C10:
00018C98 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018C9E 6500                       		bcs.s	loc_18C1A
00018CA0 7204                       		moveq	#4,d1
00018CA2                            
00018CA2                            loc_18C1A:
00018CA2 1141 001C                  		move.b	d1,$1C(a0)
00018CA6 0C00 000A                  		cmpi.b	#$A,d0
00018CAA 6600                       		bne.s	loc_18C32
00018CAC 117C 0006 001C             		move.b	#6,$1C(a0)
00018CB2 4A28 0001                  		tst.b	1(a0)
00018CB6 6A00 FC84                  		bpl.w	Obj7A_Delete
00018CBA                            
00018CBA                            loc_18C32:
00018CBA 6000                       		bra.s	loc_18C6C
00018CBC                            ; ===========================================================================
00018CBC                            
00018CBC                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00018CBC 117C 0008 001C             		move.b	#8,$1C(a0)
00018CC2 2268 0034                  		movea.l	$34(a0),a1
00018CC6 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018CCC 6600                       		bne.s	loc_18C56
00018CCE 4A28 0001                  		tst.b	1(a0)
00018CD2 6A00 FC68                  		bpl.w	Obj7A_Delete
00018CD6 117C 000B 001C             		move.b	#$B,$1C(a0)
00018CDC 6000                       		bra.s	loc_18C6C
00018CDE                            ; ===========================================================================
00018CDE                            
00018CDE                            loc_18C56:
00018CDE 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018CE4 6E00                       		bgt.s	loc_18C6C
00018CE6 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00018CEC 6D00                       		blt.s	loc_18C6C
00018CEE 117C 0007 001C             		move.b	#7,$1C(a0)
00018CF4                            
00018CF4                            loc_18C6C:
00018CF4 43F9 0001 7D4C             		lea	(Ani_Eggman).l,a1
00018CFA 4EB9 0000 A7F8             		jsr	AnimateSprite
00018D00                            
00018D00                            loc_18C78:
00018D00 2268 0034                  		movea.l	$34(a0),a1
00018D04 3169 0008 0008             		move.w	8(a1),8(a0)
00018D0A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018D10 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018D16 7003                       		moveq	#3,d0
00018D18 C028 0022                  		and.b	$22(a0),d0
00018D1C 0228 00FC 0001             		andi.b	#-4,1(a0)
00018D22 8128 0001                  		or.b	d0,1(a0)
00018D26 4EF9 0000 D6CC             		jmp	DisplaySprite
00018D2C                            ; ===========================================================================
00018D2C                            
00018D2C                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00018D2C 2268 0034                  		movea.l	$34(a0),a1
00018D30 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018D36 6600                       		bne.s	loc_18CB8
00018D38 4A28 0001                  		tst.b	1(a0)
00018D3C 6A00 FBFE                  		bpl.w	Obj7A_Delete
00018D40                            
00018D40                            loc_18CB8:
00018D40 217C 0001 7E64 0004        		move.l	#Map_BossItems,4(a0)
00018D48 317C 246C 0002             		move.w	#$246C,2(a0)
00018D4E 117C 0003 001A             		move.b	#3,$1A(a0)
00018D54 60AA                       		bra.s	loc_18C78
00018D56                            ; ===========================================================================
00018D56                            ; ---------------------------------------------------------------------------
00018D56                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00018D56                            ; ---------------------------------------------------------------------------
00018D56                            
00018D56                            Obj7B:					; XREF: Obj_Index
00018D56 7000                       		moveq	#0,d0
00018D58 1028 0024                  		move.b	$24(a0),d0
00018D5C 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00018D60 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00018D64 3028 0030                  		move.w	$30(a0),d0
00018D68 0240 FF80                  		andi.w	#$FF80,d0
00018D6C 3238 F700                  		move.w	($FFFFF700).w,d1
00018D70 0441 0080                  		subi.w	#$80,d1
00018D74 0241 FF80                  		andi.w	#$FF80,d1
00018D78 9041                       		sub.w	d1,d0
00018D7A 6B00 FBC0                  		bmi.w	Obj7A_Delete
00018D7E 0C40 0280                  		cmpi.w	#$280,d0
00018D82 6200 FBB8                  		bhi.w	Obj7A_Delete
00018D86 4EF9 0000 D6CC             		jmp	DisplaySprite
00018D8C                            ; ===========================================================================
00018D8C 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00018D8E 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00018D90 0000                       		dc.w loc_18DC6-Obj7B_Index
00018D92 0000                       		dc.w loc_18EAA-Obj7B_Index
00018D94 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00018D96 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00018D98                            ; ===========================================================================
00018D98                            
00018D98                            Obj7B_Main:				; XREF: Obj7B_Index
00018D98 217C 0001 1A9A 0004        		move.l	#Map_obj5Ea,4(a0)
00018DA0 317C 0518 0002             		move.w	#$518,2(a0)
00018DA6 117C 0001 001A             		move.b	#1,$1A(a0)
00018DAC 0028 0004 0001             		ori.b	#4,1(a0)
00018DB2 117C 0004 0018             		move.b	#4,$18(a0)
00018DB8 117C 008B 0020             		move.b	#$8B,$20(a0)
00018DBE 117C 000C 0019             		move.b	#$C,$19(a0)
00018DC4 2268 003C                  		movea.l	$3C(a0),a1
00018DC8 3169 0008 0030             		move.w	8(a1),$30(a0)
00018DCE 3169 000C 0034             		move.w	$C(a1),$34(a0)
00018DD4 08E8 0000 0022             		bset	#0,$22(a0)
00018DDA 3028 0008                  		move.w	8(a0),d0
00018DDE B069 0008                  		cmp.w	8(a1),d0
00018DE2 6E00                       		bgt.s	loc_18D68
00018DE4 08A8 0000 0022             		bclr	#0,$22(a0)
00018DEA 117C 0002 003A             		move.b	#2,$3A(a0)
00018DF0                            
00018DF0                            loc_18D68:
00018DF0 5428 0024                  		addq.b	#2,$24(a0)
00018DF4                            
00018DF4                            Obj7B_Fall:				; XREF: Obj7B_Index
00018DF4 4EB9 0000 D67A             		jsr	ObjectFall
00018DFA 2268 003C                  		movea.l	$3C(a0),a1
00018DFE 45F9 0000 0000             		lea	(word_19018).l,a2
00018E04 7000                       		moveq	#0,d0
00018E06 1029 001A                  		move.b	$1A(a1),d0
00018E0A 3228 0008                  		move.w	8(a0),d1
00018E0E 9268 0030                  		sub.w	$30(a0),d1
00018E12 6400                       		bcc.s	loc_18D8E
00018E14 5440                       		addq.w	#2,d0
00018E16                            
00018E16                            loc_18D8E:
00018E16 D040                       		add.w	d0,d0
00018E18 3228 0034                  		move.w	$34(a0),d1
00018E1C D272 0000                  		add.w	(a2,d0.w),d1
00018E20 B268 000C                  		cmp.w	$C(a0),d1
00018E24 6E00                       		bgt.s	locret_18DC4
00018E26 2268 003C                  		movea.l	$3C(a0),a1
00018E2A 7202                       		moveq	#2,d1
00018E2C 0828 0000 0022             		btst	#0,$22(a0)
00018E32 6700                       		beq.s	loc_18DAE
00018E34 7200                       		moveq	#0,d1
00018E36                            
00018E36                            loc_18DAE:
00018E36 317C 00F0 0028             		move.w	#$F0,$28(a0)
00018E3C 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00018E42 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00018E48 6000 0000                  		bra.w	loc_18FA2
00018E4C                            ; ===========================================================================
00018E4C                            
00018E4C                            locret_18DC4:
00018E4C 4E75                       		rts	
00018E4E                            ; ===========================================================================
00018E4E                            
00018E4E                            loc_18DC6:				; XREF: Obj7B_Index
00018E4E 2268 003C                  		movea.l	$3C(a0),a1
00018E52 7000                       		moveq	#0,d0
00018E54 1028 003A                  		move.b	$3A(a0),d0
00018E58 9029 003A                  		sub.b	$3A(a1),d0
00018E5C 6700                       		beq.s	loc_18E2A
00018E5E 6400                       		bcc.s	loc_18DDA
00018E60 4400                       		neg.b	d0
00018E62                            
00018E62                            loc_18DDA:
00018E62 323C F7E8                  		move.w	#-$818,d1
00018E66 343C FEEC                  		move.w	#-$114,d2
00018E6A 0C00 0001                  		cmpi.b	#1,d0
00018E6E 6700                       		beq.s	loc_18E00
00018E70 323C F6A0                  		move.w	#-$960,d1
00018E74 343C FF0C                  		move.w	#-$F4,d2
00018E78 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00018E7E 6D00                       		blt.s	loc_18E00
00018E80 323C F5E0                  		move.w	#-$A20,d1
00018E84 343C FF80                  		move.w	#-$80,d2
00018E88                            
00018E88                            loc_18E00:
00018E88 3141 0012                  		move.w	d1,$12(a0)
00018E8C 3142 0010                  		move.w	d2,$10(a0)
00018E90 3028 0008                  		move.w	8(a0),d0
00018E94 9068 0030                  		sub.w	$30(a0),d0
00018E98 6400                       		bcc.s	loc_18E16
00018E9A 4468 0010                  		neg.w	$10(a0)
00018E9E                            
00018E9E                            loc_18E16:
00018E9E 117C 0001 001A             		move.b	#1,$1A(a0)
00018EA4 317C 0020 0028             		move.w	#$20,$28(a0)
00018EAA 5428 0024                  		addq.b	#2,$24(a0)
00018EAE 6000 0000                  		bra.w	loc_18EAA
00018EB2                            ; ===========================================================================
00018EB2                            
00018EB2                            loc_18E2A:				; XREF: loc_18DC6
00018EB2 45F9 0000 0000             		lea	(word_19018).l,a2
00018EB8 7000                       		moveq	#0,d0
00018EBA 1029 001A                  		move.b	$1A(a1),d0
00018EBE 343C 0028                  		move.w	#$28,d2
00018EC2 3228 0008                  		move.w	8(a0),d1
00018EC6 9268 0030                  		sub.w	$30(a0),d1
00018ECA 6400                       		bcc.s	loc_18E48
00018ECC 4442                       		neg.w	d2
00018ECE 5440                       		addq.w	#2,d0
00018ED0                            
00018ED0                            loc_18E48:
00018ED0 D040                       		add.w	d0,d0
00018ED2 3228 0034                  		move.w	$34(a0),d1
00018ED6 D272 0000                  		add.w	(a2,d0.w),d1
00018EDA 3141 000C                  		move.w	d1,$C(a0)
00018EDE D468 0030                  		add.w	$30(a0),d2
00018EE2 3142 0008                  		move.w	d2,8(a0)
00018EE6 4268 000E                  		clr.w	$E(a0)
00018EEA 4268 000A                  		clr.w	$A(a0)
00018EEE 5368 0028                  		subq.w	#1,$28(a0)
00018EF2 6600                       		bne.s	loc_18E7A
00018EF4 317C 0020 0028             		move.w	#$20,$28(a0)
00018EFA 117C 0008 0024             		move.b	#8,$24(a0)
00018F00 4E75                       		rts	
00018F02                            ; ===========================================================================
00018F02                            
00018F02                            loc_18E7A:
00018F02 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00018F08 6600                       		bne.s	loc_18E88
00018F0A 117C 0005 001F             		move.b	#5,$1F(a0)
00018F10                            
00018F10                            loc_18E88:
00018F10 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00018F16 6600                       		bne.s	loc_18E96
00018F18 117C 0002 001F             		move.b	#2,$1F(a0)
00018F1E                            
00018F1E                            loc_18E96:
00018F1E 5328 001E                  		subq.b	#1,$1E(a0)
00018F22 6E00                       		bgt.s	locret_18EA8
00018F24 0868 0000 001A             		bchg	#0,$1A(a0)
00018F2A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00018F30                            
00018F30                            locret_18EA8:
00018F30 4E75                       		rts	
00018F32                            ; ===========================================================================
00018F32                            
00018F32                            loc_18EAA:				; XREF: Obj7B_Index
00018F32 43F8 D040                  		lea	($FFFFD040).w,a1
00018F36 707A                       		moveq	#$7A,d0
00018F38 7240                       		moveq	#$40,d1
00018F3A 743E                       		moveq	#$3E,d2
00018F3C                            
00018F3C                            loc_18EB4:
00018F3C B011                       		cmp.b	(a1),d0
00018F3E 6700                       		beq.s	loc_18EC0
00018F40 D2C1                       		adda.w	d1,a1
00018F42 51CA FFF8                  		dbf	d2,loc_18EB4
00018F46                            
00018F46 6000                       		bra.s	loc_18F38
00018F48                            ; ===========================================================================
00018F48                            
00018F48                            loc_18EC0:
00018F48 3029 0008                  		move.w	8(a1),d0
00018F4C 3229 000C                  		move.w	$C(a1),d1
00018F50 3428 0008                  		move.w	8(a0),d2
00018F54 3628 000C                  		move.w	$C(a0),d3
00018F58 45FA 0000                  		lea	byte_19022(pc),a2
00018F5C 47FA 0000                  		lea	byte_19026(pc),a3
00018F60 181A                       		move.b	(a2)+,d4
00018F62 4884                       		ext.w	d4
00018F64 D044                       		add.w	d4,d0
00018F66 181B                       		move.b	(a3)+,d4
00018F68 4884                       		ext.w	d4
00018F6A D444                       		add.w	d4,d2
00018F6C B440                       		cmp.w	d0,d2
00018F6E 6500                       		bcs.s	loc_18F38
00018F70 181A                       		move.b	(a2)+,d4
00018F72 4884                       		ext.w	d4
00018F74 D044                       		add.w	d4,d0
00018F76 181B                       		move.b	(a3)+,d4
00018F78 4884                       		ext.w	d4
00018F7A D444                       		add.w	d4,d2
00018F7C B042                       		cmp.w	d2,d0
00018F7E 6500                       		bcs.s	loc_18F38
00018F80 181A                       		move.b	(a2)+,d4
00018F82 4884                       		ext.w	d4
00018F84 D244                       		add.w	d4,d1
00018F86 181B                       		move.b	(a3)+,d4
00018F88 4884                       		ext.w	d4
00018F8A D644                       		add.w	d4,d3
00018F8C B641                       		cmp.w	d1,d3
00018F8E 6500                       		bcs.s	loc_18F38
00018F90 181A                       		move.b	(a2)+,d4
00018F92 4884                       		ext.w	d4
00018F94 D244                       		add.w	d4,d1
00018F96 181B                       		move.b	(a3)+,d4
00018F98 4884                       		ext.w	d4
00018F9A D644                       		add.w	d4,d3
00018F9C B243                       		cmp.w	d3,d1
00018F9E 6500                       		bcs.s	loc_18F38
00018FA0 5428 0024                  		addq.b	#2,$24(a0)
00018FA4 4268 0028                  		clr.w	$28(a0)
00018FA8 4229 0020                  		clr.b	$20(a1)
00018FAC 5329 0021                  		subq.b	#1,$21(a1)
00018FB0 6600                       		bne.s	loc_18F38
00018FB2 08E9 0007 0022             		bset	#7,$22(a1)
00018FB8 4268 0010                  		clr.w	$10(a0)
00018FBC 4268 0012                  		clr.w	$12(a0)
00018FC0                            
00018FC0                            loc_18F38:
00018FC0 4A68 0012                  		tst.w	$12(a0)
00018FC4 6A00                       		bpl.s	loc_18F5C
00018FC6 4EB9 0000 D67A             		jsr	ObjectFall
00018FCC 3028 0034                  		move.w	$34(a0),d0
00018FD0 0440 002F                  		subi.w	#$2F,d0
00018FD4 B068 000C                  		cmp.w	$C(a0),d0
00018FD8 6E00                       		bgt.s	loc_18F58
00018FDA 4EB9 0000 D67A             		jsr	ObjectFall
00018FE0                            
00018FE0                            loc_18F58:
00018FE0 6000 FF20                  		bra.w	loc_18E7A
00018FE4                            ; ===========================================================================
00018FE4                            
00018FE4                            loc_18F5C:
00018FE4 4EB9 0000 D67A             		jsr	ObjectFall
00018FEA 2268 003C                  		movea.l	$3C(a0),a1
00018FEE 45F9 0000 0000             		lea	(word_19018).l,a2
00018FF4 7000                       		moveq	#0,d0
00018FF6 1029 001A                  		move.b	$1A(a1),d0
00018FFA 3228 0008                  		move.w	8(a0),d1
00018FFE 9268 0030                  		sub.w	$30(a0),d1
00019002 6400                       		bcc.s	loc_18F7E
00019004 5440                       		addq.w	#2,d0
00019006                            
00019006                            loc_18F7E:
00019006 D040                       		add.w	d0,d0
00019008 3228 0034                  		move.w	$34(a0),d1
0001900C D272 0000                  		add.w	(a2,d0.w),d1
00019010 B268 000C                  		cmp.w	$C(a0),d1
00019014 6ECA                       		bgt.s	loc_18F58
00019016 2268 003C                  		movea.l	$3C(a0),a1
0001901A 7202                       		moveq	#2,d1
0001901C 4A68 0010                  		tst.w	$10(a0)
00019020 6B00                       		bmi.s	loc_18F9C
00019022 7200                       		moveq	#0,d1
00019024                            
00019024                            loc_18F9C:
00019024 317C 0000 0028             		move.w	#0,$28(a0)
0001902A                            
0001902A                            loc_18FA2:
0001902A 1341 003A                  		move.b	d1,$3A(a1)
0001902E 1141 003A                  		move.b	d1,$3A(a0)
00019032 B229 001A                  		cmp.b	$1A(a1),d1
00019036 6700                       		beq.s	loc_19008
00019038 08A9 0003 0022             		bclr	#3,$22(a1)
0001903E 6700                       		beq.s	loc_19008
00019040 4229 0025                  		clr.b	$25(a1)
00019044 137C 0002 0024             		move.b	#2,$24(a1)
0001904A 45F8 D000                  		lea	($FFFFD000).w,a2
0001904E 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019054 446A 0012                  		neg.w	$12(a2)
00019058 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001905E 6600                       		bne.s	loc_18FDC
00019060 E0EA 0012                  		asr	$12(a2)
00019064                            
00019064                            loc_18FDC:
00019064 08EA 0001 0022             		bset	#1,$22(a2)
0001906A 08AA 0003 0022             		bclr	#3,$22(a2)
00019070 422A 003C                  		clr.b	$3C(a2)
00019074 2F08                       		move.l	a0,-(sp)
00019076 41D2                       		lea	(a2),a0
00019078 4EBA A40C                  		jsr	Obj01_ChkRoll
0001907C 205F                       		movea.l	(sp)+,a0
0001907E 157C 0002 0024             		move.b	#2,$24(a2)
00019084 303C 00CC                  		move.w	#$CC,d0
00019088 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001908E                            
0001908E                            loc_19008:
0001908E 4268 0010                  		clr.w	$10(a0)
00019092 4268 0012                  		clr.w	$12(a0)
00019096 5428 0024                  		addq.b	#2,$24(a0)
0001909A 6000 FE66                  		bra.w	loc_18E7A
0001909E                            ; ===========================================================================
0001909E FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000190A8                            		even
000190A8 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000190AC                            		even
000190AC 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000190B0                            		even
000190B0                            ; ===========================================================================
000190B0                            
000190B0                            Obj7B_Explode:				; XREF: Obj7B_Index
000190B0 10BC 003F                  		move.b	#$3F,(a0)
000190B4 4228 0024                  		clr.b	$24(a0)
000190B8 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
000190BE 6700                       		beq.s	Obj7B_MakeFrag
000190C0 4E75                       		rts	
000190C2                            ; ===========================================================================
000190C2                            
000190C2                            Obj7B_MakeFrag:
000190C2 3168 0034 000C             		move.w	$34(a0),$C(a0)
000190C8 7203                       		moveq	#3,d1
000190CA 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
000190CE                            
000190CE                            Obj7B_Loop:
000190CE 4EB9 0000 DB52             		jsr	SingleObjLoad
000190D4 6600                       		bne.s	loc_1909A
000190D6 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
000190DA 137C 000A 0024             		move.b	#$A,$24(a1)
000190E0 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
000190E8 137C 0003 0018             		move.b	#3,$18(a1)
000190EE 337C 0518 0002             		move.w	#$518,2(a1)
000190F4 3368 0008 0008             		move.w	8(a0),8(a1)
000190FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019100 335A 0010                  		move.w	(a2)+,$10(a1)
00019104 335A 0012                  		move.w	(a2)+,$12(a1)
00019108 137C 0098 0020             		move.b	#$98,$20(a1)
0001910E 0029 0004 0001             		ori.b	#4,1(a1)
00019114 08E9 0007 0001             		bset	#7,1(a1)
0001911A 137C 000C 0019             		move.b	#$C,$19(a1)
00019120                            
00019120                            loc_1909A:
00019120 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019124                            
00019124 4E75                       		rts	
00019126                            ; ===========================================================================
00019126 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001912A FF60 FDC0                  		dc.w $FF60, $FDC0
0001912E 0100 FCC0                  		dc.w $100, $FCC0
00019132 00A0 FDC0                  		dc.w $A0, $FDC0
00019136                            ; ===========================================================================
00019136                            
00019136                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019136 4EB9 0000 D6A6             		jsr	SpeedToPos
0001913C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019142 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019148 0668 0018 0012             		addi.w	#$18,$12(a0)
0001914E 7004                       		moveq	#4,d0
00019150 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019154 E448                       		lsr.w	#2,d0
00019156 1140 001A                  		move.b	d0,$1A(a0)
0001915A 4A28 0001                  		tst.b	1(a0)
0001915E 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019162 4E75                       		rts	
00019164                            ; ===========================================================================
00019164                            ; ---------------------------------------------------------------------------
00019164                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019164                            ; ---------------------------------------------------------------------------
00019164                            Map_obj7B:
00019164                            	include "_maps\obj7B.asm"
00019164                            ; ---------------------------------------------------------------------------
00019164                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019164                            ; ---------------------------------------------------------------------------
00019164 0000                       		dc.w byte_190E2-Map_obj7B
00019166 0000                       		dc.w byte_190E8-Map_obj7B
00019168 01                         byte_190E2:	dc.b 1
00019169 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001916E 01                         byte_190E8:	dc.b 1
0001916F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019174                            		even
00019174                            		even
00019174                            
00019174                            ; ===========================================================================
00019174                            ; ---------------------------------------------------------------------------
00019174                            ; Object 75 - Eggman (SYZ)
00019174                            ; ---------------------------------------------------------------------------
00019174                            
00019174                            Obj75:					; XREF: Obj_Index
00019174 7000                       		moveq	#0,d0
00019176 1028 0024                  		move.b	$24(a0),d0
0001917A 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001917E 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019182                            ; ===========================================================================
00019182 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019184 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019186 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019188 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001918A 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001918C                            
0001918C 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001918F 0401 05                    		dc.b 4,	1, 5
00019192 0607 05                    		dc.b 6,	7, 5
00019195 0800 05                    		dc.b 8,	0, 5
00019198                            ; ===========================================================================
00019198                            
00019198                            Obj75_Main:				; XREF: Obj75_Index
00019198 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001919E 317C 04DA 000C             		move.w	#$4DA,$C(a0)
000191A4 3168 0008 0030             		move.w	8(a0),$30(a0)
000191AA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000191B0 117C 000F 0020             		move.b	#$F,$20(a0)
000191B6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000191BC 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
000191C0 2248                       		movea.l	a0,a1
000191C2 7203                       		moveq	#3,d1
000191C4 6000                       		bra.s	Obj75_LoadBoss
000191C6                            ; ===========================================================================
000191C6                            
000191C6                            Obj75_Loop:
000191C6 4EB9 0000 DB68             		jsr	SingleObjLoad2
000191CC 6600                       		bne.s	Obj75_ShipMain
000191CE 12BC 0075                  		move.b	#$75,(a1)
000191D2 3368 0008 0008             		move.w	8(a0),8(a1)
000191D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000191DE                            
000191DE                            Obj75_LoadBoss:				; XREF: Obj75_Main
000191DE 08A8 0000 0022             		bclr	#0,$22(a0)
000191E4 4229 0025                  		clr.b	$25(a1)
000191E8 135A 0024                  		move.b	(a2)+,$24(a1)
000191EC 135A 001C                  		move.b	(a2)+,$1C(a1)
000191F0 135A 0018                  		move.b	(a2)+,$18(a1)
000191F4 237C 0001 7D9C 0004        		move.l	#Map_Eggman,4(a1)
000191FC 337C 0400 0002             		move.w	#$400,2(a1)
00019202 137C 0004 0001             		move.b	#4,1(a1)
00019208 137C 0020 0019             		move.b	#$20,$19(a1)
0001920E 2348 0034                  		move.l	a0,$34(a1)
00019212 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019216                            
00019216                            Obj75_ShipMain:				; XREF: Obj75_Index
00019216 7000                       		moveq	#0,d0
00019218 1028 0025                  		move.b	$25(a0),d0
0001921C 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019220 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019224 43F9 0001 7D4C             		lea	(Ani_Eggman).l,a1
0001922A 4EB9 0000 A7F8             		jsr	AnimateSprite
00019230 7003                       		moveq	#3,d0
00019232 C028 0022                  		and.b	$22(a0),d0
00019236 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001923C 8128 0001                  		or.b	d0,1(a0)
00019240 4EF9 0000 D6CC             		jmp	DisplaySprite
00019246                            ; ===========================================================================
00019246 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001924A 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001924E 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019252                            ; ===========================================================================
00019252                            
00019252                            loc_191CC:				; XREF: Obj75_ShipIndex
00019252 317C FF00 0010             		move.w	#-$100,$10(a0)
00019258 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001925E 6400                       		bcc.s	loc_191DE
00019260 5428 0025                  		addq.b	#2,$25(a0)
00019264                            
00019264                            loc_191DE:
00019264 1028 003F                  		move.b	$3F(a0),d0
00019268 5428 003F                  		addq.b	#2,$3F(a0)
0001926C 4EB9 0000 29DA             		jsr	(CalcSine).l
00019272 E440                       		asr.w	#2,d0
00019274 3140 0012                  		move.w	d0,$12(a0)
00019278                            
00019278                            loc_191F2:
00019278 6100 E6C2                  		bsr.w	BossMove
0001927C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019282 3168 0030 0008             		move.w	$30(a0),8(a0)
00019288                            
00019288                            loc_19202:
00019288 3028 0008                  		move.w	8(a0),d0
0001928C 0440 2C00                  		subi.w	#$2C00,d0
00019290 EA48                       		lsr.w	#5,d0
00019292 1140 0034                  		move.b	d0,$34(a0)
00019296 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001929C 6400                       		bcc.s	locret_19256
0001929E 4A28 0022                  		tst.b	$22(a0)
000192A2 6B00                       		bmi.s	loc_19258
000192A4 4A28 0020                  		tst.b	$20(a0)
000192A8 6600                       		bne.s	locret_19256
000192AA 4A28 003E                  		tst.b	$3E(a0)
000192AE 6600                       		bne.s	loc_1923A
000192B0 117C 0020 003E             		move.b	#$20,$3E(a0)
000192B6 303C 00AC                  		move.w	#$AC,d0
000192BA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
000192C0                            
000192C0                            loc_1923A:
000192C0 43F8 FB22                  		lea	($FFFFFB22).w,a1
000192C4 7000                       		moveq	#0,d0
000192C6 4A51                       		tst.w	(a1)
000192C8 6600                       		bne.s	loc_19248
000192CA 303C 0EEE                  		move.w	#$EEE,d0
000192CE                            
000192CE                            loc_19248:
000192CE 3280                       		move.w	d0,(a1)
000192D0 5328 003E                  		subq.b	#1,$3E(a0)
000192D4 6600                       		bne.s	locret_19256
000192D6 117C 000F 0020             		move.b	#$F,$20(a0)
000192DC                            
000192DC                            locret_19256:
000192DC 4E75                       		rts	
000192DE                            ; ===========================================================================
000192DE                            
000192DE                            loc_19258:				; XREF: loc_19202
000192DE 7064                       		moveq	#100,d0
000192E0 6100 0000                  		bsr.w	AddPoints
000192E4 117C 0006 0025             		move.b	#6,$25(a0)
000192EA 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000192F0 4268 0010                  		clr.w	$10(a0)
000192F4 4E75                       		rts	
000192F6                            ; ===========================================================================
000192F6                            
000192F6                            loc_19270:				; XREF: Obj75_ShipIndex
000192F6 3028 0030                  		move.w	$30(a0),d0
000192FA 317C 0140 0010             		move.w	#$140,$10(a0)
00019300 0828 0000 0022             		btst	#0,$22(a0)
00019306 6600                       		bne.s	loc_1928E
00019308 4468 0010                  		neg.w	$10(a0)
0001930C 0C40 2C08                  		cmpi.w	#$2C08,d0
00019310 6E00                       		bgt.s	loc_1929E
00019312 6000                       		bra.s	loc_19294
00019314                            ; ===========================================================================
00019314                            
00019314                            loc_1928E:
00019314 0C40 2D38                  		cmpi.w	#$2D38,d0
00019318 6D00                       		blt.s	loc_1929E
0001931A                            
0001931A                            loc_19294:
0001931A 0868 0000 0022             		bchg	#0,$22(a0)
00019320 4228 003D                  		clr.b	$3D(a0)
00019324                            
00019324                            loc_1929E:
00019324 0440 2C10                  		subi.w	#$2C10,d0
00019328 0240 001F                  		andi.w	#$1F,d0
0001932C 0440 001F                  		subi.w	#$1F,d0
00019330 6A00                       		bpl.s	loc_192AE
00019332 4440                       		neg.w	d0
00019334                            
00019334                            loc_192AE:
00019334 5340                       		subq.w	#1,d0
00019336 6E00                       		bgt.s	loc_192E8
00019338 4A28 003D                  		tst.b	$3D(a0)
0001933C 6600                       		bne.s	loc_192E8
0001933E 3238 D008                  		move.w	($FFFFD008).w,d1
00019342 0441 2C00                  		subi.w	#$2C00,d1
00019346 EA41                       		asr.w	#5,d1
00019348 B228 0034                  		cmp.b	$34(a0),d1
0001934C 6600                       		bne.s	loc_192E8
0001934E 7000                       		moveq	#0,d0
00019350 1028 0034                  		move.b	$34(a0),d0
00019354 EB40                       		asl.w	#5,d0
00019356 0640 2C10                  		addi.w	#$2C10,d0
0001935A 3140 0030                  		move.w	d0,$30(a0)
0001935E 6100 0000                  		bsr.w	Obj75_FindBlocks
00019362 5428 0025                  		addq.b	#2,$25(a0)
00019366 4268 0028                  		clr.w	$28(a0)
0001936A 4268 0010                  		clr.w	$10(a0)
0001936E                            
0001936E                            loc_192E8:
0001936E 6000 FEF4                  		bra.w	loc_191DE
00019372                            ; ===========================================================================
00019372                            
00019372                            loc_192EC:				; XREF: Obj75_ShipIndex
00019372 7000                       		moveq	#0,d0
00019374 1028 0028                  		move.b	$28(a0),d0
00019378 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001937C 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019380                            ; ===========================================================================
00019380 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019382 0000                       		dc.w loc_19348-off_192FA
00019384 0000                       		dc.w loc_1938E-off_192FA
00019386 0000                       		dc.w loc_193D0-off_192FA
00019388                            ; ===========================================================================
00019388                            
00019388                            loc_19302:				; XREF: off_192FA
00019388 317C 0180 0012             		move.w	#$180,$12(a0)
0001938E 3028 0038                  		move.w	$38(a0),d0
00019392 0C40 0556                  		cmpi.w	#$556,d0
00019396 6500                       		bcs.s	loc_19344
00019398 317C 0556 0038             		move.w	#$556,$38(a0)
0001939E 4268 003C                  		clr.w	$3C(a0)
000193A2 70FF                       		moveq	#-1,d0
000193A4 3028 0036                  		move.w	$36(a0),d0
000193A8 6700                       		beq.s	loc_1933C
000193AA 2240                       		movea.l	d0,a1
000193AC 137C 00FF 0029             		move.b	#-1,$29(a1)
000193B2 117C 00FF 0029             		move.b	#-1,$29(a0)
000193B8 2348 0034                  		move.l	a0,$34(a1)
000193BC 317C 0032 003C             		move.w	#$32,$3C(a0)
000193C2                            
000193C2                            loc_1933C:
000193C2 4268 0012                  		clr.w	$12(a0)
000193C6 5428 0028                  		addq.b	#2,$28(a0)
000193CA                            
000193CA                            loc_19344:
000193CA 6000 FEAC                  		bra.w	loc_191F2
000193CE                            ; ===========================================================================
000193CE                            
000193CE                            loc_19348:				; XREF: off_192FA
000193CE 5368 003C                  		subq.w	#1,$3C(a0)
000193D2 6A00                       		bpl.s	loc_19366
000193D4 5428 0028                  		addq.b	#2,$28(a0)
000193D8 317C F800 0012             		move.w	#-$800,$12(a0)
000193DE 4A68 0036                  		tst.w	$36(a0)
000193E2 6600                       		bne.s	loc_19362
000193E4 E0E8 0012                  		asr	$12(a0)
000193E8                            
000193E8                            loc_19362:
000193E8 7000                       		moveq	#0,d0
000193EA 6000                       		bra.s	loc_1937C
000193EC                            ; ===========================================================================
000193EC                            
000193EC                            loc_19366:
000193EC 7000                       		moveq	#0,d0
000193EE 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
000193F4 6E00                       		bgt.s	loc_1937C
000193F6 7002                       		moveq	#2,d0
000193F8 0828 0001 003D             		btst	#1,$3D(a0)
000193FE 6700                       		beq.s	loc_1937C
00019400 4440                       		neg.w	d0
00019402                            
00019402                            loc_1937C:
00019402 D068 0038                  		add.w	$38(a0),d0
00019406 3140 000C                  		move.w	d0,$C(a0)
0001940A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019410 6000 FE76                  		bra.w	loc_19202
00019414                            ; ===========================================================================
00019414                            
00019414                            loc_1938E:				; XREF: off_192FA
00019414 303C 04DA                  		move.w	#$4DA,d0
00019418 4A68 0036                  		tst.w	$36(a0)
0001941C 6700                       		beq.s	loc_1939C
0001941E 0440 0018                  		subi.w	#$18,d0
00019422                            
00019422                            loc_1939C:
00019422 B068 0038                  		cmp.w	$38(a0),d0
00019426 6D00                       		blt.s	loc_193BE
00019428 317C 0008 003C             		move.w	#8,$3C(a0)
0001942E 4A68 0036                  		tst.w	$36(a0)
00019432 6700                       		beq.s	loc_193B4
00019434 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001943A                            
0001943A                            loc_193B4:
0001943A 5428 0028                  		addq.b	#2,$28(a0)
0001943E 4268 0012                  		clr.w	$12(a0)
00019442 6000                       		bra.s	loc_193CC
00019444                            ; ===========================================================================
00019444                            
00019444                            loc_193BE:
00019444 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001944A 6C00                       		bge.s	loc_193CC
0001944C 0668 000C 0012             		addi.w	#$C,$12(a0)
00019452                            
00019452                            loc_193CC:
00019452 6000 FE24                  		bra.w	loc_191F2
00019456                            ; ===========================================================================
00019456                            
00019456                            loc_193D0:				; XREF: off_192FA
00019456 5368 003C                  		subq.w	#1,$3C(a0)
0001945A 6E00                       		bgt.s	loc_19406
0001945C 6B00                       		bmi.s	loc_193EE
0001945E 70FF                       		moveq	#-1,d0
00019460 3028 0036                  		move.w	$36(a0),d0
00019464 6700                       		beq.s	loc_193E8
00019466 2240                       		movea.l	d0,a1
00019468 137C 000A 0029             		move.b	#$A,$29(a1)
0001946E                            
0001946E                            loc_193E8:
0001946E 4268 0036                  		clr.w	$36(a0)
00019472 6000                       		bra.s	loc_19406
00019474                            ; ===========================================================================
00019474                            
00019474                            loc_193EE:
00019474 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001947A 6600                       		bne.s	loc_19406
0001947C 4228 0029                  		clr.b	$29(a0)
00019480 5528 0025                  		subq.b	#2,$25(a0)
00019484 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001948A 6000                       		bra.s	loc_19446
0001948C                            ; ===========================================================================
0001948C                            
0001948C                            loc_19406:
0001948C 7001                       		moveq	#1,d0
0001948E 4A68 0036                  		tst.w	$36(a0)
00019492 6700                       		beq.s	loc_19410
00019494 7002                       		moveq	#2,d0
00019496                            
00019496                            loc_19410:
00019496 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001949C 6700                       		beq.s	loc_19424
0001949E 6D00                       		blt.s	loc_1941C
000194A0 4440                       		neg.w	d0
000194A2                            
000194A2                            loc_1941C:
000194A2 4A68 0036                  		tst.w	$36(a0)
000194A6 D168 0038                  		add.w	d0,$38(a0)
000194AA                            
000194AA                            loc_19424:
000194AA 7000                       		moveq	#0,d0
000194AC 4A68 0036                  		tst.w	$36(a0)
000194B0 6700                       		beq.s	loc_19438
000194B2 7002                       		moveq	#2,d0
000194B4 0828 0000 003D             		btst	#0,$3D(a0)
000194BA 6700                       		beq.s	loc_19438
000194BC 4440                       		neg.w	d0
000194BE                            
000194BE                            loc_19438:
000194BE D068 0038                  		add.w	$38(a0),d0
000194C2 3140 000C                  		move.w	d0,$C(a0)
000194C6 3168 0030 0008             		move.w	$30(a0),8(a0)
000194CC                            
000194CC                            loc_19446:
000194CC 6000 FDBA                  		bra.w	loc_19202
000194D0                            
000194D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000194D0                            
000194D0                            
000194D0                            Obj75_FindBlocks:			; XREF: loc_192AE
000194D0 4268 0036                  		clr.w	$36(a0)
000194D4 43F8 D040                  		lea	($FFFFD040).w,a1
000194D8 703E                       		moveq	#$3E,d0
000194DA 7276                       		moveq	#$76,d1
000194DC 1428 0034                  		move.b	$34(a0),d2
000194E0                            
000194E0                            Obj75_FindLoop:
000194E0 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
000194E2 6600                       		bne.s	loc_1946A	; if not, branch
000194E4 B429 0028                  		cmp.b	$28(a1),d2
000194E8 6600                       		bne.s	loc_1946A
000194EA 3149 0036                  		move.w	a1,$36(a0)
000194EE 6000                       		bra.s	locret_19472
000194F0                            ; ===========================================================================
000194F0                            
000194F0                            loc_1946A:
000194F0 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
000194F4 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
000194F8                            
000194F8                            locret_19472:
000194F8 4E75                       		rts	
000194FA                            ; End of function Obj75_FindBlocks
000194FA                            
000194FA                            ; ===========================================================================
000194FA                            
000194FA                            loc_19474:				; XREF: Obj75_ShipIndex
000194FA 5368 003C                  		subq.w	#1,$3C(a0)
000194FE 6B00                       		bmi.s	loc_1947E
00019500 6000 E3F8                  		bra.w	BossDefeated
00019504                            ; ===========================================================================
00019504                            
00019504                            loc_1947E:
00019504 5428 0025                  		addq.b	#2,$25(a0)
00019508 4268 0012                  		clr.w	$12(a0)
0001950C 08E8 0000 0022             		bset	#0,$22(a0)
00019512 08A8 0007 0022             		bclr	#7,$22(a0)
00019518 4268 0010                  		clr.w	$10(a0)
0001951C 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019522 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019526 6600                       		bne.s	loc_194A8
00019528 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001952E                            
0001952E                            loc_194A8:
0001952E 6000 FD58                  		bra.w	loc_19202
00019532                            ; ===========================================================================
00019532                            
00019532                            loc_194AC:				; XREF: Obj75_ShipIndex
00019532 5268 003C                  		addq.w	#1,$3C(a0)
00019536 6700                       		beq.s	loc_194BC
00019538 6A00                       		bpl.s	loc_194C2
0001953A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019540 6000                       		bra.s	loc_194EE
00019542                            ; ===========================================================================
00019542                            
00019542                            loc_194BC:
00019542 4268 0012                  		clr.w	$12(a0)
00019546 6000                       		bra.s	loc_194EE
00019548                            ; ===========================================================================
00019548                            
00019548                            loc_194C2:
00019548 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001954E 6500                       		bcs.s	loc_194DA
00019550 6700                       		beq.s	loc_194E0
00019552 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019558 6500                       		bcs.s	loc_194EE
0001955A 5428 0025                  		addq.b	#2,$25(a0)
0001955E 6000                       		bra.s	loc_194EE
00019560                            ; ===========================================================================
00019560                            
00019560                            loc_194DA:
00019560 5168 0012                  		subq.w	#8,$12(a0)
00019564 6000                       		bra.s	loc_194EE
00019566                            ; ===========================================================================
00019566                            
00019566                            loc_194E0:
00019566 4268 0012                  		clr.w	$12(a0)
0001956A 303C 0085                  		move.w	#$85,d0
0001956E 4EB9 0000 1396             		jsr	(PlaySound).l	; play SYZ music
00019574                            
00019574                            loc_194EE:
00019574 6000 FD02                  		bra.w	loc_191F2
00019578                            ; ===========================================================================
00019578                            
00019578                            loc_194F2:				; XREF: Obj75_ShipIndex
00019578 317C 0400 0010             		move.w	#$400,$10(a0)
0001957E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019584 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001958A 6400                       		bcc.s	loc_1950C
0001958C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019590 6000                       		bra.s	loc_19512
00019592                            ; ===========================================================================
00019592                            
00019592                            loc_1950C:
00019592 4A28 0001                  		tst.b	1(a0)
00019596 6A00                       		bpl.s	Obj75_ShipDelete
00019598                            
00019598                            loc_19512:
00019598 6100 E3A2                  		bsr.w	BossMove
0001959C 6000 FCC6                  		bra.w	loc_191DE
000195A0                            ; ===========================================================================
000195A0                            
000195A0                            Obj75_ShipDelete:
000195A0 4EF9 0000 D708             		jmp	DeleteObject
000195A6                            ; ===========================================================================
000195A6                            
000195A6                            Obj75_FaceMain:				; XREF: Obj75_Index
000195A6 7201                       		moveq	#1,d1
000195A8 2268 0034                  		movea.l	$34(a0),a1
000195AC 7000                       		moveq	#0,d0
000195AE 1029 0025                  		move.b	$25(a1),d0
000195B2 303B 0000                  		move.w	off_19546(pc,d0.w),d0
000195B6 4EBB 0000                  		jsr	off_19546(pc,d0.w)
000195BA 1141 001C                  		move.b	d1,$1C(a0)
000195BE 1010                       		move.b	(a0),d0
000195C0 B011                       		cmp.b	(a1),d0
000195C2 6600                       		bne.s	Obj75_FaceDelete
000195C4 6000                       		bra.s	loc_195BE
000195C6                            ; ===========================================================================
000195C6                            
000195C6                            Obj75_FaceDelete:
000195C6 4EF9 0000 D708             		jmp	DeleteObject
000195CC                            ; ===========================================================================
000195CC 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
000195D0 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
000195D4 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
000195D8                            ; ===========================================================================
000195D8                            
000195D8                            loc_19552:				; XREF: off_19546
000195D8 720A                       		moveq	#$A,d1
000195DA 4E75                       		rts	
000195DC                            ; ===========================================================================
000195DC                            
000195DC                            loc_19556:				; XREF: off_19546
000195DC 7206                       		moveq	#6,d1
000195DE 4E75                       		rts	
000195E0                            ; ===========================================================================
000195E0                            
000195E0                            loc_1955A:				; XREF: off_19546
000195E0 7000                       		moveq	#0,d0
000195E2 1029 0028                  		move.b	$28(a1),d0
000195E6 303B 0000                  		move.w	off_19568(pc,d0.w),d0
000195EA 4EFB 0000                  		jmp	off_19568(pc,d0.w)
000195EE                            ; ===========================================================================
000195EE 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
000195F2 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
000195F6                            ; ===========================================================================
000195F6                            
000195F6                            loc_19570:				; XREF: off_19568
000195F6 6000                       		bra.s	loc_19574
000195F8                            ; ===========================================================================
000195F8                            
000195F8                            loc_19572:				; XREF: off_19568
000195F8 7206                       		moveq	#6,d1
000195FA                            
000195FA                            loc_19574:				; XREF: off_19546
000195FA 4A29 0020                  		tst.b	$20(a1)
000195FE 6600                       		bne.s	loc_1957E
00019600 7205                       		moveq	#5,d1
00019602 4E75                       		rts	
00019604                            ; ===========================================================================
00019604                            
00019604                            loc_1957E:
00019604 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001960A 6500                       		bcs.s	locret_19588
0001960C 7204                       		moveq	#4,d1
0001960E                            
0001960E                            locret_19588:
0001960E 4E75                       		rts	
00019610                            ; ===========================================================================
00019610                            
00019610                            Obj75_FlameMain:			; XREF: Obj75_Index
00019610 117C 0007 001C             		move.b	#7,$1C(a0)
00019616 2268 0034                  		movea.l	$34(a0),a1
0001961A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019620 6600                       		bne.s	loc_195AA
00019622 117C 000B 001C             		move.b	#$B,$1C(a0)
00019628 4A28 0001                  		tst.b	1(a0)
0001962C 6A00                       		bpl.s	Obj75_FlameDelete
0001962E 6000                       		bra.s	loc_195B6
00019630                            ; ===========================================================================
00019630                            
00019630                            loc_195AA:
00019630 4A69 0010                  		tst.w	$10(a1)
00019634 6700                       		beq.s	loc_195B6
00019636 117C 0008 001C             		move.b	#8,$1C(a0)
0001963C                            
0001963C                            loc_195B6:
0001963C 6000                       		bra.s	loc_195BE
0001963E                            ; ===========================================================================
0001963E                            
0001963E                            Obj75_FlameDelete:
0001963E 4EF9 0000 D708             		jmp	DeleteObject
00019644                            ; ===========================================================================
00019644                            
00019644                            loc_195BE:
00019644 43F9 0001 7D4C             		lea	(Ani_Eggman).l,a1
0001964A 4EB9 0000 A7F8             		jsr	AnimateSprite
00019650 2268 0034                  		movea.l	$34(a0),a1
00019654 3169 0008 0008             		move.w	8(a1),8(a0)
0001965A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019660                            
00019660                            loc_195DA:
00019660 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019666 7003                       		moveq	#3,d0
00019668 C028 0022                  		and.b	$22(a0),d0
0001966C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019672 8128 0001                  		or.b	d0,1(a0)
00019676 4EF9 0000 D6CC             		jmp	DisplaySprite
0001967C                            ; ===========================================================================
0001967C                            
0001967C                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001967C 217C 0001 7E64 0004        		move.l	#Map_BossItems,4(a0)
00019684 317C 246C 0002             		move.w	#$246C,2(a0)
0001968A 117C 0005 001A             		move.b	#5,$1A(a0)
00019690 2268 0034                  		movea.l	$34(a0),a1
00019694 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001969A 6600                       		bne.s	loc_1961C
0001969C 4A28 0001                  		tst.b	1(a0)
000196A0 6A00                       		bpl.s	Obj75_SpikeDelete
000196A2                            
000196A2                            loc_1961C:
000196A2 3169 0008 0008             		move.w	8(a1),8(a0)
000196A8 3169 000C 000C             		move.w	$C(a1),$C(a0)
000196AE 3028 003C                  		move.w	$3C(a0),d0
000196B2 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000196B8 6600                       		bne.s	loc_19652
000196BA 0C29 0006 0028             		cmpi.b	#6,$28(a1)
000196C0 6700                       		beq.s	loc_1964C
000196C2 4A29 0028                  		tst.b	$28(a1)
000196C6 6600                       		bne.s	loc_19658
000196C8 0C40 0094                  		cmpi.w	#$94,d0
000196CC 6C00                       		bge.s	loc_19658
000196CE 5E40                       		addq.w	#7,d0
000196D0 6000                       		bra.s	loc_19658
000196D2                            ; ===========================================================================
000196D2                            
000196D2                            loc_1964C:
000196D2 4A69 003C                  		tst.w	$3C(a1)
000196D6 6A00                       		bpl.s	loc_19658
000196D8                            
000196D8                            loc_19652:
000196D8 4A40                       		tst.w	d0
000196DA 6F00                       		ble.s	loc_19658
000196DC 5B40                       		subq.w	#5,d0
000196DE                            
000196DE                            loc_19658:
000196DE 3140 003C                  		move.w	d0,$3C(a0)
000196E2 E440                       		asr.w	#2,d0
000196E4 D168 000C                  		add.w	d0,$C(a0)
000196E8 117C 0008 0019             		move.b	#8,$19(a0)
000196EE 117C 000C 0016             		move.b	#$C,$16(a0)
000196F4 4228 0020                  		clr.b	$20(a0)
000196F8 2268 0034                  		movea.l	$34(a0),a1
000196FC 4A29 0020                  		tst.b	$20(a1)
00019700 6700                       		beq.s	loc_19688
00019702 4A29 0029                  		tst.b	$29(a1)
00019706 6600                       		bne.s	loc_19688
00019708 117C 0084 0020             		move.b	#$84,$20(a0)
0001970E                            
0001970E                            loc_19688:
0001970E 6000 FF50                  		bra.w	loc_195DA
00019712                            ; ===========================================================================
00019712                            
00019712                            Obj75_SpikeDelete:
00019712 4EF9 0000 D708             		jmp	DeleteObject
00019718                            ; ===========================================================================
00019718                            ; ---------------------------------------------------------------------------
00019718                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019718                            ; ---------------------------------------------------------------------------
00019718                            
00019718                            Obj76:					; XREF: Obj_Index
00019718 7000                       		moveq	#0,d0
0001971A 1028 0024                  		move.b	$24(a0),d0
0001971E 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019722 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019726                            ; ===========================================================================
00019726 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019728 0000                       		dc.w Obj76_Action-Obj76_Index
0001972A 0000                       		dc.w loc_19762-Obj76_Index
0001972C                            ; ===========================================================================
0001972C                            
0001972C                            Obj76_Main:				; XREF: Obj76_Index
0001972C 7800                       		moveq	#0,d4
0001972E 3A3C 2C10                  		move.w	#$2C10,d5
00019732 7C09                       		moveq	#9,d6
00019734 43D0                       		lea	(a0),a1
00019736 6000                       		bra.s	Obj76_MakeBlock
00019738                            ; ===========================================================================
00019738                            
00019738                            Obj76_Loop:
00019738 4EB9 0000 DB52             		jsr	SingleObjLoad
0001973E 6600                       		bne.s	Obj76_ExitLoop
00019740                            
00019740                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019740 12BC 0076                  		move.b	#$76,(a1)
00019744 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001974C 337C 4000 0002             		move.w	#$4000,2(a1)
00019752 137C 0004 0001             		move.b	#4,1(a1)
00019758 137C 0010 0019             		move.b	#$10,$19(a1)
0001975E 137C 0010 0016             		move.b	#$10,$16(a1)
00019764 137C 0003 0018             		move.b	#3,$18(a1)
0001976A 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001976E 337C 0582 000C             		move.w	#$582,$C(a1)
00019774 3344 0028                  		move.w	d4,$28(a1)
00019778 0644 0101                  		addi.w	#$101,d4
0001977C 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019780 5429 0024                  		addq.b	#2,$24(a1)
00019784 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019788                            
00019788                            Obj76_ExitLoop:
00019788 4E75                       		rts	
0001978A                            ; ===========================================================================
0001978A                            
0001978A                            Obj76_Action:				; XREF: Obj76_Index
0001978A 1028 0029                  		move.b	$29(a0),d0
0001978E B028 0028                  		cmp.b	$28(a0),d0
00019792 6700                       		beq.s	Obj76_Solid
00019794 4A00                       		tst.b	d0
00019796 6B00                       		bmi.s	loc_19718
00019798                            
00019798                            loc_19712:
00019798 6100 0000                  		bsr.w	Obj76_Break
0001979C 6000                       		bra.s	Obj76_Display
0001979E                            ; ===========================================================================
0001979E                            
0001979E                            loc_19718:
0001979E 2268 0034                  		movea.l	$34(a0),a1
000197A2 4A29 0021                  		tst.b	$21(a1)
000197A6 67F0                       		beq.s	loc_19712
000197A8 3169 0008 0008             		move.w	8(a1),8(a0)
000197AE 3169 000C 000C             		move.w	$C(a1),$C(a0)
000197B4 0668 002C 000C             		addi.w	#$2C,$C(a0)
000197BA B2C8                       		cmpa.w	a0,a1
000197BC 6500                       		bcs.s	Obj76_Display
000197BE 3029 0012                  		move.w	$12(a1),d0
000197C2 48C0                       		ext.l	d0
000197C4 E080                       		asr.l	#8,d0
000197C6 D168 000C                  		add.w	d0,$C(a0)
000197CA 6000                       		bra.s	Obj76_Display
000197CC                            ; ===========================================================================
000197CC                            
000197CC                            Obj76_Solid:				; XREF: Obj76_Action
000197CC 323C 001B                  		move.w	#$1B,d1
000197D0 343C 0010                  		move.w	#$10,d2
000197D4 363C 0011                  		move.w	#$11,d3
000197D8 3828 0008                  		move.w	8(a0),d4
000197DC 4EB9 0000 FA9C             		jsr	SolidObject
000197E2                            
000197E2                            Obj76_Display:				; XREF: Obj76_Action
000197E2 4EF9 0000 D6CC             		jmp	DisplaySprite
000197E8                            ; ===========================================================================
000197E8                            
000197E8                            loc_19762:				; XREF: Obj76_Index
000197E8 4A28 0001                  		tst.b	1(a0)
000197EC 6A00                       		bpl.s	Obj76_Delete
000197EE 4EB9 0000 D67A             		jsr	ObjectFall
000197F4 4EF9 0000 D6CC             		jmp	DisplaySprite
000197FA                            ; ===========================================================================
000197FA                            
000197FA                            Obj76_Delete:
000197FA 4EF9 0000 D708             		jmp	DeleteObject
00019800                            
00019800                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019800                            
00019800                            
00019800                            Obj76_Break:				; XREF: Obj76_Action
00019800 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019804 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019808 7801                       		moveq	#1,d4
0001980A 7203                       		moveq	#3,d1
0001980C 7438                       		moveq	#$38,d2
0001980E 5428 0024                  		addq.b	#2,$24(a0)
00019812 117C 0008 0019             		move.b	#8,$19(a0)
00019818 117C 0008 0016             		move.b	#8,$16(a0)
0001981E 43D0                       		lea	(a0),a1
00019820 6000                       		bra.s	Obj76_MakeFrag
00019822                            ; ===========================================================================
00019822                            
00019822                            Obj76_LoopFrag:
00019822 4EB9 0000 DB68             		jsr	SingleObjLoad2
00019828 6600                       		bne.s	loc_197D4
0001982A                            
0001982A                            Obj76_MakeFrag:
0001982A 45D0                       		lea	(a0),a2
0001982C 47D1                       		lea	(a1),a3
0001982E 7603                       		moveq	#3,d3
00019830                            
00019830                            loc_197AA:
00019830 26DA                       		move.l	(a2)+,(a3)+
00019832 26DA                       		move.l	(a2)+,(a3)+
00019834 26DA                       		move.l	(a2)+,(a3)+
00019836 26DA                       		move.l	(a2)+,(a3)+
00019838 51CB FFF6                  		dbf	d3,loc_197AA
0001983C                            
0001983C 335C 0010                  		move.w	(a4)+,$10(a1)
00019840 335C 0012                  		move.w	(a4)+,$12(a1)
00019844 361D                       		move.w	(a5)+,d3
00019846 D769 0008                  		add.w	d3,8(a1)
0001984A 361D                       		move.w	(a5)+,d3
0001984C D769 000C                  		add.w	d3,$C(a1)
00019850 1344 001A                  		move.b	d4,$1A(a1)
00019854 5244                       		addq.w	#1,d4
00019856 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001985A                            
0001985A                            loc_197D4:
0001985A 303C 00CB                  		move.w	#$CB,d0
0001985E 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play smashing sound
00019864                            ; End of function Obj76_Break
00019864                            
00019864                            ; ===========================================================================
00019864 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019868 0180 FE00                  		dc.w $180, $FE00
0001986C FF00 FF00                  		dc.w $FF00, $FF00
00019870 0100 FF00                  		dc.w $100, $FF00
00019874 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019878 0010 0000                  		dc.w $10, 0
0001987C 0000 0010                  		dc.w 0,	$10
00019880 0010 0010                  		dc.w $10, $10
00019884                            ; ---------------------------------------------------------------------------
00019884                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019884                            ; ---------------------------------------------------------------------------
00019884                            Map_obj76:
00019884                            	include "_maps\obj76.asm"
00019884                            ; ---------------------------------------------------------------------------
00019884                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019884                            ; ---------------------------------------------------------------------------
00019884 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019888 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001988C 0000                       		dc.w byte_19826-Map_obj76
0001988E 02                         byte_19808:	dc.b 2
0001988F F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019894 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019899 00                         		dc.b 0
0001989A 01                         byte_19814:	dc.b 1
0001989B F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
000198A0 01                         byte_1981A:	dc.b 1
000198A1 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
000198A6 01                         byte_19820:	dc.b 1
000198A7 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
000198AC 01                         byte_19826:	dc.b 1
000198AD F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
000198B2                            		even
000198B2                            		even
000198B2                            
000198B2                            ; ===========================================================================
000198B2                            
000198B2                            loc_1982C:				; XREF: loc_19C62; loc_19C80
000198B2 4EF9 0000 D708             		jmp	DeleteObject
000198B8                            ; ===========================================================================
000198B8                            ; ---------------------------------------------------------------------------
000198B8                            ; Object 82 - Eggman (SBZ2)
000198B8                            ; ---------------------------------------------------------------------------
000198B8                            
000198B8                            Obj82:					; XREF: Obj_Index
000198B8 7000                       		moveq	#0,d0
000198BA 1028 0024                  		move.b	$24(a0),d0
000198BE 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
000198C2 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
000198C6                            ; ===========================================================================
000198C6 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
000198C8 0000                       		dc.w Obj82_Eggman-Obj82_Index
000198CA 0000                       		dc.w Obj82_Switch-Obj82_Index
000198CC                            
000198CC 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
000198CF 0400 03                    		dc.b 4,	0, 3
000198D2                            ; ===========================================================================
000198D2                            
000198D2                            Obj82_Main:				; XREF: Obj82_Index
000198D2 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
000198D6 317C 2160 0008             		move.w	#$2160,8(a0)
000198DC 317C 05A4 000C             		move.w	#$5A4,$C(a0)
000198E2 117C 000F 0020             		move.b	#$F,$20(a0)
000198E8 117C 0010 0021             		move.b	#$10,$21(a0)
000198EE 08A8 0000 0022             		bclr	#0,$22(a0)
000198F4 4228 0025                  		clr.b	$25(a0)
000198F8 115A 0024                  		move.b	(a2)+,$24(a0)
000198FC 115A 001C                  		move.b	(a2)+,$1C(a0)
00019900 115A 0018                  		move.b	(a2)+,$18(a0)
00019904 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001990C 317C 0400 0002             		move.w	#$400,2(a0)
00019912 117C 0004 0001             		move.b	#4,1(a0)
00019918 08E8 0007 0001             		bset	#7,1(a0)
0001991E 117C 0020 0019             		move.b	#$20,$19(a0)
00019924 4EB9 0000 DB68             		jsr	SingleObjLoad2
0001992A 6600                       		bne.s	Obj82_Eggman
0001992C 2348 0034                  		move.l	a0,$34(a1)
00019930 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019934 337C 2130 0008             		move.w	#$2130,8(a1)
0001993A 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019940 4228 0025                  		clr.b	$25(a0)
00019944 135A 0024                  		move.b	(a2)+,$24(a1)
00019948 135A 001C                  		move.b	(a2)+,$1C(a1)
0001994C 135A 0018                  		move.b	(a2)+,$18(a1)
00019950 237C 0000 BF7A 0004        		move.l	#Map_obj32,4(a1)
00019958 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001995E 137C 0004 0001             		move.b	#4,1(a1)
00019964 08E9 0007 0001             		bset	#7,1(a1)
0001996A 137C 0010 0019             		move.b	#$10,$19(a1)
00019970 137C 0000 001A             		move.b	#0,$1A(a1)
00019976                            
00019976                            Obj82_Eggman:				; XREF: Obj82_Index
00019976 7000                       		moveq	#0,d0
00019978 1028 0025                  		move.b	$25(a0),d0
0001997C 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019980 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019984 43FA 0000                  		lea	Ani_obj82(pc),a1
00019988 4EB9 0000 A7F8             		jsr	AnimateSprite
0001998E 4EF9 0000 D6CC             		jmp	DisplaySprite
00019994                            ; ===========================================================================
00019994 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019996 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019998 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001999A 0000                       		dc.w loc_19934-Obj82_EggIndex
0001999C                            ; ===========================================================================
0001999C                            
0001999C                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001999C 3028 0008                  		move.w	8(a0),d0
000199A0 9078 D008                  		sub.w	($FFFFD008).w,d0
000199A4 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
000199A8 6400                       		bcc.s	loc_19934	; if not, branch
000199AA 5428 0025                  		addq.b	#2,$25(a0)
000199AE 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
000199B4 117C 0001 001C             		move.b	#1,$1C(a0)
000199BA                            
000199BA                            loc_19934:				; XREF: Obj82_EggIndex
000199BA 4EF9 0000 D6A6             		jmp	SpeedToPos
000199C0                            ; ===========================================================================
000199C0                            
000199C0                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
000199C0 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
000199C4 6600                       		bne.s	loc_19954	; if time remains, branch
000199C6 5428 0025                  		addq.b	#2,$25(a0)
000199CA 117C 0002 001C             		move.b	#2,$1C(a0)
000199D0 5868 000C                  		addq.w	#4,$C(a0)
000199D4 317C 000F 003C             		move.w	#15,$3C(a0)
000199DA                            
000199DA                            loc_19954:
000199DA 60DE                       		bra.s	loc_19934
000199DC                            ; ===========================================================================
000199DC                            
000199DC                            Obj82_Leap:				; XREF: Obj82_EggIndex
000199DC 5368 003C                  		subq.w	#1,$3C(a0)
000199E0 6E00                       		bgt.s	loc_199D0
000199E2 6600                       		bne.s	loc_1996A
000199E4 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
000199EA 317C FC40 0012             		move.w	#-$3C0,$12(a0)
000199F0                            
000199F0                            loc_1996A:
000199F0 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
000199F6 6E00                       		bgt.s	loc_19976
000199F8 4268 0010                  		clr.w	$10(a0)
000199FC                            
000199FC                            loc_19976:
000199FC 0668 0024 0012             		addi.w	#$24,$12(a0)
00019A02 4A68 0012                  		tst.w	$12(a0)
00019A06 6B00                       		bmi.s	Obj82_FindBlocks
00019A08 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019A0E 6500                       		bcs.s	Obj82_FindBlocks
00019A10 317C 5357 0028             		move.w	#$5357,$28(a0)
00019A16 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019A1C 6500                       		bcs.s	Obj82_FindBlocks
00019A1E 317C 059B 000C             		move.w	#$59B,$C(a0)
00019A24 4268 0012                  		clr.w	$12(a0)
00019A28                            
00019A28                            Obj82_FindBlocks:
00019A28 3028 0010                  		move.w	$10(a0),d0
00019A2C 8068 0012                  		or.w	$12(a0),d0
00019A30 6600                       		bne.s	loc_199D0
00019A32 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019A36 703E                       		moveq	#$3E,d0
00019A38 7240                       		moveq	#$40,d1
00019A3A                            
00019A3A                            Obj82_FindLoop:	
00019A3A D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019A3C 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019A40 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019A44                            
00019A44 6600                       		bne.s	loc_199D0
00019A46 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019A4C 5428 0025                  		addq.b	#2,$25(a0)
00019A50 117C 0001 001C             		move.b	#1,$1C(a0)
00019A56                            
00019A56                            loc_199D0:
00019A56 6000 FF62                  		bra.w	loc_19934
00019A5A                            ; ===========================================================================
00019A5A                            
00019A5A                            Obj82_Switch:				; XREF: Obj82_Index
00019A5A 7000                       		moveq	#0,d0
00019A5C 1028 0025                  		move.b	$25(a0),d0
00019A60 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019A64 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019A68                            ; ===========================================================================
00019A68 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019A6A 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019A6C                            ; ===========================================================================
00019A6C                            
00019A6C                            loc_199E6:				; XREF: Obj82_SwIndex
00019A6C 2268 0034                  		movea.l	$34(a0),a1
00019A70 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019A76 6600                       		bne.s	Obj82_SwDisplay
00019A78 117C 0001 001A             		move.b	#1,$1A(a0)
00019A7E 5428 0025                  		addq.b	#2,$25(a0)
00019A82                            
00019A82                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019A82 4EF9 0000 D6CC             		jmp	DisplaySprite
00019A88                            ; ===========================================================================
00019A88                            Ani_obj82:
00019A88                            	include "_anim\obj82.asm"
00019A88                            ; ---------------------------------------------------------------------------
00019A88                            ; Animation script - Eggman (SBZ2)
00019A88                            ; ---------------------------------------------------------------------------
00019A88 0000                       		dc.w byte_19A10-Ani_obj82
00019A8A 0000                       		dc.w byte_19A14-Ani_obj82
00019A8C 0000                       		dc.w byte_19A18-Ani_obj82
00019A8E 0000                       		dc.w byte_19A20-Ani_obj82
00019A90 0000                       		dc.w byte_19A24-Ani_obj82
00019A92 0000                       		dc.w byte_19A2A-Ani_obj82
00019A94 0000                       		dc.w byte_19A30-Ani_obj82
00019A96 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00019A9A 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00019A9E 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019AA6 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00019AAA 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019AB0 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019AB6 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00019ABA                            		even
00019ABA                            		even
00019ABA                            
00019ABA                            ; ---------------------------------------------------------------------------
00019ABA                            ; Sprite mappings - Eggman (SBZ2)
00019ABA                            ; ---------------------------------------------------------------------------
00019ABA                            Map_obj82:
00019ABA                            	include "_maps\obj82.asm"
00019ABA                            ; ---------------------------------------------------------------------------
00019ABA                            ; Sprite mappings - Eggman (SBZ2)
00019ABA                            ; ---------------------------------------------------------------------------
00019ABA 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
00019ABE 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00019AC2 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
00019AC6 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
00019ACA 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
00019ACE 0000                       		dc.w byte_19B4F-Map_obj82
00019AD0 03                         byte_19A4A:	dc.b 3
00019AD1 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019AD6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019ADB 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019AE0 04                         byte_19A5A:	dc.b 4
00019AE1 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
00019AE6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019AEB 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019AF0 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019AF5 00                         		dc.b 0
00019AF6 04                         byte_19A70:	dc.b 4
00019AF7 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
00019AFC E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00019B01 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00019B06 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
00019B0B 00                         		dc.b 0
00019B0C 04                         byte_19A86:	dc.b 4
00019B0D F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00019B12 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00019B17 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
00019B1C EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00019B21 00                         		dc.b 0
00019B22 04                         byte_19A9C:	dc.b 4
00019B23 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019B28 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019B2D 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
00019B32 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019B37 00                         		dc.b 0
00019B38 04                         byte_19AB2:	dc.b 4
00019B39 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019B3E E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019B43 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019B48 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019B4D 00                         		dc.b 0
00019B4E 07                         byte_19AC8:	dc.b 7
00019B4F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019B54 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019B59 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019B5E 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019B63 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019B68 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
00019B6D F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
00019B72 05                         byte_19AEC:	dc.b 5
00019B73 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019B78 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019B7D 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019B82 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019B87 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019B8C 06                         byte_19B06:	dc.b 6
00019B8D EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
00019B92 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
00019B97 0905 0844 00               		dc.b 9,	5, 8, $44, 0
00019B9C 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
00019BA1 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
00019BA6 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00019BAB 00                         		dc.b 0
00019BAC 08                         byte_19B26:	dc.b 8
00019BAD E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019BB2 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019BB7 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019BBC 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019BC1 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00019BC6 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
00019BCB 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00019BD0 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00019BD5 03                         byte_19B4F:	dc.b 3
00019BD6 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
00019BDB F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00019BE0 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00019BE6 00                         		even
00019BE6 00                         		even
00019BE6                            
00019BE6                            ; ===========================================================================
00019BE6                            ; ---------------------------------------------------------------------------
00019BE6                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00019BE6                            ; ---------------------------------------------------------------------------
00019BE6                            
00019BE6                            Obj83:					; XREF: Obj_Index
00019BE6 7000                       		moveq	#0,d0
00019BE8 1028 0024                  		move.b	$24(a0),d0
00019BEC 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00019BF0 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00019BF4                            ; ===========================================================================
00019BF4 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00019BF6 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00019BF8 0000                       		dc.w loc_19C36-Obj83_Index
00019BFA 0000                       		dc.w loc_19C62-Obj83_Index
00019BFC 0000                       		dc.w loc_19C72-Obj83_Index
00019BFE 0000                       		dc.w loc_19C80-Obj83_Index
00019C00                            ; ===========================================================================
00019C00                            
00019C00                            Obj83_Main:				; XREF: Obj83_Index
00019C00 317C 2080 0008             		move.w	#$2080,8(a0)
00019C06 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00019C0C 117C 0080 0019             		move.b	#$80,$19(a0)
00019C12 117C 0010 0016             		move.b	#$10,$16(a0)
00019C18 117C 0004 0001             		move.b	#4,1(a0)
00019C1E 08E8 0007 0001             		bset	#7,1(a0)
00019C24 7800                       		moveq	#0,d4
00019C26 3A3C 2010                  		move.w	#$2010,d5
00019C2A 7C07                       		moveq	#7,d6
00019C2C 45E8 0030                  		lea	$30(a0),a2
00019C30                            
00019C30                            Obj83_MakeBlock:
00019C30 4EB9 0000 DB52             		jsr	SingleObjLoad
00019C36 6600                       		bne.s	Obj83_ExitMake
00019C38 34C9                       		move.w	a1,(a2)+
00019C3A 12BC 0083                  		move.b	#$83,(a1)	; load block object
00019C3E 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00019C46 337C 4518 0002             		move.w	#$4518,2(a1)
00019C4C 137C 0004 0001             		move.b	#4,1(a1)
00019C52 137C 0010 0019             		move.b	#$10,$19(a1)
00019C58 137C 0010 0016             		move.b	#$10,$16(a1)
00019C5E 137C 0003 0018             		move.b	#3,$18(a1)
00019C64 3345 0008                  		move.w	d5,8(a1)	; set X	position
00019C68 337C 05D0 000C             		move.w	#$5D0,$C(a1)
00019C6E 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
00019C72 137C 0008 0024             		move.b	#8,$24(a1)
00019C78 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
00019C7C                            
00019C7C                            Obj83_ExitMake:
00019C7C 5428 0024                  		addq.b	#2,$24(a0)
00019C80 4E75                       		rts	
00019C82                            ; ===========================================================================
00019C82                            
00019C82                            Obj83_ChkBreak:				; XREF: Obj83_Index
00019C82 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019C88 6600                       		bne.s	Obj83_Solid	; if not, branch
00019C8A 4228 001A                  		clr.b	$1A(a0)
00019C8E 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
00019C92                            
00019C92                            Obj83_Solid:
00019C92 7000                       		moveq	#0,d0
00019C94 1028 001A                  		move.b	$1A(a0),d0
00019C98 4400                       		neg.b	d0
00019C9A 4880                       		ext.w	d0
00019C9C 5040                       		addq.w	#8,d0
00019C9E E940                       		asl.w	#4,d0
00019CA0 383C 2100                  		move.w	#$2100,d4
00019CA4 9840                       		sub.w	d0,d4
00019CA6 1140 0019                  		move.b	d0,$19(a0)
00019CAA 3144 0008                  		move.w	d4,8(a0)
00019CAE 720B                       		moveq	#$B,d1
00019CB0 D240                       		add.w	d0,d1
00019CB2 7410                       		moveq	#$10,d2
00019CB4 7611                       		moveq	#$11,d3
00019CB6 4EF9 0000 FA9C             		jmp	SolidObject
00019CBC                            ; ===========================================================================
00019CBC                            
00019CBC                            loc_19C36:				; XREF: Obj83_Index
00019CBC 0428 000E 001E             		subi.b	#$E,$1E(a0)
00019CC2 6400                       		bcc.s	Obj83_Solid2
00019CC4 70FF                       		moveq	#-1,d0
00019CC6 1028 001A                  		move.b	$1A(a0),d0
00019CCA 4880                       		ext.w	d0
00019CCC D040                       		add.w	d0,d0
00019CCE 3030 0030                  		move.w	$30(a0,d0.w),d0
00019CD2 2240                       		movea.l	d0,a1
00019CD4 337C 474F 0028             		move.w	#$474F,$28(a1)
00019CDA 5228 001A                  		addq.b	#1,$1A(a0)
00019CDE 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
00019CE4 6700                       		beq.s	loc_19C62
00019CE6                            
00019CE6                            Obj83_Solid2:
00019CE6 60AA                       		bra.s	Obj83_Solid
00019CE8                            ; ===========================================================================
00019CE8                            
00019CE8                            loc_19C62:				; XREF: Obj83_Index
00019CE8 08A8 0003 0022             		bclr	#3,$22(a0)
00019CEE 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00019CF4 6000 FBBC                  		bra.w	loc_1982C
00019CF8                            ; ===========================================================================
00019CF8                            
00019CF8                            loc_19C72:				; XREF: Obj83_Index
00019CF8 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019CFE 6700                       		beq.s	Obj83_Break	; if yes, branch
00019D00 4EF9 0000 D6CC             		jmp	DisplaySprite
00019D06                            ; ===========================================================================
00019D06                            
00019D06                            loc_19C80:				; XREF: Obj83_Index
00019D06 4A28 0001                  		tst.b	1(a0)
00019D0A 6A00 FBA6                  		bpl.w	loc_1982C
00019D0E 4EB9 0000 D67A             		jsr	ObjectFall
00019D14 4EF9 0000 D6CC             		jmp	DisplaySprite
00019D1A                            ; ===========================================================================
00019D1A                            
00019D1A                            Obj83_Break:				; XREF: loc_19C72
00019D1A 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
00019D1E 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
00019D22 7801                       		moveq	#1,d4
00019D24 7203                       		moveq	#3,d1
00019D26 7438                       		moveq	#$38,d2
00019D28 5428 0024                  		addq.b	#2,$24(a0)
00019D2C 117C 0008 0019             		move.b	#8,$19(a0)
00019D32 117C 0008 0016             		move.b	#8,$16(a0)
00019D38 43D0                       		lea	(a0),a1
00019D3A 6000                       		bra.s	Obj83_MakeFrag
00019D3C                            ; ===========================================================================
00019D3C                            
00019D3C                            Obj83_LoopFrag:
00019D3C 4EB9 0000 DB68             		jsr	SingleObjLoad2
00019D42 6600                       		bne.s	Obj83_BreakSnd
00019D44                            
00019D44                            Obj83_MakeFrag:				; XREF: Obj83_Break
00019D44 45D0                       		lea	(a0),a2
00019D46 47D1                       		lea	(a1),a3
00019D48 7603                       		moveq	#3,d3
00019D4A                            
00019D4A                            loc_19CC4:
00019D4A 26DA                       		move.l	(a2)+,(a3)+
00019D4C 26DA                       		move.l	(a2)+,(a3)+
00019D4E 26DA                       		move.l	(a2)+,(a3)+
00019D50 26DA                       		move.l	(a2)+,(a3)+
00019D52 51CB FFF6                  		dbf	d3,loc_19CC4
00019D56                            
00019D56 335C 0012                  		move.w	(a4)+,$12(a1)
00019D5A 361D                       		move.w	(a5)+,d3
00019D5C D769 0008                  		add.w	d3,8(a1)
00019D60 361D                       		move.w	(a5)+,d3
00019D62 D769 000C                  		add.w	d3,$C(a1)
00019D66 1344 001A                  		move.b	d4,$1A(a1)
00019D6A 5244                       		addq.w	#1,d4
00019D6C 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
00019D70                            
00019D70                            Obj83_BreakSnd:
00019D70 303C 00CB                  		move.w	#$CB,d0
00019D74 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play smashing sound
00019D7A 4EF9 0000 D6CC             		jmp	DisplaySprite
00019D80                            ; ===========================================================================
00019D80 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
00019D84 0120 00C0                  		dc.w $120, $C0
00019D88 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
00019D8C 0010 0000                  		dc.w $10, 0
00019D90 0000 0010                  		dc.w 0,	$10
00019D94 0010 0010                  		dc.w $10, $10
00019D98                            ; ---------------------------------------------------------------------------
00019D98                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019D98                            ; ---------------------------------------------------------------------------
00019D98                            Map_obj83:
00019D98                            	include "_maps\obj83.asm"
00019D98                            ; ---------------------------------------------------------------------------
00019D98                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019D98                            ; ---------------------------------------------------------------------------
00019D98 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
00019D9C 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
00019DA0 0000                       		dc.w byte_19D46-Map_obj83
00019DA2 01                         byte_19D1C:	dc.b 1
00019DA3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00019DA8 02                         byte_19D22:	dc.b 2
00019DA9 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
00019DAE F801 0004 00               		dc.b $F8, 1, 0,	4, 0
00019DB3 00                         		dc.b 0
00019DB4 02                         byte_19D2E:	dc.b 2
00019DB5 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019DBA F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
00019DBF 00                         		dc.b 0
00019DC0 02                         byte_19D3A:	dc.b 2
00019DC1 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
00019DC6 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
00019DCB 00                         		dc.b 0
00019DCC 02                         byte_19D46:	dc.b 2
00019DCD F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
00019DD2 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
00019DD8 00                         		even
00019DD8 00                         		even
00019DD8                            
00019DD8                            ; ===========================================================================
00019DD8                            ; ---------------------------------------------------------------------------
00019DD8                            ; Object 85 - Eggman (FZ)
00019DD8                            ; ---------------------------------------------------------------------------
00019DD8                            
00019DD8                            Obj85_Delete:
00019DD8 4EF9 0000 D708             		jmp	DeleteObject
00019DDE                            ; ===========================================================================
00019DDE                            
00019DDE                            Obj85:					; XREF: Obj_Index
00019DDE 7000                       		moveq	#0,d0
00019DE0 1028 0024                  		move.b	$24(a0),d0
00019DE4 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
00019DE8 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
00019DEC                            ; ===========================================================================
00019DEC 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
00019DEE 0000                       		dc.w Obj85_Eggman-Obj85_Index
00019DF0 0000                       		dc.w loc_1A38E-Obj85_Index
00019DF2 0000                       		dc.w loc_1A346-Obj85_Index
00019DF4 0000                       		dc.w loc_1A2C6-Obj85_Index
00019DF6 0000                       		dc.w loc_1A3AC-Obj85_Index
00019DF8 0000                       		dc.w loc_1A264-Obj85_Index
00019DFA                            
00019DFA 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
00019E00 0001 9ABA                  		dc.l Map_obj82		; mappings pointer
00019E04 25B0 0590 0300             		dc.w $25B0, $590, $300
00019E0A 0000 0000                  		dc.l Map_obj84
00019E0E 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
00019E14 0000 0000                  		dc.l Map_FZBoss
00019E18 26E0 0596 0470             		dc.w $26E0, $596, $470
00019E1E 0001 9ABA                  		dc.l Map_obj82
00019E22 26E0 0596 0400             		dc.w $26E0, $596, $400
00019E28 0001 7D9C                  		dc.l Map_Eggman
00019E2C 26E0 0596 0400             		dc.w $26E0, $596, $400
00019E32 0001 7D9C                  		dc.l Map_Eggman
00019E36                            
00019E36 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
00019E3B 0400 0112 08               		dc.b 4,	0, 1, $12, 8
00019E40 0600 0300 00               		dc.b 6,	0, 3, 0, 0
00019E45 0800 0300 00               		dc.b 8,	0, 3, 0, 0
00019E4A 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
00019E4F 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
00019E54                            ; ===========================================================================
00019E54                            
00019E54                            Obj85_Main:				; XREF: Obj85_Index
00019E54 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
00019E58 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
00019E5C 2248                       		movea.l	a0,a1
00019E5E 7205                       		moveq	#5,d1
00019E60 6000                       		bra.s	Obj85_LoadBoss
00019E62                            ; ===========================================================================
00019E62                            
00019E62                            Obj85_Loop:
00019E62 4EB9 0000 DB68             		jsr	SingleObjLoad2
00019E68 6600                       		bne.s	loc_19E20
00019E6A                            
00019E6A                            Obj85_LoadBoss:				; XREF: Obj85_Main
00019E6A 12BC 0085                  		move.b	#$85,(a1)
00019E6E 335A 0008                  		move.w	(a2)+,8(a1)
00019E72 335A 000C                  		move.w	(a2)+,$C(a1)
00019E76 335A 0002                  		move.w	(a2)+,2(a1)
00019E7A 235A 0004                  		move.l	(a2)+,4(a1)
00019E7E 135B 0024                  		move.b	(a3)+,$24(a1)
00019E82 135B 001C                  		move.b	(a3)+,$1C(a1)
00019E86 135B 0018                  		move.b	(a3)+,$18(a1)
00019E8A 135B 0017                  		move.b	(a3)+,$17(a1)
00019E8E 135B 0016                  		move.b	(a3)+,$16(a1)
00019E92 137C 0004 0001             		move.b	#4,1(a1)
00019E98 08E8 0007 0001             		bset	#7,1(a0)
00019E9E 2348 0034                  		move.l	a0,$34(a1)
00019EA2 51C9 FFBE                  		dbf	d1,Obj85_Loop
00019EA6                            
00019EA6                            loc_19E20:
00019EA6 45E8 0036                  		lea	$36(a0),a2
00019EAA 4EB9 0000 DB52             		jsr	SingleObjLoad
00019EB0 6600                       		bne.s	loc_19E5A
00019EB2 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
00019EB6 3489                       		move.w	a1,(a2)
00019EB8 2348 0034                  		move.l	a0,$34(a1)
00019EBC 45E8 0038                  		lea	$38(a0),a2
00019EC0 7400                       		moveq	#0,d2
00019EC2 7203                       		moveq	#3,d1
00019EC4                            
00019EC4                            loc_19E3E:
00019EC4 4EB9 0000 DB68             		jsr	SingleObjLoad2
00019ECA 6600                       		bne.s	loc_19E5A
00019ECC 34C9                       		move.w	a1,(a2)+
00019ECE 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
00019ED2 2348 0034                  		move.l	a0,$34(a1)
00019ED6 1342 0028                  		move.b	d2,$28(a1)
00019EDA 5442                       		addq.w	#2,d2
00019EDC 51C9 FFE6                  		dbf	d1,loc_19E3E
00019EE0                            
00019EE0                            loc_19E5A:
00019EE0 317C 0000 0034             		move.w	#0,$34(a0)
00019EE6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019EEC 317C FFFF 0030             		move.w	#-1,$30(a0)
00019EF2                            
00019EF2                            Obj85_Eggman:				; XREF: Obj85_Index
00019EF2 7000                       		moveq	#0,d0
00019EF4 1028 0034                  		move.b	$34(a0),d0
00019EF8 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
00019EFC 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
00019F00 4EF9 0000 D6CC             		jmp	DisplaySprite
00019F06                            ; ===========================================================================
00019F06 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
00019F0A 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
00019F0E 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
00019F12 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
00019F16                            ; ===========================================================================
00019F16                            
00019F16                            loc_19E90:				; XREF: off_19E80
00019F16 4AB8 F680                  		tst.l	($FFFFF680).w
00019F1A 6600                       		bne.s	loc_19EA2
00019F1C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00019F22 6500                       		bcs.s	loc_19EA2
00019F24 5428 0034                  		addq.b	#2,$34(a0)
00019F28                            
00019F28                            loc_19EA2:
00019F28 52B8 F636                  		addq.l	#1,($FFFFF636).w
00019F2C 4E75                       		rts	
00019F2E                            ; ===========================================================================
00019F2E                            
00019F2E                            loc_19EA8:				; XREF: off_19E80
00019F2E 4A68 0030                  		tst.w	$30(a0)
00019F32 6A00                       		bpl.s	loc_19F10
00019F34 4268 0030                  		clr.w	$30(a0)
00019F38 4EB9 0000 29B4             		jsr	(RandomNumber).l
00019F3E 0240 000C                  		andi.w	#$C,d0
00019F42 3200                       		move.w	d0,d1
00019F44 5441                       		addq.w	#2,d1
00019F46 4A80                       		tst.l	d0
00019F48 6A00                       		bpl.s	loc_19EC6
00019F4A C141                       		exg	d1,d0
00019F4C                            
00019F4C                            loc_19EC6:
00019F4C 43FA 0000                  		lea	word_19FD6(pc),a1
00019F50 3031 0000                  		move.w	(a1,d0.w),d0
00019F54 3231 1000                  		move.w	(a1,d1.w),d1
00019F58 3140 0030                  		move.w	d0,$30(a0)
00019F5C 74FF                       		moveq	#-1,d2
00019F5E 3430 0038                  		move.w	$38(a0,d0.w),d2
00019F62 2242                       		movea.l	d2,a1
00019F64 137C 00FF 0029             		move.b	#-1,$29(a1)
00019F6A 337C FFFF 0030             		move.w	#-1,$30(a1)
00019F70 3430 1038                  		move.w	$38(a0,d1.w),d2
00019F74 2242                       		movea.l	d2,a1
00019F76 137C 0001 0029             		move.b	#1,$29(a1)
00019F7C 337C 0000 0030             		move.w	#0,$30(a1)
00019F82 317C 0001 0032             		move.w	#1,$32(a0)
00019F88 4228 0035                  		clr.b	$35(a0)
00019F8C 303C 00B7                  		move.w	#$B7,d0
00019F90 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rumbling sound
00019F96                            
00019F96                            loc_19F10:
00019F96 4A68 0032                  		tst.w	$32(a0)
00019F9A 6B00 0000                  		bmi.w	loc_19FA6
00019F9E 08A8 0000 0022             		bclr	#0,$22(a0)
00019FA4 3038 D008                  		move.w	($FFFFD008).w,d0
00019FA8 9068 0008                  		sub.w	8(a0),d0
00019FAC 6500                       		bcs.s	loc_19F2E
00019FAE 08E8 0000 0022             		bset	#0,$22(a0)
00019FB4                            
00019FB4                            loc_19F2E:
00019FB4 323C 002B                  		move.w	#$2B,d1
00019FB8 343C 0014                  		move.w	#$14,d2
00019FBC 363C 0014                  		move.w	#$14,d3
00019FC0 3828 0008                  		move.w	8(a0),d4
00019FC4 4EB9 0000 FA9C             		jsr	SolidObject
00019FCA 4A44                       		tst.w	d4
00019FCC 6E00                       		bgt.s	loc_19F50
00019FCE                            
00019FCE                            loc_19F48:
00019FCE 4A28 0035                  		tst.b	$35(a0)
00019FD2 6600                       		bne.s	loc_19F88
00019FD4 6000                       		bra.s	loc_19F96
00019FD6                            ; ===========================================================================
00019FD6                            
00019FD6                            loc_19F50:
00019FD6 5E78 F636                  		addq.w	#7,($FFFFF636).w
00019FDA 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
00019FE0 66EC                       		bne.s	loc_19F48
00019FE2 303C 0300                  		move.w	#$300,d0
00019FE6 0828 0000 0022             		btst	#0,$22(a0)
00019FEC 6600                       		bne.s	loc_19F6A
00019FEE 4440                       		neg.w	d0
00019FF0                            
00019FF0                            loc_19F6A:
00019FF0 31C0 D010                  		move.w	d0,($FFFFD010).w
00019FF4 4A28 0035                  		tst.b	$35(a0)
00019FF8 6600                       		bne.s	loc_19F88
00019FFA 5328 0021                  		subq.b	#1,$21(a0)
00019FFE 117C 0064 0035             		move.b	#$64,$35(a0)
0001A004 303C 00AC                  		move.w	#$AC,d0
0001A008 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A00E                            
0001A00E                            loc_19F88:
0001A00E 5328 0035                  		subq.b	#1,$35(a0)
0001A012 6700                       		beq.s	loc_19F96
0001A014 117C 0003 001C             		move.b	#3,$1C(a0)
0001A01A 6000                       		bra.s	loc_19F9C
0001A01C                            ; ===========================================================================
0001A01C                            
0001A01C                            loc_19F96:
0001A01C 117C 0001 001C             		move.b	#1,$1C(a0)
0001A022                            
0001A022                            loc_19F9C:
0001A022 43FA FA64                  		lea	Ani_obj82(pc),a1
0001A026 4EF9 0000 A7F8             		jmp	AnimateSprite
0001A02C                            ; ===========================================================================
0001A02C                            
0001A02C                            loc_19FA6:
0001A02C 4A28 0021                  		tst.b	$21(a0)
0001A030 6700                       		beq.s	loc_19FBC
0001A032 5428 0034                  		addq.b	#2,$34(a0)
0001A036 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A03C 4268 0032                  		clr.w	$32(a0)
0001A040 4E75                       		rts	
0001A042                            ; ===========================================================================
0001A042                            
0001A042                            loc_19FBC:
0001A042 117C 0006 0034             		move.b	#6,$34(a0)
0001A048 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A04E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A054 117C 0014 0016             		move.b	#$14,$16(a0)
0001A05A 4E75                       		rts	
0001A05C                            ; ===========================================================================
0001A05C 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A06C                            ; ===========================================================================
0001A06C                            
0001A06C                            loc_19FE6:				; XREF: off_19E80
0001A06C 70FF                       		moveq	#-1,d0
0001A06E 3028 0036                  		move.w	$36(a0),d0
0001A072 2240                       		movea.l	d0,a1
0001A074 4A68 0030                  		tst.w	$30(a0)
0001A078 6A00                       		bpl.s	loc_1A000
0001A07A 4268 0030                  		clr.w	$30(a0)
0001A07E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A084 6100                       		bsr.s	loc_1A020
0001A086                            
0001A086                            loc_1A000:
0001A086 700F                       		moveq	#$F,d0
0001A088 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A08C 6600                       		bne.s	loc_1A00A
0001A08E 6100                       		bsr.s	loc_1A020
0001A090                            
0001A090                            loc_1A00A:
0001A090 4A68 0032                  		tst.w	$32(a0)
0001A094 6700                       		beq.s	locret_1A01E
0001A096 5528 0034                  		subq.b	#2,$34(a0)
0001A09A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A0A0 4268 0032                  		clr.w	$32(a0)
0001A0A4                            
0001A0A4                            locret_1A01E:
0001A0A4 4E75                       		rts	
0001A0A6                            ; ===========================================================================
0001A0A6                            
0001A0A6                            loc_1A020:
0001A0A6 303C 00B1                  		move.w	#$B1,d0
0001A0AA 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A0B0                            ; ===========================================================================
0001A0B0                            
0001A0B0                            loc_1A02A:				; XREF: off_19E80
0001A0B0 117C 0030 0017             		move.b	#$30,$17(a0)
0001A0B6 08E8 0000 0022             		bset	#0,$22(a0)
0001A0BC 4EB9 0000 D6A6             		jsr	SpeedToPos
0001A0C2 117C 0006 001A             		move.b	#6,$1A(a0)
0001A0C8 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A0CE 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A0D4 6500                       		bcs.s	loc_1A070
0001A0D6 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A0DC 5428 0034                  		addq.b	#2,$34(a0)
0001A0E0 117C 0020 0017             		move.b	#$20,$17(a0)
0001A0E6 317C 0100 0010             		move.w	#$100,$10(a0)
0001A0EC 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A0F2 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A0F6                            
0001A0F6                            loc_1A070:
0001A0F6 6000 0000                  		bra.w	loc_1A166
0001A0FA                            ; ===========================================================================
0001A0FA                            
0001A0FA                            loc_1A074:				; XREF: off_19E80
0001A0FA 08E8 0000 0022             		bset	#0,$22(a0)
0001A100 117C 0004 001C             		move.b	#4,$1C(a0)
0001A106 4EB9 0000 D6A6             		jsr	SpeedToPos
0001A10C 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A112 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A118 6500                       		bcs.s	loc_1A09A
0001A11A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A120                            
0001A120                            loc_1A09A:
0001A120 317C 0400 0010             		move.w	#$400,$10(a0)
0001A126 3028 0008                  		move.w	8(a0),d0
0001A12A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A12E 6A00                       		bpl.s	loc_1A0B4
0001A130 317C 0500 0010             		move.w	#$500,$10(a0)
0001A136 6000 0000                  		bra.w	loc_1A0F2
0001A13A                            ; ===========================================================================
0001A13A                            
0001A13A                            loc_1A0B4:
0001A13A 0440 0070                  		subi.w	#$70,d0
0001A13E 6500                       		bcs.s	loc_1A0F2
0001A140 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A146 5140                       		subq.w	#8,d0
0001A148 6500                       		bcs.s	loc_1A0F2
0001A14A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A150 5140                       		subq.w	#8,d0
0001A152 6500                       		bcs.s	loc_1A0F2
0001A154 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A15A 5140                       		subq.w	#8,d0
0001A15C 6500                       		bcs.s	loc_1A0F2
0001A15E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A164 5140                       		subq.w	#8,d0
0001A166 6500                       		bcs.s	loc_1A0F2
0001A168 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A16E 0440 0038                  		subi.w	#$38,d0
0001A172 6500                       		bcs.s	loc_1A0F2
0001A174 4268 0010                  		clr.w	$10(a0)
0001A178                            
0001A178                            loc_1A0F2:
0001A178 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A17E 6500                       		bcs.s	loc_1A110
0001A180 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A186 317C 0240 0010             		move.w	#$240,$10(a0)
0001A18C 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A192 5428 0034                  		addq.b	#2,$34(a0)
0001A196                            
0001A196                            loc_1A110:
0001A196 6000                       		bra.s	loc_1A15C
0001A198                            ; ===========================================================================
0001A198                            
0001A198                            loc_1A112:				; XREF: off_19E80
0001A198 4EB9 0000 D6A6             		jsr	SpeedToPos
0001A19E 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A1A4 6500                       		bcs.s	loc_1A124
0001A1A6 4268 0010                  		clr.w	$10(a0)
0001A1AA                            
0001A1AA                            loc_1A124:
0001A1AA 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A1B0 4A68 0012                  		tst.w	$12(a0)
0001A1B4 6B00                       		bmi.s	loc_1A142
0001A1B6 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A1BC 6500                       		bcs.s	loc_1A142
0001A1BE 317C 0592 000C             		move.w	#$592,$C(a0)
0001A1C4 4268 0012                  		clr.w	$12(a0)
0001A1C8                            
0001A1C8                            loc_1A142:
0001A1C8 3028 0010                  		move.w	$10(a0),d0
0001A1CC 8068 0012                  		or.w	$12(a0),d0
0001A1D0 6600                       		bne.s	loc_1A15C
0001A1D2 5428 0034                  		addq.b	#2,$34(a0)
0001A1D6 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A1DC 117C 0001 0021             		move.b	#1,$21(a0)
0001A1E2                            
0001A1E2                            loc_1A15C:
0001A1E2 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001A1E6 4EB9 0000 A7F8             		jsr	AnimateSprite
0001A1EC                            
0001A1EC                            loc_1A166:
0001A1EC 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A1F2 6C00                       		bge.s	loc_1A172
0001A1F4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A1F8                            
0001A1F8                            loc_1A172:
0001A1F8 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A1FE 6C00                       		bge.s	locret_1A190
0001A200 323C 001B                  		move.w	#$1B,d1
0001A204 343C 0070                  		move.w	#$70,d2
0001A208 363C 0071                  		move.w	#$71,d3
0001A20C 3828 0008                  		move.w	8(a0),d4
0001A210 4EF9 0000 FA9C             		jmp	SolidObject
0001A216                            ; ===========================================================================
0001A216                            
0001A216                            locret_1A190:
0001A216 4E75                       		rts	
0001A218                            ; ===========================================================================
0001A218                            
0001A218                            loc_1A192:				; XREF: off_19E80
0001A218 217C 0001 7D9C 0004        		move.l	#Map_Eggman,4(a0)
0001A220 317C 0400 0002             		move.w	#$400,2(a0)
0001A226 117C 0000 001C             		move.b	#0,$1C(a0)
0001A22C 08E8 0000 0022             		bset	#0,$22(a0)
0001A232 4EB9 0000 D6A6             		jsr	SpeedToPos
0001A238 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A23E 6400                       		bcc.s	loc_1A1D0
0001A240 317C 0180 0010             		move.w	#$180,$10(a0)
0001A246 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A24C 117C 000F 0020             		move.b	#$F,$20(a0)
0001A252 5428 0034                  		addq.b	#2,$34(a0)
0001A256                            
0001A256                            loc_1A1D0:
0001A256 6000 FF8A                  		bra.w	loc_1A15C
0001A25A                            ; ===========================================================================
0001A25A                            
0001A25A                            loc_1A1D4:				; XREF: off_19E80
0001A25A 08E8 0000 0022             		bset	#0,$22(a0)
0001A260 4EB9 0000 D6A6             		jsr	SpeedToPos
0001A266 4A68 0030                  		tst.w	$30(a0)
0001A26A 6600                       		bne.s	loc_1A1FC
0001A26C 4A28 0020                  		tst.b	$20(a0)
0001A270 6600                       		bne.s	loc_1A216
0001A272 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A278 303C 00AC                  		move.w	#$AC,d0
0001A27C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A282                            
0001A282                            loc_1A1FC:
0001A282 5368 0030                  		subq.w	#1,$30(a0)
0001A286 6600                       		bne.s	loc_1A216
0001A288 4A28 0022                  		tst.b	$22(a0)
0001A28C 6A00                       		bpl.s	loc_1A210
0001A28E 317C 0060 0012             		move.w	#$60,$12(a0)
0001A294 6000                       		bra.s	loc_1A216
0001A296                            ; ===========================================================================
0001A296                            
0001A296                            loc_1A210:
0001A296 117C 000F 0020             		move.b	#$F,$20(a0)
0001A29C                            
0001A29C                            loc_1A216:
0001A29C 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A2A2 6D00                       		blt.s	loc_1A23A
0001A2A4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A2AA 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A2B0 4278 D014                  		clr.w	($FFFFD014).w
0001A2B4 4A68 0012                  		tst.w	$12(a0)
0001A2B8 6A00                       		bpl.s	loc_1A248
0001A2BA 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A2C0                            
0001A2C0                            loc_1A23A:
0001A2C0 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A2C6 6D00                       		blt.s	loc_1A248
0001A2C8 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A2CE                            
0001A2CE                            loc_1A248:
0001A2CE 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A2D4 6500                       		bcs.s	loc_1A260
0001A2D6 4A28 0001                  		tst.b	1(a0)
0001A2DA 6B00                       		bmi.s	loc_1A260
0001A2DC 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A2E2 6000 FAF4                  		bra.w	Obj85_Delete
0001A2E6                            ; ===========================================================================
0001A2E6                            
0001A2E6                            loc_1A260:
0001A2E6 6000 FEFA                  		bra.w	loc_1A15C
0001A2EA                            ; ===========================================================================
0001A2EA                            
0001A2EA                            loc_1A264:				; XREF: Obj85_Index
0001A2EA 2268 0034                  		movea.l	$34(a0),a1
0001A2EE 1011                       		move.b	(a1),d0
0001A2F0 B010                       		cmp.b	(a0),d0
0001A2F2 6600 FAE4                  		bne.w	Obj85_Delete
0001A2F6 117C 0007 001C             		move.b	#7,$1C(a0)
0001A2FC 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A302 6C00                       		bge.s	loc_1A280
0001A304 6000                       		bra.s	loc_1A2A6
0001A306                            ; ===========================================================================
0001A306                            
0001A306                            loc_1A280:
0001A306 4A69 0010                  		tst.w	$10(a1)
0001A30A 6700                       		beq.s	loc_1A28C
0001A30C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A312                            
0001A312                            loc_1A28C:
0001A312 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001A316 4EB9 0000 A7F8             		jsr	AnimateSprite
0001A31C                            
0001A31C                            loc_1A296:
0001A31C 2268 0034                  		movea.l	$34(a0),a1
0001A320 3169 0008 0008             		move.w	8(a1),8(a0)
0001A326 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A32C                            
0001A32C                            loc_1A2A6:
0001A32C 2268 0034                  		movea.l	$34(a0),a1
0001A330 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A336 7003                       		moveq	#3,d0
0001A338 C028 0022                  		and.b	$22(a0),d0
0001A33C 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A342 8128 0001                  		or.b	d0,1(a0)
0001A346 4EF9 0000 D6CC             		jmp	DisplaySprite
0001A34C                            ; ===========================================================================
0001A34C                            
0001A34C                            loc_1A2C6:				; XREF: Obj85_Index
0001A34C 2268 0034                  		movea.l	$34(a0),a1
0001A350 1011                       		move.b	(a1),d0
0001A352 B010                       		cmp.b	(a0),d0
0001A354 6600 FA82                  		bne.w	Obj85_Delete
0001A358 0CA9 0001 7D9C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A360 6700                       		beq.s	loc_1A2E4
0001A362 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A368 60C2                       		bra.s	loc_1A2A6
0001A36A                            ; ===========================================================================
0001A36A                            
0001A36A                            loc_1A2E4:
0001A36A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A370 4A29 0021                  		tst.b	$21(a1)
0001A374 6F00                       		ble.s	loc_1A312
0001A376 117C 0006 001C             		move.b	#6,$1C(a0)
0001A37C 217C 0001 7D9C 0004        		move.l	#Map_Eggman,4(a0)
0001A384 317C 0400 0002             		move.w	#$400,2(a0)
0001A38A 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001A38E 4EB9 0000 A7F8             		jsr	AnimateSprite
0001A394 6000 FF86                  		bra.w	loc_1A296
0001A398                            ; ===========================================================================
0001A398                            
0001A398                            loc_1A312:
0001A398 4A28 0001                  		tst.b	1(a0)
0001A39C 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A3A0 6100 D558                  		bsr.w	BossDefeated
0001A3A4 117C 0002 0018             		move.b	#2,$18(a0)
0001A3AA 117C 0000 001C             		move.b	#0,$1C(a0)
0001A3B0 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A3B8 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A3BE 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A3C2 4EB9 0000 A7F8             		jsr	AnimateSprite
0001A3C8 6000 FF52                  		bra.w	loc_1A296
0001A3CC                            ; ===========================================================================
0001A3CC                            
0001A3CC                            loc_1A346:				; XREF: Obj85_Index
0001A3CC 08E8 0000 0022             		bset	#0,$22(a0)
0001A3D2 2268 0034                  		movea.l	$34(a0),a1
0001A3D6 0CA9 0001 7D9C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A3DE 6700                       		beq.s	loc_1A35E
0001A3E0 6000 FF4A                  		bra.w	loc_1A2A6
0001A3E4                            ; ===========================================================================
0001A3E4                            
0001A3E4                            loc_1A35E:
0001A3E4 3169 0008 0008             		move.w	8(a1),8(a0)
0001A3EA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A3F0 4A28 001E                  		tst.b	$1E(a0)
0001A3F4 6600                       		bne.s	loc_1A376
0001A3F6 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A3FC                            
0001A3FC                            loc_1A376:
0001A3FC 5328 001E                  		subq.b	#1,$1E(a0)
0001A400 6E00                       		bgt.s	loc_1A38A
0001A402 5228 001A                  		addq.b	#1,$1A(a0)
0001A406 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A40C 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A410                            
0001A410                            loc_1A38A:
0001A410 6000 FF0A                  		bra.w	loc_1A296
0001A414                            ; ===========================================================================
0001A414                            
0001A414                            loc_1A38E:				; XREF: Obj85_Index
0001A414 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A41A 3038 D008                  		move.w	($FFFFD008).w,d0
0001A41E 9068 0008                  		sub.w	8(a0),d0
0001A422 6500                       		bcs.s	loc_1A3A6
0001A424 4A28 0001                  		tst.b	1(a0)
0001A428 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A42C                            
0001A42C                            loc_1A3A6:
0001A42C 4EF9 0000 D6CC             		jmp	DisplaySprite
0001A432                            ; ===========================================================================
0001A432                            
0001A432                            loc_1A3AC:				; XREF: Obj85_Index
0001A432 117C 0000 001A             		move.b	#0,$1A(a0)
0001A438 08E8 0000 0022             		bset	#0,$22(a0)
0001A43E 2268 0034                  		movea.l	$34(a0),a1
0001A442 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A448 6600                       		bne.s	loc_1A3D0
0001A44A 0CA9 0001 7D9C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A452 6700 F984                  		beq.w	Obj85_Delete
0001A456                            
0001A456                            loc_1A3D0:
0001A456 6000 FED4                  		bra.w	loc_1A2A6
0001A45A                            ; ===========================================================================
0001A45A                            Ani_obj85:
0001A45A                            	include "_anim\obj85.asm"
0001A45A                            ; ---------------------------------------------------------------------------
0001A45A                            ; Animation script - Eggman (FZ)
0001A45A                            ; ---------------------------------------------------------------------------
0001A45A 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A45C 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A460                            		even
0001A460                            		even
0001A460                            
0001A460                            Map_Eggman2:
0001A460                            	include "_maps\Eggman2.asm"
0001A460                            ; ---------------------------------------------------------------------------
0001A460                            ; Sprite mappings - Eggman (FZ)
0001A460                            ; ---------------------------------------------------------------------------
0001A460 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A462 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A464 06                         byte_1A3DE:	dc.b 6
0001A465 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A46A EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A46F EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A474 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A479 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A47E 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A483 06                         byte_1A3FD:	dc.b 6
0001A484 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A489 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A48E EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A493 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A498 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A49D 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A4A2                            		even
0001A4A2                            		even
0001A4A2                            
0001A4A2                            Map_FZBoss:
0001A4A2                            	include "_maps\FZ boss.asm"
0001A4A2                            ; ---------------------------------------------------------------------------
0001A4A2                            ; Sprite mappings - boss (FZ)
0001A4A2                            ; ---------------------------------------------------------------------------
0001A4A2 0000                       		dc.w byte_1A422-Map_FZBoss
0001A4A4 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A4A6 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A4A8 02                         byte_1A422:	dc.b 2
0001A4A9 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A4AE 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A4B3 03                         byte_1A42D:	dc.b 3
0001A4B4 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A4B9 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A4BE 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A4C3 02                         byte_1A43D:	dc.b 2
0001A4C4 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A4C9 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A4CE                            		even
0001A4CE                            		even
0001A4CE                            
0001A4CE                            ; ===========================================================================
0001A4CE                            
0001A4CE                            Obj84_Delete:
0001A4CE 4EF9 0000 D708             		jmp	DeleteObject
0001A4D4                            ; ===========================================================================
0001A4D4                            ; ---------------------------------------------------------------------------
0001A4D4                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001A4D4                            ; ---------------------------------------------------------------------------
0001A4D4                            
0001A4D4                            Obj84:					; XREF: Obj_Index
0001A4D4 7000                       		moveq	#0,d0
0001A4D6 1028 0024                  		move.b	$24(a0),d0
0001A4DA 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001A4DE 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001A4E2                            ; ===========================================================================
0001A4E2 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001A4E4 0000                       		dc.w loc_1A4CE-Obj84_Index
0001A4E6 0000                       		dc.w loc_1A57E-Obj84_Index
0001A4E8                            
0001A4E8 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001A4EC 2550 0620                  		dc.w $2550, $620
0001A4F0 2490 04C0                  		dc.w $2490, $4C0
0001A4F4 2510 04C0                  		dc.w $2510, $4C0
0001A4F8                            ; ===========================================================================
0001A4F8                            
0001A4F8                            Obj84_Main:				; XREF: Obj84_Index
0001A4F8 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001A4FC 7000                       		moveq	#0,d0
0001A4FE 1028 0028                  		move.b	$28(a0),d0
0001A502 D040                       		add.w	d0,d0
0001A504 D2C0                       		adda.w	d0,a1
0001A506 117C 0004 0001             		move.b	#4,1(a0)
0001A50C 08E8 0007 0001             		bset	#7,1(a0)
0001A512 08E8 0004 0001             		bset	#4,1(a0)
0001A518 317C 0300 0002             		move.w	#$300,2(a0)
0001A51E 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001A526 3159 0008                  		move.w	(a1)+,8(a0)
0001A52A 3151 000C                  		move.w	(a1),$C(a0)
0001A52E 3159 0038                  		move.w	(a1)+,$38(a0)
0001A532 117C 0020 0016             		move.b	#$20,$16(a0)
0001A538 117C 0060 0017             		move.b	#$60,$17(a0)
0001A53E 117C 0020 0019             		move.b	#$20,$19(a0)
0001A544 117C 0060 0016             		move.b	#$60,$16(a0)
0001A54A 117C 0003 0018             		move.b	#3,$18(a0)
0001A550 5428 0024                  		addq.b	#2,$24(a0)
0001A554                            
0001A554                            loc_1A4CE:				; XREF: Obj84_Index
0001A554 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A55A 6F00                       		ble.s	loc_1A4DC
0001A55C 08E8 0001 0001             		bset	#1,1(a0)
0001A562                            
0001A562                            loc_1A4DC:
0001A562 42A8 003C                  		clr.l	$3C(a0)
0001A566 4A28 0029                  		tst.b	$29(a0)
0001A56A 6700                       		beq.s	loc_1A4EA
0001A56C 5428 0024                  		addq.b	#2,$24(a0)
0001A570                            
0001A570                            loc_1A4EA:
0001A570 2028 003C                  		move.l	$3C(a0),d0
0001A574 2228 0038                  		move.l	$38(a0),d1
0001A578 D280                       		add.l	d0,d1
0001A57A 4841                       		swap	d1
0001A57C 3141 000C                  		move.w	d1,$C(a0)
0001A580 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001A586 6600                       		bne.s	loc_1A524
0001A588 4A68 0030                  		tst.w	$30(a0)
0001A58C 6A00                       		bpl.s	loc_1A524
0001A58E 70F6                       		moveq	#-$A,d0
0001A590 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A596 6F00                       		ble.s	loc_1A514
0001A598 700E                       		moveq	#$E,d0
0001A59A                            
0001A59A                            loc_1A514:
0001A59A D240                       		add.w	d0,d1
0001A59C 2268 0034                  		movea.l	$34(a0),a1
0001A5A0 3341 000C                  		move.w	d1,$C(a1)
0001A5A4 3368 0008 0008             		move.w	8(a0),8(a1)
0001A5AA                            
0001A5AA                            loc_1A524:
0001A5AA 323C 002B                  		move.w	#$2B,d1
0001A5AE 343C 0060                  		move.w	#$60,d2
0001A5B2 363C 0061                  		move.w	#$61,d3
0001A5B6 3828 0008                  		move.w	8(a0),d4
0001A5BA 4EB9 0000 FA9C             		jsr	SolidObject
0001A5C0 7000                       		moveq	#0,d0
0001A5C2 3228 003C                  		move.w	$3C(a0),d1
0001A5C6 6A00                       		bpl.s	loc_1A550
0001A5C8 4441                       		neg.w	d1
0001A5CA 5141                       		subq.w	#8,d1
0001A5CC 6500                       		bcs.s	loc_1A55C
0001A5CE 5200                       		addq.b	#1,d0
0001A5D0 E841                       		asr.w	#4,d1
0001A5D2 D041                       		add.w	d1,d0
0001A5D4 6000                       		bra.s	loc_1A55C
0001A5D6                            ; ===========================================================================
0001A5D6                            
0001A5D6                            loc_1A550:
0001A5D6 0441 0027                  		subi.w	#$27,d1
0001A5DA 6500                       		bcs.s	loc_1A55C
0001A5DC 5200                       		addq.b	#1,d0
0001A5DE E841                       		asr.w	#4,d1
0001A5E0 D041                       		add.w	d1,d0
0001A5E2                            
0001A5E2                            loc_1A55C:
0001A5E2 1140 001A                  		move.b	d0,$1A(a0)
0001A5E6 3038 D008                  		move.w	($FFFFD008).w,d0
0001A5EA 9068 0008                  		sub.w	8(a0),d0
0001A5EE 6B00                       		bmi.s	loc_1A578
0001A5F0 0440 0140                  		subi.w	#$140,d0
0001A5F4 6B00                       		bmi.s	loc_1A578
0001A5F6 4A28 0001                  		tst.b	1(a0)
0001A5FA 6A00 FED2                  		bpl.w	Obj84_Delete
0001A5FE                            
0001A5FE                            loc_1A578:
0001A5FE 4EF9 0000 D6CC             		jmp	DisplaySprite
0001A604                            ; ===========================================================================
0001A604                            
0001A604                            loc_1A57E:				; XREF: Obj84_Index
0001A604 7000                       		moveq	#0,d0
0001A606 1028 0028                  		move.b	$28(a0),d0
0001A60A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001A60E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001A612 6000 FF5C                  		bra.w	loc_1A4EA
0001A616                            ; ===========================================================================
0001A616 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001A618 0000                       		dc.w loc_1A598-off_1A590
0001A61A 0000                       		dc.w loc_1A604-off_1A590
0001A61C 0000                       		dc.w loc_1A604-off_1A590
0001A61E                            ; ===========================================================================
0001A61E                            
0001A61E                            loc_1A598:				; XREF: off_1A590
0001A61E 4A28 0029                  		tst.b	$29(a0)
0001A622 6600                       		bne.s	loc_1A5D4
0001A624 2268 0034                  		movea.l	$34(a0),a1
0001A628 4A29 0021                  		tst.b	$21(a1)
0001A62C 6600                       		bne.s	loc_1A5B4
0001A62E 6100 D2CA                  		bsr.w	BossDefeated
0001A632 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001A63A                            
0001A63A                            loc_1A5B4:
0001A63A 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001A642 6400                       		bcc.s	locret_1A602
0001A644 42A8 003C                  		clr.l	$3C(a0)
0001A648 2268 0034                  		movea.l	$34(a0),a1
0001A64C 5369 0032                  		subq.w	#1,$32(a1)
0001A650 4269 0030                  		clr.w	$30(a1)
0001A654 5528 0024                  		subq.b	#2,$24(a0)
0001A658 4E75                       		rts	
0001A65A                            ; ===========================================================================
0001A65A                            
0001A65A                            loc_1A5D4:
0001A65A 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001A660 6C00                       		bge.s	loc_1A5E4
0001A662 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001A66A                            
0001A66A                            loc_1A5E4:
0001A66A 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001A672 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001A678 6E00                       		bgt.s	locret_1A602
0001A67A 4268 003E                  		clr.w	$3E(a0)
0001A67E 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001A684 4228 0029                  		clr.b	$29(a0)
0001A688                            
0001A688                            locret_1A602:
0001A688 4E75                       		rts	
0001A68A                            ; ===========================================================================
0001A68A                            
0001A68A                            loc_1A604:				; XREF: off_1A590
0001A68A 08E8 0001 0001             		bset	#1,1(a0)
0001A690 4A28 0029                  		tst.b	$29(a0)
0001A694 6600                       		bne.s	loc_1A646
0001A696 2268 0034                  		movea.l	$34(a0),a1
0001A69A 4A29 0021                  		tst.b	$21(a1)
0001A69E 6600                       		bne.s	loc_1A626
0001A6A0 6100 D258                  		bsr.w	BossDefeated
0001A6A4 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001A6AC                            
0001A6AC                            loc_1A626:
0001A6AC 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001A6B4 6400                       		bcc.s	locret_1A674
0001A6B6 42A8 003C                  		clr.l	$3C(a0)
0001A6BA 2268 0034                  		movea.l	$34(a0),a1
0001A6BE 5369 0032                  		subq.w	#1,$32(a1)
0001A6C2 4269 0030                  		clr.w	$30(a1)
0001A6C6 5528 0024                  		subq.b	#2,$24(a0)
0001A6CA 4E75                       		rts	
0001A6CC                            ; ===========================================================================
0001A6CC                            
0001A6CC                            loc_1A646:
0001A6CC 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001A6D2 6D00                       		blt.s	loc_1A656
0001A6D4 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001A6DC                            
0001A6DC                            loc_1A656:
0001A6DC 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001A6E4 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001A6EA 6D00                       		blt.s	locret_1A674
0001A6EC 4268 003E                  		clr.w	$3E(a0)
0001A6F0 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001A6F6 4228 0029                  		clr.b	$29(a0)
0001A6FA                            
0001A6FA                            locret_1A674:
0001A6FA 4E75                       		rts	
0001A6FC                            ; ===========================================================================
0001A6FC                            ; ---------------------------------------------------------------------------
0001A6FC                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A6FC                            ; ---------------------------------------------------------------------------
0001A6FC                            Map_obj84:
0001A6FC                            	include "_maps\obj84.asm"
0001A6FC                            ; ---------------------------------------------------------------------------
0001A6FC                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A6FC                            ; ---------------------------------------------------------------------------
0001A6FC 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001A700 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001A704 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001A708 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A70C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A710 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001A714 06                         byte_1A68E:	dc.b 6
0001A715 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A71A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A71F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A724 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A729 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A72E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A733 08                         byte_1A6AD:	dc.b 8
0001A734 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A739 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A73E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A743 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A748 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A74D B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A752 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A757 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A75C 0A                         byte_1A6D6:	dc.b $A
0001A75D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A762 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A767 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A76C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A771 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A776 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A77B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A780 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A785 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A78A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A78F 0C                         byte_1A709:	dc.b $C
0001A790 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A795 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A79A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A79F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A7A4 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A7A9 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A7AE D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A7B3 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A7B8 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A7BD F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A7C2 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A7C7 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A7CC 0D                         byte_1A746:	dc.b $D
0001A7CD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A7D2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A7D7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A7DC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A7E1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A7E6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A7EB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A7F0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A7F5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A7FA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A7FF 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A804 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A809 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A80E 0E                         byte_1A788:	dc.b $E
0001A80F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A814 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A819 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A81E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A823 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A828 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A82D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A832 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A837 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A83C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A841 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A846 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A84B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A850 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001A855 02                         byte_1A7CF:	dc.b 2
0001A856 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001A85B 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001A860                            		even
0001A860                            		even
0001A860                            
0001A860                            ; ===========================================================================
0001A860                            ; ---------------------------------------------------------------------------
0001A860                            ; Object 86 - energy balls (FZ)
0001A860                            ; ---------------------------------------------------------------------------
0001A860                            
0001A860                            Obj86:					; XREF: Obj_Index
0001A860 7000                       		moveq	#0,d0
0001A862 1028 0024                  		move.b	$24(a0),d0
0001A866 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001A86A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001A86E                            ; ===========================================================================
0001A86E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001A870 0000                       		dc.w Obj86_Generator-Obj86_Index
0001A872 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001A874 0000                       		dc.w loc_1A962-Obj86_Index
0001A876 0000                       		dc.w loc_1A982-Obj86_Index
0001A878                            ; ===========================================================================
0001A878                            
0001A878                            Obj86_Main:				; XREF: Obj86_Index
0001A878 317C 2588 0008             		move.w	#$2588,8(a0)
0001A87E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A884 317C 0300 0002             		move.w	#$300,2(a0)
0001A88A 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001A892 117C 0000 001C             		move.b	#0,$1C(a0)
0001A898 117C 0003 0018             		move.b	#3,$18(a0)
0001A89E 117C 0008 0017             		move.b	#8,$17(a0)
0001A8A4 117C 0008 0016             		move.b	#8,$16(a0)
0001A8AA 117C 0004 0001             		move.b	#4,1(a0)
0001A8B0 08E8 0007 0001             		bset	#7,1(a0)
0001A8B6 5428 0024                  		addq.b	#2,$24(a0)
0001A8BA                            
0001A8BA                            Obj86_Generator:			; XREF: Obj86_Index
0001A8BA 2268 0034                  		movea.l	$34(a0),a1
0001A8BE 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001A8C4 6600                       		bne.s	loc_1A850
0001A8C6 10BC 003F                  		move.b	#$3F,(a0)
0001A8CA 117C 0000 0024             		move.b	#0,$24(a0)
0001A8D0 4EF9 0000 D6CC             		jmp	DisplaySprite
0001A8D6                            ; ===========================================================================
0001A8D6                            
0001A8D6                            loc_1A850:
0001A8D6 117C 0000 001C             		move.b	#0,$1C(a0)
0001A8DC 4A28 0029                  		tst.b	$29(a0)
0001A8E0 6700                       		beq.s	loc_1A86C
0001A8E2 5428 0024                  		addq.b	#2,$24(a0)
0001A8E6 117C 0001 001C             		move.b	#1,$1C(a0)
0001A8EC 117C 003E 0028             		move.b	#$3E,$28(a0)
0001A8F2                            
0001A8F2                            loc_1A86C:
0001A8F2 323C 0013                  		move.w	#$13,d1
0001A8F6 343C 0008                  		move.w	#8,d2
0001A8FA 363C 0011                  		move.w	#$11,d3
0001A8FE 3828 0008                  		move.w	8(a0),d4
0001A902 4EB9 0000 FA9C             		jsr	SolidObject
0001A908 3038 D008                  		move.w	($FFFFD008).w,d0
0001A90C 9068 0008                  		sub.w	8(a0),d0
0001A910 6B00                       		bmi.s	loc_1A89A
0001A912 0440 0140                  		subi.w	#$140,d0
0001A916 6B00                       		bmi.s	loc_1A89A
0001A918 4A28 0001                  		tst.b	1(a0)
0001A91C 6A00 FBB0                  		bpl.w	Obj84_Delete
0001A920                            
0001A920                            loc_1A89A:
0001A920 43FA 0000                  		lea	Ani_obj86(pc),a1
0001A924 4EB9 0000 A7F8             		jsr	AnimateSprite
0001A92A 4EF9 0000 D6CC             		jmp	DisplaySprite
0001A930                            ; ===========================================================================
0001A930                            
0001A930                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001A930 4A28 0029                  		tst.b	$29(a0)
0001A934 6700 0000                  		beq.w	loc_1A954
0001A938 4228 0029                  		clr.b	$29(a0)
0001A93C D068 0030                  		add.w	$30(a0),d0
0001A940 0240 001E                  		andi.w	#$1E,d0
0001A944 D4C0                       		adda.w	d0,a2
0001A946 5868 0030                  		addq.w	#4,$30(a0)
0001A94A 4268 0032                  		clr.w	$32(a0)
0001A94E 7403                       		moveq	#3,d2
0001A950                            
0001A950                            Obj86_Loop:
0001A950 4EB9 0000 DB68             		jsr	SingleObjLoad2
0001A956 6600 0000                  		bne.w	loc_1A954
0001A95A 12BC 0086                  		move.b	#$86,(a1)
0001A95E 3368 0008 0008             		move.w	8(a0),8(a1)
0001A964 337C 053C 000C             		move.w	#$53C,$C(a1)
0001A96A 137C 0008 0024             		move.b	#8,$24(a1)
0001A970 337C 2300 0002             		move.w	#$2300,2(a1)
0001A976 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001A97E 137C 000C 0016             		move.b	#$C,$16(a1)
0001A984 137C 000C 0017             		move.b	#$C,$17(a1)
0001A98A 137C 0000 0020             		move.b	#0,$20(a1)
0001A990 137C 0003 0018             		move.b	#3,$18(a1)
0001A996 337C 003E 0028             		move.w	#$3E,$28(a1)
0001A99C 137C 0004 0001             		move.b	#4,1(a1)
0001A9A2 08E9 0007 0001             		bset	#7,1(a1)
0001A9A8 2348 0034                  		move.l	a0,$34(a1)
0001A9AC 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001A9B2 3228 0032                  		move.w	$32(a0),d1
0001A9B6 C3FC FFB1                  		muls.w	#-$4F,d1
0001A9BA 0641 2578                  		addi.w	#$2578,d1
0001A9BE 0240 001F                  		andi.w	#$1F,d0
0001A9C2 0440 0010                  		subi.w	#$10,d0
0001A9C6 D041                       		add.w	d1,d0
0001A9C8 3340 0030                  		move.w	d0,$30(a1)
0001A9CC 5268 0032                  		addq.w	#1,$32(a0)
0001A9D0 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001A9D6 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001A9DA                            
0001A9DA                            loc_1A954:
0001A9DA 4A68 0032                  		tst.w	$32(a0)
0001A9DE 6600                       		bne.s	loc_1A95E
0001A9E0 5428 0024                  		addq.b	#2,$24(a0)
0001A9E4                            
0001A9E4                            loc_1A95E:
0001A9E4 6000 FF0C                  		bra.w	loc_1A86C
0001A9E8                            ; ===========================================================================
0001A9E8                            
0001A9E8                            loc_1A962:				; XREF: Obj86_Index
0001A9E8 117C 0002 001C             		move.b	#2,$1C(a0)
0001A9EE 4A68 0038                  		tst.w	$38(a0)
0001A9F2 6600                       		bne.s	loc_1A97E
0001A9F4 117C 0002 0024             		move.b	#2,$24(a0)
0001A9FA 2268 0034                  		movea.l	$34(a0),a1
0001A9FE 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AA04                            
0001AA04                            loc_1A97E:
0001AA04 6000 FEEC                  		bra.w	loc_1A86C
0001AA08                            ; ===========================================================================
0001AA08                            
0001AA08                            loc_1A982:				; XREF: Obj86_Index
0001AA08 7000                       		moveq	#0,d0
0001AA0A 1028 0025                  		move.b	$25(a0),d0
0001AA0E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AA12 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AA16 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AA1A 4EB9 0000 A7F8             		jsr	AnimateSprite
0001AA20 4EF9 0000 D6CC             		jmp	DisplaySprite
0001AA26                            ; ===========================================================================
0001AA26 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AA28 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AA2A 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AA2C                            ; ===========================================================================
0001AA2C                            
0001AA2C                            loc_1A9A6:				; XREF: Obj86_Index2
0001AA2C 3028 0030                  		move.w	$30(a0),d0
0001AA30 9068 0008                  		sub.w	8(a0),d0
0001AA34 E940                       		asl.w	#4,d0
0001AA36 3140 0010                  		move.w	d0,$10(a0)
0001AA3A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AA40 5428 0025                  		addq.b	#2,$25(a0)
0001AA44 4E75                       		rts	
0001AA46                            ; ===========================================================================
0001AA46                            
0001AA46                            loc_1A9C0:				; XREF: Obj86_Index2
0001AA46 4A68 0010                  		tst.w	$10(a0)
0001AA4A 6700                       		beq.s	loc_1A9E6
0001AA4C 4EB9 0000 D6A6             		jsr	SpeedToPos
0001AA52 3028 0008                  		move.w	8(a0),d0
0001AA56 9068 0030                  		sub.w	$30(a0),d0
0001AA5A 6400                       		bcc.s	loc_1A9E6
0001AA5C 4268 0010                  		clr.w	$10(a0)
0001AA60 D168 0008                  		add.w	d0,8(a0)
0001AA64 2268 0034                  		movea.l	$34(a0),a1
0001AA68 5369 0032                  		subq.w	#1,$32(a1)
0001AA6C                            
0001AA6C                            loc_1A9E6:
0001AA6C 117C 0000 001C             		move.b	#0,$1C(a0)
0001AA72 5368 0028                  		subq.w	#1,$28(a0)
0001AA76 6600                       		bne.s	locret_1AA1C
0001AA78 5428 0025                  		addq.b	#2,$25(a0)
0001AA7C 117C 0001 001C             		move.b	#1,$1C(a0)
0001AA82 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AA88 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AA8E 7000                       		moveq	#0,d0
0001AA90 3038 D008                  		move.w	($FFFFD008).w,d0
0001AA94 9068 0008                  		sub.w	8(a0),d0
0001AA98 3140 0010                  		move.w	d0,$10(a0)
0001AA9C 317C 0140 0012             		move.w	#$140,$12(a0)
0001AAA2                            
0001AAA2                            locret_1AA1C:
0001AAA2 4E75                       		rts	
0001AAA4                            ; ===========================================================================
0001AAA4                            
0001AAA4                            loc_1AA1E:				; XREF: Obj86_Index2
0001AAA4 4EB9 0000 D6A6             		jsr	SpeedToPos
0001AAAA 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001AAB0 6400                       		bcc.s	loc_1AA34
0001AAB2 5368 0028                  		subq.w	#1,$28(a0)
0001AAB6 6700                       		beq.s	loc_1AA34
0001AAB8 4E75                       		rts	
0001AABA                            ; ===========================================================================
0001AABA                            
0001AABA                            loc_1AA34:
0001AABA 2268 0034                  		movea.l	$34(a0),a1
0001AABE 5369 0038                  		subq.w	#1,$38(a1)
0001AAC2 6000 FA0A                  		bra.w	Obj84_Delete
0001AAC6                            ; ===========================================================================
0001AAC6                            Ani_obj86:
0001AAC6                            	include "_anim\obj86.asm"
0001AAC6                            ; ---------------------------------------------------------------------------
0001AAC6                            ; Animation script - energy ball launcher (FZ)
0001AAC6                            ; ---------------------------------------------------------------------------
0001AAC6 0000                       		dc.w byte_1AA46-Ani_obj86
0001AAC8 0000                       		dc.w byte_1AA4A-Ani_obj86
0001AACA 0000                       		dc.w byte_1AA50-Ani_obj86
0001AACC 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001AAD0 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001AAD6 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001AADC                            		even
0001AADC                            		even
0001AADC                            
0001AADC                            ; ---------------------------------------------------------------------------
0001AADC                            ; Sprite mappings - energy ball	launcher (FZ)
0001AADC                            ; ---------------------------------------------------------------------------
0001AADC                            Map_obj86:
0001AADC                            	include "_maps\obj86.asm"
0001AADC                            ; ---------------------------------------------------------------------------
0001AADC                            ; Sprite mappings - energy ball	launcher (FZ)
0001AADC                            ; ---------------------------------------------------------------------------
0001AADC 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001AAE0 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001AAE4 01                         byte_1AA5E:	dc.b 1
0001AAE5 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001AAEA 01                         byte_1AA64:	dc.b 1
0001AAEB F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001AAF0 01                         byte_1AA6A:	dc.b 1
0001AAF1 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001AAF6 01                         byte_1AA70:	dc.b 1
0001AAF7 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001AAFC                            		even
0001AAFC                            		even
0001AAFC                            
0001AAFC                            Ani_obj86a:
0001AAFC                            	include "_anim\obj86a.asm"
0001AAFC                            ; ---------------------------------------------------------------------------
0001AAFC                            ; Animation script - energy balls (FZ)
0001AAFC                            ; ---------------------------------------------------------------------------
0001AAFC 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001AAFE 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001AB00 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001AB0F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001AB1E 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001AB22 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001AB2C                            		even
0001AB2C                            		even
0001AB2C                            
0001AB2C                            ; ---------------------------------------------------------------------------
0001AB2C                            ; Sprite mappings - energy balls (FZ)
0001AB2C                            ; ---------------------------------------------------------------------------
0001AB2C                            Map_obj86a:
0001AB2C                            	include "_maps\obj86a.asm"
0001AB2C                            ; ---------------------------------------------------------------------------
0001AB2C                            ; Sprite mappings - energy balls (FZ)
0001AB2C                            ; ---------------------------------------------------------------------------
0001AB2C 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001AB30 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001AB34 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001AB38 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001AB3C 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001AB40 0000                       		dc.w byte_1AB20-Map_obj86a
0001AB42 02                         byte_1AABC:	dc.b 2
0001AB43 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001AB48 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001AB4D 02                         byte_1AAC7:	dc.b 2
0001AB4E F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001AB53 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001AB58 02                         byte_1AAD2:	dc.b 2
0001AB59 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001AB5E 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001AB63 02                         byte_1AADD:	dc.b 2
0001AB64 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001AB69 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001AB6E 02                         byte_1AAE8:	dc.b 2
0001AB6F F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001AB74 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001AB79 02                         byte_1AAF3:	dc.b 2
0001AB7A F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001AB7F F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001AB84 01                         byte_1AAFE:	dc.b 1
0001AB85 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001AB8A 01                         byte_1AB04:	dc.b 1
0001AB8B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001AB90 02                         byte_1AB0A:	dc.b 2
0001AB91 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001AB96 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001AB9B 02                         byte_1AB15:	dc.b 2
0001AB9C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001ABA1 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001ABA6 00                         byte_1AB20:	dc.b 0
0001ABA8 00                         		even
0001ABA8 00                         		even
0001ABA8                            
0001ABA8                            ; ===========================================================================
0001ABA8                            ; ---------------------------------------------------------------------------
0001ABA8                            ; Object 3E - prison capsule
0001ABA8                            ; ---------------------------------------------------------------------------
0001ABA8                            
0001ABA8                            Obj3E:					; XREF: Obj_Index
0001ABA8 7000                       		moveq	#0,d0
0001ABAA 1028 0024                  		move.b	$24(a0),d0
0001ABAE 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001ABB2 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001ABB6 3028 0008                  		move.w	8(a0),d0
0001ABBA 0240 FF80                  		andi.w	#$FF80,d0
0001ABBE 3238 F700                  		move.w	($FFFFF700).w,d1
0001ABC2 0441 0080                  		subi.w	#$80,d1
0001ABC6 0241 FF80                  		andi.w	#$FF80,d1
0001ABCA 9041                       		sub.w	d1,d0
0001ABCC 0C40 0280                  		cmpi.w	#$280,d0
0001ABD0 6200                       		bhi.s	Obj3E_Delete
0001ABD2 4EF9 0000 D6CC             		jmp	DisplaySprite
0001ABD8                            ; ===========================================================================
0001ABD8                            
0001ABD8                            Obj3E_Delete:
0001ABD8 4EF9 0000 D708             		jmp	DeleteObject
0001ABDE                            ; ===========================================================================
0001ABDE 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001ABE0 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001ABE2 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001ABE4 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001ABE6 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001ABE8 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001ABEA 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001ABEC 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001ABEE                            
0001ABEE 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001ABF2 040C 0501                  		dc.b 4,	$C, 5, 1
0001ABF6 0610 0403                  		dc.b 6,	$10, 4,	3
0001ABFA 0810 0305                  		dc.b 8,	$10, 3,	5
0001ABFE                            ; ===========================================================================
0001ABFE                            
0001ABFE                            Obj3E_Main:				; XREF: Obj3E_Index
0001ABFE 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001AC06 317C 049D 0002             		move.w	#$49D,2(a0)
0001AC0C 117C 0004 0001             		move.b	#4,1(a0)
0001AC12 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001AC18 7000                       		moveq	#0,d0
0001AC1A 1028 0028                  		move.b	$28(a0),d0
0001AC1E E548                       		lsl.w	#2,d0
0001AC20 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001AC24 1159 0024                  		move.b	(a1)+,$24(a0)
0001AC28 1159 0019                  		move.b	(a1)+,$19(a0)
0001AC2C 1159 0018                  		move.b	(a1)+,$18(a0)
0001AC30 1159 001A                  		move.b	(a1)+,$1A(a0)
0001AC34 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001AC38 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001AC3A 117C 0006 0020             		move.b	#6,$20(a0)
0001AC40 117C 0008 0021             		move.b	#8,$21(a0)
0001AC46                            
0001AC46                            Obj3E_Not02:
0001AC46 4E75                       		rts	
0001AC48                            ; ===========================================================================
0001AC48                            
0001AC48                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001AC48 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001AC4E 6700                       		beq.s	Obj3E_ChkOpened
0001AC50 323C 002B                  		move.w	#$2B,d1
0001AC54 343C 0018                  		move.w	#$18,d2
0001AC58 363C 0018                  		move.w	#$18,d3
0001AC5C 3828 0008                  		move.w	8(a0),d4
0001AC60 4EF9 0000 FA9C             		jmp	SolidObject
0001AC66                            ; ===========================================================================
0001AC66                            
0001AC66                            Obj3E_ChkOpened:
0001AC66 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001AC6A 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001AC6C 4228 0025                  		clr.b	$25(a0)
0001AC70 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AC76 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AC7C                            
0001AC7C                            Obj3E_DoOpen:
0001AC7C 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001AC82 4E75                       		rts	
0001AC84                            ; ===========================================================================
0001AC84                            
0001AC84                            Obj3E_Switched:				; XREF: Obj3E_Index
0001AC84 323C 0017                  		move.w	#$17,d1
0001AC88 343C 0008                  		move.w	#8,d2
0001AC8C 363C 0008                  		move.w	#8,d3
0001AC90 3828 0008                  		move.w	8(a0),d4
0001AC94 4EB9 0000 FA9C             		jsr	SolidObject
0001AC9A 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001ACA0 4EB9 0000 A7F8             		jsr	AnimateSprite
0001ACA6 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001ACAC 4A28 0025                  		tst.b	$25(a0)
0001ACB0 6700                       		beq.s	locret_1AC60
0001ACB2 5068 000C                  		addq.w	#8,$C(a0)
0001ACB6 117C 000A 0024             		move.b	#$A,$24(a0)
0001ACBC 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001ACC2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001ACC6 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001ACCA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001ACD0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001ACD6 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001ACD8 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001ACDE 6000                       		bra.s	Obj3E_ContinueCode
0001ACE0                            
0001ACE0                            Obj3E_MoveLeft:
0001ACE0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001ACE6                            
0001ACE6                            Obj3E_ContinueCode:
0001ACE6 4228 0025                  		clr.b	$25(a0)
0001ACEA 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001ACF0 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001ACF6                            
0001ACF6                            locret_1AC60:
0001ACF6 4E75                       		rts	
0001ACF8                            ; ===========================================================================
0001ACF8                            
0001ACF8                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001ACF8 7007                       		moveq	#7,d0
0001ACFA C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001ACFE 6600                       		bne.s	loc_1ACA0
0001AD00 4EB9 0000 DB52             		jsr	SingleObjLoad
0001AD06 6600                       		bne.s	loc_1ACA0
0001AD08 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001AD0C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AD12 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AD18 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001AD1E 7200                       		moveq	#0,d1
0001AD20 1200                       		move.b	d0,d1
0001AD22 E409                       		lsr.b	#2,d1
0001AD24 0441 0020                  		subi.w	#$20,d1
0001AD28 D369 0008                  		add.w	d1,8(a1)
0001AD2C E048                       		lsr.w	#8,d0
0001AD2E E608                       		lsr.b	#3,d0
0001AD30 D169 000C                  		add.w	d0,$C(a1)
0001AD34                            
0001AD34                            loc_1ACA0:
0001AD34 5368 001E                  		subq.w	#1,$1E(a0)
0001AD38 6700                       		beq.s	Obj3E_MakeAnimal
0001AD3A 4E75                       		rts	
0001AD3C                            ; ===========================================================================
0001AD3C                            
0001AD3C                            Obj3E_MakeAnimal:
0001AD3C 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001AD42 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001AD48 117C 0006 001A             		move.b	#6,$1A(a0)
0001AD4E 317C 0096 001E             		move.w	#$96,$1E(a0)
0001AD54 0668 0020 000C             		addi.w	#$20,$C(a0)
0001AD5A 7C07                       		moveq	#7,d6
0001AD5C 3A3C 009A                  		move.w	#$9A,d5
0001AD60 78E4                       		moveq	#-$1C,d4
0001AD62                            
0001AD62                            Obj3E_Loop:
0001AD62 4EB9 0000 DB52             		jsr	SingleObjLoad
0001AD68 6600                       		bne.s	locret_1ACF8
0001AD6A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001AD6E 3368 0008 0008             		move.w	8(a0),8(a1)
0001AD74 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AD7A D969 0008                  		add.w	d4,8(a1)
0001AD7E 5E44                       		addq.w	#7,d4
0001AD80 3345 0036                  		move.w	d5,$36(a1)
0001AD84 5145                       		subq.w	#8,d5
0001AD86 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001AD8A                            
0001AD8A                            locret_1ACF8:
0001AD8A 4E75                       		rts	
0001AD8C                            ; ===========================================================================
0001AD8C                            
0001AD8C                            Obj3E_Animals:				; XREF: Obj3E_Index
0001AD8C 7007                       		moveq	#7,d0
0001AD8E C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001AD92 6600                       		bne.s	loc_1AD38
0001AD94 4EB9 0000 DB52             		jsr	SingleObjLoad
0001AD9A 6600                       		bne.s	loc_1AD38
0001AD9C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001ADA0 3368 0008 0008             		move.w	8(a0),8(a1)
0001ADA6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ADAC 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001ADB2 0240 001F                  		andi.w	#$1F,d0
0001ADB6 5D40                       		subq.w	#6,d0
0001ADB8 4A41                       		tst.w	d1
0001ADBA 6A00                       		bpl.s	loc_1AD2E
0001ADBC 4440                       		neg.w	d0
0001ADBE                            
0001ADBE                            loc_1AD2E:
0001ADBE D169 0008                  		add.w	d0,8(a1)
0001ADC2 337C 000C 0036             		move.w	#$C,$36(a1)
0001ADC8                            
0001ADC8                            loc_1AD38:
0001ADC8 5368 001E                  		subq.w	#1,$1E(a0)
0001ADCC 6600                       		bne.s	locret_1AD48
0001ADCE 5428 0024                  		addq.b	#2,$24(a0)
0001ADD2 317C 00B4 001E             		move.w	#180,$1E(a0)
0001ADD8                            
0001ADD8                            locret_1AD48:
0001ADD8 4E75                       		rts	
0001ADDA                            ; ===========================================================================
0001ADDA                            
0001ADDA                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001ADDA 703E                       		moveq	#$3E,d0
0001ADDC 7228                       		moveq	#$28,d1
0001ADDE 7440                       		moveq	#$40,d2
0001ADE0 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001ADE4                            
0001ADE4                            Obj3E_FindObj28:
0001ADE4 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001ADE6 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001ADE8 D2C2                       		adda.w	d2,a1		; next object RAM
0001ADEA 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001ADEE                            
0001ADEE 4EB9 0000 ED58             		jsr	GotThroughAct
0001ADF4 4EF9 0000 D708             		jmp	DeleteObject
0001ADFA                            ; ===========================================================================
0001ADFA                            
0001ADFA                            Obj3E_Obj28Found:
0001ADFA 4E75                       		rts	
0001ADFC                            ; ===========================================================================
0001ADFC                            Ani_obj3E:
0001ADFC                            	include "_anim\obj3E.asm"
0001ADFC                            ; ---------------------------------------------------------------------------
0001ADFC                            ; Animation script - prison capsule
0001ADFC                            ; ---------------------------------------------------------------------------
0001ADFC 0000                       		dc.w byte_1AD70-Ani_obj3E
0001ADFE 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AE00 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001AE04                            		even
0001AE04                            		even
0001AE04                            
0001AE04                            ; ---------------------------------------------------------------------------
0001AE04                            ; Sprite mappings - prison capsule
0001AE04                            ; ---------------------------------------------------------------------------
0001AE04                            Map_obj3E:
0001AE04                            	include "_maps\obj3E.asm"
0001AE04                            ; ---------------------------------------------------------------------------
0001AE04                            ; Sprite mappings - prison capsule
0001AE04                            ; ---------------------------------------------------------------------------
0001AE04 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001AE08 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001AE0C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001AE10 0000                       		dc.w byte_1ADE2-Map_obj3E
0001AE12 07                         byte_1AD82:	dc.b 7
0001AE13 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001AE18 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001AE1D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001AE22 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001AE27 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001AE2C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001AE31 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001AE36 01                         byte_1ADA6:	dc.b 1
0001AE37 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001AE3C 06                         byte_1ADAC:	dc.b 6
0001AE3D 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001AE42 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001AE47 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001AE4C 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001AE51 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001AE56 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001AE5B 01                         byte_1ADCB:	dc.b 1
0001AE5C F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001AE61 02                         byte_1ADD1:	dc.b 2
0001AE62 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001AE67 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001AE6C 01                         byte_1ADDC:	dc.b 1
0001AE6D F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001AE72 00                         byte_1ADE2:	dc.b 0
0001AE74 00                         		even
0001AE74 00                         		even
0001AE74                            
0001AE74                            ; ---------------------------------------------------------------------------
0001AE74                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001AE74                            ; ---------------------------------------------------------------------------
0001AE74                            
0001AE74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AE74                            
0001AE74                            
0001AE74                            TouchResponse:				; XREF: Obj01
0001AE74 4E71                       		nop	
0001AE76 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001AE7A 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001AE7E 5142                       		subq.w	#8,d2
0001AE80 7A00                       		moveq	#0,d5
0001AE82 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001AE86 5705                       		subq.b	#3,d5
0001AE88 9645                       		sub.w	d5,d3
0001AE8A 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001AE90 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001AE92 0643 000C                  		addi.w	#$C,d3
0001AE96 7A0A                       		moveq	#$A,d5
0001AE98                            
0001AE98                            Touch_NoDuck:
0001AE98 383C 0010                  		move.w	#$10,d4
0001AE9C DA45                       		add.w	d5,d5
0001AE9E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001AEA2 3C3C 005F                  		move.w	#$5F,d6
0001AEA6                            
0001AEA6                            Touch_Loop:
0001AEA6 4A29 0001                  		tst.b	1(a1)
0001AEAA 6A00                       		bpl.s	Touch_NextObj
0001AEAC 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001AEB0 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001AEB2                            
0001AEB2                            Touch_NextObj:
0001AEB2 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001AEB6 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001AEBA                            
0001AEBA 7000                       		moveq	#0,d0
0001AEBC 4E75                       		rts	
0001AEBE                            ; ===========================================================================
0001AEBE 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001AEC0 0C14                       		dc.b   $C, $14
0001AEC2 140C                       		dc.b  $14,  $C
0001AEC4 0410                       		dc.b	4, $10
0001AEC6 0C12                       		dc.b   $C, $12
0001AEC8 1010                       		dc.b  $10, $10
0001AECA 0606                       		dc.b	6,   6
0001AECC 180C                       		dc.b  $18,  $C
0001AECE 0C10                       		dc.b   $C, $10
0001AED0 100C                       		dc.b  $10,  $C
0001AED2 0808                       		dc.b	8,   8
0001AED4 1410                       		dc.b  $14, $10
0001AED6 1408                       		dc.b  $14,   8
0001AED8 0E0E                       		dc.b   $E,  $E
0001AEDA 1818                       		dc.b  $18, $18
0001AEDC 2810                       		dc.b  $28, $10
0001AEDE 1018                       		dc.b  $10, $18
0001AEE0 0810                       		dc.b	8, $10
0001AEE2 2070                       		dc.b  $20, $70
0001AEE4 4020                       		dc.b  $40, $20
0001AEE6 8020                       		dc.b  $80, $20
0001AEE8 2020                       		dc.b  $20, $20
0001AEEA 0808                       		dc.b	8,   8
0001AEEC 0404                       		dc.b	4,   4
0001AEEE 2008                       		dc.b  $20,   8
0001AEF0 0C0C                       		dc.b   $C,  $C
0001AEF2 0804                       		dc.b	8,   4
0001AEF4 1804                       		dc.b  $18,   4
0001AEF6 2804                       		dc.b  $28,   4
0001AEF8 0408                       		dc.b	4,   8
0001AEFA 0418                       		dc.b	4, $18
0001AEFC 0428                       		dc.b	4, $28
0001AEFE 0420                       		dc.b	4, $20
0001AF00 1818                       		dc.b  $18, $18
0001AF02 0C18                       		dc.b   $C, $18
0001AF04 4808                       		dc.b  $48,   8
0001AF06                            ; ===========================================================================
0001AF06                            
0001AF06                            Touch_Height:				; XREF: TouchResponse
0001AF06 0240 003F                  		andi.w	#$3F,d0
0001AF0A D040                       		add.w	d0,d0
0001AF0C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001AF10 7200                       		moveq	#0,d1
0001AF12 121A                       		move.b	(a2)+,d1
0001AF14 3029 0008                  		move.w	8(a1),d0
0001AF18 9041                       		sub.w	d1,d0
0001AF1A 9042                       		sub.w	d2,d0
0001AF1C 6400                       		bcc.s	loc_1AE98
0001AF1E D241                       		add.w	d1,d1
0001AF20 D041                       		add.w	d1,d0
0001AF22 6500                       		bcs.s	Touch_Width
0001AF24 6000 FF8C                  		bra.w	Touch_NextObj
0001AF28                            ; ===========================================================================
0001AF28                            
0001AF28                            loc_1AE98:
0001AF28 B044                       		cmp.w	d4,d0
0001AF2A 6200 FF86                  		bhi.w	Touch_NextObj
0001AF2E                            
0001AF2E                            Touch_Width:
0001AF2E 7200                       		moveq	#0,d1
0001AF30 121A                       		move.b	(a2)+,d1
0001AF32 3029 000C                  		move.w	$C(a1),d0
0001AF36 9041                       		sub.w	d1,d0
0001AF38 9043                       		sub.w	d3,d0
0001AF3A 6400                       		bcc.s	loc_1AEB6
0001AF3C D241                       		add.w	d1,d1
0001AF3E D240                       		add.w	d0,d1
0001AF40 6500                       		bcs.s	Touch_ChkValue
0001AF42 6000 FF6E                  		bra.w	Touch_NextObj
0001AF46                            ; ===========================================================================
0001AF46                            
0001AF46                            loc_1AEB6:
0001AF46 B045                       		cmp.w	d5,d0
0001AF48 6200 FF68                  		bhi.w	Touch_NextObj
0001AF4C                            
0001AF4C                            Touch_ChkValue:
0001AF4C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001AF50 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001AF54 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001AF58 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001AF5C 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001AF60 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001AF62 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001AF66                            
0001AF66                            ; touch	response is $40-$7F
0001AF66                            
0001AF66 1029 0020                  		move.b	$20(a1),d0
0001AF6A 0200 003F                  		andi.b	#$3F,d0
0001AF6E 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001AF72 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001AF74 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001AF7A 6400 0000                  		bcc.w	locret_1AEF2
0001AF7E 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001AF82                            
0001AF82                            locret_1AEF2:
0001AF82 4E75                       		rts	
0001AF84                            ; ===========================================================================
0001AF84                            
0001AF84                            Touch_Monitor:
0001AF84 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001AF88 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001AF8A 3028 000C                  		move.w	$C(a0),d0
0001AF8E 0440 0010                  		subi.w	#$10,d0
0001AF92 B069 000C                  		cmp.w	$C(a1),d0
0001AF96 6500                       		bcs.s	locret_1AF2E
0001AF98 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001AF9C 337C FE80 0012             		move.w	#-$180,$12(a1)
0001AFA2 4A29 0025                  		tst.b	$25(a1)
0001AFA6 6600                       		bne.s	locret_1AF2E
0001AFA8 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001AFAC 4E75                       		rts	
0001AFAE                            ; ===========================================================================
0001AFAE                            
0001AFAE                            loc_1AF1E:
0001AFAE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001AFB4 6600                       		bne.s	locret_1AF2E
0001AFB6 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001AFBA 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001AFBE                            
0001AFBE                            locret_1AF2E:
0001AFBE 4E75                       		rts	
0001AFC0                            ; ===========================================================================
0001AFC0                            
0001AFC0                            Touch_Enemy:				; XREF: Touch_ChkValue
0001AFC0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001AFC4 6600                       		bne.s	loc_1AF40	; if yes, branch
0001AFC6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001AFCC 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001AFD0                            
0001AFD0                            loc_1AF40:
0001AFD0 4A29 0021                  		tst.b	$21(a1)
0001AFD4 6700                       		beq.s	Touch_KillEnemy
0001AFD6 4468 0010                  		neg.w	$10(a0)
0001AFDA 4468 0012                  		neg.w	$12(a0)
0001AFDE E0E8 0010                  		asr	$10(a0)
0001AFE2 E0E8 0012                  		asr	$12(a0)
0001AFE6 137C 0000 0020             		move.b	#0,$20(a1)
0001AFEC 5329 0021                  		subq.b	#1,$21(a1)
0001AFF0 6600                       		bne.s	locret_1AF68
0001AFF2 08E9 0007 0022             		bset	#7,$22(a1)
0001AFF8                            
0001AFF8                            locret_1AF68:
0001AFF8 4E75                       		rts	
0001AFFA                            ; ===========================================================================
0001AFFA                            
0001AFFA                            Touch_KillEnemy:
0001AFFA 08E9 0007 0022             		bset	#7,$22(a1)
0001B000 7000                       		moveq	#0,d0
0001B002 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B006 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B00A 0C40 0006                  		cmpi.w	#6,d0
0001B00E 6500                       		bcs.s	loc_1AF82
0001B010 7006                       		moveq	#6,d0
0001B012                            
0001B012                            loc_1AF82:
0001B012 3340 003E                  		move.w	d0,$3E(a1)
0001B016 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B01A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B020 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B022 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B026 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B02C                            
0001B02C                            loc_1AF9C:
0001B02C 6100 0000                  		bsr.w	AddPoints
0001B030 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B034 137C 0000 0024             		move.b	#0,$24(a1)
0001B03A 4A68 0012                  		tst.w	$12(a0)
0001B03E 6B00                       		bmi.s	loc_1AFC2
0001B040 3028 000C                  		move.w	$C(a0),d0
0001B044 B069 000C                  		cmp.w	$C(a1),d0
0001B048 6400                       		bcc.s	loc_1AFCA
0001B04A 4468 0012                  		neg.w	$12(a0)
0001B04E 4E75                       		rts	
0001B050                            ; ===========================================================================
0001B050                            
0001B050                            loc_1AFC2:
0001B050 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B056 4E75                       		rts	
0001B058                            ; ===========================================================================
0001B058                            
0001B058                            loc_1AFCA:
0001B058 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B05E 4E75                       		rts	
0001B060                            ; ===========================================================================
0001B060 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B068                            ; ===========================================================================
0001B068                            
0001B068                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B068 08E9 0007 0022             		bset	#7,$22(a1)
0001B06E                            
0001B06E                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B06E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B072 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B074                            
0001B074                            loc_1AFE6:				; XREF: Touch_Hurt
0001B074 70FF                       		moveq	#-1,d0
0001B076 4E75                       		rts	
0001B078                            ; ===========================================================================
0001B078                            
0001B078                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B078 4E71                       		nop	
0001B07A 4A68 0030                  		tst.w	$30(a0)
0001B07E 66F4                       		bne.s	loc_1AFE6
0001B080 2449                       		movea.l	a1,a2
0001B082                            
0001B082                            ; End of function TouchResponse
0001B082                            ; continue straight to HurtSonic
0001B082                            
0001B082                            ; ---------------------------------------------------------------------------
0001B082                            ; Hurting Sonic	subroutine
0001B082                            ; ---------------------------------------------------------------------------
0001B082                            
0001B082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B082                            
0001B082                            
0001B082                            HurtSonic:
0001B082 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B086 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B088 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B08C 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B090 4EB9 0000 DB52             		jsr	SingleObjLoad
0001B096 6600                       		bne.s	Hurt_Shield
0001B098 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B09C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B0A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B0A8                            
0001B0A8                            Hurt_Shield:
0001B0A8 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B0AE 117C 0004 0024             		move.b	#4,$24(a0)
0001B0B4 6100 87C4                  		bsr.w	Sonic_ResetOnFloor
0001B0B8 08E8 0001 0022             		bset	#1,$22(a0)
0001B0BE 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B0C4 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B0CA 0828 0006 0022             		btst	#6,$22(a0)
0001B0D0 6700                       		beq.s	Hurt_Reverse
0001B0D2 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B0D8 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B0DE                            
0001B0DE                            Hurt_Reverse:
0001B0DE 3028 0008                  		move.w	8(a0),d0
0001B0E2 B06A 0008                  		cmp.w	8(a2),d0
0001B0E6 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B0E8 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B0EC                            
0001B0EC                            Hurt_ChkSpikes:
0001B0EC 317C 0000 0014             		move.w	#0,$14(a0)
0001B0F2 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B0F8 317C 0078 0030             		move.w	#$78,$30(a0)
0001B0FE 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B102 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B106 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B108 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B10C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B10E 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B112                            
0001B112                            Hurt_Sound:
0001B112 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001B118 70FF                       		moveq	#-1,d0
0001B11A 4E75                       		rts	
0001B11C                            ; ===========================================================================
0001B11C                            
0001B11C                            Hurt_NoRings:
0001B11C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B120 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B124                            ; End of function HurtSonic
0001B124                            
0001B124                            ; ---------------------------------------------------------------------------
0001B124                            ; Subroutine to	kill Sonic
0001B124                            ; ---------------------------------------------------------------------------
0001B124                            
0001B124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B124                            
0001B124                            
0001B124                            KillSonic:
0001B124 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B128 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B12A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B130 117C 0006 0024             		move.b	#6,$24(a0)
0001B136 6100 8742                  		bsr.w	Sonic_ResetOnFloor
0001B13A 08E8 0001 0022             		bset	#1,$22(a0)
0001B140 317C F900 0012             		move.w	#-$700,$12(a0)
0001B146 317C 0000 0010             		move.w	#0,$10(a0)
0001B14C 317C 0000 0014             		move.w	#0,$14(a0)
0001B152 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B158 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B15E 08E8 0007 0002             		bset	#7,2(a0)
0001B164 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B168 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B16C 6600                       		bne.s	Kill_Sound
0001B16E 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B172                            
0001B172                            Kill_Sound:
0001B172 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001B178                            
0001B178                            Kill_NoDeath:
0001B178 70FF                       		moveq	#-1,d0
0001B17A 4E75                       		rts	
0001B17C                            ; End of function KillSonic
0001B17C                            
0001B17C                            
0001B17C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B17C                            
0001B17C                            
0001B17C                            Touch_Special:				; XREF: Touch_ChkValue
0001B17C 1229 0020                  		move.b	$20(a1),d1
0001B180 0201 003F                  		andi.b	#$3F,d1
0001B184 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B188 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B18A 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B18E 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B190 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B194 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B196 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B19A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B19C 4E75                       		rts	
0001B19E                            ; ===========================================================================
0001B19E                            
0001B19E                            Touch_CatKiller:			; XREF: Touch_Special
0001B19E 6000 FEC8                  		bra.w	loc_1AFDA
0001B1A2                            ; ===========================================================================
0001B1A2                            
0001B1A2                            Touch_Yadrin:				; XREF: Touch_Special
0001B1A2 9A40                       		sub.w	d0,d5
0001B1A4 0C45 0008                  		cmpi.w	#8,d5
0001B1A8 6400                       		bcc.s	loc_1B144
0001B1AA 3029 0008                  		move.w	8(a1),d0
0001B1AE 5940                       		subq.w	#4,d0
0001B1B0 0829 0000 0022             		btst	#0,$22(a1)
0001B1B6 6700                       		beq.s	loc_1B130
0001B1B8 0440 0010                  		subi.w	#$10,d0
0001B1BC                            
0001B1BC                            loc_1B130:
0001B1BC 9042                       		sub.w	d2,d0
0001B1BE 6400                       		bcc.s	loc_1B13C
0001B1C0 0640 0018                  		addi.w	#$18,d0
0001B1C4 6500                       		bcs.s	loc_1B140
0001B1C6 6000                       		bra.s	loc_1B144
0001B1C8                            ; ===========================================================================
0001B1C8                            
0001B1C8                            loc_1B13C:
0001B1C8 B044                       		cmp.w	d4,d0
0001B1CA 6200                       		bhi.s	loc_1B144
0001B1CC                            
0001B1CC                            loc_1B140:
0001B1CC 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B1D0                            ; ===========================================================================
0001B1D0                            
0001B1D0                            loc_1B144:
0001B1D0 6000 FDEE                  		bra.w	Touch_Enemy
0001B1D4                            ; ===========================================================================
0001B1D4                            
0001B1D4                            Touch_D7orE1:				; XREF: Touch_Special
0001B1D4 5229 0021                  		addq.b	#1,$21(a1)
0001B1D8 4E75                       		rts	
0001B1DA                            ; End of function Touch_Special
0001B1DA                            
0001B1DA                            ; ---------------------------------------------------------------------------
0001B1DA                            ; Subroutine to	show the special stage layout
0001B1DA                            ; ---------------------------------------------------------------------------
0001B1DA                            
0001B1DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B1DA                            
0001B1DA                            
0001B1DA                            SS_ShowLayout:				; XREF: SpecialStage
0001B1DA 6100 0000                  		bsr.w	SS_AniWallsRings
0001B1DE 6100 0000                  		bsr.w	SS_AniItems
0001B1E2 3F05                       		move.w	d5,-(sp)
0001B1E4 43F8 8000                  		lea	($FFFF8000).w,a1
0001B1E8 1038 F780                  		move.b	($FFFFF780).w,d0
0001B1EC 0200 00FC                  		andi.b	#$FC,d0
0001B1F0 4EB9 0000 29DA             		jsr	(CalcSine).l
0001B1F6 3800                       		move.w	d0,d4
0001B1F8 3A01                       		move.w	d1,d5
0001B1FA C9FC 0018                  		muls.w	#$18,d4
0001B1FE CBFC 0018                  		muls.w	#$18,d5
0001B202 7400                       		moveq	#0,d2
0001B204 3438 F700                  		move.w	($FFFFF700).w,d2
0001B208 84FC 0018                  		divu.w	#$18,d2
0001B20C 4842                       		swap	d2
0001B20E 4442                       		neg.w	d2
0001B210 0642 FF4C                  		addi.w	#-$B4,d2
0001B214 7600                       		moveq	#0,d3
0001B216 3638 F704                  		move.w	($FFFFF704).w,d3
0001B21A 86FC 0018                  		divu.w	#$18,d3
0001B21E 4843                       		swap	d3
0001B220 4443                       		neg.w	d3
0001B222 0643 FF4C                  		addi.w	#-$B4,d3
0001B226 3E3C 000F                  		move.w	#$F,d7
0001B22A                            
0001B22A                            loc_1B19E:
0001B22A 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B22E 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B232 4440                       		neg.w	d0
0001B234 C3C2                       		muls.w	d2,d1
0001B236 C1C3                       		muls.w	d3,d0
0001B238 2C00                       		move.l	d0,d6
0001B23A DC81                       		add.l	d1,d6
0001B23C 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B240 C1C2                       		muls.w	d2,d0
0001B242 C3C3                       		muls.w	d3,d1
0001B244 D280                       		add.l	d0,d1
0001B246 2406                       		move.l	d6,d2
0001B248 3C3C 000F                  		move.w	#$F,d6
0001B24C                            
0001B24C                            loc_1B1C0:
0001B24C 2002                       		move.l	d2,d0
0001B24E E080                       		asr.l	#8,d0
0001B250 32C0                       		move.w	d0,(a1)+
0001B252 2001                       		move.l	d1,d0
0001B254 E080                       		asr.l	#8,d0
0001B256 32C0                       		move.w	d0,(a1)+
0001B258 D485                       		add.l	d5,d2
0001B25A D284                       		add.l	d4,d1
0001B25C 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B260                            
0001B260 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B264 0643 0018                  		addi.w	#$18,d3
0001B268 51CF FFC0                  		dbf	d7,loc_1B19E
0001B26C                            
0001B26C 3A1F                       		move.w	(sp)+,d5
0001B26E 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B274 7000                       		moveq	#0,d0
0001B276 3038 F704                  		move.w	($FFFFF704).w,d0
0001B27A 80FC 0018                  		divu.w	#$18,d0
0001B27E C0FC 0080                  		mulu.w	#$80,d0
0001B282 D1C0                       		adda.l	d0,a0
0001B284 7000                       		moveq	#0,d0
0001B286 3038 F700                  		move.w	($FFFFF700).w,d0
0001B28A 80FC 0018                  		divu.w	#$18,d0
0001B28E D0C0                       		adda.w	d0,a0
0001B290 49F8 8000                  		lea	($FFFF8000).w,a4
0001B294 3E3C 000F                  		move.w	#$F,d7
0001B298                            
0001B298                            loc_1B20C:
0001B298 3C3C 000F                  		move.w	#$F,d6
0001B29C                            
0001B29C                            loc_1B210:
0001B29C 7000                       		moveq	#0,d0
0001B29E 1018                       		move.b	(a0)+,d0
0001B2A0 6700                       		beq.s	loc_1B268
0001B2A2 0C00 004E                  		cmpi.b	#$4E,d0
0001B2A6 6200                       		bhi.s	loc_1B268
0001B2A8 3614                       		move.w	(a4),d3
0001B2AA 0643 0120                  		addi.w	#$120,d3
0001B2AE 0C43 0070                  		cmpi.w	#$70,d3
0001B2B2 6500                       		bcs.s	loc_1B268
0001B2B4 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B2B8 6400                       		bcc.s	loc_1B268
0001B2BA 342C 0002                  		move.w	2(a4),d2
0001B2BE 0642 00F0                  		addi.w	#$F0,d2
0001B2C2 0C42 0070                  		cmpi.w	#$70,d2
0001B2C6 6500                       		bcs.s	loc_1B268
0001B2C8 0C42 0170                  		cmpi.w	#$170,d2
0001B2CC 6400                       		bcc.s	loc_1B268
0001B2CE 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B2D4 E748                       		lsl.w	#3,d0
0001B2D6 4BF5 0000                  		lea	(a5,d0.w),a5
0001B2DA 225D                       		movea.l	(a5)+,a1
0001B2DC 321D                       		move.w	(a5)+,d1
0001B2DE D241                       		add.w	d1,d1
0001B2E0 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B2E4 365D                       		movea.w	(a5)+,a3
0001B2E6 7200                       		moveq	#0,d1
0001B2E8 1219                       		move.b	(a1)+,d1
0001B2EA 5301                       		subq.b	#1,d1
0001B2EC 6B00                       		bmi.s	loc_1B268
0001B2EE 4EB9 0000 D82A             		jsr	sub_D762
0001B2F4                            
0001B2F4                            loc_1B268:
0001B2F4 584C                       		addq.w	#4,a4
0001B2F6 51CE FFA4                  		dbf	d6,loc_1B210
0001B2FA                            
0001B2FA 41E8 0070                  		lea	$70(a0),a0
0001B2FE 51CF FF98                  		dbf	d7,loc_1B20C
0001B302                            
0001B302 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B306 0C05 0050                  		cmpi.b	#$50,d5
0001B30A 6700                       		beq.s	loc_1B288
0001B30C 24BC 0000 0000             		move.l	#0,(a2)
0001B312 4E75                       		rts	
0001B314                            ; ===========================================================================
0001B314                            
0001B314                            loc_1B288:
0001B314 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B31A 4E75                       		rts	
0001B31C                            ; End of function SS_ShowLayout
0001B31C                            
0001B31C                            ; ---------------------------------------------------------------------------
0001B31C                            ; Subroutine to	animate	walls and rings	in the special stage
0001B31C                            ; ---------------------------------------------------------------------------
0001B31C                            
0001B31C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B31C                            
0001B31C                            
0001B31C                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B31C 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B322 7000                       		moveq	#0,d0
0001B324 1038 F780                  		move.b	($FFFFF780).w,d0
0001B328 E408                       		lsr.b	#2,d0
0001B32A 0240 000F                  		andi.w	#$F,d0
0001B32E 7223                       		moveq	#$23,d1
0001B330                            
0001B330                            loc_1B2A4:
0001B330 3280                       		move.w	d0,(a1)
0001B332 5049                       		addq.w	#8,a1
0001B334 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B338                            
0001B338 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B33E 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B342 6A00                       		bpl.s	loc_1B2C8
0001B344 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B34A 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B34E 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B354                            
0001B354                            loc_1B2C8:
0001B354 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B35A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B35E 6A00                       		bpl.s	loc_1B2E4
0001B360 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B366 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B36A 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B370                            
0001B370                            loc_1B2E4:
0001B370 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B374 1340 0138                  		move.b	d0,$138(a1)
0001B378 1340 0160                  		move.b	d0,$160(a1)
0001B37C 1340 0148                  		move.b	d0,$148(a1)
0001B380 1340 0150                  		move.b	d0,$150(a1)
0001B384 1340 01D8                  		move.b	d0,$1D8(a1)
0001B388 1340 01E0                  		move.b	d0,$1E0(a1)
0001B38C 1340 01E8                  		move.b	d0,$1E8(a1)
0001B390 1340 01F0                  		move.b	d0,$1F0(a1)
0001B394 1340 01F8                  		move.b	d0,$1F8(a1)
0001B398 1340 0200                  		move.b	d0,$200(a1)
0001B39C 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B3A0 6A00                       		bpl.s	loc_1B326
0001B3A2 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B3A8 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B3AC 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B3B2                            
0001B3B2                            loc_1B326:
0001B3B2 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B3B6 1340 0168                  		move.b	d0,$168(a1)
0001B3BA 1340 0170                  		move.b	d0,$170(a1)
0001B3BE 1340 0178                  		move.b	d0,$178(a1)
0001B3C2 1340 0180                  		move.b	d0,$180(a1)
0001B3C6 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B3CA 6A00                       		bpl.s	loc_1B350
0001B3CC 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B3D2 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B3D6 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B3DC                            
0001B3DC                            loc_1B350:
0001B3DC 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B3E2 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B3E8 7000                       		moveq	#0,d0
0001B3EA 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B3EE D040                       		add.w	d0,d0
0001B3F0 41F0 0000                  		lea	(a0,d0.w),a0
0001B3F4 3290                       		move.w	(a0),(a1)
0001B3F6 3368 0002 0008             		move.w	2(a0),8(a1)
0001B3FC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B402 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B408 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B40E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B414 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B41A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B420 D0FC 0020                  		adda.w	#$20,a0
0001B424 D2FC 0048                  		adda.w	#$48,a1
0001B428 3290                       		move.w	(a0),(a1)
0001B42A 3368 0002 0008             		move.w	2(a0),8(a1)
0001B430 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B436 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B43C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B442 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B448 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B44E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B454 D0FC 0020                  		adda.w	#$20,a0
0001B458 D2FC 0048                  		adda.w	#$48,a1
0001B45C 3290                       		move.w	(a0),(a1)
0001B45E 3368 0002 0008             		move.w	2(a0),8(a1)
0001B464 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B46A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B470 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B476 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B47C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B482 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B488 D0FC 0020                  		adda.w	#$20,a0
0001B48C D2FC 0048                  		adda.w	#$48,a1
0001B490 3290                       		move.w	(a0),(a1)
0001B492 3368 0002 0008             		move.w	2(a0),8(a1)
0001B498 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B49E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B4A4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B4AA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B4B0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B4B6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B4BC D0FC 0020                  		adda.w	#$20,a0
0001B4C0 D2FC 0048                  		adda.w	#$48,a1
0001B4C4 4E75                       		rts	
0001B4C6                            ; End of function SS_AniWallsRings
0001B4C6                            
0001B4C6                            ; ===========================================================================
0001B4C6 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B4D6 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B4E6 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B4F6 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B506 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B516 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B526 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B536 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B546                            ; ---------------------------------------------------------------------------
0001B546                            ; Subroutine to	remove items when you collect them in the special stage
0001B546                            ; ---------------------------------------------------------------------------
0001B546                            
0001B546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B546                            
0001B546                            
0001B546                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001B546 45F9 00FF 4400             		lea	($FF4400).l,a2
0001B54C 303C 001F                  		move.w	#$1F,d0
0001B550                            
0001B550                            loc_1B4C4:
0001B550 4A12                       		tst.b	(a2)
0001B552 6700                       		beq.s	locret_1B4CE
0001B554 504A                       		addq.w	#8,a2
0001B556 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001B55A                            
0001B55A                            locret_1B4CE:
0001B55A 4E75                       		rts	
0001B55C                            ; End of function SS_RemoveCollectedItem
0001B55C                            
0001B55C                            ; ---------------------------------------------------------------------------
0001B55C                            ; Subroutine to	animate	special	stage items when you touch them
0001B55C                            ; ---------------------------------------------------------------------------
0001B55C                            
0001B55C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B55C                            
0001B55C                            
0001B55C                            SS_AniItems:				; XREF: SS_ShowLayout
0001B55C 41F9 00FF 4400             		lea	($FF4400).l,a0
0001B562 3E3C 001F                  		move.w	#$1F,d7
0001B566                            
0001B566                            loc_1B4DA:
0001B566 7000                       		moveq	#0,d0
0001B568 1010                       		move.b	(a0),d0
0001B56A 6700                       		beq.s	loc_1B4E8
0001B56C E548                       		lsl.w	#2,d0
0001B56E 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001B572 4E91                       		jsr	(a1)
0001B574                            
0001B574                            loc_1B4E8:
0001B574 5048                       		addq.w	#8,a0
0001B576                            
0001B576                            loc_1B4EA:
0001B576 51CF FFEE                  		dbf	d7,loc_1B4DA
0001B57A                            
0001B57A 4E75                       		rts	
0001B57C                            ; End of function SS_AniItems
0001B57C                            
0001B57C                            ; ===========================================================================
0001B57C 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001B580 0000 0000                  		dc.l SS_AniBumper
0001B584 0000 0000                  		dc.l SS_Ani1Up
0001B588 0000 0000                  		dc.l SS_AniReverse
0001B58C 0000 0000                  		dc.l SS_AniEmeraldSparks
0001B590 0000 0000                  		dc.l SS_AniGlassBlock
0001B594                            ; ===========================================================================
0001B594                            
0001B594                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001B594 5328 0002                  		subq.b	#1,2(a0)
0001B598 6A00                       		bpl.s	locret_1B530
0001B59A 117C 0005 0002             		move.b	#5,2(a0)
0001B5A0 7000                       		moveq	#0,d0
0001B5A2 1028 0003                  		move.b	3(a0),d0
0001B5A6 5228 0003                  		addq.b	#1,3(a0)
0001B5AA 2268 0004                  		movea.l	4(a0),a1
0001B5AE 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001B5B2 1280                       		move.b	d0,(a1)
0001B5B4 6600                       		bne.s	locret_1B530
0001B5B6 4290                       		clr.l	(a0)
0001B5B8 42A8 0004                  		clr.l	4(a0)
0001B5BC                            
0001B5BC                            locret_1B530:
0001B5BC 4E75                       		rts	
0001B5BE                            ; ===========================================================================
0001B5BE 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001B5C4                            ; ===========================================================================
0001B5C4                            
0001B5C4                            SS_AniBumper:				; XREF: SS_AniIndex
0001B5C4 5328 0002                  		subq.b	#1,2(a0)
0001B5C8 6A00                       		bpl.s	locret_1B566
0001B5CA 117C 0007 0002             		move.b	#7,2(a0)
0001B5D0 7000                       		moveq	#0,d0
0001B5D2 1028 0003                  		move.b	3(a0),d0
0001B5D6 5228 0003                  		addq.b	#1,3(a0)
0001B5DA 2268 0004                  		movea.l	4(a0),a1
0001B5DE 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001B5E2 6600                       		bne.s	loc_1B564
0001B5E4 4290                       		clr.l	(a0)
0001B5E6 42A8 0004                  		clr.l	4(a0)
0001B5EA 12BC 0025                  		move.b	#$25,(a1)
0001B5EE 4E75                       		rts	
0001B5F0                            ; ===========================================================================
0001B5F0                            
0001B5F0                            loc_1B564:
0001B5F0 1280                       		move.b	d0,(a1)
0001B5F2                            
0001B5F2                            locret_1B566:
0001B5F2 4E75                       		rts	
0001B5F4                            ; ===========================================================================
0001B5F4 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001B5FA                            ; ===========================================================================
0001B5FA                            
0001B5FA                            SS_Ani1Up:				; XREF: SS_AniIndex
0001B5FA 5328 0002                  		subq.b	#1,2(a0)
0001B5FE 6A00                       		bpl.s	locret_1B596
0001B600 117C 0005 0002             		move.b	#5,2(a0)
0001B606 7000                       		moveq	#0,d0
0001B608 1028 0003                  		move.b	3(a0),d0
0001B60C 5228 0003                  		addq.b	#1,3(a0)
0001B610 2268 0004                  		movea.l	4(a0),a1
0001B614 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001B618 1280                       		move.b	d0,(a1)
0001B61A 6600                       		bne.s	locret_1B596
0001B61C 4290                       		clr.l	(a0)
0001B61E 42A8 0004                  		clr.l	4(a0)
0001B622                            
0001B622                            locret_1B596:
0001B622 4E75                       		rts	
0001B624                            ; ===========================================================================
0001B624 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001B62A                            ; ===========================================================================
0001B62A                            
0001B62A                            SS_AniReverse:				; XREF: SS_AniIndex
0001B62A 5328 0002                  		subq.b	#1,2(a0)
0001B62E 6A00                       		bpl.s	locret_1B5CC
0001B630 117C 0007 0002             		move.b	#7,2(a0)
0001B636 7000                       		moveq	#0,d0
0001B638 1028 0003                  		move.b	3(a0),d0
0001B63C 5228 0003                  		addq.b	#1,3(a0)
0001B640 2268 0004                  		movea.l	4(a0),a1
0001B644 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001B648 6600                       		bne.s	loc_1B5CA
0001B64A 4290                       		clr.l	(a0)
0001B64C 42A8 0004                  		clr.l	4(a0)
0001B650 12BC 002B                  		move.b	#$2B,(a1)
0001B654 4E75                       		rts	
0001B656                            ; ===========================================================================
0001B656                            
0001B656                            loc_1B5CA:
0001B656 1280                       		move.b	d0,(a1)
0001B658                            
0001B658                            locret_1B5CC:
0001B658 4E75                       		rts	
0001B65A                            ; ===========================================================================
0001B65A 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001B660                            ; ===========================================================================
0001B660                            
0001B660                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001B660 5328 0002                  		subq.b	#1,2(a0)
0001B664 6A00                       		bpl.s	locret_1B60C
0001B666 117C 0005 0002             		move.b	#5,2(a0)
0001B66C 7000                       		moveq	#0,d0
0001B66E 1028 0003                  		move.b	3(a0),d0
0001B672 5228 0003                  		addq.b	#1,3(a0)
0001B676 2268 0004                  		movea.l	4(a0),a1
0001B67A 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001B67E 1280                       		move.b	d0,(a1)
0001B680 6600                       		bne.s	locret_1B60C
0001B682 4290                       		clr.l	(a0)
0001B684 42A8 0004                  		clr.l	4(a0)
0001B688 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001B68E 303C 00A8                  		move.w	#$A8,d0
0001B692 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001B698                            
0001B698                            locret_1B60C:
0001B698 4E75                       		rts	
0001B69A                            ; ===========================================================================
0001B69A 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001B6A0                            ; ===========================================================================
0001B6A0                            
0001B6A0                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001B6A0 5328 0002                  		subq.b	#1,2(a0)
0001B6A4 6A00                       		bpl.s	locret_1B640
0001B6A6 117C 0001 0002             		move.b	#1,2(a0)
0001B6AC 7000                       		moveq	#0,d0
0001B6AE 1028 0003                  		move.b	3(a0),d0
0001B6B2 5228 0003                  		addq.b	#1,3(a0)
0001B6B6 2268 0004                  		movea.l	4(a0),a1
0001B6BA 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001B6BE 1280                       		move.b	d0,(a1)
0001B6C0 6600                       		bne.s	locret_1B640
0001B6C2 12A8 0004                  		move.b	4(a0),(a1)
0001B6C6 4290                       		clr.l	(a0)
0001B6C8 42A8 0004                  		clr.l	4(a0)
0001B6CC                            
0001B6CC                            locret_1B640:
0001B6CC 4E75                       		rts	
0001B6CE                            ; ===========================================================================
0001B6CE 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001B6D8                            ; ---------------------------------------------------------------------------
0001B6D8                            ; Special stage	layout pointers
0001B6D8                            ; ---------------------------------------------------------------------------
0001B6D8                            SS_LayoutIndex:
0001B6D8                            	include "_inc\Special stage layout pointers.asm"
0001B6D8                            ; ---------------------------------------------------------------------------
0001B6D8                            ; Special stage	layout pointers
0001B6D8                            ; ---------------------------------------------------------------------------
0001B6D8 0000 0000                  	dc.l SS_1
0001B6DC 0000 0000                  	dc.l SS_2
0001B6E0 0000 0000                  	dc.l SS_3
0001B6E4 0000 0000                  	dc.l SS_4
0001B6E8 0000 0000                  	dc.l SS_5
0001B6EC 0000 0000                  	dc.l SS_6
0001B6F0                            	even
0001B6F0                            	even
0001B6F0                            
0001B6F0                            ; ---------------------------------------------------------------------------
0001B6F0                            ; Special stage	start locations
0001B6F0                            ; ---------------------------------------------------------------------------
0001B6F0                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001B708                            		even
0001B708                            
0001B708                            ; ---------------------------------------------------------------------------
0001B708                            ; Subroutine to	load special stage layout
0001B708                            ; ---------------------------------------------------------------------------
0001B708                            
0001B708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B708                            
0001B708                            
0001B708                            SS_Load:				; XREF: SpecialStage
0001B708 7000                       		moveq	#0,d0
0001B70A 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001B70E 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001B712 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001B718 6500                       		bcs.s	SS_ChkEmldNum
0001B71A 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001B720                            
0001B720                            SS_ChkEmldNum:
0001B720 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001B726 6700                       		beq.s	SS_LoadData	; if yes, branch
0001B728 7200                       		moveq	#0,d1
0001B72A 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001B72E 5301                       		subq.b	#1,d1
0001B730 6500                       		bcs.s	SS_LoadData
0001B732 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001B736                            
0001B736                            SS_ChkEmldLoop:	
0001B736 B033 1000                  		cmp.b	(a3,d1.w),d0
0001B73A 6600                       		bne.s	SS_ChkEmldRepeat
0001B73C 60CA                       		bra.s	SS_Load
0001B73E                            ; ===========================================================================
0001B73E                            
0001B73E                            SS_ChkEmldRepeat:
0001B73E 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001B742                            
0001B742                            SS_LoadData:
0001B742 E548                       		lsl.w	#2,d0
0001B744 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001B748 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001B74C 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001B750 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001B754 43F9 00FF 4000             		lea	($FF4000).l,a1
0001B75A 303C 0000                  		move.w	#0,d0
0001B75E 4EB9 0000 171E             		jsr	(EniDec).l
0001B764 43F9 00FF 0000             		lea	($FF0000).l,a1
0001B76A 303C 0FFF                  		move.w	#$FFF,d0
0001B76E                            
0001B76E                            SS_ClrRAM3:
0001B76E 4299                       		clr.l	(a1)+
0001B770 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001B774                            
0001B774 43F9 00FF 1020             		lea	($FF1020).l,a1
0001B77A 41F9 00FF 4000             		lea	($FF4000).l,a0
0001B780 723F                       		moveq	#$3F,d1
0001B782                            
0001B782                            loc_1B6F6:
0001B782 743F                       		moveq	#$3F,d2
0001B784                            
0001B784                            loc_1B6F8:
0001B784 12D8                       		move.b	(a0)+,(a1)+
0001B786 51CA FFFC                  		dbf	d2,loc_1B6F8
0001B78A                            
0001B78A 43E9 0040                  		lea	$40(a1),a1
0001B78E 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001B792                            
0001B792 43F9 00FF 4008             		lea	($FF4008).l,a1
0001B798 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001B79E 724D                       		moveq	#$4D,d1
0001B7A0                            
0001B7A0                            loc_1B714:
0001B7A0 22D8                       		move.l	(a0)+,(a1)+
0001B7A2 32FC 0000                  		move.w	#0,(a1)+
0001B7A6 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001B7AC 32D8                       		move.w	(a0)+,(a1)+
0001B7AE 51C9 FFF0                  		dbf	d1,loc_1B714
0001B7B2                            
0001B7B2 43F9 00FF 4400             		lea	($FF4400).l,a1
0001B7B8 323C 003F                  		move.w	#$3F,d1
0001B7BC                            
0001B7BC                            loc_1B730:
0001B7BC                            
0001B7BC 4299                       		clr.l	(a1)+
0001B7BE 51C9 FFFC                  		dbf	d1,loc_1B730
0001B7C2                            
0001B7C2 4E75                       		rts	
0001B7C4                            ; End of function SS_Load
0001B7C4                            
0001B7C4                            ; ===========================================================================
0001B7C4                            ; ---------------------------------------------------------------------------
0001B7C4                            ; Special stage	mappings and VRAM pointers
0001B7C4                            ; ---------------------------------------------------------------------------
0001B7C4                            SS_MapIndex:
0001B7C4                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001B7C4                            ; ---------------------------------------------------------------------------
0001B7C4                            ; Special stage	mappings and VRAM pointers
0001B7C4                            ; ---------------------------------------------------------------------------
0001B7C4 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001B7C8 0142                       	dc.w $142		; VRAM setting
0001B7CA 0000 0000                  	dc.l Map_SSWalls
0001B7CE 0142                       	dc.w $142
0001B7D0 0000 0000                  	dc.l Map_SSWalls
0001B7D4 0142                       	dc.w $142
0001B7D6 0000 0000                  	dc.l Map_SSWalls
0001B7DA 0142                       	dc.w $142
0001B7DC 0000 0000                  	dc.l Map_SSWalls
0001B7E0 0142                       	dc.w $142
0001B7E2 0000 0000                  	dc.l Map_SSWalls
0001B7E6 0142                       	dc.w $142
0001B7E8 0000 0000                  	dc.l Map_SSWalls
0001B7EC 0142                       	dc.w $142
0001B7EE 0000 0000                  	dc.l Map_SSWalls
0001B7F2 0142                       	dc.w $142
0001B7F4 0000 0000                  	dc.l Map_SSWalls
0001B7F8 0142                       	dc.w $142
0001B7FA 0000 0000                  	dc.l Map_SSWalls
0001B7FE 2142                       	dc.w $2142
0001B800 0000 0000                  	dc.l Map_SSWalls
0001B804 2142                       	dc.w $2142
0001B806 0000 0000                  	dc.l Map_SSWalls
0001B80A 2142                       	dc.w $2142
0001B80C 0000 0000                  	dc.l Map_SSWalls
0001B810 2142                       	dc.w $2142
0001B812 0000 0000                  	dc.l Map_SSWalls
0001B816 2142                       	dc.w $2142
0001B818 0000 0000                  	dc.l Map_SSWalls
0001B81C 2142                       	dc.w $2142
0001B81E 0000 0000                  	dc.l Map_SSWalls
0001B822 2142                       	dc.w $2142
0001B824 0000 0000                  	dc.l Map_SSWalls
0001B828 2142                       	dc.w $2142
0001B82A 0000 0000                  	dc.l Map_SSWalls
0001B82E 2142                       	dc.w $2142
0001B830 0000 0000                  	dc.l Map_SSWalls
0001B834 4142                       	dc.w $4142
0001B836 0000 0000                  	dc.l Map_SSWalls
0001B83A 4142                       	dc.w $4142
0001B83C 0000 0000                  	dc.l Map_SSWalls
0001B840 4142                       	dc.w $4142
0001B842 0000 0000                  	dc.l Map_SSWalls
0001B846 4142                       	dc.w $4142
0001B848 0000 0000                  	dc.l Map_SSWalls
0001B84C 4142                       	dc.w $4142
0001B84E 0000 0000                  	dc.l Map_SSWalls
0001B852 4142                       	dc.w $4142
0001B854 0000 0000                  	dc.l Map_SSWalls
0001B858 4142                       	dc.w $4142
0001B85A 0000 0000                  	dc.l Map_SSWalls
0001B85E 4142                       	dc.w $4142
0001B860 0000 0000                  	dc.l Map_SSWalls
0001B864 4142                       	dc.w $4142
0001B866 0000 0000                  	dc.l Map_SSWalls
0001B86A 6142                       	dc.w $6142
0001B86C 0000 0000                  	dc.l Map_SSWalls
0001B870 6142                       	dc.w $6142
0001B872 0000 0000                  	dc.l Map_SSWalls
0001B876 6142                       	dc.w $6142
0001B878 0000 0000                  	dc.l Map_SSWalls
0001B87C 6142                       	dc.w $6142
0001B87E 0000 0000                  	dc.l Map_SSWalls
0001B882 6142                       	dc.w $6142
0001B884 0000 0000                  	dc.l Map_SSWalls
0001B888 6142                       	dc.w $6142
0001B88A 0000 0000                  	dc.l Map_SSWalls
0001B88E 6142                       	dc.w $6142
0001B890 0000 0000                  	dc.l Map_SSWalls
0001B894 6142                       	dc.w $6142
0001B896 0000 0000                  	dc.l Map_SSWalls
0001B89A 6142                       	dc.w $6142
0001B89C 0000 EBC0                  	dc.l Map_obj47
0001B8A0 023B                       	dc.w $23B
0001B8A2 0000 0000                  	dc.l Map_SS_R
0001B8A6 0570                       	dc.w $570
0001B8A8 0000 0000                  	dc.l Map_SS_R
0001B8AC 0251                       	dc.w $251
0001B8AE 0000 0000                  	dc.l Map_SS_R
0001B8B2 0370                       	dc.w $370
0001B8B4 0000 0000                  	dc.l Map_SS_Up
0001B8B8 0263                       	dc.w $263
0001B8BA 0000 0000                  	dc.l Map_SS_Down
0001B8BE 0263                       	dc.w $263
0001B8C0 0000 0000                  	dc.l Map_SS_R
0001B8C4 22F0                       	dc.w $22F0
0001B8C6 0000 0000                  	dc.l Map_SS_Glass
0001B8CA 0470                       	dc.w $470
0001B8CC 0000 0000                  	dc.l Map_SS_Glass
0001B8D0 05F0                       	dc.w $5F0
0001B8D2 0000 0000                  	dc.l Map_SS_Glass
0001B8D6 65F0                       	dc.w $65F0
0001B8D8 0000 0000                  	dc.l Map_SS_Glass
0001B8DC 25F0                       	dc.w $25F0
0001B8DE 0000 0000                  	dc.l Map_SS_Glass
0001B8E2 45F0                       	dc.w $45F0
0001B8E4 0000 0000                  	dc.l Map_SS_R
0001B8E8 02F0                       	dc.w $2F0
0001B8EA 0100 EBC0                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001B8EE 023B                       	dc.w $23B
0001B8F0 0200 EBC0                  	dc.l Map_obj47+$2000000
0001B8F4 023B                       	dc.w $23B
0001B8F6 0000 0000                  	dc.l Map_SS_R
0001B8FA 0797                       	dc.w $797
0001B8FC 0000 0000                  	dc.l Map_SS_R
0001B900 07A0                       	dc.w $7A0
0001B902 0000 0000                  	dc.l Map_SS_R
0001B906 07A9                       	dc.w $7A9
0001B908 0000 0000                  	dc.l Map_SS_R
0001B90C 0797                       	dc.w $797
0001B90E 0000 0000                  	dc.l Map_SS_R
0001B912 07A0                       	dc.w $7A0
0001B914 0000 0000                  	dc.l Map_SS_R
0001B918 07A9                       	dc.w $7A9
0001B91A 0000 A072                  	dc.l Map_obj25
0001B91E 27B2                       	dc.w $27B2
0001B920 0000 0000                  	dc.l Map_SS_Chaos3
0001B924 0770                       	dc.w $770
0001B926 0000 0000                  	dc.l Map_SS_Chaos3
0001B92A 2770                       	dc.w $2770
0001B92C 0000 0000                  	dc.l Map_SS_Chaos3
0001B930 4770                       	dc.w $4770
0001B932 0000 0000                  	dc.l Map_SS_Chaos3
0001B936 6770                       	dc.w $6770
0001B938 0000 0000                  	dc.l Map_SS_Chaos1
0001B93C 0770                       	dc.w $770
0001B93E 0000 0000                  	dc.l Map_SS_Chaos2
0001B942 0770                       	dc.w $770
0001B944 0000 0000                  	dc.l Map_SS_R
0001B948 04F0                       	dc.w $4F0
0001B94A 0400 A072                  	dc.l Map_obj25+$4000000
0001B94E 27B2                       	dc.w $27B2
0001B950 0500 A072                  	dc.l Map_obj25+$5000000
0001B954 27B2                       	dc.w $27B2
0001B956 0600 A072                  	dc.l Map_obj25+$6000000
0001B95A 27B2                       	dc.w $27B2
0001B95C 0700 A072                  	dc.l Map_obj25+$7000000
0001B960 27B2                       	dc.w $27B2
0001B962 0000 0000                  	dc.l Map_SS_Glass
0001B966 23F0                       	dc.w $23F0
0001B968 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001B96C 23F0                       	dc.w $23F0
0001B96E 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001B972 23F0                       	dc.w $23F0
0001B974 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001B978 23F0                       	dc.w $23F0
0001B97A 0000 0000                  	dc.l Map_SS_R+$2000000
0001B97E 04F0                       	dc.w $4F0
0001B980 0000 0000                  	dc.l Map_SS_Glass
0001B984 05F0                       	dc.w $5F0
0001B986 0000 0000                  	dc.l Map_SS_Glass
0001B98A 65F0                       	dc.w $65F0
0001B98C 0000 0000                  	dc.l Map_SS_Glass
0001B990 25F0                       	dc.w $25F0
0001B992 0000 0000                  	dc.l Map_SS_Glass
0001B996 45F0                       	dc.w $45F0
0001B996 45F0                       	dc.w $45F0
0001B998                            
0001B998                            ; ---------------------------------------------------------------------------
0001B998                            ; Sprite mappings - special stage "R" block
0001B998                            ; ---------------------------------------------------------------------------
0001B998                            Map_SS_R:
0001B998                            	include "_maps\SSRblock.asm"
0001B998                            ; ---------------------------------------------------------------------------
0001B998                            ; Sprite mappings - special stage "R" block
0001B998                            ; ---------------------------------------------------------------------------
0001B998 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001B99C 0000                       		dc.w byte_1B91E-Map_SS_R
0001B99E 01                         byte_1B912:	dc.b 1
0001B99F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B9A4 01                         byte_1B918:	dc.b 1
0001B9A5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001B9AA 00                         byte_1B91E:	dc.b 0
0001B9AC 00                         		even
0001B9AC 00                         		even
0001B9AC                            
0001B9AC                            ; ---------------------------------------------------------------------------
0001B9AC                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001B9AC                            ; ---------------------------------------------------------------------------
0001B9AC                            Map_SS_Glass:
0001B9AC                            	include "_maps\SSglassblock.asm"
0001B9AC                            ; ---------------------------------------------------------------------------
0001B9AC                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001B9AC                            ; ---------------------------------------------------------------------------
0001B9AC 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001B9B0 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001B9B4 01                         byte_1B928:	dc.b 1
0001B9B5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B9BA 01                         byte_1B92E:	dc.b 1
0001B9BB F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001B9C0 01                         byte_1B934:	dc.b 1
0001B9C1 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001B9C6 01                         byte_1B93A:	dc.b 1
0001B9C7 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001B9CC                            		even
0001B9CC                            		even
0001B9CC                            
0001B9CC                            ; ---------------------------------------------------------------------------
0001B9CC                            ; Sprite mappings - special stage "UP" block
0001B9CC                            ; ---------------------------------------------------------------------------
0001B9CC                            Map_SS_Up:
0001B9CC                            	include "_maps\SSUPblock.asm"
0001B9CC                            ; ---------------------------------------------------------------------------
0001B9CC                            ; Sprite mappings - special stage "UP" block
0001B9CC                            ; ---------------------------------------------------------------------------
0001B9CC 0000                       		dc.w byte_1B944-Map_SS_Up
0001B9CE 0000                       		dc.w byte_1B94A-Map_SS_Up
0001B9D0 01                         byte_1B944:	dc.b 1
0001B9D1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B9D6 01                         byte_1B94A:	dc.b 1
0001B9D7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001B9DC                            		even
0001B9DC                            		even
0001B9DC                            
0001B9DC                            ; ---------------------------------------------------------------------------
0001B9DC                            ; Sprite mappings - special stage "DOWN" block
0001B9DC                            ; ---------------------------------------------------------------------------
0001B9DC                            Map_SS_Down:
0001B9DC                            	include "_maps\SSDOWNblock.asm"
0001B9DC                            ; ---------------------------------------------------------------------------
0001B9DC                            ; Sprite mappings - special stage "DOWN" block
0001B9DC                            ; ---------------------------------------------------------------------------
0001B9DC 0000                       		dc.w byte_1B954-Map_SS_Down
0001B9DE 0000                       		dc.w byte_1B95A-Map_SS_Down
0001B9E0 01                         byte_1B954:	dc.b 1
0001B9E1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001B9E6 01                         byte_1B95A:	dc.b 1
0001B9E7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001B9EC                            		even
0001B9EC                            		even
0001B9EC                            
0001B9EC                            ; ---------------------------------------------------------------------------
0001B9EC                            ; Sprite mappings - special stage chaos	emeralds
0001B9EC                            ; ---------------------------------------------------------------------------
0001B9EC 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001B9EE 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001B9F0 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001B9F2 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001B9F4 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001B9F6 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001B9F8 01                         byte_1B96C:	dc.b 1
0001B9F9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001B9FE 01                         byte_1B972:	dc.b 1
0001B9FF F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BA04 01                         byte_1B978:	dc.b 1
0001BA05 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BA0A 01                         byte_1B97E:	dc.b 1
0001BA0B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BA10                            		even
0001BA10                            ; ===========================================================================
0001BA10                            ; ---------------------------------------------------------------------------
0001BA10                            ; Object 09 - Sonic (special stage)
0001BA10                            ; ---------------------------------------------------------------------------
0001BA10                            
0001BA10                            Obj09:					; XREF: Obj_Index
0001BA10 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BA14 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BA16 6100 0000                  		bsr.w	SS_FixCamera
0001BA1A 6000 0000                  		bra.w	DebugMode
0001BA1E                            ; ===========================================================================
0001BA1E                            
0001BA1E                            Obj09_Normal:
0001BA1E 7000                       		moveq	#0,d0
0001BA20 1028 0024                  		move.b	$24(a0),d0
0001BA24 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BA28 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BA2C                            ; ===========================================================================
0001BA2C 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BA2E 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BA30 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BA32 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BA34                            ; ===========================================================================
0001BA34                            
0001BA34                            Obj09_Main:				; XREF: Obj09_Index
0001BA34 5428 0024                  		addq.b	#2,$24(a0)
0001BA38 117C 000E 0016             		move.b	#$E,$16(a0)
0001BA3E 117C 0007 0017             		move.b	#7,$17(a0)
0001BA44 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BA4C 317C 0780 0002             		move.w	#$780,2(a0)
0001BA52 117C 0004 0001             		move.b	#4,1(a0)
0001BA58 117C 0000 0018             		move.b	#0,$18(a0)
0001BA5E 117C 0002 001C             		move.b	#2,$1C(a0)
0001BA64 08E8 0002 0022             		bset	#2,$22(a0)
0001BA6A 08E8 0001 0022             		bset	#1,$22(a0)
0001BA70                            
0001BA70                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BA70 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BA74 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BA76 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BA7C 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BA7E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001BA84                            
0001BA84                            Obj09_NoDebug:
0001BA84 117C 0000 0030             		move.b	#0,$30(a0)
0001BA8A 7000                       		moveq	#0,d0
0001BA8C 1028 0022                  		move.b	$22(a0),d0
0001BA90 0240 0002                  		andi.w	#2,d0
0001BA94 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001BA98 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001BA9C 4EBA 8272                  		jsr	LoadSonicDynPLC
0001BAA0 4EF9 0000 D6CC             		jmp	DisplaySprite
0001BAA6                            ; ===========================================================================
0001BAA6 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001BAA8 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001BAAA                            ; ===========================================================================
0001BAAA                            
0001BAAA                            Obj09_OnWall:				; XREF: Obj09_Modes
0001BAAA 6100 0000                  		bsr.w	Obj09_Jump
0001BAAE 6100 0000                  		bsr.w	Obj09_Move
0001BAB2 6100 0000                  		bsr.w	Obj09_Fall
0001BAB6 6000                       		bra.s	Obj09_Display
0001BAB8                            ; ===========================================================================
0001BAB8                            
0001BAB8                            Obj09_InAir:				; XREF: Obj09_Modes
0001BAB8 6100 0000                  		bsr.w	nullsub_2
0001BABC 6100 0000                  		bsr.w	Obj09_Move
0001BAC0 6100 0000                  		bsr.w	Obj09_Fall
0001BAC4                            
0001BAC4                            Obj09_Display:				; XREF: Obj09_OnWall
0001BAC4 6100 0000                  		bsr.w	Obj09_ChkItems
0001BAC8 6100 0000                  		bsr.w	Obj09_ChkItems2
0001BACC 4EB9 0000 D6A6             		jsr	SpeedToPos
0001BAD2 6100 0000                  		bsr.w	SS_FixCamera
0001BAD6 3038 F780                  		move.w	($FFFFF780).w,d0
0001BADA D078 F782                  		add.w	($FFFFF782).w,d0
0001BADE 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BAE2 4EB9 0001 3A96             		jsr	Sonic_Animate
0001BAE8 4E75                       		rts	
0001BAEA                            
0001BAEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAEA                            
0001BAEA                            
0001BAEA                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001BAEA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001BAF0 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001BAF2 6100 0000                  		bsr.w	Obj09_MoveLeft
0001BAF6                            
0001BAF6                            Obj09_ChkRight:
0001BAF6 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001BAFC 6700                       		beq.s	loc_1BA78	; if not, branch
0001BAFE 6100 0000                  		bsr.w	Obj09_MoveRight
0001BB02                            
0001BB02                            loc_1BA78:
0001BB02 1038 F602                  		move.b	($FFFFF602).w,d0
0001BB06 0200 000C                  		andi.b	#$C,d0
0001BB0A 6600                       		bne.s	loc_1BAA8
0001BB0C 3028 0014                  		move.w	$14(a0),d0
0001BB10 6700                       		beq.s	loc_1BAA8
0001BB12 6B00                       		bmi.s	loc_1BA9A
0001BB14 0440 000C                  		subi.w	#$C,d0
0001BB18 6400                       		bcc.s	loc_1BA94
0001BB1A 303C 0000                  		move.w	#0,d0
0001BB1E                            
0001BB1E                            loc_1BA94:
0001BB1E 3140 0014                  		move.w	d0,$14(a0)
0001BB22 6000                       		bra.s	loc_1BAA8
0001BB24                            ; ===========================================================================
0001BB24                            
0001BB24                            loc_1BA9A:
0001BB24 0640 000C                  		addi.w	#$C,d0
0001BB28 6400                       		bcc.s	loc_1BAA4
0001BB2A 303C 0000                  		move.w	#0,d0
0001BB2E                            
0001BB2E                            loc_1BAA4:
0001BB2E 3140 0014                  		move.w	d0,$14(a0)
0001BB32                            
0001BB32                            loc_1BAA8:
0001BB32 1038 F780                  		move.b	($FFFFF780).w,d0
0001BB36 0600 0020                  		addi.b	#$20,d0
0001BB3A 0200 00C0                  		andi.b	#$C0,d0
0001BB3E 4400                       		neg.b	d0
0001BB40 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BB46 C3E8 0014                  		muls.w	$14(a0),d1
0001BB4A D3A8 0008                  		add.l	d1,8(a0)
0001BB4E C1E8 0014                  		muls.w	$14(a0),d0
0001BB52 D1A8 000C                  		add.l	d0,$C(a0)
0001BB56 48E7 C000                  		movem.l	d0-d1,-(sp)
0001BB5A 2428 000C                  		move.l	$C(a0),d2
0001BB5E 2628 0008                  		move.l	8(a0),d3
0001BB62 6100 0000                  		bsr.w	sub_1BCE8
0001BB66 6700                       		beq.s	loc_1BAF2
0001BB68 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BB6C 93A8 0008                  		sub.l	d1,8(a0)
0001BB70 91A8 000C                  		sub.l	d0,$C(a0)
0001BB74 317C 0000 0014             		move.w	#0,$14(a0)
0001BB7A 4E75                       		rts	
0001BB7C                            ; ===========================================================================
0001BB7C                            
0001BB7C                            loc_1BAF2:
0001BB7C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BB80 4E75                       		rts	
0001BB82                            ; End of function Obj09_Move
0001BB82                            
0001BB82                            
0001BB82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB82                            
0001BB82                            
0001BB82                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001BB82 08E8 0000 0022             		bset	#0,$22(a0)
0001BB88 3028 0014                  		move.w	$14(a0),d0
0001BB8C 6700                       		beq.s	loc_1BB06
0001BB8E 6A00                       		bpl.s	loc_1BB1A
0001BB90                            
0001BB90                            loc_1BB06:
0001BB90 0440 000C                  		subi.w	#$C,d0
0001BB94 0C40 F800                  		cmpi.w	#-$800,d0
0001BB98 6E00                       		bgt.s	loc_1BB14
0001BB9A 303C F800                  		move.w	#-$800,d0
0001BB9E                            
0001BB9E                            loc_1BB14:
0001BB9E 3140 0014                  		move.w	d0,$14(a0)
0001BBA2 4E75                       		rts	
0001BBA4                            ; ===========================================================================
0001BBA4                            
0001BBA4                            loc_1BB1A:
0001BBA4 0440 0040                  		subi.w	#$40,d0
0001BBA8 6400                       		bcc.s	loc_1BB22
0001BBAA 4E71                       		nop	
0001BBAC                            
0001BBAC                            loc_1BB22:
0001BBAC 3140 0014                  		move.w	d0,$14(a0)
0001BBB0 4E75                       		rts	
0001BBB2                            ; End of function Obj09_MoveLeft
0001BBB2                            
0001BBB2                            
0001BBB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBB2                            
0001BBB2                            
0001BBB2                            Obj09_MoveRight:			; XREF: Obj09_Move
0001BBB2 08A8 0000 0022             		bclr	#0,$22(a0)
0001BBB8 3028 0014                  		move.w	$14(a0),d0
0001BBBC 6B00                       		bmi.s	loc_1BB48
0001BBBE 0640 000C                  		addi.w	#$C,d0
0001BBC2 0C40 0800                  		cmpi.w	#$800,d0
0001BBC6 6D00                       		blt.s	loc_1BB42
0001BBC8 303C 0800                  		move.w	#$800,d0
0001BBCC                            
0001BBCC                            loc_1BB42:
0001BBCC 3140 0014                  		move.w	d0,$14(a0)
0001BBD0 6000                       		bra.s	locret_1BB54
0001BBD2                            ; ===========================================================================
0001BBD2                            
0001BBD2                            loc_1BB48:
0001BBD2 0640 0040                  		addi.w	#$40,d0
0001BBD6 6400                       		bcc.s	loc_1BB50
0001BBD8 4E71                       		nop	
0001BBDA                            
0001BBDA                            loc_1BB50:
0001BBDA 3140 0014                  		move.w	d0,$14(a0)
0001BBDE                            
0001BBDE                            locret_1BB54:
0001BBDE 4E75                       		rts	
0001BBE0                            ; End of function Obj09_MoveRight
0001BBE0                            
0001BBE0                            
0001BBE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBE0                            
0001BBE0                            
0001BBE0                            Obj09_Jump:				; XREF: Obj09_OnWall
0001BBE0 1038 F603                  		move.b	($FFFFF603).w,d0
0001BBE4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001BBE8 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001BBEA 1038 F780                  		move.b	($FFFFF780).w,d0
0001BBEE 0200 00FC                  		andi.b	#$FC,d0
0001BBF2 4400                       		neg.b	d0
0001BBF4 0400 0040                  		subi.b	#$40,d0
0001BBF8 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BBFE C3FC 0680                  		muls.w	#$680,d1
0001BC02 E081                       		asr.l	#8,d1
0001BC04 3141 0010                  		move.w	d1,$10(a0)
0001BC08 C1FC 0680                  		muls.w	#$680,d0
0001BC0C E080                       		asr.l	#8,d0
0001BC0E 3140 0012                  		move.w	d0,$12(a0)
0001BC12 08E8 0001 0022             		bset	#1,$22(a0)
0001BC18 303C 00A0                  		move.w	#$A0,d0
0001BC1C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001BC22                            
0001BC22                            Obj09_NoJump:
0001BC22 4E75                       		rts	
0001BC24                            ; End of function Obj09_Jump
0001BC24                            
0001BC24                            
0001BC24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC24                            
0001BC24                            
0001BC24                            nullsub_2:				; XREF: Obj09_InAir
0001BC24 4E75                       		rts	
0001BC26                            ; End of function nullsub_2
0001BC26                            
0001BC26                            ; ===========================================================================
0001BC26                            ; ---------------------------------------------------------------------------
0001BC26                            ; unused subroutine to limit Sonic's upward vertical speed
0001BC26                            ; ---------------------------------------------------------------------------
0001BC26 323C FC00                  		move.w	#-$400,d1
0001BC2A B268 0012                  		cmp.w	$12(a0),d1
0001BC2E 6F00                       		ble.s	locret_1BBB4
0001BC30 1038 F602                  		move.b	($FFFFF602).w,d0
0001BC34 0200 0070                  		andi.b	#$70,d0
0001BC38 6600                       		bne.s	locret_1BBB4
0001BC3A 3141 0012                  		move.w	d1,$12(a0)
0001BC3E                            
0001BC3E                            locret_1BBB4:
0001BC3E 4E75                       		rts	
0001BC40                            ; ---------------------------------------------------------------------------
0001BC40                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001BC40                            ; ---------------------------------------------------------------------------
0001BC40                            
0001BC40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC40                            
0001BC40                            
0001BC40                            SS_FixCamera:				; XREF: Obj09
0001BC40 3428 000C                  		move.w	$C(a0),d2
0001BC44 3628 0008                  		move.w	8(a0),d3
0001BC48 3038 F700                  		move.w	($FFFFF700).w,d0
0001BC4C 0443 00A0                  		subi.w	#$A0,d3
0001BC50 6500                       		bcs.s	loc_1BBCE
0001BC52 9043                       		sub.w	d3,d0
0001BC54 9178 F700                  		sub.w	d0,($FFFFF700).w
0001BC58                            
0001BC58                            loc_1BBCE:
0001BC58 3038 F704                  		move.w	($FFFFF704).w,d0
0001BC5C 0442 0070                  		subi.w	#$70,d2
0001BC60 6500                       		bcs.s	locret_1BBDE
0001BC62 9042                       		sub.w	d2,d0
0001BC64 9178 F704                  		sub.w	d0,($FFFFF704).w
0001BC68                            
0001BC68                            locret_1BBDE:
0001BC68 4E75                       		rts	
0001BC6A                            ; End of function SS_FixCamera
0001BC6A                            
0001BC6A                            ; ===========================================================================
0001BC6A                            
0001BC6A                            Obj09_ExitStage:			; XREF: Obj09_Index
0001BC6A 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001BC70 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001BC76 6600                       		bne.s	loc_1BBF4
0001BC78 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BC7E                            
0001BC7E                            loc_1BBF4:
0001BC7E 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001BC84 6D00                       		blt.s	loc_1BC12
0001BC86 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001BC8C 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001BC92 5428 0024                  		addq.b	#2,$24(a0)
0001BC96 317C 003C 0038             		move.w	#$3C,$38(a0)
0001BC9C                            
0001BC9C                            loc_1BC12:
0001BC9C 3038 F780                  		move.w	($FFFFF780).w,d0
0001BCA0 D078 F782                  		add.w	($FFFFF782).w,d0
0001BCA4 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BCA8 4EB9 0001 3A96             		jsr	Sonic_Animate
0001BCAE 4EBA 8060                  		jsr	LoadSonicDynPLC
0001BCB2 6100 FF8C                  		bsr.w	SS_FixCamera
0001BCB6 4EF9 0000 D6CC             		jmp	DisplaySprite
0001BCBC                            ; ===========================================================================
0001BCBC                            
0001BCBC                            Obj09_Exit2:				; XREF: Obj09_Index
0001BCBC 5368 0038                  		subq.w	#1,$38(a0)
0001BCC0 6600                       		bne.s	loc_1BC40
0001BCC2 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BCC8                            
0001BCC8                            loc_1BC40:
0001BCC8 4EB9 0001 3A96             		jsr	Sonic_Animate
0001BCCE 4EBA 8040                  		jsr	LoadSonicDynPLC
0001BCD2 6100 FF6C                  		bsr.w	SS_FixCamera
0001BCD6 4EF9 0000 D6CC             		jmp	DisplaySprite
0001BCDC                            
0001BCDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCDC                            
0001BCDC                            
0001BCDC                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001BCDC 2428 000C                  		move.l	$C(a0),d2
0001BCE0 2628 0008                  		move.l	8(a0),d3
0001BCE4 1038 F780                  		move.b	($FFFFF780).w,d0
0001BCE8 0200 00FC                  		andi.b	#$FC,d0
0001BCEC 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BCF2 3828 0010                  		move.w	$10(a0),d4
0001BCF6 48C4                       		ext.l	d4
0001BCF8 E184                       		asl.l	#8,d4
0001BCFA C1FC 002A                  		muls.w	#$2A,d0
0001BCFE D084                       		add.l	d4,d0
0001BD00 3828 0012                  		move.w	$12(a0),d4
0001BD04 48C4                       		ext.l	d4
0001BD06 E184                       		asl.l	#8,d4
0001BD08 C3FC 002A                  		muls.w	#$2A,d1
0001BD0C D284                       		add.l	d4,d1
0001BD0E D680                       		add.l	d0,d3
0001BD10 6100 0000                  		bsr.w	sub_1BCE8
0001BD14 6700                       		beq.s	loc_1BCB0
0001BD16 9680                       		sub.l	d0,d3
0001BD18 7000                       		moveq	#0,d0
0001BD1A 3140 0010                  		move.w	d0,$10(a0)
0001BD1E 08A8 0001 0022             		bclr	#1,$22(a0)
0001BD24 D481                       		add.l	d1,d2
0001BD26 6100 0000                  		bsr.w	sub_1BCE8
0001BD2A 6700                       		beq.s	loc_1BCC6
0001BD2C 9481                       		sub.l	d1,d2
0001BD2E 7200                       		moveq	#0,d1
0001BD30 3141 0012                  		move.w	d1,$12(a0)
0001BD34 4E75                       		rts	
0001BD36                            ; ===========================================================================
0001BD36                            
0001BD36                            loc_1BCB0:
0001BD36 D481                       		add.l	d1,d2
0001BD38 6100 0000                  		bsr.w	sub_1BCE8
0001BD3C 6700                       		beq.s	loc_1BCD4
0001BD3E 9481                       		sub.l	d1,d2
0001BD40 7200                       		moveq	#0,d1
0001BD42 3141 0012                  		move.w	d1,$12(a0)
0001BD46 08A8 0001 0022             		bclr	#1,$22(a0)
0001BD4C                            
0001BD4C                            loc_1BCC6:
0001BD4C E080                       		asr.l	#8,d0
0001BD4E E081                       		asr.l	#8,d1
0001BD50 3140 0010                  		move.w	d0,$10(a0)
0001BD54 3141 0012                  		move.w	d1,$12(a0)
0001BD58 4E75                       		rts	
0001BD5A                            ; ===========================================================================
0001BD5A                            
0001BD5A                            loc_1BCD4:
0001BD5A E080                       		asr.l	#8,d0
0001BD5C E081                       		asr.l	#8,d1
0001BD5E 3140 0010                  		move.w	d0,$10(a0)
0001BD62 3141 0012                  		move.w	d1,$12(a0)
0001BD66 08E8 0001 0022             		bset	#1,$22(a0)
0001BD6C 4E75                       		rts	
0001BD6E                            ; End of function Obj09_Fall
0001BD6E                            
0001BD6E                            
0001BD6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD6E                            
0001BD6E                            
0001BD6E                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001BD6E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BD74 7800                       		moveq	#0,d4
0001BD76 4842                       		swap	d2
0001BD78 3802                       		move.w	d2,d4
0001BD7A 4842                       		swap	d2
0001BD7C 0644 0044                  		addi.w	#$44,d4
0001BD80 88FC 0018                  		divu.w	#$18,d4
0001BD84 C8FC 0080                  		mulu.w	#$80,d4
0001BD88 D3C4                       		adda.l	d4,a1
0001BD8A 7800                       		moveq	#0,d4
0001BD8C 4843                       		swap	d3
0001BD8E 3803                       		move.w	d3,d4
0001BD90 4843                       		swap	d3
0001BD92 0644 0014                  		addi.w	#$14,d4
0001BD96 88FC 0018                  		divu.w	#$18,d4
0001BD9A D2C4                       		adda.w	d4,a1
0001BD9C 7A00                       		moveq	#0,d5
0001BD9E 1819                       		move.b	(a1)+,d4
0001BDA0 6100                       		bsr.s	sub_1BD30
0001BDA2 1819                       		move.b	(a1)+,d4
0001BDA4 6100                       		bsr.s	sub_1BD30
0001BDA6 D2FC 007E                  		adda.w	#$7E,a1
0001BDAA 1819                       		move.b	(a1)+,d4
0001BDAC 6100                       		bsr.s	sub_1BD30
0001BDAE 1819                       		move.b	(a1)+,d4
0001BDB0 6100                       		bsr.s	sub_1BD30
0001BDB2 4A05                       		tst.b	d5
0001BDB4 4E75                       		rts	
0001BDB6                            ; End of function sub_1BCE8
0001BDB6                            
0001BDB6                            
0001BDB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDB6                            
0001BDB6                            
0001BDB6                            sub_1BD30:				; XREF: sub_1BCE8
0001BDB6 6700                       		beq.s	locret_1BD44
0001BDB8 0C04 0028                  		cmpi.b	#$28,d4
0001BDBC 6700                       		beq.s	locret_1BD44
0001BDBE 0C04 003A                  		cmpi.b	#$3A,d4
0001BDC2 6500                       		bcs.s	loc_1BD46
0001BDC4 0C04 004B                  		cmpi.b	#$4B,d4
0001BDC8 6400                       		bcc.s	loc_1BD46
0001BDCA                            
0001BDCA                            locret_1BD44:
0001BDCA 4E75                       		rts	
0001BDCC                            ; ===========================================================================
0001BDCC                            
0001BDCC                            loc_1BD46:
0001BDCC 1144 0030                  		move.b	d4,$30(a0)
0001BDD0 2149 0032                  		move.l	a1,$32(a0)
0001BDD4 7AFF                       		moveq	#-1,d5
0001BDD6 4E75                       		rts	
0001BDD8                            ; End of function sub_1BD30
0001BDD8                            
0001BDD8                            
0001BDD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDD8                            
0001BDD8                            
0001BDD8                            Obj09_ChkItems:				; XREF: Obj09_Display
0001BDD8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BDDE 7800                       		moveq	#0,d4
0001BDE0 3828 000C                  		move.w	$C(a0),d4
0001BDE4 0644 0050                  		addi.w	#$50,d4
0001BDE8 88FC 0018                  		divu.w	#$18,d4
0001BDEC C8FC 0080                  		mulu.w	#$80,d4
0001BDF0 D3C4                       		adda.l	d4,a1
0001BDF2 7800                       		moveq	#0,d4
0001BDF4 3828 0008                  		move.w	8(a0),d4
0001BDF8 0644 0020                  		addi.w	#$20,d4
0001BDFC 88FC 0018                  		divu.w	#$18,d4
0001BE00 D2C4                       		adda.w	d4,a1
0001BE02 1811                       		move.b	(a1),d4
0001BE04 6600                       		bne.s	Obj09_ChkCont
0001BE06 4A28 003A                  		tst.b	$3A(a0)
0001BE0A 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001BE0E 7800                       		moveq	#0,d4
0001BE10 4E75                       		rts	
0001BE12                            ; ===========================================================================
0001BE12                            
0001BE12                            Obj09_ChkCont:
0001BE12 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001BE16 6600                       		bne.s	Obj09_Chk1Up
0001BE18 6100 F72C                  		bsr.w	SS_RemoveCollectedItem
0001BE1C 6600                       		bne.s	Obj09_GetCont
0001BE1E 14BC 0001                  		move.b	#1,(a2)
0001BE22 2549 0004                  		move.l	a1,4(a2)
0001BE26                            
0001BE26                            Obj09_GetCont:
0001BE26 4EB9 0000 9D5A             		jsr	CollectRing
0001BE2C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001BE32 6500                       		bcs.s	Obj09_NoCont
0001BE34 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001BE3A 6600                       		bne.s	Obj09_NoCont
0001BE3C 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001BE40 303C 00BF                  		move.w	#$BF,d0
0001BE44 4EB9 0000 1396             		jsr	(PlaySound).l	; play extra continue sound
0001BE4A                            
0001BE4A                            Obj09_NoCont:
0001BE4A 7800                       		moveq	#0,d4
0001BE4C 4E75                       		rts	
0001BE4E                            ; ===========================================================================
0001BE4E                            
0001BE4E                            Obj09_Chk1Up:
0001BE4E 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001BE52 6600                       		bne.s	Obj09_ChkEmer
0001BE54 6100 F6F0                  		bsr.w	SS_RemoveCollectedItem
0001BE58 6600                       		bne.s	Obj09_Get1Up
0001BE5A 14BC 0003                  		move.b	#3,(a2)
0001BE5E 2549 0004                  		move.l	a1,4(a2)
0001BE62                            
0001BE62                            Obj09_Get1Up:
0001BE62 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001BE66 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001BE6A 303C 0088                  		move.w	#$88,d0
0001BE6E 4EB9 0000 1396             		jsr	(PlaySound).l	; play extra life music
0001BE74 7800                       		moveq	#0,d4
0001BE76 4E75                       		rts	
0001BE78                            ; ===========================================================================
0001BE78                            
0001BE78                            Obj09_ChkEmer:
0001BE78 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001BE7C 6500                       		bcs.s	Obj09_ChkGhost
0001BE7E 0C04 0040                  		cmpi.b	#$40,d4
0001BE82 6200                       		bhi.s	Obj09_ChkGhost
0001BE84 6100 F6C0                  		bsr.w	SS_RemoveCollectedItem
0001BE88 6600                       		bne.s	Obj09_GetEmer
0001BE8A 14BC 0005                  		move.b	#5,(a2)
0001BE8E 2549 0004                  		move.l	a1,4(a2)
0001BE92                            
0001BE92                            Obj09_GetEmer:
0001BE92 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001BE98 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001BE9A 0404 003B                  		subi.b	#$3B,d4
0001BE9E 7000                       		moveq	#0,d0
0001BEA0 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001BEA4 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001BEA8 1584 0000                  		move.b	d4,(a2,d0.w)
0001BEAC 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001BEB0                            
0001BEB0                            Obj09_NoEmer:
0001BEB0 303C 0093                  		move.w	#$93,d0
0001BEB4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play emerald music
0001BEBA 7800                       		moveq	#0,d4
0001BEBC 4E75                       		rts	
0001BEBE                            ; ===========================================================================
0001BEBE                            
0001BEBE                            Obj09_ChkGhost:
0001BEBE 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001BEC2 6600                       		bne.s	Obj09_ChkGhostTag
0001BEC4 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001BECA                            
0001BECA                            Obj09_ChkGhostTag:
0001BECA 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001BECE 6600                       		bne.s	Obj09_NoGhost
0001BED0 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001BED6 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001BED8 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001BEDE                            
0001BEDE                            Obj09_NoGhost:
0001BEDE 78FF                       		moveq	#-1,d4
0001BEE0 4E75                       		rts	
0001BEE2                            ; ===========================================================================
0001BEE2                            
0001BEE2                            Obj09_MakeGhostSolid:
0001BEE2 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001BEE8 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001BEEA 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BEF0 723F                       		moveq	#$3F,d1
0001BEF2                            
0001BEF2                            Obj09_GhostLoop2:
0001BEF2 743F                       		moveq	#$3F,d2
0001BEF4                            
0001BEF4                            Obj09_GhostLoop:
0001BEF4 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001BEF8 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001BEFA 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001BEFE                            
0001BEFE                            Obj09_NoReplace:
0001BEFE 5249                       		addq.w	#1,a1
0001BF00 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001BF04 43E9 0040                  		lea	$40(a1),a1
0001BF08 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001BF0C                            
0001BF0C                            Obj09_GhostNotSolid:
0001BF0C 4228 003A                  		clr.b	$3A(a0)
0001BF10 7800                       		moveq	#0,d4
0001BF12 4E75                       		rts	
0001BF14                            ; End of function Obj09_ChkItems
0001BF14                            
0001BF14                            
0001BF14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF14                            
0001BF14                            
0001BF14                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001BF14 1028 0030                  		move.b	$30(a0),d0
0001BF18 6600                       		bne.s	Obj09_ChkBumper
0001BF1A 5328 0036                  		subq.b	#1,$36(a0)
0001BF1E 6A00                       		bpl.s	loc_1BEA0
0001BF20 117C 0000 0036             		move.b	#0,$36(a0)
0001BF26                            
0001BF26                            loc_1BEA0:
0001BF26 5328 0037                  		subq.b	#1,$37(a0)
0001BF2A 6A00                       		bpl.s	locret_1BEAC
0001BF2C 117C 0000 0037             		move.b	#0,$37(a0)
0001BF32                            
0001BF32                            locret_1BEAC:
0001BF32 4E75                       		rts	
0001BF34                            ; ===========================================================================
0001BF34                            
0001BF34                            Obj09_ChkBumper:
0001BF34 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001BF38 6600                       		bne.s	Obj09_GOAL
0001BF3A 2228 0032                  		move.l	$32(a0),d1
0001BF3E 0481 00FF 0001             		subi.l	#$FF0001,d1
0001BF44 3401                       		move.w	d1,d2
0001BF46 0241 007F                  		andi.w	#$7F,d1
0001BF4A C2FC 0018                  		mulu.w	#$18,d1
0001BF4E 0441 0014                  		subi.w	#$14,d1
0001BF52 EE4A                       		lsr.w	#7,d2
0001BF54 0242 007F                  		andi.w	#$7F,d2
0001BF58 C4FC 0018                  		mulu.w	#$18,d2
0001BF5C 0442 0044                  		subi.w	#$44,d2
0001BF60 9268 0008                  		sub.w	8(a0),d1
0001BF64 9468 000C                  		sub.w	$C(a0),d2
0001BF68 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0001BF6E 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BF74 C3FC F900                  		muls.w	#-$700,d1
0001BF78 E081                       		asr.l	#8,d1
0001BF7A 3141 0010                  		move.w	d1,$10(a0)
0001BF7E C1FC F900                  		muls.w	#-$700,d0
0001BF82 E080                       		asr.l	#8,d0
0001BF84 3140 0012                  		move.w	d0,$12(a0)
0001BF88 08E8 0001 0022             		bset	#1,$22(a0)
0001BF8E 6100 F5B6                  		bsr.w	SS_RemoveCollectedItem
0001BF92 6600                       		bne.s	Obj09_BumpSnd
0001BF94 14BC 0002                  		move.b	#2,(a2)
0001BF98 2028 0032                  		move.l	$32(a0),d0
0001BF9C 5380                       		subq.l	#1,d0
0001BF9E 2540 0004                  		move.l	d0,4(a2)
0001BFA2                            
0001BFA2                            Obj09_BumpSnd:
0001BFA2 303C 00B4                  		move.w	#$B4,d0
0001BFA6 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play bumper sound
0001BFAC                            ; ===========================================================================
0001BFAC                            
0001BFAC                            Obj09_GOAL:
0001BFAC 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001BFB0 6600                       		bne.s	Obj09_UPblock
0001BFB2 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001BFB6 303C 00A8                  		move.w	#$A8,d0		; change item
0001BFBA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001BFC0 4E75                       		rts	
0001BFC2                            ; ===========================================================================
0001BFC2                            
0001BFC2                            Obj09_UPblock:
0001BFC2 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001BFC6 6600                       		bne.s	Obj09_DOWNblock
0001BFC8 4A28 0036                  		tst.b	$36(a0)
0001BFCC 6600 0000                  		bne.w	Obj09_NoGlass
0001BFD0 117C 001E 0036             		move.b	#$1E,$36(a0)
0001BFD6 0838 0006 F783             		btst	#6,($FFFFF783).w
0001BFDC 6700                       		beq.s	Obj09_UPsnd
0001BFDE E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001BFE2 2268 0032                  		movea.l	$32(a0),a1
0001BFE6 5389                       		subq.l	#1,a1
0001BFE8 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001BFEC                            
0001BFEC                            Obj09_UPsnd:
0001BFEC 303C 00A9                  		move.w	#$A9,d0
0001BFF0 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001BFF6                            ; ===========================================================================
0001BFF6                            
0001BFF6                            Obj09_DOWNblock:
0001BFF6 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001BFFA 6600                       		bne.s	Obj09_Rblock
0001BFFC 4A28 0036                  		tst.b	$36(a0)
0001C000 6600 0000                  		bne.w	Obj09_NoGlass
0001C004 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C00A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C010 6600                       		bne.s	Obj09_DOWNsnd
0001C012 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C016 2268 0032                  		movea.l	$32(a0),a1
0001C01A 5389                       		subq.l	#1,a1
0001C01C 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C020                            
0001C020                            Obj09_DOWNsnd:
0001C020 303C 00A9                  		move.w	#$A9,d0
0001C024 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C02A                            ; ===========================================================================
0001C02A                            
0001C02A                            Obj09_Rblock:
0001C02A 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C02E 6600                       		bne.s	Obj09_ChkGlass
0001C030 4A28 0037                  		tst.b	$37(a0)
0001C034 6600 0000                  		bne.w	Obj09_NoGlass
0001C038 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C03E 6100 F506                  		bsr.w	SS_RemoveCollectedItem
0001C042 6600                       		bne.s	Obj09_RevStage
0001C044 14BC 0004                  		move.b	#4,(a2)
0001C048 2028 0032                  		move.l	$32(a0),d0
0001C04C 5380                       		subq.l	#1,d0
0001C04E 2540 0004                  		move.l	d0,4(a2)
0001C052                            
0001C052                            Obj09_RevStage:
0001C052 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C056 303C 00A9                  		move.w	#$A9,d0
0001C05A 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play sound
0001C060                            ; ===========================================================================
0001C060                            
0001C060                            Obj09_ChkGlass:
0001C060 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C064 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C066 0C00 002E                  		cmpi.b	#$2E,d0
0001C06A 6700                       		beq.s	Obj09_Glass
0001C06C 0C00 002F                  		cmpi.b	#$2F,d0
0001C070 6700                       		beq.s	Obj09_Glass
0001C072 0C00 0030                  		cmpi.b	#$30,d0
0001C076 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C078                            
0001C078                            Obj09_Glass:
0001C078 6100 F4CC                  		bsr.w	SS_RemoveCollectedItem
0001C07C 6600                       		bne.s	Obj09_GlassSnd
0001C07E 14BC 0006                  		move.b	#6,(a2)
0001C082 2268 0032                  		movea.l	$32(a0),a1
0001C086 5389                       		subq.l	#1,a1
0001C088 2549 0004                  		move.l	a1,4(a2)
0001C08C 1011                       		move.b	(a1),d0
0001C08E 5200                       		addq.b	#1,d0		; change glass type when touched
0001C090 0C00 0030                  		cmpi.b	#$30,d0
0001C094 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C096 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C098                            
0001C098                            Obj09_GlassUpdate:
0001C098 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C09C                            
0001C09C                            Obj09_GlassSnd:
0001C09C 303C 00BA                  		move.w	#$BA,d0
0001C0A0 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C0A6                            ; ===========================================================================
0001C0A6                            
0001C0A6                            Obj09_NoGlass:
0001C0A6 4E75                       		rts	
0001C0A8                            ; End of function Obj09_ChkItems2
0001C0A8                            
0001C0A8                            ; ===========================================================================
0001C0A8                            ; ---------------------------------------------------------------------------
0001C0A8                            ; Object 10 - blank
0001C0A8                            ; ---------------------------------------------------------------------------
0001C0A8                            
0001C0A8                            Obj10:					; XREF: Obj_Index
0001C0A8 4E75                       		rts	
0001C0AA                            ; ---------------------------------------------------------------------------
0001C0AA                            ; Subroutine to	animate	level graphics
0001C0AA                            ; ---------------------------------------------------------------------------
0001C0AA                            
0001C0AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0AA                            
0001C0AA                            
0001C0AA                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C0AA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C0AE 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C0B0 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C0B6 6100 0000                  		bsr.w	AniArt_GiantRing
0001C0BA 7000                       		moveq	#0,d0
0001C0BC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C0C0 D040                       		add.w	d0,d0
0001C0C2 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C0C6 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C0CA                            ; ===========================================================================
0001C0CA                            
0001C0CA                            AniArt_Pause:
0001C0CA 4E75                       		rts	
0001C0CC                            ; End of function AniArt_Load
0001C0CC                            
0001C0CC                            ; ===========================================================================
0001C0CC 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C0D0 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C0D4 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C0D8 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C0DA                            ; ===========================================================================
0001C0DA                            ; ---------------------------------------------------------------------------
0001C0DA                            ; Animated pattern routine - Green Hill
0001C0DA                            ; ---------------------------------------------------------------------------
0001C0DA                            
0001C0DA                            AniArt_GHZ:				; XREF: AniArt_Index
0001C0DA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C0DE 6A00                       		bpl.s	loc_1C08A
0001C0E0 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C0E6 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C0EC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C0F0 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C0F4 0240 0001                  		andi.w	#1,d0
0001C0F8 6700                       		beq.s	loc_1C078
0001C0FA 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C0FE                            
0001C0FE                            loc_1C078:
0001C0FE 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C108 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C10C 6000 0000                  		bra.w	LoadTiles
0001C110                            ; ===========================================================================
0001C110                            
0001C110                            loc_1C08A:
0001C110 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C114 6A00                       		bpl.s	loc_1C0C0
0001C116 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C11C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C122 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C126 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C12A 0240 0001                  		andi.w	#1,d0
0001C12E 6700                       		beq.s	loc_1C0AE
0001C130 43E9 0200                  		lea	$200(a1),a1
0001C134                            
0001C134                            loc_1C0AE:
0001C134 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C13E 323C 000F                  		move.w	#$F,d1
0001C142 6000 0000                  		bra.w	LoadTiles
0001C146                            ; ===========================================================================
0001C146                            
0001C146                            loc_1C0C0:
0001C146 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C14A 6A00                       		bpl.s	locret_1C10C
0001C14C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C152 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C156 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C15A 0240 0003                  		andi.w	#3,d0
0001C15E 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C162 0800 0000                  		btst	#0,d0
0001C166 6600                       		bne.s	loc_1C0E8
0001C168 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C16E                            
0001C16E                            loc_1C0E8:
0001C16E EF48                       		lsl.w	#7,d0
0001C170 3200                       		move.w	d0,d1
0001C172 D040                       		add.w	d0,d0
0001C174 D041                       		add.w	d1,d0
0001C176 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C180 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C186 43F1 0000                  		lea	(a1,d0.w),a1
0001C18A 323C 000B                  		move.w	#$B,d1
0001C18E 6100 0000                  		bsr.w	LoadTiles
0001C192                            
0001C192                            locret_1C10C:
0001C192 4E75                       		rts	
0001C194                            ; ===========================================================================
0001C194 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C198                            ; ===========================================================================
0001C198                            ; ---------------------------------------------------------------------------
0001C198                            ; Animated pattern routine - Marble
0001C198                            ; ---------------------------------------------------------------------------
0001C198                            
0001C198                            AniArt_MZ:				; XREF: AniArt_Index
0001C198 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C19C 6A00                       		bpl.s	loc_1C150
0001C19E 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C1A4 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C1AA 7000                       		moveq	#0,d0
0001C1AC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C1B0 5200                       		addq.b	#1,d0
0001C1B2 0C00 0003                  		cmpi.b	#3,d0
0001C1B6 6600                       		bne.s	loc_1C134
0001C1B8 7000                       		moveq	#0,d0
0001C1BA                            
0001C1BA                            loc_1C134:
0001C1BA 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C1BE C0FC 0100                  		mulu.w	#$100,d0
0001C1C2 D2C0                       		adda.w	d0,a1
0001C1C4 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C1CE 323C 0007                  		move.w	#7,d1
0001C1D2 6100 0000                  		bsr.w	LoadTiles
0001C1D6                            
0001C1D6                            loc_1C150:
0001C1D6 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C1DA 6A00                       		bpl.s	loc_1C1AE
0001C1DC 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C1E2 7000                       		moveq	#0,d0
0001C1E4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C1E8 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C1EE EE58                       		ror.w	#7,d0
0001C1F0 D8C0                       		adda.w	d0,a4
0001C1F2 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C1FC 7600                       		moveq	#0,d3
0001C1FE 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C202 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C206 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C20A 343C 0003                  		move.w	#3,d2
0001C20E                            
0001C20E                            loc_1C188:
0001C20E 3003                       		move.w	d3,d0
0001C210 D040                       		add.w	d0,d0
0001C212 0240 001E                  		andi.w	#$1E,d0
0001C216 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C21C 3033 0000                  		move.w	(a3,d0.w),d0
0001C220 47F3 0000                  		lea	(a3,d0.w),a3
0001C224 224C                       		movea.l	a4,a1
0001C226 323C 001F                  		move.w	#$1F,d1
0001C22A 4E93                       		jsr	(a3)
0001C22C 5843                       		addq.w	#4,d3
0001C22E 51CA FFDE                  		dbf	d2,loc_1C188
0001C232 4E75                       		rts	
0001C234                            ; ===========================================================================
0001C234                            
0001C234                            loc_1C1AE:
0001C234 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C238 6A00 0000                  		bpl.w	locret_1C1EA
0001C23C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C242 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C248 7000                       		moveq	#0,d0
0001C24A 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C24E 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C252 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C258 C0FC 00C0                  		mulu.w	#$C0,d0
0001C25C D2C0                       		adda.w	d0,a1
0001C25E 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C268 323C 0005                  		move.w	#5,d1
0001C26C 6000 0000                  		bra.w	LoadTiles
0001C270                            ; ===========================================================================
0001C270                            
0001C270                            locret_1C1EA:
0001C270 4E75                       		rts	
0001C272                            ; ===========================================================================
0001C272                            ; ---------------------------------------------------------------------------
0001C272                            ; Animated pattern routine - Scrap Brain
0001C272                            ; ---------------------------------------------------------------------------
0001C272                            
0001C272                            AniArt_SBZ:				; XREF: AniArt_Index
0001C272 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C276 6700                       		beq.s	loc_1C1F8
0001C278 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C27C 6000                       		bra.s	loc_1C250
0001C27E                            ; ===========================================================================
0001C27E                            
0001C27E                            loc_1C1F8:
0001C27E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C282 6A00                       		bpl.s	loc_1C250
0001C284 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C28A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C290 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C29A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C29E 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C2A2 0240 0007                  		andi.w	#7,d0
0001C2A6 6700                       		beq.s	loc_1C234
0001C2A8 5340                       		subq.w	#1,d0
0001C2AA C0FC 0180                  		mulu.w	#$180,d0
0001C2AE 43F1 0000                  		lea	(a1,d0.w),a1
0001C2B2 323C 000B                  		move.w	#$B,d1
0001C2B6 6000 0000                  		bra.w	LoadTiles
0001C2BA                            ; ===========================================================================
0001C2BA                            
0001C2BA                            loc_1C234:
0001C2BA 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C2C0                            
0001C2C0                            loc_1C23A:
0001C2C0 323C 0005                  		move.w	#5,d1
0001C2C4 6100 0000                  		bsr.w	LoadTiles
0001C2C8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C2CE 323C 0005                  		move.w	#5,d1
0001C2D2 6000 0000                  		bra.w	LoadTiles
0001C2D6                            ; ===========================================================================
0001C2D6                            
0001C2D6                            loc_1C250:
0001C2D6 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C2DA 6700                       		beq.s	loc_1C25C
0001C2DC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C2E0 6000                       		bra.s	locret_1C2A0
0001C2E2                            ; ===========================================================================
0001C2E2                            
0001C2E2                            loc_1C25C:
0001C2E2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C2E6 6A00                       		bpl.s	locret_1C2A0
0001C2E8 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C2EE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C2F4 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C2FE 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C302 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C306 0240 0007                  		andi.w	#7,d0
0001C30A 6700                       		beq.s	loc_1C298
0001C30C 5340                       		subq.w	#1,d0
0001C30E C0FC 0180                  		mulu.w	#$180,d0
0001C312 43F1 0000                  		lea	(a1,d0.w),a1
0001C316 323C 000B                  		move.w	#$B,d1
0001C31A 6000 0000                  		bra.w	LoadTiles
0001C31E                            ; ===========================================================================
0001C31E                            
0001C31E                            loc_1C298:
0001C31E 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C324 609A                       		bra.s	loc_1C23A
0001C326                            ; ===========================================================================
0001C326                            
0001C326                            locret_1C2A0:
0001C326 4E75                       		rts	
0001C328                            ; ===========================================================================
0001C328                            ; ---------------------------------------------------------------------------
0001C328                            ; Animated pattern routine - ending sequence
0001C328                            ; ---------------------------------------------------------------------------
0001C328                            
0001C328                            AniArt_Ending:				; XREF: AniArt_Index
0001C328 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C32C 6A00                       		bpl.s	loc_1C2F4
0001C32E 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C334 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C33A 45F8 9400                  		lea	($FFFF9400).w,a2
0001C33E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C342 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C346 0240 0001                  		andi.w	#1,d0
0001C34A 6700                       		beq.s	loc_1C2CE
0001C34C 43E9 0200                  		lea	$200(a1),a1
0001C350 45EA 0200                  		lea	$200(a2),a2
0001C354                            
0001C354                            loc_1C2CE:
0001C354 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C35E 323C 000F                  		move.w	#$F,d1
0001C362 6100 0000                  		bsr.w	LoadTiles
0001C366 224A                       		movea.l	a2,a1
0001C368 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C372 323C 000F                  		move.w	#$F,d1
0001C376 6000 0000                  		bra.w	LoadTiles
0001C37A                            ; ===========================================================================
0001C37A                            
0001C37A                            loc_1C2F4:
0001C37A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C37E 6A00                       		bpl.s	loc_1C33C
0001C380 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C386 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C38A 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C38E 0240 0007                  		andi.w	#7,d0
0001C392 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C396 EF48                       		lsl.w	#7,d0
0001C398 3200                       		move.w	d0,d1
0001C39A D040                       		add.w	d0,d0
0001C39C D041                       		add.w	d1,d0
0001C39E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C3A8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C3AE 43F1 0000                  		lea	(a1,d0.w),a1
0001C3B2 323C 000B                  		move.w	#$B,d1
0001C3B6 6000 0000                  		bra.w	LoadTiles
0001C3BA                            ; ===========================================================================
0001C3BA 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C3C2                            ; ===========================================================================
0001C3C2                            
0001C3C2                            loc_1C33C:
0001C3C2 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C3C6 6A00                       		bpl.s	loc_1C37A
0001C3C8 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C3CE 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C3D2 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C3D6 0240 0003                  		andi.w	#3,d0
0001C3DA 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C3DE E148                       		lsl.w	#8,d0
0001C3E0 D040                       		add.w	d0,d0
0001C3E2 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C3EC 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C3F0 43F1 0000                  		lea	(a1,d0.w),a1
0001C3F4 323C 000F                  		move.w	#$F,d1
0001C3F8 6000 0000                  		bra.w	LoadTiles
0001C3FC                            ; ===========================================================================
0001C3FC 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C400                            ; ===========================================================================
0001C400                            
0001C400                            loc_1C37A:
0001C400 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C404 6A00                       		bpl.s	locret_1C3B4
0001C406 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C40C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C410 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C414 0240 0003                  		andi.w	#3,d0
0001C418 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C41C E148                       		lsl.w	#8,d0
0001C41E D040                       		add.w	d0,d0
0001C420 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C42A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C42E 43F1 0000                  		lea	(a1,d0.w),a1
0001C432 323C 000F                  		move.w	#$F,d1
0001C436 6000 0000                  		bra.w	LoadTiles
0001C43A                            ; ===========================================================================
0001C43A                            
0001C43A                            locret_1C3B4:
0001C43A 4E75                       		rts	
0001C43C                            ; ===========================================================================
0001C43C                            
0001C43C                            AniArt_none:				; XREF: AniArt_Index
0001C43C 4E75                       		rts	
0001C43E                            
0001C43E                            ; ---------------------------------------------------------------------------
0001C43E                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C43E                            ; ---------------------------------------------------------------------------
0001C43E                            
0001C43E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C43E                            
0001C43E                            
0001C43E                            LoadTiles:
0001C43E 2C99                       		move.l	(a1)+,(a6)
0001C440 2C99                       		move.l	(a1)+,(a6)
0001C442 2C99                       		move.l	(a1)+,(a6)
0001C444 2C99                       		move.l	(a1)+,(a6)
0001C446 2C99                       		move.l	(a1)+,(a6)
0001C448 2C99                       		move.l	(a1)+,(a6)
0001C44A 2C99                       		move.l	(a1)+,(a6)
0001C44C 2C99                       		move.l	(a1)+,(a6)
0001C44E 51C9 FFEE                  		dbf	d1,LoadTiles
0001C452 4E75                       		rts	
0001C454                            ; End of function LoadTiles
0001C454                            
0001C454                            ; ===========================================================================
0001C454                            ; ---------------------------------------------------------------------------
0001C454                            ; Animated pattern routine - more Marble Zone
0001C454                            ; ---------------------------------------------------------------------------
0001C454 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C458 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C45C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C460 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C464 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C468 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C46C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C470 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C474                            ; ===========================================================================
0001C474                            
0001C474                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C474 2C91                       		move.l	(a1),(a6)
0001C476 43E9 0010                  		lea	$10(a1),a1
0001C47A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C47E 4E75                       		rts	
0001C480                            ; ===========================================================================
0001C480                            
0001C480                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C480 2029 0002                  		move.l	2(a1),d0
0001C484 1029 0001                  		move.b	1(a1),d0
0001C488 E098                       		ror.l	#8,d0
0001C48A 2C80                       		move.l	d0,(a6)
0001C48C 43E9 0010                  		lea	$10(a1),a1
0001C490 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C494 4E75                       		rts	
0001C496                            ; ===========================================================================
0001C496                            
0001C496                            loc_1C410:				; XREF: AniArt_MZextra
0001C496 2CA9 0002                  		move.l	2(a1),(a6)
0001C49A 43E9 0010                  		lea	$10(a1),a1
0001C49E 51C9 FFF6                  		dbf	d1,loc_1C410
0001C4A2 4E75                       		rts	
0001C4A4                            ; ===========================================================================
0001C4A4                            
0001C4A4                            loc_1C41E:				; XREF: AniArt_MZextra
0001C4A4 2029 0004                  		move.l	4(a1),d0
0001C4A8 1029 0003                  		move.b	3(a1),d0
0001C4AC E098                       		ror.l	#8,d0
0001C4AE 2C80                       		move.l	d0,(a6)
0001C4B0 43E9 0010                  		lea	$10(a1),a1
0001C4B4 51C9 FFEE                  		dbf	d1,loc_1C41E
0001C4B8 4E75                       		rts	
0001C4BA                            ; ===========================================================================
0001C4BA                            
0001C4BA                            loc_1C434:				; XREF: AniArt_MZextra
0001C4BA 2CA9 0004                  		move.l	4(a1),(a6)
0001C4BE 43E9 0010                  		lea	$10(a1),a1
0001C4C2 51C9 FFF6                  		dbf	d1,loc_1C434
0001C4C6 4E75                       		rts	
0001C4C8                            ; ===========================================================================
0001C4C8                            
0001C4C8                            loc_1C442:				; XREF: AniArt_MZextra
0001C4C8 2029 0006                  		move.l	6(a1),d0
0001C4CC 1029 0005                  		move.b	5(a1),d0
0001C4D0 E098                       		ror.l	#8,d0
0001C4D2 2C80                       		move.l	d0,(a6)
0001C4D4 43E9 0010                  		lea	$10(a1),a1
0001C4D8 51C9 FFEE                  		dbf	d1,loc_1C442
0001C4DC 4E75                       		rts	
0001C4DE                            ; ===========================================================================
0001C4DE                            
0001C4DE                            loc_1C458:				; XREF: AniArt_MZextra
0001C4DE 2CA9 0006                  		move.l	6(a1),(a6)
0001C4E2 43E9 0010                  		lea	$10(a1),a1
0001C4E6 51C9 FFF6                  		dbf	d1,loc_1C458
0001C4EA 4E75                       		rts	
0001C4EC                            ; ===========================================================================
0001C4EC                            
0001C4EC                            loc_1C466:				; XREF: AniArt_MZextra
0001C4EC 2029 0008                  		move.l	8(a1),d0
0001C4F0 1029 0007                  		move.b	7(a1),d0
0001C4F4 E098                       		ror.l	#8,d0
0001C4F6 2C80                       		move.l	d0,(a6)
0001C4F8 43E9 0010                  		lea	$10(a1),a1
0001C4FC 51C9 FFEE                  		dbf	d1,loc_1C466
0001C500 4E75                       		rts	
0001C502                            ; ===========================================================================
0001C502                            
0001C502                            loc_1C47C:				; XREF: AniArt_MZextra
0001C502 2CA9 0008                  		move.l	8(a1),(a6)
0001C506 43E9 0010                  		lea	$10(a1),a1
0001C50A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001C50E 4E75                       		rts	
0001C510                            ; ===========================================================================
0001C510                            
0001C510                            loc_1C48A:				; XREF: AniArt_MZextra
0001C510 2029 000A                  		move.l	$A(a1),d0
0001C514 1029 0009                  		move.b	9(a1),d0
0001C518 E098                       		ror.l	#8,d0
0001C51A 2C80                       		move.l	d0,(a6)
0001C51C 43E9 0010                  		lea	$10(a1),a1
0001C520 51C9 FFEE                  		dbf	d1,loc_1C48A
0001C524 4E75                       		rts	
0001C526                            ; ===========================================================================
0001C526                            
0001C526                            loc_1C4A0:				; XREF: AniArt_MZextra
0001C526 2CA9 000A                  		move.l	$A(a1),(a6)
0001C52A 43E9 0010                  		lea	$10(a1),a1
0001C52E 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001C532 4E75                       		rts	
0001C534                            ; ===========================================================================
0001C534                            
0001C534                            loc_1C4AE:				; XREF: AniArt_MZextra
0001C534 2029 000C                  		move.l	$C(a1),d0
0001C538 1029 000B                  		move.b	$B(a1),d0
0001C53C E098                       		ror.l	#8,d0
0001C53E 2C80                       		move.l	d0,(a6)
0001C540 43E9 0010                  		lea	$10(a1),a1
0001C544 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001C548 4E75                       		rts	
0001C54A                            ; ===========================================================================
0001C54A                            
0001C54A                            loc_1C4C4:				; XREF: AniArt_MZextra
0001C54A 2CA9 000C                  		move.l	$C(a1),(a6)
0001C54E 43E9 0010                  		lea	$10(a1),a1
0001C552 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001C556 4E75                       		rts	
0001C558                            ; ===========================================================================
0001C558                            
0001C558                            loc_1C4D2:				; XREF: AniArt_MZextra
0001C558 2029 000C                  		move.l	$C(a1),d0
0001C55C E198                       		rol.l	#8,d0
0001C55E 1011                       		move.b	0(a1),d0
0001C560 2C80                       		move.l	d0,(a6)
0001C562 43E9 0010                  		lea	$10(a1),a1
0001C566 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001C56A 4E75                       		rts	
0001C56C                            ; ===========================================================================
0001C56C                            
0001C56C                            loc_1C4E8:				; XREF: AniArt_MZextra
0001C56C 3CA9 000E                  		move.w	$E(a1),(a6)
0001C570 3C91                       		move.w	0(a1),(a6)
0001C572 43E9 0010                  		lea	$10(a1),a1
0001C576 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001C57A 4E75                       		rts	
0001C57C                            ; ===========================================================================
0001C57C                            
0001C57C                            loc_1C4FA:				; XREF: AniArt_MZextra
0001C57C 2011                       		move.l	0(a1),d0
0001C57E 1029 000F                  		move.b	$F(a1),d0
0001C582 E098                       		ror.l	#8,d0
0001C584 2C80                       		move.l	d0,(a6)
0001C586 43E9 0010                  		lea	$10(a1),a1
0001C58A 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001C58E 4E75                       		rts	
0001C590                            
0001C590                            ; ---------------------------------------------------------------------------
0001C590                            ; Animated pattern routine - giant ring
0001C590                            ; ---------------------------------------------------------------------------
0001C590                            
0001C590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C590                            
0001C590                            
0001C590                            AniArt_GiantRing:			; XREF: AniArt_Load
0001C590 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001C594 6600                       		bne.s	loc_1C518
0001C596 4E75                       		rts	
0001C598                            ; ===========================================================================
0001C598                            
0001C598                            loc_1C518:
0001C598 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001C59E 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001C5A4 7000                       		moveq	#0,d0
0001C5A6 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001C5AA 43F1 0000                  		lea	(a1,d0.w),a1
0001C5AE 0640 8000                  		addi.w	#$8000,d0
0001C5B2 E588                       		lsl.l	#2,d0
0001C5B4 E448                       		lsr.w	#2,d0
0001C5B6 0040 4000                  		ori.w	#$4000,d0
0001C5BA 4840                       		swap	d0
0001C5BC 2D40 0004                  		move.l	d0,4(a6)
0001C5C0 323C 000D                  		move.w	#$D,d1
0001C5C4 6000 FE78                  		bra.w	LoadTiles
0001C5C8                            ; End of function AniArt_GiantRing
0001C5C8                            
0001C5C8                            ; ===========================================================================
0001C5C8                            ; ---------------------------------------------------------------------------
0001C5C8                            ; Object 21 - SCORE, TIME, RINGS
0001C5C8                            ; ---------------------------------------------------------------------------
0001C5C8                            
0001C5C8                            Obj21:					; XREF: Obj_Index
0001C5C8 7000                       		moveq	#0,d0
0001C5CA 1028 0024                  		move.b	$24(a0),d0
0001C5CE 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001C5D2 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001C5D6                            ; ===========================================================================
0001C5D6 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001C5D8 0000                       		dc.w Obj21_Flash-Obj21_Index
0001C5DA                            ; ===========================================================================
0001C5DA                            
0001C5DA                            Obj21_Main:				; XREF: Obj21_Main
0001C5DA 5428 0024                  		addq.b	#2,$24(a0)
0001C5DE 317C 0090 0008             		move.w	#$90,8(a0)
0001C5E4 317C 0108 000A             		move.w	#$108,$A(a0)
0001C5EA 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001C5F2 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001C5F8 117C 0000 0001             		move.b	#0,1(a0)
0001C5FE 117C 0000 0018             		move.b	#0,$18(a0)
0001C604                            
0001C604                            Obj21_Flash:				; XREF: Obj21_Main
0001C604 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001C608 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001C60A 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001C60E 4EF9 0000 D6CC             		jmp	DisplaySprite
0001C614                            ; ===========================================================================
0001C614                            
0001C614                            Obj21_Flash2:
0001C614 7000                       		moveq	#0,d0
0001C616 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001C61C 6600                       		bne.s	Obj21_Display
0001C61E 5240                       		addq.w	#1,d0		; make ring counter flash red
0001C620 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001C626 6600                       		bne.s	Obj21_Display	; if not, branch
0001C628 5440                       		addq.w	#2,d0		; make time counter flash red
0001C62A                            
0001C62A                            Obj21_Display:
0001C62A 1140 001A                  		move.b	d0,$1A(a0)
0001C62E 4EF9 0000 D6CC             		jmp	DisplaySprite
0001C634                            ; ===========================================================================
0001C634                            ; ---------------------------------------------------------------------------
0001C634                            ; Sprite mappings - SCORE, TIME, RINGS
0001C634                            ; ---------------------------------------------------------------------------
0001C634                            Map_obj21:
0001C634                            	include "_maps\obj21.asm"
0001C634                            ; ---------------------------------------------------------------------------
0001C634                            ; Sprite mappings - SCORE, TIME, RINGS
0001C634                            ; ---------------------------------------------------------------------------
0001C634 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001C638 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001C63C 0A                         byte_1C5BC:	dc.b $A
0001C63D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C642 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C647 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C64C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C651 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C656 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C65B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C660 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C665 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C66A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C66F 00                         		dc.b 0
0001C670 0A                         byte_1C5F0:	dc.b $A
0001C671 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C676 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C67B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C680 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C685 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C68A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C68F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C694 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C699 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C69E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C6A3 00                         		dc.b 0
0001C6A4 0A                         byte_1C624:	dc.b $A
0001C6A5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C6AA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C6AF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C6B4 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C6B9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C6BE A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C6C3 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C6C8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C6CD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C6D2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C6D7 00                         		dc.b 0
0001C6D8 0A                         byte_1C658:	dc.b $A
0001C6D9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C6DE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C6E3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C6E8 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C6ED 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C6F2 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C6F7 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C6FC A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C701 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C706 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C70C 00                         		even
0001C70C 00                         		even
0001C70C                            
0001C70C                            ; ---------------------------------------------------------------------------
0001C70C                            ; Add points subroutine
0001C70C                            ; ---------------------------------------------------------------------------
0001C70C                            
0001C70C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C70C                            
0001C70C                            
0001C70C                            AddPoints:
0001C70C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001C712 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001C716 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001C71A D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001C71C 223C 000F 423F             		move.l	#999999,d1
0001C722 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001C724 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001C728 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001C72A 2481                       		move.l	d1,(a2)
0001C72C                            
0001C72C                            loc_1C6AC:
0001C72C 2013                       		move.l	(a3),d0
0001C72E B092                       		cmp.l	(a2),d0
0001C730 6500 0000                  		bcs.w	locret_1C6B6
0001C734 2480                       		move.l	d0,(a2)
0001C736                            
0001C736                            locret_1C6B6:
0001C736 4E75                       		rts	
0001C738                            ; End of function AddPoints
0001C738                            
0001C738                            ; ---------------------------------------------------------------------------
0001C738                            ; Subroutine to	update the HUD
0001C738                            ; ---------------------------------------------------------------------------
0001C738                            
0001C738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C738                            
0001C738                            
0001C738                            HudUpdate:
0001C738 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001C73C 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001C740 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001C744 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001C746 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001C74A 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001C750 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001C754 6100 0000                  		bsr.w	Hud_Score
0001C758                            
0001C758                            Hud_ChkRings:
0001C758 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C75C 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001C75E 6A00                       		bpl.s	loc_1C6E4
0001C760 6100 0000                  		bsr.w	Hud_LoadZero
0001C764                            
0001C764                            loc_1C6E4:
0001C764 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C768 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C76E 7200                       		moveq	#0,d1
0001C770 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C774 6100 0000                  		bsr.w	Hud_Rings
0001C778                            
0001C778                            Hud_ChkTime:
0001C778 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001C77C 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001C77E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C782 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001C784 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001C788 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001C78E 6700                       		beq.s	TimeOver	; if yes, branch
0001C790 5221                       		addq.b	#1,-(a1)
0001C792 0C11 003C                  		cmpi.b	#60,(a1)
0001C796 6500                       		bcs.s	Hud_ChkLives
0001C798 12BC 0000                  		move.b	#0,(a1)
0001C79C 5221                       		addq.b	#1,-(a1)
0001C79E 0C11 003C                  		cmpi.b	#60,(a1)
0001C7A2 6500                       		bcs.s	loc_1C734
0001C7A4 12BC 0000                  		move.b	#0,(a1)
0001C7A8 5221                       		addq.b	#1,-(a1)
0001C7AA 0C11 0009                  		cmpi.b	#9,(a1)
0001C7AE 6500                       		bcs.s	loc_1C734
0001C7B0 12BC 0009                  		move.b	#9,(a1)
0001C7B4                            
0001C7B4                            loc_1C734:
0001C7B4 203C 5E40 0003             		move.l	#$5E400003,d0
0001C7BA 7200                       		moveq	#0,d1
0001C7BC 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001C7C0 6100 0000                  		bsr.w	Hud_Mins
0001C7C4 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001C7CA 7200                       		moveq	#0,d1
0001C7CC 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001C7D0 6100 0000                  		bsr.w	Hud_Secs
0001C7D4                            
0001C7D4                            Hud_ChkLives:
0001C7D4 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C7D8 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001C7DA 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C7DE 6100 0000                  		bsr.w	Hud_Lives
0001C7E2                            
0001C7E2                            Hud_ChkBonus:
0001C7E2 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001C7E6 6700                       		beq.s	Hud_End		; if not, branch
0001C7E8 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C7EC 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001C7F6 7200                       		moveq	#0,d1
0001C7F8 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C7FC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C800 7200                       		moveq	#0,d1
0001C802 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C806 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C80A                            
0001C80A                            Hud_End:
0001C80A 4E75                       		rts	
0001C80C                            ; ===========================================================================
0001C80C                            
0001C80C                            TimeOver:				; XREF: Hud_ChkTime
0001C80C 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001C810 41F8 D000                  		lea	($FFFFD000).w,a0
0001C814 2448                       		movea.l	a0,a2
0001C816 6100 E90C                  		bsr.w	KillSonic
0001C81A 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001C820 4E75                       		rts	
0001C822                            ; ===========================================================================
0001C822                            
0001C822                            HudDebug:				; XREF: HudUpdate
0001C822 6100 0000                  		bsr.w	HudDb_XY
0001C826 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C82A 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001C82C 6A00                       		bpl.s	HudDb_Rings
0001C82E 6100 0000                  		bsr.w	Hud_LoadZero
0001C832                            
0001C832                            HudDb_Rings:
0001C832 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C836 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C83C 7200                       		moveq	#0,d1
0001C83E 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C842 6100 0000                  		bsr.w	Hud_Rings
0001C846                            
0001C846                            HudDb_ObjCount:
0001C846 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001C84C 7200                       		moveq	#0,d1
0001C84E 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001C852 6100 0000                  		bsr.w	Hud_Secs
0001C856 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C85A 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001C85C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C860 6100 0000                  		bsr.w	Hud_Lives
0001C864                            
0001C864                            HudDb_ChkBonus:
0001C864 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001C868 6700                       		beq.s	HudDb_End	; if not, branch
0001C86A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C86E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001C878 7200                       		moveq	#0,d1
0001C87A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C87E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C882 7200                       		moveq	#0,d1
0001C884 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C888 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C88C                            
0001C88C                            HudDb_End:
0001C88C 4E75                       		rts	
0001C88E                            ; End of function HudUpdate
0001C88E                            
0001C88E                            ; ---------------------------------------------------------------------------
0001C88E                            ; Subroutine to	load "0" on the	HUD
0001C88E                            ; ---------------------------------------------------------------------------
0001C88E                            
0001C88E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C88E                            
0001C88E                            
0001C88E                            Hud_LoadZero:				; XREF: HudUpdate
0001C88E 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001C898 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001C89C 343C 0002                  		move.w	#2,d2
0001C8A0 6000                       		bra.s	loc_1C83E
0001C8A2                            ; End of function Hud_LoadZero
0001C8A2                            
0001C8A2                            ; ---------------------------------------------------------------------------
0001C8A2                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001C8A2                            ; ---------------------------------------------------------------------------
0001C8A2                            
0001C8A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8A2                            
0001C8A2                            
0001C8A2                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001C8A2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C8A8 6100 0000                  		bsr.w	Hud_Lives
0001C8AC 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001C8B6 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001C8BA 343C 000E                  		move.w	#$E,d2
0001C8BE                            
0001C8BE                            loc_1C83E:				; XREF: Hud_LoadZero
0001C8BE 43FA 0000                  		lea	Art_Hud(pc),a1
0001C8C2                            
0001C8C2                            loc_1C842:
0001C8C2 323C 000F                  		move.w	#$F,d1
0001C8C6 101A                       		move.b	(a2)+,d0
0001C8C8 6B00                       		bmi.s	loc_1C85E
0001C8CA 4880                       		ext.w	d0
0001C8CC EB48                       		lsl.w	#5,d0
0001C8CE 47F1 0000                  		lea	(a1,d0.w),a3
0001C8D2                            
0001C8D2                            loc_1C852:
0001C8D2 2C9B                       		move.l	(a3)+,(a6)
0001C8D4 51C9 FFFC                  		dbf	d1,loc_1C852
0001C8D8                            
0001C8D8                            loc_1C858:
0001C8D8 51CA FFE8                  		dbf	d2,loc_1C842
0001C8DC                            
0001C8DC 4E75                       		rts	
0001C8DE                            ; ===========================================================================
0001C8DE                            
0001C8DE                            loc_1C85E:
0001C8DE 2CBC 0000 0000             		move.l	#0,(a6)
0001C8E4 51C9 FFF8                  		dbf	d1,loc_1C85E
0001C8E8                            
0001C8E8 60EE                       		bra.s	loc_1C858
0001C8EA                            ; End of function Hud_Base
0001C8EA                            
0001C8EA                            ; ===========================================================================
0001C8EA 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001C8F6 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001C8FA                            ; ---------------------------------------------------------------------------
0001C8FA                            ; Subroutine to	load debug mode	numbers	patterns
0001C8FA                            ; ---------------------------------------------------------------------------
0001C8FA                            
0001C8FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8FA                            
0001C8FA                            
0001C8FA                            HudDb_XY:				; XREF: HudDebug
0001C8FA 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001C904 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001C908 4841                       		swap	d1
0001C90A 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001C90E 6100                       		bsr.s	HudDb_XY2
0001C910 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001C914 4841                       		swap	d1
0001C916 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001C91A                            ; End of function HudDb_XY
0001C91A                            
0001C91A                            
0001C91A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C91A                            
0001C91A                            
0001C91A                            HudDb_XY2:
0001C91A 7C07                       		moveq	#7,d6
0001C91C 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001C922                            
0001C922                            HudDb_XYLoop:
0001C922 E959                       		rol.w	#4,d1
0001C924 3401                       		move.w	d1,d2
0001C926 0242 000F                  		andi.w	#$F,d2
0001C92A 0C42 000A                  		cmpi.w	#$A,d2
0001C92E 6500                       		bcs.s	loc_1C8B2
0001C930 5E42                       		addq.w	#7,d2
0001C932                            
0001C932                            loc_1C8B2:
0001C932 EB4A                       		lsl.w	#5,d2
0001C934 47F1 2000                  		lea	(a1,d2.w),a3
0001C938 2C9B                       		move.l	(a3)+,(a6)
0001C93A 2C9B                       		move.l	(a3)+,(a6)
0001C93C 2C9B                       		move.l	(a3)+,(a6)
0001C93E 2C9B                       		move.l	(a3)+,(a6)
0001C940 2C9B                       		move.l	(a3)+,(a6)
0001C942 2C9B                       		move.l	(a3)+,(a6)
0001C944 2C9B                       		move.l	(a3)+,(a6)
0001C946 2C9B                       		move.l	(a3)+,(a6)
0001C948 4841                       		swap	d1
0001C94A 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001C94E                            
0001C94E 4E75                       		rts	
0001C950                            ; End of function HudDb_XY2
0001C950                            
0001C950                            ; ---------------------------------------------------------------------------
0001C950                            ; Subroutine to	load rings numbers patterns
0001C950                            ; ---------------------------------------------------------------------------
0001C950                            
0001C950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C950                            
0001C950                            
0001C950                            Hud_Rings:				; XREF: HudUpdate
0001C950 45F9 0000 0000             		lea	(Hud_100).l,a2
0001C956 7C02                       		moveq	#2,d6
0001C958 6000                       		bra.s	Hud_LoadArt
0001C95A                            ; End of function Hud_Rings
0001C95A                            
0001C95A                            ; ---------------------------------------------------------------------------
0001C95A                            ; Subroutine to	load score numbers patterns
0001C95A                            ; ---------------------------------------------------------------------------
0001C95A                            
0001C95A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C95A                            
0001C95A                            
0001C95A                            Hud_Score:				; XREF: HudUpdate
0001C95A 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001C960 7C05                       		moveq	#5,d6
0001C962                            
0001C962                            Hud_LoadArt:
0001C962 7800                       		moveq	#0,d4
0001C964 43FA 0000                  		lea	Art_Hud(pc),a1
0001C968                            
0001C968                            Hud_ScoreLoop:
0001C968 7400                       		moveq	#0,d2
0001C96A 261A                       		move.l	(a2)+,d3
0001C96C                            
0001C96C                            loc_1C8EC:
0001C96C 9283                       		sub.l	d3,d1
0001C96E 6500                       		bcs.s	loc_1C8F4
0001C970 5242                       		addq.w	#1,d2
0001C972 60F8                       		bra.s	loc_1C8EC
0001C974                            ; ===========================================================================
0001C974                            
0001C974                            loc_1C8F4:
0001C974 D283                       		add.l	d3,d1
0001C976 4A42                       		tst.w	d2
0001C978 6700                       		beq.s	loc_1C8FE
0001C97A 383C 0001                  		move.w	#1,d4
0001C97E                            
0001C97E                            loc_1C8FE:
0001C97E 4A44                       		tst.w	d4
0001C980 6700                       		beq.s	loc_1C92C
0001C982 ED4A                       		lsl.w	#6,d2
0001C984 2D40 0004                  		move.l	d0,4(a6)
0001C988 47F1 2000                  		lea	(a1,d2.w),a3
0001C98C 2C9B                       		move.l	(a3)+,(a6)
0001C98E 2C9B                       		move.l	(a3)+,(a6)
0001C990 2C9B                       		move.l	(a3)+,(a6)
0001C992 2C9B                       		move.l	(a3)+,(a6)
0001C994 2C9B                       		move.l	(a3)+,(a6)
0001C996 2C9B                       		move.l	(a3)+,(a6)
0001C998 2C9B                       		move.l	(a3)+,(a6)
0001C99A 2C9B                       		move.l	(a3)+,(a6)
0001C99C 2C9B                       		move.l	(a3)+,(a6)
0001C99E 2C9B                       		move.l	(a3)+,(a6)
0001C9A0 2C9B                       		move.l	(a3)+,(a6)
0001C9A2 2C9B                       		move.l	(a3)+,(a6)
0001C9A4 2C9B                       		move.l	(a3)+,(a6)
0001C9A6 2C9B                       		move.l	(a3)+,(a6)
0001C9A8 2C9B                       		move.l	(a3)+,(a6)
0001C9AA 2C9B                       		move.l	(a3)+,(a6)
0001C9AC                            
0001C9AC                            loc_1C92C:
0001C9AC 0680 0040 0000             		addi.l	#$400000,d0
0001C9B2 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001C9B6                            
0001C9B6 4E75                       		rts	
0001C9B8                            ; End of function Hud_Score
0001C9B8                            
0001C9B8                            ; ---------------------------------------------------------------------------
0001C9B8                            ; Subroutine to	load countdown numbers on the continue screen
0001C9B8                            ; ---------------------------------------------------------------------------
0001C9B8                            
0001C9B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9B8                            
0001C9B8                            
0001C9B8                            ContScrCounter:				; XREF: ContinueScreen
0001C9B8 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001C9C2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C9C8 45F9 0000 0000             		lea	(Hud_10).l,a2
0001C9CE 7C01                       		moveq	#1,d6
0001C9D0 7800                       		moveq	#0,d4
0001C9D2 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001C9D6                            
0001C9D6                            ContScr_Loop:
0001C9D6 7400                       		moveq	#0,d2
0001C9D8 261A                       		move.l	(a2)+,d3
0001C9DA                            
0001C9DA                            loc_1C95A:
0001C9DA 9283                       		sub.l	d3,d1
0001C9DC 6500                       		bcs.s	loc_1C962
0001C9DE 5242                       		addq.w	#1,d2
0001C9E0 60F8                       		bra.s	loc_1C95A
0001C9E2                            ; ===========================================================================
0001C9E2                            
0001C9E2                            loc_1C962:
0001C9E2 D283                       		add.l	d3,d1
0001C9E4 ED4A                       		lsl.w	#6,d2
0001C9E6 47F1 2000                  		lea	(a1,d2.w),a3
0001C9EA 2C9B                       		move.l	(a3)+,(a6)
0001C9EC 2C9B                       		move.l	(a3)+,(a6)
0001C9EE 2C9B                       		move.l	(a3)+,(a6)
0001C9F0 2C9B                       		move.l	(a3)+,(a6)
0001C9F2 2C9B                       		move.l	(a3)+,(a6)
0001C9F4 2C9B                       		move.l	(a3)+,(a6)
0001C9F6 2C9B                       		move.l	(a3)+,(a6)
0001C9F8 2C9B                       		move.l	(a3)+,(a6)
0001C9FA 2C9B                       		move.l	(a3)+,(a6)
0001C9FC 2C9B                       		move.l	(a3)+,(a6)
0001C9FE 2C9B                       		move.l	(a3)+,(a6)
0001CA00 2C9B                       		move.l	(a3)+,(a6)
0001CA02 2C9B                       		move.l	(a3)+,(a6)
0001CA04 2C9B                       		move.l	(a3)+,(a6)
0001CA06 2C9B                       		move.l	(a3)+,(a6)
0001CA08 2C9B                       		move.l	(a3)+,(a6)
0001CA0A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CA0E                            
0001CA0E 4E75                       		rts	
0001CA10                            ; End of function ContScrCounter
0001CA10                            
0001CA10                            ; ===========================================================================
0001CA10                            ; ---------------------------------------------------------------------------
0001CA10                            ; HUD counter sizes
0001CA10                            ; ---------------------------------------------------------------------------
0001CA10 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CA14 0000 2710                  Hud_10000:	dc.l 10000
0001CA18 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CA1C 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CA20 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CA24 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CA28                            
0001CA28                            ; ---------------------------------------------------------------------------
0001CA28                            ; Subroutine to	load time numbers patterns
0001CA28                            ; ---------------------------------------------------------------------------
0001CA28                            
0001CA28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA28                            
0001CA28                            
0001CA28                            Hud_Mins:				; XREF: Hud_ChkTime
0001CA28 45F9 0001 CA24             		lea	(Hud_1).l,a2
0001CA2E 7C00                       		moveq	#0,d6
0001CA30 6000                       		bra.s	loc_1C9BA
0001CA32                            ; End of function Hud_Mins
0001CA32                            
0001CA32                            
0001CA32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA32                            
0001CA32                            
0001CA32                            Hud_Secs:				; XREF: Hud_ChkTime
0001CA32 45F9 0001 CA20             		lea	(Hud_10).l,a2
0001CA38 7C01                       		moveq	#1,d6
0001CA3A                            
0001CA3A                            loc_1C9BA:
0001CA3A 7800                       		moveq	#0,d4
0001CA3C 43FA 0000                  		lea	Art_Hud(pc),a1
0001CA40                            
0001CA40                            Hud_TimeLoop:
0001CA40 7400                       		moveq	#0,d2
0001CA42 261A                       		move.l	(a2)+,d3
0001CA44                            
0001CA44                            loc_1C9C4:
0001CA44 9283                       		sub.l	d3,d1
0001CA46 6500                       		bcs.s	loc_1C9CC
0001CA48 5242                       		addq.w	#1,d2
0001CA4A 60F8                       		bra.s	loc_1C9C4
0001CA4C                            ; ===========================================================================
0001CA4C                            
0001CA4C                            loc_1C9CC:
0001CA4C D283                       		add.l	d3,d1
0001CA4E 4A42                       		tst.w	d2
0001CA50 6700                       		beq.s	loc_1C9D6
0001CA52 383C 0001                  		move.w	#1,d4
0001CA56                            
0001CA56                            loc_1C9D6:
0001CA56 ED4A                       		lsl.w	#6,d2
0001CA58 2D40 0004                  		move.l	d0,4(a6)
0001CA5C 47F1 2000                  		lea	(a1,d2.w),a3
0001CA60 2C9B                       		move.l	(a3)+,(a6)
0001CA62 2C9B                       		move.l	(a3)+,(a6)
0001CA64 2C9B                       		move.l	(a3)+,(a6)
0001CA66 2C9B                       		move.l	(a3)+,(a6)
0001CA68 2C9B                       		move.l	(a3)+,(a6)
0001CA6A 2C9B                       		move.l	(a3)+,(a6)
0001CA6C 2C9B                       		move.l	(a3)+,(a6)
0001CA6E 2C9B                       		move.l	(a3)+,(a6)
0001CA70 2C9B                       		move.l	(a3)+,(a6)
0001CA72 2C9B                       		move.l	(a3)+,(a6)
0001CA74 2C9B                       		move.l	(a3)+,(a6)
0001CA76 2C9B                       		move.l	(a3)+,(a6)
0001CA78 2C9B                       		move.l	(a3)+,(a6)
0001CA7A 2C9B                       		move.l	(a3)+,(a6)
0001CA7C 2C9B                       		move.l	(a3)+,(a6)
0001CA7E 2C9B                       		move.l	(a3)+,(a6)
0001CA80 0680 0040 0000             		addi.l	#$400000,d0
0001CA86 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001CA8A                            
0001CA8A 4E75                       		rts	
0001CA8C                            ; End of function Hud_Secs
0001CA8C                            
0001CA8C                            ; ---------------------------------------------------------------------------
0001CA8C                            ; Subroutine to	load time/ring bonus numbers patterns
0001CA8C                            ; ---------------------------------------------------------------------------
0001CA8C                            
0001CA8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA8C                            
0001CA8C                            
0001CA8C                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001CA8C 45F9 0001 CA18             		lea	(Hud_1000).l,a2
0001CA92 7C03                       		moveq	#3,d6
0001CA94 7800                       		moveq	#0,d4
0001CA96 43FA 0000                  		lea	Art_Hud(pc),a1
0001CA9A                            
0001CA9A                            Hud_BonusLoop:
0001CA9A 7400                       		moveq	#0,d2
0001CA9C 261A                       		move.l	(a2)+,d3
0001CA9E                            
0001CA9E                            loc_1CA1E:
0001CA9E 9283                       		sub.l	d3,d1
0001CAA0 6500                       		bcs.s	loc_1CA26
0001CAA2 5242                       		addq.w	#1,d2
0001CAA4 60F8                       		bra.s	loc_1CA1E
0001CAA6                            ; ===========================================================================
0001CAA6                            
0001CAA6                            loc_1CA26:
0001CAA6 D283                       		add.l	d3,d1
0001CAA8 4A42                       		tst.w	d2
0001CAAA 6700                       		beq.s	loc_1CA30
0001CAAC 383C 0001                  		move.w	#1,d4
0001CAB0                            
0001CAB0                            loc_1CA30:
0001CAB0 4A44                       		tst.w	d4
0001CAB2 6700                       		beq.s	Hud_ClrBonus
0001CAB4 ED4A                       		lsl.w	#6,d2
0001CAB6 47F1 2000                  		lea	(a1,d2.w),a3
0001CABA 2C9B                       		move.l	(a3)+,(a6)
0001CABC 2C9B                       		move.l	(a3)+,(a6)
0001CABE 2C9B                       		move.l	(a3)+,(a6)
0001CAC0 2C9B                       		move.l	(a3)+,(a6)
0001CAC2 2C9B                       		move.l	(a3)+,(a6)
0001CAC4 2C9B                       		move.l	(a3)+,(a6)
0001CAC6 2C9B                       		move.l	(a3)+,(a6)
0001CAC8 2C9B                       		move.l	(a3)+,(a6)
0001CACA 2C9B                       		move.l	(a3)+,(a6)
0001CACC 2C9B                       		move.l	(a3)+,(a6)
0001CACE 2C9B                       		move.l	(a3)+,(a6)
0001CAD0 2C9B                       		move.l	(a3)+,(a6)
0001CAD2 2C9B                       		move.l	(a3)+,(a6)
0001CAD4 2C9B                       		move.l	(a3)+,(a6)
0001CAD6 2C9B                       		move.l	(a3)+,(a6)
0001CAD8 2C9B                       		move.l	(a3)+,(a6)
0001CADA                            
0001CADA                            loc_1CA5A:
0001CADA 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001CADE                            
0001CADE 4E75                       		rts	
0001CAE0                            ; ===========================================================================
0001CAE0                            
0001CAE0                            Hud_ClrBonus:
0001CAE0 7A0F                       		moveq	#$F,d5
0001CAE2                            
0001CAE2                            Hud_ClrBonusLoop:
0001CAE2 2CBC 0000 0000             		move.l	#0,(a6)
0001CAE8 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001CAEC                            
0001CAEC 60EC                       		bra.s	loc_1CA5A
0001CAEE                            ; End of function Hud_TimeRingBonus
0001CAEE                            
0001CAEE                            ; ---------------------------------------------------------------------------
0001CAEE                            ; Subroutine to	load uncompressed lives	counter	patterns
0001CAEE                            ; ---------------------------------------------------------------------------
0001CAEE                            
0001CAEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAEE                            
0001CAEE                            
0001CAEE                            Hud_Lives:				; XREF: Hud_ChkLives
0001CAEE 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001CAF4 7200                       		moveq	#0,d1
0001CAF6 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001CAFA 45F9 0001 CA20             		lea	(Hud_10).l,a2
0001CB00 7C01                       		moveq	#1,d6
0001CB02 7800                       		moveq	#0,d4
0001CB04 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001CB08                            
0001CB08                            Hud_LivesLoop:
0001CB08 2D40 0004                  		move.l	d0,4(a6)
0001CB0C 7400                       		moveq	#0,d2
0001CB0E 261A                       		move.l	(a2)+,d3
0001CB10                            
0001CB10                            loc_1CA90:
0001CB10 9283                       		sub.l	d3,d1
0001CB12 6500                       		bcs.s	loc_1CA98
0001CB14 5242                       		addq.w	#1,d2
0001CB16 60F8                       		bra.s	loc_1CA90
0001CB18                            ; ===========================================================================
0001CB18                            
0001CB18                            loc_1CA98:
0001CB18 D283                       		add.l	d3,d1
0001CB1A 4A42                       		tst.w	d2
0001CB1C 6700                       		beq.s	loc_1CAA2
0001CB1E 383C 0001                  		move.w	#1,d4
0001CB22                            
0001CB22                            loc_1CAA2:
0001CB22 4A44                       		tst.w	d4
0001CB24 6700                       		beq.s	Hud_ClrLives
0001CB26                            
0001CB26                            loc_1CAA6:
0001CB26 EB4A                       		lsl.w	#5,d2
0001CB28 47F1 2000                  		lea	(a1,d2.w),a3
0001CB2C 2C9B                       		move.l	(a3)+,(a6)
0001CB2E 2C9B                       		move.l	(a3)+,(a6)
0001CB30 2C9B                       		move.l	(a3)+,(a6)
0001CB32 2C9B                       		move.l	(a3)+,(a6)
0001CB34 2C9B                       		move.l	(a3)+,(a6)
0001CB36 2C9B                       		move.l	(a3)+,(a6)
0001CB38 2C9B                       		move.l	(a3)+,(a6)
0001CB3A 2C9B                       		move.l	(a3)+,(a6)
0001CB3C                            
0001CB3C                            loc_1CABC:
0001CB3C 0680 0040 0000             		addi.l	#$400000,d0
0001CB42 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001CB46                            
0001CB46 4E75                       		rts	
0001CB48                            ; ===========================================================================
0001CB48                            
0001CB48                            Hud_ClrLives:
0001CB48 4A46                       		tst.w	d6
0001CB4A 67DA                       		beq.s	loc_1CAA6
0001CB4C 7A07                       		moveq	#7,d5
0001CB4E                            
0001CB4E                            Hud_ClrLivesLoop:
0001CB4E 2CBC 0000 0000             		move.l	#0,(a6)
0001CB54 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001CB58 60E2                       		bra.s	loc_1CABC
0001CB5A                            ; End of function Hud_Lives
0001CB5A                            
0001CB5A                            ; ===========================================================================
0001CB5A                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001CE5A                            		even
0001CE5A                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001CF9A                            		even
0001CF9A                            ; ===========================================================================
0001CF9A                            ; ---------------------------------------------------------------------------
0001CF9A                            ; When debug mode is currently in use
0001CF9A                            ; ---------------------------------------------------------------------------
0001CF9A                            
0001CF9A                            DebugMode:				; XREF: Obj01; Obj09
0001CF9A 7000                       		moveq	#0,d0
0001CF9C 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001CFA0 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001CFA4 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001CFA8                            ; ===========================================================================
0001CFA8 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001CFAA 0000                       		dc.w Debug_Skip-Debug_Index
0001CFAC                            ; ===========================================================================
0001CFAC                            
0001CFAC                            Debug_Main:				; XREF: Debug_Index
0001CFAC 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001CFB0 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001CFB6 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001CFBC 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001CFC2 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001CFC8 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001CFCE 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001CFD4 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001CFDA 117C 0000 001A             		move.b	#0,$1A(a0)
0001CFE0 117C 0000 001C             		move.b	#0,$1C(a0)
0001CFE6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001CFEC 6600                       		bne.s	Debug_Zone	; if not, branch
0001CFEE 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001CFF4 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001CFFA 7006                       		moveq	#6,d0		; use 6th debug	item list
0001CFFC 6000                       		bra.s	Debug_UseList
0001CFFE                            ; ===========================================================================
0001CFFE                            
0001CFFE                            Debug_Zone:
0001CFFE 7000                       		moveq	#0,d0
0001D000 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D004                            
0001D004                            Debug_UseList:
0001D004 45F9 0000 0000             		lea	(DebugList).l,a2
0001D00A D040                       		add.w	d0,d0
0001D00C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D010 3C1A                       		move.w	(a2)+,d6
0001D012 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D016 6200                       		bhi.s	loc_1CF9E
0001D018 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D01E                            
0001D01E                            loc_1CF9E:
0001D01E 6100 0000                  		bsr.w	Debug_ShowItem
0001D022 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D028 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D02E                            
0001D02E                            Debug_Skip:				; XREF: Debug_Index
0001D02E 7006                       		moveq	#6,d0
0001D030 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D036 6700                       		beq.s	loc_1CFBE
0001D038 7000                       		moveq	#0,d0
0001D03A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D03E                            
0001D03E                            loc_1CFBE:
0001D03E 45F9 0000 0000             		lea	(DebugList).l,a2
0001D044 D040                       		add.w	d0,d0
0001D046 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D04A 3C1A                       		move.w	(a2)+,d6
0001D04C 6100 0000                  		bsr.w	Debug_Control
0001D050 4EF9 0000 D6CC             		jmp	DisplaySprite
0001D056                            
0001D056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D056                            
0001D056                            
0001D056                            Debug_Control:
0001D056 7800                       		moveq	#0,d4
0001D058 323C 0001                  		move.w	#1,d1
0001D05C 1838 F605                  		move.b	($FFFFF605).w,d4
0001D060 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D064 6600                       		bne.s	loc_1D018	; if yes, branch
0001D066 1038 F604                  		move.b	($FFFFF604).w,d0
0001D06A 0240 000F                  		andi.w	#$F,d0
0001D06E 6600                       		bne.s	loc_1D000
0001D070 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D076 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D07C 6000 0000                  		bra.w	Debug_BackItem
0001D080                            ; ===========================================================================
0001D080                            
0001D080                            loc_1D000:
0001D080 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D084 6600                       		bne.s	loc_1D01C
0001D086 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D08C 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D090 6600                       		bne.s	loc_1D018
0001D092 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D098                            
0001D098                            loc_1D018:
0001D098 1838 F604                  		move.b	($FFFFF604).w,d4
0001D09C                            
0001D09C                            loc_1D01C:
0001D09C 7200                       		moveq	#0,d1
0001D09E 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D0A2 5241                       		addq.w	#1,d1
0001D0A4 4841                       		swap	d1
0001D0A6 E881                       		asr.l	#4,d1
0001D0A8 2428 000C                  		move.l	$C(a0),d2
0001D0AC 2628 0008                  		move.l	8(a0),d3
0001D0B0 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D0B4 6700                       		beq.s	loc_1D03C	; if not, branch
0001D0B6 9481                       		sub.l	d1,d2
0001D0B8 6400                       		bcc.s	loc_1D03C
0001D0BA 7400                       		moveq	#0,d2
0001D0BC                            
0001D0BC                            loc_1D03C:
0001D0BC 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D0C0 6700                       		beq.s	loc_1D052	; if not, branch
0001D0C2 D481                       		add.l	d1,d2
0001D0C4 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D0CA 6500                       		bcs.s	loc_1D052
0001D0CC 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D0D2                            
0001D0D2                            loc_1D052:
0001D0D2 0804 0002                  		btst	#2,d4
0001D0D6 6700                       		beq.s	loc_1D05E
0001D0D8 9681                       		sub.l	d1,d3
0001D0DA 6400                       		bcc.s	loc_1D05E
0001D0DC 7600                       		moveq	#0,d3
0001D0DE                            
0001D0DE                            loc_1D05E:
0001D0DE 0804 0003                  		btst	#3,d4
0001D0E2 6700                       		beq.s	loc_1D066
0001D0E4 D681                       		add.l	d1,d3
0001D0E6                            
0001D0E6                            loc_1D066:
0001D0E6 2142 000C                  		move.l	d2,$C(a0)
0001D0EA 2143 0008                  		move.l	d3,8(a0)
0001D0EE                            
0001D0EE                            Debug_BackItem:
0001D0EE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D0F4 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D0F6 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D0FC 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D0FE 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D102 6400                       		bcc.s	Debug_NoLoop
0001D104 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D108 6000                       		bra.s	Debug_NoLoop
0001D10A                            ; ===========================================================================
0001D10A                            
0001D10A                            Debug_NextItem:
0001D10A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D110 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D112 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D116 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D11A 6200                       		bhi.s	Debug_NoLoop
0001D11C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D122                            
0001D122                            Debug_NoLoop:
0001D122 6000 0000                  		bra.w	Debug_ShowItem
0001D126                            ; ===========================================================================
0001D126                            
0001D126                            Debug_MakeItem:
0001D126 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D12C 6700                       		beq.s	Debug_Exit	; if not, branch
0001D12E 4EB9 0000 DB52             		jsr	SingleObjLoad
0001D134 6600                       		bne.s	Debug_Exit
0001D136 3368 0008 0008             		move.w	8(a0),8(a1)
0001D13C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D142 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D146 1368 0001 0001             		move.b	1(a0),1(a1)
0001D14C 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D152 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D158 7000                       		moveq	#0,d0
0001D15A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D15E E748                       		lsl.w	#3,d0
0001D160 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D166 4E75                       		rts	
0001D168                            ; ===========================================================================
0001D168                            
0001D168                            Debug_Exit:
0001D168 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D16E 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D170 7000                       		moveq	#0,d0
0001D172 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D176 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D17E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D184 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D188 3140 000A                  		move.w	d0,$A(a0)
0001D18C 3140 000E                  		move.w	d0,$E(a0)
0001D190 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D196 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D19C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D1A2 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D1A4 4278 F780                  		clr.w	($FFFFF780).w
0001D1A8 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D1AE 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D1B6 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D1BC 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D1C2 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D1C8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D1CE                            
0001D1CE                            Debug_DoNothing:
0001D1CE 4E75                       		rts	
0001D1D0                            ; End of function Debug_Control
0001D1D0                            
0001D1D0                            
0001D1D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1D0                            
0001D1D0                            
0001D1D0                            Debug_ShowItem:				; XREF: Debug_Main
0001D1D0 7000                       		moveq	#0,d0
0001D1D2 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D1D6 E748                       		lsl.w	#3,d0
0001D1D8 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D1DE 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D1E4 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D1EA 4E75                       		rts	
0001D1EC                            ; End of function Debug_ShowItem
0001D1EC                            
0001D1EC                            ; ===========================================================================
0001D1EC                            ; ---------------------------------------------------------------------------
0001D1EC                            ; Debug	list pointers
0001D1EC                            ; ---------------------------------------------------------------------------
0001D1EC                            DebugList:
0001D1EC                            	include "_inc\Debug list pointers.asm"
0001D1EC                            ; ---------------------------------------------------------------------------
0001D1EC                            ; Debug	list pointers
0001D1EC                            ; ---------------------------------------------------------------------------
0001D1EC 0000                       	dc.w Debug_GHZ-DebugList
0001D1EE 0000                       	dc.w Debug_LZ-DebugList
0001D1F0 0000                       	dc.w Debug_MZ-DebugList
0001D1F2 0000                       	dc.w Debug_SLZ-DebugList
0001D1F4 0000                       	dc.w Debug_SYZ-DebugList
0001D1F6 0000                       	dc.w Debug_SBZ-DebugList
0001D1F8 0000                       	dc.w Debug_Ending-DebugList
0001D1F8 0000                       	dc.w Debug_Ending-DebugList
0001D1FA                            
0001D1FA                            ; ---------------------------------------------------------------------------
0001D1FA                            ; Debug	list - Green Hill
0001D1FA                            ; ---------------------------------------------------------------------------
0001D1FA                            Debug_GHZ:
0001D1FA                            	include "_inc\Debug list - GHZ.asm"
0001D1FA                            ; ---------------------------------------------------------------------------
0001D1FA                            ; Debug	list - Green Hill
0001D1FA                            ; ---------------------------------------------------------------------------
0001D1FA 0010                       	dc.w $10			; number of items in list
0001D1FC 2500 A072                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D200 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D204 2600 A66A                  	dc.l Map_obj26+$26000000
0001D208 0000 0680                  	dc.b 0,	0, 6, $80
0001D20C 1F00 983C                  	dc.l Map_obj1F+$1F000000
0001D210 0000 0400                  	dc.b 0,	0, 4, 0
0001D214 2200 9B1C                  	dc.l Map_obj22+$22000000
0001D218 0000 0444                  	dc.b 0,	0, 4, $44
0001D21C 2B00 ACAA                  	dc.l Map_obj2B+$2B000000
0001D220 0000 047B                  	dc.b 0,	0, 4, $7B
0001D224 3600 D0B4                  	dc.l Map_obj36+$36000000
0001D228 0000 051B                  	dc.b 0,	0, 5, $1B
0001D22C 1800 823A                  	dc.l Map_obj18+$18000000
0001D230 0000 4000                  	dc.b 0,	0, $40,	0
0001D234 3B00 D1DA                  	dc.l Map_obj3B+$3B000000
0001D238 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D23C 4000 F866                  	dc.l Map_obj40+$40000000
0001D240 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D244 4100 DDE0                  	dc.l Map_obj41+$41000000
0001D248 0000 0523                  	dc.b 0,	0, 5, $23
0001D24C 4200 E006                  	dc.l Map_obj42+$42000000
0001D250 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D254 4400 E314                  	dc.l Map_obj44+$44000000
0001D258 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D25C 1900 82A8                  	dc.l Map_obj48+$19000000
0001D260 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D264 7901 7194                  	dc.l Map_obj79+$79000000
0001D268 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D26C 4B00 A0B2                  	dc.l Map_obj4B+$4B000000
0001D270 0000 2400                  	dc.b 0,	0, $24,	0
0001D274 7D01 72E4                  	dc.l Map_obj7D+$7D000000
0001D278 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D27C                            	even
0001D27C                            	even
0001D27C                            
0001D27C                            ; ---------------------------------------------------------------------------
0001D27C                            ; Debug	list - Labyrinth
0001D27C                            ; ---------------------------------------------------------------------------
0001D27C                            Debug_LZ:
0001D27C                            	include "_inc\Debug list - LZ.asm"
0001D27C                            ; ---------------------------------------------------------------------------
0001D27C                            ; Debug	list - Labyrinth
0001D27C                            ; ---------------------------------------------------------------------------
0001D27C 0019                       	dc.w $19
0001D27E 2500 A072                  	dc.l Map_obj25+$25000000
0001D282 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D286 2600 A66A                  	dc.l Map_obj26+$26000000
0001D28A 0000 0680                  	dc.b 0,	0, 6, $80
0001D28E 4100 DDE0                  	dc.l Map_obj41+$41000000
0001D292 0000 0523                  	dc.b 0,	0, 5, $23
0001D296 2C00 AD50                  	dc.l Map_obj2C+$2C000000
0001D29A 0800 2486                  	dc.b 8,	0, $24,	$86
0001D29E 2D00 AF3C                  	dc.l Map_obj2D+$2D000000
0001D2A2 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D2A6 1601 2042                  	dc.l Map_obj16+$16000000
0001D2AA 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D2AE 1601 2042                  	dc.l Map_obj16+$16000000
0001D2B2 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D2B6 3300 C3BA                  	dc.l Map_obj33+$33000000
0001D2BA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D2BE 3200 BF7A                  	dc.l Map_obj32+$32000000
0001D2C2 0000 0513                  	dc.b 0,	0, 5, $13
0001D2C6 3600 D0B4                  	dc.l Map_obj36+$36000000
0001D2CA 0000 051B                  	dc.b 0,	0, 5, $1B
0001D2CE 5201 0164                  	dc.l Map_obj52a+$52000000
0001D2D2 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D2D6 6101 226A                  	dc.l Map_obj61+$61000000
0001D2DA 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D2DE 6101 226A                  	dc.l Map_obj61+$61000000
0001D2E2 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D2E6 6101 226A                  	dc.l Map_obj61+$61000000
0001D2EA 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D2EE 6201 23BE                  	dc.l Map_obj62+$62000000
0001D2F2 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D2F6 6101 226A                  	dc.l Map_obj61+$61000000
0001D2FA 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D2FE 6101 226A                  	dc.l Map_obj61+$61000000
0001D302 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D306 6301 2720                  	dc.l Map_obj63+$63000000
0001D30A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D30E 6001 1F8C                  	dc.l Map_obj60+$60000000
0001D312 0000 0467                  	dc.b 0,	0, 4, $67
0001D316 6401 2A64                  	dc.l Map_obj64+$64000000
0001D31A 8413 8348                  	dc.b $84, $13, $83, $48
0001D31E 6501 2BEC                  	dc.l Map_obj65+$65000000
0001D322 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D326 6501 2BEC                  	dc.l Map_obj65+$65000000
0001D32A 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D32E 0B01 13DC                  	dc.l Map_obj0B+$B000000
0001D332 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D336 0C01 14AC                  	dc.l Map_obj0C+$C000000
0001D33A 0200 4328                  	dc.b 2,	0, $43,	$28
0001D33E 7901 7194                  	dc.l Map_obj79+$79000000
0001D342 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D346                            	even
0001D346                            	even
0001D346                            
0001D346                            ; ---------------------------------------------------------------------------
0001D346                            ; Debug	list - Marble
0001D346                            ; ---------------------------------------------------------------------------
0001D346                            Debug_MZ:
0001D346                            	include "_inc\Debug list - MZ.asm"
0001D346                            ; ---------------------------------------------------------------------------
0001D346                            ; Debug	list - Marble
0001D346                            ; ---------------------------------------------------------------------------
0001D346 0012                       	dc.w $12
0001D348 2500 A072                  	dc.l Map_obj25+$25000000
0001D34C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D350 2600 A66A                  	dc.l Map_obj26+$26000000
0001D354 0000 0680                  	dc.b 0,	0, 6, $80
0001D358 2200 9B1C                  	dc.l Map_obj22+$22000000
0001D35C 0000 0444                  	dc.b 0,	0, 4, $44
0001D360 3600 D0B4                  	dc.l Map_obj36+$36000000
0001D364 0000 051B                  	dc.b 0,	0, 5, $1B
0001D368 4100 DDE0                  	dc.l Map_obj41+$41000000
0001D36C 0000 0523                  	dc.b 0,	0, 5, $23
0001D370 1300 B44A                  	dc.l Map_obj14+$13000000
0001D374 0000 0345                  	dc.b 0,	0, 3, $45
0001D378 4600 E9C6                  	dc.l Map_obj46+$46000000
0001D37C 0000 4000                  	dc.b 0,	0, $40,	0
0001D380 4C00 F312                  	dc.l Map_obj4C+$4C000000
0001D384 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D388 4E00 F5F6                  	dc.l Map_obj4E+$4E000000
0001D38C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D390 3300 C3BA                  	dc.l Map_obj33+$33000000
0001D394 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D398 5000 F9F4                  	dc.l Map_obj50+$50000000
0001D39C 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D3A0 5100 FE98                  	dc.l Map_obj51+$51000000
0001D3A4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D3A8 5201 010E                  	dc.l Map_obj52+$52000000
0001D3AC 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D3B0 5300 8840                  	dc.l Map_obj53+$53000000
0001D3B4 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D3B8 5400 F2D8                  	dc.l Map_obj54+$54000000
0001D3BC 0000 8680                  	dc.b 0,	0, $86,	$80
0001D3C0 5501 0302                  	dc.l Map_obj55+$55000000
0001D3C4 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D3C8 7801 6E0E                  	dc.l Map_obj78+$78000000
0001D3CC 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D3D0 7901 7194                  	dc.l Map_obj79+$79000000
0001D3D4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D3D8                            	even
0001D3D8                            	even
0001D3D8                            
0001D3D8                            ; ---------------------------------------------------------------------------
0001D3D8                            ; Debug	list - Star Light
0001D3D8                            ; ---------------------------------------------------------------------------
0001D3D8                            Debug_SLZ:
0001D3D8                            	include "_inc\Debug list - SLZ.asm"
0001D3D8                            ; ---------------------------------------------------------------------------
0001D3D8                            ; Debug	list - Star Light
0001D3D8                            ; ---------------------------------------------------------------------------
0001D3D8 000F                       	dc.w $F
0001D3DA 2500 A072                  	dc.l Map_obj25+$25000000
0001D3DE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D3E2 2600 A66A                  	dc.l Map_obj26+$26000000
0001D3E6 0000 0680                  	dc.b 0,	0, 6, $80
0001D3EA 5901 0E04                  	dc.l Map_obj59+$59000000
0001D3EE 0000 4000                  	dc.b 0,	0, $40,	0
0001D3F2 5300 8840                  	dc.l Map_obj53+$53000000
0001D3F6 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D3FA 1800 8298                  	dc.l Map_obj18b+$18000000
0001D3FE 0000 4000                  	dc.b 0,	0, $40,	0
0001D402 5A01 0F3E                  	dc.l Map_obj5A+$5A000000
0001D406 0000 4000                  	dc.b 0,	0, $40,	0
0001D40A 5B01 10F6                  	dc.l Map_obj5B+$5B000000
0001D40E 0000 4000                  	dc.b 0,	0, $40,	0
0001D412 5D01 16C6                  	dc.l Map_obj5D+$5D000000
0001D416 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D41A 5E01 1A58                  	dc.l Map_obj5E+$5E000000
0001D41E 0000 0374                  	dc.b 0,	0, 3, $74
0001D422 4100 DDE0                  	dc.l Map_obj41+$41000000
0001D426 0000 0523                  	dc.b 0,	0, 5, $23
0001D42A 1300 B44A                  	dc.l Map_obj14+$13000000
0001D42E 0000 0480                  	dc.b 0,	0, 4, $80
0001D432 1C00 8950                  	dc.l Map_obj1C+$1C000000
0001D436 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D43A 5F01 1CD6                  	dc.l Map_obj5F+$5F000000
0001D43E 0000 0400                  	dc.b 0,	0, 4, 0
0001D442 6001 1F8C                  	dc.l Map_obj60+$60000000
0001D446 0000 2429                  	dc.b 0,	0, $24,	$29
0001D44A 7901 7194                  	dc.l Map_obj79+$79000000
0001D44E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D452                            	even
0001D452                            	even
0001D452                            
0001D452                            ; ---------------------------------------------------------------------------
0001D452                            ; Debug	list - Spring Yard
0001D452                            ; ---------------------------------------------------------------------------
0001D452                            Debug_SYZ:
0001D452                            	include "_inc\Debug list - SYZ.asm"
0001D452                            ; ---------------------------------------------------------------------------
0001D452                            ; Debug	list - Spring Yard
0001D452                            ; ---------------------------------------------------------------------------
0001D452 000F                       	dc.w $F
0001D454 2500 A072                  	dc.l Map_obj25+$25000000
0001D458 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D45C 2600 A66A                  	dc.l Map_obj26+$26000000
0001D460 0000 0680                  	dc.b 0,	0, 6, $80
0001D464 3600 D0B4                  	dc.l Map_obj36+$36000000
0001D468 0000 051B                  	dc.b 0,	0, 5, $1B
0001D46C 4100 DDE0                  	dc.l Map_obj41+$41000000
0001D470 0000 0523                  	dc.b 0,	0, 5, $23
0001D474 4300 E266                  	dc.l Map_obj43+$43000000
0001D478 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D47C 1200 EA44                  	dc.l Map_obj12+$12000000
0001D480 0000 0000                  	dc.b 0,	0, 0, 0
0001D484 4700 EBC0                  	dc.l Map_obj47+$47000000
0001D488 0000 0380                  	dc.b 0,	0, 3, $80
0001D48C 1F00 983C                  	dc.l Map_obj1F+$1F000000
0001D490 0000 0400                  	dc.b 0,	0, 4, 0
0001D494 2200 9B1C                  	dc.l Map_obj22+$22000000
0001D498 0000 0444                  	dc.b 0,	0, 4, $44
0001D49C 5000 F9F4                  	dc.l Map_obj50+$50000000
0001D4A0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D4A4 1800 8286                  	dc.l Map_obj18a+$18000000
0001D4A8 0000 4000                  	dc.b 0,	0, $40,	0
0001D4AC 5601 07C4                  	dc.l Map_obj56+$56000000
0001D4B0 0000 4000                  	dc.b 0,	0, $40,	0
0001D4B4 3200 BF7A                  	dc.l Map_obj32+$32000000
0001D4B8 0000 0513                  	dc.b 0,	0, 5, $13
0001D4BC 7801 6E0E                  	dc.l Map_obj78+$78000000
0001D4C0 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D4C4 7901 7194                  	dc.l Map_obj79+$79000000
0001D4C8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D4CC                            	even
0001D4CC                            	even
0001D4CC                            
0001D4CC                            ; ---------------------------------------------------------------------------
0001D4CC                            ; Debug	list - Scrap Brain
0001D4CC                            ; ---------------------------------------------------------------------------
0001D4CC                            Debug_SBZ:
0001D4CC                            	include "_inc\Debug list - SBZ.asm"
0001D4CC                            ; ---------------------------------------------------------------------------
0001D4CC                            ; Debug	list - Scrap Brain
0001D4CC                            ; ---------------------------------------------------------------------------
0001D4CC 001D                       	dc.w $1D
0001D4CE 2500 A072                  	dc.l Map_obj25+$25000000
0001D4D2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D4D6 2600 A66A                  	dc.l Map_obj26+$26000000
0001D4DA 0000 0680                  	dc.b 0,	0, 6, $80
0001D4DE 5F01 1CD6                  	dc.l Map_obj5F+$5F000000
0001D4E2 0000 0400                  	dc.b 0,	0, 4, 0
0001D4E6 6001 1F8C                  	dc.l Map_obj60+$60000000
0001D4EA 0000 0429                  	dc.b 0,	0, 4, $29
0001D4EE 7801 6E0E                  	dc.l Map_obj78+$78000000
0001D4F2 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001D4F6 1501 0B60                  	dc.l Map_obj15b+$15000000
0001D4FA 0702 4391                  	dc.b 7,	2, $43,	$91
0001D4FE 6701 5732                  	dc.l Map_obj67+$67000000
0001D502 E000 C344                  	dc.b $E0, 0, $C3, $44
0001D506 5201 010E                  	dc.l Map_obj52+$52000000
0001D50A 2802 22C0                  	dc.b $28, 2, $22, $C0
0001D50E 3200 BF7A                  	dc.l Map_obj32+$32000000
0001D512 0000 0513                  	dc.b 0,	0, 5, $13
0001D516 6901 598C                  	dc.l Map_obj69+$69000000
0001D51A 0300 4492                  	dc.b 3,	0, $44,	$92
0001D51E 6901 59E6                  	dc.l Map_obj69a+$69000000
0001D522 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001D526 6A01 5C44                  	dc.l Map_obj6A+$6A000000
0001D52A 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001D52E 5300 8840                  	dc.l Map_obj53+$53000000
0001D532 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001D536 5201 010E                  	dc.l Map_obj52+$52000000
0001D53A 3903 4460                  	dc.b $39, 3, $44, $60
0001D53E 6B01 6014                  	dc.l Map_obj6B+$6B000000
0001D542 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001D546 2A00 8AE6                  	dc.l Map_obj2A+$2A000000
0001D54A 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001D54E 6B01 6014                  	dc.l Map_obj6B+$6B000000
0001D552 1301 22C0                  	dc.b $13, 1, $22, $C0
0001D556 6A01 5C44                  	dc.l Map_obj6A+$6A000000
0001D55A 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001D55E 6B01 6014                  	dc.l Map_obj6B+$6B000000
0001D562 2401 22C0                  	dc.b $24, 1, $22, $C0
0001D566 6A01 5C44                  	dc.l Map_obj6A+$6A000000
0001D56A 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001D56E 6B01 6014                  	dc.l Map_obj6B+$6B000000
0001D572 3401 22C0                  	dc.b $34, 1, $22, $C0
0001D576 6C01 61D6                  	dc.l Map_obj6C+$6C000000
0001D57A 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001D57E 6D00 E6B6                  	dc.l Map_obj6D+$6D000000
0001D582 6400 83D9                  	dc.b $64, 0, $83, $D9
0001D586 6D00 E6B6                  	dc.l Map_obj6D+$6D000000
0001D58A 640B 83D9                  	dc.b $64, $B, $83, $D9
0001D58E 6E01 628C                  	dc.l Map_obj6E+$6E000000
0001D592 0400 047E                  	dc.b 4,	0, 4, $7E
0001D596 7001 66D2                  	dc.l Map_obj70+$70000000
0001D59A 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001D59E 7101 156C                  	dc.l Map_obj71+$71000000
0001D5A2 1100 8680                  	dc.b $11, 0, $86, $80
0001D5A6 1E00 8F54                  	dc.l Map_obj1E+$1E000000
0001D5AA 0400 2302                  	dc.b 4,	0, $23,	2
0001D5AE 7901 7194                  	dc.l Map_obj79+$79000000
0001D5B2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D5B6                            	even
0001D5B6                            	even
0001D5B6                            
0001D5B6                            ; ---------------------------------------------------------------------------
0001D5B6                            ; Debug	list - ending sequence / special stage
0001D5B6                            ; ---------------------------------------------------------------------------
0001D5B6                            Debug_Ending:
0001D5B6                            	include "_inc\Debug list - Ending and SS.asm"
0001D5B6                            ; ---------------------------------------------------------------------------
0001D5B6                            ; Debug	list - ending sequence / special stage
0001D5B6                            ; ---------------------------------------------------------------------------
0001D5B6 000D                       	dc.w $D
0001D5B8 2500 A072                  	dc.l Map_obj25+$25000000
0001D5BC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D5C0 4700 EBC0                  	dc.l Map_obj47+$47000000
0001D5C4 0000 0380                  	dc.b 0,	0, 3, $80
0001D5C8 2800 956E                  	dc.l Map_obj28a+$28000000
0001D5CC 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001D5D0 2800 956E                  	dc.l Map_obj28a+$28000000
0001D5D4 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001D5D8 2800 956E                  	dc.l Map_obj28a+$28000000
0001D5DC 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001D5E0 2800 9556                  	dc.l Map_obj28+$28000000
0001D5E4 0D00 0553                  	dc.b $D, 0, 5, $53
0001D5E8 2800 9556                  	dc.l Map_obj28+$28000000
0001D5EC 0E00 0553                  	dc.b $E, 0, 5, $53
0001D5F0 2800 9556                  	dc.l Map_obj28+$28000000
0001D5F4 0F00 0573                  	dc.b $F, 0, 5, $73
0001D5F8 2800 9556                  	dc.l Map_obj28+$28000000
0001D5FC 1000 0573                  	dc.b $10, 0, 5,	$73
0001D600 2800 956E                  	dc.l Map_obj28a+$28000000
0001D604 1100 0585                  	dc.b $11, 0, 5,	$85
0001D608 2800 9586                  	dc.l Map_obj28b+$28000000
0001D60C 1200 0593                  	dc.b $12, 0, 5,	$93
0001D610 2800 956E                  	dc.l Map_obj28a+$28000000
0001D614 1300 0565                  	dc.b $13, 0, 5,	$65
0001D618 2800 9586                  	dc.l Map_obj28b+$28000000
0001D61C 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001D620                            	even
0001D620                            	even
0001D620                            
0001D620                            ; ---------------------------------------------------------------------------
0001D620                            ; Main level load blocks
0001D620                            ; ---------------------------------------------------------------------------
0001D620                            MainLoadBlocks:
0001D620                            	include "_inc\Main level load blocks.asm"
0001D620                            ; ---------------------------------------------------------------------------
0001D620                            ; Main level load blocks
0001D620                            ;
0001D620                            ; ===FORMAT===
0001D620                            ; level	patterns + (1st	PLC num	* 10^6)
0001D620                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001D620                            ; 256x256 mappings
0001D620                            ; blank, music (unused), pal index (unused), pal index
0001D620                            ; ---------------------------------------------------------------------------
0001D620 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001D624 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001D628 0000 0000                  	dc.l Blk256_GHZ
0001D62C 0081 0404                  	dc.b 0,	$81, 4,	4
0001D630 0000 0000                  	dc.l Nem_LZ+$6000000
0001D634 0000 0000                  	dc.l Blk16_LZ+$7000000
0001D638 0000 0000                  	dc.l Blk256_LZ
0001D63C 0082 0505                  	dc.b 0,	$82, 5,	5
0001D640 0000 0000                  	dc.l Nem_MZ+$8000000
0001D644 0000 0000                  	dc.l Blk16_MZ+$9000000
0001D648 0000 0000                  	dc.l Blk256_MZ
0001D64C 0083 0606                  	dc.b 0,	$83, 6,	6
0001D650 0000 0000                  	dc.l Nem_SLZ+$A000000
0001D654 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001D658 0000 0000                  	dc.l Blk256_SLZ
0001D65C 0084 0707                  	dc.b 0,	$84, 7,	7
0001D660 0000 0000                  	dc.l Nem_SYZ+$C000000
0001D664 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001D668 0000 0000                  	dc.l Blk256_SYZ
0001D66C 0085 0808                  	dc.b 0,	$85, 8,	8
0001D670 0000 0000                  	dc.l Nem_SBZ+$E000000
0001D674 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001D678 0000 0000                  	dc.l Blk256_SBZ
0001D67C 0086 0909                  	dc.b 0,	$86, 9,	9
0001D680 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001D684 0000 0000                  	dc.l Blk16_GHZ
0001D688 0000 0000                  	dc.l Blk256_GHZ
0001D68C 0086 1313                  	dc.b 0,	$86, $13, $13
0001D690                            	even
0001D690                            	even
0001D690                            
0001D690                            ; ---------------------------------------------------------------------------
0001D690                            ; Pattern load cues
0001D690                            ; ---------------------------------------------------------------------------
0001D690                            ArtLoadCues:
0001D690                            	include "_inc\Pattern load cues.asm"
0001D690                            ; ---------------------------------------------------------------------------
0001D690                            ; Pattern load cues - index
0001D690                            ; ---------------------------------------------------------------------------
0001D690 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001D694 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001D698 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001D69C 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001D6A0 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001D6A4 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001D6A8 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001D6AC 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001D6B0 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001D6B4 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001D6B8 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001D6BC 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001D6C0 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001D6C4 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001D6C8 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001D6CC 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001D6D0                            ; ---------------------------------------------------------------------------
0001D6D0                            ; Pattern load cues - standard block 1
0001D6D0                            ; ---------------------------------------------------------------------------
0001D6D0 0004                       PLC_Main:	dc.w 4
0001D6D2 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001D6D6 F400                       		dc.w $F400
0001D6D8 0000 0000                  		dc.l Nem_Hud		; HUD
0001D6DC D940                       		dc.w $D940
0001D6DE 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001D6E2 FA80                       		dc.w $FA80
0001D6E4 0000 0000                  		dc.l Nem_Ring		; rings
0001D6E8 F640                       		dc.w $F640
0001D6EA 0000 0000                  		dc.l Nem_Points		; points from enemy
0001D6EE F2E0                       		dc.w $F2E0
0001D6F0                            ; ---------------------------------------------------------------------------
0001D6F0                            ; Pattern load cues - standard block 2
0001D6F0                            ; ---------------------------------------------------------------------------
0001D6F0 0002                       PLC_Main2:	dc.w 2
0001D6F2 0000 0000                  		dc.l Nem_Monitors	; monitors
0001D6F6 D000                       		dc.w $D000
0001D6F8 0000 0000                  		dc.l Nem_Shield		; shield
0001D6FC A820                       		dc.w $A820
0001D6FE 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001D702 AB80                       		dc.w $AB80
0001D704                            ; ---------------------------------------------------------------------------
0001D704                            ; Pattern load cues - explosion
0001D704                            ; ---------------------------------------------------------------------------
0001D704 0000                       PLC_Explode:	dc.w 0
0001D706 0000 0000                  		dc.l Nem_Explode	; explosion
0001D70A B400                       		dc.w $B400
0001D70C                            ; ---------------------------------------------------------------------------
0001D70C                            ; Pattern load cues - game/time	over
0001D70C                            ; ---------------------------------------------------------------------------
0001D70C 0000                       PLC_GameOver:	dc.w 0
0001D70E 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001D712 ABC0                       		dc.w $ABC0
0001D714                            ; ---------------------------------------------------------------------------
0001D714                            ; Pattern load cues - Green Hill
0001D714                            ; ---------------------------------------------------------------------------
0001D714 000B                       PLC_GHZ:	dc.w $B
0001D716 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001D71A 0000                       		dc.w 0
0001D71C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001D720 39A0                       		dc.w $39A0
0001D722 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001D726 6B00                       		dc.w $6B00
0001D728 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001D72C 7A00                       		dc.w $7A00
0001D72E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D732 8000                       		dc.w $8000
0001D734 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D738 8880                       		dc.w $8880
0001D73A 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001D73E 8F60                       		dc.w $8F60
0001D740 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001D744 9360                       		dc.w $9360
0001D746 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001D74A 9E00                       		dc.w $9E00
0001D74C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D750 A360                       		dc.w $A360
0001D752 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D756 A460                       		dc.w $A460
0001D758 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D75C A660                       		dc.w $A660
0001D75E 0005                       PLC_GHZ2:	dc.w 5
0001D760 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D764 7000                       		dc.w $7000
0001D766 0000 0000                  		dc.l Nem_Bridge		; bridge
0001D76A 71C0                       		dc.w $71C0
0001D76C 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001D770 7300                       		dc.w $7300
0001D772 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001D776 7540                       		dc.w $7540
0001D778 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001D77C A1E0                       		dc.w $A1E0
0001D77E 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001D782 6980                       		dc.w $6980
0001D784                            ; ---------------------------------------------------------------------------
0001D784                            ; Pattern load cues - Labyrinth
0001D784                            ; ---------------------------------------------------------------------------
0001D784 000B                       PLC_LZ:		dc.w $B
0001D786 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001D78A 0000                       		dc.w 0
0001D78C 0000 0000                  		dc.l Nem_LzBlock1	; block
0001D790 3C00                       		dc.w $3C00
0001D792 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001D796 3E00                       		dc.w $3E00
0001D798 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001D79C 4B20                       		dc.w $4B20
0001D79E 0000 0000                  		dc.l Nem_Water		; water	surface
0001D7A2 6000                       		dc.w $6000
0001D7A4 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001D7A8 6200                       		dc.w $6200
0001D7AA 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001D7AE 6500                       		dc.w $6500
0001D7B0 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001D7B4 6900                       		dc.w $6900
0001D7B6 0000 0000                  		dc.l Nem_LzBlock3	; block
0001D7BA 7780                       		dc.w $7780
0001D7BC 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001D7C0 7880                       		dc.w $7880
0001D7C2 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001D7C6 7980                       		dc.w $7980
0001D7C8 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001D7CC 94C0                       		dc.w $94C0
0001D7CE 000C                       PLC_LZ2:	dc.w $C
0001D7D0 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001D7D4 7BC0                       		dc.w $7BC0
0001D7D6 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001D7DA 7CC0                       		dc.w $7CC0
0001D7DC 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001D7E0 7EC0                       		dc.w $7EC0
0001D7E2 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001D7E6 5D20                       		dc.w $5D20
0001D7E8 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001D7EC 8800                       		dc.w $8800
0001D7EE 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001D7F2 89E0                       		dc.w $89E0
0001D7F4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D7F8 8CE0                       		dc.w $8CE0
0001D7FA 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001D7FE 90C0                       		dc.w $90C0
0001D800 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D804 A1E0                       		dc.w $A1E0
0001D806 0000 0000                  		dc.l Nem_Cork		; cork block
0001D80A A000                       		dc.w $A000
0001D80C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D810 A360                       		dc.w $A360
0001D812 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D816 A460                       		dc.w $A460
0001D818 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D81C A660                       		dc.w $A660
0001D81E                            ; ---------------------------------------------------------------------------
0001D81E                            ; Pattern load cues - Marble
0001D81E                            ; ---------------------------------------------------------------------------
0001D81E 0009                       PLC_MZ:		dc.w 9
0001D820 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001D824 0000                       		dc.w 0
0001D826 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001D82A 6000                       		dc.w $6000
0001D82C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D830 68A0                       		dc.w $68A0
0001D832 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D836 7000                       		dc.w $7000
0001D838 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001D83C 71C0                       		dc.w $71C0
0001D83E 0000 0000                  		dc.l Nem_Lava		; lava
0001D842 7500                       		dc.w $7500
0001D844 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D848 8880                       		dc.w $8880
0001D84A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D84E 8F60                       		dc.w $8F60
0001D850 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001D854 9700                       		dc.w $9700
0001D856 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D85A 9FE0                       		dc.w $9FE0
0001D85C 0004                       PLC_MZ2:	dc.w 4
0001D85E 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001D862 A260                       		dc.w $A260
0001D864 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D868 A360                       		dc.w $A360
0001D86A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D86E A460                       		dc.w $A460
0001D870 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D874 A660                       		dc.w $A660
0001D876 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001D87A 5700                       		dc.w $5700
0001D87C                            ; ---------------------------------------------------------------------------
0001D87C                            ; Pattern load cues - Star Light
0001D87C                            ; ---------------------------------------------------------------------------
0001D87C 0008                       PLC_SLZ:	dc.w 8
0001D87E 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001D882 0000                       		dc.w 0
0001D884 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001D888 8000                       		dc.w $8000
0001D88A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D88E 8520                       		dc.w $8520
0001D890 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D894 9000                       		dc.w $9000
0001D896 0000 0000                  		dc.l Nem_SlzBlock	; block
0001D89A 9C00                       		dc.w $9C00
0001D89C 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001D8A0 A260                       		dc.w $A260
0001D8A2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D8A6 A360                       		dc.w $A360
0001D8A8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D8AC A460                       		dc.w $A460
0001D8AE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D8B2 A660                       		dc.w $A660
0001D8B4 0005                       PLC_SLZ2:	dc.w 5
0001D8B6 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001D8BA 6E80                       		dc.w $6E80
0001D8BC 0000 0000                  		dc.l Nem_Fan		; fan
0001D8C0 7400                       		dc.w $7400
0001D8C2 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001D8C6 7980                       		dc.w $7980
0001D8C8 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001D8CC 7B80                       		dc.w $7B80
0001D8CE 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001D8D2 9B00                       		dc.w $9B00
0001D8D4 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001D8D8 9E00                       		dc.w $9E00
0001D8DA                            ; ---------------------------------------------------------------------------
0001D8DA                            ; Pattern load cues - Spring Yard
0001D8DA                            ; ---------------------------------------------------------------------------
0001D8DA 0004                       PLC_SYZ:	dc.w 4
0001D8DC 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001D8E0 0000                       		dc.w 0
0001D8E2 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D8E6 8000                       		dc.w $8000
0001D8E8 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D8EC 8880                       		dc.w $8880
0001D8EE 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D8F2 8F60                       		dc.w $8F60
0001D8F4 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001D8F8 9700                       		dc.w $9700
0001D8FA 0007                       PLC_SYZ2:	dc.w 7
0001D8FC 0000 0000                  		dc.l Nem_Bumper		; bumper
0001D900 7000                       		dc.w $7000
0001D902 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001D906 72C0                       		dc.w $72C0
0001D908 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001D90C 7740                       		dc.w $7740
0001D90E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D912 9FE0                       		dc.w $9FE0
0001D914 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D918 A1E0                       		dc.w $A1E0
0001D91A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D91E A360                       		dc.w $A360
0001D920 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D924 A460                       		dc.w $A460
0001D926 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D92A A660                       		dc.w $A660
0001D92C                            ; ---------------------------------------------------------------------------
0001D92C                            ; Pattern load cues - Scrap Brain
0001D92C                            ; ---------------------------------------------------------------------------
0001D92C 000B                       PLC_SBZ:	dc.w $B
0001D92E 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001D932 0000                       		dc.w 0
0001D934 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001D938 5800                       		dc.w $5800
0001D93A 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001D93E 5D00                       		dc.w $5D00
0001D940 0000 0000                  		dc.l Nem_Girder		; girder
0001D944 5E00                       		dc.w $5E00
0001D946 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001D94A 6040                       		dc.w $6040
0001D94C 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001D950 6880                       		dc.w $6880
0001D952 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001D956 6900                       		dc.w $6900
0001D958 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001D95C 7220                       		dc.w $7220
0001D95E 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001D962 76A0                       		dc.w $76A0
0001D964 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001D968 7B20                       		dc.w $7B20
0001D96A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001D96E 7EA0                       		dc.w $7EA0
0001D970 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001D974 9860                       		dc.w $9860
0001D976 000C                       PLC_SBZ2:	dc.w $C
0001D978 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D97C 5600                       		dc.w $5600
0001D97E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001D982 8000                       		dc.w $8000
0001D984 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D988 8520                       		dc.w $8520
0001D98A 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001D98E 8C00                       		dc.w $8C00
0001D990 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001D994 8DE0                       		dc.w $8DE0
0001D996 0000 0000                  		dc.l Nem_Electric	; electric orb
0001D99A 8FC0                       		dc.w $8FC0
0001D99C 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001D9A0 9240                       		dc.w $9240
0001D9A2 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001D9A6 7F20                       		dc.w $7F20
0001D9A8 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001D9AC 9BE0                       		dc.w $9BE0
0001D9AE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D9B2 A1E0                       		dc.w $A1E0
0001D9B4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D9B8 A360                       		dc.w $A360
0001D9BA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D9BE A460                       		dc.w $A460
0001D9C0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D9C4 A660                       		dc.w $A660
0001D9C6                            ; ---------------------------------------------------------------------------
0001D9C6                            ; Pattern load cues - title card
0001D9C6                            ; ---------------------------------------------------------------------------
0001D9C6 0000                       PLC_TitleCard:	dc.w 0
0001D9C8 0000 0000                  		dc.l Nem_TitleCard
0001D9CC B000                       		dc.w $B000
0001D9CE                            ; ---------------------------------------------------------------------------
0001D9CE                            ; Pattern load cues - act 3 boss
0001D9CE                            ; ---------------------------------------------------------------------------
0001D9CE 0005                       PLC_Boss:	dc.w 5
0001D9D0 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001D9D4 8000                       		dc.w $8000
0001D9D6 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001D9DA 8D80                       		dc.w $8D80
0001D9DC 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001D9E0 93A0                       		dc.w $93A0
0001D9E2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001D9E6 A300                       		dc.w $A300
0001D9E8 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001D9EC A300                       		dc.w $A300
0001D9EE 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001D9F2 A540                       		dc.w $A540
0001D9F4                            ; ---------------------------------------------------------------------------
0001D9F4                            ; Pattern load cues - act 1/2 signpost
0001D9F4                            ; ---------------------------------------------------------------------------
0001D9F4 0002                       PLC_Signpost:	dc.w 2
0001D9F6 0000 0000                  		dc.l Nem_SignPost	; signpost
0001D9FA D000                       		dc.w $D000
0001D9FC 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DA00 96C0                       		dc.w $96C0
0001DA02 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DA06 8C40                       		dc.w $8C40
0001DA08                            ; ---------------------------------------------------------------------------
0001DA08                            ; Pattern load cues - beta special stage warp effect
0001DA08                            ; ---------------------------------------------------------------------------
0001DA08 0000                       PLC_Warp:	dc.w 0
0001DA0A 0000 0000                  		dc.l Nem_Warp
0001DA0E A820                       		dc.w $A820
0001DA10                            ; ---------------------------------------------------------------------------
0001DA10                            ; Pattern load cues - special stage
0001DA10                            ; ---------------------------------------------------------------------------
0001DA10 0010                       PLC_SpeStage:	dc.w $10
0001DA12 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DA16 0000                       		dc.w 0
0001DA18 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DA1C 0A20                       		dc.w $A20
0001DA1E 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DA22 2840                       		dc.w $2840
0001DA24 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DA28 4760                       		dc.w $4760
0001DA2A 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DA2E 4A20                       		dc.w $4A20
0001DA30 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DA34 4C60                       		dc.w $4C60
0001DA36 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DA3A 5E00                       		dc.w $5E00
0001DA3C 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DA40 6E00                       		dc.w $6E00
0001DA42 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DA46 7E00                       		dc.w $7E00
0001DA48 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DA4C 8E00                       		dc.w $8E00
0001DA4E 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DA52 9E00                       		dc.w $9E00
0001DA54 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DA58 AE00                       		dc.w $AE00
0001DA5A 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DA5E BE00                       		dc.w $BE00
0001DA60 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DA64 EE00                       		dc.w $EE00
0001DA66 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DA6A F2E0                       		dc.w $F2E0
0001DA6C 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001DA70 F400                       		dc.w $F400
0001DA72 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001DA76 F520                       		dc.w $F520
0001DA78 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001DA7C F2E0                       		dc.w $F2E0
0001DA7E 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001DA82 F400                       		dc.w $F400
0001DA84 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001DA88 F520                       		dc.w $F520
0001DA8A                            ; ---------------------------------------------------------------------------
0001DA8A                            ; Pattern load cues - GHZ animals
0001DA8A                            ; ---------------------------------------------------------------------------
0001DA8A 0001                       PLC_GHZAnimals:	dc.w 1
0001DA8C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DA90 B000                       		dc.w $B000
0001DA92 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DA96 B240                       		dc.w $B240
0001DA98                            ; ---------------------------------------------------------------------------
0001DA98                            ; Pattern load cues - LZ animals
0001DA98                            ; ---------------------------------------------------------------------------
0001DA98 0001                       PLC_LZAnimals:	dc.w 1
0001DA9A 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DA9E B000                       		dc.w $B000
0001DAA0 0000 0000                  		dc.l Nem_Seal		; seal
0001DAA4 B240                       		dc.w $B240
0001DAA6                            ; ---------------------------------------------------------------------------
0001DAA6                            ; Pattern load cues - MZ animals
0001DAA6                            ; ---------------------------------------------------------------------------
0001DAA6 0001                       PLC_MZAnimals:	dc.w 1
0001DAA8 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DAAC B000                       		dc.w $B000
0001DAAE 0000 0000                  		dc.l Nem_Seal		; seal
0001DAB2 B240                       		dc.w $B240
0001DAB4                            ; ---------------------------------------------------------------------------
0001DAB4                            ; Pattern load cues - SLZ animals
0001DAB4                            ; ---------------------------------------------------------------------------
0001DAB4 0001                       PLC_SLZAnimals:	dc.w 1
0001DAB6 0000 0000                  		dc.l Nem_Pig		; pig
0001DABA B000                       		dc.w $B000
0001DABC 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DAC0 B240                       		dc.w $B240
0001DAC2                            ; ---------------------------------------------------------------------------
0001DAC2                            ; Pattern load cues - SYZ animals
0001DAC2                            ; ---------------------------------------------------------------------------
0001DAC2 0001                       PLC_SYZAnimals:	dc.w 1
0001DAC4 0000 0000                  		dc.l Nem_Pig		; pig
0001DAC8 B000                       		dc.w $B000
0001DACA 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DACE B240                       		dc.w $B240
0001DAD0                            ; ---------------------------------------------------------------------------
0001DAD0                            ; Pattern load cues - SBZ animals
0001DAD0                            ; ---------------------------------------------------------------------------
0001DAD0 0001                       PLC_SBZAnimals:	dc.w 1
0001DAD2 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DAD6 B000                       		dc.w $B000
0001DAD8 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DADC B240                       		dc.w $B240
0001DADE                            ; ---------------------------------------------------------------------------
0001DADE                            ; Pattern load cues - special stage results screen
0001DADE                            ; ---------------------------------------------------------------------------
0001DADE 0001                       PLC_SpeStResult:dc.w 1
0001DAE0 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001DAE4 A820                       		dc.w $A820
0001DAE6 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001DAEA AA20                       		dc.w $AA20
0001DAEC                            ; ---------------------------------------------------------------------------
0001DAEC                            ; Pattern load cues - ending sequence
0001DAEC                            ; ---------------------------------------------------------------------------
0001DAEC 000E                       PLC_Ending:	dc.w $E
0001DAEE 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DAF2 0000                       		dc.w 0
0001DAF4 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DAF8 39A0                       		dc.w $39A0
0001DAFA 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DAFE 6B00                       		dc.w $6B00
0001DB00 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001DB04 7400                       		dc.w $7400
0001DB06 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DB0A 78A0                       		dc.w $78A0
0001DB0C 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001DB10 7C20                       		dc.w $7C20
0001DB12 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001DB16 A480                       		dc.w $A480
0001DB18 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DB1C AA60                       		dc.w $AA60
0001DB1E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DB22 ACA0                       		dc.w $ACA0
0001DB24 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DB28 AE60                       		dc.w $AE60
0001DB2A 0000 0000                  		dc.l Nem_Seal		; seal
0001DB2E B0A0                       		dc.w $B0A0
0001DB30 0000 0000                  		dc.l Nem_Pig		; pig
0001DB34 B260                       		dc.w $B260
0001DB36 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DB3A B4A0                       		dc.w $B4A0
0001DB3C 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DB40 B660                       		dc.w $B660
0001DB42 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001DB46 B8A0                       		dc.w $B8A0
0001DB48                            ; ---------------------------------------------------------------------------
0001DB48                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001DB48                            ; ---------------------------------------------------------------------------
0001DB48 0002                       PLC_TryAgain:	dc.w 2
0001DB4A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DB4E 78A0                       		dc.w $78A0
0001DB50 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001DB54 7C20                       		dc.w $7C20
0001DB56 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001DB5A B400                       		dc.w $B400
0001DB5C                            ; ---------------------------------------------------------------------------
0001DB5C                            ; Pattern load cues - Eggman on SBZ 2
0001DB5C                            ; ---------------------------------------------------------------------------
0001DB5C 0002                       PLC_EggmanSBZ2:	dc.w 2
0001DB5E 0000 0000                  		dc.l Nem_SbzBlock	; block
0001DB62 A300                       		dc.w $A300
0001DB64 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001DB68 8000                       		dc.w $8000
0001DB6A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DB6E 9400                       		dc.w $9400
0001DB70                            ; ---------------------------------------------------------------------------
0001DB70                            ; Pattern load cues - final boss
0001DB70                            ; ---------------------------------------------------------------------------
0001DB70 0004                       PLC_FZBoss:	dc.w 4
0001DB72 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001DB76 7400                       		dc.w $7400
0001DB78 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001DB7C 6000                       		dc.w $6000
0001DB7E 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DB82 8000                       		dc.w $8000
0001DB84 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001DB88 8E00                       		dc.w $8E00
0001DB8A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DB8E A540                       		dc.w $A540
0001DB90                            		even
0001DB90                            		even
0001DB90                            
0001DB90                            		incbin	misc\padding.bin
0001DC7E                            		even
0001DC7E                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E0E0                            		even
0001E0E0                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E1D8                            		even
0001E1D8                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E2EC                            		even
0001E2EC                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F2F8                            		even
0001F2F8                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00020CC6                            		even
00020CC6                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00020CFA                            		even
00020CFA                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00020DB8                            		even
00020DB8                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00021260                            		even
00021260                            ; ---------------------------------------------------------------------------
00021260                            ; Sprite mappings - Sonic
00021260                            ; ---------------------------------------------------------------------------
00021260                            Map_Sonic:
00021260                            	include "_maps\Sonic.asm"
00021260                            Map_9339:
00021260 0000                       Map_9339_0: 	dc.w Map_9339_B0-Map_9339
00021262 0000                       Map_9339_2: 	dc.w Map_9339_B1-Map_9339
00021264 0000                       Map_9339_4: 	dc.w Map_9339_BC-Map_9339
00021266 0000                       Map_9339_6: 	dc.w Map_9339_CC-Map_9339
00021268 0000                       Map_9339_8: 	dc.w Map_9339_DC-Map_9339
0002126A 0000                       Map_9339_A: 	dc.w Map_9339_EC-Map_9339
0002126C 0000                       Map_9339_C: 	dc.w Map_9339_FC-Map_9339
0002126E 0000                       Map_9339_E: 	dc.w Map_9339_111-Map_9339
00021270 0000                       Map_9339_10: 	dc.w Map_9339_11C-Map_9339
00021272 0000                       Map_9339_12: 	dc.w Map_9339_127-Map_9339
00021274 0000                       Map_9339_14: 	dc.w Map_9339_13C-Map_9339
00021276 0000                       Map_9339_16: 	dc.w Map_9339_147-Map_9339
00021278 0000                       Map_9339_18: 	dc.w Map_9339_157-Map_9339
0002127A 0000                       Map_9339_1A: 	dc.w Map_9339_171-Map_9339
0002127C 0000                       Map_9339_1C: 	dc.w Map_9339_190-Map_9339
0002127E 0000                       Map_9339_1E: 	dc.w Map_9339_1A5-Map_9339
00021280 0000                       Map_9339_20: 	dc.w Map_9339_1BF-Map_9339
00021282 0000                       Map_9339_22: 	dc.w Map_9339_1D4-Map_9339
00021284 0000                       Map_9339_24: 	dc.w Map_9339_1EE-Map_9339
00021286 0000                       Map_9339_26: 	dc.w Map_9339_203-Map_9339
00021288 0000                       Map_9339_28: 	dc.w Map_9339_20E-Map_9339
0002128A 0000                       Map_9339_2A: 	dc.w Map_9339_219-Map_9339
0002128C 0000                       Map_9339_2C: 	dc.w Map_9339_22E-Map_9339
0002128E 0000                       Map_9339_2E: 	dc.w Map_9339_239-Map_9339
00021290 0000                       Map_9339_30: 	dc.w Map_9339_249-Map_9339
00021292 0000                       Map_9339_32: 	dc.w Map_9339_268-Map_9339
00021294 0000                       Map_9339_34: 	dc.w Map_9339_287-Map_9339
00021296 0000                       Map_9339_36: 	dc.w Map_9339_29C-Map_9339
00021298 0000                       Map_9339_38: 	dc.w Map_9339_2B6-Map_9339
0002129A 0000                       Map_9339_3A: 	dc.w Map_9339_2CB-Map_9339
0002129C 0000                       Map_9339_3C: 	dc.w Map_9339_2E5-Map_9339
0002129E 0000                       Map_9339_3E: 	dc.w Map_9339_2F0-Map_9339
000212A0 0000                       Map_9339_40: 	dc.w Map_9339_2FB-Map_9339
000212A2 0000                       Map_9339_42: 	dc.w Map_9339_306-Map_9339
000212A4 0000                       Map_9339_44: 	dc.w Map_9339_311-Map_9339
000212A6 0000                       Map_9339_46: 	dc.w Map_9339_326-Map_9339
000212A8 0000                       Map_9339_48: 	dc.w Map_9339_336-Map_9339
000212AA 0000                       Map_9339_4A: 	dc.w Map_9339_34B-Map_9339
000212AC 0000                       Map_9339_4C: 	dc.w Map_9339_35B-Map_9339
000212AE 0000                       Map_9339_4E: 	dc.w Map_9339_366-Map_9339
000212B0 0000                       Map_9339_50: 	dc.w Map_9339_371-Map_9339
000212B2 0000                       Map_9339_52: 	dc.w Map_9339_37C-Map_9339
000212B4 0000                       Map_9339_54: 	dc.w Map_9339_387-Map_9339
000212B6 0000                       Map_9339_56: 	dc.w Map_9339_39C-Map_9339
000212B8 0000                       Map_9339_58: 	dc.w Map_9339_3A7-Map_9339
000212BA 0000                       Map_9339_5A: 	dc.w Map_9339_3BC-Map_9339
000212BC 0000                       Map_9339_5C: 	dc.w Map_9339_3C7-Map_9339
000212BE 0000                       Map_9339_5E: 	dc.w Map_9339_3CD-Map_9339
000212C0 0000                       Map_9339_60: 	dc.w Map_9339_3D3-Map_9339
000212C2 0000                       Map_9339_62: 	dc.w Map_9339_3D9-Map_9339
000212C4 0000                       Map_9339_64: 	dc.w Map_9339_3DF-Map_9339
000212C6 0000                       Map_9339_66: 	dc.w Map_9339_3E5-Map_9339
000212C8 0000                       Map_9339_68: 	dc.w Map_9339_3F0-Map_9339
000212CA 0000                       Map_9339_6A: 	dc.w Map_9339_3F6-Map_9339
000212CC 0000                       Map_9339_6C: 	dc.w Map_9339_401-Map_9339
000212CE 0000                       Map_9339_6E: 	dc.w Map_9339_407-Map_9339
000212D0 0000                       Map_9339_70: 	dc.w Map_9339_412-Map_9339
000212D2 0000                       Map_9339_72: 	dc.w Map_9339_427-Map_9339
000212D4 0000                       Map_9339_74: 	dc.w Map_9339_43C-Map_9339
000212D6 0000                       Map_9339_76: 	dc.w Map_9339_44C-Map_9339
000212D8 0000                       Map_9339_78: 	dc.w Map_9339_45C-Map_9339
000212DA 0000                       Map_9339_7A: 	dc.w Map_9339_46C-Map_9339
000212DC 0000                       Map_9339_7C: 	dc.w Map_9339_477-Map_9339
000212DE 0000                       Map_9339_7E: 	dc.w Map_9339_487-Map_9339
000212E0 0000                       Map_9339_80: 	dc.w Map_9339_497-Map_9339
000212E2 0000                       Map_9339_82: 	dc.w Map_9339_4A7-Map_9339
000212E4 0000                       Map_9339_84: 	dc.w Map_9339_4BC-Map_9339
000212E6 0000                       Map_9339_86: 	dc.w Map_9339_4D1-Map_9339
000212E8 0000                       Map_9339_88: 	dc.w Map_9339_4EB-Map_9339
000212EA 0000                       Map_9339_8A: 	dc.w Map_9339_505-Map_9339
000212EC 0000                       Map_9339_8C: 	dc.w Map_9339_510-Map_9339
000212EE 0000                       Map_9339_8E: 	dc.w Map_9339_520-Map_9339
000212F0 0000                       Map_9339_90: 	dc.w Map_9339_52B-Map_9339
000212F2 0000                       Map_9339_92: 	dc.w Map_9339_53B-Map_9339
000212F4 0000                       Map_9339_94: 	dc.w Map_9339_546-Map_9339
000212F6 0000                       Map_9339_96: 	dc.w Map_9339_556-Map_9339
000212F8 0000                       Map_9339_98: 	dc.w Map_9339_566-Map_9339
000212FA 0000                       Map_9339_9A: 	dc.w Map_9339_580-Map_9339
000212FC 0000                       Map_9339_9C: 	dc.w Map_9339_59A-Map_9339
000212FE 0000                       Map_9339_9E: 	dc.w Map_9339_5A5-Map_9339
00021300 0000                       Map_9339_A0: 	dc.w Map_9339_5B5-Map_9339
00021302 0000                       Map_9339_A2: 	dc.w Map_9339_5BB-Map_9339
00021304 0000                       Map_9339_A4: 	dc.w Map_9339_5C1-Map_9339
00021306 0000                       Map_9339_A6: 	dc.w Map_9339_5C7-Map_9339
00021308 0000                       Map_9339_A8: 	dc.w Map_9339_5D7-Map_9339
0002130A 0000                       Map_9339_AA: 	dc.w Map_9339_5E7-Map_9339
0002130C 0000                       Map_9339_AC: 	dc.w Map_9339_5F7-Map_9339
0002130E 0000                       Map_9339_AE: 	dc.w Map_9339_607-Map_9339
00021310 00                         Map_9339_B0: 	dc.b $0
00021311 02                         Map_9339_B1: 	dc.b $2
00021312 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00021317 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
0002131C 03                         Map_9339_BC: 	dc.b $3
0002131D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00021322 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00021327 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002132C 03                         Map_9339_CC: 	dc.b $3
0002132D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00021332 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00021337 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002133C 03                         Map_9339_DC: 	dc.b $3
0002133D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00021342 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00021347 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002134C 03                         Map_9339_EC: 	dc.b $3
0002134D EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00021352 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00021357 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002135C 04                         Map_9339_FC: 	dc.b $4
0002135D EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00021362 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00021367 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
0002136C 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00021371 02                         Map_9339_111: 	dc.b $2
00021372 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00021377 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
0002137C 02                         Map_9339_11C: 	dc.b $2
0002137D ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00021382 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00021387 04                         Map_9339_127: 	dc.b $4
00021388 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002138D FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00021392 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00021397 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
0002139C 02                         Map_9339_13C: 	dc.b $2
0002139D EC09 0000 F3               	dc.b $EC, $9, $0, $0, $F3
000213A2 FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
000213A7 03                         Map_9339_147: 	dc.b $3
000213A8 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
000213AD FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
000213B2 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
000213B7 05                         Map_9339_157: 	dc.b $5
000213B8 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000213BD EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
000213C2 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
000213C7 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
000213CC 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
000213D1 06                         Map_9339_171: 	dc.b $6
000213D2 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000213D7 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000213DC FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
000213E1 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
000213E6 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
000213EB F400 0016 14               	dc.b $F4, $0, $0, $16, $14
000213F0 04                         Map_9339_190: 	dc.b $4
000213F1 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000213F6 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000213FB FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00021400 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00021405 05                         Map_9339_1A5: 	dc.b $5
00021406 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
0002140B EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00021410 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00021415 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
0002141A 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
0002141F 04                         Map_9339_1BF: 	dc.b $4
00021420 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00021425 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
0002142A FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
0002142F 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00021434 05                         Map_9339_1D4: 	dc.b $5
00021435 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
0002143A ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
0002143F FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00021444 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00021449 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
0002144E 04                         Map_9339_1EE: 	dc.b $4
0002144F F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00021454 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00021459 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
0002145E 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00021463 02                         Map_9339_203: 	dc.b $2
00021464 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00021469 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
0002146E 02                         Map_9339_20E: 	dc.b $2
0002146F F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00021474 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00021479 04                         Map_9339_219: 	dc.b $4
0002147A F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
0002147F EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00021484 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00021489 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
0002148E 02                         Map_9339_22E: 	dc.b $2
0002148F F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00021494 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00021499 03                         Map_9339_239: 	dc.b $3
0002149A F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
0002149F EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
000214A4 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
000214A9 06                         Map_9339_249: 	dc.b $6
000214AA FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000214AF ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
000214B4 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
000214B9 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
000214BE 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
000214C3 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
000214C8 06                         Map_9339_268: 	dc.b $6
000214C9 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000214CE E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
000214D3 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
000214D8 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
000214DD F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
000214E2 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
000214E7 04                         Map_9339_287: 	dc.b $4
000214E8 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000214ED F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
000214F2 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
000214F7 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000214FC 05                         Map_9339_29C: 	dc.b $5
000214FD FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00021502 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00021507 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
0002150C F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00021511 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00021516 04                         Map_9339_2B6: 	dc.b $4
00021517 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002151C F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00021521 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00021526 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
0002152B 05                         Map_9339_2CB: 	dc.b $5
0002152C FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00021531 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00021536 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
0002153B 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00021540 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00021545 02                         Map_9339_2E5: 	dc.b $2
00021546 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002154B FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00021550 02                         Map_9339_2F0: 	dc.b $2
00021551 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00021556 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002155B 02                         Map_9339_2FB: 	dc.b $2
0002155C EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00021561 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00021566 02                         Map_9339_306: 	dc.b $2
00021567 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002156C FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00021571 04                         Map_9339_311: 	dc.b $4
00021572 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00021577 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002157C FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00021581 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00021586 03                         Map_9339_326: 	dc.b $3
00021587 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002158C EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00021591 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00021596 04                         Map_9339_336: 	dc.b $4
00021597 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002159C EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000215A1 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000215A6 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000215AB 03                         Map_9339_34B: 	dc.b $3
000215AC EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000215B1 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000215B6 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000215BB 02                         Map_9339_35B: 	dc.b $2
000215BC F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000215C1 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000215C6 02                         Map_9339_366: 	dc.b $2
000215C7 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000215CC F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000215D1 02                         Map_9339_371: 	dc.b $2
000215D2 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000215D7 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000215DC 02                         Map_9339_37C: 	dc.b $2
000215DD F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000215E2 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000215E7 04                         Map_9339_387: 	dc.b $4
000215E8 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000215ED F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000215F2 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000215F7 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000215FC 02                         Map_9339_39C: 	dc.b $2
000215FD F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00021602 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00021607 04                         Map_9339_3A7: 	dc.b $4
00021608 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
0002160D F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00021612 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00021617 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
0002161C 02                         Map_9339_3BC: 	dc.b $2
0002161D F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00021622 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00021627 01                         Map_9339_3C7: 	dc.b $1
00021628 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002162D 01                         Map_9339_3CD: 	dc.b $1
0002162E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00021633 01                         Map_9339_3D3: 	dc.b $1
00021634 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00021639 01                         Map_9339_3D9: 	dc.b $1
0002163A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002163F 01                         Map_9339_3DF: 	dc.b $1
00021640 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00021645 02                         Map_9339_3E5: 	dc.b $2
00021646 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
0002164B F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00021650 01                         Map_9339_3F0: 	dc.b $1
00021651 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00021656 02                         Map_9339_3F6: 	dc.b $2
00021657 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002165C 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00021661 01                         Map_9339_401: 	dc.b $1
00021662 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00021667 02                         Map_9339_407: 	dc.b $2
00021668 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
0002166D FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00021672 04                         Map_9339_412: 	dc.b $4
00021673 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00021678 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
0002167D 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00021682 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00021687 04                         Map_9339_427: 	dc.b $4
00021688 F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
0002168D FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
00021692 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00021697 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
0002169C 03                         Map_9339_43C: 	dc.b $3
0002169D EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
000216A2 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
000216A7 F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
000216AC 03                         Map_9339_44C: 	dc.b $3
000216AD EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
000216B2 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
000216B7 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
000216BC 03                         Map_9339_45C: 	dc.b $3
000216BD F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000216C2 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
000216C7 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
000216CC 02                         Map_9339_46C: 	dc.b $2
000216CD F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
000216D2 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
000216D7 03                         Map_9339_477: 	dc.b $3
000216D8 F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
000216DD FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
000216E2 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
000216E7 03                         Map_9339_487: 	dc.b $3
000216E8 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000216ED FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
000216F2 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
000216F7 03                         Map_9339_497: 	dc.b $3
000216F8 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
000216FD 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00021702 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00021707 04                         Map_9339_4A7: 	dc.b $4
00021708 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002170D 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00021712 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00021717 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002171C 04                         Map_9339_4BC: 	dc.b $4
0002171D F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00021722 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00021727 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002172C F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00021731 05                         Map_9339_4D1: 	dc.b $5
00021732 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00021737 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002173C 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00021741 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00021746 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002174B 05                         Map_9339_4EB: 	dc.b $5
0002174C E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00021751 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00021756 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002175B 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00021760 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00021765 02                         Map_9339_505: 	dc.b $2
00021766 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002176B 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00021770 03                         Map_9339_510: 	dc.b $3
00021771 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00021776 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002177B 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00021780 02                         Map_9339_520: 	dc.b $2
00021781 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00021786 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002178B 03                         Map_9339_52B: 	dc.b $3
0002178C EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00021791 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00021796 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002179B 02                         Map_9339_53B: 	dc.b $2
0002179C EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000217A1 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000217A6 03                         Map_9339_546: 	dc.b $3
000217A7 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000217AC 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000217B1 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000217B6 03                         Map_9339_556: 	dc.b $3
000217B7 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000217BC E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000217C1 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
000217C6 05                         Map_9339_566: 	dc.b $5
000217C7 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000217CC E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000217D1 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000217D6 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000217DB 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000217E0 05                         Map_9339_580: 	dc.b $5
000217E1 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000217E6 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000217EB F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000217F0 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000217F5 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000217FA 02                         Map_9339_59A: 	dc.b $2
000217FB EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00021800 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00021805 03                         Map_9339_5A5: 	dc.b $3
00021806 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002180B F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00021810 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00021815 01                         Map_9339_5B5: 	dc.b $1
00021816 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002181B 01                         Map_9339_5BB: 	dc.b $1
0002181C F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00021821 01                         Map_9339_5C1: 	dc.b $1
00021822 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00021827 03                         Map_9339_5C7: 	dc.b $3
00021828 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002182D FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
00021832 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
00021837 03                         Map_9339_5D7: 	dc.b $3
00021838 F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
0002183D FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
00021842 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00021847 03                         Map_9339_5E7: 	dc.b $3
00021848 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
0002184D F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00021852 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00021857 03                         Map_9339_5F7: 	dc.b $3
00021858 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002185D FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00021862 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00021867 02                         Map_9339_607: 	dc.b $2
00021868 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
0002186D F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00021872                            	even
00021872                            	even
00021872                            
00021872                            ; ---------------------------------------------------------------------------
00021872                            ; Uncompressed graphics	loading	array for Sonic
00021872                            ; ---------------------------------------------------------------------------
00021872                            SonicDynPLC:
00021872                            	include "_inc\Sonic dynamic pattern load cues.asm"
00021872                            DPLC_3959:
00021872 0000                       DPLC_3959_0: 	dc.w DPLC_3959_B0-DPLC_3959
00021874 0000                       DPLC_3959_2: 	dc.w DPLC_3959_B1-DPLC_3959
00021876 0000                       DPLC_3959_4: 	dc.w DPLC_3959_B6-DPLC_3959
00021878 0000                       DPLC_3959_6: 	dc.w DPLC_3959_BD-DPLC_3959
0002187A 0000                       DPLC_3959_8: 	dc.w DPLC_3959_C4-DPLC_3959
0002187C 0000                       DPLC_3959_A: 	dc.w DPLC_3959_CB-DPLC_3959
0002187E 0000                       DPLC_3959_C: 	dc.w DPLC_3959_D2-DPLC_3959
00021880 0000                       DPLC_3959_E: 	dc.w DPLC_3959_DB-DPLC_3959
00021882 0000                       DPLC_3959_10: 	dc.w DPLC_3959_E0-DPLC_3959
00021884 0000                       DPLC_3959_12: 	dc.w DPLC_3959_E5-DPLC_3959
00021886 0000                       DPLC_3959_14: 	dc.w DPLC_3959_EE-DPLC_3959
00021888 0000                       DPLC_3959_16: 	dc.w DPLC_3959_F3-DPLC_3959
0002188A 0000                       DPLC_3959_18: 	dc.w DPLC_3959_FA-DPLC_3959
0002188C 0000                       DPLC_3959_1A: 	dc.w DPLC_3959_105-DPLC_3959
0002188E 0000                       DPLC_3959_1C: 	dc.w DPLC_3959_112-DPLC_3959
00021890 0000                       DPLC_3959_1E: 	dc.w DPLC_3959_11B-DPLC_3959
00021892 0000                       DPLC_3959_20: 	dc.w DPLC_3959_126-DPLC_3959
00021894 0000                       DPLC_3959_22: 	dc.w DPLC_3959_12F-DPLC_3959
00021896 0000                       DPLC_3959_24: 	dc.w DPLC_3959_13A-DPLC_3959
00021898 0000                       DPLC_3959_26: 	dc.w DPLC_3959_143-DPLC_3959
0002189A 0000                       DPLC_3959_28: 	dc.w DPLC_3959_148-DPLC_3959
0002189C 0000                       DPLC_3959_2A: 	dc.w DPLC_3959_14D-DPLC_3959
0002189E 0000                       DPLC_3959_2C: 	dc.w DPLC_3959_156-DPLC_3959
000218A0 0000                       DPLC_3959_2E: 	dc.w DPLC_3959_15B-DPLC_3959
000218A2 0000                       DPLC_3959_30: 	dc.w DPLC_3959_162-DPLC_3959
000218A4 0000                       DPLC_3959_32: 	dc.w DPLC_3959_16F-DPLC_3959
000218A6 0000                       DPLC_3959_34: 	dc.w DPLC_3959_17C-DPLC_3959
000218A8 0000                       DPLC_3959_36: 	dc.w DPLC_3959_185-DPLC_3959
000218AA 0000                       DPLC_3959_38: 	dc.w DPLC_3959_190-DPLC_3959
000218AC 0000                       DPLC_3959_3A: 	dc.w DPLC_3959_199-DPLC_3959
000218AE 0000                       DPLC_3959_3C: 	dc.w DPLC_3959_1A4-DPLC_3959
000218B0 0000                       DPLC_3959_3E: 	dc.w DPLC_3959_1A9-DPLC_3959
000218B2 0000                       DPLC_3959_40: 	dc.w DPLC_3959_1AE-DPLC_3959
000218B4 0000                       DPLC_3959_42: 	dc.w DPLC_3959_1B3-DPLC_3959
000218B6 0000                       DPLC_3959_44: 	dc.w DPLC_3959_1B8-DPLC_3959
000218B8 0000                       DPLC_3959_46: 	dc.w DPLC_3959_1C1-DPLC_3959
000218BA 0000                       DPLC_3959_48: 	dc.w DPLC_3959_1C8-DPLC_3959
000218BC 0000                       DPLC_3959_4A: 	dc.w DPLC_3959_1D1-DPLC_3959
000218BE 0000                       DPLC_3959_4C: 	dc.w DPLC_3959_1D8-DPLC_3959
000218C0 0000                       DPLC_3959_4E: 	dc.w DPLC_3959_1DD-DPLC_3959
000218C2 0000                       DPLC_3959_50: 	dc.w DPLC_3959_1E2-DPLC_3959
000218C4 0000                       DPLC_3959_52: 	dc.w DPLC_3959_1E7-DPLC_3959
000218C6 0000                       DPLC_3959_54: 	dc.w DPLC_3959_1EC-DPLC_3959
000218C8 0000                       DPLC_3959_56: 	dc.w DPLC_3959_1F5-DPLC_3959
000218CA 0000                       DPLC_3959_58: 	dc.w DPLC_3959_1FA-DPLC_3959
000218CC 0000                       DPLC_3959_5A: 	dc.w DPLC_3959_203-DPLC_3959
000218CE 0000                       DPLC_3959_5C: 	dc.w DPLC_3959_208-DPLC_3959
000218D0 0000                       DPLC_3959_5E: 	dc.w DPLC_3959_20B-DPLC_3959
000218D2 0000                       DPLC_3959_60: 	dc.w DPLC_3959_20E-DPLC_3959
000218D4 0000                       DPLC_3959_62: 	dc.w DPLC_3959_211-DPLC_3959
000218D6 0000                       DPLC_3959_64: 	dc.w DPLC_3959_214-DPLC_3959
000218D8 0000                       DPLC_3959_66: 	dc.w DPLC_3959_217-DPLC_3959
000218DA 0000                       DPLC_3959_68: 	dc.w DPLC_3959_21C-DPLC_3959
000218DC 0000                       DPLC_3959_6A: 	dc.w DPLC_3959_21F-DPLC_3959
000218DE 0000                       DPLC_3959_6C: 	dc.w DPLC_3959_224-DPLC_3959
000218E0 0000                       DPLC_3959_6E: 	dc.w DPLC_3959_227-DPLC_3959
000218E2 0000                       DPLC_3959_70: 	dc.w DPLC_3959_22C-DPLC_3959
000218E4 0000                       DPLC_3959_72: 	dc.w DPLC_3959_235-DPLC_3959
000218E6 0000                       DPLC_3959_74: 	dc.w DPLC_3959_23E-DPLC_3959
000218E8 0000                       DPLC_3959_76: 	dc.w DPLC_3959_245-DPLC_3959
000218EA 0000                       DPLC_3959_78: 	dc.w DPLC_3959_24C-DPLC_3959
000218EC 0000                       DPLC_3959_7A: 	dc.w DPLC_3959_253-DPLC_3959
000218EE 0000                       DPLC_3959_7C: 	dc.w DPLC_3959_256-DPLC_3959
000218F0 0000                       DPLC_3959_7E: 	dc.w DPLC_3959_25D-DPLC_3959
000218F2 0000                       DPLC_3959_80: 	dc.w DPLC_3959_264-DPLC_3959
000218F4 0000                       DPLC_3959_82: 	dc.w DPLC_3959_26B-DPLC_3959
000218F6 0000                       DPLC_3959_84: 	dc.w DPLC_3959_274-DPLC_3959
000218F8 0000                       DPLC_3959_86: 	dc.w DPLC_3959_27D-DPLC_3959
000218FA 0000                       DPLC_3959_88: 	dc.w DPLC_3959_288-DPLC_3959
000218FC 0000                       DPLC_3959_8A: 	dc.w DPLC_3959_293-DPLC_3959
000218FE 0000                       DPLC_3959_8C: 	dc.w DPLC_3959_298-DPLC_3959
00021900 0000                       DPLC_3959_8E: 	dc.w DPLC_3959_29F-DPLC_3959
00021902 0000                       DPLC_3959_90: 	dc.w DPLC_3959_2A4-DPLC_3959
00021904 0000                       DPLC_3959_92: 	dc.w DPLC_3959_2AB-DPLC_3959
00021906 0000                       DPLC_3959_94: 	dc.w DPLC_3959_2B0-DPLC_3959
00021908 0000                       DPLC_3959_96: 	dc.w DPLC_3959_2B7-DPLC_3959
0002190A 0000                       DPLC_3959_98: 	dc.w DPLC_3959_2BE-DPLC_3959
0002190C 0000                       DPLC_3959_9A: 	dc.w DPLC_3959_2C9-DPLC_3959
0002190E 0000                       DPLC_3959_9C: 	dc.w DPLC_3959_2D4-DPLC_3959
00021910 0000                       DPLC_3959_9E: 	dc.w DPLC_3959_2D9-DPLC_3959
00021912 0000                       DPLC_3959_A0: 	dc.w DPLC_3959_2E0-DPLC_3959
00021914 0000                       DPLC_3959_A2: 	dc.w DPLC_3959_2E3-DPLC_3959
00021916 0000                       DPLC_3959_A4: 	dc.w DPLC_3959_2E6-DPLC_3959
00021918 0000                       DPLC_3959_A6: 	dc.w DPLC_3959_2E9-DPLC_3959
0002191A 0000                       DPLC_3959_A8: 	dc.w DPLC_3959_2F0-DPLC_3959
0002191C 0000                       DPLC_3959_AA: 	dc.w DPLC_3959_2F7-DPLC_3959
0002191E 0000                       DPLC_3959_AC: 	dc.w DPLC_3959_2FE-DPLC_3959
00021920 0000                       DPLC_3959_AE: 	dc.w DPLC_3959_305-DPLC_3959
00021922 00                         DPLC_3959_B0: 	dc.b $0
00021923 02                         DPLC_3959_B1: 	dc.b $2
00021924 F000                       	dc.b $F0, $0
00021926 1010                       	dc.b $10, $10
00021928 03                         DPLC_3959_B6: 	dc.b $3
00021929 5012                       	dc.b $50, $12
0002192B 5018                       	dc.b $50, $18
0002192D 201E                       	dc.b $20, $1E
0002192F 03                         DPLC_3959_BD: 	dc.b $3
00021930 5021                       	dc.b $50, $21
00021932 5018                       	dc.b $50, $18
00021934 201E                       	dc.b $20, $1E
00021936 03                         DPLC_3959_C4: 	dc.b $3
00021937 5021                       	dc.b $50, $21
00021939 5018                       	dc.b $50, $18
0002193B 2027                       	dc.b $20, $27
0002193D 03                         DPLC_3959_CB: 	dc.b $3
0002193E 802A                       	dc.b $80, $2A
00021940 2033                       	dc.b $20, $33
00021942 2036                       	dc.b $20, $36
00021944 04                         DPLC_3959_D2: 	dc.b $4
00021945 7039                       	dc.b $70, $39
00021947 5041                       	dc.b $50, $41
00021949 5047                       	dc.b $50, $47
0002194B 104D                       	dc.b $10, $4D
0002194D 02                         DPLC_3959_DB: 	dc.b $2
0002194E 7039                       	dc.b $70, $39
00021950 B04F                       	dc.b $B0, $4F
00021952 02                         DPLC_3959_E0: 	dc.b $2
00021953 505B                       	dc.b $50, $5B
00021955 8061                       	dc.b $80, $61
00021957 04                         DPLC_3959_E5: 	dc.b $4
00021958 505B                       	dc.b $50, $5B
0002195A 506A                       	dc.b $50, $6A
0002195C 5070                       	dc.b $50, $70
0002195E 1076                       	dc.b $10, $76
00021960 02                         DPLC_3959_EE: 	dc.b $2
00021961 505B                       	dc.b $50, $5B
00021963 B078                       	dc.b $B0, $78
00021965 03                         DPLC_3959_F3: 	dc.b $3
00021966 7039                       	dc.b $70, $39
00021968 3084                       	dc.b $30, $84
0002196A 5088                       	dc.b $50, $88
0002196C 05                         DPLC_3959_FA: 	dc.b $5
0002196D 508E                       	dc.b $50, $8E
0002196F 5094                       	dc.b $50, $94
00021971 209A                       	dc.b $20, $9A
00021973 509D                       	dc.b $50, $9D
00021975 00A3                       	dc.b $0, $A3
00021977 06                         DPLC_3959_105: 	dc.b $6
00021978 508E                       	dc.b $50, $8E
0002197A 10A4                       	dc.b $10, $A4
0002197C 30A6                       	dc.b $30, $A6
0002197E 50AA                       	dc.b $50, $AA
00021980 30B0                       	dc.b $30, $B0
00021982 00B4                       	dc.b $0, $B4
00021984 04                         DPLC_3959_112: 	dc.b $4
00021985 50B5                       	dc.b $50, $B5
00021987 10BB                       	dc.b $10, $BB
00021989 70BD                       	dc.b $70, $BD
0002198B 20C5                       	dc.b $20, $C5
0002198D 05                         DPLC_3959_11B: 	dc.b $5
0002198E 50C8                       	dc.b $50, $C8
00021990 30CE                       	dc.b $30, $CE
00021992 70D2                       	dc.b $70, $D2
00021994 20DA                       	dc.b $20, $DA
00021996 10DD                       	dc.b $10, $DD
00021998 04                         DPLC_3959_126: 	dc.b $4
00021999 50C8                       	dc.b $50, $C8
0002199B 10DF                       	dc.b $10, $DF
0002199D 70E1                       	dc.b $70, $E1
0002199F 20E9                       	dc.b $20, $E9
000219A1 05                         DPLC_3959_12F: 	dc.b $5
000219A2 508E                       	dc.b $50, $8E
000219A4 10A4                       	dc.b $10, $A4
000219A6 009A                       	dc.b $0, $9A
000219A8 70EC                       	dc.b $70, $EC
000219AA 20F4                       	dc.b $20, $F4
000219AC 04                         DPLC_3959_13A: 	dc.b $4
000219AD 70F7                       	dc.b $70, $F7
000219AF 50FF                       	dc.b $50, $FF
000219B1 1105                       	dc.b $11, $5
000219B3 5107                       	dc.b $51, $7
000219B5 02                         DPLC_3959_143: 	dc.b $2
000219B6 70F7                       	dc.b $70, $F7
000219B8 B10D                       	dc.b $B1, $D
000219BA 02                         DPLC_3959_148: 	dc.b $2
000219BB 5119                       	dc.b $51, $19
000219BD 811F                       	dc.b $81, $1F
000219BF 04                         DPLC_3959_14D: 	dc.b $4
000219C0 5119                       	dc.b $51, $19
000219C2 5128                       	dc.b $51, $28
000219C4 112E                       	dc.b $11, $2E
000219C6 5130                       	dc.b $51, $30
000219C8 02                         DPLC_3959_156: 	dc.b $2
000219C9 5119                       	dc.b $51, $19
000219CB B136                       	dc.b $B1, $36
000219CD 03                         DPLC_3959_15B: 	dc.b $3
000219CE 70F7                       	dc.b $70, $F7
000219D0 010D                       	dc.b $1, $D
000219D2 8142                       	dc.b $81, $42
000219D4 06                         DPLC_3959_162: 	dc.b $6
000219D5 514B                       	dc.b $51, $4B
000219D7 1151                       	dc.b $11, $51
000219D9 1153                       	dc.b $11, $53
000219DB 8155                       	dc.b $81, $55
000219DD 015E                       	dc.b $1, $5E
000219DF 015F                       	dc.b $1, $5F
000219E1 06                         DPLC_3959_16F: 	dc.b $6
000219E2 514B                       	dc.b $51, $4B
000219E4 2160                       	dc.b $21, $60
000219E6 1163                       	dc.b $11, $63
000219E8 1165                       	dc.b $11, $65
000219EA 8167                       	dc.b $81, $67
000219EC 015E                       	dc.b $1, $5E
000219EE 04                         DPLC_3959_17C: 	dc.b $4
000219EF 5170                       	dc.b $51, $70
000219F1 1176                       	dc.b $11, $76
000219F3 8178                       	dc.b $81, $78
000219F5 1181                       	dc.b $11, $81
000219F7 05                         DPLC_3959_185: 	dc.b $5
000219F8 5183                       	dc.b $51, $83
000219FA 2189                       	dc.b $21, $89
000219FC 118C                       	dc.b $11, $8C
000219FE 718E                       	dc.b $71, $8E
00021A00 2196                       	dc.b $21, $96
00021A02 04                         DPLC_3959_190: 	dc.b $4
00021A03 5183                       	dc.b $51, $83
00021A05 1199                       	dc.b $11, $99
00021A07 819B                       	dc.b $81, $9B
00021A09 11A4                       	dc.b $11, $A4
00021A0B 05                         DPLC_3959_199: 	dc.b $5
00021A0C 514B                       	dc.b $51, $4B
00021A0E 81A6                       	dc.b $81, $A6
00021A10 1165                       	dc.b $11, $65
00021A12 11AF                       	dc.b $11, $AF
00021A14 015E                       	dc.b $1, $5E
00021A16 02                         DPLC_3959_1A4: 	dc.b $2
00021A17 51B1                       	dc.b $51, $B1
00021A19 B1B7                       	dc.b $B1, $B7
00021A1B 02                         DPLC_3959_1A9: 	dc.b $2
00021A1C 505B                       	dc.b $50, $5B
00021A1E B1C3                       	dc.b $B1, $C3
00021A20 02                         DPLC_3959_1AE: 	dc.b $2
00021A21 51B1                       	dc.b $51, $B1
00021A23 B1CF                       	dc.b $B1, $CF
00021A25 02                         DPLC_3959_1B3: 	dc.b $2
00021A26 505B                       	dc.b $50, $5B
00021A28 B1DB                       	dc.b $B1, $DB
00021A2A 04                         DPLC_3959_1B8: 	dc.b $4
00021A2B 51E7                       	dc.b $51, $E7
00021A2D 11ED                       	dc.b $11, $ED
00021A2F B1EF                       	dc.b $B1, $EF
00021A31 01FB                       	dc.b $1, $FB
00021A33 03                         DPLC_3959_1C1: 	dc.b $3
00021A34 51FC                       	dc.b $51, $FC
00021A36 1202                       	dc.b $12, $2
00021A38 B204                       	dc.b $B2, $4
00021A3A 04                         DPLC_3959_1C8: 	dc.b $4
00021A3B 51E7                       	dc.b $51, $E7
00021A3D 1210                       	dc.b $12, $10
00021A3F B212                       	dc.b $B2, $12
00021A41 01FB                       	dc.b $1, $FB
00021A43 03                         DPLC_3959_1D1: 	dc.b $3
00021A44 51FC                       	dc.b $51, $FC
00021A46 1202                       	dc.b $12, $2
00021A48 B21E                       	dc.b $B2, $1E
00021A4A 02                         DPLC_3959_1D8: 	dc.b $2
00021A4B 522A                       	dc.b $52, $2A
00021A4D B230                       	dc.b $B2, $30
00021A4F 02                         DPLC_3959_1DD: 	dc.b $2
00021A50 5119                       	dc.b $51, $19
00021A52 B23C                       	dc.b $B2, $3C
00021A54 02                         DPLC_3959_1E2: 	dc.b $2
00021A55 522A                       	dc.b $52, $2A
00021A57 B248                       	dc.b $B2, $48
00021A59 02                         DPLC_3959_1E7: 	dc.b $2
00021A5A 5119                       	dc.b $51, $19
00021A5C B254                       	dc.b $B2, $54
00021A5E 04                         DPLC_3959_1EC: 	dc.b $4
00021A5F 5260                       	dc.b $52, $60
00021A61 1266                       	dc.b $12, $66
00021A63 B268                       	dc.b $B2, $68
00021A65 0274                       	dc.b $2, $74
00021A67 02                         DPLC_3959_1F5: 	dc.b $2
00021A68 7275                       	dc.b $72, $75
00021A6A B27D                       	dc.b $B2, $7D
00021A6C 04                         DPLC_3959_1FA: 	dc.b $4
00021A6D 5260                       	dc.b $52, $60
00021A6F 1289                       	dc.b $12, $89
00021A71 B28B                       	dc.b $B2, $8B
00021A73 0274                       	dc.b $2, $74
00021A75 02                         DPLC_3959_203: 	dc.b $2
00021A76 7275                       	dc.b $72, $75
00021A78 B297                       	dc.b $B2, $97
00021A7A 01                         DPLC_3959_208: 	dc.b $1
00021A7B F2A3                       	dc.b $F2, $A3
00021A7D 01                         DPLC_3959_20B: 	dc.b $1
00021A7E F2B3                       	dc.b $F2, $B3
00021A80 01                         DPLC_3959_20E: 	dc.b $1
00021A81 F2C3                       	dc.b $F2, $C3
00021A83 01                         DPLC_3959_211: 	dc.b $1
00021A84 F2D3                       	dc.b $F2, $D3
00021A86 01                         DPLC_3959_214: 	dc.b $1
00021A87 F2E3                       	dc.b $F2, $E3
00021A89 02                         DPLC_3959_217: 	dc.b $2
00021A8A B2F3                       	dc.b $B2, $F3
00021A8C 22FF                       	dc.b $22, $FF
00021A8E 01                         DPLC_3959_21C: 	dc.b $1
00021A8F F302                       	dc.b $F3, $2
00021A91 02                         DPLC_3959_21F: 	dc.b $2
00021A92 B312                       	dc.b $B3, $12
00021A94 231E                       	dc.b $23, $1E
00021A96 01                         DPLC_3959_224: 	dc.b $1
00021A97 F321                       	dc.b $F3, $21
00021A99 02                         DPLC_3959_227: 	dc.b $2
00021A9A 5331                       	dc.b $53, $31
00021A9C B337                       	dc.b $B3, $37
00021A9E 04                         DPLC_3959_22C: 	dc.b $4
00021A9F 5343                       	dc.b $53, $43
00021AA1 7349                       	dc.b $73, $49
00021AA3 1351                       	dc.b $13, $51
00021AA5 0353                       	dc.b $3, $53
00021AA7 04                         DPLC_3959_235: 	dc.b $4
00021AA8 1354                       	dc.b $13, $54
00021AAA 7356                       	dc.b $73, $56
00021AAC 235E                       	dc.b $23, $5E
00021AAE 0361                       	dc.b $3, $61
00021AB0 03                         DPLC_3959_23E: 	dc.b $3
00021AB1 2362                       	dc.b $23, $62
00021AB3 2365                       	dc.b $23, $65
00021AB5 F368                       	dc.b $F3, $68
00021AB7 03                         DPLC_3959_245: 	dc.b $3
00021AB8 B378                       	dc.b $B3, $78
00021ABA 7384                       	dc.b $73, $84
00021ABC 0078                       	dc.b $0, $78
00021ABE 03                         DPLC_3959_24C: 	dc.b $3
00021ABF 738C                       	dc.b $73, $8C
00021AC1 3394                       	dc.b $33, $94
00021AC3 2398                       	dc.b $23, $98
00021AC5 01                         DPLC_3959_253: 	dc.b $1
00021AC6 839B                       	dc.b $83, $9B
00021AC8 03                         DPLC_3959_256: 	dc.b $3
00021AC9 73A4                       	dc.b $73, $A4
00021ACB 03AC                       	dc.b $3, $AC
00021ACD 33AD                       	dc.b $33, $AD
00021ACF 03                         DPLC_3959_25D: 	dc.b $3
00021AD0 73B1                       	dc.b $73, $B1
00021AD2 33B9                       	dc.b $33, $B9
00021AD4 23BD                       	dc.b $23, $BD
00021AD6 03                         DPLC_3959_264: 	dc.b $3
00021AD7 B3C0                       	dc.b $B3, $C0
00021AD9 13CC                       	dc.b $13, $CC
00021ADB 03CE                       	dc.b $3, $CE
00021ADD 04                         DPLC_3959_26B: 	dc.b $4
00021ADE B3CF                       	dc.b $B3, $CF
00021AE0 33DB                       	dc.b $33, $DB
00021AE2 03DF                       	dc.b $3, $DF
00021AE4 03E0                       	dc.b $3, $E0
00021AE6 04                         DPLC_3959_274: 	dc.b $4
00021AE7 B3E1                       	dc.b $B3, $E1
00021AE9 33ED                       	dc.b $33, $ED
00021AEB 03F1                       	dc.b $3, $F1
00021AED 03F2                       	dc.b $3, $F2
00021AEF 05                         DPLC_3959_27D: 	dc.b $5
00021AF0 83F3                       	dc.b $83, $F3
00021AF2 13FC                       	dc.b $13, $FC
00021AF4 53FE                       	dc.b $53, $FE
00021AF6 1404                       	dc.b $14, $4
00021AF8 0406                       	dc.b $4, $6
00021AFA 05                         DPLC_3959_288: 	dc.b $5
00021AFB 8407                       	dc.b $84, $7
00021AFD 1410                       	dc.b $14, $10
00021AFF 53FE                       	dc.b $53, $FE
00021B01 1404                       	dc.b $14, $4
00021B03 0406                       	dc.b $4, $6
00021B05 02                         DPLC_3959_293: 	dc.b $2
00021B06 8412                       	dc.b $84, $12
00021B08 741B                       	dc.b $74, $1B
00021B0A 03                         DPLC_3959_298: 	dc.b $3
00021B0B 8423                       	dc.b $84, $23
00021B0D 242C                       	dc.b $24, $2C
00021B0F 142F                       	dc.b $14, $2F
00021B11 02                         DPLC_3959_29F: 	dc.b $2
00021B12 8431                       	dc.b $84, $31
00021B14 743A                       	dc.b $74, $3A
00021B16 03                         DPLC_3959_2A4: 	dc.b $3
00021B17 8423                       	dc.b $84, $23
00021B19 2442                       	dc.b $24, $42
00021B1B 1445                       	dc.b $14, $45
00021B1D 02                         DPLC_3959_2AB: 	dc.b $2
00021B1E 5447                       	dc.b $54, $47
00021B20 B44D                       	dc.b $B4, $4D
00021B22 03                         DPLC_3959_2B0: 	dc.b $3
00021B23 8459                       	dc.b $84, $59
00021B25 3462                       	dc.b $34, $62
00021B27 0466                       	dc.b $4, $66
00021B29 03                         DPLC_3959_2B7: 	dc.b $3
00021B2A 7467                       	dc.b $74, $67
00021B2C 146F                       	dc.b $14, $6F
00021B2E B471                       	dc.b $B4, $71
00021B30 05                         DPLC_3959_2BE: 	dc.b $5
00021B31 747D                       	dc.b $74, $7D
00021B33 1485                       	dc.b $14, $85
00021B35 5487                       	dc.b $54, $87
00021B37 348D                       	dc.b $34, $8D
00021B39 0491                       	dc.b $4, $91
00021B3B 05                         DPLC_3959_2C9: 	dc.b $5
00021B3C 7492                       	dc.b $74, $92
00021B3E 1485                       	dc.b $14, $85
00021B40 549A                       	dc.b $54, $9A
00021B42 348D                       	dc.b $34, $8D
00021B44 0491                       	dc.b $4, $91
00021B46 02                         DPLC_3959_2D4: 	dc.b $2
00021B47 24A0                       	dc.b $24, $A0
00021B49 F4A3                       	dc.b $F4, $A3
00021B4B 03                         DPLC_3959_2D9: 	dc.b $3
00021B4C 24B3                       	dc.b $24, $B3
00021B4E B4B6                       	dc.b $B4, $B6
00021B50 24C2                       	dc.b $24, $C2
00021B52 01                         DPLC_3959_2E0: 	dc.b $1
00021B53 B4C5                       	dc.b $B4, $C5
00021B55 01                         DPLC_3959_2E3: 	dc.b $1
00021B56 54D1                       	dc.b $54, $D1
00021B58 01                         DPLC_3959_2E6: 	dc.b $1
00021B59 14D7                       	dc.b $14, $D7
00021B5B 03                         DPLC_3959_2E9: 	dc.b $3
00021B5C 738C                       	dc.b $73, $8C
00021B5E 3394                       	dc.b $33, $94
00021B60 2398                       	dc.b $23, $98
00021B62 03                         DPLC_3959_2F0: 	dc.b $3
00021B63 73A4                       	dc.b $73, $A4
00021B65 03AC                       	dc.b $3, $AC
00021B67 33AD                       	dc.b $33, $AD
00021B69 03                         DPLC_3959_2F7: 	dc.b $3
00021B6A B4D9                       	dc.b $B4, $D9
00021B6C 14E5                       	dc.b $14, $E5
00021B6E 34E7                       	dc.b $34, $E7
00021B70 03                         DPLC_3959_2FE: 	dc.b $3
00021B71 54EB                       	dc.b $54, $EB
00021B73 B4F1                       	dc.b $B4, $F1
00021B75 1074                       	dc.b $10, $74
00021B77 02                         DPLC_3959_305: 	dc.b $2
00021B78 F4FD                       	dc.b $F4, $FD
00021B7A 250D                       	dc.b $25, $D
00021B7C                            	even
00021B7C                            	even
00021B7C                            
00021B7C                            ; ---------------------------------------------------------------------------
00021B7C                            ; Uncompressed graphics	- Sonic
00021B7C                            ; ---------------------------------------------------------------------------
00021B7C                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002BD7C                            		even
0002BD7C                            ; ---------------------------------------------------------------------------
0002BD7C                            ; Compressed graphics - various
0002BD7C                            ; ---------------------------------------------------------------------------
0002BD7C                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002BE80                            		even
0002BE80                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002BEBA                            		even
0002BEBA                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002C050                            		even
0002C050                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002C198                            		even
0002C198                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002C2A2                            		even
0002C2A2                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002C2F4                            		even
0002C2F4                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002C53C                            		even
0002C53C                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002C6C2                            		even
0002C6C2                            ; ---------------------------------------------------------------------------
0002C6C2                            ; Sprite mappings - walls of the special stage
0002C6C2                            ; ---------------------------------------------------------------------------
0002C6C2                            Map_SSWalls:
0002C6C2                            	include "_maps\SSwalls.asm"
0002C6C2                            ; ---------------------------------------------------------------------------
0002C6C2                            ; Sprite mappings - walls of the special stage
0002C6C2                            ; ---------------------------------------------------------------------------
0002C6C2 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002C6C6 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002C6CA 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002C6CE 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002C6D2 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002C6D6 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002C6DA 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002C6DE 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002C6E2 01                         byte_2C584:	dc.b 1
0002C6E3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002C6E8 01                         byte_2C58A:	dc.b 1
0002C6E9 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002C6EE 01                         byte_2C590:	dc.b 1
0002C6EF F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002C6F4 01                         byte_2C596:	dc.b 1
0002C6F5 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002C6FA 01                         byte_2C59C:	dc.b 1
0002C6FB F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002C700 01                         byte_2C5A2:	dc.b 1
0002C701 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002C706 01                         byte_2C5A8:	dc.b 1
0002C707 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002C70C 01                         byte_2C5AE:	dc.b 1
0002C70D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002C712 01                         byte_2C5B4:	dc.b 1
0002C713 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002C718 01                         byte_2C5BA:	dc.b 1
0002C719 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002C71E 01                         byte_2C5C0:	dc.b 1
0002C71F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002C724 01                         byte_2C5C6:	dc.b 1
0002C725 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002C72A 01                         byte_2C5CC:	dc.b 1
0002C72B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002C730 01                         byte_2C5D2:	dc.b 1
0002C731 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002C736 01                         byte_2C5D8:	dc.b 1
0002C737 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002C73C 01                         byte_2C5DE:	dc.b 1
0002C73D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002C742                            		even
0002C742                            		even
0002C742                            ; ---------------------------------------------------------------------------
0002C742                            ; Compressed graphics - special stage
0002C742                            ; ---------------------------------------------------------------------------
0002C742                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002D07A                            		even
0002D07A                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002D1AE                            		even
0002D1AE                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002DE3E                            		even
0002DE3E                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002E13E                            		even
0002E13E                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0002E632                            		even
0002E632                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0002E720                            		even
0002E720                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0002E7F0                            		even
0002E7F0                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0002E8E6                            		even
0002E8E6                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0002E944                            		even
0002E944                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0002E9D6                            		even
0002E9D6                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0002EA98                            		even
0002EA98                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0002EB66                            		even
0002EB66                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0002EC32                            		even
0002EC32                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0002ECFA                            		even
0002ECFA                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0002EDC4                            		even
0002EDC4                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0002EE94                            		even
0002EE94                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0002F088                            		even
0002F088                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0002F1F0                            		even
0002F1F0                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0002F2A0                            		even
0002F2A0                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0002F37A                            		even
0002F37A                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0002F3FE                            		even
0002F3FE                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0002F57C                            		even
0002F57C                            ; ---------------------------------------------------------------------------
0002F57C                            ; Compressed graphics - GHZ stuff
0002F57C                            ; ---------------------------------------------------------------------------
0002F57C                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0002F5C6                            		even
0002F5C6                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0002F6E0                            		even
0002F6E0                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0002F7CC                            		even
0002F7CC                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0002F814                            		even
0002F814                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0002F9B2                            		even
0002F9B2                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0002FA2E                            		even
0002FA2E                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0002FC42                            		even
0002FC42                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0002FD6E                            		even
0002FD6E                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0002FE9C                            		even
0002FE9C                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0002FF3A                            		even
0002FF3A                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0002FF9A                            		even
0002FF9A                            ; ---------------------------------------------------------------------------
0002FF9A                            ; Compressed graphics - LZ stuff
0002FF9A                            ; ---------------------------------------------------------------------------
0002FF9A                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000300BE                            		even
000300BE                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000308B2                            		even
000308B2                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00030A32                            		even
00030A32                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00030B9C                            		even
00030B9C                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000311F2                            		even
000311F2                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
000312A8                            		even
000312A8                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003134A                            		even
0003134A                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000314A6                            		even
000314A6                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003150A                            		even
0003150A                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003165C                            		even
0003165C                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00031B3E                            		even
00031B3E                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00031CAE                            		even
00031CAE                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00031F66                            		even
00031F66                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003209E                            		even
0003209E                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000321C8                            		even
000321C8                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000322D8                            		even
000322D8                            ; ---------------------------------------------------------------------------
000322D8                            ; Compressed graphics - MZ stuff
000322D8                            ; ---------------------------------------------------------------------------
000322D8                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00032566                            		even
00032566                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00032624                            		even
00032624                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000326DC                            		even
000326DC                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00032730                            		even
00032730                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00032A0E                            		even
00032A0E                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00033324                            		even
00033324                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00033488                            		even
00033488                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00033510                            		even
00033510                            ; ---------------------------------------------------------------------------
00033510                            ; Compressed graphics - SLZ stuff
00033510                            ; ---------------------------------------------------------------------------
00033510                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003374C                            		even
0003374C                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00033892                            		even
00033892                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00033AD6                            		even
00033AD6                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00033B38                            		even
00033B38                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00033C1A                            		even
00033C1A                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00033DFC                            		even
00033DFC                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00033F08                            		even
00033F08                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00033FAC                            		even
00033FAC                            ; ---------------------------------------------------------------------------
00033FAC                            ; Compressed graphics - SYZ stuff
00033FAC                            ; ---------------------------------------------------------------------------
00033FAC                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00034116                            		even
00034116                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00034178                            		even
00034178                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003425A                            		even
0003425A                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000344E8                            		even
000344E8                            ; ---------------------------------------------------------------------------
000344E8                            ; Compressed graphics - SBZ stuff
000344E8                            ; ---------------------------------------------------------------------------
000344E8                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003453C                            		even
0003453C                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000347D8                            		even
000347D8                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000349DC                            		even
000349DC                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00034B7A                            		even
00034B7A                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00034EAA                            		even
00034EAA                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00035088                            		even
00035088                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
000350E0                            		even
000350E0                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00035260                            		even
00035260                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003535E                            		even
0003535E                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000354EA                            		even
000354EA                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003553A                            		even
0003553A                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00035592                            		even
00035592                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003568E                            		even
0003568E                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
000357A4                            		even
000357A4                            ; ---------------------------------------------------------------------------
000357A4                            ; Compressed graphics - enemies
000357A4                            ; ---------------------------------------------------------------------------
000357A4                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00035B64                            		even
00035B64                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00036052                            		even
00036052                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
000363F8                            		even
000363F8                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
000365E0                            		even
000365E0                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00036CCA                            		even
00036CCA                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00036F32                            		even
00036F32                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
000371BC                            		even
000371BC                            Nem_Roller:	incbin	artnem\roller.bin	; roller
000376E0                            		even
000376E0                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003796A                            		even
0003796A                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00037F88                            		even
00037F88                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00038370                            		even
00038370                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003866C                            		even
0003866C                            Nem_Splats:	incbin	artnem\splats.bin	; splats
000388B4                            		even
000388B4                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00038B4C                            		even
00038B4C                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
00038D2A                            		even
00038D2A                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
00038EB8                            		even
00038EB8                            ; ---------------------------------------------------------------------------
00038EB8                            ; Compressed graphics - various
00038EB8                            ; ---------------------------------------------------------------------------
00038EB8                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
000394C6                            		even
000394C6                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
000395BC                            		even
000395BC                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
000396C2                            		even
000396C2                            Nem_Ring:	incbin	artnem\rings.bin	; rings
000397B6                            		even
000397B6                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00039C16                            		even
00039C16                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003A27C                            		even
0003A27C                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003A32C                            		even
0003A32C                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003A4BE                            		even
0003A4BE                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003A5C0                            		even
0003A5C0                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003A69C                            		even
0003A69C                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003AB18                            		even
0003AB18                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003ABD8                            		even
0003ABD8                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003AD4C                            		even
0003AD4C                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003B04E                            		even
0003B04E                            ; ---------------------------------------------------------------------------
0003B04E                            ; Compressed graphics - continue screen
0003B04E                            ; ---------------------------------------------------------------------------
0003B04E                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003B2FE                            		even
0003B2FE                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003B538                            		even
0003B538                            ; ---------------------------------------------------------------------------
0003B538                            ; Compressed graphics - animals
0003B538                            ; ---------------------------------------------------------------------------
0003B538                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003B690                            		even
0003B690                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003B7EC                            		even
0003B7EC                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003B968                            		even
0003B968                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003BA84                            		even
0003BA84                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003BBBA                            		even
0003BBBA                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003BCF4                            		even
0003BCF4                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003BE50                            		even
0003BE50                            ; ---------------------------------------------------------------------------
0003BE50                            ; Compressed graphics - primary patterns and block mappings
0003BE50                            ; ---------------------------------------------------------------------------
0003BE50                            Blk16_GHZ:	incbin	map16\ghz.bin
0003C7F0                            		even
0003C7F0                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0003DE50                            		even
0003DE50                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0003F1F8                            		even
0003F1F8                            Blk256_GHZ:	incbin	map256\ghz.bin
00041308                            		even
00041308                            Blk16_LZ:	incbin	map16\lz.bin
00041632                            		even
00041632                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004317A                            		even
0004317A                            Blk256_LZ:	incbin	map256\lz.bin
0004596A                            		even
0004596A                            Blk16_MZ:	incbin	map16\mz.bin
00046174                            		even
00046174                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
000489B8                            		even
000489B8                            Blk256_MZ:	incbin	map256\mz.bin
0004A178                            		even
0004A178                            Blk16_SLZ:	incbin	map16\slz.bin
0004A45E                            		even
0004A45E                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004B580                            		even
0004B580                            Blk256_SLZ:	incbin	map256\slz.bin
0004B73A                            		even
0004B73A                            Blk16_SYZ:	incbin	map16\syz.bin
0004C0A8                            		even
0004C0A8                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0004F7D4                            		even
0004F7D4                            Blk256_SYZ:	incbin	map256\syz.bin
00051B84                            		even
00051B84                            Blk16_SBZ:	incbin	map16\sbz.bin
00052A1E                            		even
00052A1E                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
000551CA                            		even
000551CA                            Blk256_SBZ:	incbin	map256\sbz.bin
00057C1A                            		even
00057C1A                            ; ---------------------------------------------------------------------------
00057C1A                            ; Compressed graphics - bosses and ending sequence
00057C1A                            ; ---------------------------------------------------------------------------
00057C1A                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005847E                            		even
0005847E                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00058768                            		even
00058768                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00058FEC                            		even
00058FEC                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00059818                            		even
00059818                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00059F80                            		even
00059F80                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005A500                            		even
0005A500                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005A620                            		even
0005A620                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005A81E                            		even
0005A81E                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0005B9FC                            		even
0005B9FC                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0005C340                            		even
0005C340                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0005C716                            		even
0005C716                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0005CCA6                            		even
0005CCA6                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0005CF2E                            		even
0005CF2E                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0005D52C                            		even
0005D52C                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0005D7B4                            		even
0005D7B4                            		incbin	misc\padding2.bin
0005D8B8                            		even
0005D8B8                            ; ---------------------------------------------------------------------------
0005D8B8                            ; Collision data
0005D8B8                            ; ---------------------------------------------------------------------------
0005D8B8                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0005D9B8                            		even
0005D9B8                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0005E9B8                            		even
0005E9B8                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0005F9B8                            		even
0005F9B8                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0005FB52                            		even
0005FB52                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0005FC1A                            		even
0005FC1A                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0005FDAA                            		even
0005FDAA                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0005FF9E                            		even
0005FF9E                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00060192                            		even
00060192                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000603EA                            		even
000603EA                            ; ---------------------------------------------------------------------------
000603EA                            ; Special layouts
000603EA                            ; ---------------------------------------------------------------------------
000603EA                            SS_1:		incbin	sslayout\1.bin
00060664                            		even
00060664                            SS_2:		incbin	sslayout\2.bin
00060A76                            		even
00060A76                            SS_3:		incbin	sslayout\3.bin
00060DD2                            		even
00060DD2                            SS_4:		incbin	sslayout\4.bin
000612AC                            		even
000612AC                            SS_5:		incbin	sslayout\5.bin
0006177E                            		even
0006177E                            SS_6:		incbin	sslayout\6.bin
00061A8E                            		even
00061A8E                            ; ---------------------------------------------------------------------------
00061A8E                            ; Animated uncompressed graphics
00061A8E                            ; ---------------------------------------------------------------------------
00061A8E                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00061C8E                            		even
00061C8E                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006208E                            		even
0006208E                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006250E                            		even
0006250E                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006280E                            		even
0006280E                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00062E0E                            		even
00062E0E                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006310E                            		even
0006310E                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00063B8E                            		even
00063B8E                            
00063B8E                            ; ---------------------------------------------------------------------------
00063B8E                            ; Level	layout index
00063B8E                            ; ---------------------------------------------------------------------------
00063B8E 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00063B94 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00063B9A 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00063BA0 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00063BA6 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00063BAC 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00063BB2 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00063BB8 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00063BBE 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00063BC4 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00063BCA 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00063BD0 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00063BD6 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00063BDC 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00063BE2 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00063BE8 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00063BEE 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00063BF4 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00063BFA 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00063C00 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00063C06 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00063C0C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00063C12 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00063C18 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00063C1E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00063C24 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00063C2A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00063C30 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00063C36                            
00063C36                            Level_GHZ1:	incbin	levels\ghz1.bin
00063D28                            		even
00063D28 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00063D2C                            Level_GHZ2:	incbin	levels\ghz2.bin
00063DF4                            		even
00063DF4 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00063DF8                            Level_GHZ3:	incbin	levels\ghz3.bin
00063F1A                            		even
00063F1A                            Level_GHZbg:	incbin	levels\ghzbg.bin
00063F3C                            		even
00063F3C 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00063F40 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00063F44                            
00063F44                            Level_LZ1:	incbin	levels\lz1.bin
00064046                            		even
00064046                            Level_LZbg:	incbin	levels\lzbg.bin
00064148                            		even
00064148 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006414C                            Level_LZ2:	incbin	levels\lz2.bin
000641E6                            		even
000641E6 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
000641EA                            Level_LZ3:	incbin	levels\lz3.bin
00064304                            		even
00064304 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00064308                            Level_SBZ3:	incbin	levels\sbz3.bin
000643C2                            		even
000643C2 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000643C6                            
000643C6                            Level_MZ1:	incbin	levels\mz1.bin
00064464                            		even
00064464                            Level_MZ1bg:	incbin	levels\mz1bg.bin
000644DE                            		even
000644DE                            Level_MZ2:	incbin	levels\mz2.bin
00064582                            		even
00064582                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00064614                            		even
00064614 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00064618                            Level_MZ3:	incbin	levels\mz3.bin
000646FA                            		even
000646FA                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006479E                            		even
0006479E 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000647A2 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000647A6                            
000647A6                            Level_SLZ1:	incbin	levels\slz1.bin
000648B8                            		even
000648B8                            Level_SLZbg:	incbin	levels\slzbg.bin
000648D2                            		even
000648D2                            Level_SLZ2:	incbin	levels\slz2.bin
000649C2                            		even
000649C2                            Level_SLZ3:	incbin	levels\slz3.bin
00064ADC                            		even
00064ADC 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00064AE0                            
00064AE0                            Level_SYZ1:	incbin	levels\syz1.bin
00064B9C                            		even
00064B9C                            Level_SYZbg:	incbin	levels\syzbg.bin
00064BD6                            		even
00064BD6 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00064BDA                            Level_SYZ2:	incbin	levels\syz2.bin
00064CDE                            		even
00064CDE 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00064CE2                            Level_SYZ3:	incbin	levels\syz3.bin
00064E3C                            		even
00064E3C 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00064E40 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00064E44                            
00064E44                            Level_SBZ1:	incbin	levels\sbz1.bin
00064F66                            		even
00064F66                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00064FA4                            		even
00064FA4                            Level_SBZ2:	incbin	levels\sbz2.bin
000650E6                            		even
000650E6                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00065250                            		even
00065250 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00065254 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00065258                            Level_End:	incbin	levels\ending.bin
00065278                            		even
00065278 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006527C                            
0006527C                            ; ---------------------------------------------------------------------------
0006527C                            ; Animated uncompressed giant ring graphics
0006527C                            ; ---------------------------------------------------------------------------
0006527C                            Art_BigRing:	incbin	artunc\bigring.bin
00065EBC                            		even
00065EBC                            
00065EBC                            		incbin	misc\padding3.bin
00065F58                            		even
00065F58                            
00065F58                            ; ---------------------------------------------------------------------------
00065F58                            ; Sprite locations index
00065F58                            ; ---------------------------------------------------------------------------
00065F58 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F5C 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F60 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F64 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F68 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F6C 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F70 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F74 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F78 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F7C 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F80 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F84 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F88 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F8C 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F90 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F94 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F98 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F9C 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065FA0 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065FA4 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065FA8 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065FAC 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065FB0 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065FB4 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065FB8 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065FBC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065FC0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065FC4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065FC8 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00065FCC 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00065FD0 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00065FD4 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00065FD8 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00065FDC 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00065FE0 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00065FE4 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00065FE8 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00065FEE                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00066516                            		even
00066516                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00066AD4                            		even
00066AD4                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006718E                            		even
0006718E                            ObjPos_LZ1:	incbin	objpos\lz1.bin
000675FC                            		even
000675FC                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006793E                            		even
0006793E                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00067F20                            		even
00067F20                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000683B8                            		even
000683B8                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000683EA                            		even
000683EA                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006841C                            		even
0006841C                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006844E                            		even
0006844E                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00068480                            		even
00068480                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000684CA                            		even
000684CA                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00068508                            		even
00068508                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00068874                            		even
00068874                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00068D1E                            		even
00068D1E                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00069294                            		even
00069294                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000697D4                            		even
000697D4                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00069C3C                            		even
00069C3C                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006A21E                            		even
0006A21E                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006A6AA                            		even
0006A6AA                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006AC14                            		even
0006AC14                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0006B21A                            		even
0006B21A                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0006B958                            		even
0006B958                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0006C036                            		even
0006C036                            ObjPos_FZ:	incbin	objpos\fz.bin
0006C048                            		even
0006C048                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0006C07A                            		even
0006C07A                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0006C0AC                            		even
0006C0AC                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0006C0DE                            		even
0006C0DE                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0006C110                            		even
0006C110                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0006C142                            		even
0006C142                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0006C17A                            		even
0006C17A                            ObjPos_End:	incbin	objpos\ending.bin
0006C2D6                            		even
0006C2D6 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0006C2DC                            ; ---------------------------------------------------------------------------
0006C2DC                            		incbin	misc\padding4.bin
0006C906                            		even
0006C906                            
0006C906 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0006C90A 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0006C90E 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0006C912 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0006C916 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0006C91A 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0006C91E                            ; ---------------------------------------------------------------------------
0006C91E                            ; PSG instruments used in music
0006C91E                            ; ---------------------------------------------------------------------------
0006C91E 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0006C92A 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0006C936 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0006C942                            PSG1:		incbin	sound\psg1.bin
0006C959                            PSG2:		incbin	sound\psg2.bin
0006C960                            PSG3:		incbin	sound\psg3.bin
0006C971                            PSG4:		incbin	sound\psg4.bin
0006C97C                            PSG6:		incbin	sound\psg6.bin
0006C98B                            PSG5:		incbin	sound\psg5.bin
0006C9B5                            PSG7:		incbin	sound\psg7.bin
0006C9D1                            PSG8:		incbin	sound\psg8.bin
0006C9F9                            PSG9:		incbin	sound\psg9.bin
0006CA0A                            
0006CA0A 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0006CA12                            ; ---------------------------------------------------------------------------
0006CA12                            ; Music	Pointers
0006CA12                            ; ---------------------------------------------------------------------------
0006CA12 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0006CA1A 0000 0000 0000 0000        		dc.l Music83, Music84
0006CA22 0000 0000 0000 0000        		dc.l Music85, Music86
0006CA2A 0000 0000 0000 0000        		dc.l Music87, Music88
0006CA32 0000 0000 0000 0000        		dc.l Music89, Music8A
0006CA3A 0000 0000 0000 0000        		dc.l Music8B, Music8C
0006CA42 0000 0000 0000 0000        		dc.l Music8D, Music8E
0006CA4A 0000 0000 0000 0000        		dc.l Music8F, Music90
0006CA52 0000 0000 0000 0000        		dc.l Music91, Music92
0006CA5A 0000 0000                  		dc.l Music93
0006CA5E                            ; ---------------------------------------------------------------------------
0006CA5E                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0006CA5E                            ; ---------------------------------------------------------------------------
0006CA5E 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0006CA6E 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0006CA7E 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0006CA8E 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0006CA9E 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0006CAAE 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0006CABE 9090 9090                  		dc.b $90, $90, $90, $90
0006CAC2                            
0006CAC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CAC2                            
0006CAC2                            
0006CAC2                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0006CAC2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0006CACA 4E71                       		nop	
0006CACC 4E71                       		nop	
0006CACE 4E71                       		nop	
0006CAD0                            
0006CAD0                            loc_71B5A:
0006CAD0 0839 0000 00A1 1100        		btst	#0,($A11100).l
0006CAD8 66F6                       		bne.s	loc_71B5A
0006CADA                            
0006CADA 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0006CAE2 6700                       		beq.s	loc_71B82
0006CAE4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006CAEC 4E71                       		nop	
0006CAEE 4E71                       		nop	
0006CAF0 4E71                       		nop	
0006CAF2 4E71                       		nop	
0006CAF4 4E71                       		nop	
0006CAF6 60CA                       		bra.s	sub_71B4C
0006CAF8                            ; ===========================================================================
0006CAF8                            
0006CAF8                            loc_71B82:
0006CAF8 4DF9 00FF F000             		lea	($FFF000).l,a6
0006CAFE 422E 000E                  		clr.b	$E(a6)
0006CB02 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0006CB06 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0006CB0A 532E 0001                  		subq.b	#1,1(a6)
0006CB0E 6600                       		bne.s	loc_71B9E
0006CB10 4EBA 0000                  		jsr	sub_7260C(pc)
0006CB14                            
0006CB14                            loc_71B9E:
0006CB14 102E 0004                  		move.b	4(a6),d0
0006CB18 6700                       		beq.s	loc_71BA8
0006CB1A 4EBA 0000                  		jsr	sub_72504(pc)
0006CB1E                            
0006CB1E                            loc_71BA8:
0006CB1E 4A2E 0024                  		tst.b	$24(a6)
0006CB22 6700                       		beq.s	loc_71BB2
0006CB24 4EBA 0000                  		jsr	sub_7267C(pc)
0006CB28                            
0006CB28                            loc_71BB2:
0006CB28 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0006CB2C 6700                       		beq.s	loc_71BBC	; if not, branch
0006CB2E 4EBA 0000                  		jsr	Sound_Play(pc)
0006CB32                            
0006CB32                            loc_71BBC:
0006CB32 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006CB38 6700                       		beq.s	loc_71BC8
0006CB3A 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0006CB3E                            
0006CB3E                            loc_71BC8:
0006CB3E 4BEE 0040                  		lea	$40(a6),a5
0006CB42 4A15                       		tst.b	(a5)
0006CB44 6A00                       		bpl.s	loc_71BD4
0006CB46 4EBA 0000                  		jsr	sub_71C4E(pc)
0006CB4A                            
0006CB4A                            loc_71BD4:
0006CB4A 422E 0008                  		clr.b	8(a6)
0006CB4E 7E05                       		moveq	#5,d7
0006CB50                            
0006CB50                            loc_71BDA:
0006CB50 DAFC 0030                  		adda.w	#$30,a5
0006CB54 4A15                       		tst.b	(a5)
0006CB56 6A00                       		bpl.s	loc_71BE6
0006CB58 4EBA 0000                  		jsr	sub_71CCA(pc)
0006CB5C                            
0006CB5C                            loc_71BE6:
0006CB5C 51CF FFF2                  		dbf	d7,loc_71BDA
0006CB60                            
0006CB60 7E02                       		moveq	#2,d7
0006CB62                            
0006CB62                            loc_71BEC:
0006CB62 DAFC 0030                  		adda.w	#$30,a5
0006CB66 4A15                       		tst.b	(a5)
0006CB68 6A00                       		bpl.s	loc_71BF8
0006CB6A 4EBA 0000                  		jsr	sub_72850(pc)
0006CB6E                            
0006CB6E                            loc_71BF8:
0006CB6E 51CF FFF2                  		dbf	d7,loc_71BEC
0006CB72                            
0006CB72 1D7C 0080 000E             		move.b	#$80,$E(a6)
0006CB78 7E02                       		moveq	#2,d7
0006CB7A                            
0006CB7A                            loc_71C04:
0006CB7A DAFC 0030                  		adda.w	#$30,a5
0006CB7E 4A15                       		tst.b	(a5)
0006CB80 6A00                       		bpl.s	loc_71C10
0006CB82 4EBA 0000                  		jsr	sub_71CCA(pc)
0006CB86                            
0006CB86                            loc_71C10:
0006CB86 51CF FFF2                  		dbf	d7,loc_71C04
0006CB8A                            
0006CB8A 7E02                       		moveq	#2,d7
0006CB8C                            
0006CB8C                            loc_71C16:
0006CB8C DAFC 0030                  		adda.w	#$30,a5
0006CB90 4A15                       		tst.b	(a5)
0006CB92 6A00                       		bpl.s	loc_71C22
0006CB94 4EBA 0000                  		jsr	sub_72850(pc)
0006CB98                            
0006CB98                            loc_71C22:
0006CB98 51CF FFF2                  		dbf	d7,loc_71C16
0006CB9C 1D7C 0040 000E             		move.b	#$40,$E(a6)
0006CBA2 DAFC 0030                  		adda.w	#$30,a5
0006CBA6 4A15                       		tst.b	(a5)
0006CBA8 6A00                       		bpl.s	loc_71C38
0006CBAA 4EBA 0000                  		jsr	sub_71CCA(pc)
0006CBAE                            
0006CBAE                            loc_71C38:
0006CBAE DAFC 0030                  		adda.w	#$30,a5
0006CBB2 4A15                       		tst.b	(a5)
0006CBB4 6A00                       		bpl.s	loc_71C44
0006CBB6 4EBA 0000                  		jsr	sub_72850(pc)
0006CBBA                            
0006CBBA                            loc_71C44:
0006CBBA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006CBC2 4E75                       		rts	
0006CBC4                            ; End of function sub_71B4C
0006CBC4                            
0006CBC4                            
0006CBC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CBC4                            
0006CBC4                            
0006CBC4                            sub_71C4E:				; XREF: sub_71B4C
0006CBC4 532D 000E                  		subq.b	#1,$E(a5)
0006CBC8 6600                       		bne.s	locret_71CAA
0006CBCA 1D7C 0080 0008             		move.b	#$80,8(a6)
0006CBD0 286D 0004                  		movea.l	4(a5),a4
0006CBD4                            
0006CBD4                            loc_71C5E:
0006CBD4 7A00                       		moveq	#0,d5
0006CBD6 1A1C                       		move.b	(a4)+,d5
0006CBD8 0C05 00E0                  		cmpi.b	#-$20,d5
0006CBDC 6500                       		bcs.s	loc_71C6E
0006CBDE 4EBA 0000                  		jsr	sub_72A5A(pc)
0006CBE2 60F0                       		bra.s	loc_71C5E
0006CBE4                            ; ===========================================================================
0006CBE4                            
0006CBE4                            loc_71C6E:
0006CBE4 4A05                       		tst.b	d5
0006CBE6 6A00                       		bpl.s	loc_71C84
0006CBE8 1B45 0010                  		move.b	d5,$10(a5)
0006CBEC 1A1C                       		move.b	(a4)+,d5
0006CBEE 6A00                       		bpl.s	loc_71C84
0006CBF0 534C                       		subq.w	#1,a4
0006CBF2 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006CBF8 6000                       		bra.s	loc_71C88
0006CBFA                            ; ===========================================================================
0006CBFA                            
0006CBFA                            loc_71C84:
0006CBFA 4EBA 0000                  		jsr	sub_71D40(pc)
0006CBFE                            
0006CBFE                            loc_71C88:
0006CBFE 2B4C 0004                  		move.l	a4,4(a5)
0006CC02 0815 0002                  		btst	#2,(a5)
0006CC06 6600                       		bne.s	locret_71CAA
0006CC08 7000                       		moveq	#0,d0
0006CC0A 102D 0010                  		move.b	$10(a5),d0
0006CC0E 0C00 0080                  		cmpi.b	#$80,d0
0006CC12 6700                       		beq.s	locret_71CAA
0006CC14 0800 0003                  		btst	#3,d0
0006CC18 6600                       		bne.s	loc_71CAC
0006CC1A 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0006CC20                            
0006CC20                            locret_71CAA:
0006CC20 4E75                       		rts	
0006CC22                            ; ===========================================================================
0006CC22                            
0006CC22                            loc_71CAC:
0006CC22 0400 0088                  		subi.b	#$88,d0
0006CC26 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0006CC2A 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0006CC30 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0006CC38 4E75                       		rts	
0006CC3A                            ; End of function sub_71C4E
0006CC3A                            
0006CC3A                            ; ===========================================================================
0006CC3A 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0006CC40                            
0006CC40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CC40                            
0006CC40                            
0006CC40                            sub_71CCA:				; XREF: sub_71B4C
0006CC40 532D 000E                  		subq.b	#1,$E(a5)
0006CC44 6600                       		bne.s	loc_71CE0
0006CC46 0895 0004                  		bclr	#4,(a5)
0006CC4A 4EBA 0000                  		jsr	sub_71CEC(pc)
0006CC4E 4EBA 0000                  		jsr	sub_71E18(pc)
0006CC52 6000 0000                  		bra.w	loc_726E2
0006CC56                            ; ===========================================================================
0006CC56                            
0006CC56                            loc_71CE0:
0006CC56 4EBA 0000                  		jsr	sub_71D9E(pc)
0006CC5A 4EBA 0000                  		jsr	sub_71DC6(pc)
0006CC5E 6000 0000                  		bra.w	loc_71E24
0006CC62                            ; End of function sub_71CCA
0006CC62                            
0006CC62                            
0006CC62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CC62                            
0006CC62                            
0006CC62                            sub_71CEC:				; XREF: sub_71CCA
0006CC62 286D 0004                  		movea.l	4(a5),a4
0006CC66 0895 0001                  		bclr	#1,(a5)
0006CC6A                            
0006CC6A                            loc_71CF4:
0006CC6A 7A00                       		moveq	#0,d5
0006CC6C 1A1C                       		move.b	(a4)+,d5
0006CC6E 0C05 00E0                  		cmpi.b	#-$20,d5
0006CC72 6500                       		bcs.s	loc_71D04
0006CC74 4EBA 0000                  		jsr	sub_72A5A(pc)
0006CC78 60F0                       		bra.s	loc_71CF4
0006CC7A                            ; ===========================================================================
0006CC7A                            
0006CC7A                            loc_71D04:
0006CC7A 4EBA 0000                  		jsr	sub_726FE(pc)
0006CC7E 4A05                       		tst.b	d5
0006CC80 6A00                       		bpl.s	loc_71D1A
0006CC82 4EBA 0000                  		jsr	sub_71D22(pc)
0006CC86 1A1C                       		move.b	(a4)+,d5
0006CC88 6A00                       		bpl.s	loc_71D1A
0006CC8A 534C                       		subq.w	#1,a4
0006CC8C 6000 0000                  		bra.w	sub_71D60
0006CC90                            ; ===========================================================================
0006CC90                            
0006CC90                            loc_71D1A:
0006CC90 4EBA 0000                  		jsr	sub_71D40(pc)
0006CC94 6000 0000                  		bra.w	sub_71D60
0006CC98                            ; End of function sub_71CEC
0006CC98                            
0006CC98                            
0006CC98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CC98                            
0006CC98                            
0006CC98                            sub_71D22:				; XREF: sub_71CEC
0006CC98 0405 0080                  		subi.b	#$80,d5
0006CC9C 6700                       		beq.s	loc_71D58
0006CC9E DA2D 0008                  		add.b	8(a5),d5
0006CCA2 0245 007F                  		andi.w	#$7F,d5
0006CCA6 E34D                       		lsl.w	#1,d5
0006CCA8 41FA 0000                  		lea	word_72790(pc),a0
0006CCAC 3C30 5000                  		move.w	(a0,d5.w),d6
0006CCB0 3B46 0010                  		move.w	d6,$10(a5)
0006CCB4 4E75                       		rts	
0006CCB6                            ; End of function sub_71D22
0006CCB6                            
0006CCB6                            
0006CCB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CCB6                            
0006CCB6                            
0006CCB6                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006CCB6 1005                       		move.b	d5,d0
0006CCB8 122D 0002                  		move.b	2(a5),d1
0006CCBC                            
0006CCBC                            loc_71D46:
0006CCBC 5301                       		subq.b	#1,d1
0006CCBE 6700                       		beq.s	loc_71D4E
0006CCC0 D005                       		add.b	d5,d0
0006CCC2 60F8                       		bra.s	loc_71D46
0006CCC4                            ; ===========================================================================
0006CCC4                            
0006CCC4                            loc_71D4E:
0006CCC4 1B40 000F                  		move.b	d0,$F(a5)
0006CCC8 1B40 000E                  		move.b	d0,$E(a5)
0006CCCC 4E75                       		rts	
0006CCCE                            ; End of function sub_71D40
0006CCCE                            
0006CCCE                            ; ===========================================================================
0006CCCE                            
0006CCCE                            loc_71D58:				; XREF: sub_71D22
0006CCCE 08D5 0001                  		bset	#1,(a5)
0006CCD2 426D 0010                  		clr.w	$10(a5)
0006CCD6                            
0006CCD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CCD6                            
0006CCD6                            
0006CCD6                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0006CCD6 2B4C 0004                  		move.l	a4,4(a5)
0006CCDA 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006CCE0 0815 0004                  		btst	#4,(a5)
0006CCE4 6600                       		bne.s	locret_71D9C
0006CCE6 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0006CCEC 422D 000C                  		clr.b	$C(a5)
0006CCF0 0815 0003                  		btst	#3,(a5)
0006CCF4 6700                       		beq.s	locret_71D9C
0006CCF6 206D 0014                  		movea.l	$14(a5),a0
0006CCFA 1B58 0018                  		move.b	(a0)+,$18(a5)
0006CCFE 1B58 0019                  		move.b	(a0)+,$19(a5)
0006CD02 1B58 001A                  		move.b	(a0)+,$1A(a5)
0006CD06 1018                       		move.b	(a0)+,d0
0006CD08 E208                       		lsr.b	#1,d0
0006CD0A 1B40 001B                  		move.b	d0,$1B(a5)
0006CD0E 426D 001C                  		clr.w	$1C(a5)
0006CD12                            
0006CD12                            locret_71D9C:
0006CD12 4E75                       		rts	
0006CD14                            ; End of function sub_71D60
0006CD14                            
0006CD14                            
0006CD14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CD14                            
0006CD14                            
0006CD14                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0006CD14 4A2D 0012                  		tst.b	$12(a5)
0006CD18 6700                       		beq.s	locret_71DC4
0006CD1A 532D 0012                  		subq.b	#1,$12(a5)
0006CD1E 6600                       		bne.s	locret_71DC4
0006CD20 08D5 0001                  		bset	#1,(a5)
0006CD24 4A2D 0001                  		tst.b	1(a5)
0006CD28 6B00 0000                  		bmi.w	loc_71DBE
0006CD2C 4EBA 0000                  		jsr	sub_726FE(pc)
0006CD30 584F                       		addq.w	#4,sp
0006CD32 4E75                       		rts	
0006CD34                            ; ===========================================================================
0006CD34                            
0006CD34                            loc_71DBE:
0006CD34 4EBA 0000                  		jsr	sub_729A0(pc)
0006CD38 584F                       		addq.w	#4,sp
0006CD3A                            
0006CD3A                            locret_71DC4:
0006CD3A 4E75                       		rts	
0006CD3C                            ; End of function sub_71D9E
0006CD3C                            
0006CD3C                            
0006CD3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CD3C                            
0006CD3C                            
0006CD3C                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0006CD3C 584F                       		addq.w	#4,sp
0006CD3E 0815 0003                  		btst	#3,(a5)
0006CD42 6700                       		beq.s	locret_71E16
0006CD44 4A2D 0018                  		tst.b	$18(a5)
0006CD48 6700                       		beq.s	loc_71DDA
0006CD4A 532D 0018                  		subq.b	#1,$18(a5)
0006CD4E 4E75                       		rts	
0006CD50                            ; ===========================================================================
0006CD50                            
0006CD50                            loc_71DDA:
0006CD50 532D 0019                  		subq.b	#1,$19(a5)
0006CD54 6700                       		beq.s	loc_71DE2
0006CD56 4E75                       		rts	
0006CD58                            ; ===========================================================================
0006CD58                            
0006CD58                            loc_71DE2:
0006CD58 206D 0014                  		movea.l	$14(a5),a0
0006CD5C 1B68 0001 0019             		move.b	1(a0),$19(a5)
0006CD62 4A2D 001B                  		tst.b	$1B(a5)
0006CD66 6600                       		bne.s	loc_71DFE
0006CD68 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0006CD6E 442D 001A                  		neg.b	$1A(a5)
0006CD72 4E75                       		rts	
0006CD74                            ; ===========================================================================
0006CD74                            
0006CD74                            loc_71DFE:
0006CD74 532D 001B                  		subq.b	#1,$1B(a5)
0006CD78 1C2D 001A                  		move.b	$1A(a5),d6
0006CD7C 4886                       		ext.w	d6
0006CD7E DC6D 001C                  		add.w	$1C(a5),d6
0006CD82 3B46 001C                  		move.w	d6,$1C(a5)
0006CD86 DC6D 0010                  		add.w	$10(a5),d6
0006CD8A 594F                       		subq.w	#4,sp
0006CD8C                            
0006CD8C                            locret_71E16:
0006CD8C 4E75                       		rts	
0006CD8E                            ; End of function sub_71DC6
0006CD8E                            
0006CD8E                            
0006CD8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CD8E                            
0006CD8E                            
0006CD8E                            sub_71E18:				; XREF: sub_71CCA
0006CD8E 0815 0001                  		btst	#1,(a5)
0006CD92 6600                       		bne.s	locret_71E48
0006CD94 3C2D 0010                  		move.w	$10(a5),d6
0006CD98 6700                       		beq.s	loc_71E4A
0006CD9A                            
0006CD9A                            loc_71E24:				; XREF: sub_71CCA
0006CD9A 102D 001E                  		move.b	$1E(a5),d0
0006CD9E 4880                       		ext.w	d0
0006CDA0 DC40                       		add.w	d0,d6
0006CDA2 0815 0002                  		btst	#2,(a5)
0006CDA6 6600                       		bne.s	locret_71E48
0006CDA8 3206                       		move.w	d6,d1
0006CDAA E049                       		lsr.w	#8,d1
0006CDAC 103C 00A4                  		move.b	#-$5C,d0
0006CDB0 4EBA 0000                  		jsr	sub_72722(pc)
0006CDB4 1206                       		move.b	d6,d1
0006CDB6 103C 00A0                  		move.b	#-$60,d0
0006CDBA 4EBA 0000                  		jsr	sub_72722(pc)
0006CDBE                            
0006CDBE                            locret_71E48:
0006CDBE 4E75                       		rts	
0006CDC0                            ; ===========================================================================
0006CDC0                            
0006CDC0                            loc_71E4A:
0006CDC0 08D5 0001                  		bset	#1,(a5)
0006CDC4 4E75                       		rts	
0006CDC6                            ; End of function sub_71E18
0006CDC6                            
0006CDC6                            ; ===========================================================================
0006CDC6                            
0006CDC6                            loc_71E50:				; XREF: sub_71B4C
0006CDC6 6B00                       		bmi.s	loc_71E94
0006CDC8 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0006CDCE 6700 0000                  		beq.w	loc_71EFE
0006CDD2 1D7C 0002 0003             		move.b	#2,3(a6)
0006CDD8 7602                       		moveq	#2,d3
0006CDDA 103C 00B4                  		move.b	#-$4C,d0
0006CDDE 7200                       		moveq	#0,d1
0006CDE0                            
0006CDE0                            loc_71E6A:
0006CDE0 4EBA 0000                  		jsr	sub_7272E(pc)
0006CDE4 4EBA 0000                  		jsr	sub_72764(pc)
0006CDE8 5200                       		addq.b	#1,d0
0006CDEA 51CB FFF4                  		dbf	d3,loc_71E6A
0006CDEE                            
0006CDEE 7602                       		moveq	#2,d3
0006CDF0 7028                       		moveq	#$28,d0
0006CDF2                            
0006CDF2                            loc_71E7C:
0006CDF2 1203                       		move.b	d3,d1
0006CDF4 4EBA 0000                  		jsr	sub_7272E(pc)
0006CDF8 5801                       		addq.b	#4,d1
0006CDFA 4EBA 0000                  		jsr	sub_7272E(pc)
0006CDFE 51CB FFF2                  		dbf	d3,loc_71E7C
0006CE02                            
0006CE02 4EBA 0000                  		jsr	sub_729B6(pc)
0006CE06 6000 FDB2                  		bra.w	loc_71C44
0006CE0A                            ; ===========================================================================
0006CE0A                            
0006CE0A                            loc_71E94:				; XREF: loc_71E50
0006CE0A 422E 0003                  		clr.b	3(a6)
0006CE0E 7630                       		moveq	#$30,d3
0006CE10 4BEE 0040                  		lea	$40(a6),a5
0006CE14 7806                       		moveq	#6,d4
0006CE16                            
0006CE16                            loc_71EA0:
0006CE16 0815 0007                  		btst	#7,(a5)
0006CE1A 6700                       		beq.s	loc_71EB8
0006CE1C 0815 0002                  		btst	#2,(a5)
0006CE20 6600                       		bne.s	loc_71EB8
0006CE22 103C 00B4                  		move.b	#-$4C,d0
0006CE26 122D 000A                  		move.b	$A(a5),d1
0006CE2A 4EBA 0000                  		jsr	sub_72722(pc)
0006CE2E                            
0006CE2E                            loc_71EB8:
0006CE2E DAC3                       		adda.w	d3,a5
0006CE30 51CC FFE4                  		dbf	d4,loc_71EA0
0006CE34                            
0006CE34 4BEE 0220                  		lea	$220(a6),a5
0006CE38 7802                       		moveq	#2,d4
0006CE3A                            
0006CE3A                            loc_71EC4:
0006CE3A 0815 0007                  		btst	#7,(a5)
0006CE3E 6700                       		beq.s	loc_71EDC
0006CE40 0815 0002                  		btst	#2,(a5)
0006CE44 6600                       		bne.s	loc_71EDC
0006CE46 103C 00B4                  		move.b	#-$4C,d0
0006CE4A 122D 000A                  		move.b	$A(a5),d1
0006CE4E 4EBA 0000                  		jsr	sub_72722(pc)
0006CE52                            
0006CE52                            loc_71EDC:
0006CE52 DAC3                       		adda.w	d3,a5
0006CE54 51CC FFE4                  		dbf	d4,loc_71EC4
0006CE58                            
0006CE58 4BEE 0340                  		lea	$340(a6),a5
0006CE5C 0815 0007                  		btst	#7,(a5)
0006CE60 6700                       		beq.s	loc_71EFE
0006CE62 0815 0002                  		btst	#2,(a5)
0006CE66 6600                       		bne.s	loc_71EFE
0006CE68 103C 00B4                  		move.b	#-$4C,d0
0006CE6C 122D 000A                  		move.b	$A(a5),d1
0006CE70 4EBA 0000                  		jsr	sub_72722(pc)
0006CE74                            
0006CE74                            loc_71EFE:
0006CE74 6000 FD44                  		bra.w	loc_71C44
0006CE78                            
0006CE78                            ; ---------------------------------------------------------------------------
0006CE78                            ; Subroutine to	play a sound or	music track
0006CE78                            ; ---------------------------------------------------------------------------
0006CE78                            
0006CE78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CE78                            
0006CE78                            
0006CE78                            Sound_Play:				; XREF: sub_71B4C
0006CE78 2079 0006 C906             		movea.l	(Go_SoundTypes).l,a0
0006CE7E 43EE 000A                  		lea	$A(a6),a1	; load music track number
0006CE82 1616                       		move.b	0(a6),d3
0006CE84 7802                       		moveq	#2,d4
0006CE86                            
0006CE86                            loc_71F12:
0006CE86 1011                       		move.b	(a1),d0		; move track number to d0
0006CE88 1200                       		move.b	d0,d1
0006CE8A 4219                       		clr.b	(a1)+
0006CE8C 0400 0081                  		subi.b	#$81,d0
0006CE90 6500                       		bcs.s	loc_71F3E
0006CE92 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006CE98 6700                       		beq.s	loc_71F2C
0006CE9A 1D41 000A                  		move.b	d1,$A(a6)
0006CE9E 6000                       		bra.s	loc_71F3E
0006CEA0                            ; ===========================================================================
0006CEA0                            
0006CEA0                            loc_71F2C:
0006CEA0 0240 007F                  		andi.w	#$7F,d0
0006CEA4 1430 0000                  		move.b	(a0,d0.w),d2
0006CEA8 B403                       		cmp.b	d3,d2
0006CEAA 6500                       		bcs.s	loc_71F3E
0006CEAC 1602                       		move.b	d2,d3
0006CEAE 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0006CEB2                            
0006CEB2                            loc_71F3E:
0006CEB2 51CC FFD2                  		dbf	d4,loc_71F12
0006CEB6                            
0006CEB6 4A03                       		tst.b	d3
0006CEB8 6B00                       		bmi.s	locret_71F4A
0006CEBA 1C83                       		move.b	d3,0(a6)
0006CEBC                            
0006CEBC                            locret_71F4A:
0006CEBC 4E75                       		rts	
0006CEBE                            ; End of function Sound_Play
0006CEBE                            
0006CEBE                            
0006CEBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CEBE                            
0006CEBE                            
0006CEBE                            Sound_ChkValue:				; XREF: sub_71B4C
0006CEBE 7E00                       		moveq	#0,d7
0006CEC0 1E2E 0009                  		move.b	9(a6),d7
0006CEC4 6700 0000                  		beq.w	Sound_E4
0006CEC8 6A00                       		bpl.s	locret_71F8C
0006CECA 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0006CED0 0C07 009F                  		cmpi.b	#$9F,d7
0006CED4 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0006CED8 0C07 00A0                  		cmpi.b	#$A0,d7
0006CEDC 6500 0000                  		bcs.w	locret_71F8C
0006CEE0 0C07 00CF                  		cmpi.b	#$CF,d7
0006CEE4 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0006CEE8 0C07 00D0                  		cmpi.b	#$D0,d7
0006CEEC 6500 0000                  		bcs.w	locret_71F8C
0006CEF0 0C07 00E0                  		cmpi.b	#$E0,d7
0006CEF4 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0006CEF8 0C07 00E4                  		cmpi.b	#$E4,d7
0006CEFC 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0006CEFE                            
0006CEFE                            locret_71F8C:
0006CEFE 4E75                       		rts	
0006CF00                            ; ===========================================================================
0006CF00                            
0006CF00                            Sound_E0toE4:				; XREF: Sound_ChkValue
0006CF00 0407 00E0                  		subi.b	#$E0,d7
0006CF04 E54F                       		lsl.w	#2,d7
0006CF06 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0006CF0A                            ; ===========================================================================
0006CF0A                            
0006CF0A                            Sound_ExIndex:
0006CF0A 6000 0000                  		bra.w	Sound_E0
0006CF0E                            ; ===========================================================================
0006CF0E 6000 0000                  		bra.w	Sound_E1
0006CF12                            ; ===========================================================================
0006CF12 6000 0000                  		bra.w	Sound_E2
0006CF16                            ; ===========================================================================
0006CF16 6000 0000                  		bra.w	Sound_E3
0006CF1A                            ; ===========================================================================
0006CF1A 6000 0000                  		bra.w	Sound_E4
0006CF1E                            ; ===========================================================================
0006CF1E                            ; ---------------------------------------------------------------------------
0006CF1E                            ; Play "Say-gaa" PCM sound
0006CF1E                            ; ---------------------------------------------------------------------------
0006CF1E                            
0006CF1E                            Sound_E1:				  
0006CF1E 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0006CF24 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0006CF2A 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0006CF32                            PlayPCM_Loop:	  
0006CF32 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0006CF38 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0006CF3C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0006CF40 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0006CF42 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0006CF44 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0006CF48 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0006CF4E 4EB8 11F4                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0006CF52 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0006CF58 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0006CF5A 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0006CF5C                            return_PlayPCM: 
0006CF5C 584F                       		addq.w	#4,sp 
0006CF5E 4E75                       		rts
0006CF60                            ; ===========================================================================
0006CF60                            ; ---------------------------------------------------------------------------
0006CF60                            ; Play music track $81-$9F
0006CF60                            ; ---------------------------------------------------------------------------
0006CF60                            
0006CF60                            Sound_81to9F:				; XREF: Sound_ChkValue
0006CF60 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0006CF64 6600                       		bne.s	loc_72024	; if not, branch
0006CF66 4A2E 0027                  		tst.b	$27(a6)
0006CF6A 6600 0000                  		bne.w	loc_721B6
0006CF6E 4BEE 0040                  		lea	$40(a6),a5
0006CF72 7009                       		moveq	#9,d0
0006CF74                            
0006CF74                            loc_71FE6:
0006CF74 0895 0002                  		bclr	#2,(a5)
0006CF78 DAFC 0030                  		adda.w	#$30,a5
0006CF7C 51C8 FFF6                  		dbf	d0,loc_71FE6
0006CF80                            
0006CF80 4BEE 0220                  		lea	$220(a6),a5
0006CF84 7005                       		moveq	#5,d0
0006CF86                            
0006CF86                            loc_71FF8:
0006CF86 0895 0007                  		bclr	#7,(a5)
0006CF8A DAFC 0030                  		adda.w	#$30,a5
0006CF8E 51C8 FFF6                  		dbf	d0,loc_71FF8
0006CF92 4216                       		clr.b	0(a6)
0006CF94 204E                       		movea.l	a6,a0
0006CF96 43EE 03A0                  		lea	$3A0(a6),a1
0006CF9A 303C 0087                  		move.w	#$87,d0
0006CF9E                            
0006CF9E                            loc_72012:
0006CF9E 22D8                       		move.l	(a0)+,(a1)+
0006CFA0 51C8 FFFC                  		dbf	d0,loc_72012
0006CFA4                            
0006CFA4 1D7C 0080 0027             		move.b	#$80,$27(a6)
0006CFAA 4216                       		clr.b	0(a6)
0006CFAC 6000                       		bra.s	loc_7202C
0006CFAE                            ; ===========================================================================
0006CFAE                            
0006CFAE                            loc_72024:
0006CFAE 422E 0027                  		clr.b	$27(a6)
0006CFB2 422E 0026                  		clr.b	$26(a6)
0006CFB6                            
0006CFB6                            loc_7202C:
0006CFB6 4EBA 0000                  		jsr	sub_725CA(pc)
0006CFBA 2879 0006 C916             		movea.l	(off_719A0).l,a4
0006CFC0 0407 0081                  		subi.b	#$81,d7
0006CFC4 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0006CFCA 2879 0006 C90E             		movea.l	(Go_MusicIndex).l,a4
0006CFD0 E54F                       		lsl.w	#2,d7
0006CFD2 2874 7000                  		movea.l	(a4,d7.w),a4
0006CFD6 7000                       		moveq	#0,d0
0006CFD8 3014                       		move.w	(a4),d0
0006CFDA D08C                       		add.l	a4,d0
0006CFDC 2D40 0018                  		move.l	d0,$18(a6)
0006CFE0 102C 0005                  		move.b	5(a4),d0
0006CFE4 1D40 0028                  		move.b	d0,$28(a6)
0006CFE8 4A2E 002A                  		tst.b	$2A(a6)
0006CFEC 6700                       		beq.s	loc_72068
0006CFEE 102E 0029                  		move.b	$29(a6),d0
0006CFF2                            
0006CFF2                            loc_72068:
0006CFF2 1D40 0002                  		move.b	d0,2(a6)
0006CFF6 1D40 0001                  		move.b	d0,1(a6)
0006CFFA 7200                       		moveq	#0,d1
0006CFFC 264C                       		movea.l	a4,a3
0006CFFE 5C4C                       		addq.w	#6,a4
0006D000 7E00                       		moveq	#0,d7
0006D002 1E2B 0002                  		move.b	2(a3),d7
0006D006 6700 0000                  		beq.w	loc_72114
0006D00A 5307                       		subq.b	#1,d7
0006D00C 123C 00C0                  		move.b	#-$40,d1
0006D010 182B 0004                  		move.b	4(a3),d4
0006D014 7C30                       		moveq	#$30,d6
0006D016 1A3C 0001                  		move.b	#1,d5
0006D01A 43EE 0040                  		lea	$40(a6),a1
0006D01E 45FA 0000                  		lea	byte_721BA(pc),a2
0006D022                            
0006D022                            loc_72098:
0006D022 08D1 0007                  		bset	#7,(a1)
0006D026 135A 0001                  		move.b	(a2)+,1(a1)
0006D02A 1344 0002                  		move.b	d4,2(a1)
0006D02E 1346 000D                  		move.b	d6,$D(a1)
0006D032 1341 000A                  		move.b	d1,$A(a1)
0006D036 1345 000E                  		move.b	d5,$E(a1)
0006D03A 7000                       		moveq	#0,d0
0006D03C 301C                       		move.w	(a4)+,d0
0006D03E D08B                       		add.l	a3,d0
0006D040 2340 0004                  		move.l	d0,4(a1)
0006D044 335C 0008                  		move.w	(a4)+,8(a1)
0006D048 D2C6                       		adda.w	d6,a1
0006D04A 51CF FFD6                  		dbf	d7,loc_72098
0006D04E 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0006D054 6600                       		bne.s	loc_720D8
0006D056 702B                       		moveq	#$2B,d0
0006D058 7200                       		moveq	#0,d1
0006D05A 4EBA 0000                  		jsr	sub_7272E(pc)
0006D05E 6000 0000                  		bra.w	loc_72114
0006D062                            ; ===========================================================================
0006D062                            
0006D062                            loc_720D8:
0006D062 7028                       		moveq	#$28,d0
0006D064 7206                       		moveq	#6,d1
0006D066 4EBA 0000                  		jsr	sub_7272E(pc)
0006D06A 103C 0042                  		move.b	#$42,d0
0006D06E 727F                       		moveq	#$7F,d1
0006D070 4EBA 0000                  		jsr	sub_72764(pc)
0006D074 103C 004A                  		move.b	#$4A,d0
0006D078 727F                       		moveq	#$7F,d1
0006D07A 4EBA 0000                  		jsr	sub_72764(pc)
0006D07E 103C 0046                  		move.b	#$46,d0
0006D082 727F                       		moveq	#$7F,d1
0006D084 4EBA 0000                  		jsr	sub_72764(pc)
0006D088 103C 004E                  		move.b	#$4E,d0
0006D08C 727F                       		moveq	#$7F,d1
0006D08E 4EBA 0000                  		jsr	sub_72764(pc)
0006D092 103C 00B6                  		move.b	#-$4A,d0
0006D096 123C 00C0                  		move.b	#-$40,d1
0006D09A 4EBA 0000                  		jsr	sub_72764(pc)
0006D09E                            
0006D09E                            loc_72114:
0006D09E 7E00                       		moveq	#0,d7
0006D0A0 1E2B 0003                  		move.b	3(a3),d7
0006D0A4 6700                       		beq.s	loc_72154
0006D0A6 5307                       		subq.b	#1,d7
0006D0A8 43EE 0190                  		lea	$190(a6),a1
0006D0AC 45FA 0000                  		lea	byte_721C2(pc),a2
0006D0B0                            
0006D0B0                            loc_72126:
0006D0B0 08D1 0007                  		bset	#7,(a1)
0006D0B4 135A 0001                  		move.b	(a2)+,1(a1)
0006D0B8 1344 0002                  		move.b	d4,2(a1)
0006D0BC 1346 000D                  		move.b	d6,$D(a1)
0006D0C0 1345 000E                  		move.b	d5,$E(a1)
0006D0C4 7000                       		moveq	#0,d0
0006D0C6 301C                       		move.w	(a4)+,d0
0006D0C8 D08B                       		add.l	a3,d0
0006D0CA 2340 0004                  		move.l	d0,4(a1)
0006D0CE 335C 0008                  		move.w	(a4)+,8(a1)
0006D0D2 101C                       		move.b	(a4)+,d0
0006D0D4 135C 000B                  		move.b	(a4)+,$B(a1)
0006D0D8 D2C6                       		adda.w	d6,a1
0006D0DA 51CF FFD4                  		dbf	d7,loc_72126
0006D0DE                            
0006D0DE                            loc_72154:
0006D0DE 43EE 0220                  		lea	$220(a6),a1
0006D0E2 7E05                       		moveq	#5,d7
0006D0E4                            
0006D0E4                            loc_7215A:
0006D0E4 4A11                       		tst.b	(a1)
0006D0E6 6A00 0000                  		bpl.w	loc_7217C
0006D0EA 7000                       		moveq	#0,d0
0006D0EC 1029 0001                  		move.b	1(a1),d0
0006D0F0 6B00                       		bmi.s	loc_7216E
0006D0F2 5500                       		subq.b	#2,d0
0006D0F4 E508                       		lsl.b	#2,d0
0006D0F6 6000                       		bra.s	loc_72170
0006D0F8                            ; ===========================================================================
0006D0F8                            
0006D0F8                            loc_7216E:
0006D0F8 E608                       		lsr.b	#3,d0
0006D0FA                            
0006D0FA                            loc_72170:
0006D0FA 41FA 0000                  		lea	dword_722CC(pc),a0
0006D0FE 2070 0000                  		movea.l	(a0,d0.w),a0
0006D102 08D0 0002                  		bset	#2,(a0)
0006D106                            
0006D106                            loc_7217C:
0006D106 D2C6                       		adda.w	d6,a1
0006D108 51CF FFDA                  		dbf	d7,loc_7215A
0006D10C                            
0006D10C 4A6E 0340                  		tst.w	$340(a6)
0006D110 6A00                       		bpl.s	loc_7218E
0006D112 08EE 0002 0100             		bset	#2,$100(a6)
0006D118                            
0006D118                            loc_7218E:
0006D118 4A6E 0370                  		tst.w	$370(a6)
0006D11C 6A00                       		bpl.s	loc_7219A
0006D11E 08EE 0002 01F0             		bset	#2,$1F0(a6)
0006D124                            
0006D124                            loc_7219A:
0006D124 4BEE 0070                  		lea	$70(a6),a5
0006D128 7805                       		moveq	#5,d4
0006D12A                            
0006D12A                            loc_721A0:
0006D12A 4EBA 0000                  		jsr	sub_726FE(pc)
0006D12E DAC6                       		adda.w	d6,a5
0006D130 51CC FFF8                  		dbf	d4,loc_721A0
0006D134 7802                       		moveq	#2,d4
0006D136                            
0006D136                            loc_721AC:
0006D136 4EBA 0000                  		jsr	sub_729A0(pc)
0006D13A DAC6                       		adda.w	d6,a5
0006D13C 51CC FFF8                  		dbf	d4,loc_721AC
0006D140                            
0006D140                            loc_721B6:
0006D140 584F                       		addq.w	#4,sp
0006D142 4E75                       		rts	
0006D144                            ; ===========================================================================
0006D144 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0006D14C                            		even
0006D14C 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0006D150                            		even
0006D150                            ; ===========================================================================
0006D150                            ; ---------------------------------------------------------------------------
0006D150                            ; Play normal sound effect
0006D150                            ; ---------------------------------------------------------------------------
0006D150                            
0006D150                            Sound_A0toCF:				; XREF: Sound_ChkValue
0006D150 4A2E 0027                  		tst.b	$27(a6)
0006D154 6600 0000                  		bne.w	loc_722C6
0006D158 4A2E 0004                  		tst.b	4(a6)
0006D15C 6600 0000                  		bne.w	loc_722C6
0006D160 4A2E 0024                  		tst.b	$24(a6)
0006D164 6600 0000                  		bne.w	loc_722C6
0006D168 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0006D16C 6600                       		bne.s	Sound_notB5	; if not, branch
0006D16E 4A2E 002B                  		tst.b	$2B(a6)
0006D172 6600                       		bne.s	loc_721EE
0006D174 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0006D178                            
0006D178                            loc_721EE:
0006D178 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0006D17E                            
0006D17E                            Sound_notB5:
0006D17E 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0006D182 6600                       		bne.s	Sound_notA7	; if not, branch
0006D184 4A2E 002C                  		tst.b	$2C(a6)
0006D188 6600 0000                  		bne.w	locret_722C4
0006D18C 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0006D192                            
0006D192                            Sound_notA7:
0006D192 2079 0006 C912             		movea.l	(Go_SoundIndex).l,a0
0006D198 0407 00A0                  		subi.b	#$A0,d7
0006D19C E54F                       		lsl.w	#2,d7
0006D19E 2670 7000                  		movea.l	(a0,d7.w),a3
0006D1A2 224B                       		movea.l	a3,a1
0006D1A4 7200                       		moveq	#0,d1
0006D1A6 3219                       		move.w	(a1)+,d1
0006D1A8 D28B                       		add.l	a3,d1
0006D1AA 1A19                       		move.b	(a1)+,d5
0006D1AC 1E19                       		move.b	(a1)+,d7
0006D1AE 5307                       		subq.b	#1,d7
0006D1B0 7C30                       		moveq	#$30,d6
0006D1B2                            
0006D1B2                            loc_72228:
0006D1B2 7600                       		moveq	#0,d3
0006D1B4 1629 0001                  		move.b	1(a1),d3
0006D1B8 1803                       		move.b	d3,d4
0006D1BA 6B00                       		bmi.s	loc_72244
0006D1BC 5543                       		subq.w	#2,d3
0006D1BE E54B                       		lsl.w	#2,d3
0006D1C0 4BFA 0000                  		lea	dword_722CC(pc),a5
0006D1C4 2A75 3000                  		movea.l	(a5,d3.w),a5
0006D1C8 08D5 0002                  		bset	#2,(a5)
0006D1CC 6000                       		bra.s	loc_7226E
0006D1CE                            ; ===========================================================================
0006D1CE                            
0006D1CE                            loc_72244:
0006D1CE E64B                       		lsr.w	#3,d3
0006D1D0 4BFA 0000                  		lea	dword_722CC(pc),a5
0006D1D4 2A75 3000                  		movea.l	(a5,d3.w),a5
0006D1D8 08D5 0002                  		bset	#2,(a5)
0006D1DC 0C04 00C0                  		cmpi.b	#$C0,d4
0006D1E0 6600                       		bne.s	loc_7226E
0006D1E2 1004                       		move.b	d4,d0
0006D1E4 0000 001F                  		ori.b	#$1F,d0
0006D1E8 13C0 00C0 0011             		move.b	d0,($C00011).l
0006D1EE 0840 0005                  		bchg	#5,d0
0006D1F2 13C0 00C0 0011             		move.b	d0,($C00011).l
0006D1F8                            
0006D1F8                            loc_7226E:
0006D1F8 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0006D1FC 244D                       		movea.l	a5,a2
0006D1FE 700B                       		moveq	#$B,d0
0006D200                            
0006D200                            loc_72276:
0006D200 429A                       		clr.l	(a2)+
0006D202 51C8 FFFC                  		dbf	d0,loc_72276
0006D206                            
0006D206 3A99                       		move.w	(a1)+,(a5)
0006D208 1B45 0002                  		move.b	d5,2(a5)
0006D20C 7000                       		moveq	#0,d0
0006D20E 3019                       		move.w	(a1)+,d0
0006D210 D08B                       		add.l	a3,d0
0006D212 2B40 0004                  		move.l	d0,4(a5)
0006D216 3B59 0008                  		move.w	(a1)+,8(a5)
0006D21A 1B7C 0001 000E             		move.b	#1,$E(a5)
0006D220 1B46 000D                  		move.b	d6,$D(a5)
0006D224 4A04                       		tst.b	d4
0006D226 6B00                       		bmi.s	loc_722A8
0006D228 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006D22E 2B41 0020                  		move.l	d1,$20(a5)
0006D232                            
0006D232                            loc_722A8:
0006D232 51CF FF7E                  		dbf	d7,loc_72228
0006D236                            
0006D236 4A2E 0250                  		tst.b	$250(a6)
0006D23A 6A00                       		bpl.s	loc_722B8
0006D23C 08EE 0002 0340             		bset	#2,$340(a6)
0006D242                            
0006D242                            loc_722B8:
0006D242 4A2E 0310                  		tst.b	$310(a6)
0006D246 6A00                       		bpl.s	locret_722C4
0006D248 08EE 0002 0370             		bset	#2,$370(a6)
0006D24E                            
0006D24E                            locret_722C4:
0006D24E 4E75                       		rts	
0006D250                            ; ===========================================================================
0006D250                            
0006D250                            loc_722C6:
0006D250 4216                       		clr.b	0(a6)
0006D252 4E75                       		rts	
0006D254                            ; ===========================================================================
0006D254 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0006D258 0000 0000                  		dc.l 0
0006D25C 00FF F100                  		dc.l $FFF100
0006D260 00FF F130                  		dc.l $FFF130
0006D264 00FF F190                  		dc.l $FFF190
0006D268 00FF F1C0                  		dc.l $FFF1C0
0006D26C 00FF F1F0                  		dc.l $FFF1F0
0006D270 00FF F1F0                  		dc.l $FFF1F0
0006D274 00FF F220                  dword_722EC:	dc.l $FFF220
0006D278 0000 0000                  		dc.l 0
0006D27C 00FF F250                  		dc.l $FFF250
0006D280 00FF F280                  		dc.l $FFF280
0006D284 00FF F2B0                  		dc.l $FFF2B0
0006D288 00FF F2E0                  		dc.l $FFF2E0
0006D28C 00FF F310                  		dc.l $FFF310
0006D290 00FF F310                  		dc.l $FFF310
0006D294                            ; ===========================================================================
0006D294                            ; ---------------------------------------------------------------------------
0006D294                            ; Play GHZ waterfall sound
0006D294                            ; ---------------------------------------------------------------------------
0006D294                            
0006D294                            Sound_D0toDF:				; XREF: Sound_ChkValue
0006D294 4A2E 0027                  		tst.b	$27(a6)
0006D298 6600 0000                  		bne.w	locret_723C6
0006D29C 4A2E 0004                  		tst.b	4(a6)
0006D2A0 6600 0000                  		bne.w	locret_723C6
0006D2A4 4A2E 0024                  		tst.b	$24(a6)
0006D2A8 6600 0000                  		bne.w	locret_723C6
0006D2AC 2079 0006 C90A             		movea.l	(Go_SoundD0).l,a0
0006D2B2 0407 00D0                  		subi.b	#$D0,d7
0006D2B6 E54F                       		lsl.w	#2,d7
0006D2B8 2670 7000                  		movea.l	(a0,d7.w),a3
0006D2BC 224B                       		movea.l	a3,a1
0006D2BE 7000                       		moveq	#0,d0
0006D2C0 3019                       		move.w	(a1)+,d0
0006D2C2 D08B                       		add.l	a3,d0
0006D2C4 2D40 0020                  		move.l	d0,$20(a6)
0006D2C8 1A19                       		move.b	(a1)+,d5
0006D2CA 1E19                       		move.b	(a1)+,d7
0006D2CC 5307                       		subq.b	#1,d7
0006D2CE 7C30                       		moveq	#$30,d6
0006D2D0                            
0006D2D0                            loc_72348:
0006D2D0 1829 0001                  		move.b	1(a1),d4
0006D2D4 6B00                       		bmi.s	loc_7235A
0006D2D6 08EE 0002 0100             		bset	#2,$100(a6)
0006D2DC 4BEE 0340                  		lea	$340(a6),a5
0006D2E0 6000                       		bra.s	loc_72364
0006D2E2                            ; ===========================================================================
0006D2E2                            
0006D2E2                            loc_7235A:
0006D2E2 08EE 0002 01F0             		bset	#2,$1F0(a6)
0006D2E8 4BEE 0370                  		lea	$370(a6),a5
0006D2EC                            
0006D2EC                            loc_72364:
0006D2EC 244D                       		movea.l	a5,a2
0006D2EE 700B                       		moveq	#$B,d0
0006D2F0                            
0006D2F0                            loc_72368:
0006D2F0 429A                       		clr.l	(a2)+
0006D2F2 51C8 FFFC                  		dbf	d0,loc_72368
0006D2F6                            
0006D2F6 3A99                       		move.w	(a1)+,(a5)
0006D2F8 1B45 0002                  		move.b	d5,2(a5)
0006D2FC 7000                       		moveq	#0,d0
0006D2FE 3019                       		move.w	(a1)+,d0
0006D300 D08B                       		add.l	a3,d0
0006D302 2B40 0004                  		move.l	d0,4(a5)
0006D306 3B59 0008                  		move.w	(a1)+,8(a5)
0006D30A 1B7C 0001 000E             		move.b	#1,$E(a5)
0006D310 1B46 000D                  		move.b	d6,$D(a5)
0006D314 4A04                       		tst.b	d4
0006D316 6B00                       		bmi.s	loc_72396
0006D318 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006D31E                            
0006D31E                            loc_72396:
0006D31E 51CF FFB0                  		dbf	d7,loc_72348
0006D322                            
0006D322 4A2E 0250                  		tst.b	$250(a6)
0006D326 6A00                       		bpl.s	loc_723A6
0006D328 08EE 0002 0340             		bset	#2,$340(a6)
0006D32E                            
0006D32E                            loc_723A6:
0006D32E 4A2E 0310                  		tst.b	$310(a6)
0006D332 6A00                       		bpl.s	locret_723C6
0006D334 08EE 0002 0370             		bset	#2,$370(a6)
0006D33A 0004 001F                  		ori.b	#$1F,d4
0006D33E 13C4 00C0 0011             		move.b	d4,($C00011).l
0006D344 0844 0005                  		bchg	#5,d4
0006D348 13C4 00C0 0011             		move.b	d4,($C00011).l
0006D34E                            
0006D34E                            locret_723C6:
0006D34E 4E75                       		rts	
0006D350                            ; End of function Sound_ChkValue
0006D350                            
0006D350                            ; ===========================================================================
0006D350 00FF F100                  		dc.l $FFF100
0006D354 00FF F1F0                  		dc.l $FFF1F0
0006D358 00FF F250                  		dc.l $FFF250
0006D35C 00FF F310                  		dc.l $FFF310
0006D360 00FF F340                  		dc.l $FFF340
0006D364 00FF F370                  		dc.l $FFF370
0006D368                            
0006D368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D368                            
0006D368                            
0006D368                            Snd_FadeOut1:				; XREF: Sound_E0
0006D368 4216                       		clr.b	0(a6)
0006D36A 4BEE 0220                  		lea	$220(a6),a5
0006D36E 7E05                       		moveq	#5,d7
0006D370                            
0006D370                            loc_723EA:
0006D370 4A15                       		tst.b	(a5)
0006D372 6A00 0000                  		bpl.w	loc_72472
0006D376 0895 0007                  		bclr	#7,(a5)
0006D37A 7600                       		moveq	#0,d3
0006D37C 162D 0001                  		move.b	1(a5),d3
0006D380 6B00                       		bmi.s	loc_7243C
0006D382 4EBA 0000                  		jsr	sub_726FE(pc)
0006D386 0C03 0004                  		cmpi.b	#4,d3
0006D38A 6600                       		bne.s	loc_72416
0006D38C 4A2E 0340                  		tst.b	$340(a6)
0006D390 6A00                       		bpl.s	loc_72416
0006D392 4BEE 0340                  		lea	$340(a6),a5
0006D396 226E 0020                  		movea.l	$20(a6),a1
0006D39A 6000                       		bra.s	loc_72428
0006D39C                            ; ===========================================================================
0006D39C                            
0006D39C                            loc_72416:
0006D39C 5503                       		subq.b	#2,d3
0006D39E E50B                       		lsl.b	#2,d3
0006D3A0 41FA FEB2                  		lea	dword_722CC(pc),a0
0006D3A4 264D                       		movea.l	a5,a3
0006D3A6 2A70 3000                  		movea.l	(a0,d3.w),a5
0006D3AA 226E 0018                  		movea.l	$18(a6),a1
0006D3AE                            
0006D3AE                            loc_72428:
0006D3AE 0895 0002                  		bclr	#2,(a5)
0006D3B2 08D5 0001                  		bset	#1,(a5)
0006D3B6 102D 000B                  		move.b	$B(a5),d0
0006D3BA 4EBA 0000                  		jsr	sub_72C4E(pc)
0006D3BE 2A4B                       		movea.l	a3,a5
0006D3C0 6000                       		bra.s	loc_72472
0006D3C2                            ; ===========================================================================
0006D3C2                            
0006D3C2                            loc_7243C:
0006D3C2 4EBA 0000                  		jsr	sub_729A0(pc)
0006D3C6 41EE 0370                  		lea	$370(a6),a0
0006D3CA 0C03 00E0                  		cmpi.b	#$E0,d3
0006D3CE 6700                       		beq.s	loc_7245A
0006D3D0 0C03 00C0                  		cmpi.b	#$C0,d3
0006D3D4 6700                       		beq.s	loc_7245A
0006D3D6 E60B                       		lsr.b	#3,d3
0006D3D8 41FA FE7A                  		lea	dword_722CC(pc),a0
0006D3DC 2070 3000                  		movea.l	(a0,d3.w),a0
0006D3E0                            
0006D3E0                            loc_7245A:
0006D3E0 0890 0002                  		bclr	#2,(a0)
0006D3E4 08D0 0001                  		bset	#1,(a0)
0006D3E8 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006D3EE 6600                       		bne.s	loc_72472
0006D3F0 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0006D3F8                            
0006D3F8                            loc_72472:
0006D3F8 DAFC 0030                  		adda.w	#$30,a5
0006D3FC 51CF FF72                  		dbf	d7,loc_723EA
0006D400                            
0006D400 4E75                       		rts	
0006D402                            ; End of function Snd_FadeOut1
0006D402                            
0006D402                            
0006D402                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D402                            
0006D402                            
0006D402                            Snd_FadeOut2:				; XREF: Sound_E0
0006D402 4BEE 0340                  		lea	$340(a6),a5
0006D406 4A15                       		tst.b	(a5)
0006D408 6A00                       		bpl.s	loc_724AE
0006D40A 0895 0007                  		bclr	#7,(a5)
0006D40E 0815 0002                  		btst	#2,(a5)
0006D412 6600                       		bne.s	loc_724AE
0006D414 4EBA 0000                  		jsr	loc_7270A(pc)
0006D418 4BEE 0100                  		lea	$100(a6),a5
0006D41C 0895 0002                  		bclr	#2,(a5)
0006D420 08D5 0001                  		bset	#1,(a5)
0006D424 4A15                       		tst.b	(a5)
0006D426 6A00                       		bpl.s	loc_724AE
0006D428 226E 0018                  		movea.l	$18(a6),a1
0006D42C 102D 000B                  		move.b	$B(a5),d0
0006D430 4EBA 0000                  		jsr	sub_72C4E(pc)
0006D434                            
0006D434                            loc_724AE:
0006D434 4BEE 0370                  		lea	$370(a6),a5
0006D438 4A15                       		tst.b	(a5)
0006D43A 6A00                       		bpl.s	locret_724E4
0006D43C 0895 0007                  		bclr	#7,(a5)
0006D440 0815 0002                  		btst	#2,(a5)
0006D444 6600                       		bne.s	locret_724E4
0006D446 4EBA 0000                  		jsr	loc_729A6(pc)
0006D44A 4BEE 01F0                  		lea	$1F0(a6),a5
0006D44E 0895 0002                  		bclr	#2,(a5)
0006D452 08D5 0001                  		bset	#1,(a5)
0006D456 4A15                       		tst.b	(a5)
0006D458 6A00                       		bpl.s	locret_724E4
0006D45A 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0006D460 6600                       		bne.s	locret_724E4
0006D462 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0006D46A                            
0006D46A                            locret_724E4:
0006D46A 4E75                       		rts	
0006D46C                            ; End of function Snd_FadeOut2
0006D46C                            
0006D46C                            ; ===========================================================================
0006D46C                            ; ---------------------------------------------------------------------------
0006D46C                            ; Fade out music
0006D46C                            ; ---------------------------------------------------------------------------
0006D46C                            
0006D46C                            Sound_E0:				; XREF: Sound_ExIndex
0006D46C 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0006D470 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0006D474 1D7C 0003 0006             		move.b	#3,6(a6)
0006D47A 1D7C 0028 0004             		move.b	#$28,4(a6)
0006D480 422E 0040                  		clr.b	$40(a6)
0006D484 422E 002A                  		clr.b	$2A(a6)
0006D488 4E75                       		rts	
0006D48A                            
0006D48A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D48A                            
0006D48A                            
0006D48A                            sub_72504:				; XREF: sub_71B4C
0006D48A 102E 0006                  		move.b	6(a6),d0
0006D48E 6700                       		beq.s	loc_72510
0006D490 532E 0006                  		subq.b	#1,6(a6)
0006D494 4E75                       		rts	
0006D496                            ; ===========================================================================
0006D496                            
0006D496                            loc_72510:
0006D496 532E 0004                  		subq.b	#1,4(a6)
0006D49A 6700 0000                  		beq.w	Sound_E4
0006D49E 1D7C 0003 0006             		move.b	#3,6(a6)
0006D4A4 4BEE 0070                  		lea	$70(a6),a5
0006D4A8 7E05                       		moveq	#5,d7
0006D4AA                            
0006D4AA                            loc_72524:
0006D4AA 4A15                       		tst.b	(a5)
0006D4AC 6A00                       		bpl.s	loc_72538
0006D4AE 522D 0009                  		addq.b	#1,9(a5)
0006D4B2 6A00                       		bpl.s	loc_72534
0006D4B4 0895 0007                  		bclr	#7,(a5)
0006D4B8 6000                       		bra.s	loc_72538
0006D4BA                            ; ===========================================================================
0006D4BA                            
0006D4BA                            loc_72534:
0006D4BA 4EBA 0000                  		jsr	sub_72CB4(pc)
0006D4BE                            
0006D4BE                            loc_72538:
0006D4BE DAFC 0030                  		adda.w	#$30,a5
0006D4C2 51CF FFE6                  		dbf	d7,loc_72524
0006D4C6                            
0006D4C6 7E02                       		moveq	#2,d7
0006D4C8                            
0006D4C8                            loc_72542:
0006D4C8 4A15                       		tst.b	(a5)
0006D4CA 6A00                       		bpl.s	loc_72560
0006D4CC 522D 0009                  		addq.b	#1,9(a5)
0006D4D0 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0006D4D6 6500                       		bcs.s	loc_72558
0006D4D8 0895 0007                  		bclr	#7,(a5)
0006D4DC 6000                       		bra.s	loc_72560
0006D4DE                            ; ===========================================================================
0006D4DE                            
0006D4DE                            loc_72558:
0006D4DE 1C2D 0009                  		move.b	9(a5),d6
0006D4E2 4EBA 0000                  		jsr	sub_7296A(pc)
0006D4E6                            
0006D4E6                            loc_72560:
0006D4E6 DAFC 0030                  		adda.w	#$30,a5
0006D4EA 51CF FFDC                  		dbf	d7,loc_72542
0006D4EE                            
0006D4EE 4E75                       		rts	
0006D4F0                            ; End of function sub_72504
0006D4F0                            
0006D4F0                            
0006D4F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D4F0                            
0006D4F0                            
0006D4F0                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0006D4F0 7602                       		moveq	#2,d3
0006D4F2 7028                       		moveq	#$28,d0
0006D4F4                            
0006D4F4                            loc_7256E:
0006D4F4 1203                       		move.b	d3,d1
0006D4F6 4EBA 0000                  		jsr	sub_7272E(pc)
0006D4FA 5801                       		addq.b	#4,d1
0006D4FC 4EBA 0000                  		jsr	sub_7272E(pc)
0006D500 51CB FFF2                  		dbf	d3,loc_7256E
0006D504                            
0006D504 7040                       		moveq	#$40,d0
0006D506 727F                       		moveq	#$7F,d1
0006D508 7802                       		moveq	#2,d4
0006D50A                            
0006D50A                            loc_72584:
0006D50A 7603                       		moveq	#3,d3
0006D50C                            
0006D50C                            loc_72586:
0006D50C 4EBA 0000                  		jsr	sub_7272E(pc)
0006D510 4EBA 0000                  		jsr	sub_72764(pc)
0006D514 5840                       		addq.w	#4,d0
0006D516 51CB FFF4                  		dbf	d3,loc_72586
0006D51A                            
0006D51A 0400 000F                  		subi.b	#$F,d0
0006D51E 51CC FFEA                  		dbf	d4,loc_72584
0006D522                            
0006D522 4E75                       		rts	
0006D524                            ; End of function sub_7256A
0006D524                            
0006D524                            ; ===========================================================================
0006D524                            ; ---------------------------------------------------------------------------
0006D524                            ; Stop music
0006D524                            ; ---------------------------------------------------------------------------
0006D524                            
0006D524                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0006D524 702B                       		moveq	#$2B,d0
0006D526 123C 0080                  		move.b	#$80,d1
0006D52A 4EBA 0000                  		jsr	sub_7272E(pc)
0006D52E 7027                       		moveq	#$27,d0
0006D530 7200                       		moveq	#0,d1
0006D532 4EBA 0000                  		jsr	sub_7272E(pc)
0006D536 204E                       		movea.l	a6,a0
0006D538 303C 00E3                  		move.w	#$E3,d0
0006D53C                            
0006D53C                            loc_725B6:
0006D53C 4298                       		clr.l	(a0)+
0006D53E 51C8 FFFC                  		dbf	d0,loc_725B6
0006D542                            
0006D542 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0006D548 4EBA FFA6                  		jsr	sub_7256A(pc)
0006D54C 6000 0000                  		bra.w	sub_729B6
0006D550                            
0006D550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D550                            
0006D550                            
0006D550                            sub_725CA:				; XREF: Sound_ChkValue
0006D550 204E                       		movea.l	a6,a0
0006D552 1216                       		move.b	0(a6),d1
0006D554 142E 0027                  		move.b	$27(a6),d2
0006D558 162E 002A                  		move.b	$2A(a6),d3
0006D55C 182E 0026                  		move.b	$26(a6),d4
0006D560 3A2E 000A                  		move.w	$A(a6),d5
0006D564 303C 0087                  		move.w	#$87,d0
0006D568                            
0006D568                            loc_725E4:
0006D568 4298                       		clr.l	(a0)+
0006D56A 51C8 FFFC                  		dbf	d0,loc_725E4
0006D56E                            
0006D56E 1C81                       		move.b	d1,0(a6)
0006D570 1D42 0027                  		move.b	d2,$27(a6)
0006D574 1D43 002A                  		move.b	d3,$2A(a6)
0006D578 1D44 0026                  		move.b	d4,$26(a6)
0006D57C 3D45 000A                  		move.w	d5,$A(a6)
0006D580 1D7C 0080 0009             		move.b	#$80,9(a6)
0006D586 4EBA FF68                  		jsr	sub_7256A(pc)
0006D58A 6000 0000                  		bra.w	sub_729B6
0006D58E                            ; End of function sub_725CA
0006D58E                            
0006D58E                            
0006D58E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D58E                            
0006D58E                            
0006D58E                            sub_7260C:				; XREF: sub_71B4C
0006D58E 1D6E 0002 0001             		move.b	2(a6),1(a6)
0006D594 41EE 004E                  		lea	$4E(a6),a0
0006D598 7030                       		moveq	#$30,d0
0006D59A 7209                       		moveq	#9,d1
0006D59C                            
0006D59C                            loc_7261A:
0006D59C 5210                       		addq.b	#1,(a0)
0006D59E D0C0                       		adda.w	d0,a0
0006D5A0 51C9 FFFA                  		dbf	d1,loc_7261A
0006D5A4                            
0006D5A4 4E75                       		rts	
0006D5A6                            ; End of function sub_7260C
0006D5A6                            
0006D5A6                            ; ===========================================================================
0006D5A6                            ; ---------------------------------------------------------------------------
0006D5A6                            ; Speed	up music
0006D5A6                            ; ---------------------------------------------------------------------------
0006D5A6                            
0006D5A6                            Sound_E2:				; XREF: Sound_ExIndex
0006D5A6 4A2E 0027                  		tst.b	$27(a6)
0006D5AA 6600                       		bne.s	loc_7263E
0006D5AC 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0006D5B2 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0006D5B8 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0006D5BE 4E75                       		rts	
0006D5C0                            ; ===========================================================================
0006D5C0                            
0006D5C0                            loc_7263E:
0006D5C0 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0006D5C6 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0006D5CC 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0006D5D2 4E75                       		rts	
0006D5D4                            ; ===========================================================================
0006D5D4                            ; ---------------------------------------------------------------------------
0006D5D4                            ; Change music back to normal speed
0006D5D4                            ; ---------------------------------------------------------------------------
0006D5D4                            
0006D5D4                            Sound_E3:				; XREF: Sound_ExIndex
0006D5D4 4A2E 0027                  		tst.b	$27(a6)
0006D5D8 6600                       		bne.s	loc_7266A
0006D5DA 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0006D5E0 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0006D5E6 422E 002A                  		clr.b	$2A(a6)
0006D5EA 4E75                       		rts	
0006D5EC                            ; ===========================================================================
0006D5EC                            
0006D5EC                            loc_7266A:
0006D5EC 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0006D5F2 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0006D5F8 422E 03CA                  		clr.b	$3CA(a6)
0006D5FC 4E75                       		rts	
0006D5FE                            
0006D5FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D5FE                            
0006D5FE                            
0006D5FE                            sub_7267C:				; XREF: sub_71B4C
0006D5FE 4A2E 0025                  		tst.b	$25(a6)
0006D602 6700                       		beq.s	loc_72688
0006D604 532E 0025                  		subq.b	#1,$25(a6)
0006D608 4E75                       		rts	
0006D60A                            ; ===========================================================================
0006D60A                            
0006D60A                            loc_72688:
0006D60A 4A2E 0026                  		tst.b	$26(a6)
0006D60E 6700                       		beq.s	loc_726D6
0006D610 532E 0026                  		subq.b	#1,$26(a6)
0006D614 1D7C 0002 0025             		move.b	#2,$25(a6)
0006D61A 4BEE 0070                  		lea	$70(a6),a5
0006D61E 7E05                       		moveq	#5,d7
0006D620                            
0006D620                            loc_7269E:
0006D620 4A15                       		tst.b	(a5)
0006D622 6A00                       		bpl.s	loc_726AA
0006D624 532D 0009                  		subq.b	#1,9(a5)
0006D628 4EBA 0000                  		jsr	sub_72CB4(pc)
0006D62C                            
0006D62C                            loc_726AA:
0006D62C DAFC 0030                  		adda.w	#$30,a5
0006D630 51CF FFEE                  		dbf	d7,loc_7269E
0006D634 7E02                       		moveq	#2,d7
0006D636                            
0006D636                            loc_726B4:
0006D636 4A15                       		tst.b	(a5)
0006D638 6A00                       		bpl.s	loc_726CC
0006D63A 532D 0009                  		subq.b	#1,9(a5)
0006D63E 1C2D 0009                  		move.b	9(a5),d6
0006D642 0C06 0010                  		cmpi.b	#$10,d6
0006D646 6500                       		bcs.s	loc_726C8
0006D648 7C0F                       		moveq	#$F,d6
0006D64A                            
0006D64A                            loc_726C8:
0006D64A 4EBA 0000                  		jsr	sub_7296A(pc)
0006D64E                            
0006D64E                            loc_726CC:
0006D64E DAFC 0030                  		adda.w	#$30,a5
0006D652 51CF FFE2                  		dbf	d7,loc_726B4
0006D656 4E75                       		rts	
0006D658                            ; ===========================================================================
0006D658                            
0006D658                            loc_726D6:
0006D658 08AE 0002 0040             		bclr	#2,$40(a6)
0006D65E 422E 0024                  		clr.b	$24(a6)
0006D662 4E75                       		rts	
0006D664                            ; End of function sub_7267C
0006D664                            
0006D664                            ; ===========================================================================
0006D664                            
0006D664                            loc_726E2:				; XREF: sub_71CCA
0006D664 0815 0001                  		btst	#1,(a5)
0006D668 6600                       		bne.s	locret_726FC
0006D66A 0815 0002                  		btst	#2,(a5)
0006D66E 6600                       		bne.s	locret_726FC
0006D670 7028                       		moveq	#$28,d0
0006D672 122D 0001                  		move.b	1(a5),d1
0006D676 0001 00F0                  		ori.b	#-$10,d1
0006D67A 6000 0000                  		bra.w	sub_7272E
0006D67E                            ; ===========================================================================
0006D67E                            
0006D67E                            locret_726FC:
0006D67E 4E75                       		rts	
0006D680                            
0006D680                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D680                            
0006D680                            
0006D680                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0006D680 0815 0004                  		btst	#4,(a5)
0006D684 6600                       		bne.s	locret_72714
0006D686 0815 0002                  		btst	#2,(a5)
0006D68A 6600                       		bne.s	locret_72714
0006D68C                            
0006D68C                            loc_7270A:				; XREF: Snd_FadeOut2
0006D68C 7028                       		moveq	#$28,d0
0006D68E 122D 0001                  		move.b	1(a5),d1
0006D692 6000 0000                  		bra.w	sub_7272E
0006D696                            ; ===========================================================================
0006D696                            
0006D696                            locret_72714:
0006D696 4E75                       		rts	
0006D698                            ; End of function sub_726FE
0006D698                            
0006D698                            ; ===========================================================================
0006D698                            
0006D698                            loc_72716:				; XREF: sub_72A5A
0006D698 0815 0002                  		btst	#2,(a5)
0006D69C 6600                       		bne.s	locret_72720
0006D69E 6000 0000                  		bra.w	sub_72722
0006D6A2                            ; ===========================================================================
0006D6A2                            
0006D6A2                            locret_72720:
0006D6A2 4E75                       		rts	
0006D6A4                            
0006D6A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D6A4                            
0006D6A4                            
0006D6A4                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0006D6A4 082D 0002 0001             		btst	#2,1(a5)
0006D6AA 6600                       		bne.s	loc_7275A
0006D6AC D02D 0001                  		add.b	1(a5),d0
0006D6B0                            ; End of function sub_72722
0006D6B0                            
0006D6B0                            
0006D6B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D6B0                            
0006D6B0                            
0006D6B0                            sub_7272E:				; XREF: loc_71E6A
0006D6B0 1439 00A0 4000             		move.b	($A04000).l,d2
0006D6B6 0802 0007                  		btst	#7,d2
0006D6BA 66F4                       		bne.s	sub_7272E
0006D6BC 13C0 00A0 4000             		move.b	d0,($A04000).l
0006D6C2 4E71                       		nop	
0006D6C4 4E71                       		nop	
0006D6C6 4E71                       		nop	
0006D6C8                            
0006D6C8                            loc_72746:
0006D6C8 1439 00A0 4000             		move.b	($A04000).l,d2
0006D6CE 0802 0007                  		btst	#7,d2
0006D6D2 66F4                       		bne.s	loc_72746
0006D6D4                            
0006D6D4 13C1 00A0 4001             		move.b	d1,($A04001).l
0006D6DA 4E75                       		rts	
0006D6DC                            ; End of function sub_7272E
0006D6DC                            
0006D6DC                            ; ===========================================================================
0006D6DC                            
0006D6DC                            loc_7275A:				; XREF: sub_72722
0006D6DC 142D 0001                  		move.b	1(a5),d2
0006D6E0 0882 0002                  		bclr	#2,d2
0006D6E4 D002                       		add.b	d2,d0
0006D6E6                            
0006D6E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D6E6                            
0006D6E6                            
0006D6E6                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0006D6E6 1439 00A0 4000             		move.b	($A04000).l,d2
0006D6EC 0802 0007                  		btst	#7,d2
0006D6F0 66F4                       		bne.s	sub_72764
0006D6F2 13C0 00A0 4002             		move.b	d0,($A04002).l
0006D6F8 4E71                       		nop	
0006D6FA 4E71                       		nop	
0006D6FC 4E71                       		nop	
0006D6FE                            
0006D6FE                            loc_7277C:
0006D6FE 1439 00A0 4000             		move.b	($A04000).l,d2
0006D704 0802 0007                  		btst	#7,d2
0006D708 66F4                       		bne.s	loc_7277C
0006D70A                            
0006D70A 13C1 00A0 4003             		move.b	d1,($A04003).l
0006D710 4E75                       		rts	
0006D712                            ; End of function sub_72764
0006D712                            
0006D712                            ; ===========================================================================
0006D712 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0006D724 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0006D736 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0006D746 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0006D756 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0006D766 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0006D776 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0006D786 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0006D796 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0006D7A6 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0006D7B6 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0006D7C6 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0006D7D2                            
0006D7D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D7D2                            
0006D7D2                            
0006D7D2                            sub_72850:				; XREF: sub_71B4C
0006D7D2 532D 000E                  		subq.b	#1,$E(a5)
0006D7D6 6600                       		bne.s	loc_72866
0006D7D8 0895 0004                  		bclr	#4,(a5)
0006D7DC 4EBA 0000                  		jsr	sub_72878(pc)
0006D7E0 4EBA 0000                  		jsr	sub_728DC(pc)
0006D7E4 6000 0000                  		bra.w	loc_7292E
0006D7E8                            ; ===========================================================================
0006D7E8                            
0006D7E8                            loc_72866:
0006D7E8 4EBA F52A                  		jsr	sub_71D9E(pc)
0006D7EC 4EBA 0000                  		jsr	sub_72926(pc)
0006D7F0 4EBA F54A                  		jsr	sub_71DC6(pc)
0006D7F4 4EBA 0000                  		jsr	sub_728E2(pc)
0006D7F8 4E75                       		rts	
0006D7FA                            ; End of function sub_72850
0006D7FA                            
0006D7FA                            
0006D7FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D7FA                            
0006D7FA                            
0006D7FA                            sub_72878:				; XREF: sub_72850
0006D7FA 0895 0001                  		bclr	#1,(a5)
0006D7FE 286D 0004                  		movea.l	4(a5),a4
0006D802                            
0006D802                            loc_72880:
0006D802 7A00                       		moveq	#0,d5
0006D804 1A1C                       		move.b	(a4)+,d5
0006D806 0C05 00E0                  		cmpi.b	#$E0,d5
0006D80A 6500                       		bcs.s	loc_72890
0006D80C 4EBA 0000                  		jsr	sub_72A5A(pc)
0006D810 60F0                       		bra.s	loc_72880
0006D812                            ; ===========================================================================
0006D812                            
0006D812                            loc_72890:
0006D812 4A05                       		tst.b	d5
0006D814 6A00                       		bpl.s	loc_728A4
0006D816 4EBA 0000                  		jsr	sub_728AC(pc)
0006D81A 1A1C                       		move.b	(a4)+,d5
0006D81C 4A05                       		tst.b	d5
0006D81E 6A00                       		bpl.s	loc_728A4
0006D820 534C                       		subq.w	#1,a4
0006D822 6000 F4B2                  		bra.w	sub_71D60
0006D826                            ; ===========================================================================
0006D826                            
0006D826                            loc_728A4:
0006D826 4EBA F48E                  		jsr	sub_71D40(pc)
0006D82A 6000 F4AA                  		bra.w	sub_71D60
0006D82E                            ; End of function sub_72878
0006D82E                            
0006D82E                            
0006D82E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D82E                            
0006D82E                            
0006D82E                            sub_728AC:				; XREF: sub_72878
0006D82E 0405 0081                  		subi.b	#$81,d5
0006D832 6500                       		bcs.s	loc_728CA
0006D834 DA2D 0008                  		add.b	8(a5),d5
0006D838 0245 007F                  		andi.w	#$7F,d5
0006D83C E34D                       		lsl.w	#1,d5
0006D83E 41FA 0000                  		lea	word_729CE(pc),a0
0006D842 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0006D848 6000 F48C                  		bra.w	sub_71D60
0006D84C                            ; ===========================================================================
0006D84C                            
0006D84C                            loc_728CA:
0006D84C 08D5 0001                  		bset	#1,(a5)
0006D850 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0006D856 4EBA F47E                  		jsr	sub_71D60(pc)
0006D85A 6000 0000                  		bra.w	sub_729A0
0006D85E                            ; End of function sub_728AC
0006D85E                            
0006D85E                            
0006D85E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D85E                            
0006D85E                            
0006D85E                            sub_728DC:				; XREF: sub_72850
0006D85E 3C2D 0010                  		move.w	$10(a5),d6
0006D862 6B00                       		bmi.s	loc_72920
0006D864                            ; End of function sub_728DC
0006D864                            
0006D864                            
0006D864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D864                            
0006D864                            
0006D864                            sub_728E2:				; XREF: sub_72850
0006D864 102D 001E                  		move.b	$1E(a5),d0
0006D868 4880                       		ext.w	d0
0006D86A DC40                       		add.w	d0,d6
0006D86C 0815 0002                  		btst	#2,(a5)
0006D870 6600                       		bne.s	locret_7291E
0006D872 0815 0001                  		btst	#1,(a5)
0006D876 6600                       		bne.s	locret_7291E
0006D878 102D 0001                  		move.b	1(a5),d0
0006D87C 0C00 00E0                  		cmpi.b	#$E0,d0
0006D880 6600                       		bne.s	loc_72904
0006D882 103C 00C0                  		move.b	#$C0,d0
0006D886                            
0006D886                            loc_72904:
0006D886 3206                       		move.w	d6,d1
0006D888 0201 000F                  		andi.b	#$F,d1
0006D88C 8001                       		or.b	d1,d0
0006D88E E84E                       		lsr.w	#4,d6
0006D890 0206 003F                  		andi.b	#$3F,d6
0006D894 13C0 00C0 0011             		move.b	d0,($C00011).l
0006D89A 13C6 00C0 0011             		move.b	d6,($C00011).l
0006D8A0                            
0006D8A0                            locret_7291E:
0006D8A0 4E75                       		rts	
0006D8A2                            ; End of function sub_728E2
0006D8A2                            
0006D8A2                            ; ===========================================================================
0006D8A2                            
0006D8A2                            loc_72920:				; XREF: sub_728DC
0006D8A2 08D5 0001                  		bset	#1,(a5)
0006D8A6 4E75                       		rts	
0006D8A8                            
0006D8A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D8A8                            
0006D8A8                            
0006D8A8                            sub_72926:				; XREF: sub_72850
0006D8A8 4A2D 000B                  		tst.b	$B(a5)
0006D8AC 6700 0000                  		beq.w	locret_7298A
0006D8B0                            
0006D8B0                            loc_7292E:				; XREF: sub_72850
0006D8B0 1C2D 0009                  		move.b	9(a5),d6
0006D8B4 7000                       		moveq	#0,d0
0006D8B6 102D 000B                  		move.b	$B(a5),d0
0006D8BA 6700                       		beq.s	sub_7296A
0006D8BC 2079 0006 C91A             		movea.l	(Go_PSGIndex).l,a0
0006D8C2 5340                       		subq.w	#1,d0
0006D8C4 E548                       		lsl.w	#2,d0
0006D8C6 2070 0000                  		movea.l	(a0,d0.w),a0
0006D8CA 102D 000C                  		move.b	$C(a5),d0
0006D8CE 1030 0000                  		move.b	(a0,d0.w),d0
0006D8D2 522D 000C                  		addq.b	#1,$C(a5)
0006D8D6 0800 0007                  		btst	#7,d0
0006D8DA 6700                       		beq.s	loc_72960
0006D8DC 0C00 0080                  		cmpi.b	#$80,d0
0006D8E0 6700                       		beq.s	loc_7299A
0006D8E2                            
0006D8E2                            loc_72960:
0006D8E2 DC40                       		add.w	d0,d6
0006D8E4 0C06 0010                  		cmpi.b	#$10,d6
0006D8E8 6500                       		bcs.s	sub_7296A
0006D8EA 7C0F                       		moveq	#$F,d6
0006D8EC                            ; End of function sub_72926
0006D8EC                            
0006D8EC                            
0006D8EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D8EC                            
0006D8EC                            
0006D8EC                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0006D8EC 0815 0001                  		btst	#1,(a5)
0006D8F0 6600                       		bne.s	locret_7298A
0006D8F2 0815 0002                  		btst	#2,(a5)
0006D8F6 6600                       		bne.s	locret_7298A
0006D8F8 0815 0004                  		btst	#4,(a5)
0006D8FC 6600                       		bne.s	loc_7298C
0006D8FE                            
0006D8FE                            loc_7297C:
0006D8FE 8C2D 0001                  		or.b	1(a5),d6
0006D902 0606 0010                  		addi.b	#$10,d6
0006D906 13C6 00C0 0011             		move.b	d6,($C00011).l
0006D90C                            
0006D90C                            locret_7298A:
0006D90C 4E75                       		rts	
0006D90E                            ; ===========================================================================
0006D90E                            
0006D90E                            loc_7298C:
0006D90E 4A2D 0013                  		tst.b	$13(a5)
0006D912 67EA                       		beq.s	loc_7297C
0006D914 4A2D 0012                  		tst.b	$12(a5)
0006D918 66E4                       		bne.s	loc_7297C
0006D91A 4E75                       		rts	
0006D91C                            ; End of function sub_7296A
0006D91C                            
0006D91C                            ; ===========================================================================
0006D91C                            
0006D91C                            loc_7299A:				; XREF: sub_72926
0006D91C 532D 000C                  		subq.b	#1,$C(a5)
0006D920 4E75                       		rts	
0006D922                            
0006D922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D922                            
0006D922                            
0006D922                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0006D922 0815 0002                  		btst	#2,(a5)
0006D926 6600                       		bne.s	locret_729B4
0006D928                            
0006D928                            loc_729A6:				; XREF: Snd_FadeOut2
0006D928 102D 0001                  		move.b	1(a5),d0
0006D92C 0000 001F                  		ori.b	#$1F,d0
0006D930 13C0 00C0 0011             		move.b	d0,($C00011).l
0006D936                            
0006D936                            locret_729B4:
0006D936 4E75                       		rts	
0006D938                            ; End of function sub_729A0
0006D938                            
0006D938                            
0006D938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D938                            
0006D938                            
0006D938                            sub_729B6:				; XREF: loc_71E7C
0006D938 41F9 00C0 0011             		lea	($C00011).l,a0
0006D93E 10BC 009F                  		move.b	#$9F,(a0)
0006D942 10BC 00BF                  		move.b	#$BF,(a0)
0006D946 10BC 00DF                  		move.b	#$DF,(a0)
0006D94A 10BC 00FF                  		move.b	#$FF,(a0)
0006D94E 4E75                       		rts	
0006D950                            ; End of function sub_729B6
0006D950                            
0006D950                            ; ===========================================================================
0006D950 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0006D962 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0006D974 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0006D988 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0006D99C 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0006D9B0 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0006D9C4 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0006D9D8 0011 0000                  		dc.w $11, 0
0006D9DC                            
0006D9DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D9DC                            
0006D9DC                            
0006D9DC                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006D9DC 0445 00E0                  		subi.w	#$E0,d5
0006D9E0 E54D                       		lsl.w	#2,d5
0006D9E2 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0006D9E6                            ; End of function sub_72A5A
0006D9E6                            
0006D9E6                            ; ===========================================================================
0006D9E6                            
0006D9E6                            loc_72A64:
0006D9E6 6000 0000                  		bra.w	loc_72ACC
0006D9EA                            ; ===========================================================================
0006D9EA 6000 0000                  		bra.w	loc_72AEC
0006D9EE                            ; ===========================================================================
0006D9EE 6000 0000                  		bra.w	loc_72AF2
0006D9F2                            ; ===========================================================================
0006D9F2 6000 0000                  		bra.w	loc_72AF8
0006D9F6                            ; ===========================================================================
0006D9F6 6000 0000                  		bra.w	loc_72B14
0006D9FA                            ; ===========================================================================
0006D9FA 6000 0000                  		bra.w	loc_72B9E
0006D9FE                            ; ===========================================================================
0006D9FE 6000 0000                  		bra.w	loc_72BA4
0006DA02                            ; ===========================================================================
0006DA02 6000 0000                  		bra.w	loc_72BAE
0006DA06                            ; ===========================================================================
0006DA06 6000 0000                  		bra.w	loc_72BB4
0006DA0A                            ; ===========================================================================
0006DA0A 6000 0000                  		bra.w	loc_72BBE
0006DA0E                            ; ===========================================================================
0006DA0E 6000 0000                  		bra.w	loc_72BC6
0006DA12                            ; ===========================================================================
0006DA12 6000 0000                  		bra.w	loc_72BD0
0006DA16                            ; ===========================================================================
0006DA16 6000 0000                  		bra.w	loc_72BE6
0006DA1A                            ; ===========================================================================
0006DA1A 6000 0000                  		bra.w	loc_72BEE
0006DA1E                            ; ===========================================================================
0006DA1E 6000 0000                  		bra.w	loc_72BF4
0006DA22                            ; ===========================================================================
0006DA22 6000 0000                  		bra.w	loc_72C26
0006DA26                            ; ===========================================================================
0006DA26 6000 0000                  		bra.w	loc_72D30
0006DA2A                            ; ===========================================================================
0006DA2A 6000 0000                  		bra.w	loc_72D52
0006DA2E                            ; ===========================================================================
0006DA2E 6000 0000                  		bra.w	loc_72D58
0006DA32                            ; ===========================================================================
0006DA32 6000 0000                  		bra.w	loc_72E06
0006DA36                            ; ===========================================================================
0006DA36 6000 0000                  		bra.w	loc_72E20
0006DA3A                            ; ===========================================================================
0006DA3A 6000 0000                  		bra.w	loc_72E26
0006DA3E                            ; ===========================================================================
0006DA3E 6000 0000                  		bra.w	loc_72E2C
0006DA42                            ; ===========================================================================
0006DA42 6000 0000                  		bra.w	loc_72E38
0006DA46                            ; ===========================================================================
0006DA46 6000 0000                  		bra.w	loc_72E52
0006DA4A                            ; ===========================================================================
0006DA4A 6000 0000                  		bra.w	loc_72E64
0006DA4E                            ; ===========================================================================
0006DA4E                            
0006DA4E                            loc_72ACC:				; XREF: loc_72A64
0006DA4E 121C                       		move.b	(a4)+,d1
0006DA50 4A2D 0001                  		tst.b	1(a5)
0006DA54 6B00                       		bmi.s	locret_72AEA
0006DA56 102D 000A                  		move.b	$A(a5),d0
0006DA5A 0200 0037                  		andi.b	#$37,d0
0006DA5E 8200                       		or.b	d0,d1
0006DA60 1B41 000A                  		move.b	d1,$A(a5)
0006DA64 103C 00B4                  		move.b	#$B4,d0
0006DA68 6000 FC2E                  		bra.w	loc_72716
0006DA6C                            ; ===========================================================================
0006DA6C                            
0006DA6C                            locret_72AEA:
0006DA6C 4E75                       		rts	
0006DA6E                            ; ===========================================================================
0006DA6E                            
0006DA6E                            loc_72AEC:				; XREF: loc_72A64
0006DA6E 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0006DA72 4E75                       		rts	
0006DA74                            ; ===========================================================================
0006DA74                            
0006DA74                            loc_72AF2:				; XREF: loc_72A64
0006DA74 1D5C 0007                  		move.b	(a4)+,7(a6)
0006DA78 4E75                       		rts	
0006DA7A                            ; ===========================================================================
0006DA7A                            
0006DA7A                            loc_72AF8:				; XREF: loc_72A64
0006DA7A 7000                       		moveq	#0,d0
0006DA7C 102D 000D                  		move.b	$D(a5),d0
0006DA80 2875 0000                  		movea.l	(a5,d0.w),a4
0006DA84 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0006DA8C 544C                       		addq.w	#2,a4
0006DA8E 5800                       		addq.b	#4,d0
0006DA90 1B40 000D                  		move.b	d0,$D(a5)
0006DA94 4E75                       		rts	
0006DA96                            ; ===========================================================================
0006DA96                            
0006DA96                            loc_72B14:				; XREF: loc_72A64
0006DA96 204E                       		movea.l	a6,a0
0006DA98 43EE 03A0                  		lea	$3A0(a6),a1
0006DA9C 303C 0087                  		move.w	#$87,d0
0006DAA0                            
0006DAA0                            loc_72B1E:
0006DAA0 20D9                       		move.l	(a1)+,(a0)+
0006DAA2 51C8 FFFC                  		dbf	d0,loc_72B1E
0006DAA6                            
0006DAA6 08EE 0002 0040             		bset	#2,$40(a6)
0006DAAC 264D                       		movea.l	a5,a3
0006DAAE 1C3C 0028                  		move.b	#$28,d6
0006DAB2 9C2E 0026                  		sub.b	$26(a6),d6
0006DAB6 7E05                       		moveq	#5,d7
0006DAB8 4BEE 0070                  		lea	$70(a6),a5
0006DABC                            
0006DABC                            loc_72B3A:
0006DABC 0815 0007                  		btst	#7,(a5)
0006DAC0 6700                       		beq.s	loc_72B5C
0006DAC2 08D5 0001                  		bset	#1,(a5)
0006DAC6 DD2D 0009                  		add.b	d6,9(a5)
0006DACA 0815 0002                  		btst	#2,(a5)
0006DACE 6600                       		bne.s	loc_72B5C
0006DAD0 7000                       		moveq	#0,d0
0006DAD2 102D 000B                  		move.b	$B(a5),d0
0006DAD6 226E 0018                  		movea.l	$18(a6),a1
0006DADA 4EBA 0000                  		jsr	sub_72C4E(pc)
0006DADE                            
0006DADE                            loc_72B5C:
0006DADE DAFC 0030                  		adda.w	#$30,a5
0006DAE2 51CF FFD8                  		dbf	d7,loc_72B3A
0006DAE6                            
0006DAE6 7E02                       		moveq	#2,d7
0006DAE8                            
0006DAE8                            loc_72B66:
0006DAE8 0815 0007                  		btst	#7,(a5)
0006DAEC 6700                       		beq.s	loc_72B78
0006DAEE 08D5 0001                  		bset	#1,(a5)
0006DAF2 4EBA FE2E                  		jsr	sub_729A0(pc)
0006DAF6 DD2D 0009                  		add.b	d6,9(a5)
0006DAFA                            
0006DAFA                            loc_72B78:
0006DAFA DAFC 0030                  		adda.w	#$30,a5
0006DAFE 51CF FFE8                  		dbf	d7,loc_72B66
0006DB02 2A4B                       		movea.l	a3,a5
0006DB04 1D7C 0080 0024             		move.b	#$80,$24(a6)
0006DB0A 1D7C 0028 0026             		move.b	#$28,$26(a6)
0006DB10 422E 0027                  		clr.b	$27(a6)
0006DB14 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0006DB1C 504F                       		addq.w	#8,sp
0006DB1E 4E75                       		rts	
0006DB20                            ; ===========================================================================
0006DB20                            
0006DB20                            loc_72B9E:				; XREF: loc_72A64
0006DB20 1B5C 0002                  		move.b	(a4)+,2(a5)
0006DB24 4E75                       		rts	
0006DB26                            ; ===========================================================================
0006DB26                            
0006DB26                            loc_72BA4:				; XREF: loc_72A64
0006DB26 101C                       		move.b	(a4)+,d0
0006DB28 D12D 0009                  		add.b	d0,9(a5)
0006DB2C 6000 0000                  		bra.w	sub_72CB4
0006DB30                            ; ===========================================================================
0006DB30                            
0006DB30                            loc_72BAE:				; XREF: loc_72A64
0006DB30 08D5 0004                  		bset	#4,(a5)
0006DB34 4E75                       		rts	
0006DB36                            ; ===========================================================================
0006DB36                            
0006DB36                            loc_72BB4:				; XREF: loc_72A64
0006DB36 1B54 0012                  		move.b	(a4),$12(a5)
0006DB3A 1B5C 0013                  		move.b	(a4)+,$13(a5)
0006DB3E 4E75                       		rts	
0006DB40                            ; ===========================================================================
0006DB40                            
0006DB40                            loc_72BBE:				; XREF: loc_72A64
0006DB40 101C                       		move.b	(a4)+,d0
0006DB42 D12D 0008                  		add.b	d0,8(a5)
0006DB46 4E75                       		rts	
0006DB48                            ; ===========================================================================
0006DB48                            
0006DB48                            loc_72BC6:				; XREF: loc_72A64
0006DB48 1D54 0002                  		move.b	(a4),2(a6)
0006DB4C 1D5C 0001                  		move.b	(a4)+,1(a6)
0006DB50 4E75                       		rts	
0006DB52                            ; ===========================================================================
0006DB52                            
0006DB52                            loc_72BD0:				; XREF: loc_72A64
0006DB52 41EE 0040                  		lea	$40(a6),a0
0006DB56 101C                       		move.b	(a4)+,d0
0006DB58 7230                       		moveq	#$30,d1
0006DB5A 7409                       		moveq	#9,d2
0006DB5C                            
0006DB5C                            loc_72BDA:
0006DB5C 1140 0002                  		move.b	d0,2(a0)
0006DB60 D0C1                       		adda.w	d1,a0
0006DB62 51CA FFF8                  		dbf	d2,loc_72BDA
0006DB66                            
0006DB66 4E75                       		rts	
0006DB68                            ; ===========================================================================
0006DB68                            
0006DB68                            loc_72BE6:				; XREF: loc_72A64
0006DB68 101C                       		move.b	(a4)+,d0
0006DB6A D12D 0009                  		add.b	d0,9(a5)
0006DB6E 4E75                       		rts	
0006DB70                            ; ===========================================================================
0006DB70                            
0006DB70                            loc_72BEE:				; XREF: loc_72A64
0006DB70 422E 002C                  		clr.b	$2C(a6)
0006DB74 4E75                       		rts	
0006DB76                            ; ===========================================================================
0006DB76                            
0006DB76                            loc_72BF4:				; XREF: loc_72A64
0006DB76 0895 0007                  		bclr	#7,(a5)
0006DB7A 0895 0004                  		bclr	#4,(a5)
0006DB7E 4EBA FB00                  		jsr	sub_726FE(pc)
0006DB82 4A2E 0250                  		tst.b	$250(a6)
0006DB86 6B00                       		bmi.s	loc_72C22
0006DB88 264D                       		movea.l	a5,a3
0006DB8A 4BEE 0100                  		lea	$100(a6),a5
0006DB8E 226E 0018                  		movea.l	$18(a6),a1
0006DB92 0895 0002                  		bclr	#2,(a5)
0006DB96 08D5 0001                  		bset	#1,(a5)
0006DB9A 102D 000B                  		move.b	$B(a5),d0
0006DB9E 4EBA 0000                  		jsr	sub_72C4E(pc)
0006DBA2 2A4B                       		movea.l	a3,a5
0006DBA4                            
0006DBA4                            loc_72C22:
0006DBA4 504F                       		addq.w	#8,sp
0006DBA6 4E75                       		rts	
0006DBA8                            ; ===========================================================================
0006DBA8                            
0006DBA8                            loc_72C26:				; XREF: loc_72A64
0006DBA8 7000                       		moveq	#0,d0
0006DBAA 101C                       		move.b	(a4)+,d0
0006DBAC 1B40 000B                  		move.b	d0,$B(a5)
0006DBB0 0815 0002                  		btst	#2,(a5)
0006DBB4 6600 0000                  		bne.w	locret_72CAA
0006DBB8 226E 0018                  		movea.l	$18(a6),a1
0006DBBC 4A2E 000E                  		tst.b	$E(a6)
0006DBC0 6700                       		beq.s	sub_72C4E
0006DBC2 226D 0020                  		movea.l	$20(a5),a1
0006DBC6 4A2E 000E                  		tst.b	$E(a6)
0006DBCA 6B00                       		bmi.s	sub_72C4E
0006DBCC 226E 0020                  		movea.l	$20(a6),a1
0006DBD0                            
0006DBD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DBD0                            
0006DBD0                            
0006DBD0                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0006DBD0 5340                       		subq.w	#1,d0
0006DBD2 6B00                       		bmi.s	loc_72C5C
0006DBD4 323C 0019                  		move.w	#$19,d1
0006DBD8                            
0006DBD8                            loc_72C56:
0006DBD8 D2C1                       		adda.w	d1,a1
0006DBDA 51C8 FFFC                  		dbf	d0,loc_72C56
0006DBDE                            
0006DBDE                            loc_72C5C:
0006DBDE 1219                       		move.b	(a1)+,d1
0006DBE0 1B41 001F                  		move.b	d1,$1F(a5)
0006DBE4 1801                       		move.b	d1,d4
0006DBE6 103C 00B0                  		move.b	#$B0,d0
0006DBEA 4EBA FAB8                  		jsr	sub_72722(pc)
0006DBEE 45FA 0000                  		lea	byte_72D18(pc),a2
0006DBF2 7613                       		moveq	#$13,d3
0006DBF4                            
0006DBF4                            loc_72C72:
0006DBF4 101A                       		move.b	(a2)+,d0
0006DBF6 1219                       		move.b	(a1)+,d1
0006DBF8 4EBA FAAA                  		jsr	sub_72722(pc)
0006DBFC 51CB FFF6                  		dbf	d3,loc_72C72
0006DC00 7A03                       		moveq	#3,d5
0006DC02 0244 0007                  		andi.w	#7,d4
0006DC06 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0006DC0A 162D 0009                  		move.b	9(a5),d3
0006DC0E                            
0006DC0E                            loc_72C8C:
0006DC0E 101A                       		move.b	(a2)+,d0
0006DC10 1219                       		move.b	(a1)+,d1
0006DC12 E20C                       		lsr.b	#1,d4
0006DC14 6400                       		bcc.s	loc_72C96
0006DC16 D203                       		add.b	d3,d1
0006DC18                            
0006DC18                            loc_72C96:
0006DC18 4EBA FA8A                  		jsr	sub_72722(pc)
0006DC1C 51CD FFF0                  		dbf	d5,loc_72C8C
0006DC20 103C 00B4                  		move.b	#$B4,d0
0006DC24 122D 000A                  		move.b	$A(a5),d1
0006DC28 4EBA FA7A                  		jsr	sub_72722(pc)
0006DC2C                            
0006DC2C                            locret_72CAA:
0006DC2C 4E75                       		rts	
0006DC2E                            ; End of function sub_72C4E
0006DC2E                            
0006DC2E                            ; ===========================================================================
0006DC2E 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0006DC36                            
0006DC36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DC36                            
0006DC36                            
0006DC36                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0006DC36 0815 0002                  		btst	#2,(a5)
0006DC3A 6600                       		bne.s	locret_72D16
0006DC3C 7000                       		moveq	#0,d0
0006DC3E 102D 000B                  		move.b	$B(a5),d0
0006DC42 226E 0018                  		movea.l	$18(a6),a1
0006DC46 4A2E 000E                  		tst.b	$E(a6)
0006DC4A 6700                       		beq.s	loc_72CD8
0006DC4C 226E 0020                  		movea.l	$20(a6),a1
0006DC50 4A2E 000E                  		tst.b	$E(a6)
0006DC54 6B00                       		bmi.s	loc_72CD8
0006DC56 226E 0020                  		movea.l	$20(a6),a1
0006DC5A                            
0006DC5A                            loc_72CD8:
0006DC5A 5340                       		subq.w	#1,d0
0006DC5C 6B00                       		bmi.s	loc_72CE6
0006DC5E 323C 0019                  		move.w	#$19,d1
0006DC62                            
0006DC62                            loc_72CE0:
0006DC62 D2C1                       		adda.w	d1,a1
0006DC64 51C8 FFFC                  		dbf	d0,loc_72CE0
0006DC68                            
0006DC68                            loc_72CE6:
0006DC68 D2FC 0015                  		adda.w	#$15,a1
0006DC6C 45FA 0000                  		lea	byte_72D2C(pc),a2
0006DC70 102D 001F                  		move.b	$1F(a5),d0
0006DC74 0240 0007                  		andi.w	#7,d0
0006DC78 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0006DC7C 162D 0009                  		move.b	9(a5),d3
0006DC80 6B00                       		bmi.s	locret_72D16
0006DC82 7A03                       		moveq	#3,d5
0006DC84                            
0006DC84                            loc_72D02:
0006DC84 101A                       		move.b	(a2)+,d0
0006DC86 1219                       		move.b	(a1)+,d1
0006DC88 E20C                       		lsr.b	#1,d4
0006DC8A 6400                       		bcc.s	loc_72D12
0006DC8C D203                       		add.b	d3,d1
0006DC8E 6500                       		bcs.s	loc_72D12
0006DC90 4EBA FA12                  		jsr	sub_72722(pc)
0006DC94                            
0006DC94                            loc_72D12:
0006DC94 51CD FFEE                  		dbf	d5,loc_72D02
0006DC98                            
0006DC98                            locret_72D16:
0006DC98 4E75                       		rts	
0006DC9A                            ; End of function sub_72CB4
0006DC9A                            
0006DC9A                            ; ===========================================================================
0006DC9A 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0006DCA4 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0006DCAE 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0006DCB2                            ; ===========================================================================
0006DCB2                            
0006DCB2                            loc_72D30:				; XREF: loc_72A64
0006DCB2 08D5 0003                  		bset	#3,(a5)
0006DCB6 2B4C 0014                  		move.l	a4,$14(a5)
0006DCBA 1B5C 0018                  		move.b	(a4)+,$18(a5)
0006DCBE 1B5C 0019                  		move.b	(a4)+,$19(a5)
0006DCC2 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0006DCC6 101C                       		move.b	(a4)+,d0
0006DCC8 E208                       		lsr.b	#1,d0
0006DCCA 1B40 001B                  		move.b	d0,$1B(a5)
0006DCCE 426D 001C                  		clr.w	$1C(a5)
0006DCD2 4E75                       		rts	
0006DCD4                            ; ===========================================================================
0006DCD4                            
0006DCD4                            loc_72D52:				; XREF: loc_72A64
0006DCD4 08D5 0003                  		bset	#3,(a5)
0006DCD8 4E75                       		rts	
0006DCDA                            ; ===========================================================================
0006DCDA                            
0006DCDA                            loc_72D58:				; XREF: loc_72A64
0006DCDA 0895 0007                  		bclr	#7,(a5)
0006DCDE 0895 0004                  		bclr	#4,(a5)
0006DCE2 4A2D 0001                  		tst.b	1(a5)
0006DCE6 6B00                       		bmi.s	loc_72D74
0006DCE8 4A2E 0008                  		tst.b	8(a6)
0006DCEC 6B00 0000                  		bmi.w	loc_72E02
0006DCF0 4EBA F98E                  		jsr	sub_726FE(pc)
0006DCF4 6000                       		bra.s	loc_72D78
0006DCF6                            ; ===========================================================================
0006DCF6                            
0006DCF6                            loc_72D74:
0006DCF6 4EBA FC2A                  		jsr	sub_729A0(pc)
0006DCFA                            
0006DCFA                            loc_72D78:
0006DCFA 4A2E 000E                  		tst.b	$E(a6)
0006DCFE 6A00 0000                  		bpl.w	loc_72E02
0006DD02 4216                       		clr.b	0(a6)
0006DD04 7000                       		moveq	#0,d0
0006DD06 102D 0001                  		move.b	1(a5),d0
0006DD0A 6B00                       		bmi.s	loc_72DCC
0006DD0C 41FA F546                  		lea	dword_722CC(pc),a0
0006DD10 264D                       		movea.l	a5,a3
0006DD12 0C00 0004                  		cmpi.b	#4,d0
0006DD16 6600                       		bne.s	loc_72DA8
0006DD18 4A2E 0340                  		tst.b	$340(a6)
0006DD1C 6A00                       		bpl.s	loc_72DA8
0006DD1E 4BEE 0340                  		lea	$340(a6),a5
0006DD22 226E 0020                  		movea.l	$20(a6),a1
0006DD26 6000                       		bra.s	loc_72DB8
0006DD28                            ; ===========================================================================
0006DD28                            
0006DD28                            loc_72DA8:
0006DD28 5500                       		subq.b	#2,d0
0006DD2A E508                       		lsl.b	#2,d0
0006DD2C 2A70 0000                  		movea.l	(a0,d0.w),a5
0006DD30 4A15                       		tst.b	(a5)
0006DD32 6A00                       		bpl.s	loc_72DC8
0006DD34 226E 0018                  		movea.l	$18(a6),a1
0006DD38                            
0006DD38                            loc_72DB8:
0006DD38 0895 0002                  		bclr	#2,(a5)
0006DD3C 08D5 0001                  		bset	#1,(a5)
0006DD40 102D 000B                  		move.b	$B(a5),d0
0006DD44 4EBA FE8A                  		jsr	sub_72C4E(pc)
0006DD48                            
0006DD48                            loc_72DC8:
0006DD48 2A4B                       		movea.l	a3,a5
0006DD4A 6000                       		bra.s	loc_72E02
0006DD4C                            ; ===========================================================================
0006DD4C                            
0006DD4C                            loc_72DCC:
0006DD4C 41EE 0370                  		lea	$370(a6),a0
0006DD50 4A10                       		tst.b	(a0)
0006DD52 6A00                       		bpl.s	loc_72DE0
0006DD54 0C00 00E0                  		cmpi.b	#$E0,d0
0006DD58 6700                       		beq.s	loc_72DEA
0006DD5A 0C00 00C0                  		cmpi.b	#$C0,d0
0006DD5E 6700                       		beq.s	loc_72DEA
0006DD60                            
0006DD60                            loc_72DE0:
0006DD60 41FA F4F2                  		lea	dword_722CC(pc),a0
0006DD64 E608                       		lsr.b	#3,d0
0006DD66 2070 0000                  		movea.l	(a0,d0.w),a0
0006DD6A                            
0006DD6A                            loc_72DEA:
0006DD6A 0890 0002                  		bclr	#2,(a0)
0006DD6E 08D0 0001                  		bset	#1,(a0)
0006DD72 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006DD78 6600                       		bne.s	loc_72E02
0006DD7A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0006DD82                            
0006DD82                            loc_72E02:
0006DD82 504F                       		addq.w	#8,sp
0006DD84 4E75                       		rts	
0006DD86                            ; ===========================================================================
0006DD86                            
0006DD86                            loc_72E06:				; XREF: loc_72A64
0006DD86 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0006DD8C 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0006DD90 0815 0002                  		btst	#2,(a5)
0006DD94 6600                       		bne.s	locret_72E1E
0006DD96 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0006DD9E                            
0006DD9E                            locret_72E1E:
0006DD9E 4E75                       		rts	
0006DDA0                            ; ===========================================================================
0006DDA0                            
0006DDA0                            loc_72E20:				; XREF: loc_72A64
0006DDA0 0895 0003                  		bclr	#3,(a5)
0006DDA4 4E75                       		rts	
0006DDA6                            ; ===========================================================================
0006DDA6                            
0006DDA6                            loc_72E26:				; XREF: loc_72A64
0006DDA6 1B5C 000B                  		move.b	(a4)+,$B(a5)
0006DDAA 4E75                       		rts	
0006DDAC                            ; ===========================================================================
0006DDAC                            
0006DDAC                            loc_72E2C:				; XREF: loc_72A64
0006DDAC 101C                       		move.b	(a4)+,d0
0006DDAE E148                       		lsl.w	#8,d0
0006DDB0 101C                       		move.b	(a4)+,d0
0006DDB2 D8C0                       		adda.w	d0,a4
0006DDB4 534C                       		subq.w	#1,a4
0006DDB6 4E75                       		rts	
0006DDB8                            ; ===========================================================================
0006DDB8                            
0006DDB8                            loc_72E38:				; XREF: loc_72A64
0006DDB8 7000                       		moveq	#0,d0
0006DDBA 101C                       		move.b	(a4)+,d0
0006DDBC 121C                       		move.b	(a4)+,d1
0006DDBE 4A35 0024                  		tst.b	$24(a5,d0.w)
0006DDC2 6600                       		bne.s	loc_72E48
0006DDC4 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0006DDC8                            
0006DDC8                            loc_72E48:
0006DDC8 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0006DDCC 66DE                       		bne.s	loc_72E2C
0006DDCE 544C                       		addq.w	#2,a4
0006DDD0 4E75                       		rts	
0006DDD2                            ; ===========================================================================
0006DDD2                            
0006DDD2                            loc_72E52:				; XREF: loc_72A64
0006DDD2 7000                       		moveq	#0,d0
0006DDD4 102D 000D                  		move.b	$D(a5),d0
0006DDD8 5900                       		subq.b	#4,d0
0006DDDA 2B8C 0000                  		move.l	a4,(a5,d0.w)
0006DDDE 1B40 000D                  		move.b	d0,$D(a5)
0006DDE2 60C8                       		bra.s	loc_72E2C
0006DDE4                            ; ===========================================================================
0006DDE4                            
0006DDE4                            loc_72E64:				; XREF: loc_72A64
0006DDE4 103C 0088                  		move.b	#$88,d0
0006DDE8 123C 000F                  		move.b	#$F,d1
0006DDEC 4EBA F8C2                  		jsr	sub_7272E(pc)
0006DDF0 103C 008C                  		move.b	#$8C,d0
0006DDF4 123C 000F                  		move.b	#$F,d1
0006DDF8 6000 F8B6                  		bra.w	sub_7272E
0006DDFC                            ; ===========================================================================
0006DDFC                            Kos_Z80:	incbin	sound\z80_1.bin
0006DEAC 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0006DEAE 21                         		dc.b $21
0006DEAF 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0006DEB1                            		incbin	sound\z80_2.bin
0006F55C                            		even
0006F55C                            Music81:	incbin	sound\music81.bin
0006FCC4                            		even
0006FCC4                            Music82:	incbin	sound\music82.bin
00070114                            		even
00070114                            Music83:	incbin	sound\music83.bin
000706A2                            		even
000706A2                            Music84:	include	sound\music84.asm
000706A2                            music84_Header:
000706A2 =00000001                  smpsHeaderStartSong = 1
000706A2 0000                       	smpsHeaderVoice     music84_Voices
000706A4 0603                       	smpsHeaderChan      $06, $03
000706A6 0205                       	smpsHeaderTempo     $02, $05
000706A8                            
000706AC 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000706B0 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000706B4 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000706B8 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000706BC 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000706C0 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000706C6 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000706CC 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000706D2                            
000706D2                            ; FM1 Data
000706D2                            music84_FM1:
000706D2 E0C0                       	smpsPan             panCenter, $00
000706D6 E107                       	smpsAlterNote       $07
000706D8 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000706DC E106                       	smpsAlterNote       $06
000706DE 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000706E2 E10B                       	smpsAlterNote       $0B
000706E4 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000706EA E10C                       	smpsAlterNote       $0C
000706EC E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000706EF E10B                       	smpsAlterNote       $0B
000706F1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000706F4 E109                       	smpsAlterNote       $09
000706F6 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000706FB E108                       	smpsAlterNote       $08
000706FD 8001                       	dc.b	nRst, $01
000706FF E10B                       	smpsAlterNote       $0B
00070701 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00070707 E107                       	smpsAlterNote       $07
00070709 9B03                       	dc.b	nD2, $03
0007070B                            
0007070B                            music84_Jump04:
0007070B E107                       	smpsAlterNote       $07
0007070D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00070711 E10B                       	smpsAlterNote       $0B
00070713 A202 8001                  	dc.b	nA2, $02, nRst, $01
00070717 E107                       	smpsAlterNote       $07
00070719 9B03                       	dc.b	nD2, $03
0007071B E11A                       	smpsAlterNote       $1A
0007071D A301                       	dc.b	nBb2, $01
0007071F E1F2                       	smpsAlterNote       $F2
00070721 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00070724 E1FF                       	smpsAlterNote       $FF
00070726 E701                       	dc.b	smpsNoAttack, $01
00070728 E111                       	smpsAlterNote       $11
0007072A E701                       	dc.b	smpsNoAttack, $01
0007072C E106                       	smpsAlterNote       $06
0007072E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00070731 E107                       	smpsAlterNote       $07
00070733 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00070737 E108                       	smpsAlterNote       $08
00070739 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00070741 E109                       	smpsAlterNote       $09
00070743 A003                       	dc.b	nG2, $03
00070745 E10C                       	smpsAlterNote       $0C
00070747 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0007074B E1FD                       	smpsAlterNote       $FD
0007074D A401                       	dc.b	nB2, $01
0007074F E109                       	smpsAlterNote       $09
00070751 E701                       	dc.b	smpsNoAttack, $01
00070753 E106                       	smpsAlterNote       $06
00070755 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00070758 E109                       	smpsAlterNote       $09
0007075A A007                       	dc.b	nG2, $07
0007075C E108                       	smpsAlterNote       $08
0007075E 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00070762 E107                       	smpsAlterNote       $07
00070764 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0007076A E10B                       	smpsAlterNote       $0B
0007076C A203 8001                  	dc.b	nA2, $03, nRst, $01
00070770 E107                       	smpsAlterNote       $07
00070772 9B03                       	dc.b	nD2, $03
00070774 E11A                       	smpsAlterNote       $1A
00070776 A301                       	dc.b	nBb2, $01
00070778 E1F9                       	smpsAlterNote       $F9
0007077A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0007077D E107                       	smpsAlterNote       $07
0007077F E701                       	dc.b	smpsNoAttack, $01
00070781 E111                       	smpsAlterNote       $11
00070783 E701                       	dc.b	smpsNoAttack, $01
00070785 E106                       	smpsAlterNote       $06
00070787 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0007078C E107                       	smpsAlterNote       $07
0007078E 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00070796 E1EC                       	smpsAlterNote       $EC
00070798 A101                       	dc.b	nAb2, $01
0007079A E108                       	smpsAlterNote       $08
0007079C E701                       	dc.b	smpsNoAttack, $01
0007079E E116                       	smpsAlterNote       $16
000707A0 E701                       	dc.b	smpsNoAttack, $01
000707A2 E1F5                       	smpsAlterNote       $F5
000707A4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000707A7 E10B                       	smpsAlterNote       $0B
000707A9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000707AD E107                       	smpsAlterNote       $07
000707AF 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000707B5 E109                       	smpsAlterNote       $09
000707B7 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000707BB E10B                       	smpsAlterNote       $0B
000707BD 9603                       	dc.b	nA1, $03
000707BF E107                       	smpsAlterNote       $07
000707C1 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000707C7 E10B                       	smpsAlterNote       $0B
000707C9 A203 8001                  	dc.b	nA2, $03, nRst, $01
000707CD E107                       	smpsAlterNote       $07
000707CF 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000707D3 E11A                       	smpsAlterNote       $1A
000707D5 A301                       	dc.b	nBb2, $01
000707D7 E1F9                       	smpsAlterNote       $F9
000707D9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000707DC E107                       	smpsAlterNote       $07
000707DE E701                       	dc.b	smpsNoAttack, $01
000707E0 E1FB                       	smpsAlterNote       $FB
000707E2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000707E5 E106                       	smpsAlterNote       $06
000707E7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000707EB E107                       	smpsAlterNote       $07
000707ED 9B03                       	dc.b	nD2, $03
000707EF E108                       	smpsAlterNote       $08
000707F1 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000707F7 E109                       	smpsAlterNote       $09
000707F9 A002 8001                  	dc.b	nG2, $02, nRst, $01
000707FD E10C                       	smpsAlterNote       $0C
000707FF A303                       	dc.b	nBb2, $03
00070801 E1F0                       	smpsAlterNote       $F0
00070803 A401                       	dc.b	nB2, $01
00070805 E1FD                       	smpsAlterNote       $FD
00070807 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0007080C E106                       	smpsAlterNote       $06
0007080E 8001                       	dc.b	nRst, $01
00070810 E109                       	smpsAlterNote       $09
00070812 A006 8001                  	dc.b	nG2, $06, nRst, $01
00070816 E108                       	smpsAlterNote       $08
00070818 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0007081C E107                       	smpsAlterNote       $07
0007081E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00070824 E10B                       	smpsAlterNote       $0B
00070826 A203                       	dc.b	nA2, $03
00070828 E107                       	smpsAlterNote       $07
0007082A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0007082E E1F2                       	smpsAlterNote       $F2
00070830 A401                       	dc.b	nB2, $01
00070832 E1FF                       	smpsAlterNote       $FF
00070834 E701                       	dc.b	smpsNoAttack, $01
00070836 E107                       	smpsAlterNote       $07
00070838 E701                       	dc.b	smpsNoAttack, $01
0007083A E1FB                       	smpsAlterNote       $FB
0007083C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0007083F E106                       	smpsAlterNote       $06
00070841 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00070845 E107                       	smpsAlterNote       $07
00070847 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00070851 E117                       	smpsAlterNote       $17
00070853 A001                       	dc.b	nG2, $01
00070855 E1FA                       	smpsAlterNote       $FA
00070857 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0007085A E108                       	smpsAlterNote       $08
0007085C E701                       	dc.b	smpsNoAttack, $01
0007085E E1E7                       	smpsAlterNote       $E7
00070860 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00070863 E103                       	smpsAlterNote       $03
00070865 E701                       	dc.b	smpsNoAttack, $01
00070867 E10B                       	smpsAlterNote       $0B
00070869 E702                       	dc.b	smpsNoAttack, $02
0007086B E107                       	smpsAlterNote       $07
0007086D 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00070875 E106                       	smpsAlterNote       $06
00070877 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0007087D E10C                       	smpsAlterNote       $0C
0007087F 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00070885 E109                       	smpsAlterNote       $09
00070887 9E03                       	dc.b	nF2, $03
00070889 E10C                       	smpsAlterNote       $0C
0007088B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0007088F E1EA                       	smpsAlterNote       $EA
00070891 A201                       	dc.b	nA2, $01
00070893 E106                       	smpsAlterNote       $06
00070895 E701                       	dc.b	smpsNoAttack, $01
00070897 E1E2                       	smpsAlterNote       $E2
00070899 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0007089C E1F0                       	smpsAlterNote       $F0
0007089E E701                       	dc.b	smpsNoAttack, $01
000708A0 E10C                       	smpsAlterNote       $0C
000708A2 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000708AE E116                       	smpsAlterNote       $16
000708B0 9C01                       	dc.b	nEb2, $01
000708B2 E105                       	smpsAlterNote       $05
000708B4 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000708B7 E1F1                       	smpsAlterNote       $F1
000708B9 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000708BC E1FF                       	smpsAlterNote       $FF
000708BE E701                       	dc.b	smpsNoAttack, $01
000708C0 E109                       	smpsAlterNote       $09
000708C2 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000708C6 E10C                       	smpsAlterNote       $0C
000708C8 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000708D4 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000708DA E109                       	smpsAlterNote       $09
000708DC 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000708E0 E10C                       	smpsAlterNote       $0C
000708E2 9703                       	dc.b	nBb1, $03
000708E4 E11A                       	smpsAlterNote       $1A
000708E6 A101                       	dc.b	nAb2, $01
000708E8 E1FB                       	smpsAlterNote       $FB
000708EA E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000708ED E10A                       	smpsAlterNote       $0A
000708EF E701                       	dc.b	smpsNoAttack, $01
000708F1 E1E8                       	smpsAlterNote       $E8
000708F3 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000708F6 E106                       	smpsAlterNote       $06
000708F8 E701                       	dc.b	smpsNoAttack, $01
000708FA E10C                       	smpsAlterNote       $0C
000708FC E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00070908 E1F9                       	smpsAlterNote       $F9
0007090A 9D01                       	dc.b	nE2, $01
0007090C E108                       	smpsAlterNote       $08
0007090E E701                       	dc.b	smpsNoAttack, $01
00070910 E1F6                       	smpsAlterNote       $F6
00070912 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00070915 E109                       	smpsAlterNote       $09
00070917 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0007091B E10C                       	smpsAlterNote       $0C
0007091D 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00070929 E108                       	smpsAlterNote       $08
0007092B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00070931 E106                       	smpsAlterNote       $06
00070933 A403 8001                  	dc.b	nB2, $03, nRst, $01
00070937 E108                       	smpsAlterNote       $08
00070939 9D03                       	dc.b	nE2, $03
0007093B E1EB                       	smpsAlterNote       $EB
0007093D A801                       	dc.b	nEb3, $01
0007093F E109                       	smpsAlterNote       $09
00070941 E701                       	dc.b	smpsNoAttack, $01
00070943 E1FA                       	smpsAlterNote       $FA
00070945 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00070948 E108                       	smpsAlterNote       $08
0007094A E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00070956 E1E9                       	smpsAlterNote       $E9
00070958 A301                       	dc.b	nBb2, $01
0007095A E107                       	smpsAlterNote       $07
0007095C E701                       	dc.b	smpsNoAttack, $01
0007095E E1F0                       	smpsAlterNote       $F0
00070960 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00070963 E1F7                       	smpsAlterNote       $F7
00070965 E701                       	dc.b	smpsNoAttack, $01
00070967 E107                       	smpsAlterNote       $07
00070969 E701                       	dc.b	smpsNoAttack, $01
0007096B E106                       	smpsAlterNote       $06
0007096D E701                       	dc.b	smpsNoAttack, $01
0007096F E108                       	smpsAlterNote       $08
00070971 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00070977 E106                       	smpsAlterNote       $06
00070979 A403 8001                  	dc.b	nB2, $03, nRst, $01
0007097D E108                       	smpsAlterNote       $08
0007097F 9D03                       	dc.b	nE2, $03
00070981 E10B                       	smpsAlterNote       $0B
00070983 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0007098B E108                       	smpsAlterNote       $08
0007098D 9D03                       	dc.b	nE2, $03
0007098F E10B                       	smpsAlterNote       $0B
00070991 9603 8001                  	dc.b	nA1, $03, nRst, $01
00070995 E113                       	smpsAlterNote       $13
00070997 A001                       	dc.b	nG2, $01
00070999 E118                       	smpsAlterNote       $18
0007099B E701                       	dc.b	smpsNoAttack, $01
0007099D E1E9                       	smpsAlterNote       $E9
0007099F E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000709A2 E1F3                       	smpsAlterNote       $F3
000709A4 E701                       	dc.b	smpsNoAttack, $01
000709A6 E1FD                       	smpsAlterNote       $FD
000709A8 E701                       	dc.b	smpsNoAttack, $01
000709AA E102                       	smpsAlterNote       $02
000709AC E701                       	dc.b	smpsNoAttack, $01
000709AE E107                       	smpsAlterNote       $07
000709B0 8001                       	dc.b	nRst, $01
000709B2 E10B                       	smpsAlterNote       $0B
000709B4 9603                       	dc.b	nA1, $03
000709B6 E10C                       	smpsAlterNote       $0C
000709B8 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000709BE E10B                       	smpsAlterNote       $0B
000709C0 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000709CC 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000709D2 E107                       	smpsAlterNote       $07
000709D4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000709DA E10B                       	smpsAlterNote       $0B
000709DC A203                       	dc.b	nA2, $03
000709DE E107                       	smpsAlterNote       $07
000709E0 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000709E4 E1F2                       	smpsAlterNote       $F2
000709E6 A401                       	dc.b	nB2, $01
000709E8 E1FF                       	smpsAlterNote       $FF
000709EA E701                       	dc.b	smpsNoAttack, $01
000709EC E107                       	smpsAlterNote       $07
000709EE E701                       	dc.b	smpsNoAttack, $01
000709F0 E1FB                       	smpsAlterNote       $FB
000709F2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000709F5 E106                       	smpsAlterNote       $06
000709F7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000709FB E107                       	smpsAlterNote       $07
000709FD 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00070A01 E108                       	smpsAlterNote       $08
00070A03 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00070A09 E109                       	smpsAlterNote       $09
00070A0B A003 8001                  	dc.b	nG2, $03, nRst, $01
00070A0F E10C                       	smpsAlterNote       $0C
00070A11 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00070A15 E1F0                       	smpsAlterNote       $F0
00070A17 A401                       	dc.b	nB2, $01
00070A19 E109                       	smpsAlterNote       $09
00070A1B E701                       	dc.b	smpsNoAttack, $01
00070A1D E106                       	smpsAlterNote       $06
00070A1F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00070A22 E109                       	smpsAlterNote       $09
00070A24 A007                       	dc.b	nG2, $07
00070A26 E108                       	smpsAlterNote       $08
00070A28 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00070A2C E107                       	smpsAlterNote       $07
00070A2E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00070A34 E10B                       	smpsAlterNote       $0B
00070A36 A202 8001                  	dc.b	nA2, $02, nRst, $01
00070A3A E107                       	smpsAlterNote       $07
00070A3C 9B03                       	dc.b	nD2, $03
00070A3E E11A                       	smpsAlterNote       $1A
00070A40 A301                       	dc.b	nBb2, $01
00070A42 E1F2                       	smpsAlterNote       $F2
00070A44 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00070A47 E1FF                       	smpsAlterNote       $FF
00070A49 E701                       	dc.b	smpsNoAttack, $01
00070A4B E111                       	smpsAlterNote       $11
00070A4D E701                       	dc.b	smpsNoAttack, $01
00070A4F E106                       	smpsAlterNote       $06
00070A51 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00070A54 E107                       	smpsAlterNote       $07
00070A56 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00070A62 E117                       	smpsAlterNote       $17
00070A64 A001                       	dc.b	nG2, $01
00070A66 E1FA                       	smpsAlterNote       $FA
00070A68 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00070A6B E116                       	smpsAlterNote       $16
00070A6D E701                       	dc.b	smpsNoAttack, $01
00070A6F E1F5                       	smpsAlterNote       $F5
00070A71 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00070A74 E103                       	smpsAlterNote       $03
00070A76 E701                       	dc.b	smpsNoAttack, $01
00070A78 E10B                       	smpsAlterNote       $0B
00070A7A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00070A7E E107                       	smpsAlterNote       $07
00070A80 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00070A86 E109                       	smpsAlterNote       $09
00070A88 9E03                       	dc.b	nF2, $03
00070A8A E10B                       	smpsAlterNote       $0B
00070A8C 9603 8001                  	dc.b	nA1, $03, nRst, $01
00070A90 E107                       	smpsAlterNote       $07
00070A92 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00070A98 E10B                       	smpsAlterNote       $0B
00070A9A A203 8001                  	dc.b	nA2, $03, nRst, $01
00070A9E E107                       	smpsAlterNote       $07
00070AA0 9B03                       	dc.b	nD2, $03
00070AA2 E11A                       	smpsAlterNote       $1A
00070AA4 A301                       	dc.b	nBb2, $01
00070AA6 E1F9                       	smpsAlterNote       $F9
00070AA8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00070AAB E107                       	smpsAlterNote       $07
00070AAD E701                       	dc.b	smpsNoAttack, $01
00070AAF E111                       	smpsAlterNote       $11
00070AB1 E701                       	dc.b	smpsNoAttack, $01
00070AB3 E106                       	smpsAlterNote       $06
00070AB5 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00070ABA E107                       	smpsAlterNote       $07
00070ABC 9B03                       	dc.b	nD2, $03
00070ABE E108                       	smpsAlterNote       $08
00070AC0 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00070AC6 E109                       	smpsAlterNote       $09
00070AC8 A003                       	dc.b	nG2, $03
00070ACA E10C                       	smpsAlterNote       $0C
00070ACC A303 8001                  	dc.b	nBb2, $03, nRst, $01
00070AD0 E1FD                       	smpsAlterNote       $FD
00070AD2 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00070AD7 E106                       	smpsAlterNote       $06
00070AD9 8001                       	dc.b	nRst, $01
00070ADB E109                       	smpsAlterNote       $09
00070ADD A006 8001                  	dc.b	nG2, $06, nRst, $01
00070AE1 E108                       	smpsAlterNote       $08
00070AE3 9C03                       	dc.b	nEb2, $03
00070AE5 E107                       	smpsAlterNote       $07
00070AE7 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00070AED E10B                       	smpsAlterNote       $0B
00070AEF A203 8001                  	dc.b	nA2, $03, nRst, $01
00070AF3 E107                       	smpsAlterNote       $07
00070AF5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00070AF9 E11A                       	smpsAlterNote       $1A
00070AFB A301                       	dc.b	nBb2, $01
00070AFD E1F9                       	smpsAlterNote       $F9
00070AFF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00070B02 E107                       	smpsAlterNote       $07
00070B04 E701                       	dc.b	smpsNoAttack, $01
00070B06 E1FB                       	smpsAlterNote       $FB
00070B08 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00070B0B E106                       	smpsAlterNote       $06
00070B0D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00070B11 E107                       	smpsAlterNote       $07
00070B13 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00070B1B E1EC                       	smpsAlterNote       $EC
00070B1D A101                       	dc.b	nAb2, $01
00070B1F E108                       	smpsAlterNote       $08
00070B21 E701                       	dc.b	smpsNoAttack, $01
00070B23 E1E7                       	smpsAlterNote       $E7
00070B25 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00070B28 E1F5                       	smpsAlterNote       $F5
00070B2A E701                       	dc.b	smpsNoAttack, $01
00070B2C E10B                       	smpsAlterNote       $0B
00070B2E E702                       	dc.b	smpsNoAttack, $02
00070B30 E107                       	smpsAlterNote       $07
00070B32 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00070B38 E106                       	smpsAlterNote       $06
00070B3A 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00070B40 E10C                       	smpsAlterNote       $0C
00070B42 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00070B4A E109                       	smpsAlterNote       $09
00070B4C 9E03                       	dc.b	nF2, $03
00070B4E E10C                       	smpsAlterNote       $0C
00070B50 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00070B54 E1EA                       	smpsAlterNote       $EA
00070B56 A201                       	dc.b	nA2, $01
00070B58 E106                       	smpsAlterNote       $06
00070B5A E701                       	dc.b	smpsNoAttack, $01
00070B5C E114                       	smpsAlterNote       $14
00070B5E E701                       	dc.b	smpsNoAttack, $01
00070B60 E1F0                       	smpsAlterNote       $F0
00070B62 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00070B65 E10C                       	smpsAlterNote       $0C
00070B67 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00070B73 9703                       	dc.b	nBb1, $03
00070B75 E116                       	smpsAlterNote       $16
00070B77 9C01                       	dc.b	nEb2, $01
00070B79 E105                       	smpsAlterNote       $05
00070B7B E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00070B7E E113                       	smpsAlterNote       $13
00070B80 E701                       	dc.b	smpsNoAttack, $01
00070B82 E1FF                       	smpsAlterNote       $FF
00070B84 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00070B87 E109                       	smpsAlterNote       $09
00070B89 E703                       	dc.b	smpsNoAttack, $03
00070B8B E10C                       	smpsAlterNote       $0C
00070B8D 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00070B99 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00070BA1 E109                       	smpsAlterNote       $09
00070BA3 9E03                       	dc.b	nF2, $03
00070BA5 E10C                       	smpsAlterNote       $0C
00070BA7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00070BAB E1EC                       	smpsAlterNote       $EC
00070BAD A201                       	dc.b	nA2, $01
00070BAF E10A                       	smpsAlterNote       $0A
00070BB1 E701                       	dc.b	smpsNoAttack, $01
00070BB3 E1E8                       	smpsAlterNote       $E8
00070BB5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00070BB8 E1F7                       	smpsAlterNote       $F7
00070BBA E701                       	dc.b	smpsNoAttack, $01
00070BBC E10C                       	smpsAlterNote       $0C
00070BBE E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00070BCA E1EA                       	smpsAlterNote       $EA
00070BCC 9D01                       	dc.b	nE2, $01
00070BCE E108                       	smpsAlterNote       $08
00070BD0 E701                       	dc.b	smpsNoAttack, $01
00070BD2 E1F6                       	smpsAlterNote       $F6
00070BD4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00070BD7 E105                       	smpsAlterNote       $05
00070BD9 E701                       	dc.b	smpsNoAttack, $01
00070BDB E109                       	smpsAlterNote       $09
00070BDD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00070BE1 E10C                       	smpsAlterNote       $0C
00070BE3 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00070BEF E108                       	smpsAlterNote       $08
00070BF1 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00070BF7 E106                       	smpsAlterNote       $06
00070BF9 A403 8001                  	dc.b	nB2, $03, nRst, $01
00070BFD E108                       	smpsAlterNote       $08
00070BFF 9D03                       	dc.b	nE2, $03
00070C01 E1EB                       	smpsAlterNote       $EB
00070C03 A801                       	dc.b	nEb3, $01
00070C05 E109                       	smpsAlterNote       $09
00070C07 E701                       	dc.b	smpsNoAttack, $01
00070C09 E1EB                       	smpsAlterNote       $EB
00070C0B E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00070C0E E108                       	smpsAlterNote       $08
00070C10 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00070C1C E1E9                       	smpsAlterNote       $E9
00070C1E A301                       	dc.b	nBb2, $01
00070C20 E1F8                       	smpsAlterNote       $F8
00070C22 E701                       	dc.b	smpsNoAttack, $01
00070C24 E116                       	smpsAlterNote       $16
00070C26 E701                       	dc.b	smpsNoAttack, $01
00070C28 E1F7                       	smpsAlterNote       $F7
00070C2A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00070C2D E107                       	smpsAlterNote       $07
00070C2F E701                       	dc.b	smpsNoAttack, $01
00070C31 E1EE                       	smpsAlterNote       $EE
00070C33 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00070C36 E106                       	smpsAlterNote       $06
00070C38 8001                       	dc.b	nRst, $01
00070C3A E108                       	smpsAlterNote       $08
00070C3C 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00070C42 E106                       	smpsAlterNote       $06
00070C44 A402 8001                  	dc.b	nB2, $02, nRst, $01
00070C48 E108                       	smpsAlterNote       $08
00070C4A 9D03                       	dc.b	nE2, $03
00070C4C E10B                       	smpsAlterNote       $0B
00070C4E 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00070C54 E108                       	smpsAlterNote       $08
00070C56 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00070C5A E10B                       	smpsAlterNote       $0B
00070C5C 9603                       	dc.b	nA1, $03
00070C5E E10E                       	smpsAlterNote       $0E
00070C60 A001                       	dc.b	nG2, $01
00070C62 E118                       	smpsAlterNote       $18
00070C64 E701                       	dc.b	smpsNoAttack, $01
00070C66 E1E9                       	smpsAlterNote       $E9
00070C68 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00070C6B E1EE                       	smpsAlterNote       $EE
00070C6D E701                       	dc.b	smpsNoAttack, $01
00070C6F E1F8                       	smpsAlterNote       $F8
00070C71 E701                       	dc.b	smpsNoAttack, $01
00070C73 E102                       	smpsAlterNote       $02
00070C75 E701                       	dc.b	smpsNoAttack, $01
00070C77 E107                       	smpsAlterNote       $07
00070C79 8001                       	dc.b	nRst, $01
00070C7B E10B                       	smpsAlterNote       $0B
00070C7D 9603                       	dc.b	nA1, $03
00070C7F E10C                       	smpsAlterNote       $0C
00070C81 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00070C87 E10B                       	smpsAlterNote       $0B
00070C89 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00070C95 8001 9603                  	dc.b	nRst, $01, nA1, $03
00070C99 E10C                       	smpsAlterNote       $0C
00070C9B 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00070CA7 8001                       	dc.b	nRst, $01
00070CA9 E10B                       	smpsAlterNote       $0B
00070CAB 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00070CB3 E107                       	smpsAlterNote       $07
00070CB5 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00070CB9 E10B                       	smpsAlterNote       $0B
00070CBB 9603                       	dc.b	nA1, $03
00070CBD E109                       	smpsAlterNote       $09
00070CBF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00070CC3 E108                       	smpsAlterNote       $08
00070CC5 9D06                       	dc.b	nE2, $06
00070CC7 E107                       	smpsAlterNote       $07
00070CC9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00070CCD E106                       	smpsAlterNote       $06
00070CCF 9903                       	dc.b	nC2, $03
00070CD1 E10C                       	smpsAlterNote       $0C
00070CD3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00070CD7 E10B                       	smpsAlterNote       $0B
00070CD9 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00070CE5 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00070CEF E10C                       	smpsAlterNote       $0C
00070CF1 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00070CFD 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00070D09 8001                       	dc.b	nRst, $01
00070D0B E10B                       	smpsAlterNote       $0B
00070D0D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00070D19 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00070D25 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00070D31 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00070D3B E10C                       	smpsAlterNote       $0C
00070D3D 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00070D49 E10B                       	smpsAlterNote       $0B
00070D4B 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00070D53 E107                       	smpsAlterNote       $07
00070D55 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00070D59 E10B                       	smpsAlterNote       $0B
00070D5B 9603                       	dc.b	nA1, $03
00070D5D E109                       	smpsAlterNote       $09
00070D5F 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00070D63 E108                       	smpsAlterNote       $08
00070D65 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00070D69 E107                       	smpsAlterNote       $07
00070D6B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00070D6F E106                       	smpsAlterNote       $06
00070D71 9903                       	dc.b	nC2, $03
00070D73 E10C                       	smpsAlterNote       $0C
00070D75 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00070D79 E10B                       	smpsAlterNote       $0B
00070D7B 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00070D87 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00070D91 E10C                       	smpsAlterNote       $0C
00070D93 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00070D9F 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00070DAB 8001                       	dc.b	nRst, $01
00070DAD E10B                       	smpsAlterNote       $0B
00070DAF 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00070DBB 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00070DC5 E10C                       	smpsAlterNote       $0C
00070DC7 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00070DD3 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00070DDF E10B                       	smpsAlterNote       $0B
00070DE1 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00070DED 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00070DF7 E10C                       	smpsAlterNote       $0C
00070DF9 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00070E05 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00070E11 E10B                       	smpsAlterNote       $0B
00070E13 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00070E1F 8001                       	dc.b	nRst, $01
00070E21 E1EC                       	smpsAlterNote       $EC
00070E23 A101                       	dc.b	nAb2, $01
00070E25 E1FA                       	smpsAlterNote       $FA
00070E27 E701                       	dc.b	smpsNoAttack, $01
00070E29 E116                       	smpsAlterNote       $16
00070E2B E701                       	dc.b	smpsNoAttack, $01
00070E2D E1F5                       	smpsAlterNote       $F5
00070E2F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00070E32 E10B                       	smpsAlterNote       $0B
00070E34 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00070E40 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00070E4C E107                       	smpsAlterNote       $07
00070E4E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00070E54 E10B                       	smpsAlterNote       $0B
00070E56 A203                       	dc.b	nA2, $03
00070E58 E107                       	smpsAlterNote       $07
00070E5A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00070E5E E1F3                       	smpsAlterNote       $F3
00070E60 A401                       	dc.b	nB2, $01
00070E62 E102                       	smpsAlterNote       $02
00070E64 E701                       	dc.b	smpsNoAttack, $01
00070E66 E109                       	smpsAlterNote       $09
00070E68 E701                       	dc.b	smpsNoAttack, $01
00070E6A E102                       	smpsAlterNote       $02
00070E6C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00070E6F E106                       	smpsAlterNote       $06
00070E71 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00070E75 E107                       	smpsAlterNote       $07
00070E77 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00070E7B E108                       	smpsAlterNote       $08
00070E7D 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00070E83 E109                       	smpsAlterNote       $09
00070E85 A003 8001                  	dc.b	nG2, $03, nRst, $01
00070E89 E1F2                       	smpsAlterNote       $F2
00070E8B A401                       	dc.b	nB2, $01
00070E8D E1FF                       	smpsAlterNote       $FF
00070E8F E701                       	dc.b	smpsNoAttack, $01
00070E91 E111                       	smpsAlterNote       $11
00070E93 E701                       	dc.b	smpsNoAttack, $01
00070E95 E1FB                       	smpsAlterNote       $FB
00070E97 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00070E9A E106                       	smpsAlterNote       $06
00070E9C E702                       	dc.b	smpsNoAttack, $02
00070E9E E109                       	smpsAlterNote       $09
00070EA0 A007                       	dc.b	nG2, $07
00070EA2 E108                       	smpsAlterNote       $08
00070EA4 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00070EA8 E107                       	smpsAlterNote       $07
00070EAA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00070EB0 E10B                       	smpsAlterNote       $0B
00070EB2 A202 8001                  	dc.b	nA2, $02, nRst, $01
00070EB6 E107                       	smpsAlterNote       $07
00070EB8 9B03                       	dc.b	nD2, $03
00070EBA E11A                       	smpsAlterNote       $1A
00070EBC A301                       	dc.b	nBb2, $01
00070EBE E1F2                       	smpsAlterNote       $F2
00070EC0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00070EC3 E1FF                       	smpsAlterNote       $FF
00070EC5 E701                       	dc.b	smpsNoAttack, $01
00070EC7 E111                       	smpsAlterNote       $11
00070EC9 E701                       	dc.b	smpsNoAttack, $01
00070ECB E106                       	smpsAlterNote       $06
00070ECD E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00070ED0 E107                       	smpsAlterNote       $07
00070ED2 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00070EDE E117                       	smpsAlterNote       $17
00070EE0 A001                       	dc.b	nG2, $01
00070EE2 E1FA                       	smpsAlterNote       $FA
00070EE4 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00070EE7 E116                       	smpsAlterNote       $16
00070EE9 E701                       	dc.b	smpsNoAttack, $01
00070EEB E1F5                       	smpsAlterNote       $F5
00070EED E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00070EF0 E103                       	smpsAlterNote       $03
00070EF2 E701                       	dc.b	smpsNoAttack, $01
00070EF4 E10B                       	smpsAlterNote       $0B
00070EF6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00070EFA E107                       	smpsAlterNote       $07
00070EFC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00070F02 E109                       	smpsAlterNote       $09
00070F04 9E03                       	dc.b	nF2, $03
00070F06 E10B                       	smpsAlterNote       $0B
00070F08 9603 8001                  	dc.b	nA1, $03, nRst, $01
00070F0C E107                       	smpsAlterNote       $07
00070F0E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00070F14 E10B                       	smpsAlterNote       $0B
00070F16 A203 8001                  	dc.b	nA2, $03, nRst, $01
00070F1A E107                       	smpsAlterNote       $07
00070F1C 9B03                       	dc.b	nD2, $03
00070F1E E11A                       	smpsAlterNote       $1A
00070F20 A301                       	dc.b	nBb2, $01
00070F22 E1F9                       	smpsAlterNote       $F9
00070F24 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00070F27 E1FF                       	smpsAlterNote       $FF
00070F29 E701                       	dc.b	smpsNoAttack, $01
00070F2B E111                       	smpsAlterNote       $11
00070F2D E701                       	dc.b	smpsNoAttack, $01
00070F2F E106                       	smpsAlterNote       $06
00070F31 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00070F34 E107                       	smpsAlterNote       $07
00070F36 9B03                       	dc.b	nD2, $03
00070F38 E108                       	smpsAlterNote       $08
00070F3A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00070F40 E109                       	smpsAlterNote       $09
00070F42 A003                       	dc.b	nG2, $03
00070F44 E1F0                       	smpsAlterNote       $F0
00070F46 A501                       	dc.b	nC3, $01
00070F48 E106                       	smpsAlterNote       $06
00070F4A E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00070F4E E109                       	smpsAlterNote       $09
00070F50 A006 8001                  	dc.b	nG2, $06, nRst, $01
00070F54 E108                       	smpsAlterNote       $08
00070F56 9C03                       	dc.b	nEb2, $03
00070F58 E107                       	smpsAlterNote       $07
00070F5A 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00070F60 E10B                       	smpsAlterNote       $0B
00070F62 A203 8001                  	dc.b	nA2, $03, nRst, $01
00070F66 E107                       	smpsAlterNote       $07
00070F68 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00070F6C E11A                       	smpsAlterNote       $1A
00070F6E A301                       	dc.b	nBb2, $01
00070F70 E1F9                       	smpsAlterNote       $F9
00070F72 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00070F75 E107                       	smpsAlterNote       $07
00070F77 E701                       	dc.b	smpsNoAttack, $01
00070F79 E1FB                       	smpsAlterNote       $FB
00070F7B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00070F7E E106                       	smpsAlterNote       $06
00070F80 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00070F84 E107                       	smpsAlterNote       $07
00070F86 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00070F8E E1EC                       	smpsAlterNote       $EC
00070F90 A101                       	dc.b	nAb2, $01
00070F92 E108                       	smpsAlterNote       $08
00070F94 E701                       	dc.b	smpsNoAttack, $01
00070F96 E1E7                       	smpsAlterNote       $E7
00070F98 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00070F9B E1F5                       	smpsAlterNote       $F5
00070F9D E701                       	dc.b	smpsNoAttack, $01
00070F9F E10B                       	smpsAlterNote       $0B
00070FA1 E702                       	dc.b	smpsNoAttack, $02
00070FA3 E107                       	smpsAlterNote       $07
00070FA5 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00070FAB E106                       	smpsAlterNote       $06
00070FAD 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00070FB3 E10C                       	smpsAlterNote       $0C
00070FB5 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00070FBD E109                       	smpsAlterNote       $09
00070FBF 9E03                       	dc.b	nF2, $03
00070FC1 E10C                       	smpsAlterNote       $0C
00070FC3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00070FC7 E1EA                       	smpsAlterNote       $EA
00070FC9 A201                       	dc.b	nA2, $01
00070FCB E106                       	smpsAlterNote       $06
00070FCD E701                       	dc.b	smpsNoAttack, $01
00070FCF E114                       	smpsAlterNote       $14
00070FD1 E701                       	dc.b	smpsNoAttack, $01
00070FD3 E1F0                       	smpsAlterNote       $F0
00070FD5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00070FD8 E10C                       	smpsAlterNote       $0C
00070FDA E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00070FE6 9703                       	dc.b	nBb1, $03
00070FE8 E116                       	smpsAlterNote       $16
00070FEA 9C01                       	dc.b	nEb2, $01
00070FEC E105                       	smpsAlterNote       $05
00070FEE E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00070FF1 E113                       	smpsAlterNote       $13
00070FF3 E701                       	dc.b	smpsNoAttack, $01
00070FF5 E1FF                       	smpsAlterNote       $FF
00070FF7 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00070FFA E109                       	smpsAlterNote       $09
00070FFC E703                       	dc.b	smpsNoAttack, $03
00070FFE E10C                       	smpsAlterNote       $0C
00071000 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0007100C 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00071014 E109                       	smpsAlterNote       $09
00071016 9E03                       	dc.b	nF2, $03
00071018 E10C                       	smpsAlterNote       $0C
0007101A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0007101E E1EA                       	smpsAlterNote       $EA
00071020 A201                       	dc.b	nA2, $01
00071022 E106                       	smpsAlterNote       $06
00071024 E701                       	dc.b	smpsNoAttack, $01
00071026 E1E2                       	smpsAlterNote       $E2
00071028 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0007102B E1F0                       	smpsAlterNote       $F0
0007102D E701                       	dc.b	smpsNoAttack, $01
0007102F E10C                       	smpsAlterNote       $0C
00071031 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0007103D E116                       	smpsAlterNote       $16
0007103F 9C01                       	dc.b	nEb2, $01
00071041 E105                       	smpsAlterNote       $05
00071043 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00071046 E1F1                       	smpsAlterNote       $F1
00071048 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0007104B E1FF                       	smpsAlterNote       $FF
0007104D E701                       	dc.b	smpsNoAttack, $01
0007104F E109                       	smpsAlterNote       $09
00071051 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00071055 E10C                       	smpsAlterNote       $0C
00071057 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00071063 E106                       	smpsAlterNote       $06
00071065 9903                       	dc.b	nC2, $03
00071067 E107                       	smpsAlterNote       $07
00071069 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0007106D E109                       	smpsAlterNote       $09
0007106F 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00071075 E107                       	smpsAlterNote       $07
00071077 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0007107B E108                       	smpsAlterNote       $08
0007107D 9D03                       	dc.b	nE2, $03
0007107F E10B                       	smpsAlterNote       $0B
00071081 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00071087 E109                       	smpsAlterNote       $09
00071089 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0007108F E10C                       	smpsAlterNote       $0C
00071091 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00071097 E106                       	smpsAlterNote       $06
00071099 9903                       	dc.b	nC2, $03
0007109B E11A                       	smpsAlterNote       $1A
0007109D A301                       	dc.b	nBb2, $01
0007109F E1F9                       	smpsAlterNote       $F9
000710A1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000710A4 E1FF                       	smpsAlterNote       $FF
000710A6 E701                       	dc.b	smpsNoAttack, $01
000710A8 E111                       	smpsAlterNote       $11
000710AA E701                       	dc.b	smpsNoAttack, $01
000710AC E106                       	smpsAlterNote       $06
000710AE E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
000710B5 E109                       	smpsAlterNote       $09
000710B7 A003                       	dc.b	nG2, $03
000710B9 E106                       	smpsAlterNote       $06
000710BB 9907                       	dc.b	nC2, $07
000710BD E107                       	smpsAlterNote       $07
000710BF 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
000710C7 E10B                       	smpsAlterNote       $0B
000710C9 A203                       	dc.b	nA2, $03
000710CB E107                       	smpsAlterNote       $07
000710CD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000710D1 E1F2                       	smpsAlterNote       $F2
000710D3 A401                       	dc.b	nB2, $01
000710D5 E1F9                       	smpsAlterNote       $F9
000710D7 E701                       	dc.b	smpsNoAttack, $01
000710D9 E107                       	smpsAlterNote       $07
000710DB E701                       	dc.b	smpsNoAttack, $01
000710DD E1FB                       	smpsAlterNote       $FB
000710DF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000710E2 E106                       	smpsAlterNote       $06
000710E4 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000710E8 E107                       	smpsAlterNote       $07
000710EA 9B03                       	dc.b	nD2, $03
000710EC E108                       	smpsAlterNote       $08
000710EE 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000710F4 E109                       	smpsAlterNote       $09
000710F6 A003 8001                  	dc.b	nG2, $03, nRst, $01
000710FA E1F2                       	smpsAlterNote       $F2
000710FC A401                       	dc.b	nB2, $01
000710FE E1F9                       	smpsAlterNote       $F9
00071100 E701                       	dc.b	smpsNoAttack, $01
00071102 E107                       	smpsAlterNote       $07
00071104 E701                       	dc.b	smpsNoAttack, $01
00071106 E1FB                       	smpsAlterNote       $FB
00071108 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0007110B E106                       	smpsAlterNote       $06
0007110D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00071111 E108                       	smpsAlterNote       $08
00071113 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00071117 E10C                       	smpsAlterNote       $0C
00071119 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0007111D E107                       	smpsAlterNote       $07
0007111F 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00071125 E10B                       	smpsAlterNote       $0B
00071127 A203                       	dc.b	nA2, $03
00071129 E107                       	smpsAlterNote       $07
0007112B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0007112F E1F2                       	smpsAlterNote       $F2
00071131 A401                       	dc.b	nB2, $01
00071133 E1FF                       	smpsAlterNote       $FF
00071135 E701                       	dc.b	smpsNoAttack, $01
00071137 E107                       	smpsAlterNote       $07
00071139 E701                       	dc.b	smpsNoAttack, $01
0007113B E1FB                       	smpsAlterNote       $FB
0007113D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00071140 E106                       	smpsAlterNote       $06
00071142 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00071146 E107                       	smpsAlterNote       $07
00071148 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0007114C E108                       	smpsAlterNote       $08
0007114E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00071154 E109                       	smpsAlterNote       $09
00071156 A003 8001                  	dc.b	nG2, $03, nRst, $01
0007115A E1F2                       	smpsAlterNote       $F2
0007115C A401                       	dc.b	nB2, $01
0007115E E1FF                       	smpsAlterNote       $FF
00071160 E701                       	dc.b	smpsNoAttack, $01
00071162 E111                       	smpsAlterNote       $11
00071164 E701                       	dc.b	smpsNoAttack, $01
00071166 E1FB                       	smpsAlterNote       $FB
00071168 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0007116B E106                       	smpsAlterNote       $06
0007116D E702                       	dc.b	smpsNoAttack, $02
0007116F E108                       	smpsAlterNote       $08
00071171 9C07                       	dc.b	nEb2, $07
00071173 E10C                       	smpsAlterNote       $0C
00071175 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00071179 E107                       	smpsAlterNote       $07
0007117B 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00071181 E10B                       	smpsAlterNote       $0B
00071183 A202 8001                  	dc.b	nA2, $02, nRst, $01
00071187 E107                       	smpsAlterNote       $07
00071189 9B03                       	dc.b	nD2, $03
0007118B E11A                       	smpsAlterNote       $1A
0007118D A301                       	dc.b	nBb2, $01
0007118F E1F2                       	smpsAlterNote       $F2
00071191 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00071194 E1FF                       	smpsAlterNote       $FF
00071196 E701                       	dc.b	smpsNoAttack, $01
00071198 E111                       	smpsAlterNote       $11
0007119A E701                       	dc.b	smpsNoAttack, $01
0007119C E106                       	smpsAlterNote       $06
0007119E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000711A1 E107                       	smpsAlterNote       $07
000711A3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000711A7 E108                       	smpsAlterNote       $08
000711A9 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000711B1 E109                       	smpsAlterNote       $09
000711B3 A003                       	dc.b	nG2, $03
000711B5 E11A                       	smpsAlterNote       $1A
000711B7 A301                       	dc.b	nBb2, $01
000711B9 E1F2                       	smpsAlterNote       $F2
000711BB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000711BE E1FF                       	smpsAlterNote       $FF
000711C0 E701                       	dc.b	smpsNoAttack, $01
000711C2 E111                       	smpsAlterNote       $11
000711C4 E701                       	dc.b	smpsNoAttack, $01
000711C6 E106                       	smpsAlterNote       $06
000711C8 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000711CB E108                       	smpsAlterNote       $08
000711CD 9C07                       	dc.b	nEb2, $07
000711CF E10C                       	smpsAlterNote       $0C
000711D1 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000711D5 E107                       	smpsAlterNote       $07
000711D7 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000711E3 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
000711ED E108                       	smpsAlterNote       $08
000711EF 9C06                       	dc.b	nEb2, $06
000711F1 E10C                       	smpsAlterNote       $0C
000711F3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000711F7 E108                       	smpsAlterNote       $08
000711F9 9C03                       	dc.b	nEb2, $03
000711FB E109                       	smpsAlterNote       $09
000711FD A003 8001                  	dc.b	nG2, $03, nRst, $01
00071201 E10C                       	smpsAlterNote       $0C
00071203 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
0007120B E107                       	smpsAlterNote       $07
0007120D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00071211 F6F4 F8                    	smpsJump            music84_Jump04
00071214                            
00071214                            ; FM2 Data
00071214                            music84_FM2:
00071214 E0C0                       	smpsPan             panCenter, $00
00071218 E10B                       	smpsAlterNote       $0B
0007121A C603 8007                  	dc.b	nA5, $03, nRst, $07
0007121E E109                       	smpsAlterNote       $09
00071220 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00071224 E108                       	smpsAlterNote       $08
00071226 C103 8004                  	dc.b	nE5, $03, nRst, $04
0007122C E080                       	smpsPan             panLeft, $00
0007122E E10C                       	smpsAlterNote       $0C
00071230 E6F9                       	smpsAlterVol        $F9
00071232 C703                       	dc.b	nBb5, $03
00071234 E10B                       	smpsAlterNote       $0B
00071236 C603 8001                  	dc.b	nA5, $03, nRst, $01
0007123A E109                       	smpsAlterNote       $09
0007123C C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00071242 E108                       	smpsAlterNote       $08
00071244 C103 8001                  	dc.b	nE5, $03, nRst, $01
00071248 E106                       	smpsAlterNote       $06
0007124A BD03                       	dc.b	nC5, $03
0007124C E10B                       	smpsAlterNote       $0B
0007124E BA03 8001                  	dc.b	nA4, $03, nRst, $01
00071254 E0C0                       	smpsPan             panCenter, $00
00071256 E107                       	smpsAlterNote       $07
00071258 E606                       	smpsAlterVol        $06
0007125A BF03                       	dc.b	nD5, $03
0007125C                            
0007125C                            music84_Jump03:
0007125C E108                       	smpsAlterNote       $08
0007125E C103 8001                  	dc.b	nE5, $03, nRst, $01
00071262 E109                       	smpsAlterNote       $09
00071264 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
0007126A E10B                       	smpsAlterNote       $0B
0007126C C607                       	dc.b	nA5, $07
0007126E E107                       	smpsAlterNote       $07
00071270 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00071274 E106                       	smpsAlterNote       $06
00071276 C90D                       	dc.b	nC6, $0D
00071278 E100                       	smpsAlterNote       $00
0007127A E701                       	dc.b	smpsNoAttack, $01
0007127C E1FF                       	smpsAlterNote       $FF
0007127E E701                       	dc.b	smpsNoAttack, $01
00071280 E103                       	smpsAlterNote       $03
00071282 E701                       	dc.b	smpsNoAttack, $01
00071284 E109                       	smpsAlterNote       $09
00071286 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007128A E106                       	smpsAlterNote       $06
0007128C E701                       	dc.b	smpsNoAttack, $01
0007128E E100                       	smpsAlterNote       $00
00071290 E701                       	dc.b	smpsNoAttack, $01
00071292 E10C                       	smpsAlterNote       $0C
00071294 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00071298 E10B                       	smpsAlterNote       $0B
0007129A C603                       	dc.b	nA5, $03
0007129C E109                       	smpsAlterNote       $09
0007129E C403 8001                  	dc.b	nG5, $03, nRst, $01
000712A2 E10B                       	smpsAlterNote       $0B
000712A4 C60D                       	dc.b	nA5, $0D
000712A6 E105                       	smpsAlterNote       $05
000712A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000712AC E10B                       	smpsAlterNote       $0B
000712AE E701                       	dc.b	smpsNoAttack, $01
000712B0 E10E                       	smpsAlterNote       $0E
000712B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000712B6 E108                       	smpsAlterNote       $08
000712B8 E701                       	dc.b	smpsNoAttack, $01
000712BA E104                       	smpsAlterNote       $04
000712BC E701                       	dc.b	smpsNoAttack, $01
000712BE E105                       	smpsAlterNote       $05
000712C0 E701                       	dc.b	smpsNoAttack, $01
000712C2 E10B                       	smpsAlterNote       $0B
000712C4 E701                       	dc.b	smpsNoAttack, $01
000712C6 E10F                       	smpsAlterNote       $0F
000712C8 E701                       	dc.b	smpsNoAttack, $01
000712CA E10B                       	smpsAlterNote       $0B
000712CC E701                       	dc.b	smpsNoAttack, $01
000712CE E108                       	smpsAlterNote       $08
000712D0 E701                       	dc.b	smpsNoAttack, $01
000712D2 E104                       	smpsAlterNote       $04
000712D4 E701                       	dc.b	smpsNoAttack, $01
000712D6 E108                       	smpsAlterNote       $08
000712D8 E701                       	dc.b	smpsNoAttack, $01
000712DA E10E                       	smpsAlterNote       $0E
000712DC E701                       	dc.b	smpsNoAttack, $01
000712DE E10F                       	smpsAlterNote       $0F
000712E0 E701                       	dc.b	smpsNoAttack, $01
000712E2 E10B                       	smpsAlterNote       $0B
000712E4 E701                       	dc.b	smpsNoAttack, $01
000712E6 E105                       	smpsAlterNote       $05
000712E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000712EC E108                       	smpsAlterNote       $08
000712EE E701                       	dc.b	smpsNoAttack, $01
000712F0 E10E                       	smpsAlterNote       $0E
000712F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000712F6 E108                       	smpsAlterNote       $08
000712F8 E701                       	dc.b	smpsNoAttack, $01
000712FA E105                       	smpsAlterNote       $05
000712FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071300 E10B                       	smpsAlterNote       $0B
00071302 E701                       	dc.b	smpsNoAttack, $01
00071304 E10F                       	smpsAlterNote       $0F
00071306 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0007130A E107                       	smpsAlterNote       $07
0007130C BF03 8001                  	dc.b	nD5, $03, nRst, $01
00071310 E108                       	smpsAlterNote       $08
00071312 C103                       	dc.b	nE5, $03
00071314 E109                       	smpsAlterNote       $09
00071316 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0007131E E10B                       	smpsAlterNote       $0B
00071320 C606 8001                  	dc.b	nA5, $06, nRst, $01
00071324 E107                       	smpsAlterNote       $07
00071326 BF03                       	dc.b	nD5, $03
00071328 E106                       	smpsAlterNote       $06
0007132A C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0007132E E107                       	smpsAlterNote       $07
00071330 CB03                       	dc.b	nD6, $03
00071332 E10C                       	smpsAlterNote       $0C
00071334 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00071338 E10B                       	smpsAlterNote       $0B
0007133A C604 8001                  	dc.b	nA5, $04, nRst, $01
0007133E E109                       	smpsAlterNote       $09
00071340 C404                       	dc.b	nG5, $04
00071342 E10B                       	smpsAlterNote       $0B
00071344 C60D                       	dc.b	nA5, $0D
00071346 E108                       	smpsAlterNote       $08
00071348 E701                       	dc.b	smpsNoAttack, $01
0007134A E104                       	smpsAlterNote       $04
0007134C E701                       	dc.b	smpsNoAttack, $01
0007134E E108                       	smpsAlterNote       $08
00071350 E701                       	dc.b	smpsNoAttack, $01
00071352 E10B                       	smpsAlterNote       $0B
00071354 E701                       	dc.b	smpsNoAttack, $01
00071356 E10F                       	smpsAlterNote       $0F
00071358 E701                       	dc.b	smpsNoAttack, $01
0007135A E10B                       	smpsAlterNote       $0B
0007135C E701                       	dc.b	smpsNoAttack, $01
0007135E E105                       	smpsAlterNote       $05
00071360 E701                       	dc.b	smpsNoAttack, $01
00071362 E104                       	smpsAlterNote       $04
00071364 E701                       	dc.b	smpsNoAttack, $01
00071366 E108                       	smpsAlterNote       $08
00071368 E701                       	dc.b	smpsNoAttack, $01
0007136A E10E                       	smpsAlterNote       $0E
0007136C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071370 E10B                       	smpsAlterNote       $0B
00071372 E701                       	dc.b	smpsNoAttack, $01
00071374 E105                       	smpsAlterNote       $05
00071376 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007137A E10B                       	smpsAlterNote       $0B
0007137C E701                       	dc.b	smpsNoAttack, $01
0007137E E10E                       	smpsAlterNote       $0E
00071380 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071384 E108                       	smpsAlterNote       $08
00071386 E701                       	dc.b	smpsNoAttack, $01
00071388 E104                       	smpsAlterNote       $04
0007138A E701                       	dc.b	smpsNoAttack, $01
0007138C E105                       	smpsAlterNote       $05
0007138E E701                       	dc.b	smpsNoAttack, $01
00071390 E10B                       	smpsAlterNote       $0B
00071392 E701                       	dc.b	smpsNoAttack, $01
00071394 E10F                       	smpsAlterNote       $0F
00071396 E701                       	dc.b	smpsNoAttack, $01
00071398 E10B                       	smpsAlterNote       $0B
0007139A E701                       	dc.b	smpsNoAttack, $01
0007139C E108                       	smpsAlterNote       $08
0007139E E701                       	dc.b	smpsNoAttack, $01
000713A0 E105                       	smpsAlterNote       $05
000713A2 8001                       	dc.b	nRst, $01
000713A4 E109                       	smpsAlterNote       $09
000713A6 C401                       	dc.b	nG5, $01
000713A8 E10B                       	smpsAlterNote       $0B
000713AA E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000713B3 E109                       	smpsAlterNote       $09
000713B5 C404 8001                  	dc.b	nG5, $04, nRst, $01
000713B9 E10B                       	smpsAlterNote       $0B
000713BB C604 8001                  	dc.b	nA5, $04, nRst, $01
000713BF E107                       	smpsAlterNote       $07
000713C1 BF0D                       	dc.b	nD5, $0D
000713C3 E101                       	smpsAlterNote       $01
000713C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000713C9 E104                       	smpsAlterNote       $04
000713CB E701                       	dc.b	smpsNoAttack, $01
000713CD E10A                       	smpsAlterNote       $0A
000713CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000713D3 E104                       	smpsAlterNote       $04
000713D5 E701                       	dc.b	smpsNoAttack, $01
000713D7 E101                       	smpsAlterNote       $01
000713D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000713DD E107                       	smpsAlterNote       $07
000713DF E701                       	dc.b	smpsNoAttack, $01
000713E1 E10B                       	smpsAlterNote       $0B
000713E3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000713E7 E108                       	smpsAlterNote       $08
000713E9 C101                       	dc.b	nE5, $01
000713EB E109                       	smpsAlterNote       $09
000713ED E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000713F2 E10B                       	smpsAlterNote       $0B
000713F4 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000713FC E108                       	smpsAlterNote       $08
000713FE CD06                       	dc.b	nE6, $06
00071400 E109                       	smpsAlterNote       $09
00071402 CE07                       	dc.b	nF6, $07
00071404 E108                       	smpsAlterNote       $08
00071406 CD03 8001                  	dc.b	nE6, $03, nRst, $01
0007140A E106                       	smpsAlterNote       $06
0007140C C903                       	dc.b	nC6, $03
0007140E E109                       	smpsAlterNote       $09
00071410 C403 8001                  	dc.b	nG5, $03, nRst, $01
00071414 E10C                       	smpsAlterNote       $0C
00071416 C70D                       	dc.b	nBb5, $0D
00071418 E106                       	smpsAlterNote       $06
0007141A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007141E E109                       	smpsAlterNote       $09
00071420 E701                       	dc.b	smpsNoAttack, $01
00071422 E10F                       	smpsAlterNote       $0F
00071424 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071428 E109                       	smpsAlterNote       $09
0007142A E701                       	dc.b	smpsNoAttack, $01
0007142C E106                       	smpsAlterNote       $06
0007142E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071432 E10C                       	smpsAlterNote       $0C
00071434 E701                       	dc.b	smpsNoAttack, $01
00071436 E110                       	smpsAlterNote       $10
00071438 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007143C E10B                       	smpsAlterNote       $0B
0007143E C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00071442 E105                       	smpsAlterNote       $05
00071444 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071448 E10B                       	smpsAlterNote       $0B
0007144A E701                       	dc.b	smpsNoAttack, $01
0007144C E10E                       	smpsAlterNote       $0E
0007144E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071452 E108                       	smpsAlterNote       $08
00071454 E701                       	dc.b	smpsNoAttack, $01
00071456 E104                       	smpsAlterNote       $04
00071458 E701                       	dc.b	smpsNoAttack, $01
0007145A E105                       	smpsAlterNote       $05
0007145C E701                       	dc.b	smpsNoAttack, $01
0007145E E10B                       	smpsAlterNote       $0B
00071460 E701                       	dc.b	smpsNoAttack, $01
00071462 E10F                       	smpsAlterNote       $0F
00071464 E701                       	dc.b	smpsNoAttack, $01
00071466 E10B                       	smpsAlterNote       $0B
00071468 E701                       	dc.b	smpsNoAttack, $01
0007146A E108                       	smpsAlterNote       $08
0007146C E701                       	dc.b	smpsNoAttack, $01
0007146E E104                       	smpsAlterNote       $04
00071470 E701                       	dc.b	smpsNoAttack, $01
00071472 E108                       	smpsAlterNote       $08
00071474 E701                       	dc.b	smpsNoAttack, $01
00071476 E10E                       	smpsAlterNote       $0E
00071478 E701                       	dc.b	smpsNoAttack, $01
0007147A E10F                       	smpsAlterNote       $0F
0007147C E701                       	dc.b	smpsNoAttack, $01
0007147E E10B                       	smpsAlterNote       $0B
00071480 E701                       	dc.b	smpsNoAttack, $01
00071482 E105                       	smpsAlterNote       $05
00071484 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071488 E108                       	smpsAlterNote       $08
0007148A E701                       	dc.b	smpsNoAttack, $01
0007148C E10E                       	smpsAlterNote       $0E
0007148E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071492 E108                       	smpsAlterNote       $08
00071494 E701                       	dc.b	smpsNoAttack, $01
00071496 E105                       	smpsAlterNote       $05
00071498 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007149C E10B                       	smpsAlterNote       $0B
0007149E E701                       	dc.b	smpsNoAttack, $01
000714A0 E10F                       	smpsAlterNote       $0F
000714A2 E701                       	dc.b	smpsNoAttack, $01
000714A4 E10E                       	smpsAlterNote       $0E
000714A6 E701                       	dc.b	smpsNoAttack, $01
000714A8 E108                       	smpsAlterNote       $08
000714AA E701                       	dc.b	smpsNoAttack, $01
000714AC E104                       	smpsAlterNote       $04
000714AE E701                       	dc.b	smpsNoAttack, $01
000714B0 E108                       	smpsAlterNote       $08
000714B2 E701                       	dc.b	smpsNoAttack, $01
000714B4 E10E                       	smpsAlterNote       $0E
000714B6 E701                       	dc.b	smpsNoAttack, $01
000714B8 E10F                       	smpsAlterNote       $0F
000714BA E701                       	dc.b	smpsNoAttack, $01
000714BC E10B                       	smpsAlterNote       $0B
000714BE E701                       	dc.b	smpsNoAttack, $01
000714C0 E105                       	smpsAlterNote       $05
000714C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000714C6 E108                       	smpsAlterNote       $08
000714C8 E701                       	dc.b	smpsNoAttack, $01
000714CA E10E                       	smpsAlterNote       $0E
000714CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000714D0 E108                       	smpsAlterNote       $08
000714D2 E701                       	dc.b	smpsNoAttack, $01
000714D4 E105                       	smpsAlterNote       $05
000714D6 E701                       	dc.b	smpsNoAttack, $01
000714D8 E10B                       	smpsAlterNote       $0B
000714DA C60D                       	dc.b	nA5, $0D
000714DC E108                       	smpsAlterNote       $08
000714DE E701                       	dc.b	smpsNoAttack, $01
000714E0 E104                       	smpsAlterNote       $04
000714E2 E701                       	dc.b	smpsNoAttack, $01
000714E4 E105                       	smpsAlterNote       $05
000714E6 E701                       	dc.b	smpsNoAttack, $01
000714E8 E10B                       	smpsAlterNote       $0B
000714EA E701                       	dc.b	smpsNoAttack, $01
000714EC E10F                       	smpsAlterNote       $0F
000714EE E701                       	dc.b	smpsNoAttack, $01
000714F0 E10B                       	smpsAlterNote       $0B
000714F2 E701                       	dc.b	smpsNoAttack, $01
000714F4 E108                       	smpsAlterNote       $08
000714F6 E701                       	dc.b	smpsNoAttack, $01
000714F8 E104                       	smpsAlterNote       $04
000714FA E701                       	dc.b	smpsNoAttack, $01
000714FC E108                       	smpsAlterNote       $08
000714FE E701                       	dc.b	smpsNoAttack, $01
00071500 E10E                       	smpsAlterNote       $0E
00071502 E701                       	dc.b	smpsNoAttack, $01
00071504 E10F                       	smpsAlterNote       $0F
00071506 E701                       	dc.b	smpsNoAttack, $01
0007150A E109                       	smpsAlterNote       $09
0007150C E6FF                       	smpsAlterVol        $FF
0007150E C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00071518 E108                       	smpsAlterNote       $08
0007151A C103 800E                  	dc.b	nE5, $03, nRst, $0E
00071520 E107                       	smpsAlterNote       $07
00071522 E601                       	smpsAlterVol        $01
00071524 BF03                       	dc.b	nD5, $03
00071526 E108                       	smpsAlterNote       $08
00071528 C103 8001                  	dc.b	nE5, $03, nRst, $01
0007152C E109                       	smpsAlterNote       $09
0007152E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00071534 E10B                       	smpsAlterNote       $0B
00071536 C606 8001                  	dc.b	nA5, $06, nRst, $01
0007153A E107                       	smpsAlterNote       $07
0007153C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00071540 E106                       	smpsAlterNote       $06
00071542 C90D                       	dc.b	nC6, $0D
00071544 E103                       	smpsAlterNote       $03
00071546 E701                       	dc.b	smpsNoAttack, $01
00071548 E1FF                       	smpsAlterNote       $FF
0007154A E701                       	dc.b	smpsNoAttack, $01
0007154C E103                       	smpsAlterNote       $03
0007154E E701                       	dc.b	smpsNoAttack, $01
00071550 E109                       	smpsAlterNote       $09
00071552 E701                       	dc.b	smpsNoAttack, $01
00071554 E10A                       	smpsAlterNote       $0A
00071556 E701                       	dc.b	smpsNoAttack, $01
00071558 E106                       	smpsAlterNote       $06
0007155A E701                       	dc.b	smpsNoAttack, $01
0007155C E100                       	smpsAlterNote       $00
0007155E E701                       	dc.b	smpsNoAttack, $01
00071560 E10C                       	smpsAlterNote       $0C
00071562 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00071566 E10B                       	smpsAlterNote       $0B
00071568 C603                       	dc.b	nA5, $03
0007156A E109                       	smpsAlterNote       $09
0007156C C403 8001                  	dc.b	nG5, $03, nRst, $01
00071570 E10B                       	smpsAlterNote       $0B
00071572 C60D                       	dc.b	nA5, $0D
00071574 E105                       	smpsAlterNote       $05
00071576 E701                       	dc.b	smpsNoAttack, $01
00071578 E104                       	smpsAlterNote       $04
0007157A E701                       	dc.b	smpsNoAttack, $01
0007157C E108                       	smpsAlterNote       $08
0007157E E701                       	dc.b	smpsNoAttack, $01
00071580 E10E                       	smpsAlterNote       $0E
00071582 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071586 E10B                       	smpsAlterNote       $0B
00071588 E701                       	dc.b	smpsNoAttack, $01
0007158A E105                       	smpsAlterNote       $05
0007158C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071590 E10B                       	smpsAlterNote       $0B
00071592 E701                       	dc.b	smpsNoAttack, $01
00071594 E10E                       	smpsAlterNote       $0E
00071596 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007159A E108                       	smpsAlterNote       $08
0007159C E701                       	dc.b	smpsNoAttack, $01
0007159E E104                       	smpsAlterNote       $04
000715A0 E701                       	dc.b	smpsNoAttack, $01
000715A2 E105                       	smpsAlterNote       $05
000715A4 E701                       	dc.b	smpsNoAttack, $01
000715A6 E10B                       	smpsAlterNote       $0B
000715A8 E701                       	dc.b	smpsNoAttack, $01
000715AA E10F                       	smpsAlterNote       $0F
000715AC E701                       	dc.b	smpsNoAttack, $01
000715AE E10B                       	smpsAlterNote       $0B
000715B0 E701                       	dc.b	smpsNoAttack, $01
000715B2 E108                       	smpsAlterNote       $08
000715B4 E701                       	dc.b	smpsNoAttack, $01
000715B6 E104                       	smpsAlterNote       $04
000715B8 E701                       	dc.b	smpsNoAttack, $01
000715BA E108                       	smpsAlterNote       $08
000715BC E701                       	dc.b	smpsNoAttack, $01
000715BE E10E                       	smpsAlterNote       $0E
000715C0 E701                       	dc.b	smpsNoAttack, $01
000715C2 E10F                       	smpsAlterNote       $0F
000715C4 E701                       	dc.b	smpsNoAttack, $01
000715C6 E10B                       	smpsAlterNote       $0B
000715C8 E701                       	dc.b	smpsNoAttack, $01
000715CA E105                       	smpsAlterNote       $05
000715CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000715D0 E108                       	smpsAlterNote       $08
000715D2 E701                       	dc.b	smpsNoAttack, $01
000715D4 E10E                       	smpsAlterNote       $0E
000715D6 E701                       	dc.b	smpsNoAttack, $01
000715D8 E10F                       	smpsAlterNote       $0F
000715DA 800F                       	dc.b	nRst, $0F
000715DC E107                       	smpsAlterNote       $07
000715DE BF02 8001                  	dc.b	nD5, $02, nRst, $01
000715E2 E108                       	smpsAlterNote       $08
000715E4 C103                       	dc.b	nE5, $03
000715E6 E109                       	smpsAlterNote       $09
000715E8 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000715EE E10B                       	smpsAlterNote       $0B
000715F0 C606 8001                  	dc.b	nA5, $06, nRst, $01
000715F4 E107                       	smpsAlterNote       $07
000715F6 BF03                       	dc.b	nD5, $03
000715F8 E106                       	smpsAlterNote       $06
000715FA C90E                       	dc.b	nC6, $0E
000715FC E107                       	smpsAlterNote       $07
000715FE CB03 8001                  	dc.b	nD6, $03, nRst, $01
00071602 E10C                       	smpsAlterNote       $0C
00071604 C704                       	dc.b	nBb5, $04
00071606 E10B                       	smpsAlterNote       $0B
00071608 C604 8001                  	dc.b	nA5, $04, nRst, $01
0007160C E109                       	smpsAlterNote       $09
0007160E C404                       	dc.b	nG5, $04
00071610 E10B                       	smpsAlterNote       $0B
00071612 C60D                       	dc.b	nA5, $0D
00071614 E108                       	smpsAlterNote       $08
00071616 E701                       	dc.b	smpsNoAttack, $01
00071618 E105                       	smpsAlterNote       $05
0007161A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007161E E10B                       	smpsAlterNote       $0B
00071620 E701                       	dc.b	smpsNoAttack, $01
00071622 E10F                       	smpsAlterNote       $0F
00071624 E701                       	dc.b	smpsNoAttack, $01
00071626 E10E                       	smpsAlterNote       $0E
00071628 E701                       	dc.b	smpsNoAttack, $01
0007162A E108                       	smpsAlterNote       $08
0007162C E701                       	dc.b	smpsNoAttack, $01
0007162E E104                       	smpsAlterNote       $04
00071630 E701                       	dc.b	smpsNoAttack, $01
00071632 E108                       	smpsAlterNote       $08
00071634 E701                       	dc.b	smpsNoAttack, $01
00071636 E10B                       	smpsAlterNote       $0B
00071638 E701                       	dc.b	smpsNoAttack, $01
0007163A E10F                       	smpsAlterNote       $0F
0007163C E701                       	dc.b	smpsNoAttack, $01
0007163E E10B                       	smpsAlterNote       $0B
00071640 E701                       	dc.b	smpsNoAttack, $01
00071642 E105                       	smpsAlterNote       $05
00071644 E701                       	dc.b	smpsNoAttack, $01
00071646 E104                       	smpsAlterNote       $04
00071648 E701                       	dc.b	smpsNoAttack, $01
0007164A E108                       	smpsAlterNote       $08
0007164C E701                       	dc.b	smpsNoAttack, $01
0007164E E10E                       	smpsAlterNote       $0E
00071650 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071654 E10B                       	smpsAlterNote       $0B
00071656 E701                       	dc.b	smpsNoAttack, $01
00071658 E105                       	smpsAlterNote       $05
0007165A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007165E E10B                       	smpsAlterNote       $0B
00071660 E701                       	dc.b	smpsNoAttack, $01
00071662 E10E                       	smpsAlterNote       $0E
00071664 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071668 E108                       	smpsAlterNote       $08
0007166A E701                       	dc.b	smpsNoAttack, $01
0007166C E105                       	smpsAlterNote       $05
0007166E 8001                       	dc.b	nRst, $01
00071670 E109                       	smpsAlterNote       $09
00071672 C402                       	dc.b	nG5, $02
00071674 E10B                       	smpsAlterNote       $0B
00071676 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0007167F E109                       	smpsAlterNote       $09
00071681 C404                       	dc.b	nG5, $04
00071683 E10B                       	smpsAlterNote       $0B
00071685 C604 8001                  	dc.b	nA5, $04, nRst, $01
00071689 E107                       	smpsAlterNote       $07
0007168B BF0D                       	dc.b	nD5, $0D
0007168D E101                       	smpsAlterNote       $01
0007168F E701                       	dc.b	smpsNoAttack, $01
00071691 E100                       	smpsAlterNote       $00
00071693 E701                       	dc.b	smpsNoAttack, $01
00071695 E104                       	smpsAlterNote       $04
00071697 E701                       	dc.b	smpsNoAttack, $01
00071699 E10A                       	smpsAlterNote       $0A
0007169B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007169F E107                       	smpsAlterNote       $07
000716A1 E701                       	dc.b	smpsNoAttack, $01
000716A3 E101                       	smpsAlterNote       $01
000716A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000716A9 E107                       	smpsAlterNote       $07
000716AB E701                       	dc.b	smpsNoAttack, $01
000716AD E10A                       	smpsAlterNote       $0A
000716AF E701                       	dc.b	smpsNoAttack, $01
000716B1 E10B                       	smpsAlterNote       $0B
000716B3 8001                       	dc.b	nRst, $01
000716B5 E108                       	smpsAlterNote       $08
000716B7 C101                       	dc.b	nE5, $01
000716B9 E109                       	smpsAlterNote       $09
000716BB E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000716C0 E10B                       	smpsAlterNote       $0B
000716C2 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000716CA E108                       	smpsAlterNote       $08
000716CC CD06 8001                  	dc.b	nE6, $06, nRst, $01
000716D0 E109                       	smpsAlterNote       $09
000716D2 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000716D6 E108                       	smpsAlterNote       $08
000716D8 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000716DC E106                       	smpsAlterNote       $06
000716DE C903                       	dc.b	nC6, $03
000716E0 E109                       	smpsAlterNote       $09
000716E2 C403 8001                  	dc.b	nG5, $03, nRst, $01
000716E6 E10C                       	smpsAlterNote       $0C
000716E8 C70D                       	dc.b	nBb5, $0D
000716EA E109                       	smpsAlterNote       $09
000716EC E701                       	dc.b	smpsNoAttack, $01
000716EE E105                       	smpsAlterNote       $05
000716F0 E701                       	dc.b	smpsNoAttack, $01
000716F2 E109                       	smpsAlterNote       $09
000716F4 E701                       	dc.b	smpsNoAttack, $01
000716F6 E10F                       	smpsAlterNote       $0F
000716F8 E701                       	dc.b	smpsNoAttack, $01
000716FA E110                       	smpsAlterNote       $10
000716FC E701                       	dc.b	smpsNoAttack, $01
000716FE E10C                       	smpsAlterNote       $0C
00071700 E701                       	dc.b	smpsNoAttack, $01
00071702 E106                       	smpsAlterNote       $06
00071704 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071708 E109                       	smpsAlterNote       $09
0007170A E701                       	dc.b	smpsNoAttack, $01
0007170C E10F                       	smpsAlterNote       $0F
0007170E E701                       	dc.b	smpsNoAttack, $01
00071710 E110                       	smpsAlterNote       $10
00071712 8001                       	dc.b	nRst, $01
00071714 E10B                       	smpsAlterNote       $0B
00071716 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0007171C E105                       	smpsAlterNote       $05
0007171E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071722 E108                       	smpsAlterNote       $08
00071724 E701                       	dc.b	smpsNoAttack, $01
00071726 E10E                       	smpsAlterNote       $0E
00071728 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007172C E108                       	smpsAlterNote       $08
0007172E E701                       	dc.b	smpsNoAttack, $01
00071730 E105                       	smpsAlterNote       $05
00071732 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071736 E10B                       	smpsAlterNote       $0B
00071738 E701                       	dc.b	smpsNoAttack, $01
0007173A E10F                       	smpsAlterNote       $0F
0007173C E701                       	dc.b	smpsNoAttack, $01
0007173E E10E                       	smpsAlterNote       $0E
00071740 E701                       	dc.b	smpsNoAttack, $01
00071742 E108                       	smpsAlterNote       $08
00071744 E701                       	dc.b	smpsNoAttack, $01
00071746 E104                       	smpsAlterNote       $04
00071748 E701                       	dc.b	smpsNoAttack, $01
0007174A E108                       	smpsAlterNote       $08
0007174C E701                       	dc.b	smpsNoAttack, $01
0007174E E10B                       	smpsAlterNote       $0B
00071750 E701                       	dc.b	smpsNoAttack, $01
00071752 E10F                       	smpsAlterNote       $0F
00071754 E701                       	dc.b	smpsNoAttack, $01
00071756 E10B                       	smpsAlterNote       $0B
00071758 E701                       	dc.b	smpsNoAttack, $01
0007175A E105                       	smpsAlterNote       $05
0007175C E701                       	dc.b	smpsNoAttack, $01
0007175E E104                       	smpsAlterNote       $04
00071760 E701                       	dc.b	smpsNoAttack, $01
00071762 E108                       	smpsAlterNote       $08
00071764 E701                       	dc.b	smpsNoAttack, $01
00071766 E10E                       	smpsAlterNote       $0E
00071768 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007176C E10B                       	smpsAlterNote       $0B
0007176E E701                       	dc.b	smpsNoAttack, $01
00071770 E105                       	smpsAlterNote       $05
00071772 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071776 E10B                       	smpsAlterNote       $0B
00071778 E701                       	dc.b	smpsNoAttack, $01
0007177A E10E                       	smpsAlterNote       $0E
0007177C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071780 E108                       	smpsAlterNote       $08
00071782 E701                       	dc.b	smpsNoAttack, $01
00071784 E104                       	smpsAlterNote       $04
00071786 E701                       	dc.b	smpsNoAttack, $01
00071788 E105                       	smpsAlterNote       $05
0007178A E701                       	dc.b	smpsNoAttack, $01
0007178C E10B                       	smpsAlterNote       $0B
0007178E E701                       	dc.b	smpsNoAttack, $01
00071790 E10F                       	smpsAlterNote       $0F
00071792 E701                       	dc.b	smpsNoAttack, $01
00071794 E10B                       	smpsAlterNote       $0B
00071796 E701                       	dc.b	smpsNoAttack, $01
00071798 E108                       	smpsAlterNote       $08
0007179A E701                       	dc.b	smpsNoAttack, $01
0007179C E104                       	smpsAlterNote       $04
0007179E E701                       	dc.b	smpsNoAttack, $01
000717A0 E108                       	smpsAlterNote       $08
000717A2 E701                       	dc.b	smpsNoAttack, $01
000717A4 E10E                       	smpsAlterNote       $0E
000717A6 E701                       	dc.b	smpsNoAttack, $01
000717A8 E10F                       	smpsAlterNote       $0F
000717AA E701                       	dc.b	smpsNoAttack, $01
000717AC E10B                       	smpsAlterNote       $0B
000717AE E701                       	dc.b	smpsNoAttack, $01
000717B0 E105                       	smpsAlterNote       $05
000717B2 E701                       	dc.b	smpsNoAttack, $01
000717B4 E10B                       	smpsAlterNote       $0B
000717B6 C60E                       	dc.b	nA5, $0E
000717B8 E105                       	smpsAlterNote       $05
000717BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000717BE E10B                       	smpsAlterNote       $0B
000717C0 E701                       	dc.b	smpsNoAttack, $01
000717C2 E10E                       	smpsAlterNote       $0E
000717C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000717C8 E108                       	smpsAlterNote       $08
000717CA E701                       	dc.b	smpsNoAttack, $01
000717CC E104                       	smpsAlterNote       $04
000717CE E701                       	dc.b	smpsNoAttack, $01
000717D0 E105                       	smpsAlterNote       $05
000717D2 E701                       	dc.b	smpsNoAttack, $01
000717D4 E10B                       	smpsAlterNote       $0B
000717D6 E701                       	dc.b	smpsNoAttack, $01
000717D8 E10F                       	smpsAlterNote       $0F
000717DA E701                       	dc.b	smpsNoAttack, $01
000717DC E10B                       	smpsAlterNote       $0B
000717DE E701                       	dc.b	smpsNoAttack, $01
000717E0 E108                       	smpsAlterNote       $08
000717E2 E701                       	dc.b	smpsNoAttack, $01
000717E4 E104                       	smpsAlterNote       $04
000717E6 E701                       	dc.b	smpsNoAttack, $01
000717E8 E108                       	smpsAlterNote       $08
000717EA E701                       	dc.b	smpsNoAttack, $01
000717EC E10E                       	smpsAlterNote       $0E
000717EE E701                       	dc.b	smpsNoAttack, $01
000717F0 E10F                       	smpsAlterNote       $0F
000717F2 E701                       	dc.b	smpsNoAttack, $01
000717F4 E10B                       	smpsAlterNote       $0B
000717F6 E701                       	dc.b	smpsNoAttack, $01
000717F8 E105                       	smpsAlterNote       $05
000717FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000717FE E108                       	smpsAlterNote       $08
00071800 E701                       	dc.b	smpsNoAttack, $01
00071802 E10E                       	smpsAlterNote       $0E
00071804 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071808 E108                       	smpsAlterNote       $08
0007180A E701                       	dc.b	smpsNoAttack, $01
0007180C E105                       	smpsAlterNote       $05
0007180E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071812 E10B                       	smpsAlterNote       $0B
00071814 E701                       	dc.b	smpsNoAttack, $01
00071816 E10F                       	smpsAlterNote       $0F
00071818 E701                       	dc.b	smpsNoAttack, $01
0007181A E10E                       	smpsAlterNote       $0E
0007181C E701                       	dc.b	smpsNoAttack, $01
0007181E E108                       	smpsAlterNote       $08
00071820 E701                       	dc.b	smpsNoAttack, $01
00071822 E104                       	smpsAlterNote       $04
00071824 E701                       	dc.b	smpsNoAttack, $01
00071826 E108                       	smpsAlterNote       $08
00071828 E701                       	dc.b	smpsNoAttack, $01
0007182A E10E                       	smpsAlterNote       $0E
0007182C E701                       	dc.b	smpsNoAttack, $01
0007182E E10F                       	smpsAlterNote       $0F
00071830 E701                       	dc.b	smpsNoAttack, $01
00071832 E10B                       	smpsAlterNote       $0B
00071834 E701                       	dc.b	smpsNoAttack, $01
00071836 E105                       	smpsAlterNote       $05
00071838 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007183C E108                       	smpsAlterNote       $08
0007183E E701                       	dc.b	smpsNoAttack, $01
00071840 E10E                       	smpsAlterNote       $0E
00071842 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071846 E108                       	smpsAlterNote       $08
00071848 E701                       	dc.b	smpsNoAttack, $01
0007184A E105                       	smpsAlterNote       $05
0007184C E701                       	dc.b	smpsNoAttack, $01
00071850 E10B                       	smpsAlterNote       $0B
00071852 E6FD                       	smpsAlterVol        $FD
00071854 C604 8001                  	dc.b	nA5, $04, nRst, $01
00071858 E109                       	smpsAlterNote       $09
0007185A C404                       	dc.b	nG5, $04
0007185C E10B                       	smpsAlterNote       $0B
0007185E C604 8001                  	dc.b	nA5, $04, nRst, $01
00071862 E107                       	smpsAlterNote       $07
00071864 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0007186A E10B                       	smpsAlterNote       $0B
0007186C C604                       	dc.b	nA5, $04
0007186E E109                       	smpsAlterNote       $09
00071870 C404 8001                  	dc.b	nG5, $04, nRst, $01
00071874 E10B                       	smpsAlterNote       $0B
00071876 C604                       	dc.b	nA5, $04
00071878 E108                       	smpsAlterNote       $08
0007187A C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00071882 E106                       	smpsAlterNote       $06
00071884 C904 8001                  	dc.b	nC6, $04, nRst, $01
00071888 E10C                       	smpsAlterNote       $0C
0007188A C704                       	dc.b	nBb5, $04
0007188C E10B                       	smpsAlterNote       $0B
0007188E C604 8001                  	dc.b	nA5, $04, nRst, $01
00071892 E109                       	smpsAlterNote       $09
00071894 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0007189E E10B                       	smpsAlterNote       $0B
000718A0 C60D                       	dc.b	nA5, $0D
000718A2 E108                       	smpsAlterNote       $08
000718A4 E701                       	dc.b	smpsNoAttack, $01
000718A6 E104                       	smpsAlterNote       $04
000718A8 E701                       	dc.b	smpsNoAttack, $01
000718AA E108                       	smpsAlterNote       $08
000718AC E701                       	dc.b	smpsNoAttack, $01
000718AE E10E                       	smpsAlterNote       $0E
000718B0 E701                       	dc.b	smpsNoAttack, $01
000718B2 E10F                       	smpsAlterNote       $0F
000718B4 E701                       	dc.b	smpsNoAttack, $01
000718B6 E10B                       	smpsAlterNote       $0B
000718B8 E701                       	dc.b	smpsNoAttack, $01
000718BA E105                       	smpsAlterNote       $05
000718BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000718C0 E108                       	smpsAlterNote       $08
000718C2 E701                       	dc.b	smpsNoAttack, $01
000718C4 E10E                       	smpsAlterNote       $0E
000718C6 E701                       	dc.b	smpsNoAttack, $01
000718C8 E10F                       	smpsAlterNote       $0F
000718CA 8001                       	dc.b	nRst, $01
000718CC E109                       	smpsAlterNote       $09
000718CE C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000718D4 E108                       	smpsAlterNote       $08
000718D6 C10D                       	dc.b	nE5, $0D
000718D8 E102                       	smpsAlterNote       $02
000718DA E701                       	dc.b	smpsNoAttack, $01
000718DC E101                       	smpsAlterNote       $01
000718DE E701                       	dc.b	smpsNoAttack, $01
000718E0 E105                       	smpsAlterNote       $05
000718E2 E701                       	dc.b	smpsNoAttack, $01
000718E4 E10B                       	smpsAlterNote       $0B
000718E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000718EA E108                       	smpsAlterNote       $08
000718EC E701                       	dc.b	smpsNoAttack, $01
000718EE E102                       	smpsAlterNote       $02
000718F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000718F4 E108                       	smpsAlterNote       $08
000718F6 E701                       	dc.b	smpsNoAttack, $01
000718F8 E10B                       	smpsAlterNote       $0B
000718FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000718FE E105                       	smpsAlterNote       $05
00071900 E701                       	dc.b	smpsNoAttack, $01
00071902 E101                       	smpsAlterNote       $01
00071904 E701                       	dc.b	smpsNoAttack, $01
00071906 E102                       	smpsAlterNote       $02
00071908 E701                       	dc.b	smpsNoAttack, $01
0007190A E108                       	smpsAlterNote       $08
0007190C E701                       	dc.b	smpsNoAttack, $01
0007190E E10C                       	smpsAlterNote       $0C
00071910 E701                       	dc.b	smpsNoAttack, $01
00071912 E108                       	smpsAlterNote       $08
00071914 E701                       	dc.b	smpsNoAttack, $01
00071916 E105                       	smpsAlterNote       $05
00071918 E701                       	dc.b	smpsNoAttack, $01
0007191A E101                       	smpsAlterNote       $01
0007191C E701                       	dc.b	smpsNoAttack, $01
0007191E E105                       	smpsAlterNote       $05
00071920 E701                       	dc.b	smpsNoAttack, $01
00071922 E10B                       	smpsAlterNote       $0B
00071924 E701                       	dc.b	smpsNoAttack, $01
00071926 E10C                       	smpsAlterNote       $0C
00071928 E701                       	dc.b	smpsNoAttack, $01
0007192A E108                       	smpsAlterNote       $08
0007192C E701                       	dc.b	smpsNoAttack, $01
0007192E E102                       	smpsAlterNote       $02
00071930 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071934 E105                       	smpsAlterNote       $05
00071936 E701                       	dc.b	smpsNoAttack, $01
00071938 E10B                       	smpsAlterNote       $0B
0007193A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007193E E105                       	smpsAlterNote       $05
00071940 E701                       	dc.b	smpsNoAttack, $01
00071942 E102                       	smpsAlterNote       $02
00071944 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071948 E108                       	smpsAlterNote       $08
0007194A E701                       	dc.b	smpsNoAttack, $01
0007194C E10C                       	smpsAlterNote       $0C
0007194E E701                       	dc.b	smpsNoAttack, $01
00071950 E10B                       	smpsAlterNote       $0B
00071952 E701                       	dc.b	smpsNoAttack, $01
00071954 E105                       	smpsAlterNote       $05
00071956 E701                       	dc.b	smpsNoAttack, $01
00071958 E101                       	smpsAlterNote       $01
0007195A E701                       	dc.b	smpsNoAttack, $01
0007195C E105                       	smpsAlterNote       $05
0007195E E701                       	dc.b	smpsNoAttack, $01
00071960 E108                       	smpsAlterNote       $08
00071962 E701                       	dc.b	smpsNoAttack, $01
00071964 E10C                       	smpsAlterNote       $0C
00071966 E701                       	dc.b	smpsNoAttack, $01
00071968 E108                       	smpsAlterNote       $08
0007196A E701                       	dc.b	smpsNoAttack, $01
0007196C E102                       	smpsAlterNote       $02
0007196E E701                       	dc.b	smpsNoAttack, $01
00071970 E101                       	smpsAlterNote       $01
00071972 E701                       	dc.b	smpsNoAttack, $01
00071974 E105                       	smpsAlterNote       $05
00071976 E701                       	dc.b	smpsNoAttack, $01
00071978 E10B                       	smpsAlterNote       $0B
0007197A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007197E E108                       	smpsAlterNote       $08
00071980 E701                       	dc.b	smpsNoAttack, $01
00071982 E102                       	smpsAlterNote       $02
00071984 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071988 E108                       	smpsAlterNote       $08
0007198A E701                       	dc.b	smpsNoAttack, $01
0007198C E10B                       	smpsAlterNote       $0B
0007198E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071992 E105                       	smpsAlterNote       $05
00071994 E701                       	dc.b	smpsNoAttack, $01
00071996 E101                       	smpsAlterNote       $01
00071998 E701                       	dc.b	smpsNoAttack, $01
0007199A E102                       	smpsAlterNote       $02
0007199C E701                       	dc.b	smpsNoAttack, $01
0007199E E108                       	smpsAlterNote       $08
000719A0 E701                       	dc.b	smpsNoAttack, $01
000719A2 E10C                       	smpsAlterNote       $0C
000719A4 E701                       	dc.b	smpsNoAttack, $01
000719A6 E108                       	smpsAlterNote       $08
000719A8 E701                       	dc.b	smpsNoAttack, $01
000719AA E105                       	smpsAlterNote       $05
000719AC E701                       	dc.b	smpsNoAttack, $01
000719AE E101                       	smpsAlterNote       $01
000719B0 E701                       	dc.b	smpsNoAttack, $01
000719B2 E105                       	smpsAlterNote       $05
000719B4 E701                       	dc.b	smpsNoAttack, $01
000719B6 E10B                       	smpsAlterNote       $0B
000719B8 E701                       	dc.b	smpsNoAttack, $01
000719BA E10C                       	smpsAlterNote       $0C
000719BC E701                       	dc.b	smpsNoAttack, $01
000719BE E108                       	smpsAlterNote       $08
000719C0 E701                       	dc.b	smpsNoAttack, $01
000719C2 E102                       	smpsAlterNote       $02
000719C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000719C8 E105                       	smpsAlterNote       $05
000719CA E701                       	dc.b	smpsNoAttack, $01
000719CC E10B                       	smpsAlterNote       $0B
000719CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000719D2 E105                       	smpsAlterNote       $05
000719D4 E701                       	dc.b	smpsNoAttack, $01
000719D6 E101                       	smpsAlterNote       $01
000719D8 E701                       	dc.b	smpsNoAttack, $01
000719DA E102                       	smpsAlterNote       $02
000719DC E701                       	dc.b	smpsNoAttack, $01
000719DE E108                       	smpsAlterNote       $08
000719E0 E701                       	dc.b	smpsNoAttack, $01
000719E2 E10C                       	smpsAlterNote       $0C
000719E4 E701                       	dc.b	smpsNoAttack, $01
000719E6 E108                       	smpsAlterNote       $08
000719E8 E701                       	dc.b	smpsNoAttack, $01
000719EA E105                       	smpsAlterNote       $05
000719EC E701                       	dc.b	smpsNoAttack, $01
000719EE E101                       	smpsAlterNote       $01
000719F0 E701                       	dc.b	smpsNoAttack, $01
000719F2 E105                       	smpsAlterNote       $05
000719F4 E701                       	dc.b	smpsNoAttack, $01
000719F6 E10B                       	smpsAlterNote       $0B
000719F8 E701                       	dc.b	smpsNoAttack, $01
000719FA E10C                       	smpsAlterNote       $0C
000719FC E701                       	dc.b	smpsNoAttack, $01
000719FE E108                       	smpsAlterNote       $08
00071A00 E701                       	dc.b	smpsNoAttack, $01
00071A02 E102                       	smpsAlterNote       $02
00071A04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071A08 E105                       	smpsAlterNote       $05
00071A0A E701                       	dc.b	smpsNoAttack, $01
00071A0C E10B                       	smpsAlterNote       $0B
00071A0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071A12 E105                       	smpsAlterNote       $05
00071A14 E701                       	dc.b	smpsNoAttack, $01
00071A16 E102                       	smpsAlterNote       $02
00071A18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071A1C E108                       	smpsAlterNote       $08
00071A1E E701                       	dc.b	smpsNoAttack, $01
00071A20 E10C                       	smpsAlterNote       $0C
00071A22 E701                       	dc.b	smpsNoAttack, $01
00071A24 E10B                       	smpsAlterNote       $0B
00071A26 E701                       	dc.b	smpsNoAttack, $01
00071A28 E105                       	smpsAlterNote       $05
00071A2A E701                       	dc.b	smpsNoAttack, $01
00071A2C E101                       	smpsAlterNote       $01
00071A2E E701                       	dc.b	smpsNoAttack, $01
00071A30 E105                       	smpsAlterNote       $05
00071A32 E701                       	dc.b	smpsNoAttack, $01
00071A34 E108                       	smpsAlterNote       $08
00071A36 E701                       	dc.b	smpsNoAttack, $01
00071A38 E10C                       	smpsAlterNote       $0C
00071A3A E701                       	dc.b	smpsNoAttack, $01
00071A3E E10B                       	smpsAlterNote       $0B
00071A40 C604 8001                  	dc.b	nA5, $04, nRst, $01
00071A44 E109                       	smpsAlterNote       $09
00071A46 C404                       	dc.b	nG5, $04
00071A48 E10B                       	smpsAlterNote       $0B
00071A4A C604 8001                  	dc.b	nA5, $04, nRst, $01
00071A4E E107                       	smpsAlterNote       $07
00071A50 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00071A56 E10B                       	smpsAlterNote       $0B
00071A58 C604                       	dc.b	nA5, $04
00071A5A E109                       	smpsAlterNote       $09
00071A5C C404 8001                  	dc.b	nG5, $04, nRst, $01
00071A60 E10B                       	smpsAlterNote       $0B
00071A62 C604                       	dc.b	nA5, $04
00071A64 E108                       	smpsAlterNote       $08
00071A66 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00071A6C E106                       	smpsAlterNote       $06
00071A6E C904 8001                  	dc.b	nC6, $04, nRst, $01
00071A72 E10C                       	smpsAlterNote       $0C
00071A74 C704                       	dc.b	nBb5, $04
00071A76 E10B                       	smpsAlterNote       $0B
00071A78 C604 8001                  	dc.b	nA5, $04, nRst, $01
00071A7C E109                       	smpsAlterNote       $09
00071A7E C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00071A88 E10B                       	smpsAlterNote       $0B
00071A8A C60D                       	dc.b	nA5, $0D
00071A8C E108                       	smpsAlterNote       $08
00071A8E E701                       	dc.b	smpsNoAttack, $01
00071A90 E104                       	smpsAlterNote       $04
00071A92 E701                       	dc.b	smpsNoAttack, $01
00071A94 E108                       	smpsAlterNote       $08
00071A96 E701                       	dc.b	smpsNoAttack, $01
00071A98 E10B                       	smpsAlterNote       $0B
00071A9A E701                       	dc.b	smpsNoAttack, $01
00071A9C E10F                       	smpsAlterNote       $0F
00071A9E E701                       	dc.b	smpsNoAttack, $01
00071AA0 E10B                       	smpsAlterNote       $0B
00071AA2 E701                       	dc.b	smpsNoAttack, $01
00071AA4 E105                       	smpsAlterNote       $05
00071AA6 E701                       	dc.b	smpsNoAttack, $01
00071AA8 E104                       	smpsAlterNote       $04
00071AAA E701                       	dc.b	smpsNoAttack, $01
00071AAC E108                       	smpsAlterNote       $08
00071AAE E701                       	dc.b	smpsNoAttack, $01
00071AB0 E10E                       	smpsAlterNote       $0E
00071AB2 E701                       	dc.b	smpsNoAttack, $01
00071AB4 E10F                       	smpsAlterNote       $0F
00071AB6 8001                       	dc.b	nRst, $01
00071AB8 E109                       	smpsAlterNote       $09
00071ABA C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00071AC0 E108                       	smpsAlterNote       $08
00071AC2 C10D                       	dc.b	nE5, $0D
00071AC4 E105                       	smpsAlterNote       $05
00071AC6 E701                       	dc.b	smpsNoAttack, $01
00071AC8 E101                       	smpsAlterNote       $01
00071ACA E701                       	dc.b	smpsNoAttack, $01
00071ACC E105                       	smpsAlterNote       $05
00071ACE E701                       	dc.b	smpsNoAttack, $01
00071AD0 E10B                       	smpsAlterNote       $0B
00071AD2 E701                       	dc.b	smpsNoAttack, $01
00071AD4 E10C                       	smpsAlterNote       $0C
00071AD6 E701                       	dc.b	smpsNoAttack, $01
00071AD8 E108                       	smpsAlterNote       $08
00071ADA E701                       	dc.b	smpsNoAttack, $01
00071ADC E102                       	smpsAlterNote       $02
00071ADE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071AE2 E105                       	smpsAlterNote       $05
00071AE4 E701                       	dc.b	smpsNoAttack, $01
00071AE6 E10B                       	smpsAlterNote       $0B
00071AE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071AEC E105                       	smpsAlterNote       $05
00071AEE E701                       	dc.b	smpsNoAttack, $01
00071AF0 E102                       	smpsAlterNote       $02
00071AF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071AF6 E108                       	smpsAlterNote       $08
00071AF8 E701                       	dc.b	smpsNoAttack, $01
00071AFA E10C                       	smpsAlterNote       $0C
00071AFC E701                       	dc.b	smpsNoAttack, $01
00071AFE E10B                       	smpsAlterNote       $0B
00071B00 E701                       	dc.b	smpsNoAttack, $01
00071B02 E105                       	smpsAlterNote       $05
00071B04 E701                       	dc.b	smpsNoAttack, $01
00071B06 E101                       	smpsAlterNote       $01
00071B08 E701                       	dc.b	smpsNoAttack, $01
00071B0A E105                       	smpsAlterNote       $05
00071B0C E701                       	dc.b	smpsNoAttack, $01
00071B0E E108                       	smpsAlterNote       $08
00071B10 E701                       	dc.b	smpsNoAttack, $01
00071B12 E10C                       	smpsAlterNote       $0C
00071B14 E701                       	dc.b	smpsNoAttack, $01
00071B16 E108                       	smpsAlterNote       $08
00071B18 E701                       	dc.b	smpsNoAttack, $01
00071B1A E102                       	smpsAlterNote       $02
00071B1C E701                       	dc.b	smpsNoAttack, $01
00071B1E E101                       	smpsAlterNote       $01
00071B20 E701                       	dc.b	smpsNoAttack, $01
00071B22 E105                       	smpsAlterNote       $05
00071B24 E701                       	dc.b	smpsNoAttack, $01
00071B26 E10B                       	smpsAlterNote       $0B
00071B28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071B2C E108                       	smpsAlterNote       $08
00071B2E E701                       	dc.b	smpsNoAttack, $01
00071B30 E102                       	smpsAlterNote       $02
00071B32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071B36 E108                       	smpsAlterNote       $08
00071B38 E701                       	dc.b	smpsNoAttack, $01
00071B3A E10B                       	smpsAlterNote       $0B
00071B3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071B40 E105                       	smpsAlterNote       $05
00071B42 E701                       	dc.b	smpsNoAttack, $01
00071B44 E101                       	smpsAlterNote       $01
00071B46 E701                       	dc.b	smpsNoAttack, $01
00071B48 E102                       	smpsAlterNote       $02
00071B4A E701                       	dc.b	smpsNoAttack, $01
00071B4C E108                       	smpsAlterNote       $08
00071B4E E701                       	dc.b	smpsNoAttack, $01
00071B50 E10C                       	smpsAlterNote       $0C
00071B52 E701                       	dc.b	smpsNoAttack, $01
00071B54 E108                       	smpsAlterNote       $08
00071B56 E701                       	dc.b	smpsNoAttack, $01
00071B58 E105                       	smpsAlterNote       $05
00071B5A E701                       	dc.b	smpsNoAttack, $01
00071B5C E101                       	smpsAlterNote       $01
00071B5E E701                       	dc.b	smpsNoAttack, $01
00071B60 E105                       	smpsAlterNote       $05
00071B62 E701                       	dc.b	smpsNoAttack, $01
00071B64 E10B                       	smpsAlterNote       $0B
00071B66 E701                       	dc.b	smpsNoAttack, $01
00071B68 E10C                       	smpsAlterNote       $0C
00071B6A E701                       	dc.b	smpsNoAttack, $01
00071B6C E108                       	smpsAlterNote       $08
00071B6E E701                       	dc.b	smpsNoAttack, $01
00071B70 E102                       	smpsAlterNote       $02
00071B72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071B76 E108                       	smpsAlterNote       $08
00071B78 E701                       	dc.b	smpsNoAttack, $01
00071B7A E10B                       	smpsAlterNote       $0B
00071B7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071B80 E105                       	smpsAlterNote       $05
00071B82 E701                       	dc.b	smpsNoAttack, $01
00071B84 E101                       	smpsAlterNote       $01
00071B86 E701                       	dc.b	smpsNoAttack, $01
00071B88 E102                       	smpsAlterNote       $02
00071B8A E701                       	dc.b	smpsNoAttack, $01
00071B8C E108                       	smpsAlterNote       $08
00071B8E E701                       	dc.b	smpsNoAttack, $01
00071B90 E10C                       	smpsAlterNote       $0C
00071B92 E701                       	dc.b	smpsNoAttack, $01
00071B94 E108                       	smpsAlterNote       $08
00071B96 E701                       	dc.b	smpsNoAttack, $01
00071B98 E105                       	smpsAlterNote       $05
00071B9A E701                       	dc.b	smpsNoAttack, $01
00071B9C E101                       	smpsAlterNote       $01
00071B9E E701                       	dc.b	smpsNoAttack, $01
00071BA0 E105                       	smpsAlterNote       $05
00071BA2 E701                       	dc.b	smpsNoAttack, $01
00071BA4 E10B                       	smpsAlterNote       $0B
00071BA6 E701                       	dc.b	smpsNoAttack, $01
00071BA8 E10C                       	smpsAlterNote       $0C
00071BAA E701                       	dc.b	smpsNoAttack, $01
00071BAC E108                       	smpsAlterNote       $08
00071BAE E701                       	dc.b	smpsNoAttack, $01
00071BB0 E102                       	smpsAlterNote       $02
00071BB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071BB6 E105                       	smpsAlterNote       $05
00071BB8 E701                       	dc.b	smpsNoAttack, $01
00071BBA E10B                       	smpsAlterNote       $0B
00071BBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071BC0 E105                       	smpsAlterNote       $05
00071BC2 E701                       	dc.b	smpsNoAttack, $01
00071BC4 E102                       	smpsAlterNote       $02
00071BC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071BCA E108                       	smpsAlterNote       $08
00071BCC E701                       	dc.b	smpsNoAttack, $01
00071BCE E10C                       	smpsAlterNote       $0C
00071BD0 E701                       	dc.b	smpsNoAttack, $01
00071BD2 E10B                       	smpsAlterNote       $0B
00071BD4 E701                       	dc.b	smpsNoAttack, $01
00071BD6 E105                       	smpsAlterNote       $05
00071BD8 E701                       	dc.b	smpsNoAttack, $01
00071BDA E101                       	smpsAlterNote       $01
00071BDC E701                       	dc.b	smpsNoAttack, $01
00071BDE E105                       	smpsAlterNote       $05
00071BE0 E701                       	dc.b	smpsNoAttack, $01
00071BE2 E108                       	smpsAlterNote       $08
00071BE4 E701                       	dc.b	smpsNoAttack, $01
00071BE6 E10C                       	smpsAlterNote       $0C
00071BE8 E701                       	dc.b	smpsNoAttack, $01
00071BEA E108                       	smpsAlterNote       $08
00071BEC E701                       	dc.b	smpsNoAttack, $01
00071BEE E102                       	smpsAlterNote       $02
00071BF0 E701                       	dc.b	smpsNoAttack, $01
00071BF2 E101                       	smpsAlterNote       $01
00071BF4 E701                       	dc.b	smpsNoAttack, $01
00071BF6 E105                       	smpsAlterNote       $05
00071BF8 E701                       	dc.b	smpsNoAttack, $01
00071BFA E10B                       	smpsAlterNote       $0B
00071BFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071C00 E108                       	smpsAlterNote       $08
00071C02 E701                       	dc.b	smpsNoAttack, $01
00071C04 E102                       	smpsAlterNote       $02
00071C06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071C0A E108                       	smpsAlterNote       $08
00071C0C E701                       	dc.b	smpsNoAttack, $01
00071C0E E10B                       	smpsAlterNote       $0B
00071C10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071C14 E105                       	smpsAlterNote       $05
00071C16 E701                       	dc.b	smpsNoAttack, $01
00071C18 E102                       	smpsAlterNote       $02
00071C1A 8001                       	dc.b	nRst, $01
00071C1C E107                       	smpsAlterNote       $07
00071C1E BF01 8001                  	dc.b	nD5, $01, nRst, $01
00071C22 E108                       	smpsAlterNote       $08
00071C24 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00071C28 E102                       	smpsAlterNote       $02
00071C2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071C2E E108                       	smpsAlterNote       $08
00071C30 E701                       	dc.b	smpsNoAttack, $01
00071C32 E10B                       	smpsAlterNote       $0B
00071C34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071C38 E105                       	smpsAlterNote       $05
00071C3A E701                       	dc.b	smpsNoAttack, $01
00071C3C E101                       	smpsAlterNote       $01
00071C3E E701                       	dc.b	smpsNoAttack, $01
00071C40 E102                       	smpsAlterNote       $02
00071C42 E701                       	dc.b	smpsNoAttack, $01
00071C44 E108                       	smpsAlterNote       $08
00071C46 E701                       	dc.b	smpsNoAttack, $01
00071C48 E10C                       	smpsAlterNote       $0C
00071C4A E701                       	dc.b	smpsNoAttack, $01
00071C4C E108                       	smpsAlterNote       $08
00071C4E E701                       	dc.b	smpsNoAttack, $01
00071C50 E105                       	smpsAlterNote       $05
00071C52 E701                       	dc.b	smpsNoAttack, $01
00071C54 E101                       	smpsAlterNote       $01
00071C56 E701                       	dc.b	smpsNoAttack, $01
00071C58 E105                       	smpsAlterNote       $05
00071C5A E701                       	dc.b	smpsNoAttack, $01
00071C5C E10B                       	smpsAlterNote       $0B
00071C5E E701                       	dc.b	smpsNoAttack, $01
00071C60 E10C                       	smpsAlterNote       $0C
00071C62 E701                       	dc.b	smpsNoAttack, $01
00071C64 E108                       	smpsAlterNote       $08
00071C66 E701                       	dc.b	smpsNoAttack, $01
00071C68 E102                       	smpsAlterNote       $02
00071C6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071C6E E105                       	smpsAlterNote       $05
00071C70 E701                       	dc.b	smpsNoAttack, $01
00071C72 E10B                       	smpsAlterNote       $0B
00071C74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071C78 E105                       	smpsAlterNote       $05
00071C7A E701                       	dc.b	smpsNoAttack, $01
00071C7C E102                       	smpsAlterNote       $02
00071C7E E701                       	dc.b	smpsNoAttack, $01
00071C80 E109                       	smpsAlterNote       $09
00071C82 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00071C86 E108                       	smpsAlterNote       $08
00071C88 C10D                       	dc.b	nE5, $0D
00071C8A E105                       	smpsAlterNote       $05
00071C8C E701                       	dc.b	smpsNoAttack, $01
00071C8E E101                       	smpsAlterNote       $01
00071C90 E701                       	dc.b	smpsNoAttack, $01
00071C92 E102                       	smpsAlterNote       $02
00071C94 E701                       	dc.b	smpsNoAttack, $01
00071C96 E108                       	smpsAlterNote       $08
00071C98 E701                       	dc.b	smpsNoAttack, $01
00071C9A E10C                       	smpsAlterNote       $0C
00071C9C E701                       	dc.b	smpsNoAttack, $01
00071C9E E108                       	smpsAlterNote       $08
00071CA0 E701                       	dc.b	smpsNoAttack, $01
00071CA2 E105                       	smpsAlterNote       $05
00071CA4 E701                       	dc.b	smpsNoAttack, $01
00071CA6 E101                       	smpsAlterNote       $01
00071CA8 E701                       	dc.b	smpsNoAttack, $01
00071CAA E105                       	smpsAlterNote       $05
00071CAC E701                       	dc.b	smpsNoAttack, $01
00071CAE E10B                       	smpsAlterNote       $0B
00071CB0 E701                       	dc.b	smpsNoAttack, $01
00071CB2 E10C                       	smpsAlterNote       $0C
00071CB4 E701                       	dc.b	smpsNoAttack, $01
00071CB6 E108                       	smpsAlterNote       $08
00071CB8 E701                       	dc.b	smpsNoAttack, $01
00071CBA E102                       	smpsAlterNote       $02
00071CBC E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00071CC4 E10B                       	smpsAlterNote       $0B
00071CC6 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00071CCA E10C                       	smpsAlterNote       $0C
00071CCC BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00071CD0 E10B                       	smpsAlterNote       $0B
00071CD2 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00071CD8 E107                       	smpsAlterNote       $07
00071CDA BF03                       	dc.b	nD5, $03
00071CDC E108                       	smpsAlterNote       $08
00071CDE C103 8001                  	dc.b	nE5, $03, nRst, $01
00071CE2 E109                       	smpsAlterNote       $09
00071CE4 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00071CEA E10B                       	smpsAlterNote       $0B
00071CEC C606 8001                  	dc.b	nA5, $06, nRst, $01
00071CF0 E107                       	smpsAlterNote       $07
00071CF2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00071CF6 E106                       	smpsAlterNote       $06
00071CF8 C90D                       	dc.b	nC6, $0D
00071CFA E103                       	smpsAlterNote       $03
00071CFC E701                       	dc.b	smpsNoAttack, $01
00071CFE E1FF                       	smpsAlterNote       $FF
00071D00 E701                       	dc.b	smpsNoAttack, $01
00071D02 E103                       	smpsAlterNote       $03
00071D04 E701                       	dc.b	smpsNoAttack, $01
00071D06 E109                       	smpsAlterNote       $09
00071D08 E701                       	dc.b	smpsNoAttack, $01
00071D0A E10A                       	smpsAlterNote       $0A
00071D0C E701                       	dc.b	smpsNoAttack, $01
00071D0E E106                       	smpsAlterNote       $06
00071D10 E701                       	dc.b	smpsNoAttack, $01
00071D12 E100                       	smpsAlterNote       $00
00071D14 E701                       	dc.b	smpsNoAttack, $01
00071D16 E10C                       	smpsAlterNote       $0C
00071D18 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00071D1C E10B                       	smpsAlterNote       $0B
00071D1E C603                       	dc.b	nA5, $03
00071D20 E109                       	smpsAlterNote       $09
00071D22 C403 8001                  	dc.b	nG5, $03, nRst, $01
00071D26 E10B                       	smpsAlterNote       $0B
00071D28 C60D                       	dc.b	nA5, $0D
00071D2A E105                       	smpsAlterNote       $05
00071D2C E701                       	dc.b	smpsNoAttack, $01
00071D2E E104                       	smpsAlterNote       $04
00071D30 E701                       	dc.b	smpsNoAttack, $01
00071D32 E108                       	smpsAlterNote       $08
00071D34 E701                       	dc.b	smpsNoAttack, $01
00071D36 E10E                       	smpsAlterNote       $0E
00071D38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071D3C E10B                       	smpsAlterNote       $0B
00071D3E E701                       	dc.b	smpsNoAttack, $01
00071D40 E105                       	smpsAlterNote       $05
00071D42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071D46 E10B                       	smpsAlterNote       $0B
00071D48 E701                       	dc.b	smpsNoAttack, $01
00071D4A E10E                       	smpsAlterNote       $0E
00071D4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071D50 E108                       	smpsAlterNote       $08
00071D52 E701                       	dc.b	smpsNoAttack, $01
00071D54 E104                       	smpsAlterNote       $04
00071D56 E701                       	dc.b	smpsNoAttack, $01
00071D58 E105                       	smpsAlterNote       $05
00071D5A E701                       	dc.b	smpsNoAttack, $01
00071D5C E10B                       	smpsAlterNote       $0B
00071D5E E701                       	dc.b	smpsNoAttack, $01
00071D60 E10F                       	smpsAlterNote       $0F
00071D62 E701                       	dc.b	smpsNoAttack, $01
00071D64 E10B                       	smpsAlterNote       $0B
00071D66 E701                       	dc.b	smpsNoAttack, $01
00071D68 E108                       	smpsAlterNote       $08
00071D6A E701                       	dc.b	smpsNoAttack, $01
00071D6C E104                       	smpsAlterNote       $04
00071D6E E701                       	dc.b	smpsNoAttack, $01
00071D70 E108                       	smpsAlterNote       $08
00071D72 E701                       	dc.b	smpsNoAttack, $01
00071D74 E10E                       	smpsAlterNote       $0E
00071D76 E701                       	dc.b	smpsNoAttack, $01
00071D78 E10F                       	smpsAlterNote       $0F
00071D7A E701                       	dc.b	smpsNoAttack, $01
00071D7C E10B                       	smpsAlterNote       $0B
00071D7E E701                       	dc.b	smpsNoAttack, $01
00071D80 E105                       	smpsAlterNote       $05
00071D82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071D86 E108                       	smpsAlterNote       $08
00071D88 E701                       	dc.b	smpsNoAttack, $01
00071D8A E10E                       	smpsAlterNote       $0E
00071D8C E701                       	dc.b	smpsNoAttack, $01
00071D8E E10F                       	smpsAlterNote       $0F
00071D90 800F                       	dc.b	nRst, $0F
00071D92 E107                       	smpsAlterNote       $07
00071D94 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00071D98 E108                       	smpsAlterNote       $08
00071D9A C103                       	dc.b	nE5, $03
00071D9C E109                       	smpsAlterNote       $09
00071D9E C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00071DA4 E10B                       	smpsAlterNote       $0B
00071DA6 C607                       	dc.b	nA5, $07
00071DA8 E107                       	smpsAlterNote       $07
00071DAA BF03 8001                  	dc.b	nD5, $03, nRst, $01
00071DAE E106                       	smpsAlterNote       $06
00071DB0 C90D                       	dc.b	nC6, $0D
00071DB2 E107                       	smpsAlterNote       $07
00071DB4 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00071DB8 E10C                       	smpsAlterNote       $0C
00071DBA C704                       	dc.b	nBb5, $04
00071DBC E10B                       	smpsAlterNote       $0B
00071DBE C604 8001                  	dc.b	nA5, $04, nRst, $01
00071DC2 E109                       	smpsAlterNote       $09
00071DC4 C404                       	dc.b	nG5, $04
00071DC6 E10B                       	smpsAlterNote       $0B
00071DC8 C60D                       	dc.b	nA5, $0D
00071DCA E108                       	smpsAlterNote       $08
00071DCC E701                       	dc.b	smpsNoAttack, $01
00071DCE E105                       	smpsAlterNote       $05
00071DD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071DD4 E10B                       	smpsAlterNote       $0B
00071DD6 E701                       	dc.b	smpsNoAttack, $01
00071DD8 E10F                       	smpsAlterNote       $0F
00071DDA E701                       	dc.b	smpsNoAttack, $01
00071DDC E10E                       	smpsAlterNote       $0E
00071DDE E701                       	dc.b	smpsNoAttack, $01
00071DE0 E108                       	smpsAlterNote       $08
00071DE2 E701                       	dc.b	smpsNoAttack, $01
00071DE4 E104                       	smpsAlterNote       $04
00071DE6 E701                       	dc.b	smpsNoAttack, $01
00071DE8 E108                       	smpsAlterNote       $08
00071DEA E701                       	dc.b	smpsNoAttack, $01
00071DEC E10B                       	smpsAlterNote       $0B
00071DEE E701                       	dc.b	smpsNoAttack, $01
00071DF0 E10F                       	smpsAlterNote       $0F
00071DF2 E701                       	dc.b	smpsNoAttack, $01
00071DF4 E10B                       	smpsAlterNote       $0B
00071DF6 E701                       	dc.b	smpsNoAttack, $01
00071DF8 E105                       	smpsAlterNote       $05
00071DFA E701                       	dc.b	smpsNoAttack, $01
00071DFC E104                       	smpsAlterNote       $04
00071DFE E701                       	dc.b	smpsNoAttack, $01
00071E00 E108                       	smpsAlterNote       $08
00071E02 E701                       	dc.b	smpsNoAttack, $01
00071E04 E10E                       	smpsAlterNote       $0E
00071E06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071E0A E10B                       	smpsAlterNote       $0B
00071E0C E701                       	dc.b	smpsNoAttack, $01
00071E0E E105                       	smpsAlterNote       $05
00071E10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071E14 E10B                       	smpsAlterNote       $0B
00071E16 E701                       	dc.b	smpsNoAttack, $01
00071E18 E10E                       	smpsAlterNote       $0E
00071E1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071E1E E108                       	smpsAlterNote       $08
00071E20 E701                       	dc.b	smpsNoAttack, $01
00071E22 E105                       	smpsAlterNote       $05
00071E24 8001                       	dc.b	nRst, $01
00071E26 E109                       	smpsAlterNote       $09
00071E28 C401 8001                  	dc.b	nG5, $01, nRst, $01
00071E2C E10B                       	smpsAlterNote       $0B
00071E2E C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00071E36 E109                       	smpsAlterNote       $09
00071E38 C404                       	dc.b	nG5, $04
00071E3A E10B                       	smpsAlterNote       $0B
00071E3C C604 8001                  	dc.b	nA5, $04, nRst, $01
00071E40 E107                       	smpsAlterNote       $07
00071E42 BF0D                       	dc.b	nD5, $0D
00071E44 E101                       	smpsAlterNote       $01
00071E46 E701                       	dc.b	smpsNoAttack, $01
00071E48 E100                       	smpsAlterNote       $00
00071E4A E701                       	dc.b	smpsNoAttack, $01
00071E4C E104                       	smpsAlterNote       $04
00071E4E E701                       	dc.b	smpsNoAttack, $01
00071E50 E10A                       	smpsAlterNote       $0A
00071E52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071E56 E107                       	smpsAlterNote       $07
00071E58 E701                       	dc.b	smpsNoAttack, $01
00071E5A E101                       	smpsAlterNote       $01
00071E5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071E60 E107                       	smpsAlterNote       $07
00071E62 E701                       	dc.b	smpsNoAttack, $01
00071E64 E10A                       	smpsAlterNote       $0A
00071E66 E701                       	dc.b	smpsNoAttack, $01
00071E68 E10B                       	smpsAlterNote       $0B
00071E6A 8001                       	dc.b	nRst, $01
00071E6C E108                       	smpsAlterNote       $08
00071E6E 8001                       	dc.b	nRst, $01
00071E70 E109                       	smpsAlterNote       $09
00071E72 8001 C401                  	dc.b	nRst, $01, nG5, $01
00071E76 E10B                       	smpsAlterNote       $0B
00071E78 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00071E80 E108                       	smpsAlterNote       $08
00071E82 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00071E86 E109                       	smpsAlterNote       $09
00071E88 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00071E8C E108                       	smpsAlterNote       $08
00071E8E CD02 8001                  	dc.b	nE6, $02, nRst, $01
00071E92 E106                       	smpsAlterNote       $06
00071E94 C903                       	dc.b	nC6, $03
00071E96 E109                       	smpsAlterNote       $09
00071E98 C403 8001                  	dc.b	nG5, $03, nRst, $01
00071E9C E10C                       	smpsAlterNote       $0C
00071E9E C70D                       	dc.b	nBb5, $0D
00071EA0 E109                       	smpsAlterNote       $09
00071EA2 E701                       	dc.b	smpsNoAttack, $01
00071EA4 E105                       	smpsAlterNote       $05
00071EA6 E701                       	dc.b	smpsNoAttack, $01
00071EA8 E109                       	smpsAlterNote       $09
00071EAA E701                       	dc.b	smpsNoAttack, $01
00071EAC E10F                       	smpsAlterNote       $0F
00071EAE E701                       	dc.b	smpsNoAttack, $01
00071EB0 E110                       	smpsAlterNote       $10
00071EB2 E701                       	dc.b	smpsNoAttack, $01
00071EB4 E10C                       	smpsAlterNote       $0C
00071EB6 E701                       	dc.b	smpsNoAttack, $01
00071EB8 E106                       	smpsAlterNote       $06
00071EBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071EBE E109                       	smpsAlterNote       $09
00071EC0 E701                       	dc.b	smpsNoAttack, $01
00071EC2 E10F                       	smpsAlterNote       $0F
00071EC4 E701                       	dc.b	smpsNoAttack, $01
00071EC6 E110                       	smpsAlterNote       $10
00071EC8 8001                       	dc.b	nRst, $01
00071ECA E10B                       	smpsAlterNote       $0B
00071ECC C606 8001                  	dc.b	nA5, $06, nRst, $01
00071ED0 E109                       	smpsAlterNote       $09
00071ED2 C40D                       	dc.b	nG5, $0D
00071ED4 E103                       	smpsAlterNote       $03
00071ED6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071EDA E106                       	smpsAlterNote       $06
00071EDC E701                       	dc.b	smpsNoAttack, $01
00071EDE E10C                       	smpsAlterNote       $0C
00071EE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071EE4 E106                       	smpsAlterNote       $06
00071EE6 E701                       	dc.b	smpsNoAttack, $01
00071EE8 E103                       	smpsAlterNote       $03
00071EEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071EEE E109                       	smpsAlterNote       $09
00071EF0 E701                       	dc.b	smpsNoAttack, $01
00071EF2 E10D                       	smpsAlterNote       $0D
00071EF4 E701                       	dc.b	smpsNoAttack, $01
00071EF6 E10C                       	smpsAlterNote       $0C
00071EF8 E701                       	dc.b	smpsNoAttack, $01
00071EFA E106                       	smpsAlterNote       $06
00071EFC E701                       	dc.b	smpsNoAttack, $01
00071EFE E102                       	smpsAlterNote       $02
00071F00 E701                       	dc.b	smpsNoAttack, $01
00071F02 E103                       	smpsAlterNote       $03
00071F04 8001                       	dc.b	nRst, $01
00071F06 E10B                       	smpsAlterNote       $0B
00071F08 C60D                       	dc.b	nA5, $0D
00071F0A E108                       	smpsAlterNote       $08
00071F0C E701                       	dc.b	smpsNoAttack, $01
00071F0E E104                       	smpsAlterNote       $04
00071F10 E701                       	dc.b	smpsNoAttack, $01
00071F12 E108                       	smpsAlterNote       $08
00071F14 E701                       	dc.b	smpsNoAttack, $01
00071F16 E10B                       	smpsAlterNote       $0B
00071F18 E701                       	dc.b	smpsNoAttack, $01
00071F1A E10F                       	smpsAlterNote       $0F
00071F1C E701                       	dc.b	smpsNoAttack, $01
00071F1E E10B                       	smpsAlterNote       $0B
00071F20 E701                       	dc.b	smpsNoAttack, $01
00071F22 E105                       	smpsAlterNote       $05
00071F24 E701                       	dc.b	smpsNoAttack, $01
00071F26 E104                       	smpsAlterNote       $04
00071F28 E701                       	dc.b	smpsNoAttack, $01
00071F2A E108                       	smpsAlterNote       $08
00071F2C E701                       	dc.b	smpsNoAttack, $01
00071F2E E10E                       	smpsAlterNote       $0E
00071F30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071F34 E10B                       	smpsAlterNote       $0B
00071F36 E701                       	dc.b	smpsNoAttack, $01
00071F38 E105                       	smpsAlterNote       $05
00071F3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071F3E E10C                       	smpsAlterNote       $0C
00071F40 C70E                       	dc.b	nBb5, $0E
00071F42 E106                       	smpsAlterNote       $06
00071F44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071F48 E10C                       	smpsAlterNote       $0C
00071F4A E701                       	dc.b	smpsNoAttack, $01
00071F4C E10F                       	smpsAlterNote       $0F
00071F4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00071F52 E109                       	smpsAlterNote       $09
00071F54 E701                       	dc.b	smpsNoAttack, $01
00071F56 E105                       	smpsAlterNote       $05
00071F58 E701                       	dc.b	smpsNoAttack, $01
00071F5A E106                       	smpsAlterNote       $06
00071F5C E701                       	dc.b	smpsNoAttack, $01
00071F5E E10C                       	smpsAlterNote       $0C
00071F60 E701                       	dc.b	smpsNoAttack, $01
00071F62 E110                       	smpsAlterNote       $10
00071F64 E701                       	dc.b	smpsNoAttack, $01
00071F66 E10C                       	smpsAlterNote       $0C
00071F68 E701                       	dc.b	smpsNoAttack, $01
00071F6A E109                       	smpsAlterNote       $09
00071F6C E701                       	dc.b	smpsNoAttack, $01
00071F6E E105                       	smpsAlterNote       $05
00071F70 E701                       	dc.b	smpsNoAttack, $01
00071F72 E106                       	smpsAlterNote       $06
00071F74 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00071F78 E107                       	smpsAlterNote       $07
00071F7A CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00071F7F E108                       	smpsAlterNote       $08
00071F81 CD0D                       	dc.b	nE6, $0D
00071F83 E107                       	smpsAlterNote       $07
00071F85 CB0D                       	dc.b	nD6, $0D
00071F87 E104                       	smpsAlterNote       $04
00071F89 E701                       	dc.b	smpsNoAttack, $01
00071F8B E100                       	smpsAlterNote       $00
00071F8D E701                       	dc.b	smpsNoAttack, $01
00071F8F E101                       	smpsAlterNote       $01
00071F91 E701                       	dc.b	smpsNoAttack, $01
00071F93 E107                       	smpsAlterNote       $07
00071F95 E701                       	dc.b	smpsNoAttack, $01
00071F97 E10B                       	smpsAlterNote       $0B
00071F99 E701                       	dc.b	smpsNoAttack, $01
00071F9B E107                       	smpsAlterNote       $07
00071F9D E701                       	dc.b	smpsNoAttack, $01
00071F9F E104                       	smpsAlterNote       $04
00071FA1 E701                       	dc.b	smpsNoAttack, $01
00071FA3 E100                       	smpsAlterNote       $00
00071FA5 E701                       	dc.b	smpsNoAttack, $01
00071FA7 E104                       	smpsAlterNote       $04
00071FA9 E701                       	dc.b	smpsNoAttack, $01
00071FAB E10A                       	smpsAlterNote       $0A
00071FAD E701                       	dc.b	smpsNoAttack, $01
00071FAF E10B                       	smpsAlterNote       $0B
00071FB1 E701                       	dc.b	smpsNoAttack, $01
00071FB3 E108                       	smpsAlterNote       $08
00071FB5 CC0D                       	dc.b	nEb6, $0D
00071FB7 E105                       	smpsAlterNote       $05
00071FB9 E701                       	dc.b	smpsNoAttack, $01
00071FBB E101                       	smpsAlterNote       $01
00071FBD E701                       	dc.b	smpsNoAttack, $01
00071FBF E102                       	smpsAlterNote       $02
00071FC1 E701                       	dc.b	smpsNoAttack, $01
00071FC3 E108                       	smpsAlterNote       $08
00071FC5 E701                       	dc.b	smpsNoAttack, $01
00071FC7 E106                       	smpsAlterNote       $06
00071FC9 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00071FD5 8001                       	dc.b	nRst, $01
00071FD7 E107                       	smpsAlterNote       $07
00071FD9 CB0D                       	dc.b	nD6, $0D
00071FDB E104                       	smpsAlterNote       $04
00071FDD E701                       	dc.b	smpsNoAttack, $01
00071FDF E100                       	smpsAlterNote       $00
00071FE1 E701                       	dc.b	smpsNoAttack, $01
00071FE3 E104                       	smpsAlterNote       $04
00071FE5 E701                       	dc.b	smpsNoAttack, $01
00071FE7 E107                       	smpsAlterNote       $07
00071FE9 E701                       	dc.b	smpsNoAttack, $01
00071FEB E10B                       	smpsAlterNote       $0B
00071FED E701                       	dc.b	smpsNoAttack, $01
00071FEF E107                       	smpsAlterNote       $07
00071FF1 E701                       	dc.b	smpsNoAttack, $01
00071FF3 E101                       	smpsAlterNote       $01
00071FF5 E701                       	dc.b	smpsNoAttack, $01
00071FF7 E100                       	smpsAlterNote       $00
00071FF9 E701                       	dc.b	smpsNoAttack, $01
00071FFB E104                       	smpsAlterNote       $04
00071FFD E701                       	dc.b	smpsNoAttack, $01
00071FFF E10A                       	smpsAlterNote       $0A
00072001 E701                       	dc.b	smpsNoAttack, $01
00072003 E10B                       	smpsAlterNote       $0B
00072005 8001                       	dc.b	nRst, $01
00072007 E109                       	smpsAlterNote       $09
00072009 CE0A                       	dc.b	nF6, $0A
0007200B E108                       	smpsAlterNote       $08
0007200D CC07                       	dc.b	nEb6, $07
0007200F E106                       	smpsAlterNote       $06
00072011 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0007201D E107                       	smpsAlterNote       $07
0007201F CB0D                       	dc.b	nD6, $0D
00072021 E101                       	smpsAlterNote       $01
00072023 E701                       	dc.b	smpsNoAttack, $01
00072025 E100                       	smpsAlterNote       $00
00072027 E701                       	dc.b	smpsNoAttack, $01
00072029 E104                       	smpsAlterNote       $04
0007202B E701                       	dc.b	smpsNoAttack, $01
0007202D E10A                       	smpsAlterNote       $0A
0007202F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072033 E107                       	smpsAlterNote       $07
00072035 E701                       	dc.b	smpsNoAttack, $01
00072037 E101                       	smpsAlterNote       $01
00072039 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007203D E107                       	smpsAlterNote       $07
0007203F E701                       	dc.b	smpsNoAttack, $01
00072041 E10A                       	smpsAlterNote       $0A
00072043 E701                       	dc.b	smpsNoAttack, $01
00072045 E10B                       	smpsAlterNote       $0B
00072047 8001                       	dc.b	nRst, $01
00072049 E108                       	smpsAlterNote       $08
0007204B CC0D                       	dc.b	nEb6, $0D
0007204D E102                       	smpsAlterNote       $02
0007204F E701                       	dc.b	smpsNoAttack, $01
00072051 E101                       	smpsAlterNote       $01
00072053 E701                       	dc.b	smpsNoAttack, $01
00072055 E105                       	smpsAlterNote       $05
00072057 E701                       	dc.b	smpsNoAttack, $01
00072059 E108                       	smpsAlterNote       $08
0007205B 8001                       	dc.b	nRst, $01
0007205D E106                       	smpsAlterNote       $06
0007205F C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0007206B 8001                       	dc.b	nRst, $01
0007206D E107                       	smpsAlterNote       $07
0007206F CB0D                       	dc.b	nD6, $0D
00072071 E101                       	smpsAlterNote       $01
00072073 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072077 E104                       	smpsAlterNote       $04
00072079 E701                       	dc.b	smpsNoAttack, $01
0007207B E10A                       	smpsAlterNote       $0A
0007207D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072081 E104                       	smpsAlterNote       $04
00072083 E701                       	dc.b	smpsNoAttack, $01
00072085 E101                       	smpsAlterNote       $01
00072087 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007208B E107                       	smpsAlterNote       $07
0007208D E701                       	dc.b	smpsNoAttack, $01
0007208F E10B                       	smpsAlterNote       $0B
00072091 E701                       	dc.b	smpsNoAttack, $01
00072093 E10A                       	smpsAlterNote       $0A
00072095 E701                       	dc.b	smpsNoAttack, $01
00072097 E104                       	smpsAlterNote       $04
00072099 E701                       	dc.b	smpsNoAttack, $01
0007209B E100                       	smpsAlterNote       $00
0007209D E701                       	dc.b	smpsNoAttack, $01
0007209F E101                       	smpsAlterNote       $01
000720A1 801C                       	dc.b	nRst, $1C
000720A5 E107                       	smpsAlterNote       $07
000720A7 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000720AB E603                       	smpsAlterVol        $03
000720AD F6F1 AD                    	smpsJump            music84_Jump03
000720B0                            
000720B0                            ; FM3 Data
000720B0                            music84_FM3:
000720B0 E0C0                       	smpsPan             panCenter, $00
000720B4 E109                       	smpsAlterNote       $09
000720B6 C203 8007                  	dc.b	nF5, $03, nRst, $07
000720BA E108                       	smpsAlterNote       $08
000720BC C103 800B                  	dc.b	nE5, $03, nRst, $0B
000720C0 E10B                       	smpsAlterNote       $0B
000720C2 BA03 8006                  	dc.b	nA4, $03, nRst, $06
000720C8 E040                       	smpsPan             panRight, $00
000720CA E110                       	smpsAlterNote       $10
000720CC E6F9                       	smpsAlterVol        $F9
000720CE C702 8001                  	dc.b	nBb5, $02, nRst, $01
000720D2 E10F                       	smpsAlterNote       $0F
000720D4 C603                       	dc.b	nA5, $03
000720D6 E10D                       	smpsAlterNote       $0D
000720D8 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000720DE E10C                       	smpsAlterNote       $0C
000720E0 C103 8001                  	dc.b	nE5, $03, nRst, $01
000720E4 E10A                       	smpsAlterNote       $0A
000720E6 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000720EA E10F                       	smpsAlterNote       $0F
000720EC BA01 8001                  	dc.b	nA4, $01, nRst, $01
000720F0 E0C0                       	smpsPan             panCenter, $00
000720F4 E109                       	smpsAlterNote       $09
000720F6 E609                       	smpsAlterVol        $09
000720F8 B603                       	dc.b	nF4, $03
000720FA                            
000720FA                            music84_Jump02:
000720FA E70A                       	dc.b	smpsNoAttack, $0A
000720FC E103                       	smpsAlterNote       $03
000720FE E701                       	dc.b	smpsNoAttack, $01
00072100 E102                       	smpsAlterNote       $02
00072102 E701                       	dc.b	smpsNoAttack, $01
00072104 E106                       	smpsAlterNote       $06
00072106 E701                       	dc.b	smpsNoAttack, $01
00072108 E10C                       	smpsAlterNote       $0C
0007210A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007210E E109                       	smpsAlterNote       $09
00072110 E701                       	dc.b	smpsNoAttack, $01
00072112 E103                       	smpsAlterNote       $03
00072114 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072118 E109                       	smpsAlterNote       $09
0007211A E701                       	dc.b	smpsNoAttack, $01
0007211C E10C                       	smpsAlterNote       $0C
0007211E E701                       	dc.b	smpsNoAttack, $01
00072120 E10D                       	smpsAlterNote       $0D
00072122 8001                       	dc.b	nRst, $01
00072124 E109                       	smpsAlterNote       $09
00072126 B80D                       	dc.b	nG4, $0D
00072128 E103                       	smpsAlterNote       $03
0007212A E701                       	dc.b	smpsNoAttack, $01
0007212C E102                       	smpsAlterNote       $02
0007212E E701                       	dc.b	smpsNoAttack, $01
00072130 E106                       	smpsAlterNote       $06
00072132 E701                       	dc.b	smpsNoAttack, $01
00072134 E10C                       	smpsAlterNote       $0C
00072136 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007213A E109                       	smpsAlterNote       $09
0007213C E701                       	dc.b	smpsNoAttack, $01
0007213E E103                       	smpsAlterNote       $03
00072140 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072144 E109                       	smpsAlterNote       $09
00072146 E701                       	dc.b	smpsNoAttack, $01
00072148 E10C                       	smpsAlterNote       $0C
0007214A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007214E E106                       	smpsAlterNote       $06
00072150 E701                       	dc.b	smpsNoAttack, $01
00072152 E102                       	smpsAlterNote       $02
00072154 E701                       	dc.b	smpsNoAttack, $01
00072156 E103                       	smpsAlterNote       $03
00072158 E701                       	dc.b	smpsNoAttack, $01
0007215A E109                       	smpsAlterNote       $09
0007215C E701                       	dc.b	smpsNoAttack, $01
0007215E E10D                       	smpsAlterNote       $0D
00072160 E701                       	dc.b	smpsNoAttack, $01
00072162 E109                       	smpsAlterNote       $09
00072164 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00072168 E10B                       	smpsAlterNote       $0B
0007216A BA0D                       	dc.b	nA4, $0D
0007216C E105                       	smpsAlterNote       $05
0007216E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072172 E108                       	smpsAlterNote       $08
00072174 E701                       	dc.b	smpsNoAttack, $01
00072176 E10E                       	smpsAlterNote       $0E
00072178 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007217C E108                       	smpsAlterNote       $08
0007217E E701                       	dc.b	smpsNoAttack, $01
00072180 E104                       	smpsAlterNote       $04
00072182 E701                       	dc.b	smpsNoAttack, $01
00072184 E105                       	smpsAlterNote       $05
00072186 E701                       	dc.b	smpsNoAttack, $01
00072188 E10B                       	smpsAlterNote       $0B
0007218A E701                       	dc.b	smpsNoAttack, $01
0007218C E10F                       	smpsAlterNote       $0F
0007218E E701                       	dc.b	smpsNoAttack, $01
00072190 E10B                       	smpsAlterNote       $0B
00072192 E701                       	dc.b	smpsNoAttack, $01
00072194 E108                       	smpsAlterNote       $08
00072196 E701                       	dc.b	smpsNoAttack, $01
00072198 E104                       	smpsAlterNote       $04
0007219A E701                       	dc.b	smpsNoAttack, $01
0007219C E108                       	smpsAlterNote       $08
0007219E E701                       	dc.b	smpsNoAttack, $01
000721A0 E10E                       	smpsAlterNote       $0E
000721A2 E701                       	dc.b	smpsNoAttack, $01
000721A4 E10F                       	smpsAlterNote       $0F
000721A6 E701                       	dc.b	smpsNoAttack, $01
000721A8 E10B                       	smpsAlterNote       $0B
000721AA E701                       	dc.b	smpsNoAttack, $01
000721AC E105                       	smpsAlterNote       $05
000721AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000721B2 E108                       	smpsAlterNote       $08
000721B4 E701                       	dc.b	smpsNoAttack, $01
000721B6 E10E                       	smpsAlterNote       $0E
000721B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000721BC E108                       	smpsAlterNote       $08
000721BE E701                       	dc.b	smpsNoAttack, $01
000721C0 E105                       	smpsAlterNote       $05
000721C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000721C6 E10B                       	smpsAlterNote       $0B
000721C8 E701                       	dc.b	smpsNoAttack, $01
000721CA E10F                       	smpsAlterNote       $0F
000721CC E701                       	dc.b	smpsNoAttack, $01
000721CE E10E                       	smpsAlterNote       $0E
000721D0 E701                       	dc.b	smpsNoAttack, $01
000721D2 E108                       	smpsAlterNote       $08
000721D4 E701                       	dc.b	smpsNoAttack, $01
000721D6 E104                       	smpsAlterNote       $04
000721D8 E701                       	dc.b	smpsNoAttack, $01
000721DA E105                       	smpsAlterNote       $05
000721DC 8001                       	dc.b	nRst, $01
000721DE E108                       	smpsAlterNote       $08
000721E0 B50A                       	dc.b	nE4, $0A
000721E2 E109                       	smpsAlterNote       $09
000721E4 B60D                       	dc.b	nF4, $0D
000721E6 E106                       	smpsAlterNote       $06
000721E8 E701                       	dc.b	smpsNoAttack, $01
000721EA E103                       	smpsAlterNote       $03
000721EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000721F0 E109                       	smpsAlterNote       $09
000721F2 E701                       	dc.b	smpsNoAttack, $01
000721F4 E10D                       	smpsAlterNote       $0D
000721F6 E701                       	dc.b	smpsNoAttack, $01
000721F8 E10C                       	smpsAlterNote       $0C
000721FA E701                       	dc.b	smpsNoAttack, $01
000721FC E106                       	smpsAlterNote       $06
000721FE E701                       	dc.b	smpsNoAttack, $01
00072200 E102                       	smpsAlterNote       $02
00072202 E701                       	dc.b	smpsNoAttack, $01
00072204 E106                       	smpsAlterNote       $06
00072206 E701                       	dc.b	smpsNoAttack, $01
00072208 E109                       	smpsAlterNote       $09
0007220A E701                       	dc.b	smpsNoAttack, $01
0007220C E10D                       	smpsAlterNote       $0D
0007220E E701                       	dc.b	smpsNoAttack, $01
00072210 E109                       	smpsAlterNote       $09
00072212 B80D                       	dc.b	nG4, $0D
00072214 E106                       	smpsAlterNote       $06
00072216 E701                       	dc.b	smpsNoAttack, $01
00072218 E103                       	smpsAlterNote       $03
0007221A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007221E E109                       	smpsAlterNote       $09
00072220 E701                       	dc.b	smpsNoAttack, $01
00072222 E10D                       	smpsAlterNote       $0D
00072224 E701                       	dc.b	smpsNoAttack, $01
00072226 E10C                       	smpsAlterNote       $0C
00072228 E701                       	dc.b	smpsNoAttack, $01
0007222A E106                       	smpsAlterNote       $06
0007222C E701                       	dc.b	smpsNoAttack, $01
0007222E E102                       	smpsAlterNote       $02
00072230 E701                       	dc.b	smpsNoAttack, $01
00072232 E106                       	smpsAlterNote       $06
00072234 E701                       	dc.b	smpsNoAttack, $01
00072236 E109                       	smpsAlterNote       $09
00072238 E701                       	dc.b	smpsNoAttack, $01
0007223A E10D                       	smpsAlterNote       $0D
0007223C E701                       	dc.b	smpsNoAttack, $01
0007223E E109                       	smpsAlterNote       $09
00072240 E701                       	dc.b	smpsNoAttack, $01
00072242 E103                       	smpsAlterNote       $03
00072244 E701                       	dc.b	smpsNoAttack, $01
00072246 E102                       	smpsAlterNote       $02
00072248 E701                       	dc.b	smpsNoAttack, $01
0007224A E106                       	smpsAlterNote       $06
0007224C E701                       	dc.b	smpsNoAttack, $01
0007224E E10C                       	smpsAlterNote       $0C
00072250 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072254 E109                       	smpsAlterNote       $09
00072256 E701                       	dc.b	smpsNoAttack, $01
00072258 E10B                       	smpsAlterNote       $0B
0007225A BA0D                       	dc.b	nA4, $0D
0007225C E108                       	smpsAlterNote       $08
0007225E E701                       	dc.b	smpsNoAttack, $01
00072260 E104                       	smpsAlterNote       $04
00072262 E701                       	dc.b	smpsNoAttack, $01
00072264 E108                       	smpsAlterNote       $08
00072266 E701                       	dc.b	smpsNoAttack, $01
00072268 E10B                       	smpsAlterNote       $0B
0007226A E701                       	dc.b	smpsNoAttack, $01
0007226C E10F                       	smpsAlterNote       $0F
0007226E E701                       	dc.b	smpsNoAttack, $01
00072270 E10B                       	smpsAlterNote       $0B
00072272 E701                       	dc.b	smpsNoAttack, $01
00072274 E105                       	smpsAlterNote       $05
00072276 E701                       	dc.b	smpsNoAttack, $01
00072278 E104                       	smpsAlterNote       $04
0007227A E701                       	dc.b	smpsNoAttack, $01
0007227C E108                       	smpsAlterNote       $08
0007227E E701                       	dc.b	smpsNoAttack, $01
00072280 E10E                       	smpsAlterNote       $0E
00072282 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072286 E10B                       	smpsAlterNote       $0B
00072288 E701                       	dc.b	smpsNoAttack, $01
0007228A E105                       	smpsAlterNote       $05
0007228C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072290 E10B                       	smpsAlterNote       $0B
00072292 E701                       	dc.b	smpsNoAttack, $01
00072294 E10E                       	smpsAlterNote       $0E
00072296 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007229A E108                       	smpsAlterNote       $08
0007229C E701                       	dc.b	smpsNoAttack, $01
0007229E E104                       	smpsAlterNote       $04
000722A0 E701                       	dc.b	smpsNoAttack, $01
000722A2 E105                       	smpsAlterNote       $05
000722A4 E701                       	dc.b	smpsNoAttack, $01
000722A6 E10B                       	smpsAlterNote       $0B
000722A8 E701                       	dc.b	smpsNoAttack, $01
000722AA E10F                       	smpsAlterNote       $0F
000722AC E701                       	dc.b	smpsNoAttack, $01
000722AE E10B                       	smpsAlterNote       $0B
000722B0 E701                       	dc.b	smpsNoAttack, $01
000722B2 E108                       	smpsAlterNote       $08
000722B4 E701                       	dc.b	smpsNoAttack, $01
000722B6 E105                       	smpsAlterNote       $05
000722B8 8001                       	dc.b	nRst, $01
000722BA E109                       	smpsAlterNote       $09
000722BC B609 8001                  	dc.b	nF4, $09, nRst, $01
000722C0 E108                       	smpsAlterNote       $08
000722C2 B506 8001                  	dc.b	nE4, $06, nRst, $01
000722C6 E107                       	smpsAlterNote       $07
000722C8 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000722CC E108                       	smpsAlterNote       $08
000722CE B502 8001                  	dc.b	nE4, $02, nRst, $01
000722D2 E109                       	smpsAlterNote       $09
000722D4 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000722DA E10B                       	smpsAlterNote       $0B
000722DC BA0D                       	dc.b	nA4, $0D
000722DE E108                       	smpsAlterNote       $08
000722E0 E701                       	dc.b	smpsNoAttack, $01
000722E2 E104                       	smpsAlterNote       $04
000722E4 E701                       	dc.b	smpsNoAttack, $01
000722E6 E108                       	smpsAlterNote       $08
000722E8 E701                       	dc.b	smpsNoAttack, $01
000722EA E10E                       	smpsAlterNote       $0E
000722EC E701                       	dc.b	smpsNoAttack, $01
000722EE E10F                       	smpsAlterNote       $0F
000722F0 E701                       	dc.b	smpsNoAttack, $01
000722F2 E10B                       	smpsAlterNote       $0B
000722F4 E701                       	dc.b	smpsNoAttack, $01
000722F6 E105                       	smpsAlterNote       $05
000722F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000722FC E108                       	smpsAlterNote       $08
000722FE E701                       	dc.b	smpsNoAttack, $01
00072300 E10E                       	smpsAlterNote       $0E
00072302 E701                       	dc.b	smpsNoAttack, $01
00072304 E10F                       	smpsAlterNote       $0F
00072306 8001                       	dc.b	nRst, $01
00072308 E109                       	smpsAlterNote       $09
0007230A C20D                       	dc.b	nF5, $0D
0007230C E103                       	smpsAlterNote       $03
0007230E E701                       	dc.b	smpsNoAttack, $01
00072310 E102                       	smpsAlterNote       $02
00072312 E701                       	dc.b	smpsNoAttack, $01
00072314 E106                       	smpsAlterNote       $06
00072316 E701                       	dc.b	smpsNoAttack, $01
00072318 E10C                       	smpsAlterNote       $0C
0007231A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007231E E109                       	smpsAlterNote       $09
00072320 E701                       	dc.b	smpsNoAttack, $01
00072322 E103                       	smpsAlterNote       $03
00072324 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072328 E109                       	smpsAlterNote       $09
0007232A E701                       	dc.b	smpsNoAttack, $01
0007232C E10C                       	smpsAlterNote       $0C
0007232E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072332 E106                       	smpsAlterNote       $06
00072334 E701                       	dc.b	smpsNoAttack, $01
00072336 E102                       	smpsAlterNote       $02
00072338 E701                       	dc.b	smpsNoAttack, $01
0007233A E103                       	smpsAlterNote       $03
0007233C E701                       	dc.b	smpsNoAttack, $01
0007233E E109                       	smpsAlterNote       $09
00072340 E701                       	dc.b	smpsNoAttack, $01
00072342 E10D                       	smpsAlterNote       $0D
00072344 E701                       	dc.b	smpsNoAttack, $01
00072346 E109                       	smpsAlterNote       $09
00072348 E701                       	dc.b	smpsNoAttack, $01
0007234A E106                       	smpsAlterNote       $06
0007234C E701                       	dc.b	smpsNoAttack, $01
0007234E E102                       	smpsAlterNote       $02
00072350 E701                       	dc.b	smpsNoAttack, $01
00072352 E106                       	smpsAlterNote       $06
00072354 E701                       	dc.b	smpsNoAttack, $01
00072356 E10C                       	smpsAlterNote       $0C
00072358 E701                       	dc.b	smpsNoAttack, $01
0007235A E10D                       	smpsAlterNote       $0D
0007235C E701                       	dc.b	smpsNoAttack, $01
0007235E E109                       	smpsAlterNote       $09
00072360 E701                       	dc.b	smpsNoAttack, $01
00072362 E103                       	smpsAlterNote       $03
00072364 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072368 E106                       	smpsAlterNote       $06
0007236A E701                       	dc.b	smpsNoAttack, $01
0007236C E10C                       	smpsAlterNote       $0C
0007236E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072372 E106                       	smpsAlterNote       $06
00072374 E701                       	dc.b	smpsNoAttack, $01
00072376 E103                       	smpsAlterNote       $03
00072378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007237C E109                       	smpsAlterNote       $09
0007237E E701                       	dc.b	smpsNoAttack, $01
00072380 E10D                       	smpsAlterNote       $0D
00072382 E701                       	dc.b	smpsNoAttack, $01
00072384 E10C                       	smpsAlterNote       $0C
00072386 E701                       	dc.b	smpsNoAttack, $01
00072388 E106                       	smpsAlterNote       $06
0007238A E701                       	dc.b	smpsNoAttack, $01
0007238C E102                       	smpsAlterNote       $02
0007238E E701                       	dc.b	smpsNoAttack, $01
00072390 E106                       	smpsAlterNote       $06
00072392 E701                       	dc.b	smpsNoAttack, $01
00072394 E109                       	smpsAlterNote       $09
00072396 E701                       	dc.b	smpsNoAttack, $01
00072398 E10D                       	smpsAlterNote       $0D
0007239A E701                       	dc.b	smpsNoAttack, $01
0007239C E109                       	smpsAlterNote       $09
0007239E E701                       	dc.b	smpsNoAttack, $01
000723A0 E103                       	smpsAlterNote       $03
000723A2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000723A6 E109                       	smpsAlterNote       $09
000723A8 C206                       	dc.b	nF5, $06
000723AA E108                       	smpsAlterNote       $08
000723AC C10E                       	dc.b	nE5, $0E
000723AE E102                       	smpsAlterNote       $02
000723B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000723B4 E108                       	smpsAlterNote       $08
000723B6 E701                       	dc.b	smpsNoAttack, $01
000723B8 E10B                       	smpsAlterNote       $0B
000723BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000723BE E105                       	smpsAlterNote       $05
000723C0 E701                       	dc.b	smpsNoAttack, $01
000723C2 E101                       	smpsAlterNote       $01
000723C4 E701                       	dc.b	smpsNoAttack, $01
000723C6 E102                       	smpsAlterNote       $02
000723C8 E701                       	dc.b	smpsNoAttack, $01
000723CA E108                       	smpsAlterNote       $08
000723CC E701                       	dc.b	smpsNoAttack, $01
000723CE E10C                       	smpsAlterNote       $0C
000723D0 E701                       	dc.b	smpsNoAttack, $01
000723D2 E107                       	smpsAlterNote       $07
000723D4 BF0E                       	dc.b	nD5, $0E
000723D6 E101                       	smpsAlterNote       $01
000723D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000723DC E107                       	smpsAlterNote       $07
000723DE E701                       	dc.b	smpsNoAttack, $01
000723E0 E10A                       	smpsAlterNote       $0A
000723E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000723E6 E104                       	smpsAlterNote       $04
000723E8 E701                       	dc.b	smpsNoAttack, $01
000723EA E100                       	smpsAlterNote       $00
000723EC E701                       	dc.b	smpsNoAttack, $01
000723EE E104                       	smpsAlterNote       $04
000723F0 E701                       	dc.b	smpsNoAttack, $01
000723F2 E107                       	smpsAlterNote       $07
000723F4 E701                       	dc.b	smpsNoAttack, $01
000723F6 E10B                       	smpsAlterNote       $0B
000723F8 E701                       	dc.b	smpsNoAttack, $01
000723FA E107                       	smpsAlterNote       $07
000723FC E701                       	dc.b	smpsNoAttack, $01
000723FE E101                       	smpsAlterNote       $01
00072400 E701                       	dc.b	smpsNoAttack, $01
00072402 E100                       	smpsAlterNote       $00
00072404 E701                       	dc.b	smpsNoAttack, $01
00072406 E104                       	smpsAlterNote       $04
00072408 E701                       	dc.b	smpsNoAttack, $01
0007240A E10A                       	smpsAlterNote       $0A
0007240C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072410 E107                       	smpsAlterNote       $07
00072412 E701                       	dc.b	smpsNoAttack, $01
00072414 E101                       	smpsAlterNote       $01
00072416 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007241A E107                       	smpsAlterNote       $07
0007241C E701                       	dc.b	smpsNoAttack, $01
0007241E E10A                       	smpsAlterNote       $0A
00072420 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072424 E104                       	smpsAlterNote       $04
00072426 E701                       	dc.b	smpsNoAttack, $01
00072428 E100                       	smpsAlterNote       $00
0007242A E701                       	dc.b	smpsNoAttack, $01
0007242C E101                       	smpsAlterNote       $01
0007242E E701                       	dc.b	smpsNoAttack, $01
00072430 E107                       	smpsAlterNote       $07
00072432 E701                       	dc.b	smpsNoAttack, $01
00072434 E10B                       	smpsAlterNote       $0B
00072436 E701                       	dc.b	smpsNoAttack, $01
00072438 E107                       	smpsAlterNote       $07
0007243A E701                       	dc.b	smpsNoAttack, $01
0007243C E104                       	smpsAlterNote       $04
0007243E E701                       	dc.b	smpsNoAttack, $01
00072440 E100                       	smpsAlterNote       $00
00072442 E701                       	dc.b	smpsNoAttack, $01
00072444 E104                       	smpsAlterNote       $04
00072446 E701                       	dc.b	smpsNoAttack, $01
00072448 E10A                       	smpsAlterNote       $0A
0007244A E701                       	dc.b	smpsNoAttack, $01
0007244C E10B                       	smpsAlterNote       $0B
0007244E E701                       	dc.b	smpsNoAttack, $01
00072450 E107                       	smpsAlterNote       $07
00072452 E701                       	dc.b	smpsNoAttack, $01
00072454 E101                       	smpsAlterNote       $01
00072456 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007245A E104                       	smpsAlterNote       $04
0007245C E701                       	dc.b	smpsNoAttack, $01
0007245E E10A                       	smpsAlterNote       $0A
00072460 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072464 E104                       	smpsAlterNote       $04
00072466 E701                       	dc.b	smpsNoAttack, $01
00072468 E101                       	smpsAlterNote       $01
0007246A E701                       	dc.b	smpsNoAttack, $01
0007246E E107                       	smpsAlterNote       $07
00072470 E6FF                       	smpsAlterVol        $FF
00072472 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0007247E 8004                       	dc.b	nRst, $04
00072482 E109                       	smpsAlterNote       $09
00072484 E602                       	smpsAlterVol        $02
00072486 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0007248C E108                       	smpsAlterNote       $08
0007248E B502 8001                  	dc.b	nE4, $02, nRst, $01
00072492 E109                       	smpsAlterNote       $09
00072494 B60D                       	dc.b	nF4, $0D
00072496 E106                       	smpsAlterNote       $06
00072498 E701                       	dc.b	smpsNoAttack, $01
0007249A E102                       	smpsAlterNote       $02
0007249C E701                       	dc.b	smpsNoAttack, $01
0007249E E106                       	smpsAlterNote       $06
000724A0 E701                       	dc.b	smpsNoAttack, $01
000724A2 E109                       	smpsAlterNote       $09
000724A4 E701                       	dc.b	smpsNoAttack, $01
000724A6 E10D                       	smpsAlterNote       $0D
000724A8 E701                       	dc.b	smpsNoAttack, $01
000724AA E109                       	smpsAlterNote       $09
000724AC E701                       	dc.b	smpsNoAttack, $01
000724AE E103                       	smpsAlterNote       $03
000724B0 E701                       	dc.b	smpsNoAttack, $01
000724B2 E102                       	smpsAlterNote       $02
000724B4 E701                       	dc.b	smpsNoAttack, $01
000724B6 E106                       	smpsAlterNote       $06
000724B8 E701                       	dc.b	smpsNoAttack, $01
000724BA E10C                       	smpsAlterNote       $0C
000724BC E701                       	dc.b	smpsNoAttack, $01
000724BE E10D                       	smpsAlterNote       $0D
000724C0 8001                       	dc.b	nRst, $01
000724C2 E109                       	smpsAlterNote       $09
000724C4 B80D                       	dc.b	nG4, $0D
000724C6 E106                       	smpsAlterNote       $06
000724C8 E701                       	dc.b	smpsNoAttack, $01
000724CA E102                       	smpsAlterNote       $02
000724CC E701                       	dc.b	smpsNoAttack, $01
000724CE E106                       	smpsAlterNote       $06
000724D0 E701                       	dc.b	smpsNoAttack, $01
000724D2 E10C                       	smpsAlterNote       $0C
000724D4 E701                       	dc.b	smpsNoAttack, $01
000724D6 E10D                       	smpsAlterNote       $0D
000724D8 E701                       	dc.b	smpsNoAttack, $01
000724DA E109                       	smpsAlterNote       $09
000724DC E701                       	dc.b	smpsNoAttack, $01
000724DE E103                       	smpsAlterNote       $03
000724E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000724E4 E106                       	smpsAlterNote       $06
000724E6 E701                       	dc.b	smpsNoAttack, $01
000724E8 E10C                       	smpsAlterNote       $0C
000724EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000724EE E106                       	smpsAlterNote       $06
000724F0 E701                       	dc.b	smpsNoAttack, $01
000724F2 E103                       	smpsAlterNote       $03
000724F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000724F8 E109                       	smpsAlterNote       $09
000724FA E701                       	dc.b	smpsNoAttack, $01
000724FC E10D                       	smpsAlterNote       $0D
000724FE E701                       	dc.b	smpsNoAttack, $01
00072500 E10C                       	smpsAlterNote       $0C
00072502 E701                       	dc.b	smpsNoAttack, $01
00072504 E109                       	smpsAlterNote       $09
00072506 8001                       	dc.b	nRst, $01
00072508 E10B                       	smpsAlterNote       $0B
0007250A BA03                       	dc.b	nA4, $03
0007250C E10C                       	smpsAlterNote       $0C
0007250E BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00072512 E10B                       	smpsAlterNote       $0B
00072514 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0007251A E10C                       	smpsAlterNote       $0C
0007251C C703 8001                  	dc.b	nBb5, $03, nRst, $01
00072520 E10B                       	smpsAlterNote       $0B
00072522 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00072528 E10C                       	smpsAlterNote       $0C
0007252A D303                       	dc.b	nBb6, $03
0007252C E10B                       	smpsAlterNote       $0B
0007252E D20D                       	dc.b	nA6, $0D
00072530 E108                       	smpsAlterNote       $08
00072532 E701                       	dc.b	smpsNoAttack, $01
00072534 E104                       	smpsAlterNote       $04
00072536 E701                       	dc.b	smpsNoAttack, $01
00072538 E105                       	smpsAlterNote       $05
0007253A E701                       	dc.b	smpsNoAttack, $01
0007253C E10B                       	smpsAlterNote       $0B
0007253E E701                       	dc.b	smpsNoAttack, $01
00072540 E10F                       	smpsAlterNote       $0F
00072542 E701                       	dc.b	smpsNoAttack, $01
00072544 E10B                       	smpsAlterNote       $0B
00072546 E701                       	dc.b	smpsNoAttack, $01
00072548 E108                       	smpsAlterNote       $08
0007254A E701                       	dc.b	smpsNoAttack, $01
0007254C E104                       	smpsAlterNote       $04
0007254E E701                       	dc.b	smpsNoAttack, $01
00072550 E108                       	smpsAlterNote       $08
00072552 E701                       	dc.b	smpsNoAttack, $01
00072554 E10E                       	smpsAlterNote       $0E
00072556 E701                       	dc.b	smpsNoAttack, $01
00072558 E10F                       	smpsAlterNote       $0F
0007255A E701                       	dc.b	smpsNoAttack, $01
0007255C E10B                       	smpsAlterNote       $0B
0007255E E701                       	dc.b	smpsNoAttack, $01
00072560 E105                       	smpsAlterNote       $05
00072562 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00072568 E109                       	smpsAlterNote       $09
0007256A CE07                       	dc.b	nF6, $07
0007256C E108                       	smpsAlterNote       $08
0007256E CD06 8001                  	dc.b	nE6, $06, nRst, $01
00072572 E109                       	smpsAlterNote       $09
00072574 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00072578 E108                       	smpsAlterNote       $08
0007257A CC0D                       	dc.b	nEb6, $0D
0007257C E102                       	smpsAlterNote       $02
0007257E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072582 E108                       	smpsAlterNote       $08
00072584 E701                       	dc.b	smpsNoAttack, $01
00072586 E10B                       	smpsAlterNote       $0B
00072588 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007258C E105                       	smpsAlterNote       $05
0007258E E701                       	dc.b	smpsNoAttack, $01
00072590 E101                       	smpsAlterNote       $01
00072592 E701                       	dc.b	smpsNoAttack, $01
00072594 E102                       	smpsAlterNote       $02
00072596 E701                       	dc.b	smpsNoAttack, $01
00072598 E108                       	smpsAlterNote       $08
0007259A E701                       	dc.b	smpsNoAttack, $01
0007259C E10C                       	smpsAlterNote       $0C
0007259E E701                       	dc.b	smpsNoAttack, $01
000725A0 E108                       	smpsAlterNote       $08
000725A2 E701                       	dc.b	smpsNoAttack, $01
000725A4 E105                       	smpsAlterNote       $05
000725A6 E701                       	dc.b	smpsNoAttack, $01
000725A8 E101                       	smpsAlterNote       $01
000725AA E701                       	dc.b	smpsNoAttack, $01
000725AC E105                       	smpsAlterNote       $05
000725AE E701                       	dc.b	smpsNoAttack, $01
000725B0 E10B                       	smpsAlterNote       $0B
000725B2 E701                       	dc.b	smpsNoAttack, $01
000725B4 E10C                       	smpsAlterNote       $0C
000725B6 E701                       	dc.b	smpsNoAttack, $01
000725B8 E108                       	smpsAlterNote       $08
000725BA E701                       	dc.b	smpsNoAttack, $01
000725BC E107                       	smpsAlterNote       $07
000725BE CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000725C8 E10B                       	smpsAlterNote       $0B
000725CA C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000725D4 E109                       	smpsAlterNote       $09
000725D6 C203                       	dc.b	nF5, $03
000725D8 E108                       	smpsAlterNote       $08
000725DA C103 8001                  	dc.b	nE5, $03, nRst, $01
000725DE E109                       	smpsAlterNote       $09
000725E0 C20D                       	dc.b	nF5, $0D
000725E2 E108                       	smpsAlterNote       $08
000725E4 C10E                       	dc.b	nE5, $0E
000725E6 E107                       	smpsAlterNote       $07
000725E8 BF0D                       	dc.b	nD5, $0D
000725EA E104                       	smpsAlterNote       $04
000725EC E701                       	dc.b	smpsNoAttack, $01
000725EE E100                       	smpsAlterNote       $00
000725F0 E701                       	dc.b	smpsNoAttack, $01
000725F2 E104                       	smpsAlterNote       $04
000725F4 E701                       	dc.b	smpsNoAttack, $01
000725F6 E107                       	smpsAlterNote       $07
000725F8 E701                       	dc.b	smpsNoAttack, $01
000725FA E10B                       	smpsAlterNote       $0B
000725FC E701                       	dc.b	smpsNoAttack, $01
000725FE E107                       	smpsAlterNote       $07
00072600 E701                       	dc.b	smpsNoAttack, $01
00072602 E101                       	smpsAlterNote       $01
00072604 E701                       	dc.b	smpsNoAttack, $01
00072606 E100                       	smpsAlterNote       $00
00072608 E701                       	dc.b	smpsNoAttack, $01
0007260A E104                       	smpsAlterNote       $04
0007260C E701                       	dc.b	smpsNoAttack, $01
0007260E E10A                       	smpsAlterNote       $0A
00072610 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072614 E107                       	smpsAlterNote       $07
00072616 E701                       	dc.b	smpsNoAttack, $01
00072618 E101                       	smpsAlterNote       $01
0007261A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007261E E107                       	smpsAlterNote       $07
00072620 E701                       	dc.b	smpsNoAttack, $01
00072622 E10A                       	smpsAlterNote       $0A
00072624 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072628 E104                       	smpsAlterNote       $04
0007262A E701                       	dc.b	smpsNoAttack, $01
0007262C E100                       	smpsAlterNote       $00
0007262E E701                       	dc.b	smpsNoAttack, $01
00072630 E101                       	smpsAlterNote       $01
00072632 E701                       	dc.b	smpsNoAttack, $01
00072634 E107                       	smpsAlterNote       $07
00072636 E701                       	dc.b	smpsNoAttack, $01
00072638 E10B                       	smpsAlterNote       $0B
0007263A E701                       	dc.b	smpsNoAttack, $01
0007263C E107                       	smpsAlterNote       $07
0007263E E701                       	dc.b	smpsNoAttack, $01
00072640 E104                       	smpsAlterNote       $04
00072642 E701                       	dc.b	smpsNoAttack, $01
00072644 E100                       	smpsAlterNote       $00
00072646 E701                       	dc.b	smpsNoAttack, $01
00072648 E104                       	smpsAlterNote       $04
0007264A E701                       	dc.b	smpsNoAttack, $01
0007264C E10A                       	smpsAlterNote       $0A
0007264E E701                       	dc.b	smpsNoAttack, $01
00072650 E10B                       	smpsAlterNote       $0B
00072652 E701                       	dc.b	smpsNoAttack, $01
00072654 E107                       	smpsAlterNote       $07
00072656 E701                       	dc.b	smpsNoAttack, $01
00072658 E101                       	smpsAlterNote       $01
0007265A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007265E E104                       	smpsAlterNote       $04
00072660 E701                       	dc.b	smpsNoAttack, $01
00072662 E10A                       	smpsAlterNote       $0A
00072664 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072668 E104                       	smpsAlterNote       $04
0007266A E701                       	dc.b	smpsNoAttack, $01
0007266C E101                       	smpsAlterNote       $01
0007266E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072672 E107                       	smpsAlterNote       $07
00072674 E701                       	dc.b	smpsNoAttack, $01
00072676 E10B                       	smpsAlterNote       $0B
00072678 E701                       	dc.b	smpsNoAttack, $01
0007267A E10A                       	smpsAlterNote       $0A
0007267C E701                       	dc.b	smpsNoAttack, $01
0007267E E104                       	smpsAlterNote       $04
00072680 E701                       	dc.b	smpsNoAttack, $01
00072682 E100                       	smpsAlterNote       $00
00072684 E701                       	dc.b	smpsNoAttack, $01
00072686 E104                       	smpsAlterNote       $04
00072688 E701                       	dc.b	smpsNoAttack, $01
0007268A E107                       	smpsAlterNote       $07
0007268C E701                       	dc.b	smpsNoAttack, $01
0007268E E10B                       	smpsAlterNote       $0B
00072690 E701                       	dc.b	smpsNoAttack, $01
00072692 E107                       	smpsAlterNote       $07
00072694 E701                       	dc.b	smpsNoAttack, $01
00072696 E101                       	smpsAlterNote       $01
00072698 E701                       	dc.b	smpsNoAttack, $01
0007269A E100                       	smpsAlterNote       $00
0007269C E701                       	dc.b	smpsNoAttack, $01
0007269E E104                       	smpsAlterNote       $04
000726A0 E701                       	dc.b	smpsNoAttack, $01
000726A2 E10A                       	smpsAlterNote       $0A
000726A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000726A8 E107                       	smpsAlterNote       $07
000726AA E701                       	dc.b	smpsNoAttack, $01
000726AC E101                       	smpsAlterNote       $01
000726AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000726B2 E107                       	smpsAlterNote       $07
000726B4 E701                       	dc.b	smpsNoAttack, $01
000726B6 E10A                       	smpsAlterNote       $0A
000726B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000726BC E104                       	smpsAlterNote       $04
000726BE E701                       	dc.b	smpsNoAttack, $01
000726C0 E100                       	smpsAlterNote       $00
000726C2 E701                       	dc.b	smpsNoAttack, $01
000726C4 E101                       	smpsAlterNote       $01
000726C6 E701                       	dc.b	smpsNoAttack, $01
000726C8 E107                       	smpsAlterNote       $07
000726CA E701                       	dc.b	smpsNoAttack, $01
000726CC E10B                       	smpsAlterNote       $0B
000726CE E701                       	dc.b	smpsNoAttack, $01
000726D0 E107                       	smpsAlterNote       $07
000726D2 E701                       	dc.b	smpsNoAttack, $01
000726D4 E104                       	smpsAlterNote       $04
000726D6 E701                       	dc.b	smpsNoAttack, $01
000726D8 E100                       	smpsAlterNote       $00
000726DA E701                       	dc.b	smpsNoAttack, $01
000726DC E101                       	smpsAlterNote       $01
000726DE 8001                       	dc.b	nRst, $01
000726E0 E109                       	smpsAlterNote       $09
000726E2 C20D                       	dc.b	nF5, $0D
000726E4 E106                       	smpsAlterNote       $06
000726E6 E701                       	dc.b	smpsNoAttack, $01
000726E8 E102                       	smpsAlterNote       $02
000726EA E701                       	dc.b	smpsNoAttack, $01
000726EC E106                       	smpsAlterNote       $06
000726EE E701                       	dc.b	smpsNoAttack, $01
000726F0 E10C                       	smpsAlterNote       $0C
000726F2 E701                       	dc.b	smpsNoAttack, $01
000726F4 E10D                       	smpsAlterNote       $0D
000726F6 E701                       	dc.b	smpsNoAttack, $01
000726F8 E109                       	smpsAlterNote       $09
000726FA E701                       	dc.b	smpsNoAttack, $01
000726FC E103                       	smpsAlterNote       $03
000726FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072702 E106                       	smpsAlterNote       $06
00072704 E701                       	dc.b	smpsNoAttack, $01
00072706 E10C                       	smpsAlterNote       $0C
00072708 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007270C E106                       	smpsAlterNote       $06
0007270E E701                       	dc.b	smpsNoAttack, $01
00072710 E103                       	smpsAlterNote       $03
00072712 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072716 E109                       	smpsAlterNote       $09
00072718 E701                       	dc.b	smpsNoAttack, $01
0007271A E10D                       	smpsAlterNote       $0D
0007271C E701                       	dc.b	smpsNoAttack, $01
0007271E E10C                       	smpsAlterNote       $0C
00072720 E701                       	dc.b	smpsNoAttack, $01
00072722 E109                       	smpsAlterNote       $09
00072724 8001                       	dc.b	nRst, $01
00072726 E108                       	smpsAlterNote       $08
00072728 C10D                       	dc.b	nE5, $0D
0007272A E109                       	smpsAlterNote       $09
0007272C C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00072730 E108                       	smpsAlterNote       $08
00072732 C10D                       	dc.b	nE5, $0D
00072734 E102                       	smpsAlterNote       $02
00072736 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007273A E105                       	smpsAlterNote       $05
0007273C E701                       	dc.b	smpsNoAttack, $01
0007273E E108                       	smpsAlterNote       $08
00072740 8001                       	dc.b	nRst, $01
00072742 E107                       	smpsAlterNote       $07
00072744 BF0D                       	dc.b	nD5, $0D
00072746 E108                       	smpsAlterNote       $08
00072748 C107                       	dc.b	nE5, $07
0007274A E109                       	smpsAlterNote       $09
0007274C C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00072752 E10B                       	smpsAlterNote       $0B
00072754 C603                       	dc.b	nA5, $03
00072756 E10C                       	smpsAlterNote       $0C
00072758 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0007275E E10B                       	smpsAlterNote       $0B
00072760 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00072766 E109                       	smpsAlterNote       $09
00072768 D003                       	dc.b	nG6, $03
0007276A E108                       	smpsAlterNote       $08
0007276C CD02 8001                  	dc.b	nE6, $02, nRst, $01
00072770 E10B                       	smpsAlterNote       $0B
00072772 C601 8001                  	dc.b	nA5, $01, nRst, $01
00072776 E108                       	smpsAlterNote       $08
00072778 C102                       	dc.b	nE5, $02
0007277C E10C                       	smpsAlterNote       $0C
0007277E E6FB                       	smpsAlterVol        $FB
00072780 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0007278C 8001                       	dc.b	nRst, $01
0007278E E10B                       	smpsAlterNote       $0B
00072790 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00072798 E107                       	smpsAlterNote       $07
0007279A A706 8001                  	dc.b	nD3, $06, nRst, $01
0007279E E10B                       	smpsAlterNote       $0B
000727A0 A203                       	dc.b	nA2, $03
000727A2 E109                       	smpsAlterNote       $09
000727A4 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000727A8 E108                       	smpsAlterNote       $08
000727AA A906                       	dc.b	nE3, $06
000727AC E107                       	smpsAlterNote       $07
000727AE A703 8001                  	dc.b	nD3, $03, nRst, $01
000727B2 E106                       	smpsAlterNote       $06
000727B4 A503                       	dc.b	nC3, $03
000727B6 E10C                       	smpsAlterNote       $0C
000727B8 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000727BC E10B                       	smpsAlterNote       $0B
000727BE A203 8004                  	dc.b	nA2, $03, nRst, $04
000727C2 E11B                       	smpsAlterNote       $1B
000727C4 C401                       	dc.b	nG5, $01
000727C6 E1F4                       	smpsAlterNote       $F4
000727C8 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000727CB E106                       	smpsAlterNote       $06
000727CD E701                       	dc.b	smpsNoAttack, $01
000727CF E10F                       	smpsAlterNote       $0F
000727D1 E701                       	dc.b	smpsNoAttack, $01
000727D3 E1E4                       	smpsAlterNote       $E4
000727D5 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000727D8 E1F6                       	smpsAlterNote       $F6
000727DA E701                       	dc.b	smpsNoAttack, $01
000727DC E108                       	smpsAlterNote       $08
000727DE E701                       	dc.b	smpsNoAttack, $01
000727E0 E10B                       	smpsAlterNote       $0B
000727E2 E706                       	dc.b	smpsNoAttack, $06
000727E4 E105                       	smpsAlterNote       $05
000727E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000727EA E108                       	smpsAlterNote       $08
000727EC E701                       	dc.b	smpsNoAttack, $01
000727EE E10E                       	smpsAlterNote       $0E
000727F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000727F4 E108                       	smpsAlterNote       $08
000727F6 E701                       	dc.b	smpsNoAttack, $01
000727F8 E105                       	smpsAlterNote       $05
000727FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000727FE E10B                       	smpsAlterNote       $0B
00072800 E701                       	dc.b	smpsNoAttack, $01
00072802 E10F                       	smpsAlterNote       $0F
00072804 E701                       	dc.b	smpsNoAttack, $01
00072806 E10E                       	smpsAlterNote       $0E
00072808 E701                       	dc.b	smpsNoAttack, $01
0007280A E108                       	smpsAlterNote       $08
0007280C E701                       	dc.b	smpsNoAttack, $01
0007280E E104                       	smpsAlterNote       $04
00072810 E701                       	dc.b	smpsNoAttack, $01
00072812 E108                       	smpsAlterNote       $08
00072814 E701                       	dc.b	smpsNoAttack, $01
00072816 E10B                       	smpsAlterNote       $0B
00072818 E701                       	dc.b	smpsNoAttack, $01
0007281A E10F                       	smpsAlterNote       $0F
0007281C E701                       	dc.b	smpsNoAttack, $01
0007281E E10B                       	smpsAlterNote       $0B
00072820 E701                       	dc.b	smpsNoAttack, $01
00072822 E105                       	smpsAlterNote       $05
00072824 E701                       	dc.b	smpsNoAttack, $01
00072826 E104                       	smpsAlterNote       $04
00072828 E701                       	dc.b	smpsNoAttack, $01
0007282A E108                       	smpsAlterNote       $08
0007282C E701                       	dc.b	smpsNoAttack, $01
0007282E E10E                       	smpsAlterNote       $0E
00072830 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072834 E10B                       	smpsAlterNote       $0B
00072836 E701                       	dc.b	smpsNoAttack, $01
00072838 E105                       	smpsAlterNote       $05
0007283A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007283E E10B                       	smpsAlterNote       $0B
00072840 E701                       	dc.b	smpsNoAttack, $01
00072842 E10E                       	smpsAlterNote       $0E
00072844 E701                       	dc.b	smpsNoAttack, $01
00072846 E10F                       	smpsAlterNote       $0F
00072848 8001                       	dc.b	nRst, $01
0007284A E109                       	smpsAlterNote       $09
0007284C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00072852 E108                       	smpsAlterNote       $08
00072854 C101 8001                  	dc.b	nE5, $01, nRst, $01
00072858 E109                       	smpsAlterNote       $09
0007285A C202                       	dc.b	nF5, $02
0007285C E108                       	smpsAlterNote       $08
0007285E C102                       	dc.b	nE5, $02
00072860 E107                       	smpsAlterNote       $07
00072862 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00072866 E108                       	smpsAlterNote       $08
00072868 C101 8001                  	dc.b	nE5, $01, nRst, $01
0007286C E107                       	smpsAlterNote       $07
0007286E BF02                       	dc.b	nD5, $02
00072870 E106                       	smpsAlterNote       $06
00072872 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00072876 E107                       	smpsAlterNote       $07
00072878 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0007287C E106                       	smpsAlterNote       $06
0007287E BD02                       	dc.b	nC5, $02
00072880 E10C                       	smpsAlterNote       $0C
00072882 BB02                       	dc.b	nBb4, $02
00072884 E106                       	smpsAlterNote       $06
00072886 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0007288A E10C                       	smpsAlterNote       $0C
0007288C BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00072890 E10B                       	smpsAlterNote       $0B
00072892 BA02                       	dc.b	nA4, $02
00072894 E10C                       	smpsAlterNote       $0C
00072896 BB02                       	dc.b	nBb4, $02
00072898 E10B                       	smpsAlterNote       $0B
0007289A BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000728A4 E108                       	smpsAlterNote       $08
000728A6 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000728AE E107                       	smpsAlterNote       $07
000728B0 BE02                       	dc.b	nCs5, $02
000728B2 E10B                       	smpsAlterNote       $0B
000728B4 BA02                       	dc.b	nA4, $02
000728B6 E109                       	smpsAlterNote       $09
000728B8 B802 8001                  	dc.b	nG4, $02, nRst, $01
000728BC E108                       	smpsAlterNote       $08
000728BE B501 8001                  	dc.b	nE4, $01, nRst, $01
000728C2 E10B                       	smpsAlterNote       $0B
000728C4 AE02                       	dc.b	nA3, $02
000728C6 E10C                       	smpsAlterNote       $0C
000728C8 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000728D4 E10B                       	smpsAlterNote       $0B
000728D6 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000728DE E107                       	smpsAlterNote       $07
000728E0 A706 8001                  	dc.b	nD3, $06, nRst, $01
000728E4 E10B                       	smpsAlterNote       $0B
000728E6 A203                       	dc.b	nA2, $03
000728E8 E109                       	smpsAlterNote       $09
000728EA AA03 8001                  	dc.b	nF3, $03, nRst, $01
000728EE E108                       	smpsAlterNote       $08
000728F0 A906 8001                  	dc.b	nE3, $06, nRst, $01
000728F4 E107                       	smpsAlterNote       $07
000728F6 A702 8001                  	dc.b	nD3, $02, nRst, $01
000728FA E106                       	smpsAlterNote       $06
000728FC A503                       	dc.b	nC3, $03
000728FE E10C                       	smpsAlterNote       $0C
00072900 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00072906 E107                       	smpsAlterNote       $07
00072908 B20D                       	dc.b	nCs4, $0D
0007290A E104                       	smpsAlterNote       $04
0007290C E701                       	dc.b	smpsNoAttack, $01
0007290E E100                       	smpsAlterNote       $00
00072910 E701                       	dc.b	smpsNoAttack, $01
00072912 E104                       	smpsAlterNote       $04
00072914 E701                       	dc.b	smpsNoAttack, $01
00072916 E10A                       	smpsAlterNote       $0A
00072918 E701                       	dc.b	smpsNoAttack, $01
0007291A E10B                       	smpsAlterNote       $0B
0007291C E701                       	dc.b	smpsNoAttack, $01
0007291E E107                       	smpsAlterNote       $07
00072920 E701                       	dc.b	smpsNoAttack, $01
00072922 E101                       	smpsAlterNote       $01
00072924 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072928 E104                       	smpsAlterNote       $04
0007292A E701                       	dc.b	smpsNoAttack, $01
0007292C E10A                       	smpsAlterNote       $0A
0007292E E701                       	dc.b	smpsNoAttack, $01
00072930 E10B                       	smpsAlterNote       $0B
00072932 8001                       	dc.b	nRst, $01
00072934 E107                       	smpsAlterNote       $07
00072936 B30D                       	dc.b	nD4, $0D
00072938 E104                       	smpsAlterNote       $04
0007293A E701                       	dc.b	smpsNoAttack, $01
0007293C E100                       	smpsAlterNote       $00
0007293E E701                       	dc.b	smpsNoAttack, $01
00072940 E104                       	smpsAlterNote       $04
00072942 E701                       	dc.b	smpsNoAttack, $01
00072944 E10A                       	smpsAlterNote       $0A
00072946 E701                       	dc.b	smpsNoAttack, $01
00072948 E10B                       	smpsAlterNote       $0B
0007294A E701                       	dc.b	smpsNoAttack, $01
0007294C E107                       	smpsAlterNote       $07
0007294E E701                       	dc.b	smpsNoAttack, $01
00072950 E101                       	smpsAlterNote       $01
00072952 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072956 E104                       	smpsAlterNote       $04
00072958 E701                       	dc.b	smpsNoAttack, $01
0007295A E10A                       	smpsAlterNote       $0A
0007295C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072960 E104                       	smpsAlterNote       $04
00072962 E701                       	dc.b	smpsNoAttack, $01
00072964 E101                       	smpsAlterNote       $01
00072966 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007296A E107                       	smpsAlterNote       $07
0007296C E701                       	dc.b	smpsNoAttack, $01
0007296E E10B                       	smpsAlterNote       $0B
00072970 E701                       	dc.b	smpsNoAttack, $01
00072972 E10A                       	smpsAlterNote       $0A
00072974 E701                       	dc.b	smpsNoAttack, $01
00072976 E107                       	smpsAlterNote       $07
00072978 8001                       	dc.b	nRst, $01
0007297A E108                       	smpsAlterNote       $08
0007297C B50D                       	dc.b	nE4, $0D
0007297E E102                       	smpsAlterNote       $02
00072980 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072984 E105                       	smpsAlterNote       $05
00072986 E701                       	dc.b	smpsNoAttack, $01
00072988 E10B                       	smpsAlterNote       $0B
0007298A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007298E E105                       	smpsAlterNote       $05
00072990 E701                       	dc.b	smpsNoAttack, $01
00072992 E102                       	smpsAlterNote       $02
00072994 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072998 E108                       	smpsAlterNote       $08
0007299A E701                       	dc.b	smpsNoAttack, $01
0007299C E10C                       	smpsAlterNote       $0C
0007299E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000729A2 E107                       	smpsAlterNote       $07
000729A4 B30D                       	dc.b	nD4, $0D
000729A6 E101                       	smpsAlterNote       $01
000729A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000729AC E104                       	smpsAlterNote       $04
000729AE E701                       	dc.b	smpsNoAttack, $01
000729B0 E10A                       	smpsAlterNote       $0A
000729B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000729B6 E104                       	smpsAlterNote       $04
000729B8 E701                       	dc.b	smpsNoAttack, $01
000729BA E101                       	smpsAlterNote       $01
000729BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000729C0 E107                       	smpsAlterNote       $07
000729C2 E701                       	dc.b	smpsNoAttack, $01
000729C4 E10B                       	smpsAlterNote       $0B
000729C6 E701                       	dc.b	smpsNoAttack, $01
000729C8 E10A                       	smpsAlterNote       $0A
000729CA E701                       	dc.b	smpsNoAttack, $01
000729CC E104                       	smpsAlterNote       $04
000729CE E701                       	dc.b	smpsNoAttack, $01
000729D0 E100                       	smpsAlterNote       $00
000729D2 E701                       	dc.b	smpsNoAttack, $01
000729D4 E104                       	smpsAlterNote       $04
000729D6 E701                       	dc.b	smpsNoAttack, $01
000729D8 E107                       	smpsAlterNote       $07
000729DA E701                       	dc.b	smpsNoAttack, $01
000729DC E10B                       	smpsAlterNote       $0B
000729DE E701                       	dc.b	smpsNoAttack, $01
000729E0 E107                       	smpsAlterNote       $07
000729E2 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000729E6 E101                       	smpsAlterNote       $01
000729E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000729EC E107                       	smpsAlterNote       $07
000729EE E701                       	dc.b	smpsNoAttack, $01
000729F0 E10A                       	smpsAlterNote       $0A
000729F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000729F6 E104                       	smpsAlterNote       $04
000729F8 E701                       	dc.b	smpsNoAttack, $01
000729FA E100                       	smpsAlterNote       $00
000729FC E701                       	dc.b	smpsNoAttack, $01
000729FE E101                       	smpsAlterNote       $01
00072A00 E701                       	dc.b	smpsNoAttack, $01
00072A02 E107                       	smpsAlterNote       $07
00072A04 E701                       	dc.b	smpsNoAttack, $01
00072A06 E10B                       	smpsAlterNote       $0B
00072A08 E701                       	dc.b	smpsNoAttack, $01
00072A0A E107                       	smpsAlterNote       $07
00072A0C B30E                       	dc.b	nD4, $0E
00072A0E E101                       	smpsAlterNote       $01
00072A10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072A14 E107                       	smpsAlterNote       $07
00072A16 E701                       	dc.b	smpsNoAttack, $01
00072A18 E10A                       	smpsAlterNote       $0A
00072A1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072A1E E104                       	smpsAlterNote       $04
00072A20 E701                       	dc.b	smpsNoAttack, $01
00072A22 E100                       	smpsAlterNote       $00
00072A24 E701                       	dc.b	smpsNoAttack, $01
00072A26 E101                       	smpsAlterNote       $01
00072A28 E701                       	dc.b	smpsNoAttack, $01
00072A2A E107                       	smpsAlterNote       $07
00072A2C E701                       	dc.b	smpsNoAttack, $01
00072A2E E10B                       	smpsAlterNote       $0B
00072A30 E701                       	dc.b	smpsNoAttack, $01
00072A32 E107                       	smpsAlterNote       $07
00072A34 E701                       	dc.b	smpsNoAttack, $01
00072A36 E104                       	smpsAlterNote       $04
00072A38 E701                       	dc.b	smpsNoAttack, $01
00072A3A E100                       	smpsAlterNote       $00
00072A3C E701                       	dc.b	smpsNoAttack, $01
00072A3E E104                       	smpsAlterNote       $04
00072A40 E701                       	dc.b	smpsNoAttack, $01
00072A42 E10A                       	smpsAlterNote       $0A
00072A44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072A48 E107                       	smpsAlterNote       $07
00072A4A E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00072A4E E104                       	smpsAlterNote       $04
00072A50 E701                       	dc.b	smpsNoAttack, $01
00072A52 E100                       	smpsAlterNote       $00
00072A54 E701                       	dc.b	smpsNoAttack, $01
00072A56 E101                       	smpsAlterNote       $01
00072A58 E701                       	dc.b	smpsNoAttack, $01
00072A5A E107                       	smpsAlterNote       $07
00072A5C E701                       	dc.b	smpsNoAttack, $01
00072A5E E10B                       	smpsAlterNote       $0B
00072A60 E701                       	dc.b	smpsNoAttack, $01
00072A62 E107                       	smpsAlterNote       $07
00072A64 E701                       	dc.b	smpsNoAttack, $01
00072A66 E104                       	smpsAlterNote       $04
00072A68 E701                       	dc.b	smpsNoAttack, $01
00072A6A E100                       	smpsAlterNote       $00
00072A6C E701                       	dc.b	smpsNoAttack, $01
00072A6E E104                       	smpsAlterNote       $04
00072A70 E701                       	dc.b	smpsNoAttack, $01
00072A72 E10A                       	smpsAlterNote       $0A
00072A74 E701                       	dc.b	smpsNoAttack, $01
00072A76 E10B                       	smpsAlterNote       $0B
00072A78 E701                       	dc.b	smpsNoAttack, $01
00072A7C E6FF                       	smpsAlterVol        $FF
00072A7E A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00072A8A 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00072A92 E109                       	smpsAlterNote       $09
00072A94 E601                       	smpsAlterVol        $01
00072A96 B60D                       	dc.b	nF4, $0D
00072A98 E106                       	smpsAlterNote       $06
00072A9A E701                       	dc.b	smpsNoAttack, $01
00072A9C E102                       	smpsAlterNote       $02
00072A9E E701                       	dc.b	smpsNoAttack, $01
00072AA0 E106                       	smpsAlterNote       $06
00072AA2 E701                       	dc.b	smpsNoAttack, $01
00072AA4 E109                       	smpsAlterNote       $09
00072AA6 E701                       	dc.b	smpsNoAttack, $01
00072AA8 E10D                       	smpsAlterNote       $0D
00072AAA E701                       	dc.b	smpsNoAttack, $01
00072AAC E109                       	smpsAlterNote       $09
00072AAE E701                       	dc.b	smpsNoAttack, $01
00072AB0 E103                       	smpsAlterNote       $03
00072AB2 E701                       	dc.b	smpsNoAttack, $01
00072AB4 E102                       	smpsAlterNote       $02
00072AB6 E701                       	dc.b	smpsNoAttack, $01
00072AB8 E106                       	smpsAlterNote       $06
00072ABA E701                       	dc.b	smpsNoAttack, $01
00072ABC E10C                       	smpsAlterNote       $0C
00072ABE E701                       	dc.b	smpsNoAttack, $01
00072AC0 E10D                       	smpsAlterNote       $0D
00072AC2 8001                       	dc.b	nRst, $01
00072AC4 E109                       	smpsAlterNote       $09
00072AC6 B80D                       	dc.b	nG4, $0D
00072AC8 E106                       	smpsAlterNote       $06
00072ACA E701                       	dc.b	smpsNoAttack, $01
00072ACC E102                       	smpsAlterNote       $02
00072ACE E701                       	dc.b	smpsNoAttack, $01
00072AD0 E106                       	smpsAlterNote       $06
00072AD2 E701                       	dc.b	smpsNoAttack, $01
00072AD4 E109                       	smpsAlterNote       $09
00072AD6 E701                       	dc.b	smpsNoAttack, $01
00072AD8 E10D                       	smpsAlterNote       $0D
00072ADA E701                       	dc.b	smpsNoAttack, $01
00072ADC E109                       	smpsAlterNote       $09
00072ADE E701                       	dc.b	smpsNoAttack, $01
00072AE0 E103                       	smpsAlterNote       $03
00072AE2 E701                       	dc.b	smpsNoAttack, $01
00072AE4 E102                       	smpsAlterNote       $02
00072AE6 E701                       	dc.b	smpsNoAttack, $01
00072AE8 E106                       	smpsAlterNote       $06
00072AEA E701                       	dc.b	smpsNoAttack, $01
00072AEC E10C                       	smpsAlterNote       $0C
00072AEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072AF2 E106                       	smpsAlterNote       $06
00072AF4 E701                       	dc.b	smpsNoAttack, $01
00072AF6 E103                       	smpsAlterNote       $03
00072AF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072AFC E109                       	smpsAlterNote       $09
00072AFE E701                       	dc.b	smpsNoAttack, $01
00072B00 E10D                       	smpsAlterNote       $0D
00072B02 E701                       	dc.b	smpsNoAttack, $01
00072B04 E10C                       	smpsAlterNote       $0C
00072B06 E701                       	dc.b	smpsNoAttack, $01
00072B08 E109                       	smpsAlterNote       $09
00072B0A 8001                       	dc.b	nRst, $01
00072B0C E10B                       	smpsAlterNote       $0B
00072B0E BA0D                       	dc.b	nA4, $0D
00072B10 E105                       	smpsAlterNote       $05
00072B12 E701                       	dc.b	smpsNoAttack, $01
00072B14 E104                       	smpsAlterNote       $04
00072B16 E701                       	dc.b	smpsNoAttack, $01
00072B18 E108                       	smpsAlterNote       $08
00072B1A E701                       	dc.b	smpsNoAttack, $01
00072B1C E10E                       	smpsAlterNote       $0E
00072B1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072B22 E10B                       	smpsAlterNote       $0B
00072B24 E701                       	dc.b	smpsNoAttack, $01
00072B26 E105                       	smpsAlterNote       $05
00072B28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072B2C E10B                       	smpsAlterNote       $0B
00072B2E E701                       	dc.b	smpsNoAttack, $01
00072B30 E10E                       	smpsAlterNote       $0E
00072B32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072B36 E108                       	smpsAlterNote       $08
00072B38 E701                       	dc.b	smpsNoAttack, $01
00072B3A E104                       	smpsAlterNote       $04
00072B3C E701                       	dc.b	smpsNoAttack, $01
00072B3E E105                       	smpsAlterNote       $05
00072B40 E701                       	dc.b	smpsNoAttack, $01
00072B42 E10B                       	smpsAlterNote       $0B
00072B44 E701                       	dc.b	smpsNoAttack, $01
00072B46 E10F                       	smpsAlterNote       $0F
00072B48 E701                       	dc.b	smpsNoAttack, $01
00072B4A E10B                       	smpsAlterNote       $0B
00072B4C E701                       	dc.b	smpsNoAttack, $01
00072B4E E108                       	smpsAlterNote       $08
00072B50 E701                       	dc.b	smpsNoAttack, $01
00072B52 E104                       	smpsAlterNote       $04
00072B54 E701                       	dc.b	smpsNoAttack, $01
00072B56 E108                       	smpsAlterNote       $08
00072B58 E701                       	dc.b	smpsNoAttack, $01
00072B5A E10E                       	smpsAlterNote       $0E
00072B5C E701                       	dc.b	smpsNoAttack, $01
00072B5E E10F                       	smpsAlterNote       $0F
00072B60 E701                       	dc.b	smpsNoAttack, $01
00072B62 E10B                       	smpsAlterNote       $0B
00072B64 E701                       	dc.b	smpsNoAttack, $01
00072B66 E105                       	smpsAlterNote       $05
00072B68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072B6C E108                       	smpsAlterNote       $08
00072B6E E701                       	dc.b	smpsNoAttack, $01
00072B70 E10E                       	smpsAlterNote       $0E
00072B72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072B76 E108                       	smpsAlterNote       $08
00072B78 E701                       	dc.b	smpsNoAttack, $01
00072B7A E105                       	smpsAlterNote       $05
00072B7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072B80 E108                       	smpsAlterNote       $08
00072B82 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00072B86 E109                       	smpsAlterNote       $09
00072B88 B60D                       	dc.b	nF4, $0D
00072B8A E103                       	smpsAlterNote       $03
00072B8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072B90 E106                       	smpsAlterNote       $06
00072B92 E701                       	dc.b	smpsNoAttack, $01
00072B94 E10C                       	smpsAlterNote       $0C
00072B96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072B9A E106                       	smpsAlterNote       $06
00072B9C E701                       	dc.b	smpsNoAttack, $01
00072B9E E103                       	smpsAlterNote       $03
00072BA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072BA4 E109                       	smpsAlterNote       $09
00072BA6 E701                       	dc.b	smpsNoAttack, $01
00072BA8 E10D                       	smpsAlterNote       $0D
00072BAA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00072BAE E109                       	smpsAlterNote       $09
00072BB0 B80D                       	dc.b	nG4, $0D
00072BB2 E103                       	smpsAlterNote       $03
00072BB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072BB8 E109                       	smpsAlterNote       $09
00072BBA E701                       	dc.b	smpsNoAttack, $01
00072BBC E10C                       	smpsAlterNote       $0C
00072BBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072BC2 E106                       	smpsAlterNote       $06
00072BC4 E701                       	dc.b	smpsNoAttack, $01
00072BC6 E102                       	smpsAlterNote       $02
00072BC8 E701                       	dc.b	smpsNoAttack, $01
00072BCA E103                       	smpsAlterNote       $03
00072BCC E701                       	dc.b	smpsNoAttack, $01
00072BCE E109                       	smpsAlterNote       $09
00072BD0 E701                       	dc.b	smpsNoAttack, $01
00072BD2 E10D                       	smpsAlterNote       $0D
00072BD4 E701                       	dc.b	smpsNoAttack, $01
00072BD6 E109                       	smpsAlterNote       $09
00072BD8 E701                       	dc.b	smpsNoAttack, $01
00072BDA E106                       	smpsAlterNote       $06
00072BDC E701                       	dc.b	smpsNoAttack, $01
00072BDE E102                       	smpsAlterNote       $02
00072BE0 E701                       	dc.b	smpsNoAttack, $01
00072BE2 E106                       	smpsAlterNote       $06
00072BE4 E701                       	dc.b	smpsNoAttack, $01
00072BE6 E10C                       	smpsAlterNote       $0C
00072BE8 E701                       	dc.b	smpsNoAttack, $01
00072BEA E10D                       	smpsAlterNote       $0D
00072BEC E701                       	dc.b	smpsNoAttack, $01
00072BEE E109                       	smpsAlterNote       $09
00072BF0 E701                       	dc.b	smpsNoAttack, $01
00072BF2 E10B                       	smpsAlterNote       $0B
00072BF4 BA0D                       	dc.b	nA4, $0D
00072BF6 E108                       	smpsAlterNote       $08
00072BF8 E701                       	dc.b	smpsNoAttack, $01
00072BFA E105                       	smpsAlterNote       $05
00072BFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072C00 E10B                       	smpsAlterNote       $0B
00072C02 E701                       	dc.b	smpsNoAttack, $01
00072C04 E10F                       	smpsAlterNote       $0F
00072C06 E701                       	dc.b	smpsNoAttack, $01
00072C08 E10E                       	smpsAlterNote       $0E
00072C0A E701                       	dc.b	smpsNoAttack, $01
00072C0C E108                       	smpsAlterNote       $08
00072C0E E701                       	dc.b	smpsNoAttack, $01
00072C10 E104                       	smpsAlterNote       $04
00072C12 E701                       	dc.b	smpsNoAttack, $01
00072C14 E108                       	smpsAlterNote       $08
00072C16 E701                       	dc.b	smpsNoAttack, $01
00072C18 E10B                       	smpsAlterNote       $0B
00072C1A E701                       	dc.b	smpsNoAttack, $01
00072C1C E10F                       	smpsAlterNote       $0F
00072C1E E701                       	dc.b	smpsNoAttack, $01
00072C20 E10B                       	smpsAlterNote       $0B
00072C22 E701                       	dc.b	smpsNoAttack, $01
00072C24 E105                       	smpsAlterNote       $05
00072C26 E701                       	dc.b	smpsNoAttack, $01
00072C28 E104                       	smpsAlterNote       $04
00072C2A E701                       	dc.b	smpsNoAttack, $01
00072C2C E108                       	smpsAlterNote       $08
00072C2E E701                       	dc.b	smpsNoAttack, $01
00072C30 E10E                       	smpsAlterNote       $0E
00072C32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072C36 E10B                       	smpsAlterNote       $0B
00072C38 E701                       	dc.b	smpsNoAttack, $01
00072C3A E105                       	smpsAlterNote       $05
00072C3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072C40 E10B                       	smpsAlterNote       $0B
00072C42 E701                       	dc.b	smpsNoAttack, $01
00072C44 E10E                       	smpsAlterNote       $0E
00072C46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072C4A E108                       	smpsAlterNote       $08
00072C4C E701                       	dc.b	smpsNoAttack, $01
00072C4E E105                       	smpsAlterNote       $05
00072C50 8001                       	dc.b	nRst, $01
00072C52 E109                       	smpsAlterNote       $09
00072C54 B60A                       	dc.b	nF4, $0A
00072C56 E108                       	smpsAlterNote       $08
00072C58 B507                       	dc.b	nE4, $07
00072C5A E107                       	smpsAlterNote       $07
00072C5C B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00072C60 E108                       	smpsAlterNote       $08
00072C62 B503                       	dc.b	nE4, $03
00072C64 E109                       	smpsAlterNote       $09
00072C66 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00072C6E E10B                       	smpsAlterNote       $0B
00072C70 BA0D                       	dc.b	nA4, $0D
00072C72 E108                       	smpsAlterNote       $08
00072C74 E701                       	dc.b	smpsNoAttack, $01
00072C76 E104                       	smpsAlterNote       $04
00072C78 E701                       	dc.b	smpsNoAttack, $01
00072C7A E108                       	smpsAlterNote       $08
00072C7C E701                       	dc.b	smpsNoAttack, $01
00072C7E E10B                       	smpsAlterNote       $0B
00072C80 E701                       	dc.b	smpsNoAttack, $01
00072C82 E10F                       	smpsAlterNote       $0F
00072C84 E701                       	dc.b	smpsNoAttack, $01
00072C86 E10B                       	smpsAlterNote       $0B
00072C88 E701                       	dc.b	smpsNoAttack, $01
00072C8A E105                       	smpsAlterNote       $05
00072C8C E701                       	dc.b	smpsNoAttack, $01
00072C8E E104                       	smpsAlterNote       $04
00072C90 E701                       	dc.b	smpsNoAttack, $01
00072C92 E108                       	smpsAlterNote       $08
00072C94 E701                       	dc.b	smpsNoAttack, $01
00072C96 E10E                       	smpsAlterNote       $0E
00072C98 E701                       	dc.b	smpsNoAttack, $01
00072C9A E10F                       	smpsAlterNote       $0F
00072C9C 8001                       	dc.b	nRst, $01
00072C9E E109                       	smpsAlterNote       $09
00072CA0 C20D                       	dc.b	nF5, $0D
00072CA2 E106                       	smpsAlterNote       $06
00072CA4 E701                       	dc.b	smpsNoAttack, $01
00072CA6 E102                       	smpsAlterNote       $02
00072CA8 E701                       	dc.b	smpsNoAttack, $01
00072CAA E106                       	smpsAlterNote       $06
00072CAC E701                       	dc.b	smpsNoAttack, $01
00072CAE E109                       	smpsAlterNote       $09
00072CB0 E701                       	dc.b	smpsNoAttack, $01
00072CB2 E10D                       	smpsAlterNote       $0D
00072CB4 E701                       	dc.b	smpsNoAttack, $01
00072CB6 E109                       	smpsAlterNote       $09
00072CB8 E701                       	dc.b	smpsNoAttack, $01
00072CBA E103                       	smpsAlterNote       $03
00072CBC E701                       	dc.b	smpsNoAttack, $01
00072CBE E102                       	smpsAlterNote       $02
00072CC0 E701                       	dc.b	smpsNoAttack, $01
00072CC2 E106                       	smpsAlterNote       $06
00072CC4 E701                       	dc.b	smpsNoAttack, $01
00072CC6 E10C                       	smpsAlterNote       $0C
00072CC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072CCC E109                       	smpsAlterNote       $09
00072CCE E701                       	dc.b	smpsNoAttack, $01
00072CD0 E103                       	smpsAlterNote       $03
00072CD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072CD6 E109                       	smpsAlterNote       $09
00072CD8 E701                       	dc.b	smpsNoAttack, $01
00072CDA E10C                       	smpsAlterNote       $0C
00072CDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072CE0 E106                       	smpsAlterNote       $06
00072CE2 E701                       	dc.b	smpsNoAttack, $01
00072CE4 E102                       	smpsAlterNote       $02
00072CE6 E701                       	dc.b	smpsNoAttack, $01
00072CE8 E103                       	smpsAlterNote       $03
00072CEA E701                       	dc.b	smpsNoAttack, $01
00072CEC E109                       	smpsAlterNote       $09
00072CEE E701                       	dc.b	smpsNoAttack, $01
00072CF0 E10D                       	smpsAlterNote       $0D
00072CF2 E701                       	dc.b	smpsNoAttack, $01
00072CF4 E109                       	smpsAlterNote       $09
00072CF6 E701                       	dc.b	smpsNoAttack, $01
00072CF8 E106                       	smpsAlterNote       $06
00072CFA E701                       	dc.b	smpsNoAttack, $01
00072CFC E102                       	smpsAlterNote       $02
00072CFE E701                       	dc.b	smpsNoAttack, $01
00072D00 E106                       	smpsAlterNote       $06
00072D02 E701                       	dc.b	smpsNoAttack, $01
00072D04 E10C                       	smpsAlterNote       $0C
00072D06 E701                       	dc.b	smpsNoAttack, $01
00072D08 E10D                       	smpsAlterNote       $0D
00072D0A E701                       	dc.b	smpsNoAttack, $01
00072D0C E109                       	smpsAlterNote       $09
00072D0E E701                       	dc.b	smpsNoAttack, $01
00072D10 E103                       	smpsAlterNote       $03
00072D12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072D16 E106                       	smpsAlterNote       $06
00072D18 E701                       	dc.b	smpsNoAttack, $01
00072D1A E10C                       	smpsAlterNote       $0C
00072D1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072D20 E106                       	smpsAlterNote       $06
00072D22 E701                       	dc.b	smpsNoAttack, $01
00072D24 E103                       	smpsAlterNote       $03
00072D26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072D2A E109                       	smpsAlterNote       $09
00072D2C E701                       	dc.b	smpsNoAttack, $01
00072D2E E10D                       	smpsAlterNote       $0D
00072D30 E701                       	dc.b	smpsNoAttack, $01
00072D32 E10C                       	smpsAlterNote       $0C
00072D34 E701                       	dc.b	smpsNoAttack, $01
00072D36 E106                       	smpsAlterNote       $06
00072D38 E701                       	dc.b	smpsNoAttack, $01
00072D3A E103                       	smpsAlterNote       $03
00072D3C 8001                       	dc.b	nRst, $01
00072D3E E109                       	smpsAlterNote       $09
00072D40 C206 8001                  	dc.b	nF5, $06, nRst, $01
00072D46 E10C                       	smpsAlterNote       $0C
00072D48 E601                       	smpsAlterVol        $01
00072D4A BB0D                       	dc.b	nBb4, $0D
00072D4C E106                       	smpsAlterNote       $06
00072D4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072D52 E109                       	smpsAlterNote       $09
00072D54 E701                       	dc.b	smpsNoAttack, $01
00072D56 E10F                       	smpsAlterNote       $0F
00072D58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072D5C E109                       	smpsAlterNote       $09
00072D5E E701                       	dc.b	smpsNoAttack, $01
00072D60 E106                       	smpsAlterNote       $06
00072D62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072D66 E10C                       	smpsAlterNote       $0C
00072D68 E701                       	dc.b	smpsNoAttack, $01
00072D6A E110                       	smpsAlterNote       $10
00072D6C E701                       	dc.b	smpsNoAttack, $01
00072D6E E10F                       	smpsAlterNote       $0F
00072D70 E701                       	dc.b	smpsNoAttack, $01
00072D72 E109                       	smpsAlterNote       $09
00072D74 E701                       	dc.b	smpsNoAttack, $01
00072D76 E105                       	smpsAlterNote       $05
00072D78 E701                       	dc.b	smpsNoAttack, $01
00072D7A E106                       	smpsAlterNote       $06
00072D7C 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00072D80 E103                       	smpsAlterNote       $03
00072D82 E701                       	dc.b	smpsNoAttack, $01
00072D84 E1FF                       	smpsAlterNote       $FF
00072D86 E701                       	dc.b	smpsNoAttack, $01
00072D88 E103                       	smpsAlterNote       $03
00072D8A E701                       	dc.b	smpsNoAttack, $01
00072D8C E106                       	smpsAlterNote       $06
00072D8E E701                       	dc.b	smpsNoAttack, $01
00072D90 E10A                       	smpsAlterNote       $0A
00072D92 E701                       	dc.b	smpsNoAttack, $01
00072D94 E106                       	smpsAlterNote       $06
00072D96 E701                       	dc.b	smpsNoAttack, $01
00072D98 E100                       	smpsAlterNote       $00
00072D9A E701                       	dc.b	smpsNoAttack, $01
00072D9C E1FF                       	smpsAlterNote       $FF
00072D9E E701                       	dc.b	smpsNoAttack, $01
00072DA0 E103                       	smpsAlterNote       $03
00072DA2 E701                       	dc.b	smpsNoAttack, $01
00072DA4 E109                       	smpsAlterNote       $09
00072DA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072DAA E106                       	smpsAlterNote       $06
00072DAC E701                       	dc.b	smpsNoAttack, $01
00072DAE E100                       	smpsAlterNote       $00
00072DB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072DB4 E107                       	smpsAlterNote       $07
00072DB6 BF0E                       	dc.b	nD5, $0E
00072DB8 E101                       	smpsAlterNote       $01
00072DBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072DBE E107                       	smpsAlterNote       $07
00072DC0 E701                       	dc.b	smpsNoAttack, $01
00072DC2 E10A                       	smpsAlterNote       $0A
00072DC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072DC8 E104                       	smpsAlterNote       $04
00072DCA E701                       	dc.b	smpsNoAttack, $01
00072DCC E100                       	smpsAlterNote       $00
00072DCE E701                       	dc.b	smpsNoAttack, $01
00072DD0 E101                       	smpsAlterNote       $01
00072DD2 E701                       	dc.b	smpsNoAttack, $01
00072DD4 E107                       	smpsAlterNote       $07
00072DD6 E701                       	dc.b	smpsNoAttack, $01
00072DD8 E10B                       	smpsAlterNote       $0B
00072DDA E701                       	dc.b	smpsNoAttack, $01
00072DDC E107                       	smpsAlterNote       $07
00072DDE E701                       	dc.b	smpsNoAttack, $01
00072DE0 E104                       	smpsAlterNote       $04
00072DE2 E701                       	dc.b	smpsNoAttack, $01
00072DE4 E100                       	smpsAlterNote       $00
00072DE6 E701                       	dc.b	smpsNoAttack, $01
00072DE8 E101                       	smpsAlterNote       $01
00072DEA 8001                       	dc.b	nRst, $01
00072DEC E108                       	smpsAlterNote       $08
00072DEE C10C                       	dc.b	nE5, $0C
00072DF0 E109                       	smpsAlterNote       $09
00072DF2 C201 8001                  	dc.b	nF5, $01, nRst, $01
00072DF6 E10A                       	smpsAlterNote       $0A
00072DF8 8001                       	dc.b	nRst, $01
00072DFA E109                       	smpsAlterNote       $09
00072DFC C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00072E00 E106                       	smpsAlterNote       $06
00072E02 E701                       	dc.b	smpsNoAttack, $01
00072E04 E102                       	smpsAlterNote       $02
00072E06 E701                       	dc.b	smpsNoAttack, $01
00072E08 E103                       	smpsAlterNote       $03
00072E0A E701                       	dc.b	smpsNoAttack, $01
00072E0C E109                       	smpsAlterNote       $09
00072E0E E701                       	dc.b	smpsNoAttack, $01
00072E10 E10D                       	smpsAlterNote       $0D
00072E12 E701                       	dc.b	smpsNoAttack, $01
00072E14 E109                       	smpsAlterNote       $09
00072E16 E701                       	dc.b	smpsNoAttack, $01
00072E18 E106                       	smpsAlterNote       $06
00072E1A E701                       	dc.b	smpsNoAttack, $01
00072E1C E102                       	smpsAlterNote       $02
00072E1E E701                       	dc.b	smpsNoAttack, $01
00072E20 E106                       	smpsAlterNote       $06
00072E22 E701                       	dc.b	smpsNoAttack, $01
00072E24 E10C                       	smpsAlterNote       $0C
00072E26 E701                       	dc.b	smpsNoAttack, $01
00072E28 E10D                       	smpsAlterNote       $0D
00072E2A E701                       	dc.b	smpsNoAttack, $01
00072E2C E109                       	smpsAlterNote       $09
00072E2E C40D                       	dc.b	nG5, $0D
00072E30 E106                       	smpsAlterNote       $06
00072E32 E701                       	dc.b	smpsNoAttack, $01
00072E34 E102                       	smpsAlterNote       $02
00072E36 E701                       	dc.b	smpsNoAttack, $01
00072E38 E103                       	smpsAlterNote       $03
00072E3A E701                       	dc.b	smpsNoAttack, $01
00072E3C E109                       	smpsAlterNote       $09
00072E3E E701                       	dc.b	smpsNoAttack, $01
00072E40 E108                       	smpsAlterNote       $08
00072E42 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00072E4E E109                       	smpsAlterNote       $09
00072E50 C20D                       	dc.b	nF5, $0D
00072E52 E106                       	smpsAlterNote       $06
00072E54 E701                       	dc.b	smpsNoAttack, $01
00072E56 E102                       	smpsAlterNote       $02
00072E58 E701                       	dc.b	smpsNoAttack, $01
00072E5A E106                       	smpsAlterNote       $06
00072E5C E701                       	dc.b	smpsNoAttack, $01
00072E5E E109                       	smpsAlterNote       $09
00072E60 E701                       	dc.b	smpsNoAttack, $01
00072E62 E10D                       	smpsAlterNote       $0D
00072E64 E701                       	dc.b	smpsNoAttack, $01
00072E66 E109                       	smpsAlterNote       $09
00072E68 E701                       	dc.b	smpsNoAttack, $01
00072E6A E103                       	smpsAlterNote       $03
00072E6C E701                       	dc.b	smpsNoAttack, $01
00072E6E E102                       	smpsAlterNote       $02
00072E70 E701                       	dc.b	smpsNoAttack, $01
00072E72 E106                       	smpsAlterNote       $06
00072E74 E701                       	dc.b	smpsNoAttack, $01
00072E76 E10C                       	smpsAlterNote       $0C
00072E78 E701                       	dc.b	smpsNoAttack, $01
00072E7A E10D                       	smpsAlterNote       $0D
00072E7C 8001                       	dc.b	nRst, $01
00072E7E E112                       	smpsAlterNote       $12
00072E80 C401                       	dc.b	nG5, $01
00072E82 E1EB                       	smpsAlterNote       $EB
00072E84 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00072E87 E1FD                       	smpsAlterNote       $FD
00072E89 E701                       	dc.b	smpsNoAttack, $01
00072E8B E10F                       	smpsAlterNote       $0F
00072E8D E701                       	dc.b	smpsNoAttack, $01
00072E8F E118                       	smpsAlterNote       $18
00072E91 E701                       	dc.b	smpsNoAttack, $01
00072E93 E1ED                       	smpsAlterNote       $ED
00072E95 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00072E98 E1FF                       	smpsAlterNote       $FF
00072E9A E701                       	dc.b	smpsNoAttack, $01
00072E9C E10B                       	smpsAlterNote       $0B
00072E9E E703                       	dc.b	smpsNoAttack, $03
00072EA0 E109                       	smpsAlterNote       $09
00072EA2 C407                       	dc.b	nG5, $07
00072EA4 E108                       	smpsAlterNote       $08
00072EA6 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00072EB2 E109                       	smpsAlterNote       $09
00072EB4 C20D                       	dc.b	nF5, $0D
00072EB6 E103                       	smpsAlterNote       $03
00072EB8 E701                       	dc.b	smpsNoAttack, $01
00072EBA E102                       	smpsAlterNote       $02
00072EBC E701                       	dc.b	smpsNoAttack, $01
00072EBE E106                       	smpsAlterNote       $06
00072EC0 E701                       	dc.b	smpsNoAttack, $01
00072EC2 E10C                       	smpsAlterNote       $0C
00072EC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072EC8 E109                       	smpsAlterNote       $09
00072ECA E701                       	dc.b	smpsNoAttack, $01
00072ECC E103                       	smpsAlterNote       $03
00072ECE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072ED2 E109                       	smpsAlterNote       $09
00072ED4 E701                       	dc.b	smpsNoAttack, $01
00072ED6 E10C                       	smpsAlterNote       $0C
00072ED8 E701                       	dc.b	smpsNoAttack, $01
00072EDA E10D                       	smpsAlterNote       $0D
00072EDC 8001                       	dc.b	nRst, $01
00072EDE E10B                       	smpsAlterNote       $0B
00072EE0 C609 8001                  	dc.b	nA5, $09, nRst, $01
00072EE4 E109                       	smpsAlterNote       $09
00072EE6 B806 8001                  	dc.b	nG4, $06, nRst, $01
00072EEA E108                       	smpsAlterNote       $08
00072EEC C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00072EF8 8001                       	dc.b	nRst, $01
00072EFA E109                       	smpsAlterNote       $09
00072EFC C20D                       	dc.b	nF5, $0D
00072EFE E103                       	smpsAlterNote       $03
00072F00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072F04 E106                       	smpsAlterNote       $06
00072F06 E701                       	dc.b	smpsNoAttack, $01
00072F08 E10C                       	smpsAlterNote       $0C
00072F0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072F0E E106                       	smpsAlterNote       $06
00072F10 E701                       	dc.b	smpsNoAttack, $01
00072F12 E103                       	smpsAlterNote       $03
00072F14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00072F18 E109                       	smpsAlterNote       $09
00072F1A E701                       	dc.b	smpsNoAttack, $01
00072F1C E10D                       	smpsAlterNote       $0D
00072F1E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00072F24 E108                       	smpsAlterNote       $08
00072F26 E6FF                       	smpsAlterVol        $FF
00072F28 A806                       	dc.b	nEb3, $06
00072F2A E10C                       	smpsAlterNote       $0C
00072F2C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00072F30 E108                       	smpsAlterNote       $08
00072F32 A803                       	dc.b	nEb3, $03
00072F34 E109                       	smpsAlterNote       $09
00072F36 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00072F3A E10C                       	smpsAlterNote       $0C
00072F3C AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00072F46 E109                       	smpsAlterNote       $09
00072F48 E602                       	smpsAlterVol        $02
00072F4A B604                       	dc.b	nF4, $04
00072F4C E602                       	smpsAlterVol        $02
00072F4E F6F1 AA                    	smpsJump            music84_Jump02
00072F51                            
00072F51                            ; FM4 Data
00072F51                            music84_FM4:
00072F53 E040                       	smpsPan             panRight, $00
00072F55 8003                       	dc.b	nRst, $03
00072F57 E10F                       	smpsAlterNote       $0F
00072F59 C603 8008                  	dc.b	nA5, $03, nRst, $08
00072F5D E10D                       	smpsAlterNote       $0D
00072F5F C403 800A                  	dc.b	nG5, $03, nRst, $0A
00072F63 E10C                       	smpsAlterNote       $0C
00072F65 C103 8004                  	dc.b	nE5, $03, nRst, $04
00072F6B E6FE                       	smpsAlterVol        $FE
00072F6D E110                       	smpsAlterNote       $10
00072F6F C703 8001                  	dc.b	nBb5, $03, nRst, $01
00072F73 E10F                       	smpsAlterNote       $0F
00072F75 C602 8001                  	dc.b	nA5, $02, nRst, $01
00072F79 E10D                       	smpsAlterNote       $0D
00072F7B C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00072F84 E10C                       	smpsAlterNote       $0C
00072F86 C103                       	dc.b	nE5, $03
00072F88 E10A                       	smpsAlterNote       $0A
00072F8A BD03 8001                  	dc.b	nC5, $03, nRst, $01
00072F90 03                         	dc.b	$03
00072F91                            
00072F91                            music84_Jump01:
00072F91 E10B                       	smpsAlterNote       $0B
00072F93 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00072F97 E10C                       	smpsAlterNote       $0C
00072F99 C102 8001                  	dc.b	nE5, $02, nRst, $01
00072F9D E10D                       	smpsAlterNote       $0D
00072F9F C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00072FA9 E10B                       	smpsAlterNote       $0B
00072FAB BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00072FAF E107                       	smpsAlterNote       $07
00072FB1 E701                       	dc.b	smpsNoAttack, $01
00072FB3 E103                       	smpsAlterNote       $03
00072FB5 E701                       	dc.b	smpsNoAttack, $01
00072FB7 E104                       	smpsAlterNote       $04
00072FB9 E701                       	dc.b	smpsNoAttack, $01
00072FBB E10A                       	smpsAlterNote       $0A
00072FBD E701                       	dc.b	smpsNoAttack, $01
00072FBF E10E                       	smpsAlterNote       $0E
00072FC1 E701                       	dc.b	smpsNoAttack, $01
00072FC3 E10A                       	smpsAlterNote       $0A
00072FC5 E701                       	dc.b	smpsNoAttack, $01
00072FC7 E107                       	smpsAlterNote       $07
00072FC9 E701                       	dc.b	smpsNoAttack, $01
00072FCB E104                       	smpsAlterNote       $04
00072FCD 8001                       	dc.b	nRst, $01
00072FCF E110                       	smpsAlterNote       $10
00072FD1 C703                       	dc.b	nBb5, $03
00072FD3 E10F                       	smpsAlterNote       $0F
00072FD5 C603 8001                  	dc.b	nA5, $03, nRst, $01
00072FD9 E10D                       	smpsAlterNote       $0D
00072FDB C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00072FE1 E10C                       	smpsAlterNote       $0C
00072FE3 E701                       	dc.b	smpsNoAttack, $01
00072FE5 E108                       	smpsAlterNote       $08
00072FE7 E701                       	dc.b	smpsNoAttack, $01
00072FE9 E10C                       	smpsAlterNote       $0C
00072FEB E701                       	dc.b	smpsNoAttack, $01
00072FED E10F                       	smpsAlterNote       $0F
00072FEF E701                       	dc.b	smpsNoAttack, $01
00072FF1 E113                       	smpsAlterNote       $13
00072FF3 E701                       	dc.b	smpsNoAttack, $01
00072FF5 E10F                       	smpsAlterNote       $0F
00072FF7 E701                       	dc.b	smpsNoAttack, $01
00072FF9 E109                       	smpsAlterNote       $09
00072FFB E701                       	dc.b	smpsNoAttack, $01
00072FFD E108                       	smpsAlterNote       $08
00072FFF E701                       	dc.b	smpsNoAttack, $01
00073001 E10C                       	smpsAlterNote       $0C
00073003 E701                       	dc.b	smpsNoAttack, $01
00073005 E112                       	smpsAlterNote       $12
00073007 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007300B E10C                       	smpsAlterNote       $0C
0007300D E701                       	dc.b	smpsNoAttack, $01
0007300F E109                       	smpsAlterNote       $09
00073011 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073015 E10F                       	smpsAlterNote       $0F
00073017 E701                       	dc.b	smpsNoAttack, $01
00073019 E113                       	smpsAlterNote       $13
0007301B E701                       	dc.b	smpsNoAttack, $01
0007301D E112                       	smpsAlterNote       $12
0007301F E701                       	dc.b	smpsNoAttack, $01
00073021 E10C                       	smpsAlterNote       $0C
00073023 E701                       	dc.b	smpsNoAttack, $01
00073025 E108                       	smpsAlterNote       $08
00073027 E701                       	dc.b	smpsNoAttack, $01
00073029 E10C                       	smpsAlterNote       $0C
0007302B E701                       	dc.b	smpsNoAttack, $01
0007302D E10F                       	smpsAlterNote       $0F
0007302F E701                       	dc.b	smpsNoAttack, $01
00073031 E113                       	smpsAlterNote       $13
00073033 E701                       	dc.b	smpsNoAttack, $01
00073035 E10F                       	smpsAlterNote       $0F
00073037 E701                       	dc.b	smpsNoAttack, $01
00073039 E109                       	smpsAlterNote       $09
0007303B E701                       	dc.b	smpsNoAttack, $01
0007303D E108                       	smpsAlterNote       $08
0007303F E701                       	dc.b	smpsNoAttack, $01
00073041 E10C                       	smpsAlterNote       $0C
00073043 E701                       	dc.b	smpsNoAttack, $01
00073045 E112                       	smpsAlterNote       $12
00073047 E701                       	dc.b	smpsNoAttack, $01
00073049 E113                       	smpsAlterNote       $13
0007304B 800F                       	dc.b	nRst, $0F
0007304D E10B                       	smpsAlterNote       $0B
0007304F BF03                       	dc.b	nD5, $03
00073051 E10C                       	smpsAlterNote       $0C
00073053 C103 8001                  	dc.b	nE5, $03, nRst, $01
00073057 E10D                       	smpsAlterNote       $0D
00073059 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00073061 E10B                       	smpsAlterNote       $0B
00073063 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0007306D E110                       	smpsAlterNote       $10
0007306F C704                       	dc.b	nBb5, $04
00073071 E10F                       	smpsAlterNote       $0F
00073073 C604 8001                  	dc.b	nA5, $04, nRst, $01
00073077 E10D                       	smpsAlterNote       $0D
00073079 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0007307F E109                       	smpsAlterNote       $09
00073081 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073085 E10F                       	smpsAlterNote       $0F
00073087 E701                       	dc.b	smpsNoAttack, $01
00073089 E112                       	smpsAlterNote       $12
0007308B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007308F E10C                       	smpsAlterNote       $0C
00073091 E701                       	dc.b	smpsNoAttack, $01
00073093 E108                       	smpsAlterNote       $08
00073095 E701                       	dc.b	smpsNoAttack, $01
00073097 E109                       	smpsAlterNote       $09
00073099 E701                       	dc.b	smpsNoAttack, $01
0007309B E10F                       	smpsAlterNote       $0F
0007309D E701                       	dc.b	smpsNoAttack, $01
0007309F E113                       	smpsAlterNote       $13
000730A1 E701                       	dc.b	smpsNoAttack, $01
000730A3 E10F                       	smpsAlterNote       $0F
000730A5 E701                       	dc.b	smpsNoAttack, $01
000730A7 E10C                       	smpsAlterNote       $0C
000730A9 E701                       	dc.b	smpsNoAttack, $01
000730AB E108                       	smpsAlterNote       $08
000730AD E701                       	dc.b	smpsNoAttack, $01
000730AF E10C                       	smpsAlterNote       $0C
000730B1 E701                       	dc.b	smpsNoAttack, $01
000730B3 E112                       	smpsAlterNote       $12
000730B5 E701                       	dc.b	smpsNoAttack, $01
000730B7 E113                       	smpsAlterNote       $13
000730B9 E701                       	dc.b	smpsNoAttack, $01
000730BB E10F                       	smpsAlterNote       $0F
000730BD E701                       	dc.b	smpsNoAttack, $01
000730BF E109                       	smpsAlterNote       $09
000730C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000730C5 E10C                       	smpsAlterNote       $0C
000730C7 E701                       	dc.b	smpsNoAttack, $01
000730C9 E112                       	smpsAlterNote       $12
000730CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000730CF E10C                       	smpsAlterNote       $0C
000730D1 E701                       	dc.b	smpsNoAttack, $01
000730D3 E109                       	smpsAlterNote       $09
000730D5 E701                       	dc.b	smpsNoAttack, $01
000730D7 E10D                       	smpsAlterNote       $0D
000730D9 C401 8001                  	dc.b	nG5, $01, nRst, $01
000730DD E10F                       	smpsAlterNote       $0F
000730DF C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
000730E9 E10D                       	smpsAlterNote       $0D
000730EB C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000730F1 E10B                       	smpsAlterNote       $0B
000730F3 BF0D                       	dc.b	nD5, $0D
000730F5 E108                       	smpsAlterNote       $08
000730F7 E701                       	dc.b	smpsNoAttack, $01
000730F9 E104                       	smpsAlterNote       $04
000730FB E701                       	dc.b	smpsNoAttack, $01
000730FD E108                       	smpsAlterNote       $08
000730FF E701                       	dc.b	smpsNoAttack, $01
00073101 E10B                       	smpsAlterNote       $0B
00073103 E701                       	dc.b	smpsNoAttack, $01
00073105 E10F                       	smpsAlterNote       $0F
00073107 E701                       	dc.b	smpsNoAttack, $01
00073109 E10B                       	smpsAlterNote       $0B
0007310B E701                       	dc.b	smpsNoAttack, $01
0007310D E105                       	smpsAlterNote       $05
0007310F E701                       	dc.b	smpsNoAttack, $01
00073111 E104                       	smpsAlterNote       $04
00073113 E701                       	dc.b	smpsNoAttack, $01
00073115 E108                       	smpsAlterNote       $08
00073117 E701                       	dc.b	smpsNoAttack, $01
00073119 E10E                       	smpsAlterNote       $0E
0007311B E701                       	dc.b	smpsNoAttack, $01
0007311D E10F                       	smpsAlterNote       $0F
0007311F 8001                       	dc.b	nRst, $01
00073121 E10C                       	smpsAlterNote       $0C
00073123 C101                       	dc.b	nE5, $01
00073125 E10D                       	smpsAlterNote       $0D
00073127 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0007312D E10F                       	smpsAlterNote       $0F
0007312F C606 8001                  	dc.b	nA5, $06, nRst, $01
00073133 E10C                       	smpsAlterNote       $0C
00073135 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00073139 E10D                       	smpsAlterNote       $0D
0007313B CE06 8001                  	dc.b	nF6, $06, nRst, $01
0007313F E10C                       	smpsAlterNote       $0C
00073141 CD03                       	dc.b	nE6, $03
00073143 E10A                       	smpsAlterNote       $0A
00073145 C903 8001                  	dc.b	nC6, $03, nRst, $01
00073149 E10D                       	smpsAlterNote       $0D
0007314B C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00073153 E109                       	smpsAlterNote       $09
00073155 E701                       	dc.b	smpsNoAttack, $01
00073157 E10D                       	smpsAlterNote       $0D
00073159 E701                       	dc.b	smpsNoAttack, $01
0007315B E110                       	smpsAlterNote       $10
0007315D E701                       	dc.b	smpsNoAttack, $01
0007315F E114                       	smpsAlterNote       $14
00073161 E701                       	dc.b	smpsNoAttack, $01
00073163 E110                       	smpsAlterNote       $10
00073165 E701                       	dc.b	smpsNoAttack, $01
00073167 E10A                       	smpsAlterNote       $0A
00073169 E701                       	dc.b	smpsNoAttack, $01
0007316B E109                       	smpsAlterNote       $09
0007316D E701                       	dc.b	smpsNoAttack, $01
0007316F E10D                       	smpsAlterNote       $0D
00073171 E701                       	dc.b	smpsNoAttack, $01
00073173 E113                       	smpsAlterNote       $13
00073175 E701                       	dc.b	smpsNoAttack, $01
00073177 E114                       	smpsAlterNote       $14
00073179 8001                       	dc.b	nRst, $01
0007317B E10F                       	smpsAlterNote       $0F
0007317D C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00073183 E10C                       	smpsAlterNote       $0C
00073185 E701                       	dc.b	smpsNoAttack, $01
00073187 E108                       	smpsAlterNote       $08
00073189 E701                       	dc.b	smpsNoAttack, $01
0007318B E10C                       	smpsAlterNote       $0C
0007318D E701                       	dc.b	smpsNoAttack, $01
0007318F E112                       	smpsAlterNote       $12
00073191 E701                       	dc.b	smpsNoAttack, $01
00073193 E113                       	smpsAlterNote       $13
00073195 E701                       	dc.b	smpsNoAttack, $01
00073197 E10F                       	smpsAlterNote       $0F
00073199 E701                       	dc.b	smpsNoAttack, $01
0007319B E109                       	smpsAlterNote       $09
0007319D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000731A1 E10C                       	smpsAlterNote       $0C
000731A3 E701                       	dc.b	smpsNoAttack, $01
000731A5 E112                       	smpsAlterNote       $12
000731A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000731AB E10C                       	smpsAlterNote       $0C
000731AD E701                       	dc.b	smpsNoAttack, $01
000731AF E109                       	smpsAlterNote       $09
000731B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000731B5 E10F                       	smpsAlterNote       $0F
000731B7 E701                       	dc.b	smpsNoAttack, $01
000731B9 E113                       	smpsAlterNote       $13
000731BB E701                       	dc.b	smpsNoAttack, $01
000731BD E112                       	smpsAlterNote       $12
000731BF E701                       	dc.b	smpsNoAttack, $01
000731C1 E10C                       	smpsAlterNote       $0C
000731C3 E701                       	dc.b	smpsNoAttack, $01
000731C5 E108                       	smpsAlterNote       $08
000731C7 E701                       	dc.b	smpsNoAttack, $01
000731C9 E10C                       	smpsAlterNote       $0C
000731CB E701                       	dc.b	smpsNoAttack, $01
000731CD E10F                       	smpsAlterNote       $0F
000731CF E701                       	dc.b	smpsNoAttack, $01
000731D1 E113                       	smpsAlterNote       $13
000731D3 E701                       	dc.b	smpsNoAttack, $01
000731D5 E10F                       	smpsAlterNote       $0F
000731D7 E701                       	dc.b	smpsNoAttack, $01
000731D9 E109                       	smpsAlterNote       $09
000731DB E701                       	dc.b	smpsNoAttack, $01
000731DD E108                       	smpsAlterNote       $08
000731DF E701                       	dc.b	smpsNoAttack, $01
000731E1 E10C                       	smpsAlterNote       $0C
000731E3 E701                       	dc.b	smpsNoAttack, $01
000731E5 E112                       	smpsAlterNote       $12
000731E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000731EB E10F                       	smpsAlterNote       $0F
000731ED E701                       	dc.b	smpsNoAttack, $01
000731EF E109                       	smpsAlterNote       $09
000731F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000731F5 E10F                       	smpsAlterNote       $0F
000731F7 E701                       	dc.b	smpsNoAttack, $01
000731F9 E113                       	smpsAlterNote       $13
000731FB E701                       	dc.b	smpsNoAttack, $01
000731FD E112                       	smpsAlterNote       $12
000731FF E701                       	dc.b	smpsNoAttack, $01
00073201 E10C                       	smpsAlterNote       $0C
00073203 E701                       	dc.b	smpsNoAttack, $01
00073205 E108                       	smpsAlterNote       $08
00073207 E701                       	dc.b	smpsNoAttack, $01
00073209 E10C                       	smpsAlterNote       $0C
0007320B E701                       	dc.b	smpsNoAttack, $01
0007320D E10F                       	smpsAlterNote       $0F
0007320F E701                       	dc.b	smpsNoAttack, $01
00073211 E113                       	smpsAlterNote       $13
00073213 E701                       	dc.b	smpsNoAttack, $01
00073215 E10F                       	smpsAlterNote       $0F
00073217 E701                       	dc.b	smpsNoAttack, $01
00073219 E109                       	smpsAlterNote       $09
0007321B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007321F E10F                       	smpsAlterNote       $0F
00073221 C60D                       	dc.b	nA5, $0D
00073223 E109                       	smpsAlterNote       $09
00073225 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073229 E10C                       	smpsAlterNote       $0C
0007322B E701                       	dc.b	smpsNoAttack, $01
0007322D E112                       	smpsAlterNote       $12
0007322F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073233 E10C                       	smpsAlterNote       $0C
00073235 E701                       	dc.b	smpsNoAttack, $01
00073237 E109                       	smpsAlterNote       $09
00073239 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007323D E10F                       	smpsAlterNote       $0F
0007323F E701                       	dc.b	smpsNoAttack, $01
00073241 E113                       	smpsAlterNote       $13
00073243 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00073249 E10D                       	smpsAlterNote       $0D
0007324B C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00073253 E10C                       	smpsAlterNote       $0C
00073255 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0007325B E6FF                       	smpsAlterVol        $FF
0007325D E10B                       	smpsAlterNote       $0B
0007325F BF03 8001                  	dc.b	nD5, $03, nRst, $01
00073263 E10C                       	smpsAlterNote       $0C
00073265 C103                       	dc.b	nE5, $03
00073267 E10D                       	smpsAlterNote       $0D
00073269 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00073273 E10B                       	smpsAlterNote       $0B
00073275 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00073279 E107                       	smpsAlterNote       $07
0007327B E701                       	dc.b	smpsNoAttack, $01
0007327D E104                       	smpsAlterNote       $04
0007327F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073283 E10A                       	smpsAlterNote       $0A
00073285 E701                       	dc.b	smpsNoAttack, $01
00073287 E10D                       	smpsAlterNote       $0D
00073289 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007328D E107                       	smpsAlterNote       $07
0007328F E701                       	dc.b	smpsNoAttack, $01
00073291 E104                       	smpsAlterNote       $04
00073293 8001                       	dc.b	nRst, $01
00073295 E110                       	smpsAlterNote       $10
00073297 C703                       	dc.b	nBb5, $03
00073299 E10F                       	smpsAlterNote       $0F
0007329B C603 8001                  	dc.b	nA5, $03, nRst, $01
0007329F E10D                       	smpsAlterNote       $0D
000732A1 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000732A5 E10C                       	smpsAlterNote       $0C
000732A7 E701                       	dc.b	smpsNoAttack, $01
000732A9 E108                       	smpsAlterNote       $08
000732AB E701                       	dc.b	smpsNoAttack, $01
000732AD E109                       	smpsAlterNote       $09
000732AF E701                       	dc.b	smpsNoAttack, $01
000732B1 E10F                       	smpsAlterNote       $0F
000732B3 E701                       	dc.b	smpsNoAttack, $01
000732B5 E113                       	smpsAlterNote       $13
000732B7 E701                       	dc.b	smpsNoAttack, $01
000732B9 E10F                       	smpsAlterNote       $0F
000732BB E701                       	dc.b	smpsNoAttack, $01
000732BD E10C                       	smpsAlterNote       $0C
000732BF E701                       	dc.b	smpsNoAttack, $01
000732C1 E108                       	smpsAlterNote       $08
000732C3 E701                       	dc.b	smpsNoAttack, $01
000732C5 E10C                       	smpsAlterNote       $0C
000732C7 E701                       	dc.b	smpsNoAttack, $01
000732C9 E112                       	smpsAlterNote       $12
000732CB E701                       	dc.b	smpsNoAttack, $01
000732CD E113                       	smpsAlterNote       $13
000732CF E701                       	dc.b	smpsNoAttack, $01
000732D1 E10F                       	smpsAlterNote       $0F
000732D3 E701                       	dc.b	smpsNoAttack, $01
000732D5 E109                       	smpsAlterNote       $09
000732D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000732DB E10C                       	smpsAlterNote       $0C
000732DD E701                       	dc.b	smpsNoAttack, $01
000732DF E112                       	smpsAlterNote       $12
000732E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000732E5 E10C                       	smpsAlterNote       $0C
000732E7 E701                       	dc.b	smpsNoAttack, $01
000732E9 E109                       	smpsAlterNote       $09
000732EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000732EF E10F                       	smpsAlterNote       $0F
000732F1 E701                       	dc.b	smpsNoAttack, $01
000732F3 E113                       	smpsAlterNote       $13
000732F5 E701                       	dc.b	smpsNoAttack, $01
000732F7 E112                       	smpsAlterNote       $12
000732F9 E701                       	dc.b	smpsNoAttack, $01
000732FB E10C                       	smpsAlterNote       $0C
000732FD E701                       	dc.b	smpsNoAttack, $01
000732FF E108                       	smpsAlterNote       $08
00073301 E701                       	dc.b	smpsNoAttack, $01
00073303 E10C                       	smpsAlterNote       $0C
00073305 E701                       	dc.b	smpsNoAttack, $01
00073307 E10F                       	smpsAlterNote       $0F
00073309 E701                       	dc.b	smpsNoAttack, $01
0007330B E113                       	smpsAlterNote       $13
0007330D E701                       	dc.b	smpsNoAttack, $01
0007330F E10F                       	smpsAlterNote       $0F
00073311 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00073315 E110                       	smpsAlterNote       $10
00073317 BB03                       	dc.b	nBb4, $03
00073319 E10F                       	smpsAlterNote       $0F
0007331B BA06 8001                  	dc.b	nA4, $06, nRst, $01
0007331F E10B                       	smpsAlterNote       $0B
00073321 BF03                       	dc.b	nD5, $03
00073323 E10C                       	smpsAlterNote       $0C
00073325 C103 8001                  	dc.b	nE5, $03, nRst, $01
00073329 E10D                       	smpsAlterNote       $0D
0007332B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00073335 E10B                       	smpsAlterNote       $0B
00073337 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00073343 E110                       	smpsAlterNote       $10
00073345 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00073349 E10F                       	smpsAlterNote       $0F
0007334B C604                       	dc.b	nA5, $04
0007334D E10D                       	smpsAlterNote       $0D
0007334F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00073355 E109                       	smpsAlterNote       $09
00073357 E701                       	dc.b	smpsNoAttack, $01
00073359 E108                       	smpsAlterNote       $08
0007335B E701                       	dc.b	smpsNoAttack, $01
0007335D E10C                       	smpsAlterNote       $0C
0007335F E701                       	dc.b	smpsNoAttack, $01
00073361 E112                       	smpsAlterNote       $12
00073363 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073367 E10F                       	smpsAlterNote       $0F
00073369 E701                       	dc.b	smpsNoAttack, $01
0007336B E109                       	smpsAlterNote       $09
0007336D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073371 E10F                       	smpsAlterNote       $0F
00073373 E701                       	dc.b	smpsNoAttack, $01
00073375 E112                       	smpsAlterNote       $12
00073377 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007337B E10C                       	smpsAlterNote       $0C
0007337D E701                       	dc.b	smpsNoAttack, $01
0007337F E108                       	smpsAlterNote       $08
00073381 E701                       	dc.b	smpsNoAttack, $01
00073383 E109                       	smpsAlterNote       $09
00073385 E701                       	dc.b	smpsNoAttack, $01
00073387 E10F                       	smpsAlterNote       $0F
00073389 E701                       	dc.b	smpsNoAttack, $01
0007338B E113                       	smpsAlterNote       $13
0007338D E701                       	dc.b	smpsNoAttack, $01
0007338F E10F                       	smpsAlterNote       $0F
00073391 E701                       	dc.b	smpsNoAttack, $01
00073393 E10C                       	smpsAlterNote       $0C
00073395 E701                       	dc.b	smpsNoAttack, $01
00073397 E108                       	smpsAlterNote       $08
00073399 E701                       	dc.b	smpsNoAttack, $01
0007339B E10C                       	smpsAlterNote       $0C
0007339D E701                       	dc.b	smpsNoAttack, $01
0007339F E112                       	smpsAlterNote       $12
000733A1 E701                       	dc.b	smpsNoAttack, $01
000733A3 E113                       	smpsAlterNote       $13
000733A5 E701                       	dc.b	smpsNoAttack, $01
000733A7 E10F                       	smpsAlterNote       $0F
000733A9 E701                       	dc.b	smpsNoAttack, $01
000733AB E109                       	smpsAlterNote       $09
000733AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000733B1 E10C                       	smpsAlterNote       $0C
000733B3 E701                       	dc.b	smpsNoAttack, $01
000733B5 E112                       	smpsAlterNote       $12
000733B7 E701                       	dc.b	smpsNoAttack, $01
000733B9 E113                       	smpsAlterNote       $13
000733BB 8001                       	dc.b	nRst, $01
000733BD E10F                       	smpsAlterNote       $0F
000733BF C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000733CB C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000733D3 E10D                       	smpsAlterNote       $0D
000733D5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000733DB E10B                       	smpsAlterNote       $0B
000733DD BF0D                       	dc.b	nD5, $0D
000733DF E108                       	smpsAlterNote       $08
000733E1 E701                       	dc.b	smpsNoAttack, $01
000733E3 E104                       	smpsAlterNote       $04
000733E5 E701                       	dc.b	smpsNoAttack, $01
000733E7 E105                       	smpsAlterNote       $05
000733E9 E701                       	dc.b	smpsNoAttack, $01
000733EB E10B                       	smpsAlterNote       $0B
000733ED E701                       	dc.b	smpsNoAttack, $01
000733EF E10F                       	smpsAlterNote       $0F
000733F1 E701                       	dc.b	smpsNoAttack, $01
000733F3 E10B                       	smpsAlterNote       $0B
000733F5 E701                       	dc.b	smpsNoAttack, $01
000733F7 E108                       	smpsAlterNote       $08
000733F9 E701                       	dc.b	smpsNoAttack, $01
000733FB E104                       	smpsAlterNote       $04
000733FD E701                       	dc.b	smpsNoAttack, $01
000733FF E108                       	smpsAlterNote       $08
00073401 E701                       	dc.b	smpsNoAttack, $01
00073403 E10E                       	smpsAlterNote       $0E
00073405 E701                       	dc.b	smpsNoAttack, $01
00073407 E10F                       	smpsAlterNote       $0F
00073409 E701                       	dc.b	smpsNoAttack, $01
0007340B E10C                       	smpsAlterNote       $0C
0007340D C101                       	dc.b	nE5, $01
0007340F E10D                       	smpsAlterNote       $0D
00073411 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00073419 E10F                       	smpsAlterNote       $0F
0007341B C607                       	dc.b	nA5, $07
0007341D E10C                       	smpsAlterNote       $0C
0007341F CD07                       	dc.b	nE6, $07
00073421 E10D                       	smpsAlterNote       $0D
00073423 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00073427 E10C                       	smpsAlterNote       $0C
00073429 CD03                       	dc.b	nE6, $03
0007342B E10A                       	smpsAlterNote       $0A
0007342D C903 8001                  	dc.b	nC6, $03, nRst, $01
00073431 E10D                       	smpsAlterNote       $0D
00073433 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00073439 E10A                       	smpsAlterNote       $0A
0007343B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007343F E110                       	smpsAlterNote       $10
00073441 E701                       	dc.b	smpsNoAttack, $01
00073443 E114                       	smpsAlterNote       $14
00073445 E701                       	dc.b	smpsNoAttack, $01
00073447 E113                       	smpsAlterNote       $13
00073449 E701                       	dc.b	smpsNoAttack, $01
0007344B E10D                       	smpsAlterNote       $0D
0007344D E701                       	dc.b	smpsNoAttack, $01
0007344F E109                       	smpsAlterNote       $09
00073451 E701                       	dc.b	smpsNoAttack, $01
00073453 E10D                       	smpsAlterNote       $0D
00073455 E701                       	dc.b	smpsNoAttack, $01
00073457 E110                       	smpsAlterNote       $10
00073459 E701                       	dc.b	smpsNoAttack, $01
0007345B E114                       	smpsAlterNote       $14
0007345D E701                       	dc.b	smpsNoAttack, $01
0007345F E10F                       	smpsAlterNote       $0F
00073461 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00073465 E10C                       	smpsAlterNote       $0C
00073467 E701                       	dc.b	smpsNoAttack, $01
00073469 E108                       	smpsAlterNote       $08
0007346B E701                       	dc.b	smpsNoAttack, $01
0007346D E10C                       	smpsAlterNote       $0C
0007346F E701                       	dc.b	smpsNoAttack, $01
00073471 E10F                       	smpsAlterNote       $0F
00073473 E701                       	dc.b	smpsNoAttack, $01
00073475 E113                       	smpsAlterNote       $13
00073477 E701                       	dc.b	smpsNoAttack, $01
00073479 E10F                       	smpsAlterNote       $0F
0007347B E701                       	dc.b	smpsNoAttack, $01
0007347D E109                       	smpsAlterNote       $09
0007347F E701                       	dc.b	smpsNoAttack, $01
00073481 E108                       	smpsAlterNote       $08
00073483 E701                       	dc.b	smpsNoAttack, $01
00073485 E10C                       	smpsAlterNote       $0C
00073487 E701                       	dc.b	smpsNoAttack, $01
00073489 E112                       	smpsAlterNote       $12
0007348B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007348F E10F                       	smpsAlterNote       $0F
00073491 E701                       	dc.b	smpsNoAttack, $01
00073493 E109                       	smpsAlterNote       $09
00073495 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073499 E10F                       	smpsAlterNote       $0F
0007349B E701                       	dc.b	smpsNoAttack, $01
0007349D E112                       	smpsAlterNote       $12
0007349F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000734A3 E10C                       	smpsAlterNote       $0C
000734A5 E701                       	dc.b	smpsNoAttack, $01
000734A7 E108                       	smpsAlterNote       $08
000734A9 E701                       	dc.b	smpsNoAttack, $01
000734AB E109                       	smpsAlterNote       $09
000734AD E701                       	dc.b	smpsNoAttack, $01
000734AF E10F                       	smpsAlterNote       $0F
000734B1 E701                       	dc.b	smpsNoAttack, $01
000734B3 E113                       	smpsAlterNote       $13
000734B5 E701                       	dc.b	smpsNoAttack, $01
000734B7 E10F                       	smpsAlterNote       $0F
000734B9 E701                       	dc.b	smpsNoAttack, $01
000734BB E10C                       	smpsAlterNote       $0C
000734BD E701                       	dc.b	smpsNoAttack, $01
000734BF E108                       	smpsAlterNote       $08
000734C1 E701                       	dc.b	smpsNoAttack, $01
000734C3 E10C                       	smpsAlterNote       $0C
000734C5 E701                       	dc.b	smpsNoAttack, $01
000734C7 E112                       	smpsAlterNote       $12
000734C9 E701                       	dc.b	smpsNoAttack, $01
000734CB E113                       	smpsAlterNote       $13
000734CD E701                       	dc.b	smpsNoAttack, $01
000734CF E10F                       	smpsAlterNote       $0F
000734D1 E701                       	dc.b	smpsNoAttack, $01
000734D3 E109                       	smpsAlterNote       $09
000734D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000734D9 E10C                       	smpsAlterNote       $0C
000734DB E701                       	dc.b	smpsNoAttack, $01
000734DD E112                       	smpsAlterNote       $12
000734DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000734E3 E10C                       	smpsAlterNote       $0C
000734E5 E701                       	dc.b	smpsNoAttack, $01
000734E7 E109                       	smpsAlterNote       $09
000734E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000734ED E10F                       	smpsAlterNote       $0F
000734EF E701                       	dc.b	smpsNoAttack, $01
000734F1 E113                       	smpsAlterNote       $13
000734F3 E701                       	dc.b	smpsNoAttack, $01
000734F5 E112                       	smpsAlterNote       $12
000734F7 E701                       	dc.b	smpsNoAttack, $01
000734F9 E10C                       	smpsAlterNote       $0C
000734FB E701                       	dc.b	smpsNoAttack, $01
000734FD E109                       	smpsAlterNote       $09
000734FF 8001                       	dc.b	nRst, $01
00073501 E10F                       	smpsAlterNote       $0F
00073503 C60D                       	dc.b	nA5, $0D
00073505 E10C                       	smpsAlterNote       $0C
00073507 E701                       	dc.b	smpsNoAttack, $01
00073509 E108                       	smpsAlterNote       $08
0007350B E701                       	dc.b	smpsNoAttack, $01
0007350D E10C                       	smpsAlterNote       $0C
0007350F E701                       	dc.b	smpsNoAttack, $01
00073511 E112                       	smpsAlterNote       $12
00073513 E701                       	dc.b	smpsNoAttack, $01
00073515 E113                       	smpsAlterNote       $13
00073517 E701                       	dc.b	smpsNoAttack, $01
00073519 E10F                       	smpsAlterNote       $0F
0007351B E701                       	dc.b	smpsNoAttack, $01
0007351D E109                       	smpsAlterNote       $09
0007351F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073523 E10C                       	smpsAlterNote       $0C
00073525 E701                       	dc.b	smpsNoAttack, $01
00073527 E112                       	smpsAlterNote       $12
00073529 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007352D E10C                       	smpsAlterNote       $0C
0007352F E701                       	dc.b	smpsNoAttack, $01
00073531 E109                       	smpsAlterNote       $09
00073533 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073537 E10F                       	smpsAlterNote       $0F
00073539 E701                       	dc.b	smpsNoAttack, $01
0007353B E113                       	smpsAlterNote       $13
0007353D E701                       	dc.b	smpsNoAttack, $01
0007353F E112                       	smpsAlterNote       $12
00073541 E701                       	dc.b	smpsNoAttack, $01
00073543 E10C                       	smpsAlterNote       $0C
00073545 E701                       	dc.b	smpsNoAttack, $01
00073547 E108                       	smpsAlterNote       $08
00073549 E701                       	dc.b	smpsNoAttack, $01
0007354B E10C                       	smpsAlterNote       $0C
0007354D E701                       	dc.b	smpsNoAttack, $01
0007354F E10F                       	smpsAlterNote       $0F
00073551 E701                       	dc.b	smpsNoAttack, $01
00073553 E113                       	smpsAlterNote       $13
00073555 E701                       	dc.b	smpsNoAttack, $01
00073557 E10F                       	smpsAlterNote       $0F
00073559 E701                       	dc.b	smpsNoAttack, $01
0007355B E109                       	smpsAlterNote       $09
0007355D E701                       	dc.b	smpsNoAttack, $01
0007355F E108                       	smpsAlterNote       $08
00073561 E701                       	dc.b	smpsNoAttack, $01
00073563 E10C                       	smpsAlterNote       $0C
00073565 E701                       	dc.b	smpsNoAttack, $01
00073567 E112                       	smpsAlterNote       $12
00073569 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007356D E10F                       	smpsAlterNote       $0F
0007356F E701                       	dc.b	smpsNoAttack, $01
00073571 E109                       	smpsAlterNote       $09
00073573 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073577 E10F                       	smpsAlterNote       $0F
00073579 E701                       	dc.b	smpsNoAttack, $01
0007357B E112                       	smpsAlterNote       $12
0007357D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073581 E10C                       	smpsAlterNote       $0C
00073583 E701                       	dc.b	smpsNoAttack, $01
00073585 E108                       	smpsAlterNote       $08
00073587 E701                       	dc.b	smpsNoAttack, $01
00073589 E10C                       	smpsAlterNote       $0C
0007358B E701                       	dc.b	smpsNoAttack, $01
0007358D E10F                       	smpsAlterNote       $0F
0007358F E701                       	dc.b	smpsNoAttack, $01
00073591 E113                       	smpsAlterNote       $13
00073593 E701                       	dc.b	smpsNoAttack, $01
00073595 E10F                       	smpsAlterNote       $0F
00073597 E701                       	dc.b	smpsNoAttack, $01
00073599 E109                       	smpsAlterNote       $09
0007359B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000735A1 E601                       	smpsAlterVol        $01
000735A3 E10F                       	smpsAlterNote       $0F
000735A5 C604                       	dc.b	nA5, $04
000735A7 E10D                       	smpsAlterNote       $0D
000735A9 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000735AF E10B                       	smpsAlterNote       $0B
000735B1 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000735B9 E10F                       	smpsAlterNote       $0F
000735BB C604 8001                  	dc.b	nA5, $04, nRst, $01
000735BF E10D                       	smpsAlterNote       $0D
000735C1 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000735C7 E10C                       	smpsAlterNote       $0C
000735C9 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000735CF E10A                       	smpsAlterNote       $0A
000735D1 C904 8001                  	dc.b	nC6, $04, nRst, $01
000735D5 E110                       	smpsAlterNote       $10
000735D7 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000735DB E10F                       	smpsAlterNote       $0F
000735DD C604                       	dc.b	nA5, $04
000735DF E10D                       	smpsAlterNote       $0D
000735E1 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000735ED E109                       	smpsAlterNote       $09
000735EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000735F3 E10F                       	smpsAlterNote       $0F
000735F5 E701                       	dc.b	smpsNoAttack, $01
000735F7 E112                       	smpsAlterNote       $12
000735F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000735FD E10C                       	smpsAlterNote       $0C
000735FF E701                       	dc.b	smpsNoAttack, $01
00073601 E108                       	smpsAlterNote       $08
00073603 E701                       	dc.b	smpsNoAttack, $01
00073605 E10C                       	smpsAlterNote       $0C
00073607 E701                       	dc.b	smpsNoAttack, $01
00073609 E10F                       	smpsAlterNote       $0F
0007360B E701                       	dc.b	smpsNoAttack, $01
0007360D E113                       	smpsAlterNote       $13
0007360F E701                       	dc.b	smpsNoAttack, $01
00073611 E10D                       	smpsAlterNote       $0D
00073613 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00073619 E10C                       	smpsAlterNote       $0C
0007361B C10D                       	dc.b	nE5, $0D
0007361D E109                       	smpsAlterNote       $09
0007361F E701                       	dc.b	smpsNoAttack, $01
00073621 E105                       	smpsAlterNote       $05
00073623 E701                       	dc.b	smpsNoAttack, $01
00073625 E106                       	smpsAlterNote       $06
00073627 E701                       	dc.b	smpsNoAttack, $01
00073629 E10C                       	smpsAlterNote       $0C
0007362B E701                       	dc.b	smpsNoAttack, $01
0007362D E110                       	smpsAlterNote       $10
0007362F E701                       	dc.b	smpsNoAttack, $01
00073631 E10C                       	smpsAlterNote       $0C
00073633 E701                       	dc.b	smpsNoAttack, $01
00073635 E109                       	smpsAlterNote       $09
00073637 E701                       	dc.b	smpsNoAttack, $01
00073639 E105                       	smpsAlterNote       $05
0007363B E701                       	dc.b	smpsNoAttack, $01
0007363D E109                       	smpsAlterNote       $09
0007363F E701                       	dc.b	smpsNoAttack, $01
00073641 E10F                       	smpsAlterNote       $0F
00073643 E701                       	dc.b	smpsNoAttack, $01
00073645 E110                       	smpsAlterNote       $10
00073647 E701                       	dc.b	smpsNoAttack, $01
00073649 E10C                       	smpsAlterNote       $0C
0007364B E701                       	dc.b	smpsNoAttack, $01
0007364D E106                       	smpsAlterNote       $06
0007364F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073653 E109                       	smpsAlterNote       $09
00073655 E701                       	dc.b	smpsNoAttack, $01
00073657 E10F                       	smpsAlterNote       $0F
00073659 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007365D E109                       	smpsAlterNote       $09
0007365F E701                       	dc.b	smpsNoAttack, $01
00073661 E106                       	smpsAlterNote       $06
00073663 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073667 E10C                       	smpsAlterNote       $0C
00073669 E701                       	dc.b	smpsNoAttack, $01
0007366B E110                       	smpsAlterNote       $10
0007366D E701                       	dc.b	smpsNoAttack, $01
0007366F E10F                       	smpsAlterNote       $0F
00073671 E701                       	dc.b	smpsNoAttack, $01
00073673 E109                       	smpsAlterNote       $09
00073675 E701                       	dc.b	smpsNoAttack, $01
00073677 E105                       	smpsAlterNote       $05
00073679 E701                       	dc.b	smpsNoAttack, $01
0007367B E109                       	smpsAlterNote       $09
0007367D E701                       	dc.b	smpsNoAttack, $01
0007367F E10C                       	smpsAlterNote       $0C
00073681 E701                       	dc.b	smpsNoAttack, $01
00073683 E110                       	smpsAlterNote       $10
00073685 E701                       	dc.b	smpsNoAttack, $01
00073687 E10C                       	smpsAlterNote       $0C
00073689 E701                       	dc.b	smpsNoAttack, $01
0007368B E106                       	smpsAlterNote       $06
0007368D E701                       	dc.b	smpsNoAttack, $01
0007368F E105                       	smpsAlterNote       $05
00073691 E701                       	dc.b	smpsNoAttack, $01
00073693 E109                       	smpsAlterNote       $09
00073695 E701                       	dc.b	smpsNoAttack, $01
00073697 E10F                       	smpsAlterNote       $0F
00073699 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007369D E10C                       	smpsAlterNote       $0C
0007369F E701                       	dc.b	smpsNoAttack, $01
000736A1 E106                       	smpsAlterNote       $06
000736A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000736A7 E10C                       	smpsAlterNote       $0C
000736A9 E701                       	dc.b	smpsNoAttack, $01
000736AB E10F                       	smpsAlterNote       $0F
000736AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000736B1 E109                       	smpsAlterNote       $09
000736B3 E701                       	dc.b	smpsNoAttack, $01
000736B5 E105                       	smpsAlterNote       $05
000736B7 E701                       	dc.b	smpsNoAttack, $01
000736B9 E106                       	smpsAlterNote       $06
000736BB E701                       	dc.b	smpsNoAttack, $01
000736BD E10C                       	smpsAlterNote       $0C
000736BF E701                       	dc.b	smpsNoAttack, $01
000736C1 E110                       	smpsAlterNote       $10
000736C3 E701                       	dc.b	smpsNoAttack, $01
000736C5 E10C                       	smpsAlterNote       $0C
000736C7 E701                       	dc.b	smpsNoAttack, $01
000736C9 E109                       	smpsAlterNote       $09
000736CB E701                       	dc.b	smpsNoAttack, $01
000736CD E105                       	smpsAlterNote       $05
000736CF E701                       	dc.b	smpsNoAttack, $01
000736D1 E109                       	smpsAlterNote       $09
000736D3 E701                       	dc.b	smpsNoAttack, $01
000736D5 E10F                       	smpsAlterNote       $0F
000736D7 E701                       	dc.b	smpsNoAttack, $01
000736D9 E110                       	smpsAlterNote       $10
000736DB E701                       	dc.b	smpsNoAttack, $01
000736DD E10C                       	smpsAlterNote       $0C
000736DF E701                       	dc.b	smpsNoAttack, $01
000736E1 E106                       	smpsAlterNote       $06
000736E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000736E7 E109                       	smpsAlterNote       $09
000736E9 E701                       	dc.b	smpsNoAttack, $01
000736EB E10F                       	smpsAlterNote       $0F
000736ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000736F1 E109                       	smpsAlterNote       $09
000736F3 E701                       	dc.b	smpsNoAttack, $01
000736F5 E106                       	smpsAlterNote       $06
000736F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000736FB E10C                       	smpsAlterNote       $0C
000736FD E701                       	dc.b	smpsNoAttack, $01
000736FF E110                       	smpsAlterNote       $10
00073701 E701                       	dc.b	smpsNoAttack, $01
00073703 E10F                       	smpsAlterNote       $0F
00073705 E701                       	dc.b	smpsNoAttack, $01
00073707 E109                       	smpsAlterNote       $09
00073709 E701                       	dc.b	smpsNoAttack, $01
0007370B E105                       	smpsAlterNote       $05
0007370D E701                       	dc.b	smpsNoAttack, $01
0007370F E109                       	smpsAlterNote       $09
00073711 E701                       	dc.b	smpsNoAttack, $01
00073713 E10C                       	smpsAlterNote       $0C
00073715 E701                       	dc.b	smpsNoAttack, $01
00073717 E110                       	smpsAlterNote       $10
00073719 E701                       	dc.b	smpsNoAttack, $01
0007371B E10C                       	smpsAlterNote       $0C
0007371D E701                       	dc.b	smpsNoAttack, $01
0007371F E106                       	smpsAlterNote       $06
00073721 E701                       	dc.b	smpsNoAttack, $01
00073723 E105                       	smpsAlterNote       $05
00073725 E701                       	dc.b	smpsNoAttack, $01
00073727 E109                       	smpsAlterNote       $09
00073729 E701                       	dc.b	smpsNoAttack, $01
0007372B E10F                       	smpsAlterNote       $0F
0007372D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073731 E109                       	smpsAlterNote       $09
00073733 E701                       	dc.b	smpsNoAttack, $01
00073735 E106                       	smpsAlterNote       $06
00073737 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007373B E10C                       	smpsAlterNote       $0C
0007373D E701                       	dc.b	smpsNoAttack, $01
0007373F E110                       	smpsAlterNote       $10
00073741 E701                       	dc.b	smpsNoAttack, $01
00073743 E10F                       	smpsAlterNote       $0F
00073745 E701                       	dc.b	smpsNoAttack, $01
00073747 E109                       	smpsAlterNote       $09
00073749 E701                       	dc.b	smpsNoAttack, $01
0007374B E105                       	smpsAlterNote       $05
0007374D E701                       	dc.b	smpsNoAttack, $01
0007374F E109                       	smpsAlterNote       $09
00073751 E701                       	dc.b	smpsNoAttack, $01
00073753 E10C                       	smpsAlterNote       $0C
00073755 E701                       	dc.b	smpsNoAttack, $01
00073757 E110                       	smpsAlterNote       $10
00073759 E701                       	dc.b	smpsNoAttack, $01
0007375B E10C                       	smpsAlterNote       $0C
0007375D E701                       	dc.b	smpsNoAttack, $01
0007375F E106                       	smpsAlterNote       $06
00073761 E701                       	dc.b	smpsNoAttack, $01
00073763 E105                       	smpsAlterNote       $05
00073765 E701                       	dc.b	smpsNoAttack, $01
00073767 E109                       	smpsAlterNote       $09
00073769 E701                       	dc.b	smpsNoAttack, $01
0007376B E10F                       	smpsAlterNote       $0F
0007376D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073771 E10C                       	smpsAlterNote       $0C
00073773 E701                       	dc.b	smpsNoAttack, $01
00073775 E106                       	smpsAlterNote       $06
00073777 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007377B E10C                       	smpsAlterNote       $0C
0007377D E701                       	dc.b	smpsNoAttack, $01
0007377F E10F                       	smpsAlterNote       $0F
00073781 E701                       	dc.b	smpsNoAttack, $01
00073783 E110                       	smpsAlterNote       $10
00073785 8001                       	dc.b	nRst, $01
00073787 E10F                       	smpsAlterNote       $0F
00073789 C604                       	dc.b	nA5, $04
0007378B E10D                       	smpsAlterNote       $0D
0007378D C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00073793 E10B                       	smpsAlterNote       $0B
00073795 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0007379B E10F                       	smpsAlterNote       $0F
0007379D C604 8001                  	dc.b	nA5, $04, nRst, $01
000737A1 E10D                       	smpsAlterNote       $0D
000737A3 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000737A9 E10C                       	smpsAlterNote       $0C
000737AB C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000737B1 E10A                       	smpsAlterNote       $0A
000737B3 C904                       	dc.b	nC6, $04
000737B5 E110                       	smpsAlterNote       $10
000737B7 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000737BB E10F                       	smpsAlterNote       $0F
000737BD C604                       	dc.b	nA5, $04
000737BF E10D                       	smpsAlterNote       $0D
000737C1 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000737CD E109                       	smpsAlterNote       $09
000737CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000737D3 E10F                       	smpsAlterNote       $0F
000737D5 E701                       	dc.b	smpsNoAttack, $01
000737D7 E112                       	smpsAlterNote       $12
000737D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000737DD E10C                       	smpsAlterNote       $0C
000737DF E701                       	dc.b	smpsNoAttack, $01
000737E1 E108                       	smpsAlterNote       $08
000737E3 E701                       	dc.b	smpsNoAttack, $01
000737E5 E109                       	smpsAlterNote       $09
000737E7 E701                       	dc.b	smpsNoAttack, $01
000737E9 E10F                       	smpsAlterNote       $0F
000737EB E701                       	dc.b	smpsNoAttack, $01
000737ED E113                       	smpsAlterNote       $13
000737EF E701                       	dc.b	smpsNoAttack, $01
000737F1 E10D                       	smpsAlterNote       $0D
000737F3 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000737F9 E10C                       	smpsAlterNote       $0C
000737FB C10D                       	dc.b	nE5, $0D
000737FD E109                       	smpsAlterNote       $09
000737FF E701                       	dc.b	smpsNoAttack, $01
00073801 E106                       	smpsAlterNote       $06
00073803 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073807 E10C                       	smpsAlterNote       $0C
00073809 E701                       	dc.b	smpsNoAttack, $01
0007380B E110                       	smpsAlterNote       $10
0007380D E701                       	dc.b	smpsNoAttack, $01
0007380F E10F                       	smpsAlterNote       $0F
00073811 E701                       	dc.b	smpsNoAttack, $01
00073813 E109                       	smpsAlterNote       $09
00073815 E701                       	dc.b	smpsNoAttack, $01
00073817 E105                       	smpsAlterNote       $05
00073819 E701                       	dc.b	smpsNoAttack, $01
0007381B E109                       	smpsAlterNote       $09
0007381D E701                       	dc.b	smpsNoAttack, $01
0007381F E10C                       	smpsAlterNote       $0C
00073821 E701                       	dc.b	smpsNoAttack, $01
00073823 E110                       	smpsAlterNote       $10
00073825 E701                       	dc.b	smpsNoAttack, $01
00073827 E10C                       	smpsAlterNote       $0C
00073829 E701                       	dc.b	smpsNoAttack, $01
0007382B E106                       	smpsAlterNote       $06
0007382D E701                       	dc.b	smpsNoAttack, $01
0007382F E105                       	smpsAlterNote       $05
00073831 E701                       	dc.b	smpsNoAttack, $01
00073833 E109                       	smpsAlterNote       $09
00073835 E701                       	dc.b	smpsNoAttack, $01
00073837 E10F                       	smpsAlterNote       $0F
00073839 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007383D E10C                       	smpsAlterNote       $0C
0007383F E701                       	dc.b	smpsNoAttack, $01
00073841 E106                       	smpsAlterNote       $06
00073843 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073847 E10C                       	smpsAlterNote       $0C
00073849 E701                       	dc.b	smpsNoAttack, $01
0007384B E10F                       	smpsAlterNote       $0F
0007384D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073851 E109                       	smpsAlterNote       $09
00073853 E701                       	dc.b	smpsNoAttack, $01
00073855 E105                       	smpsAlterNote       $05
00073857 E701                       	dc.b	smpsNoAttack, $01
00073859 E106                       	smpsAlterNote       $06
0007385B E701                       	dc.b	smpsNoAttack, $01
0007385D E10C                       	smpsAlterNote       $0C
0007385F E701                       	dc.b	smpsNoAttack, $01
00073861 E110                       	smpsAlterNote       $10
00073863 E701                       	dc.b	smpsNoAttack, $01
00073865 E10C                       	smpsAlterNote       $0C
00073867 E701                       	dc.b	smpsNoAttack, $01
00073869 E109                       	smpsAlterNote       $09
0007386B E701                       	dc.b	smpsNoAttack, $01
0007386D E105                       	smpsAlterNote       $05
0007386F E701                       	dc.b	smpsNoAttack, $01
00073871 E109                       	smpsAlterNote       $09
00073873 E701                       	dc.b	smpsNoAttack, $01
00073875 E10F                       	smpsAlterNote       $0F
00073877 E701                       	dc.b	smpsNoAttack, $01
00073879 E110                       	smpsAlterNote       $10
0007387B E701                       	dc.b	smpsNoAttack, $01
0007387D E10C                       	smpsAlterNote       $0C
0007387F E701                       	dc.b	smpsNoAttack, $01
00073881 E106                       	smpsAlterNote       $06
00073883 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073887 E109                       	smpsAlterNote       $09
00073889 E701                       	dc.b	smpsNoAttack, $01
0007388B E10F                       	smpsAlterNote       $0F
0007388D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073891 E109                       	smpsAlterNote       $09
00073893 E701                       	dc.b	smpsNoAttack, $01
00073895 E106                       	smpsAlterNote       $06
00073897 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007389B E10C                       	smpsAlterNote       $0C
0007389D E701                       	dc.b	smpsNoAttack, $01
0007389F E110                       	smpsAlterNote       $10
000738A1 E701                       	dc.b	smpsNoAttack, $01
000738A3 E10F                       	smpsAlterNote       $0F
000738A5 E701                       	dc.b	smpsNoAttack, $01
000738A7 E109                       	smpsAlterNote       $09
000738A9 E701                       	dc.b	smpsNoAttack, $01
000738AB E105                       	smpsAlterNote       $05
000738AD E701                       	dc.b	smpsNoAttack, $01
000738AF E109                       	smpsAlterNote       $09
000738B1 E701                       	dc.b	smpsNoAttack, $01
000738B3 E10F                       	smpsAlterNote       $0F
000738B5 E701                       	dc.b	smpsNoAttack, $01
000738B7 E110                       	smpsAlterNote       $10
000738B9 E701                       	dc.b	smpsNoAttack, $01
000738BB E10C                       	smpsAlterNote       $0C
000738BD E701                       	dc.b	smpsNoAttack, $01
000738BF E106                       	smpsAlterNote       $06
000738C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000738C5 E109                       	smpsAlterNote       $09
000738C7 E701                       	dc.b	smpsNoAttack, $01
000738C9 E10F                       	smpsAlterNote       $0F
000738CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000738CF E109                       	smpsAlterNote       $09
000738D1 E701                       	dc.b	smpsNoAttack, $01
000738D3 E106                       	smpsAlterNote       $06
000738D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000738D9 E10C                       	smpsAlterNote       $0C
000738DB E701                       	dc.b	smpsNoAttack, $01
000738DD E110                       	smpsAlterNote       $10
000738DF E701                       	dc.b	smpsNoAttack, $01
000738E1 E10F                       	smpsAlterNote       $0F
000738E3 E701                       	dc.b	smpsNoAttack, $01
000738E5 E109                       	smpsAlterNote       $09
000738E7 E701                       	dc.b	smpsNoAttack, $01
000738E9 E105                       	smpsAlterNote       $05
000738EB E701                       	dc.b	smpsNoAttack, $01
000738ED E109                       	smpsAlterNote       $09
000738EF E701                       	dc.b	smpsNoAttack, $01
000738F1 E10C                       	smpsAlterNote       $0C
000738F3 E701                       	dc.b	smpsNoAttack, $01
000738F5 E110                       	smpsAlterNote       $10
000738F7 E701                       	dc.b	smpsNoAttack, $01
000738F9 E10C                       	smpsAlterNote       $0C
000738FB E701                       	dc.b	smpsNoAttack, $01
000738FD E106                       	smpsAlterNote       $06
000738FF E701                       	dc.b	smpsNoAttack, $01
00073901 E105                       	smpsAlterNote       $05
00073903 E701                       	dc.b	smpsNoAttack, $01
00073905 E109                       	smpsAlterNote       $09
00073907 E701                       	dc.b	smpsNoAttack, $01
00073909 E10F                       	smpsAlterNote       $0F
0007390B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007390F E10C                       	smpsAlterNote       $0C
00073911 E701                       	dc.b	smpsNoAttack, $01
00073913 E106                       	smpsAlterNote       $06
00073915 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073919 E10C                       	smpsAlterNote       $0C
0007391B E701                       	dc.b	smpsNoAttack, $01
0007391D E10F                       	smpsAlterNote       $0F
0007391F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073923 E109                       	smpsAlterNote       $09
00073925 E701                       	dc.b	smpsNoAttack, $01
00073927 E105                       	smpsAlterNote       $05
00073929 E701                       	dc.b	smpsNoAttack, $01
0007392B E106                       	smpsAlterNote       $06
0007392D E701                       	dc.b	smpsNoAttack, $01
0007392F E10C                       	smpsAlterNote       $0C
00073931 E701                       	dc.b	smpsNoAttack, $01
00073933 E110                       	smpsAlterNote       $10
00073935 E701                       	dc.b	smpsNoAttack, $01
00073937 E10C                       	smpsAlterNote       $0C
00073939 E701                       	dc.b	smpsNoAttack, $01
0007393B E109                       	smpsAlterNote       $09
0007393D E701                       	dc.b	smpsNoAttack, $01
0007393F E105                       	smpsAlterNote       $05
00073941 E701                       	dc.b	smpsNoAttack, $01
00073943 E109                       	smpsAlterNote       $09
00073945 E701                       	dc.b	smpsNoAttack, $01
00073947 E10F                       	smpsAlterNote       $0F
00073949 E701                       	dc.b	smpsNoAttack, $01
0007394B E110                       	smpsAlterNote       $10
0007394D E701                       	dc.b	smpsNoAttack, $01
0007394F E10C                       	smpsAlterNote       $0C
00073951 E701                       	dc.b	smpsNoAttack, $01
00073953 E106                       	smpsAlterNote       $06
00073955 E701                       	dc.b	smpsNoAttack, $01
00073957 E10B                       	smpsAlterNote       $0B
00073959 BF02                       	dc.b	nD5, $02
0007395B E10C                       	smpsAlterNote       $0C
0007395D C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00073963 E109                       	smpsAlterNote       $09
00073965 E701                       	dc.b	smpsNoAttack, $01
00073967 E105                       	smpsAlterNote       $05
00073969 E701                       	dc.b	smpsNoAttack, $01
0007396B E109                       	smpsAlterNote       $09
0007396D E701                       	dc.b	smpsNoAttack, $01
0007396F E10F                       	smpsAlterNote       $0F
00073971 E701                       	dc.b	smpsNoAttack, $01
00073973 E110                       	smpsAlterNote       $10
00073975 E701                       	dc.b	smpsNoAttack, $01
00073977 E10C                       	smpsAlterNote       $0C
00073979 E701                       	dc.b	smpsNoAttack, $01
0007397B E106                       	smpsAlterNote       $06
0007397D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073981 E109                       	smpsAlterNote       $09
00073983 E701                       	dc.b	smpsNoAttack, $01
00073985 E10F                       	smpsAlterNote       $0F
00073987 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007398B E109                       	smpsAlterNote       $09
0007398D E701                       	dc.b	smpsNoAttack, $01
0007398F E106                       	smpsAlterNote       $06
00073991 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073995 E10C                       	smpsAlterNote       $0C
00073997 E701                       	dc.b	smpsNoAttack, $01
00073999 E110                       	smpsAlterNote       $10
0007399B E701                       	dc.b	smpsNoAttack, $01
0007399D E10F                       	smpsAlterNote       $0F
0007399F E701                       	dc.b	smpsNoAttack, $01
000739A1 E109                       	smpsAlterNote       $09
000739A3 E701                       	dc.b	smpsNoAttack, $01
000739A5 E105                       	smpsAlterNote       $05
000739A7 E701                       	dc.b	smpsNoAttack, $01
000739A9 E109                       	smpsAlterNote       $09
000739AB E701                       	dc.b	smpsNoAttack, $01
000739AD E10C                       	smpsAlterNote       $0C
000739AF E701                       	dc.b	smpsNoAttack, $01
000739B1 E110                       	smpsAlterNote       $10
000739B3 E701                       	dc.b	smpsNoAttack, $01
000739B5 E10C                       	smpsAlterNote       $0C
000739B7 E701                       	dc.b	smpsNoAttack, $01
000739B9 E106                       	smpsAlterNote       $06
000739BB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000739BF E10D                       	smpsAlterNote       $0D
000739C1 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000739C9 E10C                       	smpsAlterNote       $0C
000739CB C10D                       	dc.b	nE5, $0D
000739CD E106                       	smpsAlterNote       $06
000739CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000739D3 E109                       	smpsAlterNote       $09
000739D5 E701                       	dc.b	smpsNoAttack, $01
000739D7 E10F                       	smpsAlterNote       $0F
000739D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000739DD E109                       	smpsAlterNote       $09
000739DF E701                       	dc.b	smpsNoAttack, $01
000739E1 E106                       	smpsAlterNote       $06
000739E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000739E7 E10C                       	smpsAlterNote       $0C
000739E9 E701                       	dc.b	smpsNoAttack, $01
000739EB E110                       	smpsAlterNote       $10
000739ED E701                       	dc.b	smpsNoAttack, $01
000739EF E10F                       	smpsAlterNote       $0F
000739F1 E701                       	dc.b	smpsNoAttack, $01
000739F3 E109                       	smpsAlterNote       $09
000739F5 E701                       	dc.b	smpsNoAttack, $01
000739F7 E105                       	smpsAlterNote       $05
000739F9 E701                       	dc.b	smpsNoAttack, $01
000739FB E106                       	smpsAlterNote       $06
000739FD 800F                       	dc.b	nRst, $0F
00073A01 E6FF                       	smpsAlterVol        $FF
00073A03 E10F                       	smpsAlterNote       $0F
00073A05 BA01                       	dc.b	nA4, $01
00073A07 E110                       	smpsAlterNote       $10
00073A09 BB02                       	dc.b	nBb4, $02
00073A0B E10F                       	smpsAlterNote       $0F
00073A0D BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00073A13 E10B                       	smpsAlterNote       $0B
00073A15 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00073A19 E10C                       	smpsAlterNote       $0C
00073A1B C103                       	dc.b	nE5, $03
00073A1D E10D                       	smpsAlterNote       $0D
00073A1F C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00073A29 E10B                       	smpsAlterNote       $0B
00073A2B BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00073A2F E104                       	smpsAlterNote       $04
00073A31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073A35 E10A                       	smpsAlterNote       $0A
00073A37 E701                       	dc.b	smpsNoAttack, $01
00073A39 E10D                       	smpsAlterNote       $0D
00073A3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073A3F E107                       	smpsAlterNote       $07
00073A41 E701                       	dc.b	smpsNoAttack, $01
00073A43 E104                       	smpsAlterNote       $04
00073A45 8001                       	dc.b	nRst, $01
00073A47 E110                       	smpsAlterNote       $10
00073A49 C703                       	dc.b	nBb5, $03
00073A4B E10F                       	smpsAlterNote       $0F
00073A4D C603 8001                  	dc.b	nA5, $03, nRst, $01
00073A51 E10D                       	smpsAlterNote       $0D
00073A53 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00073A57 E10C                       	smpsAlterNote       $0C
00073A59 E701                       	dc.b	smpsNoAttack, $01
00073A5B E108                       	smpsAlterNote       $08
00073A5D E701                       	dc.b	smpsNoAttack, $01
00073A5F E109                       	smpsAlterNote       $09
00073A61 E701                       	dc.b	smpsNoAttack, $01
00073A63 E10F                       	smpsAlterNote       $0F
00073A65 E701                       	dc.b	smpsNoAttack, $01
00073A67 E113                       	smpsAlterNote       $13
00073A69 E701                       	dc.b	smpsNoAttack, $01
00073A6B E10F                       	smpsAlterNote       $0F
00073A6D E701                       	dc.b	smpsNoAttack, $01
00073A6F E10C                       	smpsAlterNote       $0C
00073A71 E701                       	dc.b	smpsNoAttack, $01
00073A73 E108                       	smpsAlterNote       $08
00073A75 E701                       	dc.b	smpsNoAttack, $01
00073A77 E10C                       	smpsAlterNote       $0C
00073A79 E701                       	dc.b	smpsNoAttack, $01
00073A7B E112                       	smpsAlterNote       $12
00073A7D E701                       	dc.b	smpsNoAttack, $01
00073A7F E113                       	smpsAlterNote       $13
00073A81 E701                       	dc.b	smpsNoAttack, $01
00073A83 E10F                       	smpsAlterNote       $0F
00073A85 E701                       	dc.b	smpsNoAttack, $01
00073A87 E109                       	smpsAlterNote       $09
00073A89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073A8D E10C                       	smpsAlterNote       $0C
00073A8F E701                       	dc.b	smpsNoAttack, $01
00073A91 E112                       	smpsAlterNote       $12
00073A93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073A97 E10C                       	smpsAlterNote       $0C
00073A99 E701                       	dc.b	smpsNoAttack, $01
00073A9B E109                       	smpsAlterNote       $09
00073A9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073AA1 E10F                       	smpsAlterNote       $0F
00073AA3 E701                       	dc.b	smpsNoAttack, $01
00073AA5 E113                       	smpsAlterNote       $13
00073AA7 E701                       	dc.b	smpsNoAttack, $01
00073AA9 E112                       	smpsAlterNote       $12
00073AAB E701                       	dc.b	smpsNoAttack, $01
00073AAD E10C                       	smpsAlterNote       $0C
00073AAF E701                       	dc.b	smpsNoAttack, $01
00073AB1 E108                       	smpsAlterNote       $08
00073AB3 E701                       	dc.b	smpsNoAttack, $01
00073AB5 E10C                       	smpsAlterNote       $0C
00073AB7 E701                       	dc.b	smpsNoAttack, $01
00073AB9 E10F                       	smpsAlterNote       $0F
00073ABB E701                       	dc.b	smpsNoAttack, $01
00073ABD E113                       	smpsAlterNote       $13
00073ABF E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00073AC3 E10B                       	smpsAlterNote       $0B
00073AC5 BF03                       	dc.b	nD5, $03
00073AC7 E10C                       	smpsAlterNote       $0C
00073AC9 C103 8001                  	dc.b	nE5, $03, nRst, $01
00073ACD E10D                       	smpsAlterNote       $0D
00073ACF C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00073AD9 E10B                       	smpsAlterNote       $0B
00073ADB BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00073AE7 E110                       	smpsAlterNote       $10
00073AE9 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00073AED E10F                       	smpsAlterNote       $0F
00073AEF C604                       	dc.b	nA5, $04
00073AF1 E10D                       	smpsAlterNote       $0D
00073AF3 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00073AF9 E109                       	smpsAlterNote       $09
00073AFB E701                       	dc.b	smpsNoAttack, $01
00073AFD E108                       	smpsAlterNote       $08
00073AFF E701                       	dc.b	smpsNoAttack, $01
00073B01 E10C                       	smpsAlterNote       $0C
00073B03 E701                       	dc.b	smpsNoAttack, $01
00073B05 E112                       	smpsAlterNote       $12
00073B07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073B0B E10F                       	smpsAlterNote       $0F
00073B0D E701                       	dc.b	smpsNoAttack, $01
00073B0F E109                       	smpsAlterNote       $09
00073B11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073B15 E10F                       	smpsAlterNote       $0F
00073B17 E701                       	dc.b	smpsNoAttack, $01
00073B19 E112                       	smpsAlterNote       $12
00073B1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073B1F E10C                       	smpsAlterNote       $0C
00073B21 E701                       	dc.b	smpsNoAttack, $01
00073B23 E108                       	smpsAlterNote       $08
00073B25 E701                       	dc.b	smpsNoAttack, $01
00073B27 E109                       	smpsAlterNote       $09
00073B29 E701                       	dc.b	smpsNoAttack, $01
00073B2B E10F                       	smpsAlterNote       $0F
00073B2D E701                       	dc.b	smpsNoAttack, $01
00073B2F E113                       	smpsAlterNote       $13
00073B31 E701                       	dc.b	smpsNoAttack, $01
00073B33 E10F                       	smpsAlterNote       $0F
00073B35 E701                       	dc.b	smpsNoAttack, $01
00073B37 E10C                       	smpsAlterNote       $0C
00073B39 E701                       	dc.b	smpsNoAttack, $01
00073B3B E108                       	smpsAlterNote       $08
00073B3D E701                       	dc.b	smpsNoAttack, $01
00073B3F E10C                       	smpsAlterNote       $0C
00073B41 E701                       	dc.b	smpsNoAttack, $01
00073B43 E112                       	smpsAlterNote       $12
00073B45 E701                       	dc.b	smpsNoAttack, $01
00073B47 E113                       	smpsAlterNote       $13
00073B49 E701                       	dc.b	smpsNoAttack, $01
00073B4B E10F                       	smpsAlterNote       $0F
00073B4D E701                       	dc.b	smpsNoAttack, $01
00073B4F E109                       	smpsAlterNote       $09
00073B51 E701                       	dc.b	smpsNoAttack, $01
00073B53 E10D                       	smpsAlterNote       $0D
00073B55 C402                       	dc.b	nG5, $02
00073B57 E10F                       	smpsAlterNote       $0F
00073B59 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00073B63 E10D                       	smpsAlterNote       $0D
00073B65 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00073B6B E10B                       	smpsAlterNote       $0B
00073B6D BF0D                       	dc.b	nD5, $0D
00073B6F E108                       	smpsAlterNote       $08
00073B71 E701                       	dc.b	smpsNoAttack, $01
00073B73 E104                       	smpsAlterNote       $04
00073B75 E701                       	dc.b	smpsNoAttack, $01
00073B77 E105                       	smpsAlterNote       $05
00073B79 E701                       	dc.b	smpsNoAttack, $01
00073B7B E10B                       	smpsAlterNote       $0B
00073B7D E701                       	dc.b	smpsNoAttack, $01
00073B7F E10F                       	smpsAlterNote       $0F
00073B81 E701                       	dc.b	smpsNoAttack, $01
00073B83 E10B                       	smpsAlterNote       $0B
00073B85 E701                       	dc.b	smpsNoAttack, $01
00073B87 E108                       	smpsAlterNote       $08
00073B89 E701                       	dc.b	smpsNoAttack, $01
00073B8B E104                       	smpsAlterNote       $04
00073B8D E701                       	dc.b	smpsNoAttack, $01
00073B8F E108                       	smpsAlterNote       $08
00073B91 E701                       	dc.b	smpsNoAttack, $01
00073B93 E10E                       	smpsAlterNote       $0E
00073B95 E701                       	dc.b	smpsNoAttack, $01
00073B97 E10F                       	smpsAlterNote       $0F
00073B99 E701                       	dc.b	smpsNoAttack, $01
00073B9B E10C                       	smpsAlterNote       $0C
00073B9D C101                       	dc.b	nE5, $01
00073B9F E10D                       	smpsAlterNote       $0D
00073BA1 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00073BA9 E10F                       	smpsAlterNote       $0F
00073BAB C607                       	dc.b	nA5, $07
00073BAD E10C                       	smpsAlterNote       $0C
00073BAF CD07                       	dc.b	nE6, $07
00073BB1 E10D                       	smpsAlterNote       $0D
00073BB3 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00073BB7 E10C                       	smpsAlterNote       $0C
00073BB9 CD03                       	dc.b	nE6, $03
00073BBB E10A                       	smpsAlterNote       $0A
00073BBD C903 8001                  	dc.b	nC6, $03, nRst, $01
00073BC1 E10D                       	smpsAlterNote       $0D
00073BC3 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00073BC9 E10A                       	smpsAlterNote       $0A
00073BCB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073BCF E110                       	smpsAlterNote       $10
00073BD1 E701                       	dc.b	smpsNoAttack, $01
00073BD3 E114                       	smpsAlterNote       $14
00073BD5 E701                       	dc.b	smpsNoAttack, $01
00073BD7 E113                       	smpsAlterNote       $13
00073BD9 E701                       	dc.b	smpsNoAttack, $01
00073BDB E10D                       	smpsAlterNote       $0D
00073BDD E701                       	dc.b	smpsNoAttack, $01
00073BDF E109                       	smpsAlterNote       $09
00073BE1 E701                       	dc.b	smpsNoAttack, $01
00073BE3 E10D                       	smpsAlterNote       $0D
00073BE5 E701                       	dc.b	smpsNoAttack, $01
00073BE7 E110                       	smpsAlterNote       $10
00073BE9 E701                       	dc.b	smpsNoAttack, $01
00073BEB E114                       	smpsAlterNote       $14
00073BED E701                       	dc.b	smpsNoAttack, $01
00073BEF E10F                       	smpsAlterNote       $0F
00073BF1 C607                       	dc.b	nA5, $07
00073BF3 E10D                       	smpsAlterNote       $0D
00073BF5 C40D                       	dc.b	nG5, $0D
00073BF7 E10A                       	smpsAlterNote       $0A
00073BF9 E701                       	dc.b	smpsNoAttack, $01
00073BFB E106                       	smpsAlterNote       $06
00073BFD E701                       	dc.b	smpsNoAttack, $01
00073BFF E10A                       	smpsAlterNote       $0A
00073C01 E701                       	dc.b	smpsNoAttack, $01
00073C03 E10D                       	smpsAlterNote       $0D
00073C05 E701                       	dc.b	smpsNoAttack, $01
00073C07 E111                       	smpsAlterNote       $11
00073C09 E701                       	dc.b	smpsNoAttack, $01
00073C0B E10D                       	smpsAlterNote       $0D
00073C0D E701                       	dc.b	smpsNoAttack, $01
00073C0F E107                       	smpsAlterNote       $07
00073C11 E701                       	dc.b	smpsNoAttack, $01
00073C13 E106                       	smpsAlterNote       $06
00073C15 E701                       	dc.b	smpsNoAttack, $01
00073C17 E10A                       	smpsAlterNote       $0A
00073C19 E701                       	dc.b	smpsNoAttack, $01
00073C1B E110                       	smpsAlterNote       $10
00073C1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073C21 E10D                       	smpsAlterNote       $0D
00073C23 E701                       	dc.b	smpsNoAttack, $01
00073C25 E107                       	smpsAlterNote       $07
00073C27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073C2B E10F                       	smpsAlterNote       $0F
00073C2D C60E                       	dc.b	nA5, $0E
00073C2F E109                       	smpsAlterNote       $09
00073C31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073C35 E10F                       	smpsAlterNote       $0F
00073C37 E701                       	dc.b	smpsNoAttack, $01
00073C39 E112                       	smpsAlterNote       $12
00073C3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073C3F E10C                       	smpsAlterNote       $0C
00073C41 E701                       	dc.b	smpsNoAttack, $01
00073C43 E108                       	smpsAlterNote       $08
00073C45 E701                       	dc.b	smpsNoAttack, $01
00073C47 E109                       	smpsAlterNote       $09
00073C49 E701                       	dc.b	smpsNoAttack, $01
00073C4B E10F                       	smpsAlterNote       $0F
00073C4D E701                       	dc.b	smpsNoAttack, $01
00073C4F E113                       	smpsAlterNote       $13
00073C51 E701                       	dc.b	smpsNoAttack, $01
00073C53 E10F                       	smpsAlterNote       $0F
00073C55 E701                       	dc.b	smpsNoAttack, $01
00073C57 E10C                       	smpsAlterNote       $0C
00073C59 E701                       	dc.b	smpsNoAttack, $01
00073C5B E108                       	smpsAlterNote       $08
00073C5D E701                       	dc.b	smpsNoAttack, $01
00073C5F E109                       	smpsAlterNote       $09
00073C61 8001                       	dc.b	nRst, $01
00073C63 E110                       	smpsAlterNote       $10
00073C65 C70D                       	dc.b	nBb5, $0D
00073C67 E10D                       	smpsAlterNote       $0D
00073C69 E701                       	dc.b	smpsNoAttack, $01
00073C6B E109                       	smpsAlterNote       $09
00073C6D E701                       	dc.b	smpsNoAttack, $01
00073C6F E10D                       	smpsAlterNote       $0D
00073C71 E701                       	dc.b	smpsNoAttack, $01
00073C73 E113                       	smpsAlterNote       $13
00073C75 E701                       	dc.b	smpsNoAttack, $01
00073C77 E114                       	smpsAlterNote       $14
00073C79 E701                       	dc.b	smpsNoAttack, $01
00073C7B E110                       	smpsAlterNote       $10
00073C7D E701                       	dc.b	smpsNoAttack, $01
00073C7F E10A                       	smpsAlterNote       $0A
00073C81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073C85 E10D                       	smpsAlterNote       $0D
00073C87 E701                       	dc.b	smpsNoAttack, $01
00073C89 E113                       	smpsAlterNote       $13
00073C8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073C8F E10D                       	smpsAlterNote       $0D
00073C91 E701                       	dc.b	smpsNoAttack, $01
00073C93 E10A                       	smpsAlterNote       $0A
00073C95 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00073C9F E10B                       	smpsAlterNote       $0B
00073CA1 8001                       	dc.b	nRst, $01
00073CA3 E10C                       	smpsAlterNote       $0C
00073CA5 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00073CA9 E10B                       	smpsAlterNote       $0B
00073CAB CB0D                       	dc.b	nD6, $0D
00073CAD E105                       	smpsAlterNote       $05
00073CAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073CB3 E108                       	smpsAlterNote       $08
00073CB5 E701                       	dc.b	smpsNoAttack, $01
00073CB7 E10E                       	smpsAlterNote       $0E
00073CB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073CBD E108                       	smpsAlterNote       $08
00073CBF E701                       	dc.b	smpsNoAttack, $01
00073CC1 E105                       	smpsAlterNote       $05
00073CC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073CC7 E10B                       	smpsAlterNote       $0B
00073CC9 E701                       	dc.b	smpsNoAttack, $01
00073CCB E10F                       	smpsAlterNote       $0F
00073CCD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00073CD1 E10C                       	smpsAlterNote       $0C
00073CD3 CC0D                       	dc.b	nEb6, $0D
00073CD5 E106                       	smpsAlterNote       $06
00073CD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073CDB E109                       	smpsAlterNote       $09
00073CDD E701                       	dc.b	smpsNoAttack, $01
00073CDF E10C                       	smpsAlterNote       $0C
00073CE1 8001                       	dc.b	nRst, $01
00073CE3 E10A                       	smpsAlterNote       $0A
00073CE5 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00073CF1 CB0E                       	dc.b	nD6, $0E
00073CF3 E105                       	smpsAlterNote       $05
00073CF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073CF9 E10B                       	smpsAlterNote       $0B
00073CFB E701                       	dc.b	smpsNoAttack, $01
00073CFD E10E                       	smpsAlterNote       $0E
00073CFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073D03 E108                       	smpsAlterNote       $08
00073D05 E701                       	dc.b	smpsNoAttack, $01
00073D07 E104                       	smpsAlterNote       $04
00073D09 E701                       	dc.b	smpsNoAttack, $01
00073D0B E105                       	smpsAlterNote       $05
00073D0D E701                       	dc.b	smpsNoAttack, $01
00073D0F E10B                       	smpsAlterNote       $0B
00073D11 E701                       	dc.b	smpsNoAttack, $01
00073D13 E10F                       	smpsAlterNote       $0F
00073D15 E701                       	dc.b	smpsNoAttack, $01
00073D17 E10D                       	smpsAlterNote       $0D
00073D19 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00073D1D E10C                       	smpsAlterNote       $0C
00073D1F CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00073D23 E10A                       	smpsAlterNote       $0A
00073D25 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00073D31 CB0D                       	dc.b	nD6, $0D
00073D33 E108                       	smpsAlterNote       $08
00073D35 E701                       	dc.b	smpsNoAttack, $01
00073D37 E104                       	smpsAlterNote       $04
00073D39 E701                       	dc.b	smpsNoAttack, $01
00073D3B E105                       	smpsAlterNote       $05
00073D3D E701                       	dc.b	smpsNoAttack, $01
00073D3F E10B                       	smpsAlterNote       $0B
00073D41 E701                       	dc.b	smpsNoAttack, $01
00073D43 E10F                       	smpsAlterNote       $0F
00073D45 E701                       	dc.b	smpsNoAttack, $01
00073D47 E10B                       	smpsAlterNote       $0B
00073D49 E701                       	dc.b	smpsNoAttack, $01
00073D4B E108                       	smpsAlterNote       $08
00073D4D E701                       	dc.b	smpsNoAttack, $01
00073D4F E104                       	smpsAlterNote       $04
00073D51 E701                       	dc.b	smpsNoAttack, $01
00073D53 E108                       	smpsAlterNote       $08
00073D55 E701                       	dc.b	smpsNoAttack, $01
00073D57 E10E                       	smpsAlterNote       $0E
00073D59 E701                       	dc.b	smpsNoAttack, $01
00073D5B E10F                       	smpsAlterNote       $0F
00073D5D E701                       	dc.b	smpsNoAttack, $01
00073D5F E10C                       	smpsAlterNote       $0C
00073D61 CC0D                       	dc.b	nEb6, $0D
00073D63 E109                       	smpsAlterNote       $09
00073D65 E701                       	dc.b	smpsNoAttack, $01
00073D67 E105                       	smpsAlterNote       $05
00073D69 E701                       	dc.b	smpsNoAttack, $01
00073D6B E106                       	smpsAlterNote       $06
00073D6D E701                       	dc.b	smpsNoAttack, $01
00073D6F E10C                       	smpsAlterNote       $0C
00073D71 E701                       	dc.b	smpsNoAttack, $01
00073D73 E10A                       	smpsAlterNote       $0A
00073D75 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00073D81 CB0D                       	dc.b	nD6, $0D
00073D83 E108                       	smpsAlterNote       $08
00073D85 E701                       	dc.b	smpsNoAttack, $01
00073D87 E104                       	smpsAlterNote       $04
00073D89 E701                       	dc.b	smpsNoAttack, $01
00073D8B E108                       	smpsAlterNote       $08
00073D8D E701                       	dc.b	smpsNoAttack, $01
00073D8F E10B                       	smpsAlterNote       $0B
00073D91 E701                       	dc.b	smpsNoAttack, $01
00073D93 E10F                       	smpsAlterNote       $0F
00073D95 E701                       	dc.b	smpsNoAttack, $01
00073D97 E10B                       	smpsAlterNote       $0B
00073D99 E701                       	dc.b	smpsNoAttack, $01
00073D9B E105                       	smpsAlterNote       $05
00073D9D E701                       	dc.b	smpsNoAttack, $01
00073D9F E104                       	smpsAlterNote       $04
00073DA1 E701                       	dc.b	smpsNoAttack, $01
00073DA3 E108                       	smpsAlterNote       $08
00073DA5 E701                       	dc.b	smpsNoAttack, $01
00073DA7 E10E                       	smpsAlterNote       $0E
00073DA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073DAD E10B                       	smpsAlterNote       $0B
00073DAF E701                       	dc.b	smpsNoAttack, $01
00073DB1 E105                       	smpsAlterNote       $05
00073DB3 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00073DBB 03                         	dc.b	$03
00073DBC E601                       	smpsAlterVol        $01
00073DBE F6F1 D1                    	smpsJump            music84_Jump01
00073DC1                            
00073DC1                            ; FM5 Data
00073DC1                            music84_FM5:
00073DC3 E080                       	smpsPan             panLeft, $00
00073DC5 8003                       	dc.b	nRst, $03
00073DC7 E10D                       	smpsAlterNote       $0D
00073DC9 C203 8008                  	dc.b	nF5, $03, nRst, $08
00073DCD E10C                       	smpsAlterNote       $0C
00073DCF C103 800A                  	dc.b	nE5, $03, nRst, $0A
00073DD3 E10F                       	smpsAlterNote       $0F
00073DD5 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00073DDB E6FE                       	smpsAlterVol        $FE
00073DDD C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00073DE3 E10D                       	smpsAlterNote       $0D
00073DE5 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00073DEB E10C                       	smpsAlterNote       $0C
00073DED C102 8001                  	dc.b	nE5, $02, nRst, $01
00073DF1 E10A                       	smpsAlterNote       $0A
00073DF3 BD01 8001                  	dc.b	nC5, $01, nRst, $01
00073DF9 03                         	dc.b	$03
00073DFA                            
00073DFA                            music84_Jump00:
00073DFA 8004                       	dc.b	nRst, $04
00073DFC E602                       	smpsAlterVol        $02
00073DFE E10D                       	smpsAlterNote       $0D
00073E00 B60D                       	dc.b	nF4, $0D
00073E02 E107                       	smpsAlterNote       $07
00073E04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073E08 E10A                       	smpsAlterNote       $0A
00073E0A E701                       	dc.b	smpsNoAttack, $01
00073E0C E110                       	smpsAlterNote       $10
00073E0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073E12 E10A                       	smpsAlterNote       $0A
00073E14 E701                       	dc.b	smpsNoAttack, $01
00073E16 E107                       	smpsAlterNote       $07
00073E18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073E1C E10D                       	smpsAlterNote       $0D
00073E1E E701                       	dc.b	smpsNoAttack, $01
00073E20 E111                       	smpsAlterNote       $11
00073E22 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00073E26 E10D                       	smpsAlterNote       $0D
00073E28 B80D                       	dc.b	nG4, $0D
00073E2A E107                       	smpsAlterNote       $07
00073E2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073E30 E10A                       	smpsAlterNote       $0A
00073E32 E701                       	dc.b	smpsNoAttack, $01
00073E34 E110                       	smpsAlterNote       $10
00073E36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073E3A E10A                       	smpsAlterNote       $0A
00073E3C E701                       	dc.b	smpsNoAttack, $01
00073E3E E107                       	smpsAlterNote       $07
00073E40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073E44 E10D                       	smpsAlterNote       $0D
00073E46 E701                       	dc.b	smpsNoAttack, $01
00073E48 E111                       	smpsAlterNote       $11
00073E4A E701                       	dc.b	smpsNoAttack, $01
00073E4C E110                       	smpsAlterNote       $10
00073E4E E701                       	dc.b	smpsNoAttack, $01
00073E50 E10A                       	smpsAlterNote       $0A
00073E52 E701                       	dc.b	smpsNoAttack, $01
00073E54 E106                       	smpsAlterNote       $06
00073E56 E701                       	dc.b	smpsNoAttack, $01
00073E58 E10A                       	smpsAlterNote       $0A
00073E5A E701                       	dc.b	smpsNoAttack, $01
00073E5C E10D                       	smpsAlterNote       $0D
00073E5E E701                       	dc.b	smpsNoAttack, $01
00073E60 E111                       	smpsAlterNote       $11
00073E62 E701                       	dc.b	smpsNoAttack, $01
00073E64 E10D                       	smpsAlterNote       $0D
00073E66 E701                       	dc.b	smpsNoAttack, $01
00073E68 E10F                       	smpsAlterNote       $0F
00073E6A BA0E                       	dc.b	nA4, $0E
00073E6C E109                       	smpsAlterNote       $09
00073E6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073E72 E10F                       	smpsAlterNote       $0F
00073E74 E701                       	dc.b	smpsNoAttack, $01
00073E76 E112                       	smpsAlterNote       $12
00073E78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073E7C E10C                       	smpsAlterNote       $0C
00073E7E E701                       	dc.b	smpsNoAttack, $01
00073E80 E108                       	smpsAlterNote       $08
00073E82 E701                       	dc.b	smpsNoAttack, $01
00073E84 E109                       	smpsAlterNote       $09
00073E86 E701                       	dc.b	smpsNoAttack, $01
00073E88 E10F                       	smpsAlterNote       $0F
00073E8A E701                       	dc.b	smpsNoAttack, $01
00073E8C E113                       	smpsAlterNote       $13
00073E8E E701                       	dc.b	smpsNoAttack, $01
00073E90 E10F                       	smpsAlterNote       $0F
00073E92 E701                       	dc.b	smpsNoAttack, $01
00073E94 E109                       	smpsAlterNote       $09
00073E96 E701                       	dc.b	smpsNoAttack, $01
00073E98 E108                       	smpsAlterNote       $08
00073E9A E701                       	dc.b	smpsNoAttack, $01
00073E9C E10C                       	smpsAlterNote       $0C
00073E9E E701                       	dc.b	smpsNoAttack, $01
00073EA0 E112                       	smpsAlterNote       $12
00073EA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073EA6 E10F                       	smpsAlterNote       $0F
00073EA8 E701                       	dc.b	smpsNoAttack, $01
00073EAA E109                       	smpsAlterNote       $09
00073EAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073EB0 E10F                       	smpsAlterNote       $0F
00073EB2 E701                       	dc.b	smpsNoAttack, $01
00073EB4 E112                       	smpsAlterNote       $12
00073EB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073EBA E10C                       	smpsAlterNote       $0C
00073EBC E701                       	dc.b	smpsNoAttack, $01
00073EBE E108                       	smpsAlterNote       $08
00073EC0 E701                       	dc.b	smpsNoAttack, $01
00073EC2 E109                       	smpsAlterNote       $09
00073EC4 E701                       	dc.b	smpsNoAttack, $01
00073EC6 E10F                       	smpsAlterNote       $0F
00073EC8 E701                       	dc.b	smpsNoAttack, $01
00073ECA E113                       	smpsAlterNote       $13
00073ECC E701                       	dc.b	smpsNoAttack, $01
00073ECE E10F                       	smpsAlterNote       $0F
00073ED0 E701                       	dc.b	smpsNoAttack, $01
00073ED2 E10C                       	smpsAlterNote       $0C
00073ED4 E701                       	dc.b	smpsNoAttack, $01
00073ED6 E108                       	smpsAlterNote       $08
00073ED8 E701                       	dc.b	smpsNoAttack, $01
00073EDA E109                       	smpsAlterNote       $09
00073EDC 8001                       	dc.b	nRst, $01
00073EDE E10C                       	smpsAlterNote       $0C
00073EE0 B50A                       	dc.b	nE4, $0A
00073EE2 E10D                       	smpsAlterNote       $0D
00073EE4 B60D                       	dc.b	nF4, $0D
00073EE6 E10A                       	smpsAlterNote       $0A
00073EE8 E701                       	dc.b	smpsNoAttack, $01
00073EEA E106                       	smpsAlterNote       $06
00073EEC E701                       	dc.b	smpsNoAttack, $01
00073EEE E107                       	smpsAlterNote       $07
00073EF0 E701                       	dc.b	smpsNoAttack, $01
00073EF2 E10D                       	smpsAlterNote       $0D
00073EF4 E701                       	dc.b	smpsNoAttack, $01
00073EF6 E111                       	smpsAlterNote       $11
00073EF8 E701                       	dc.b	smpsNoAttack, $01
00073EFA E10D                       	smpsAlterNote       $0D
00073EFC E701                       	dc.b	smpsNoAttack, $01
00073EFE E10A                       	smpsAlterNote       $0A
00073F00 E701                       	dc.b	smpsNoAttack, $01
00073F02 E106                       	smpsAlterNote       $06
00073F04 E701                       	dc.b	smpsNoAttack, $01
00073F06 E10A                       	smpsAlterNote       $0A
00073F08 E701                       	dc.b	smpsNoAttack, $01
00073F0A E110                       	smpsAlterNote       $10
00073F0C E701                       	dc.b	smpsNoAttack, $01
00073F0E E111                       	smpsAlterNote       $11
00073F10 E701                       	dc.b	smpsNoAttack, $01
00073F12 E10D                       	smpsAlterNote       $0D
00073F14 B80D                       	dc.b	nG4, $0D
00073F16 E10A                       	smpsAlterNote       $0A
00073F18 E701                       	dc.b	smpsNoAttack, $01
00073F1A E106                       	smpsAlterNote       $06
00073F1C E701                       	dc.b	smpsNoAttack, $01
00073F1E E107                       	smpsAlterNote       $07
00073F20 E701                       	dc.b	smpsNoAttack, $01
00073F22 E10D                       	smpsAlterNote       $0D
00073F24 E701                       	dc.b	smpsNoAttack, $01
00073F26 E111                       	smpsAlterNote       $11
00073F28 E701                       	dc.b	smpsNoAttack, $01
00073F2A E10D                       	smpsAlterNote       $0D
00073F2C E701                       	dc.b	smpsNoAttack, $01
00073F2E E10A                       	smpsAlterNote       $0A
00073F30 E701                       	dc.b	smpsNoAttack, $01
00073F32 E106                       	smpsAlterNote       $06
00073F34 E701                       	dc.b	smpsNoAttack, $01
00073F36 E10A                       	smpsAlterNote       $0A
00073F38 E701                       	dc.b	smpsNoAttack, $01
00073F3A E110                       	smpsAlterNote       $10
00073F3C E701                       	dc.b	smpsNoAttack, $01
00073F3E E111                       	smpsAlterNote       $11
00073F40 E701                       	dc.b	smpsNoAttack, $01
00073F42 E10D                       	smpsAlterNote       $0D
00073F44 E701                       	dc.b	smpsNoAttack, $01
00073F46 E107                       	smpsAlterNote       $07
00073F48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073F4C E10A                       	smpsAlterNote       $0A
00073F4E E701                       	dc.b	smpsNoAttack, $01
00073F50 E110                       	smpsAlterNote       $10
00073F52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073F56 E10D                       	smpsAlterNote       $0D
00073F58 8001                       	dc.b	nRst, $01
00073F5A E10F                       	smpsAlterNote       $0F
00073F5C BA0D                       	dc.b	nA4, $0D
00073F5E E10C                       	smpsAlterNote       $0C
00073F60 E701                       	dc.b	smpsNoAttack, $01
00073F62 E108                       	smpsAlterNote       $08
00073F64 E701                       	dc.b	smpsNoAttack, $01
00073F66 E10C                       	smpsAlterNote       $0C
00073F68 E701                       	dc.b	smpsNoAttack, $01
00073F6A E112                       	smpsAlterNote       $12
00073F6C E701                       	dc.b	smpsNoAttack, $01
00073F6E E113                       	smpsAlterNote       $13
00073F70 E701                       	dc.b	smpsNoAttack, $01
00073F72 E10F                       	smpsAlterNote       $0F
00073F74 E701                       	dc.b	smpsNoAttack, $01
00073F76 E109                       	smpsAlterNote       $09
00073F78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073F7C E10C                       	smpsAlterNote       $0C
00073F7E E701                       	dc.b	smpsNoAttack, $01
00073F80 E112                       	smpsAlterNote       $12
00073F82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073F86 E10C                       	smpsAlterNote       $0C
00073F88 E701                       	dc.b	smpsNoAttack, $01
00073F8A E109                       	smpsAlterNote       $09
00073F8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073F90 E10F                       	smpsAlterNote       $0F
00073F92 E701                       	dc.b	smpsNoAttack, $01
00073F94 E113                       	smpsAlterNote       $13
00073F96 E701                       	dc.b	smpsNoAttack, $01
00073F98 E112                       	smpsAlterNote       $12
00073F9A E701                       	dc.b	smpsNoAttack, $01
00073F9C E10C                       	smpsAlterNote       $0C
00073F9E E701                       	dc.b	smpsNoAttack, $01
00073FA0 E108                       	smpsAlterNote       $08
00073FA2 E701                       	dc.b	smpsNoAttack, $01
00073FA4 E10C                       	smpsAlterNote       $0C
00073FA6 E701                       	dc.b	smpsNoAttack, $01
00073FA8 E10F                       	smpsAlterNote       $0F
00073FAA E701                       	dc.b	smpsNoAttack, $01
00073FAC E113                       	smpsAlterNote       $13
00073FAE E701                       	dc.b	smpsNoAttack, $01
00073FB0 E10F                       	smpsAlterNote       $0F
00073FB2 E701                       	dc.b	smpsNoAttack, $01
00073FB4 E109                       	smpsAlterNote       $09
00073FB6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00073FBA E10D                       	smpsAlterNote       $0D
00073FBC B609 8001                  	dc.b	nF4, $09, nRst, $01
00073FC0 E10C                       	smpsAlterNote       $0C
00073FC2 B506 8001                  	dc.b	nE4, $06, nRst, $01
00073FC6 E10B                       	smpsAlterNote       $0B
00073FC8 B30D                       	dc.b	nD4, $0D
00073FCA E10C                       	smpsAlterNote       $0C
00073FCC B503 8001                  	dc.b	nE4, $03, nRst, $01
00073FD0 E10D                       	smpsAlterNote       $0D
00073FD2 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00073FDA E109                       	smpsAlterNote       $09
00073FDC E701                       	dc.b	smpsNoAttack, $01
00073FDE E108                       	smpsAlterNote       $08
00073FE0 E701                       	dc.b	smpsNoAttack, $01
00073FE2 E10C                       	smpsAlterNote       $0C
00073FE4 E701                       	dc.b	smpsNoAttack, $01
00073FE6 E112                       	smpsAlterNote       $12
00073FE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073FEC E10F                       	smpsAlterNote       $0F
00073FEE E701                       	dc.b	smpsNoAttack, $01
00073FF0 E109                       	smpsAlterNote       $09
00073FF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00073FF6 E10F                       	smpsAlterNote       $0F
00073FF8 E701                       	dc.b	smpsNoAttack, $01
00073FFA E112                       	smpsAlterNote       $12
00073FFC E701                       	dc.b	smpsNoAttack, $01
00073FFE E113                       	smpsAlterNote       $13
00074000 8001                       	dc.b	nRst, $01
00074002 E10D                       	smpsAlterNote       $0D
00074004 C20D                       	dc.b	nF5, $0D
00074006 E107                       	smpsAlterNote       $07
00074008 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007400C E10A                       	smpsAlterNote       $0A
0007400E E701                       	dc.b	smpsNoAttack, $01
00074010 E110                       	smpsAlterNote       $10
00074012 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074016 E10A                       	smpsAlterNote       $0A
00074018 E701                       	dc.b	smpsNoAttack, $01
0007401A E107                       	smpsAlterNote       $07
0007401C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074020 E10D                       	smpsAlterNote       $0D
00074022 E701                       	dc.b	smpsNoAttack, $01
00074024 E111                       	smpsAlterNote       $11
00074026 E701                       	dc.b	smpsNoAttack, $01
00074028 E110                       	smpsAlterNote       $10
0007402A E701                       	dc.b	smpsNoAttack, $01
0007402C E10A                       	smpsAlterNote       $0A
0007402E E701                       	dc.b	smpsNoAttack, $01
00074030 E106                       	smpsAlterNote       $06
00074032 E701                       	dc.b	smpsNoAttack, $01
00074034 E10A                       	smpsAlterNote       $0A
00074036 E701                       	dc.b	smpsNoAttack, $01
00074038 E10D                       	smpsAlterNote       $0D
0007403A E701                       	dc.b	smpsNoAttack, $01
0007403C E111                       	smpsAlterNote       $11
0007403E E701                       	dc.b	smpsNoAttack, $01
00074040 E10D                       	smpsAlterNote       $0D
00074042 E701                       	dc.b	smpsNoAttack, $01
00074044 E107                       	smpsAlterNote       $07
00074046 E701                       	dc.b	smpsNoAttack, $01
00074048 E106                       	smpsAlterNote       $06
0007404A E701                       	dc.b	smpsNoAttack, $01
0007404C E10A                       	smpsAlterNote       $0A
0007404E E701                       	dc.b	smpsNoAttack, $01
00074050 E110                       	smpsAlterNote       $10
00074052 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074056 E10D                       	smpsAlterNote       $0D
00074058 E701                       	dc.b	smpsNoAttack, $01
0007405A E107                       	smpsAlterNote       $07
0007405C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074060 E10D                       	smpsAlterNote       $0D
00074062 E701                       	dc.b	smpsNoAttack, $01
00074064 E110                       	smpsAlterNote       $10
00074066 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007406A E10A                       	smpsAlterNote       $0A
0007406C E701                       	dc.b	smpsNoAttack, $01
0007406E E106                       	smpsAlterNote       $06
00074070 E701                       	dc.b	smpsNoAttack, $01
00074072 E107                       	smpsAlterNote       $07
00074074 E701                       	dc.b	smpsNoAttack, $01
00074076 E10D                       	smpsAlterNote       $0D
00074078 E701                       	dc.b	smpsNoAttack, $01
0007407A E111                       	smpsAlterNote       $11
0007407C E701                       	dc.b	smpsNoAttack, $01
0007407E E10D                       	smpsAlterNote       $0D
00074080 E701                       	dc.b	smpsNoAttack, $01
00074082 E10A                       	smpsAlterNote       $0A
00074084 E701                       	dc.b	smpsNoAttack, $01
00074086 E106                       	smpsAlterNote       $06
00074088 E701                       	dc.b	smpsNoAttack, $01
0007408A E10A                       	smpsAlterNote       $0A
0007408C E701                       	dc.b	smpsNoAttack, $01
0007408E E110                       	smpsAlterNote       $10
00074090 E701                       	dc.b	smpsNoAttack, $01
00074092 E111                       	smpsAlterNote       $11
00074094 E701                       	dc.b	smpsNoAttack, $01
00074096 E10D                       	smpsAlterNote       $0D
00074098 E701                       	dc.b	smpsNoAttack, $01
0007409A E107                       	smpsAlterNote       $07
0007409C E701                       	dc.b	smpsNoAttack, $01
0007409E E10D                       	smpsAlterNote       $0D
000740A0 C207                       	dc.b	nF5, $07
000740A2 E10C                       	smpsAlterNote       $0C
000740A4 C10D                       	dc.b	nE5, $0D
000740A6 E109                       	smpsAlterNote       $09
000740A8 E701                       	dc.b	smpsNoAttack, $01
000740AA E106                       	smpsAlterNote       $06
000740AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000740B0 E10C                       	smpsAlterNote       $0C
000740B2 E701                       	dc.b	smpsNoAttack, $01
000740B4 E110                       	smpsAlterNote       $10
000740B6 E701                       	dc.b	smpsNoAttack, $01
000740B8 E10F                       	smpsAlterNote       $0F
000740BA E701                       	dc.b	smpsNoAttack, $01
000740BC E109                       	smpsAlterNote       $09
000740BE E701                       	dc.b	smpsNoAttack, $01
000740C0 E105                       	smpsAlterNote       $05
000740C2 E701                       	dc.b	smpsNoAttack, $01
000740C4 E109                       	smpsAlterNote       $09
000740C6 E701                       	dc.b	smpsNoAttack, $01
000740C8 E10C                       	smpsAlterNote       $0C
000740CA E701                       	dc.b	smpsNoAttack, $01
000740CC E110                       	smpsAlterNote       $10
000740CE E701                       	dc.b	smpsNoAttack, $01
000740D0 E10B                       	smpsAlterNote       $0B
000740D2 BF0D                       	dc.b	nD5, $0D
000740D4 E108                       	smpsAlterNote       $08
000740D6 E701                       	dc.b	smpsNoAttack, $01
000740D8 E105                       	smpsAlterNote       $05
000740DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000740DE E10B                       	smpsAlterNote       $0B
000740E0 E701                       	dc.b	smpsNoAttack, $01
000740E2 E10F                       	smpsAlterNote       $0F
000740E4 E701                       	dc.b	smpsNoAttack, $01
000740E6 E10E                       	smpsAlterNote       $0E
000740E8 E701                       	dc.b	smpsNoAttack, $01
000740EA E108                       	smpsAlterNote       $08
000740EC E701                       	dc.b	smpsNoAttack, $01
000740EE E104                       	smpsAlterNote       $04
000740F0 E701                       	dc.b	smpsNoAttack, $01
000740F2 E108                       	smpsAlterNote       $08
000740F4 E701                       	dc.b	smpsNoAttack, $01
000740F6 E10E                       	smpsAlterNote       $0E
000740F8 E701                       	dc.b	smpsNoAttack, $01
000740FA E10F                       	smpsAlterNote       $0F
000740FC E701                       	dc.b	smpsNoAttack, $01
000740FE E10B                       	smpsAlterNote       $0B
00074100 E701                       	dc.b	smpsNoAttack, $01
00074102 E105                       	smpsAlterNote       $05
00074104 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074108 E108                       	smpsAlterNote       $08
0007410A E701                       	dc.b	smpsNoAttack, $01
0007410C E10E                       	smpsAlterNote       $0E
0007410E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074112 E108                       	smpsAlterNote       $08
00074114 E701                       	dc.b	smpsNoAttack, $01
00074116 E105                       	smpsAlterNote       $05
00074118 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007411C E10B                       	smpsAlterNote       $0B
0007411E E701                       	dc.b	smpsNoAttack, $01
00074120 E10F                       	smpsAlterNote       $0F
00074122 E701                       	dc.b	smpsNoAttack, $01
00074124 E10E                       	smpsAlterNote       $0E
00074126 E701                       	dc.b	smpsNoAttack, $01
00074128 E108                       	smpsAlterNote       $08
0007412A E701                       	dc.b	smpsNoAttack, $01
0007412C E104                       	smpsAlterNote       $04
0007412E E701                       	dc.b	smpsNoAttack, $01
00074130 E108                       	smpsAlterNote       $08
00074132 E701                       	dc.b	smpsNoAttack, $01
00074134 E10B                       	smpsAlterNote       $0B
00074136 E701                       	dc.b	smpsNoAttack, $01
00074138 E10F                       	smpsAlterNote       $0F
0007413A E701                       	dc.b	smpsNoAttack, $01
0007413C E10B                       	smpsAlterNote       $0B
0007413E E701                       	dc.b	smpsNoAttack, $01
00074140 E105                       	smpsAlterNote       $05
00074142 E701                       	dc.b	smpsNoAttack, $01
00074144 E104                       	smpsAlterNote       $04
00074146 E701                       	dc.b	smpsNoAttack, $01
00074148 E108                       	smpsAlterNote       $08
0007414A E701                       	dc.b	smpsNoAttack, $01
0007414C E10E                       	smpsAlterNote       $0E
0007414E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074152 E10B                       	smpsAlterNote       $0B
00074154 E701                       	dc.b	smpsNoAttack, $01
00074156 E105                       	smpsAlterNote       $05
00074158 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007415C E10B                       	smpsAlterNote       $0B
0007415E E701                       	dc.b	smpsNoAttack, $01
00074160 E10E                       	smpsAlterNote       $0E
00074162 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074166 E108                       	smpsAlterNote       $08
00074168 E701                       	dc.b	smpsNoAttack, $01
0007416A E105                       	smpsAlterNote       $05
0007416C 8001                       	dc.b	nRst, $01
00074170 E601                       	smpsAlterVol        $01
00074172 E10B                       	smpsAlterNote       $0B
00074174 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00074180 8004                       	dc.b	nRst, $04
00074184 E6FF                       	smpsAlterVol        $FF
00074186 E10D                       	smpsAlterNote       $0D
00074188 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00074190 E10C                       	smpsAlterNote       $0C
00074192 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00074197 E10D                       	smpsAlterNote       $0D
00074199 B60D                       	dc.b	nF4, $0D
0007419B E10A                       	smpsAlterNote       $0A
0007419D E701                       	dc.b	smpsNoAttack, $01
0007419F E106                       	smpsAlterNote       $06
000741A1 E701                       	dc.b	smpsNoAttack, $01
000741A3 E10A                       	smpsAlterNote       $0A
000741A5 E701                       	dc.b	smpsNoAttack, $01
000741A7 E110                       	smpsAlterNote       $10
000741A9 E701                       	dc.b	smpsNoAttack, $01
000741AB E111                       	smpsAlterNote       $11
000741AD E701                       	dc.b	smpsNoAttack, $01
000741AF E10D                       	smpsAlterNote       $0D
000741B1 E701                       	dc.b	smpsNoAttack, $01
000741B3 E107                       	smpsAlterNote       $07
000741B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000741B9 E10A                       	smpsAlterNote       $0A
000741BB E701                       	dc.b	smpsNoAttack, $01
000741BD E110                       	smpsAlterNote       $10
000741BF E701                       	dc.b	smpsNoAttack, $01
000741C1 E111                       	smpsAlterNote       $11
000741C3 8001                       	dc.b	nRst, $01
000741C5 E10D                       	smpsAlterNote       $0D
000741C7 B80D                       	dc.b	nG4, $0D
000741C9 E10A                       	smpsAlterNote       $0A
000741CB E701                       	dc.b	smpsNoAttack, $01
000741CD E106                       	smpsAlterNote       $06
000741CF E701                       	dc.b	smpsNoAttack, $01
000741D1 E10A                       	smpsAlterNote       $0A
000741D3 E701                       	dc.b	smpsNoAttack, $01
000741D5 E110                       	smpsAlterNote       $10
000741D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000741DB E10D                       	smpsAlterNote       $0D
000741DD E701                       	dc.b	smpsNoAttack, $01
000741DF E107                       	smpsAlterNote       $07
000741E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000741E5 E10D                       	smpsAlterNote       $0D
000741E7 E701                       	dc.b	smpsNoAttack, $01
000741E9 E110                       	smpsAlterNote       $10
000741EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000741EF E10A                       	smpsAlterNote       $0A
000741F1 E701                       	dc.b	smpsNoAttack, $01
000741F3 E106                       	smpsAlterNote       $06
000741F5 E701                       	dc.b	smpsNoAttack, $01
000741F7 E107                       	smpsAlterNote       $07
000741F9 E701                       	dc.b	smpsNoAttack, $01
000741FB E10D                       	smpsAlterNote       $0D
000741FD E701                       	dc.b	smpsNoAttack, $01
000741FF E111                       	smpsAlterNote       $11
00074201 E701                       	dc.b	smpsNoAttack, $01
00074203 E10D                       	smpsAlterNote       $0D
00074205 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00074209 E10F                       	smpsAlterNote       $0F
0007420B BA02 8001                  	dc.b	nA4, $02, nRst, $01
0007420F E110                       	smpsAlterNote       $10
00074211 BB03                       	dc.b	nBb4, $03
00074213 E10F                       	smpsAlterNote       $0F
00074215 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0007421B E110                       	smpsAlterNote       $10
0007421D C703 8001                  	dc.b	nBb5, $03, nRst, $01
00074221 E10F                       	smpsAlterNote       $0F
00074223 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00074229 E110                       	smpsAlterNote       $10
0007422B D302 8001                  	dc.b	nBb6, $02, nRst, $01
0007422F E10F                       	smpsAlterNote       $0F
00074231 D20D                       	dc.b	nA6, $0D
00074233 E10C                       	smpsAlterNote       $0C
00074235 E701                       	dc.b	smpsNoAttack, $01
00074237 E108                       	smpsAlterNote       $08
00074239 E701                       	dc.b	smpsNoAttack, $01
0007423B E10C                       	smpsAlterNote       $0C
0007423D E701                       	dc.b	smpsNoAttack, $01
0007423F E10F                       	smpsAlterNote       $0F
00074241 E701                       	dc.b	smpsNoAttack, $01
00074243 E113                       	smpsAlterNote       $13
00074245 E701                       	dc.b	smpsNoAttack, $01
00074247 E10F                       	smpsAlterNote       $0F
00074249 E701                       	dc.b	smpsNoAttack, $01
0007424B E109                       	smpsAlterNote       $09
0007424D E701                       	dc.b	smpsNoAttack, $01
0007424F E108                       	smpsAlterNote       $08
00074251 E701                       	dc.b	smpsNoAttack, $01
00074253 E10C                       	smpsAlterNote       $0C
00074255 E701                       	dc.b	smpsNoAttack, $01
00074257 E112                       	smpsAlterNote       $12
00074259 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007425D E10F                       	smpsAlterNote       $0F
0007425F E701                       	dc.b	smpsNoAttack, $01
00074261 E109                       	smpsAlterNote       $09
00074263 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00074269 E10D                       	smpsAlterNote       $0D
0007426B CE07                       	dc.b	nF6, $07
0007426D E10C                       	smpsAlterNote       $0C
0007426F CD06 8001                  	dc.b	nE6, $06, nRst, $01
00074273 E10D                       	smpsAlterNote       $0D
00074275 CE03                       	dc.b	nF6, $03
00074277 E10C                       	smpsAlterNote       $0C
00074279 CC0D                       	dc.b	nEb6, $0D
0007427B E109                       	smpsAlterNote       $09
0007427D E701                       	dc.b	smpsNoAttack, $01
0007427F E106                       	smpsAlterNote       $06
00074281 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074285 E10C                       	smpsAlterNote       $0C
00074287 E701                       	dc.b	smpsNoAttack, $01
00074289 E110                       	smpsAlterNote       $10
0007428B E701                       	dc.b	smpsNoAttack, $01
0007428D E10F                       	smpsAlterNote       $0F
0007428F E701                       	dc.b	smpsNoAttack, $01
00074291 E109                       	smpsAlterNote       $09
00074293 E701                       	dc.b	smpsNoAttack, $01
00074295 E105                       	smpsAlterNote       $05
00074297 E701                       	dc.b	smpsNoAttack, $01
00074299 E109                       	smpsAlterNote       $09
0007429B E701                       	dc.b	smpsNoAttack, $01
0007429D E10C                       	smpsAlterNote       $0C
0007429F E701                       	dc.b	smpsNoAttack, $01
000742A1 E110                       	smpsAlterNote       $10
000742A3 E701                       	dc.b	smpsNoAttack, $01
000742A5 E10C                       	smpsAlterNote       $0C
000742A7 E701                       	dc.b	smpsNoAttack, $01
000742A9 E106                       	smpsAlterNote       $06
000742AB E701                       	dc.b	smpsNoAttack, $01
000742AD E105                       	smpsAlterNote       $05
000742AF E701                       	dc.b	smpsNoAttack, $01
000742B1 E109                       	smpsAlterNote       $09
000742B3 E701                       	dc.b	smpsNoAttack, $01
000742B5 E10F                       	smpsAlterNote       $0F
000742B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000742BB E10C                       	smpsAlterNote       $0C
000742BD E701                       	dc.b	smpsNoAttack, $01
000742BF E10B                       	smpsAlterNote       $0B
000742C1 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
000742CB E10F                       	smpsAlterNote       $0F
000742CD C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000742D7 E10D                       	smpsAlterNote       $0D
000742D9 C203                       	dc.b	nF5, $03
000742DB E10C                       	smpsAlterNote       $0C
000742DD C103 8001                  	dc.b	nE5, $03, nRst, $01
000742E1 E10D                       	smpsAlterNote       $0D
000742E3 C20D                       	dc.b	nF5, $0D
000742E5 E10C                       	smpsAlterNote       $0C
000742E7 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
000742EB E10B                       	smpsAlterNote       $0B
000742ED BF0D                       	dc.b	nD5, $0D
000742EF E108                       	smpsAlterNote       $08
000742F1 E701                       	dc.b	smpsNoAttack, $01
000742F3 E104                       	smpsAlterNote       $04
000742F5 E701                       	dc.b	smpsNoAttack, $01
000742F7 E108                       	smpsAlterNote       $08
000742F9 E701                       	dc.b	smpsNoAttack, $01
000742FB E10E                       	smpsAlterNote       $0E
000742FD E701                       	dc.b	smpsNoAttack, $01
000742FF E10F                       	smpsAlterNote       $0F
00074301 E701                       	dc.b	smpsNoAttack, $01
00074303 E10B                       	smpsAlterNote       $0B
00074305 E701                       	dc.b	smpsNoAttack, $01
00074307 E105                       	smpsAlterNote       $05
00074309 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007430D E108                       	smpsAlterNote       $08
0007430F E701                       	dc.b	smpsNoAttack, $01
00074311 E10E                       	smpsAlterNote       $0E
00074313 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074317 E108                       	smpsAlterNote       $08
00074319 E701                       	dc.b	smpsNoAttack, $01
0007431B E105                       	smpsAlterNote       $05
0007431D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074321 E10B                       	smpsAlterNote       $0B
00074323 E701                       	dc.b	smpsNoAttack, $01
00074325 E10F                       	smpsAlterNote       $0F
00074327 E701                       	dc.b	smpsNoAttack, $01
00074329 E10E                       	smpsAlterNote       $0E
0007432B E701                       	dc.b	smpsNoAttack, $01
0007432D E108                       	smpsAlterNote       $08
0007432F E701                       	dc.b	smpsNoAttack, $01
00074331 E104                       	smpsAlterNote       $04
00074333 E701                       	dc.b	smpsNoAttack, $01
00074335 E108                       	smpsAlterNote       $08
00074337 E701                       	dc.b	smpsNoAttack, $01
00074339 E10B                       	smpsAlterNote       $0B
0007433B E701                       	dc.b	smpsNoAttack, $01
0007433D E10F                       	smpsAlterNote       $0F
0007433F E701                       	dc.b	smpsNoAttack, $01
00074341 E10B                       	smpsAlterNote       $0B
00074343 E701                       	dc.b	smpsNoAttack, $01
00074345 E105                       	smpsAlterNote       $05
00074347 E701                       	dc.b	smpsNoAttack, $01
00074349 E104                       	smpsAlterNote       $04
0007434B E701                       	dc.b	smpsNoAttack, $01
0007434D E108                       	smpsAlterNote       $08
0007434F E701                       	dc.b	smpsNoAttack, $01
00074351 E10E                       	smpsAlterNote       $0E
00074353 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074357 E10B                       	smpsAlterNote       $0B
00074359 E701                       	dc.b	smpsNoAttack, $01
0007435B E105                       	smpsAlterNote       $05
0007435D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074361 E10B                       	smpsAlterNote       $0B
00074363 E701                       	dc.b	smpsNoAttack, $01
00074365 E10E                       	smpsAlterNote       $0E
00074367 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007436B E108                       	smpsAlterNote       $08
0007436D E701                       	dc.b	smpsNoAttack, $01
0007436F E104                       	smpsAlterNote       $04
00074371 E701                       	dc.b	smpsNoAttack, $01
00074373 E105                       	smpsAlterNote       $05
00074375 E701                       	dc.b	smpsNoAttack, $01
00074377 E10B                       	smpsAlterNote       $0B
00074379 E701                       	dc.b	smpsNoAttack, $01
0007437B E10F                       	smpsAlterNote       $0F
0007437D E701                       	dc.b	smpsNoAttack, $01
0007437F E10B                       	smpsAlterNote       $0B
00074381 E701                       	dc.b	smpsNoAttack, $01
00074383 E108                       	smpsAlterNote       $08
00074385 E701                       	dc.b	smpsNoAttack, $01
00074387 E104                       	smpsAlterNote       $04
00074389 E701                       	dc.b	smpsNoAttack, $01
0007438B E108                       	smpsAlterNote       $08
0007438D E701                       	dc.b	smpsNoAttack, $01
0007438F E10E                       	smpsAlterNote       $0E
00074391 E701                       	dc.b	smpsNoAttack, $01
00074393 E10F                       	smpsAlterNote       $0F
00074395 E701                       	dc.b	smpsNoAttack, $01
00074397 E10B                       	smpsAlterNote       $0B
00074399 E701                       	dc.b	smpsNoAttack, $01
0007439B E105                       	smpsAlterNote       $05
0007439D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000743A1 E108                       	smpsAlterNote       $08
000743A3 E701                       	dc.b	smpsNoAttack, $01
000743A5 E10E                       	smpsAlterNote       $0E
000743A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000743AB E108                       	smpsAlterNote       $08
000743AD E701                       	dc.b	smpsNoAttack, $01
000743AF E105                       	smpsAlterNote       $05
000743B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000743B5 E10B                       	smpsAlterNote       $0B
000743B7 E701                       	dc.b	smpsNoAttack, $01
000743B9 E10F                       	smpsAlterNote       $0F
000743BB E701                       	dc.b	smpsNoAttack, $01
000743BD E10E                       	smpsAlterNote       $0E
000743BF E701                       	dc.b	smpsNoAttack, $01
000743C1 E108                       	smpsAlterNote       $08
000743C3 E701                       	dc.b	smpsNoAttack, $01
000743C5 E104                       	smpsAlterNote       $04
000743C7 E701                       	dc.b	smpsNoAttack, $01
000743C9 E108                       	smpsAlterNote       $08
000743CB E701                       	dc.b	smpsNoAttack, $01
000743CD E10B                       	smpsAlterNote       $0B
000743CF E701                       	dc.b	smpsNoAttack, $01
000743D1 E10F                       	smpsAlterNote       $0F
000743D3 E701                       	dc.b	smpsNoAttack, $01
000743D5 E10B                       	smpsAlterNote       $0B
000743D7 E701                       	dc.b	smpsNoAttack, $01
000743D9 E105                       	smpsAlterNote       $05
000743DB E701                       	dc.b	smpsNoAttack, $01
000743DD E104                       	smpsAlterNote       $04
000743DF E701                       	dc.b	smpsNoAttack, $01
000743E1 E105                       	smpsAlterNote       $05
000743E3 8001                       	dc.b	nRst, $01
000743E5 E10D                       	smpsAlterNote       $0D
000743E7 C20D                       	dc.b	nF5, $0D
000743E9 E107                       	smpsAlterNote       $07
000743EB E701                       	dc.b	smpsNoAttack, $01
000743ED E106                       	smpsAlterNote       $06
000743EF E701                       	dc.b	smpsNoAttack, $01
000743F1 E10A                       	smpsAlterNote       $0A
000743F3 E701                       	dc.b	smpsNoAttack, $01
000743F5 E110                       	smpsAlterNote       $10
000743F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000743FB E10D                       	smpsAlterNote       $0D
000743FD E701                       	dc.b	smpsNoAttack, $01
000743FF E107                       	smpsAlterNote       $07
00074401 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074405 E10D                       	smpsAlterNote       $0D
00074407 E701                       	dc.b	smpsNoAttack, $01
00074409 E110                       	smpsAlterNote       $10
0007440B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007440F E10A                       	smpsAlterNote       $0A
00074411 E701                       	dc.b	smpsNoAttack, $01
00074413 E106                       	smpsAlterNote       $06
00074415 E701                       	dc.b	smpsNoAttack, $01
00074417 E107                       	smpsAlterNote       $07
00074419 E701                       	dc.b	smpsNoAttack, $01
0007441B E10D                       	smpsAlterNote       $0D
0007441D E701                       	dc.b	smpsNoAttack, $01
0007441F E111                       	smpsAlterNote       $11
00074421 E701                       	dc.b	smpsNoAttack, $01
00074423 E10D                       	smpsAlterNote       $0D
00074425 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00074429 E10C                       	smpsAlterNote       $0C
0007442B C10D                       	dc.b	nE5, $0D
0007442D E10D                       	smpsAlterNote       $0D
0007442F C20A                       	dc.b	nF5, $0A
00074431 E10C                       	smpsAlterNote       $0C
00074433 C10E                       	dc.b	nE5, $0E
00074435 E106                       	smpsAlterNote       $06
00074437 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007443B E10C                       	smpsAlterNote       $0C
0007443D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00074441 E10B                       	smpsAlterNote       $0B
00074443 BF0D                       	dc.b	nD5, $0D
00074445 E10C                       	smpsAlterNote       $0C
00074447 C107                       	dc.b	nE5, $07
00074449 E10D                       	smpsAlterNote       $0D
0007444B C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00074455 E110                       	smpsAlterNote       $10
00074457 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0007445D E10F                       	smpsAlterNote       $0F
0007445F C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00074467 E10D                       	smpsAlterNote       $0D
00074469 D003                       	dc.b	nG6, $03
0007446D E0C0                       	smpsPan             panCenter, $00
0007446F E6FF                       	smpsAlterVol        $FF
00074471 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0007447D 8001                       	dc.b	nRst, $01
0007447F E10C                       	smpsAlterNote       $0C
00074481 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0007448B E604                       	smpsAlterVol        $04
0007448D E10B                       	smpsAlterNote       $0B
0007448F B306 8001                  	dc.b	nD4, $06, nRst, $01
00074493 E10F                       	smpsAlterNote       $0F
00074495 AE03                       	dc.b	nA3, $03
00074497 E10D                       	smpsAlterNote       $0D
00074499 B603 8001                  	dc.b	nF4, $03, nRst, $01
0007449D E10C                       	smpsAlterNote       $0C
0007449F B506 8001                  	dc.b	nE4, $06, nRst, $01
000744A3 E10B                       	smpsAlterNote       $0B
000744A5 B302 8001                  	dc.b	nD4, $02, nRst, $01
000744A9 E10A                       	smpsAlterNote       $0A
000744AB B103                       	dc.b	nC4, $03
000744AD E110                       	smpsAlterNote       $10
000744AF AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000744B3 E10F                       	smpsAlterNote       $0F
000744B5 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
000744B9 E080                       	smpsPan             panLeft, $00
000744BB 01                         	dc.b	$01
000744BE E6FB                       	smpsAlterVol        $FB
000744C0 E1E4                       	smpsAlterNote       $E4
000744C2 C501                       	dc.b	nAb5, $01
000744C4 E1F4                       	smpsAlterNote       $F4
000744C6 E701                       	dc.b	smpsNoAttack, $01
000744C8 E104                       	smpsAlterNote       $04
000744CA E701                       	dc.b	smpsNoAttack, $01
000744CC E114                       	smpsAlterNote       $14
000744CE E701                       	dc.b	smpsNoAttack, $01
000744D0 E11C                       	smpsAlterNote       $1C
000744D2 E701                       	dc.b	smpsNoAttack, $01
000744D4 E1EF                       	smpsAlterNote       $EF
000744D6 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000744D9 E1FF                       	smpsAlterNote       $FF
000744DB E701                       	dc.b	smpsNoAttack, $01
000744DD E10F                       	smpsAlterNote       $0F
000744DF C606                       	dc.b	nA5, $06
000744E1 E109                       	smpsAlterNote       $09
000744E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000744E7 E10F                       	smpsAlterNote       $0F
000744E9 E701                       	dc.b	smpsNoAttack, $01
000744EB E112                       	smpsAlterNote       $12
000744ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000744F1 E10C                       	smpsAlterNote       $0C
000744F3 E701                       	dc.b	smpsNoAttack, $01
000744F5 E108                       	smpsAlterNote       $08
000744F7 E701                       	dc.b	smpsNoAttack, $01
000744F9 E109                       	smpsAlterNote       $09
000744FB E701                       	dc.b	smpsNoAttack, $01
000744FD E10F                       	smpsAlterNote       $0F
000744FF E701                       	dc.b	smpsNoAttack, $01
00074501 E113                       	smpsAlterNote       $13
00074503 E701                       	dc.b	smpsNoAttack, $01
00074505 E10F                       	smpsAlterNote       $0F
00074507 E701                       	dc.b	smpsNoAttack, $01
00074509 E10C                       	smpsAlterNote       $0C
0007450B E701                       	dc.b	smpsNoAttack, $01
0007450D E108                       	smpsAlterNote       $08
0007450F E701                       	dc.b	smpsNoAttack, $01
00074511 E10C                       	smpsAlterNote       $0C
00074513 E701                       	dc.b	smpsNoAttack, $01
00074515 E112                       	smpsAlterNote       $12
00074517 E701                       	dc.b	smpsNoAttack, $01
00074519 E113                       	smpsAlterNote       $13
0007451B E701                       	dc.b	smpsNoAttack, $01
0007451D E10F                       	smpsAlterNote       $0F
0007451F E701                       	dc.b	smpsNoAttack, $01
00074521 E109                       	smpsAlterNote       $09
00074523 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074527 E10C                       	smpsAlterNote       $0C
00074529 E701                       	dc.b	smpsNoAttack, $01
0007452B E112                       	smpsAlterNote       $12
0007452D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074531 E10C                       	smpsAlterNote       $0C
00074533 E701                       	dc.b	smpsNoAttack, $01
00074535 E109                       	smpsAlterNote       $09
00074537 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007453B E10F                       	smpsAlterNote       $0F
0007453D E701                       	dc.b	smpsNoAttack, $01
0007453F E113                       	smpsAlterNote       $13
00074541 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00074545 E10D                       	smpsAlterNote       $0D
00074547 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0007454D E10C                       	smpsAlterNote       $0C
0007454F C102 8001                  	dc.b	nE5, $02, nRst, $01
00074553 E10D                       	smpsAlterNote       $0D
00074555 C201 8001                  	dc.b	nF5, $01, nRst, $01
00074559 E10C                       	smpsAlterNote       $0C
0007455B C102                       	dc.b	nE5, $02
0007455D E10B                       	smpsAlterNote       $0B
0007455F BF02 8001                  	dc.b	nD5, $02, nRst, $01
00074563 E10C                       	smpsAlterNote       $0C
00074565 C101 8001                  	dc.b	nE5, $01, nRst, $01
00074569 E10B                       	smpsAlterNote       $0B
0007456B BF02                       	dc.b	nD5, $02
0007456D E10A                       	smpsAlterNote       $0A
0007456F BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00074579 E110                       	smpsAlterNote       $10
0007457B BB02                       	dc.b	nBb4, $02
0007457D E10A                       	smpsAlterNote       $0A
0007457F BD02 8001                  	dc.b	nC5, $02, nRst, $01
00074583 E110                       	smpsAlterNote       $10
00074585 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00074589 E10F                       	smpsAlterNote       $0F
0007458B BA01 8001                  	dc.b	nA4, $01, nRst, $01
0007458F E110                       	smpsAlterNote       $10
00074591 BB02                       	dc.b	nBb4, $02
00074593 E10F                       	smpsAlterNote       $0F
00074595 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0007459F E10C                       	smpsAlterNote       $0C
000745A1 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000745A9 E10B                       	smpsAlterNote       $0B
000745AB BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000745AF E10F                       	smpsAlterNote       $0F
000745B1 BA02                       	dc.b	nA4, $02
000745B5 E0C0                       	smpsPan             panCenter, $00
000745B7 E601                       	smpsAlterVol        $01
000745B9 E109                       	smpsAlterNote       $09
000745BB AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000745C7 E108                       	smpsAlterNote       $08
000745C9 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000745CF E107                       	smpsAlterNote       $07
000745D1 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000745D7 E109                       	smpsAlterNote       $09
000745D9 B603 8001                  	dc.b	nF4, $03, nRst, $01
000745DD E108                       	smpsAlterNote       $08
000745DF B506 8001                  	dc.b	nE4, $06, nRst, $01
000745E3 E107                       	smpsAlterNote       $07
000745E5 B302 8001                  	dc.b	nD4, $02, nRst, $01
000745E9 E106                       	smpsAlterNote       $06
000745EB B103                       	dc.b	nC4, $03
000745ED E10C                       	smpsAlterNote       $0C
000745EF AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000745F5 E080                       	smpsPan             panLeft, $00
000745F7 07                         	dc.b	$07
000745F8 E6FE                       	smpsAlterVol        $FE
000745FA E10B                       	smpsAlterNote       $0B
000745FC B20D                       	dc.b	nCs4, $0D
000745FE E105                       	smpsAlterNote       $05
00074600 E701                       	dc.b	smpsNoAttack, $01
00074602 E104                       	smpsAlterNote       $04
00074604 E701                       	dc.b	smpsNoAttack, $01
00074606 E108                       	smpsAlterNote       $08
00074608 E701                       	dc.b	smpsNoAttack, $01
0007460A E10E                       	smpsAlterNote       $0E
0007460C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074610 E10B                       	smpsAlterNote       $0B
00074612 E701                       	dc.b	smpsNoAttack, $01
00074614 E105                       	smpsAlterNote       $05
00074616 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007461A E10B                       	smpsAlterNote       $0B
0007461C E701                       	dc.b	smpsNoAttack, $01
0007461E E10E                       	smpsAlterNote       $0E
00074620 E701                       	dc.b	smpsNoAttack, $01
00074622 E10F                       	smpsAlterNote       $0F
00074624 8001                       	dc.b	nRst, $01
00074626 E10B                       	smpsAlterNote       $0B
00074628 B30D                       	dc.b	nD4, $0D
0007462A E105                       	smpsAlterNote       $05
0007462C E701                       	dc.b	smpsNoAttack, $01
0007462E E104                       	smpsAlterNote       $04
00074630 E701                       	dc.b	smpsNoAttack, $01
00074632 E108                       	smpsAlterNote       $08
00074634 E701                       	dc.b	smpsNoAttack, $01
00074636 E10E                       	smpsAlterNote       $0E
00074638 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007463C E10B                       	smpsAlterNote       $0B
0007463E E701                       	dc.b	smpsNoAttack, $01
00074640 E105                       	smpsAlterNote       $05
00074642 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074646 E10B                       	smpsAlterNote       $0B
00074648 E701                       	dc.b	smpsNoAttack, $01
0007464A E10E                       	smpsAlterNote       $0E
0007464C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074650 E108                       	smpsAlterNote       $08
00074652 E701                       	dc.b	smpsNoAttack, $01
00074654 E104                       	smpsAlterNote       $04
00074656 E701                       	dc.b	smpsNoAttack, $01
00074658 E105                       	smpsAlterNote       $05
0007465A E701                       	dc.b	smpsNoAttack, $01
0007465C E10B                       	smpsAlterNote       $0B
0007465E E701                       	dc.b	smpsNoAttack, $01
00074660 E10F                       	smpsAlterNote       $0F
00074662 E701                       	dc.b	smpsNoAttack, $01
00074664 E10B                       	smpsAlterNote       $0B
00074666 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007466A E10C                       	smpsAlterNote       $0C
0007466C B50D                       	dc.b	nE4, $0D
0007466E E106                       	smpsAlterNote       $06
00074670 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074674 E10C                       	smpsAlterNote       $0C
00074676 E701                       	dc.b	smpsNoAttack, $01
00074678 E10F                       	smpsAlterNote       $0F
0007467A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007467E E109                       	smpsAlterNote       $09
00074680 E701                       	dc.b	smpsNoAttack, $01
00074682 E105                       	smpsAlterNote       $05
00074684 E701                       	dc.b	smpsNoAttack, $01
00074686 E106                       	smpsAlterNote       $06
00074688 E701                       	dc.b	smpsNoAttack, $01
0007468A E10C                       	smpsAlterNote       $0C
0007468C E701                       	dc.b	smpsNoAttack, $01
0007468E E110                       	smpsAlterNote       $10
00074690 E701                       	dc.b	smpsNoAttack, $01
00074692 E10B                       	smpsAlterNote       $0B
00074694 B30E                       	dc.b	nD4, $0E
00074696 E105                       	smpsAlterNote       $05
00074698 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007469C E10B                       	smpsAlterNote       $0B
0007469E E701                       	dc.b	smpsNoAttack, $01
000746A0 E10E                       	smpsAlterNote       $0E
000746A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000746A6 E108                       	smpsAlterNote       $08
000746A8 E701                       	dc.b	smpsNoAttack, $01
000746AA E104                       	smpsAlterNote       $04
000746AC E701                       	dc.b	smpsNoAttack, $01
000746AE E105                       	smpsAlterNote       $05
000746B0 E701                       	dc.b	smpsNoAttack, $01
000746B2 E10B                       	smpsAlterNote       $0B
000746B4 E701                       	dc.b	smpsNoAttack, $01
000746B6 E10F                       	smpsAlterNote       $0F
000746B8 E701                       	dc.b	smpsNoAttack, $01
000746BA E10B                       	smpsAlterNote       $0B
000746BC E701                       	dc.b	smpsNoAttack, $01
000746BE E108                       	smpsAlterNote       $08
000746C0 E701                       	dc.b	smpsNoAttack, $01
000746C2 E104                       	smpsAlterNote       $04
000746C4 E701                       	dc.b	smpsNoAttack, $01
000746C6 E108                       	smpsAlterNote       $08
000746C8 E701                       	dc.b	smpsNoAttack, $01
000746CA E10E                       	smpsAlterNote       $0E
000746CC E701                       	dc.b	smpsNoAttack, $01
000746CE E10F                       	smpsAlterNote       $0F
000746D0 E701                       	dc.b	smpsNoAttack, $01
000746D2 E10B                       	smpsAlterNote       $0B
000746D4 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000746D8 E108                       	smpsAlterNote       $08
000746DA E701                       	dc.b	smpsNoAttack, $01
000746DC E105                       	smpsAlterNote       $05
000746DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000746E2 E10B                       	smpsAlterNote       $0B
000746E4 E701                       	dc.b	smpsNoAttack, $01
000746E6 E10F                       	smpsAlterNote       $0F
000746E8 E701                       	dc.b	smpsNoAttack, $01
000746EA E10E                       	smpsAlterNote       $0E
000746EC E701                       	dc.b	smpsNoAttack, $01
000746EE E108                       	smpsAlterNote       $08
000746F0 E701                       	dc.b	smpsNoAttack, $01
000746F2 E104                       	smpsAlterNote       $04
000746F4 E701                       	dc.b	smpsNoAttack, $01
000746F6 E108                       	smpsAlterNote       $08
000746F8 E701                       	dc.b	smpsNoAttack, $01
000746FA E10B                       	smpsAlterNote       $0B
000746FC E701                       	dc.b	smpsNoAttack, $01
000746FE E10F                       	smpsAlterNote       $0F
00074700 E701                       	dc.b	smpsNoAttack, $01
00074702 E10B                       	smpsAlterNote       $0B
00074704 B30D                       	dc.b	nD4, $0D
00074706 E108                       	smpsAlterNote       $08
00074708 E701                       	dc.b	smpsNoAttack, $01
0007470A E105                       	smpsAlterNote       $05
0007470C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074710 E10B                       	smpsAlterNote       $0B
00074712 E701                       	dc.b	smpsNoAttack, $01
00074714 E10F                       	smpsAlterNote       $0F
00074716 E701                       	dc.b	smpsNoAttack, $01
00074718 E10E                       	smpsAlterNote       $0E
0007471A E701                       	dc.b	smpsNoAttack, $01
0007471C E108                       	smpsAlterNote       $08
0007471E E701                       	dc.b	smpsNoAttack, $01
00074720 E104                       	smpsAlterNote       $04
00074722 E701                       	dc.b	smpsNoAttack, $01
00074724 E108                       	smpsAlterNote       $08
00074726 E701                       	dc.b	smpsNoAttack, $01
00074728 E10B                       	smpsAlterNote       $0B
0007472A E701                       	dc.b	smpsNoAttack, $01
0007472C E10F                       	smpsAlterNote       $0F
0007472E E701                       	dc.b	smpsNoAttack, $01
00074730 E10B                       	smpsAlterNote       $0B
00074732 E701                       	dc.b	smpsNoAttack, $01
00074734 E105                       	smpsAlterNote       $05
00074736 E701                       	dc.b	smpsNoAttack, $01
00074738 E104                       	smpsAlterNote       $04
0007473A E701                       	dc.b	smpsNoAttack, $01
0007473C E108                       	smpsAlterNote       $08
0007473E E701                       	dc.b	smpsNoAttack, $01
00074740 E10E                       	smpsAlterNote       $0E
00074742 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074746 E10B                       	smpsAlterNote       $0B
00074748 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0007474C E108                       	smpsAlterNote       $08
0007474E E701                       	dc.b	smpsNoAttack, $01
00074750 E104                       	smpsAlterNote       $04
00074752 E701                       	dc.b	smpsNoAttack, $01
00074754 E108                       	smpsAlterNote       $08
00074756 E701                       	dc.b	smpsNoAttack, $01
00074758 E10B                       	smpsAlterNote       $0B
0007475A E701                       	dc.b	smpsNoAttack, $01
0007475E E0C0                       	smpsPan             panCenter, $00
00074760 E601                       	smpsAlterVol        $01
00074762 E108                       	smpsAlterNote       $08
00074764 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
00074770 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00074778 E080                       	smpsPan             panLeft, $00
0007477A 07                         	dc.b	$07
0007477B E6FF                       	smpsAlterVol        $FF
0007477D E10D                       	smpsAlterNote       $0D
0007477F B60D                       	dc.b	nF4, $0D
00074781 E10A                       	smpsAlterNote       $0A
00074783 E701                       	dc.b	smpsNoAttack, $01
00074785 E106                       	smpsAlterNote       $06
00074787 E701                       	dc.b	smpsNoAttack, $01
00074789 E10A                       	smpsAlterNote       $0A
0007478B E701                       	dc.b	smpsNoAttack, $01
0007478D E110                       	smpsAlterNote       $10
0007478F E701                       	dc.b	smpsNoAttack, $01
00074791 E111                       	smpsAlterNote       $11
00074793 E701                       	dc.b	smpsNoAttack, $01
00074795 E10D                       	smpsAlterNote       $0D
00074797 E701                       	dc.b	smpsNoAttack, $01
00074799 E107                       	smpsAlterNote       $07
0007479B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007479F E10A                       	smpsAlterNote       $0A
000747A1 E701                       	dc.b	smpsNoAttack, $01
000747A3 E110                       	smpsAlterNote       $10
000747A5 E701                       	dc.b	smpsNoAttack, $01
000747A7 E111                       	smpsAlterNote       $11
000747A9 8001                       	dc.b	nRst, $01
000747AB E10D                       	smpsAlterNote       $0D
000747AD B80D                       	dc.b	nG4, $0D
000747AF E10A                       	smpsAlterNote       $0A
000747B1 E701                       	dc.b	smpsNoAttack, $01
000747B3 E106                       	smpsAlterNote       $06
000747B5 E701                       	dc.b	smpsNoAttack, $01
000747B7 E10A                       	smpsAlterNote       $0A
000747B9 E701                       	dc.b	smpsNoAttack, $01
000747BB E110                       	smpsAlterNote       $10
000747BD E701                       	dc.b	smpsNoAttack, $01
000747BF E111                       	smpsAlterNote       $11
000747C1 E701                       	dc.b	smpsNoAttack, $01
000747C3 E10D                       	smpsAlterNote       $0D
000747C5 E701                       	dc.b	smpsNoAttack, $01
000747C7 E107                       	smpsAlterNote       $07
000747C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000747CD E10D                       	smpsAlterNote       $0D
000747CF E701                       	dc.b	smpsNoAttack, $01
000747D1 E110                       	smpsAlterNote       $10
000747D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000747D7 E10A                       	smpsAlterNote       $0A
000747D9 E701                       	dc.b	smpsNoAttack, $01
000747DB E106                       	smpsAlterNote       $06
000747DD E701                       	dc.b	smpsNoAttack, $01
000747DF E107                       	smpsAlterNote       $07
000747E1 E701                       	dc.b	smpsNoAttack, $01
000747E3 E10D                       	smpsAlterNote       $0D
000747E5 E701                       	dc.b	smpsNoAttack, $01
000747E7 E111                       	smpsAlterNote       $11
000747E9 E701                       	dc.b	smpsNoAttack, $01
000747EB E10D                       	smpsAlterNote       $0D
000747ED E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000747F1 E10F                       	smpsAlterNote       $0F
000747F3 BA0D                       	dc.b	nA4, $0D
000747F5 E109                       	smpsAlterNote       $09
000747F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000747FB E10C                       	smpsAlterNote       $0C
000747FD E701                       	dc.b	smpsNoAttack, $01
000747FF E112                       	smpsAlterNote       $12
00074801 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074805 E10C                       	smpsAlterNote       $0C
00074807 E701                       	dc.b	smpsNoAttack, $01
00074809 E109                       	smpsAlterNote       $09
0007480B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007480F E10F                       	smpsAlterNote       $0F
00074811 E701                       	dc.b	smpsNoAttack, $01
00074813 E113                       	smpsAlterNote       $13
00074815 E701                       	dc.b	smpsNoAttack, $01
00074817 E112                       	smpsAlterNote       $12
00074819 E701                       	dc.b	smpsNoAttack, $01
0007481B E10C                       	smpsAlterNote       $0C
0007481D E701                       	dc.b	smpsNoAttack, $01
0007481F E108                       	smpsAlterNote       $08
00074821 E701                       	dc.b	smpsNoAttack, $01
00074823 E10C                       	smpsAlterNote       $0C
00074825 E701                       	dc.b	smpsNoAttack, $01
00074827 E10F                       	smpsAlterNote       $0F
00074829 E701                       	dc.b	smpsNoAttack, $01
0007482B E113                       	smpsAlterNote       $13
0007482D E701                       	dc.b	smpsNoAttack, $01
0007482F E10F                       	smpsAlterNote       $0F
00074831 E701                       	dc.b	smpsNoAttack, $01
00074833 E109                       	smpsAlterNote       $09
00074835 E701                       	dc.b	smpsNoAttack, $01
00074837 E108                       	smpsAlterNote       $08
00074839 E701                       	dc.b	smpsNoAttack, $01
0007483B E10C                       	smpsAlterNote       $0C
0007483D E701                       	dc.b	smpsNoAttack, $01
0007483F E112                       	smpsAlterNote       $12
00074841 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074845 E10F                       	smpsAlterNote       $0F
00074847 E701                       	dc.b	smpsNoAttack, $01
00074849 E109                       	smpsAlterNote       $09
0007484B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007484F E10F                       	smpsAlterNote       $0F
00074851 E701                       	dc.b	smpsNoAttack, $01
00074853 E112                       	smpsAlterNote       $12
00074855 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074859 E10C                       	smpsAlterNote       $0C
0007485B E701                       	dc.b	smpsNoAttack, $01
0007485D E108                       	smpsAlterNote       $08
0007485F E701                       	dc.b	smpsNoAttack, $01
00074861 E109                       	smpsAlterNote       $09
00074863 E701                       	dc.b	smpsNoAttack, $01
00074865 E10C                       	smpsAlterNote       $0C
00074867 B50A                       	dc.b	nE4, $0A
00074869 E10D                       	smpsAlterNote       $0D
0007486B B60E                       	dc.b	nF4, $0E
0007486D E107                       	smpsAlterNote       $07
0007486F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074873 E10D                       	smpsAlterNote       $0D
00074875 E701                       	dc.b	smpsNoAttack, $01
00074877 E110                       	smpsAlterNote       $10
00074879 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007487D E10A                       	smpsAlterNote       $0A
0007487F E701                       	dc.b	smpsNoAttack, $01
00074881 E106                       	smpsAlterNote       $06
00074883 E701                       	dc.b	smpsNoAttack, $01
00074885 E107                       	smpsAlterNote       $07
00074887 E701                       	dc.b	smpsNoAttack, $01
00074889 E10D                       	smpsAlterNote       $0D
0007488B E701                       	dc.b	smpsNoAttack, $01
0007488D E111                       	smpsAlterNote       $11
0007488F E701                       	dc.b	smpsNoAttack, $01
00074891 E10D                       	smpsAlterNote       $0D
00074893 B80D                       	dc.b	nG4, $0D
00074895 E10A                       	smpsAlterNote       $0A
00074897 E701                       	dc.b	smpsNoAttack, $01
00074899 E107                       	smpsAlterNote       $07
0007489B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007489F E10D                       	smpsAlterNote       $0D
000748A1 E701                       	dc.b	smpsNoAttack, $01
000748A3 E111                       	smpsAlterNote       $11
000748A5 E701                       	dc.b	smpsNoAttack, $01
000748A7 E110                       	smpsAlterNote       $10
000748A9 E701                       	dc.b	smpsNoAttack, $01
000748AB E10A                       	smpsAlterNote       $0A
000748AD E701                       	dc.b	smpsNoAttack, $01
000748AF E106                       	smpsAlterNote       $06
000748B1 E701                       	dc.b	smpsNoAttack, $01
000748B3 E10A                       	smpsAlterNote       $0A
000748B5 E701                       	dc.b	smpsNoAttack, $01
000748B7 E10D                       	smpsAlterNote       $0D
000748B9 E701                       	dc.b	smpsNoAttack, $01
000748BB E111                       	smpsAlterNote       $11
000748BD E701                       	dc.b	smpsNoAttack, $01
000748BF E10D                       	smpsAlterNote       $0D
000748C1 E701                       	dc.b	smpsNoAttack, $01
000748C3 E107                       	smpsAlterNote       $07
000748C5 E701                       	dc.b	smpsNoAttack, $01
000748C7 E106                       	smpsAlterNote       $06
000748C9 E701                       	dc.b	smpsNoAttack, $01
000748CB E10A                       	smpsAlterNote       $0A
000748CD E701                       	dc.b	smpsNoAttack, $01
000748CF E110                       	smpsAlterNote       $10
000748D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000748D5 E10D                       	smpsAlterNote       $0D
000748D7 E701                       	dc.b	smpsNoAttack, $01
000748D9 E10F                       	smpsAlterNote       $0F
000748DB BA0D                       	dc.b	nA4, $0D
000748DD E10C                       	smpsAlterNote       $0C
000748DF E701                       	dc.b	smpsNoAttack, $01
000748E1 E108                       	smpsAlterNote       $08
000748E3 E701                       	dc.b	smpsNoAttack, $01
000748E5 E109                       	smpsAlterNote       $09
000748E7 E701                       	dc.b	smpsNoAttack, $01
000748E9 E10F                       	smpsAlterNote       $0F
000748EB E701                       	dc.b	smpsNoAttack, $01
000748ED E113                       	smpsAlterNote       $13
000748EF E701                       	dc.b	smpsNoAttack, $01
000748F1 E10F                       	smpsAlterNote       $0F
000748F3 E701                       	dc.b	smpsNoAttack, $01
000748F5 E10C                       	smpsAlterNote       $0C
000748F7 E701                       	dc.b	smpsNoAttack, $01
000748F9 E108                       	smpsAlterNote       $08
000748FB E701                       	dc.b	smpsNoAttack, $01
000748FD E10C                       	smpsAlterNote       $0C
000748FF E701                       	dc.b	smpsNoAttack, $01
00074901 E112                       	smpsAlterNote       $12
00074903 E701                       	dc.b	smpsNoAttack, $01
00074905 E113                       	smpsAlterNote       $13
00074907 E701                       	dc.b	smpsNoAttack, $01
00074909 E10F                       	smpsAlterNote       $0F
0007490B E701                       	dc.b	smpsNoAttack, $01
0007490D E109                       	smpsAlterNote       $09
0007490F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074913 E10C                       	smpsAlterNote       $0C
00074915 E701                       	dc.b	smpsNoAttack, $01
00074917 E112                       	smpsAlterNote       $12
00074919 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007491D E10C                       	smpsAlterNote       $0C
0007491F E701                       	dc.b	smpsNoAttack, $01
00074921 E109                       	smpsAlterNote       $09
00074923 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074927 E10F                       	smpsAlterNote       $0F
00074929 E701                       	dc.b	smpsNoAttack, $01
0007492B E113                       	smpsAlterNote       $13
0007492D E701                       	dc.b	smpsNoAttack, $01
0007492F E112                       	smpsAlterNote       $12
00074931 E701                       	dc.b	smpsNoAttack, $01
00074933 E10C                       	smpsAlterNote       $0C
00074935 E701                       	dc.b	smpsNoAttack, $01
00074937 E109                       	smpsAlterNote       $09
00074939 8001                       	dc.b	nRst, $01
0007493B E10D                       	smpsAlterNote       $0D
0007493D B60A                       	dc.b	nF4, $0A
0007493F E10C                       	smpsAlterNote       $0C
00074941 B506 8001                  	dc.b	nE4, $06, nRst, $01
00074945 E10B                       	smpsAlterNote       $0B
00074947 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0007494B E10C                       	smpsAlterNote       $0C
0007494D B503                       	dc.b	nE4, $03
0007494F E10D                       	smpsAlterNote       $0D
00074951 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0007495B E10C                       	smpsAlterNote       $0C
0007495D E701                       	dc.b	smpsNoAttack, $01
0007495F E108                       	smpsAlterNote       $08
00074961 E701                       	dc.b	smpsNoAttack, $01
00074963 E10C                       	smpsAlterNote       $0C
00074965 E701                       	dc.b	smpsNoAttack, $01
00074967 E112                       	smpsAlterNote       $12
00074969 E701                       	dc.b	smpsNoAttack, $01
0007496B E113                       	smpsAlterNote       $13
0007496D E701                       	dc.b	smpsNoAttack, $01
0007496F E10F                       	smpsAlterNote       $0F
00074971 E701                       	dc.b	smpsNoAttack, $01
00074973 E109                       	smpsAlterNote       $09
00074975 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074979 E10C                       	smpsAlterNote       $0C
0007497B E701                       	dc.b	smpsNoAttack, $01
0007497D E112                       	smpsAlterNote       $12
0007497F E701                       	dc.b	smpsNoAttack, $01
00074981 E113                       	smpsAlterNote       $13
00074983 8001                       	dc.b	nRst, $01
00074985 E10D                       	smpsAlterNote       $0D
00074987 C20D                       	dc.b	nF5, $0D
00074989 E10A                       	smpsAlterNote       $0A
0007498B E701                       	dc.b	smpsNoAttack, $01
0007498D E106                       	smpsAlterNote       $06
0007498F E701                       	dc.b	smpsNoAttack, $01
00074991 E10A                       	smpsAlterNote       $0A
00074993 E701                       	dc.b	smpsNoAttack, $01
00074995 E110                       	smpsAlterNote       $10
00074997 E701                       	dc.b	smpsNoAttack, $01
00074999 E111                       	smpsAlterNote       $11
0007499B E701                       	dc.b	smpsNoAttack, $01
0007499D E10D                       	smpsAlterNote       $0D
0007499F E701                       	dc.b	smpsNoAttack, $01
000749A1 E107                       	smpsAlterNote       $07
000749A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000749A7 E10A                       	smpsAlterNote       $0A
000749A9 E701                       	dc.b	smpsNoAttack, $01
000749AB E110                       	smpsAlterNote       $10
000749AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000749B1 E10A                       	smpsAlterNote       $0A
000749B3 E701                       	dc.b	smpsNoAttack, $01
000749B5 E107                       	smpsAlterNote       $07
000749B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000749BB E10D                       	smpsAlterNote       $0D
000749BD E701                       	dc.b	smpsNoAttack, $01
000749BF E111                       	smpsAlterNote       $11
000749C1 E701                       	dc.b	smpsNoAttack, $01
000749C3 E110                       	smpsAlterNote       $10
000749C5 E701                       	dc.b	smpsNoAttack, $01
000749C7 E10A                       	smpsAlterNote       $0A
000749C9 E701                       	dc.b	smpsNoAttack, $01
000749CB E106                       	smpsAlterNote       $06
000749CD E701                       	dc.b	smpsNoAttack, $01
000749CF E10A                       	smpsAlterNote       $0A
000749D1 E701                       	dc.b	smpsNoAttack, $01
000749D3 E10D                       	smpsAlterNote       $0D
000749D5 E701                       	dc.b	smpsNoAttack, $01
000749D7 E111                       	smpsAlterNote       $11
000749D9 E701                       	dc.b	smpsNoAttack, $01
000749DB E10D                       	smpsAlterNote       $0D
000749DD E701                       	dc.b	smpsNoAttack, $01
000749DF E107                       	smpsAlterNote       $07
000749E1 E701                       	dc.b	smpsNoAttack, $01
000749E3 E106                       	smpsAlterNote       $06
000749E5 E701                       	dc.b	smpsNoAttack, $01
000749E7 E10A                       	smpsAlterNote       $0A
000749E9 E701                       	dc.b	smpsNoAttack, $01
000749EB E110                       	smpsAlterNote       $10
000749ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000749F1 E10D                       	smpsAlterNote       $0D
000749F3 E701                       	dc.b	smpsNoAttack, $01
000749F5 E107                       	smpsAlterNote       $07
000749F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000749FB E10D                       	smpsAlterNote       $0D
000749FD E701                       	dc.b	smpsNoAttack, $01
000749FF E110                       	smpsAlterNote       $10
00074A01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074A05 E10A                       	smpsAlterNote       $0A
00074A07 E701                       	dc.b	smpsNoAttack, $01
00074A09 E106                       	smpsAlterNote       $06
00074A0B E701                       	dc.b	smpsNoAttack, $01
00074A0D E107                       	smpsAlterNote       $07
00074A0F E701                       	dc.b	smpsNoAttack, $01
00074A11 E10D                       	smpsAlterNote       $0D
00074A13 E701                       	dc.b	smpsNoAttack, $01
00074A15 E111                       	smpsAlterNote       $11
00074A17 E701                       	dc.b	smpsNoAttack, $01
00074A19 E10D                       	smpsAlterNote       $0D
00074A1B E701                       	dc.b	smpsNoAttack, $01
00074A1D E10A                       	smpsAlterNote       $0A
00074A1F E701                       	dc.b	smpsNoAttack, $01
00074A21 E107                       	smpsAlterNote       $07
00074A23 8001                       	dc.b	nRst, $01
00074A25 E10D                       	smpsAlterNote       $0D
00074A27 C206 8001                  	dc.b	nF5, $06, nRst, $01
00074A2D E601                       	smpsAlterVol        $01
00074A2F E110                       	smpsAlterNote       $10
00074A31 BB0D                       	dc.b	nBb4, $0D
00074A33 E10A                       	smpsAlterNote       $0A
00074A35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074A39 E110                       	smpsAlterNote       $10
00074A3B E701                       	dc.b	smpsNoAttack, $01
00074A3D E113                       	smpsAlterNote       $13
00074A3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074A43 E10D                       	smpsAlterNote       $0D
00074A45 E701                       	dc.b	smpsNoAttack, $01
00074A47 E109                       	smpsAlterNote       $09
00074A49 E701                       	dc.b	smpsNoAttack, $01
00074A4B E10A                       	smpsAlterNote       $0A
00074A4D E701                       	dc.b	smpsNoAttack, $01
00074A4F E110                       	smpsAlterNote       $10
00074A51 E701                       	dc.b	smpsNoAttack, $01
00074A53 E114                       	smpsAlterNote       $14
00074A55 E701                       	dc.b	smpsNoAttack, $01
00074A57 E110                       	smpsAlterNote       $10
00074A59 E701                       	dc.b	smpsNoAttack, $01
00074A5B E10D                       	smpsAlterNote       $0D
00074A5D E701                       	dc.b	smpsNoAttack, $01
00074A5F E109                       	smpsAlterNote       $09
00074A61 E701                       	dc.b	smpsNoAttack, $01
00074A63 E10A                       	smpsAlterNote       $0A
00074A65 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00074A69 E107                       	smpsAlterNote       $07
00074A6B E701                       	dc.b	smpsNoAttack, $01
00074A6D E103                       	smpsAlterNote       $03
00074A6F E701                       	dc.b	smpsNoAttack, $01
00074A71 E107                       	smpsAlterNote       $07
00074A73 E701                       	dc.b	smpsNoAttack, $01
00074A75 E10D                       	smpsAlterNote       $0D
00074A77 E701                       	dc.b	smpsNoAttack, $01
00074A79 E10E                       	smpsAlterNote       $0E
00074A7B E701                       	dc.b	smpsNoAttack, $01
00074A7D E10A                       	smpsAlterNote       $0A
00074A7F E701                       	dc.b	smpsNoAttack, $01
00074A81 E104                       	smpsAlterNote       $04
00074A83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074A87 E107                       	smpsAlterNote       $07
00074A89 E701                       	dc.b	smpsNoAttack, $01
00074A8B E10D                       	smpsAlterNote       $0D
00074A8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074A91 E107                       	smpsAlterNote       $07
00074A93 E701                       	dc.b	smpsNoAttack, $01
00074A95 E104                       	smpsAlterNote       $04
00074A97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074A9B E10B                       	smpsAlterNote       $0B
00074A9D BF0D                       	dc.b	nD5, $0D
00074A9F E108                       	smpsAlterNote       $08
00074AA1 E701                       	dc.b	smpsNoAttack, $01
00074AA3 E105                       	smpsAlterNote       $05
00074AA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074AA9 E10B                       	smpsAlterNote       $0B
00074AAB E701                       	dc.b	smpsNoAttack, $01
00074AAD E10F                       	smpsAlterNote       $0F
00074AAF E701                       	dc.b	smpsNoAttack, $01
00074AB1 E10E                       	smpsAlterNote       $0E
00074AB3 E701                       	dc.b	smpsNoAttack, $01
00074AB5 E108                       	smpsAlterNote       $08
00074AB7 E701                       	dc.b	smpsNoAttack, $01
00074AB9 E104                       	smpsAlterNote       $04
00074ABB E701                       	dc.b	smpsNoAttack, $01
00074ABD E108                       	smpsAlterNote       $08
00074ABF E701                       	dc.b	smpsNoAttack, $01
00074AC1 E10B                       	smpsAlterNote       $0B
00074AC3 E701                       	dc.b	smpsNoAttack, $01
00074AC5 E10F                       	smpsAlterNote       $0F
00074AC7 E701                       	dc.b	smpsNoAttack, $01
00074AC9 E10B                       	smpsAlterNote       $0B
00074ACB E701                       	dc.b	smpsNoAttack, $01
00074ACD E105                       	smpsAlterNote       $05
00074ACF E701                       	dc.b	smpsNoAttack, $01
00074AD1 E104                       	smpsAlterNote       $04
00074AD3 E701                       	dc.b	smpsNoAttack, $01
00074AD5 E105                       	smpsAlterNote       $05
00074AD7 8001                       	dc.b	nRst, $01
00074AD9 E10C                       	smpsAlterNote       $0C
00074ADB C10C                       	dc.b	nE5, $0C
00074ADD E10D                       	smpsAlterNote       $0D
00074ADF C201                       	dc.b	nF5, $01
00074AE1 E10E                       	smpsAlterNote       $0E
00074AE3 C301 8001                  	dc.b	nFs5, $01, nRst, $01
00074AE7 E10D                       	smpsAlterNote       $0D
00074AE9 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00074AED E10A                       	smpsAlterNote       $0A
00074AEF E701                       	dc.b	smpsNoAttack, $01
00074AF1 E106                       	smpsAlterNote       $06
00074AF3 E701                       	dc.b	smpsNoAttack, $01
00074AF5 E10A                       	smpsAlterNote       $0A
00074AF7 E701                       	dc.b	smpsNoAttack, $01
00074AF9 E10D                       	smpsAlterNote       $0D
00074AFB E701                       	dc.b	smpsNoAttack, $01
00074AFD E111                       	smpsAlterNote       $11
00074AFF E701                       	dc.b	smpsNoAttack, $01
00074B01 E10D                       	smpsAlterNote       $0D
00074B03 E701                       	dc.b	smpsNoAttack, $01
00074B05 E107                       	smpsAlterNote       $07
00074B07 E701                       	dc.b	smpsNoAttack, $01
00074B09 E106                       	smpsAlterNote       $06
00074B0B E701                       	dc.b	smpsNoAttack, $01
00074B0D E10A                       	smpsAlterNote       $0A
00074B0F E701                       	dc.b	smpsNoAttack, $01
00074B11 E110                       	smpsAlterNote       $10
00074B13 E701                       	dc.b	smpsNoAttack, $01
00074B15 E111                       	smpsAlterNote       $11
00074B17 8001                       	dc.b	nRst, $01
00074B19 E10D                       	smpsAlterNote       $0D
00074B1B C40D                       	dc.b	nG5, $0D
00074B1D E10A                       	smpsAlterNote       $0A
00074B1F E701                       	dc.b	smpsNoAttack, $01
00074B21 E106                       	smpsAlterNote       $06
00074B23 E701                       	dc.b	smpsNoAttack, $01
00074B25 E10A                       	smpsAlterNote       $0A
00074B27 E701                       	dc.b	smpsNoAttack, $01
00074B29 E10D                       	smpsAlterNote       $0D
00074B2B E701                       	dc.b	smpsNoAttack, $01
00074B2D E10C                       	smpsAlterNote       $0C
00074B2F C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00074B3B 8001                       	dc.b	nRst, $01
00074B3D E10D                       	smpsAlterNote       $0D
00074B3F C20D                       	dc.b	nF5, $0D
00074B41 E10A                       	smpsAlterNote       $0A
00074B43 E701                       	dc.b	smpsNoAttack, $01
00074B45 E106                       	smpsAlterNote       $06
00074B47 E701                       	dc.b	smpsNoAttack, $01
00074B49 E10A                       	smpsAlterNote       $0A
00074B4B E701                       	dc.b	smpsNoAttack, $01
00074B4D E110                       	smpsAlterNote       $10
00074B4F E701                       	dc.b	smpsNoAttack, $01
00074B51 E111                       	smpsAlterNote       $11
00074B53 E701                       	dc.b	smpsNoAttack, $01
00074B55 E10D                       	smpsAlterNote       $0D
00074B57 E701                       	dc.b	smpsNoAttack, $01
00074B59 E107                       	smpsAlterNote       $07
00074B5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074B5F E10A                       	smpsAlterNote       $0A
00074B61 E701                       	dc.b	smpsNoAttack, $01
00074B63 E110                       	smpsAlterNote       $10
00074B65 E701                       	dc.b	smpsNoAttack, $01
00074B67 E111                       	smpsAlterNote       $11
00074B69 8001                       	dc.b	nRst, $01
00074B6B E10F                       	smpsAlterNote       $0F
00074B6D C60A                       	dc.b	nA5, $0A
00074B6F E10D                       	smpsAlterNote       $0D
00074B71 C406 8001                  	dc.b	nG5, $06, nRst, $01
00074B75 E10C                       	smpsAlterNote       $0C
00074B77 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00074B83 8001                       	dc.b	nRst, $01
00074B85 E10D                       	smpsAlterNote       $0D
00074B87 C20D                       	dc.b	nF5, $0D
00074B89 E107                       	smpsAlterNote       $07
00074B8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074B8F E10A                       	smpsAlterNote       $0A
00074B91 E701                       	dc.b	smpsNoAttack, $01
00074B93 E110                       	smpsAlterNote       $10
00074B95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074B99 E10A                       	smpsAlterNote       $0A
00074B9B E701                       	dc.b	smpsNoAttack, $01
00074B9D E107                       	smpsAlterNote       $07
00074B9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074BA3 E10D                       	smpsAlterNote       $0D
00074BA5 E701                       	dc.b	smpsNoAttack, $01
00074BA7 E111                       	smpsAlterNote       $11
00074BA9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00074BAD E10D                       	smpsAlterNote       $0D
00074BAF C40D                       	dc.b	nG5, $0D
00074BB1 E107                       	smpsAlterNote       $07
00074BB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074BB7 E10A                       	smpsAlterNote       $0A
00074BB9 E701                       	dc.b	smpsNoAttack, $01
00074BBB E10D                       	smpsAlterNote       $0D
00074BBD 8001                       	dc.b	nRst, $01
00074BBF E10C                       	smpsAlterNote       $0C
00074BC1 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00074BCD E10D                       	smpsAlterNote       $0D
00074BCF C20E                       	dc.b	nF5, $0E
00074BD1 E107                       	smpsAlterNote       $07
00074BD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00074BD7 E10D                       	smpsAlterNote       $0D
00074BD9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00074BDF E0C0                       	smpsPan             panCenter, $00
00074BE1 E603                       	smpsAlterVol        $03
00074BE3 E108                       	smpsAlterNote       $08
00074BE5 B406                       	dc.b	nEb4, $06
00074BE7 E10C                       	smpsAlterNote       $0C
00074BE9 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00074BED E108                       	smpsAlterNote       $08
00074BEF B403                       	dc.b	nEb4, $03
00074BF1 E109                       	smpsAlterNote       $09
00074BF3 B803 8001                  	dc.b	nG4, $03, nRst, $01
00074BF7 E10C                       	smpsAlterNote       $0C
00074BF9 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00074C01 03                         	dc.b	$03
00074C02 E6FD                       	smpsAlterVol        $FD
00074C04 F6F1 F4                    	smpsJump            music84_Jump00
00074C07                            
00074C07                            ; PSG1 Data
00074C07                            music84_PSG1:
00074C07 E1FD                       	smpsAlterNote       $FD
00074C09 EC04                       	smpsPSGAlterVol     $04
00074C0B 9203                       	dc.b	nF1, $03
00074C0D E1FE                       	smpsAlterNote       $FE
00074C0F 9603                       	dc.b	nA1, $03
00074C11 EC04                       	smpsPSGAlterVol     $04
00074C13 E701                       	dc.b	smpsNoAttack, $01
00074C15 E1FF                       	smpsAlterNote       $FF
00074C17 ECFC                       	smpsPSGAlterVol     $FC
00074C19 9B03                       	dc.b	nD2, $03
00074C1B E1FD                       	smpsAlterNote       $FD
00074C1D 9403                       	dc.b	nG1, $03
00074C1F EC04                       	smpsPSGAlterVol     $04
00074C21 E701                       	dc.b	smpsNoAttack, $01
00074C23 E1FE                       	smpsAlterNote       $FE
00074C25 ECFC                       	smpsPSGAlterVol     $FC
00074C27 9703                       	dc.b	nBb1, $03
00074C29 E1FF                       	smpsAlterNote       $FF
00074C2B 9B03                       	dc.b	nD2, $03
00074C2D EC04                       	smpsPSGAlterVol     $04
00074C2F E701                       	dc.b	smpsNoAttack, $01
00074C31 E1FE                       	smpsAlterNote       $FE
00074C33 ECFC                       	smpsPSGAlterVol     $FC
00074C35 A002                       	dc.b	nG2, $02
00074C37 EC04                       	smpsPSGAlterVol     $04
00074C39 E701                       	dc.b	smpsNoAttack, $01
00074C3B E1FF                       	smpsAlterNote       $FF
00074C3D ECFC                       	smpsPSGAlterVol     $FC
00074C3F A203                       	dc.b	nA2, $03
00074C41 EC0B                       	smpsPSGAlterVol     $0B
00074C43 800A                       	dc.b	nRst, $0A
00074C45 E105                       	smpsAlterNote       $05
00074C47 01                         	dc.b	$01
00074C48 E1FC                       	smpsAlterNote       $FC
00074C4A 01                         	dc.b	$01
00074C4B E105                       	smpsAlterNote       $05
00074C4D 01                         	dc.b	$01
00074C4E E1FD                       	smpsAlterNote       $FD
00074C50 01                         	dc.b	$01
00074C51 E105                       	smpsAlterNote       $05
00074C53 01                         	dc.b	$01
00074C54 E1FD                       	smpsAlterNote       $FD
00074C56 01                         	dc.b	$01
00074C57 E1FA                       	smpsAlterNote       $FA
00074C59 01                         	dc.b	$01
00074C5A E1FC                       	smpsAlterNote       $FC
00074C5C 01                         	dc.b	$01
00074C5D E105                       	smpsAlterNote       $05
00074C5F 01                         	dc.b	$01
00074C60 E108                       	smpsAlterNote       $08
00074C62 0101                       	dc.b	$01, $01
00074C64 E105                       	smpsAlterNote       $05
00074C66 01                         	dc.b	$01
00074C67 E1FA                       	smpsAlterNote       $FA
00074C69 0101                       	dc.b	$01, $01
00074C6B E1FD                       	smpsAlterNote       $FD
00074C6D 01                         	dc.b	$01
00074C6E E105                       	smpsAlterNote       $05
00074C70 01                         	dc.b	$01
00074C71 E108                       	smpsAlterNote       $08
00074C73 01                         	dc.b	$01
00074C74 E105                       	smpsAlterNote       $05
00074C76 01                         	dc.b	$01
00074C77 E1FC                       	smpsAlterNote       $FC
00074C79 01                         	dc.b	$01
00074C7A E105                       	smpsAlterNote       $05
00074C7C 01                         	dc.b	$01
00074C7D E1FD                       	smpsAlterNote       $FD
00074C7F 01                         	dc.b	$01
00074C80                            
00074C80                            music84_Jump07:
00074C80 E105                       	smpsAlterNote       $05
00074C82 8001                       	dc.b	nRst, $01
00074C84 E1FD                       	smpsAlterNote       $FD
00074C86 01                         	dc.b	$01
00074C87 E1FA                       	smpsAlterNote       $FA
00074C89 01                         	dc.b	$01
00074C8A E1FC                       	smpsAlterNote       $FC
00074C8C 01                         	dc.b	$01
00074C8D E1FD                       	smpsAlterNote       $FD
00074C8F ECF5                       	smpsPSGAlterVol     $F5
00074C91 9206                       	dc.b	nF1, $06
00074C93 EC04                       	smpsPSGAlterVol     $04
00074C95 E701                       	dc.b	smpsNoAttack, $01
00074C97 EC07                       	smpsPSGAlterVol     $07
00074C99 8003                       	dc.b	nRst, $03
00074C9B ECF5                       	smpsPSGAlterVol     $F5
00074C9D 9206                       	dc.b	nF1, $06
00074C9F EC04                       	smpsPSGAlterVol     $04
00074CA1 E701                       	dc.b	smpsNoAttack, $01
00074CA3 EC07                       	smpsPSGAlterVol     $07
00074CA5 8006                       	dc.b	nRst, $06
00074CA7 E100                       	smpsAlterNote       $00
00074CA9 01                         	dc.b	$01
00074CAA E104                       	smpsAlterNote       $04
00074CAC 01                         	dc.b	$01
00074CAD E100                       	smpsAlterNote       $00
00074CAF 01                         	dc.b	$01
00074CB0 E1FB                       	smpsAlterNote       $FB
00074CB2 01                         	dc.b	$01
00074CB3 E1FD                       	smpsAlterNote       $FD
00074CB5 ECF5                       	smpsPSGAlterVol     $F5
00074CB7 9406                       	dc.b	nG1, $06
00074CB9 EC04                       	smpsPSGAlterVol     $04
00074CBB E701                       	dc.b	smpsNoAttack, $01
00074CBD EC07                       	smpsPSGAlterVol     $07
00074CBF 8003                       	dc.b	nRst, $03
00074CC1 ECF5                       	smpsPSGAlterVol     $F5
00074CC3 9407                       	dc.b	nG1, $07
00074CC5 EC0B                       	smpsPSGAlterVol     $0B
00074CC7 8006                       	dc.b	nRst, $06
00074CC9 E100                       	smpsAlterNote       $00
00074CCB 01                         	dc.b	$01
00074CCC E103                       	smpsAlterNote       $03
00074CCE 0101                       	dc.b	$01, $01
00074CD0 E1FD                       	smpsAlterNote       $FD
00074CD2 01                         	dc.b	$01
00074CD3 ECF5                       	smpsPSGAlterVol     $F5
00074CD5 9207                       	dc.b	nF1, $07
00074CD7 EC0B                       	smpsPSGAlterVol     $0B
00074CD9 8004                       	dc.b	nRst, $04
00074CDB ECF5                       	smpsPSGAlterVol     $F5
00074CDD 9206                       	dc.b	nF1, $06
00074CDF EC04                       	smpsPSGAlterVol     $04
00074CE1 E701                       	dc.b	smpsNoAttack, $01
00074CE3 EC07                       	smpsPSGAlterVol     $07
00074CE5 8006                       	dc.b	nRst, $06
00074CE7 E103                       	smpsAlterNote       $03
00074CE9 01                         	dc.b	$01
00074CEA E104                       	smpsAlterNote       $04
00074CEC 01                         	dc.b	$01
00074CED E100                       	smpsAlterNote       $00
00074CEF 01                         	dc.b	$01
00074CF0 E1FA                       	smpsAlterNote       $FA
00074CF2 01                         	dc.b	$01
00074CF3 E1FD                       	smpsAlterNote       $FD
00074CF5 ECF5                       	smpsPSGAlterVol     $F5
00074CF7 9206                       	dc.b	nF1, $06
00074CF9 EC04                       	smpsPSGAlterVol     $04
00074CFB E701                       	dc.b	smpsNoAttack, $01
00074CFD EC07                       	smpsPSGAlterVol     $07
00074CFF 8003                       	dc.b	nRst, $03
00074D01 ECF5                       	smpsPSGAlterVol     $F5
00074D03 9106                       	dc.b	nE1, $06
00074D05 EC04                       	smpsPSGAlterVol     $04
00074D07 E701                       	dc.b	smpsNoAttack, $01
00074D09 EC07                       	smpsPSGAlterVol     $07
00074D0B 8006                       	dc.b	nRst, $06
00074D0D E100                       	smpsAlterNote       $00
00074D0F 01                         	dc.b	$01
00074D10 E104                       	smpsAlterNote       $04
00074D12 01                         	dc.b	$01
00074D13 E100                       	smpsAlterNote       $00
00074D15 01                         	dc.b	$01
00074D16 E1FD                       	smpsAlterNote       $FD
00074D18 01                         	dc.b	$01
00074D19 ECF5                       	smpsPSGAlterVol     $F5
00074D1B 9206                       	dc.b	nF1, $06
00074D1D EC04                       	smpsPSGAlterVol     $04
00074D1F E701                       	dc.b	smpsNoAttack, $01
00074D21 EC07                       	smpsPSGAlterVol     $07
00074D23 8003                       	dc.b	nRst, $03
00074D25 ECF5                       	smpsPSGAlterVol     $F5
00074D27 9207                       	dc.b	nF1, $07
00074D29 EC0B                       	smpsPSGAlterVol     $0B
00074D2B 8007                       	dc.b	nRst, $07
00074D2D E103                       	smpsAlterNote       $03
00074D2F 0101                       	dc.b	$01, $01
00074D31 E1FD                       	smpsAlterNote       $FD
00074D33 01                         	dc.b	$01
00074D34 E1FB                       	smpsAlterNote       $FB
00074D36 01                         	dc.b	$01
00074D37 E1FD                       	smpsAlterNote       $FD
00074D39 ECF5                       	smpsPSGAlterVol     $F5
00074D3B 9406                       	dc.b	nG1, $06
00074D3D EC0B                       	smpsPSGAlterVol     $0B
00074D3F 8004                       	dc.b	nRst, $04
00074D41 ECF5                       	smpsPSGAlterVol     $F5
00074D43 9406                       	dc.b	nG1, $06
00074D45 EC04                       	smpsPSGAlterVol     $04
00074D47 E701                       	dc.b	smpsNoAttack, $01
00074D49 EC07                       	smpsPSGAlterVol     $07
00074D4B 8006                       	dc.b	nRst, $06
00074D4D E100                       	smpsAlterNote       $00
00074D4F 01                         	dc.b	$01
00074D50 E104                       	smpsAlterNote       $04
00074D52 01                         	dc.b	$01
00074D53 E100                       	smpsAlterNote       $00
00074D55 01                         	dc.b	$01
00074D56 E1F9                       	smpsAlterNote       $F9
00074D58 01                         	dc.b	$01
00074D59 E1FD                       	smpsAlterNote       $FD
00074D5B ECF5                       	smpsPSGAlterVol     $F5
00074D5D 9206                       	dc.b	nF1, $06
00074D5F EC04                       	smpsPSGAlterVol     $04
00074D61 E701                       	dc.b	smpsNoAttack, $01
00074D63 EC07                       	smpsPSGAlterVol     $07
00074D65 8003                       	dc.b	nRst, $03
00074D67 ECF5                       	smpsPSGAlterVol     $F5
00074D69 9207                       	dc.b	nF1, $07
00074D6B EC0B                       	smpsPSGAlterVol     $0B
00074D6D 8006                       	dc.b	nRst, $06
00074D6F E100                       	smpsAlterNote       $00
00074D71 01                         	dc.b	$01
00074D72 E104                       	smpsAlterNote       $04
00074D74 01                         	dc.b	$01
00074D75 E103                       	smpsAlterNote       $03
00074D77 01                         	dc.b	$01
00074D78 E1FD                       	smpsAlterNote       $FD
00074D7A 01                         	dc.b	$01
00074D7B ECF5                       	smpsPSGAlterVol     $F5
00074D7D 9207                       	dc.b	nF1, $07
00074D7F EC0B                       	smpsPSGAlterVol     $0B
00074D81 8004                       	dc.b	nRst, $04
00074D83 ECF5                       	smpsPSGAlterVol     $F5
00074D85 9206                       	dc.b	nF1, $06
00074D87 EC0B                       	smpsPSGAlterVol     $0B
00074D89 8007                       	dc.b	nRst, $07
00074D8B E103                       	smpsAlterNote       $03
00074D8D 0101                       	dc.b	$01, $01
00074D8F E100                       	smpsAlterNote       $00
00074D91 01                         	dc.b	$01
00074D92 E1FA                       	smpsAlterNote       $FA
00074D94 01                         	dc.b	$01
00074D95 E1FD                       	smpsAlterNote       $FD
00074D97 ECF5                       	smpsPSGAlterVol     $F5
00074D99 9206                       	dc.b	nF1, $06
00074D9B EC04                       	smpsPSGAlterVol     $04
00074D9D E701                       	dc.b	smpsNoAttack, $01
00074D9F EC07                       	smpsPSGAlterVol     $07
00074DA1 8003                       	dc.b	nRst, $03
00074DA3 ECF5                       	smpsPSGAlterVol     $F5
00074DA5 9206                       	dc.b	nF1, $06
00074DA7 EC04                       	smpsPSGAlterVol     $04
00074DA9 E701                       	dc.b	smpsNoAttack, $01
00074DAB EC07                       	smpsPSGAlterVol     $07
00074DAD 8006                       	dc.b	nRst, $06
00074DAF E100                       	smpsAlterNote       $00
00074DB1 01                         	dc.b	$01
00074DB2 E104                       	smpsAlterNote       $04
00074DB4 01                         	dc.b	$01
00074DB5 E100                       	smpsAlterNote       $00
00074DB7 01                         	dc.b	$01
00074DB8 E1FD                       	smpsAlterNote       $FD
00074DBA 01                         	dc.b	$01
00074DBB ECF5                       	smpsPSGAlterVol     $F5
00074DBD 9206                       	dc.b	nF1, $06
00074DBF EC04                       	smpsPSGAlterVol     $04
00074DC1 E701                       	dc.b	smpsNoAttack, $01
00074DC3 EC07                       	smpsPSGAlterVol     $07
00074DC5 8003                       	dc.b	nRst, $03
00074DC7 ECF5                       	smpsPSGAlterVol     $F5
00074DC9 9207                       	dc.b	nF1, $07
00074DCB EC0B                       	smpsPSGAlterVol     $0B
00074DCD 8007                       	dc.b	nRst, $07
00074DCF E103                       	smpsAlterNote       $03
00074DD1 0101                       	dc.b	$01, $01
00074DD3 E1FD                       	smpsAlterNote       $FD
00074DD5 01                         	dc.b	$01
00074DD6 E1FA                       	smpsAlterNote       $FA
00074DD8 01                         	dc.b	$01
00074DD9 E1FD                       	smpsAlterNote       $FD
00074DDB ECF5                       	smpsPSGAlterVol     $F5
00074DDD 9206                       	dc.b	nF1, $06
00074DDF EC0B                       	smpsPSGAlterVol     $0B
00074DE1 8004                       	dc.b	nRst, $04
00074DE3 ECF5                       	smpsPSGAlterVol     $F5
00074DE5 9206                       	dc.b	nF1, $06
00074DE7 EC04                       	smpsPSGAlterVol     $04
00074DE9 E701                       	dc.b	smpsNoAttack, $01
00074DEB EC07                       	smpsPSGAlterVol     $07
00074DED 8006                       	dc.b	nRst, $06
00074DEF E103                       	smpsAlterNote       $03
00074DF1 01                         	dc.b	$01
00074DF2 E104                       	smpsAlterNote       $04
00074DF4 01                         	dc.b	$01
00074DF5 E100                       	smpsAlterNote       $00
00074DF7 01                         	dc.b	$01
00074DF8 E1FA                       	smpsAlterNote       $FA
00074DFA 01                         	dc.b	$01
00074DFB E1FD                       	smpsAlterNote       $FD
00074DFD ECF5                       	smpsPSGAlterVol     $F5
00074DFF 9206                       	dc.b	nF1, $06
00074E01 EC04                       	smpsPSGAlterVol     $04
00074E03 E701                       	dc.b	smpsNoAttack, $01
00074E05 EC07                       	smpsPSGAlterVol     $07
00074E07 8003                       	dc.b	nRst, $03
00074E09 ECF5                       	smpsPSGAlterVol     $F5
00074E0B 9206                       	dc.b	nF1, $06
00074E0D EC04                       	smpsPSGAlterVol     $04
00074E0F E701                       	dc.b	smpsNoAttack, $01
00074E11 EC07                       	smpsPSGAlterVol     $07
00074E13 8006                       	dc.b	nRst, $06
00074E15 E100                       	smpsAlterNote       $00
00074E17 01                         	dc.b	$01
00074E18 E104                       	smpsAlterNote       $04
00074E1A 01                         	dc.b	$01
00074E1B E103                       	smpsAlterNote       $03
00074E1D 01                         	dc.b	$01
00074E1E E1FD                       	smpsAlterNote       $FD
00074E20 01                         	dc.b	$01
00074E21 ECF5                       	smpsPSGAlterVol     $F5
00074E23 9107                       	dc.b	nE1, $07
00074E25 EC0B                       	smpsPSGAlterVol     $0B
00074E27 8004                       	dc.b	nRst, $04
00074E29 ECF5                       	smpsPSGAlterVol     $F5
00074E2B 9106                       	dc.b	nE1, $06
00074E2D EC0B                       	smpsPSGAlterVol     $0B
00074E2F 8007                       	dc.b	nRst, $07
00074E31 E103                       	smpsAlterNote       $03
00074E33 0101                       	dc.b	$01, $01
00074E35 E100                       	smpsAlterNote       $00
00074E37 01                         	dc.b	$01
00074E38 E1FA                       	smpsAlterNote       $FA
00074E3A 01                         	dc.b	$01
00074E3B E1FD                       	smpsAlterNote       $FD
00074E3D ECF5                       	smpsPSGAlterVol     $F5
00074E3F 9106                       	dc.b	nE1, $06
00074E41 EC04                       	smpsPSGAlterVol     $04
00074E43 E701                       	dc.b	smpsNoAttack, $01
00074E45 EC07                       	smpsPSGAlterVol     $07
00074E47 8003                       	dc.b	nRst, $03
00074E49 ECF5                       	smpsPSGAlterVol     $F5
00074E4B 9106                       	dc.b	nE1, $06
00074E4D EC04                       	smpsPSGAlterVol     $04
00074E4F E701                       	dc.b	smpsNoAttack, $01
00074E51 EC07                       	smpsPSGAlterVol     $07
00074E53 8006                       	dc.b	nRst, $06
00074E55 E100                       	smpsAlterNote       $00
00074E57 01                         	dc.b	$01
00074E58 E104                       	smpsAlterNote       $04
00074E5A 01                         	dc.b	$01
00074E5B E100                       	smpsAlterNote       $00
00074E5D 01                         	dc.b	$01
00074E5E E1FA                       	smpsAlterNote       $FA
00074E60 01                         	dc.b	$01
00074E61 E1FD                       	smpsAlterNote       $FD
00074E63 ECF5                       	smpsPSGAlterVol     $F5
00074E65 9106                       	dc.b	nE1, $06
00074E67 EC04                       	smpsPSGAlterVol     $04
00074E69 E701                       	dc.b	smpsNoAttack, $01
00074E6B EC07                       	smpsPSGAlterVol     $07
00074E6D 8003                       	dc.b	nRst, $03
00074E6F ECF5                       	smpsPSGAlterVol     $F5
00074E71 9107 9106                  	dc.b	nE1, $07, nE1, $06
00074E75 EC04                       	smpsPSGAlterVol     $04
00074E77 E701                       	dc.b	smpsNoAttack, $01
00074E79 ECFC                       	smpsPSGAlterVol     $FC
00074E7B 9103 9103                  	dc.b	nE1, $03, nE1, $03
00074E7F EC04                       	smpsPSGAlterVol     $04
00074E81 E701                       	dc.b	smpsNoAttack, $01
00074E83 ECFC                       	smpsPSGAlterVol     $FC
00074E85 9106                       	dc.b	nE1, $06
00074E87 EC04                       	smpsPSGAlterVol     $04
00074E89 E701                       	dc.b	smpsNoAttack, $01
00074E8B EC07                       	smpsPSGAlterVol     $07
00074E8D 8006                       	dc.b	nRst, $06
00074E8F E100                       	smpsAlterNote       $00
00074E91 01                         	dc.b	$01
00074E92 E104                       	smpsAlterNote       $04
00074E94 01                         	dc.b	$01
00074E95 E100                       	smpsAlterNote       $00
00074E97 01                         	dc.b	$01
00074E98 E1FA                       	smpsAlterNote       $FA
00074E9A 01                         	dc.b	$01
00074E9B E1F9                       	smpsAlterNote       $F9
00074E9D 01                         	dc.b	$01
00074E9E E1FD                       	smpsAlterNote       $FD
00074EA0 01                         	dc.b	$01
00074EA1 E103                       	smpsAlterNote       $03
00074EA3 01                         	dc.b	$01
00074EA4 E104                       	smpsAlterNote       $04
00074EA6 01                         	dc.b	$01
00074EA7 E100                       	smpsAlterNote       $00
00074EA9 01                         	dc.b	$01
00074EAA E1FA                       	smpsAlterNote       $FA
00074EAC 0101                       	dc.b	$01, $01
00074EAE E1FD                       	smpsAlterNote       $FD
00074EB0 ECF5                       	smpsPSGAlterVol     $F5
00074EB2 9206                       	dc.b	nF1, $06
00074EB4 EC04                       	smpsPSGAlterVol     $04
00074EB6 E701                       	dc.b	smpsNoAttack, $01
00074EB8 EC07                       	smpsPSGAlterVol     $07
00074EBA 8003                       	dc.b	nRst, $03
00074EBC ECF5                       	smpsPSGAlterVol     $F5
00074EBE 9206                       	dc.b	nF1, $06
00074EC0 EC04                       	smpsPSGAlterVol     $04
00074EC2 E701                       	dc.b	smpsNoAttack, $01
00074EC4 EC07                       	smpsPSGAlterVol     $07
00074EC6 8006                       	dc.b	nRst, $06
00074EC8 E100                       	smpsAlterNote       $00
00074ECA 01                         	dc.b	$01
00074ECB E104                       	smpsAlterNote       $04
00074ECD 01                         	dc.b	$01
00074ECE E103                       	smpsAlterNote       $03
00074ED0 01                         	dc.b	$01
00074ED1 E1FD                       	smpsAlterNote       $FD
00074ED3 01                         	dc.b	$01
00074ED4 ECF5                       	smpsPSGAlterVol     $F5
00074ED6 9407                       	dc.b	nG1, $07
00074ED8 EC0B                       	smpsPSGAlterVol     $0B
00074EDA 8004                       	dc.b	nRst, $04
00074EDC ECF5                       	smpsPSGAlterVol     $F5
00074EDE 9406                       	dc.b	nG1, $06
00074EE0 EC0B                       	smpsPSGAlterVol     $0B
00074EE2 8007                       	dc.b	nRst, $07
00074EE4 E103                       	smpsAlterNote       $03
00074EE6 0101                       	dc.b	$01, $01
00074EE8 E1FD                       	smpsAlterNote       $FD
00074EEA 01                         	dc.b	$01
00074EEB E1F9                       	smpsAlterNote       $F9
00074EED 01                         	dc.b	$01
00074EEE E1FD                       	smpsAlterNote       $FD
00074EF0 ECF5                       	smpsPSGAlterVol     $F5
00074EF2 9206                       	dc.b	nF1, $06
00074EF4 EC04                       	smpsPSGAlterVol     $04
00074EF6 E701                       	dc.b	smpsNoAttack, $01
00074EF8 EC07                       	smpsPSGAlterVol     $07
00074EFA 8003                       	dc.b	nRst, $03
00074EFC ECF5                       	smpsPSGAlterVol     $F5
00074EFE 9206                       	dc.b	nF1, $06
00074F00 EC04                       	smpsPSGAlterVol     $04
00074F02 E701                       	dc.b	smpsNoAttack, $01
00074F04 EC07                       	smpsPSGAlterVol     $07
00074F06 8006                       	dc.b	nRst, $06
00074F08 E100                       	smpsAlterNote       $00
00074F0A 01                         	dc.b	$01
00074F0B E104                       	smpsAlterNote       $04
00074F0D 01                         	dc.b	$01
00074F0E E100                       	smpsAlterNote       $00
00074F10 01                         	dc.b	$01
00074F11 E1FA                       	smpsAlterNote       $FA
00074F13 01                         	dc.b	$01
00074F14 E1FD                       	smpsAlterNote       $FD
00074F16 ECF5                       	smpsPSGAlterVol     $F5
00074F18 9206                       	dc.b	nF1, $06
00074F1A EC04                       	smpsPSGAlterVol     $04
00074F1C E701                       	dc.b	smpsNoAttack, $01
00074F1E EC07                       	smpsPSGAlterVol     $07
00074F20 8003                       	dc.b	nRst, $03
00074F22 ECF5                       	smpsPSGAlterVol     $F5
00074F24 9107                       	dc.b	nE1, $07
00074F26 EC0B                       	smpsPSGAlterVol     $0B
00074F28 8006                       	dc.b	nRst, $06
00074F2A E100                       	smpsAlterNote       $00
00074F2C 01                         	dc.b	$01
00074F2D E103                       	smpsAlterNote       $03
00074F2F 0101                       	dc.b	$01, $01
00074F31 E1FD                       	smpsAlterNote       $FD
00074F33 01                         	dc.b	$01
00074F34 ECF5                       	smpsPSGAlterVol     $F5
00074F36 9207                       	dc.b	nF1, $07
00074F38 EC0B                       	smpsPSGAlterVol     $0B
00074F3A 8004                       	dc.b	nRst, $04
00074F3C ECF5                       	smpsPSGAlterVol     $F5
00074F3E 9206                       	dc.b	nF1, $06
00074F40 EC04                       	smpsPSGAlterVol     $04
00074F42 E701                       	dc.b	smpsNoAttack, $01
00074F44 EC07                       	smpsPSGAlterVol     $07
00074F46 8006                       	dc.b	nRst, $06
00074F48 E103                       	smpsAlterNote       $03
00074F4A 01                         	dc.b	$01
00074F4B E104                       	smpsAlterNote       $04
00074F4D 01                         	dc.b	$01
00074F4E E100                       	smpsAlterNote       $00
00074F50 01                         	dc.b	$01
00074F51 E1FB                       	smpsAlterNote       $FB
00074F53 01                         	dc.b	$01
00074F54 E1FD                       	smpsAlterNote       $FD
00074F56 ECF5                       	smpsPSGAlterVol     $F5
00074F58 9406                       	dc.b	nG1, $06
00074F5A EC04                       	smpsPSGAlterVol     $04
00074F5C E701                       	dc.b	smpsNoAttack, $01
00074F5E EC07                       	smpsPSGAlterVol     $07
00074F60 8003                       	dc.b	nRst, $03
00074F62 ECF5                       	smpsPSGAlterVol     $F5
00074F64 9406                       	dc.b	nG1, $06
00074F66 EC04                       	smpsPSGAlterVol     $04
00074F68 E701                       	dc.b	smpsNoAttack, $01
00074F6A EC07                       	smpsPSGAlterVol     $07
00074F6C 8006                       	dc.b	nRst, $06
00074F6E E100                       	smpsAlterNote       $00
00074F70 01                         	dc.b	$01
00074F71 E104                       	smpsAlterNote       $04
00074F73 01                         	dc.b	$01
00074F74 E100                       	smpsAlterNote       $00
00074F76 01                         	dc.b	$01
00074F77 E1FD                       	smpsAlterNote       $FD
00074F79 01                         	dc.b	$01
00074F7A ECF5                       	smpsPSGAlterVol     $F5
00074F7C 9206                       	dc.b	nF1, $06
00074F7E EC04                       	smpsPSGAlterVol     $04
00074F80 E701                       	dc.b	smpsNoAttack, $01
00074F82 EC07                       	smpsPSGAlterVol     $07
00074F84 8003                       	dc.b	nRst, $03
00074F86 ECF5                       	smpsPSGAlterVol     $F5
00074F88 9207                       	dc.b	nF1, $07
00074F8A EC0B                       	smpsPSGAlterVol     $0B
00074F8C 8007                       	dc.b	nRst, $07
00074F8E E103                       	smpsAlterNote       $03
00074F90 0101                       	dc.b	$01, $01
00074F92 E1FD                       	smpsAlterNote       $FD
00074F94 01                         	dc.b	$01
00074F95 E1FA                       	smpsAlterNote       $FA
00074F97 01                         	dc.b	$01
00074F98 E1FD                       	smpsAlterNote       $FD
00074F9A ECF5                       	smpsPSGAlterVol     $F5
00074F9C 9206                       	dc.b	nF1, $06
00074F9E EC0B                       	smpsPSGAlterVol     $0B
00074FA0 8004                       	dc.b	nRst, $04
00074FA2 ECF5                       	smpsPSGAlterVol     $F5
00074FA4 9206                       	dc.b	nF1, $06
00074FA6 EC04                       	smpsPSGAlterVol     $04
00074FA8 E701                       	dc.b	smpsNoAttack, $01
00074FAA EC07                       	smpsPSGAlterVol     $07
00074FAC 8006                       	dc.b	nRst, $06
00074FAE E100                       	smpsAlterNote       $00
00074FB0 01                         	dc.b	$01
00074FB1 E104                       	smpsAlterNote       $04
00074FB3 01                         	dc.b	$01
00074FB4 E100                       	smpsAlterNote       $00
00074FB6 01                         	dc.b	$01
00074FB7 E1FA                       	smpsAlterNote       $FA
00074FB9 01                         	dc.b	$01
00074FBA E1FD                       	smpsAlterNote       $FD
00074FBC ECF5                       	smpsPSGAlterVol     $F5
00074FBE 9206                       	dc.b	nF1, $06
00074FC0 EC04                       	smpsPSGAlterVol     $04
00074FC2 E704                       	dc.b	smpsNoAttack, $04
00074FC4 ECFC                       	smpsPSGAlterVol     $FC
00074FC6 9207                       	dc.b	nF1, $07
00074FC8 EC0B                       	smpsPSGAlterVol     $0B
00074FCA 8006                       	dc.b	nRst, $06
00074FCC E100                       	smpsAlterNote       $00
00074FCE 01                         	dc.b	$01
00074FCF E104                       	smpsAlterNote       $04
00074FD1 01                         	dc.b	$01
00074FD2 E103                       	smpsAlterNote       $03
00074FD4 01                         	dc.b	$01
00074FD5 E1FD                       	smpsAlterNote       $FD
00074FD7 01                         	dc.b	$01
00074FD8 ECF5                       	smpsPSGAlterVol     $F5
00074FDA 9207                       	dc.b	nF1, $07
00074FDC EC0B                       	smpsPSGAlterVol     $0B
00074FDE 8004                       	dc.b	nRst, $04
00074FE0 ECF5                       	smpsPSGAlterVol     $F5
00074FE2 9206                       	dc.b	nF1, $06
00074FE4 EC0B                       	smpsPSGAlterVol     $0B
00074FE6 8007                       	dc.b	nRst, $07
00074FE8 E103                       	smpsAlterNote       $03
00074FEA 0101                       	dc.b	$01, $01
00074FEC E100                       	smpsAlterNote       $00
00074FEE 01                         	dc.b	$01
00074FEF E1FA                       	smpsAlterNote       $FA
00074FF1 01                         	dc.b	$01
00074FF2 E1FD                       	smpsAlterNote       $FD
00074FF4 ECF5                       	smpsPSGAlterVol     $F5
00074FF6 9206                       	dc.b	nF1, $06
00074FF8 EC04                       	smpsPSGAlterVol     $04
00074FFA E704                       	dc.b	smpsNoAttack, $04
00074FFC ECFC                       	smpsPSGAlterVol     $FC
00074FFE 9206                       	dc.b	nF1, $06
00075000 EC04                       	smpsPSGAlterVol     $04
00075002 E701                       	dc.b	smpsNoAttack, $01
00075004 EC07                       	smpsPSGAlterVol     $07
00075006 8006                       	dc.b	nRst, $06
00075008 E100                       	smpsAlterNote       $00
0007500A 01                         	dc.b	$01
0007500B E104                       	smpsAlterNote       $04
0007500D 01                         	dc.b	$01
0007500E E100                       	smpsAlterNote       $00
00075010 01                         	dc.b	$01
00075011 E1FD                       	smpsAlterNote       $FD
00075013 01                         	dc.b	$01
00075014 ECF5                       	smpsPSGAlterVol     $F5
00075016 9206                       	dc.b	nF1, $06
00075018 EC04                       	smpsPSGAlterVol     $04
0007501A E701                       	dc.b	smpsNoAttack, $01
0007501C EC07                       	smpsPSGAlterVol     $07
0007501E 8003                       	dc.b	nRst, $03
00075020 ECF5                       	smpsPSGAlterVol     $F5
00075022 9207                       	dc.b	nF1, $07
00075024 EC0B                       	smpsPSGAlterVol     $0B
00075026 8007                       	dc.b	nRst, $07
00075028 E103                       	smpsAlterNote       $03
0007502A 0101                       	dc.b	$01, $01
0007502C E1FD                       	smpsAlterNote       $FD
0007502E 01                         	dc.b	$01
0007502F E1FA                       	smpsAlterNote       $FA
00075031 01                         	dc.b	$01
00075032 E1FD                       	smpsAlterNote       $FD
00075034 ECF5                       	smpsPSGAlterVol     $F5
00075036 9106                       	dc.b	nE1, $06
00075038 EC0B                       	smpsPSGAlterVol     $0B
0007503A 8004                       	dc.b	nRst, $04
0007503C ECF5                       	smpsPSGAlterVol     $F5
0007503E 9106                       	dc.b	nE1, $06
00075040 EC04                       	smpsPSGAlterVol     $04
00075042 E701                       	dc.b	smpsNoAttack, $01
00075044 EC07                       	smpsPSGAlterVol     $07
00075046 8006                       	dc.b	nRst, $06
00075048 E100                       	smpsAlterNote       $00
0007504A 01                         	dc.b	$01
0007504B E104                       	smpsAlterNote       $04
0007504D 01                         	dc.b	$01
0007504E E100                       	smpsAlterNote       $00
00075050 01                         	dc.b	$01
00075051 E1FA                       	smpsAlterNote       $FA
00075053 01                         	dc.b	$01
00075054 E1FD                       	smpsAlterNote       $FD
00075056 ECF5                       	smpsPSGAlterVol     $F5
00075058 9106                       	dc.b	nE1, $06
0007505A EC04                       	smpsPSGAlterVol     $04
0007505C E701                       	dc.b	smpsNoAttack, $01
0007505E EC07                       	smpsPSGAlterVol     $07
00075060 8003                       	dc.b	nRst, $03
00075062 ECF5                       	smpsPSGAlterVol     $F5
00075064 9106                       	dc.b	nE1, $06
00075066 EC04                       	smpsPSGAlterVol     $04
00075068 E701                       	dc.b	smpsNoAttack, $01
0007506A EC07                       	smpsPSGAlterVol     $07
0007506C 8006                       	dc.b	nRst, $06
0007506E E100                       	smpsAlterNote       $00
00075070 01                         	dc.b	$01
00075071 E104                       	smpsAlterNote       $04
00075073 01                         	dc.b	$01
00075074 E103                       	smpsAlterNote       $03
00075076 01                         	dc.b	$01
00075077 E1FD                       	smpsAlterNote       $FD
00075079 01                         	dc.b	$01
0007507A ECF5                       	smpsPSGAlterVol     $F5
0007507C 9107                       	dc.b	nE1, $07
0007507E EC0B                       	smpsPSGAlterVol     $0B
00075080 8004                       	dc.b	nRst, $04
00075082 ECF5                       	smpsPSGAlterVol     $F5
00075084 9106                       	dc.b	nE1, $06
00075086 EC0B                       	smpsPSGAlterVol     $0B
00075088 8007                       	dc.b	nRst, $07
0007508A E103                       	smpsAlterNote       $03
0007508C 0101                       	dc.b	$01, $01
0007508E E100                       	smpsAlterNote       $00
00075090 01                         	dc.b	$01
00075091 E1FA                       	smpsAlterNote       $FA
00075093 01                         	dc.b	$01
00075094 E1FD                       	smpsAlterNote       $FD
00075096 ECF5                       	smpsPSGAlterVol     $F5
00075098 9106                       	dc.b	nE1, $06
0007509A EC04                       	smpsPSGAlterVol     $04
0007509C E701                       	dc.b	smpsNoAttack, $01
0007509E EC07                       	smpsPSGAlterVol     $07
000750A0 8003                       	dc.b	nRst, $03
000750A2 ECF5                       	smpsPSGAlterVol     $F5
000750A4 9106                       	dc.b	nE1, $06
000750A6 EC04                       	smpsPSGAlterVol     $04
000750A8 E701                       	dc.b	smpsNoAttack, $01
000750AA EC07                       	smpsPSGAlterVol     $07
000750AC 8003                       	dc.b	nRst, $03
000750AE ECF5                       	smpsPSGAlterVol     $F5
000750B0 9207                       	dc.b	nF1, $07
000750B2 EC0B                       	smpsPSGAlterVol     $0B
000750B4 8006                       	dc.b	nRst, $06
000750B6 E100                       	smpsAlterNote       $00
000750B8 01                         	dc.b	$01
000750B9 E104                       	smpsAlterNote       $04
000750BB 01                         	dc.b	$01
000750BC E103                       	smpsAlterNote       $03
000750BE 01                         	dc.b	$01
000750BF E1FD                       	smpsAlterNote       $FD
000750C1 01                         	dc.b	$01
000750C2 E1F9                       	smpsAlterNote       $F9
000750C4 01                         	dc.b	$01
000750C5 E1FD                       	smpsAlterNote       $FD
000750C7 01                         	dc.b	$01
000750C8 E100                       	smpsAlterNote       $00
000750CA 01                         	dc.b	$01
000750CB E104                       	smpsAlterNote       $04
000750CD 01                         	dc.b	$01
000750CE E1FD                       	smpsAlterNote       $FD
000750D0 ECF5                       	smpsPSGAlterVol     $F5
000750D2 9203 9203                  	dc.b	nF1, $03, nF1, $03
000750D6 EC04                       	smpsPSGAlterVol     $04
000750D8 E701                       	dc.b	smpsNoAttack, $01
000750DA EC07                       	smpsPSGAlterVol     $07
000750DC 8009                       	dc.b	nRst, $09
000750DE E100                       	smpsAlterNote       $00
000750E0 01                         	dc.b	$01
000750E1 E104                       	smpsAlterNote       $04
000750E3 01                         	dc.b	$01
000750E4 E103                       	smpsAlterNote       $03
000750E6 01                         	dc.b	$01
000750E7 E1FD                       	smpsAlterNote       $FD
000750E9 01                         	dc.b	$01
000750EA E1F9                       	smpsAlterNote       $F9
000750EC 01                         	dc.b	$01
000750ED E1FD                       	smpsAlterNote       $FD
000750EF 01                         	dc.b	$01
000750F0 E100                       	smpsAlterNote       $00
000750F2 01                         	dc.b	$01
000750F3 E104                       	smpsAlterNote       $04
000750F5 01                         	dc.b	$01
000750F6 E100                       	smpsAlterNote       $00
000750F8 01                         	dc.b	$01
000750F9 E1FA                       	smpsAlterNote       $FA
000750FB 01                         	dc.b	$01
000750FC E1F9                       	smpsAlterNote       $F9
000750FE 01                         	dc.b	$01
000750FF E1FD                       	smpsAlterNote       $FD
00075101 01                         	dc.b	$01
00075102 E103                       	smpsAlterNote       $03
00075104 0101                       	dc.b	$01, $01
00075106 E100                       	smpsAlterNote       $00
00075108 01                         	dc.b	$01
00075109 E1FD                       	smpsAlterNote       $FD
0007510B ECF5                       	smpsPSGAlterVol     $F5
0007510D 9202                       	dc.b	nF1, $02
0007510F EC04                       	smpsPSGAlterVol     $04
00075111 E701                       	dc.b	smpsNoAttack, $01
00075113 ECFC                       	smpsPSGAlterVol     $FC
00075115 9106                       	dc.b	nE1, $06
00075117 EC04                       	smpsPSGAlterVol     $04
00075119 E701                       	dc.b	smpsNoAttack, $01
0007511B EC07                       	smpsPSGAlterVol     $07
0007511D 8006                       	dc.b	nRst, $06
0007511F E100                       	smpsAlterNote       $00
00075121 01                         	dc.b	$01
00075122 E104                       	smpsAlterNote       $04
00075124 01                         	dc.b	$01
00075125 E100                       	smpsAlterNote       $00
00075127 01                         	dc.b	$01
00075128 E1FD                       	smpsAlterNote       $FD
0007512A 01                         	dc.b	$01
0007512B E1F9                       	smpsAlterNote       $F9
0007512D 01                         	dc.b	$01
0007512E E1FD                       	smpsAlterNote       $FD
00075130 01                         	dc.b	$01
00075131 E103                       	smpsAlterNote       $03
00075133 01                         	dc.b	$01
00075134 E104                       	smpsAlterNote       $04
00075136 01                         	dc.b	$01
00075137 E1FD                       	smpsAlterNote       $FD
00075139 ECF5                       	smpsPSGAlterVol     $F5
0007513B 9102                       	dc.b	nE1, $02
0007513D EC04                       	smpsPSGAlterVol     $04
0007513F E701                       	dc.b	smpsNoAttack, $01
00075141 ECFC                       	smpsPSGAlterVol     $FC
00075143 920D                       	dc.b	nF1, $0D
00075145 E100                       	smpsAlterNote       $00
00075147 E701                       	dc.b	smpsNoAttack, $01
00075149 E104                       	smpsAlterNote       $04
0007514B E701                       	dc.b	smpsNoAttack, $01
0007514D E100                       	smpsAlterNote       $00
0007514F E701                       	dc.b	smpsNoAttack, $01
00075151 E1FD                       	smpsAlterNote       $FD
00075153 E701                       	dc.b	smpsNoAttack, $01
00075155 E1F9                       	smpsAlterNote       $F9
00075157 E701                       	dc.b	smpsNoAttack, $01
00075159 E1FD                       	smpsAlterNote       $FD
0007515B E701                       	dc.b	smpsNoAttack, $01
0007515D E103                       	smpsAlterNote       $03
0007515F E701                       	dc.b	smpsNoAttack, $01
00075161 E104                       	smpsAlterNote       $04
00075163 E701                       	dc.b	smpsNoAttack, $01
00075165 E100                       	smpsAlterNote       $00
00075167 E701                       	dc.b	smpsNoAttack, $01
00075169 E1FA                       	smpsAlterNote       $FA
0007516B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007516F E1FD                       	smpsAlterNote       $FD
00075171 E701                       	dc.b	smpsNoAttack, $01
00075173 E103                       	smpsAlterNote       $03
00075175 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00075179 E1FD                       	smpsAlterNote       $FD
0007517B E701                       	dc.b	smpsNoAttack, $01
0007517D E1F9                       	smpsAlterNote       $F9
0007517F E701                       	dc.b	smpsNoAttack, $01
00075181 E1FA                       	smpsAlterNote       $FA
00075183 E701                       	dc.b	smpsNoAttack, $01
00075185 E100                       	smpsAlterNote       $00
00075187 EC04                       	smpsPSGAlterVol     $04
00075189 E701                       	dc.b	smpsNoAttack, $01
0007518B EC07                       	smpsPSGAlterVol     $07
0007518D E104                       	smpsAlterNote       $04
0007518F 8001                       	dc.b	nRst, $01
00075191 E100                       	smpsAlterNote       $00
00075193 01                         	dc.b	$01
00075194 E1FD                       	smpsAlterNote       $FD
00075196 01                         	dc.b	$01
00075197 E1F9                       	smpsAlterNote       $F9
00075199 01                         	dc.b	$01
0007519A E1FD                       	smpsAlterNote       $FD
0007519C 01                         	dc.b	$01
0007519D E103                       	smpsAlterNote       $03
0007519F 01                         	dc.b	$01
000751A0 E104                       	smpsAlterNote       $04
000751A2 01                         	dc.b	$01
000751A3 E1FD                       	smpsAlterNote       $FD
000751A5 ECF5                       	smpsPSGAlterVol     $F5
000751A7 9106                       	dc.b	nE1, $06
000751A9 EC04                       	smpsPSGAlterVol     $04
000751AB E701                       	dc.b	smpsNoAttack, $01
000751AD EC07                       	smpsPSGAlterVol     $07
000751AF 8003                       	dc.b	nRst, $03
000751B1 ECF5                       	smpsPSGAlterVol     $F5
000751B3 9106                       	dc.b	nE1, $06
000751B5 EC04                       	smpsPSGAlterVol     $04
000751B7 E701                       	dc.b	smpsNoAttack, $01
000751B9 EC07                       	smpsPSGAlterVol     $07
000751BB 8006                       	dc.b	nRst, $06
000751BD E100                       	smpsAlterNote       $00
000751BF 01                         	dc.b	$01
000751C0 E104                       	smpsAlterNote       $04
000751C2 01                         	dc.b	$01
000751C3 E100                       	smpsAlterNote       $00
000751C5 01                         	dc.b	$01
000751C6 E1FA                       	smpsAlterNote       $FA
000751C8 01                         	dc.b	$01
000751C9 E1FD                       	smpsAlterNote       $FD
000751CB ECF5                       	smpsPSGAlterVol     $F5
000751CD 9206                       	dc.b	nF1, $06
000751CF EC04                       	smpsPSGAlterVol     $04
000751D1 E701                       	dc.b	smpsNoAttack, $01
000751D3 EC07                       	smpsPSGAlterVol     $07
000751D5 8003                       	dc.b	nRst, $03
000751D7 ECF5                       	smpsPSGAlterVol     $F5
000751D9 9207                       	dc.b	nF1, $07
000751DB EC0B                       	smpsPSGAlterVol     $0B
000751DD 8006                       	dc.b	nRst, $06
000751DF E100                       	smpsAlterNote       $00
000751E1 01                         	dc.b	$01
000751E2 E103                       	smpsAlterNote       $03
000751E4 0101                       	dc.b	$01, $01
000751E6 E1FD                       	smpsAlterNote       $FD
000751E8 01                         	dc.b	$01
000751E9 ECF5                       	smpsPSGAlterVol     $F5
000751EB 9107                       	dc.b	nE1, $07
000751ED EC0B                       	smpsPSGAlterVol     $0B
000751EF 8004                       	dc.b	nRst, $04
000751F1 ECF5                       	smpsPSGAlterVol     $F5
000751F3 9106                       	dc.b	nE1, $06
000751F5 EC04                       	smpsPSGAlterVol     $04
000751F7 E701                       	dc.b	smpsNoAttack, $01
000751F9 EC07                       	smpsPSGAlterVol     $07
000751FB 8006                       	dc.b	nRst, $06
000751FD E103                       	smpsAlterNote       $03
000751FF 01                         	dc.b	$01
00075200 E104                       	smpsAlterNote       $04
00075202 01                         	dc.b	$01
00075203 E100                       	smpsAlterNote       $00
00075205 01                         	dc.b	$01
00075206 E1FA                       	smpsAlterNote       $FA
00075208 01                         	dc.b	$01
00075209 E1FD                       	smpsAlterNote       $FD
0007520B ECF5                       	smpsPSGAlterVol     $F5
0007520D 9106                       	dc.b	nE1, $06
0007520F EC04                       	smpsPSGAlterVol     $04
00075211 E701                       	dc.b	smpsNoAttack, $01
00075213 EC07                       	smpsPSGAlterVol     $07
00075215 8003                       	dc.b	nRst, $03
00075217 ECF5                       	smpsPSGAlterVol     $F5
00075219 9106                       	dc.b	nE1, $06
0007521B EC04                       	smpsPSGAlterVol     $04
0007521D E701                       	dc.b	smpsNoAttack, $01
0007521F EC07                       	smpsPSGAlterVol     $07
00075221 8003                       	dc.b	nRst, $03
00075223 ECF5                       	smpsPSGAlterVol     $F5
00075225 9207                       	dc.b	nF1, $07
00075227 EC0B                       	smpsPSGAlterVol     $0B
00075229 8006                       	dc.b	nRst, $06
0007522B E100                       	smpsAlterNote       $00
0007522D 01                         	dc.b	$01
0007522E E103                       	smpsAlterNote       $03
00075230 0101                       	dc.b	$01, $01
00075232 E1FD                       	smpsAlterNote       $FD
00075234 01                         	dc.b	$01
00075235 E1F9                       	smpsAlterNote       $F9
00075237 01                         	dc.b	$01
00075238 E1FA                       	smpsAlterNote       $FA
0007523A 01                         	dc.b	$01
0007523B E100                       	smpsAlterNote       $00
0007523D 01                         	dc.b	$01
0007523E E104                       	smpsAlterNote       $04
00075240 01                         	dc.b	$01
00075241 E1FD                       	smpsAlterNote       $FD
00075243 ECF5                       	smpsPSGAlterVol     $F5
00075245 9203 9203                  	dc.b	nF1, $03, nF1, $03
00075249 EC04                       	smpsPSGAlterVol     $04
0007524B E701                       	dc.b	smpsNoAttack, $01
0007524D EC07                       	smpsPSGAlterVol     $07
0007524F 8009                       	dc.b	nRst, $09
00075251 E100                       	smpsAlterNote       $00
00075253 01                         	dc.b	$01
00075254 E103                       	smpsAlterNote       $03
00075256 0101                       	dc.b	$01, $01
00075258 E1FD                       	smpsAlterNote       $FD
0007525A 01                         	dc.b	$01
0007525B E1F9                       	smpsAlterNote       $F9
0007525D 01                         	dc.b	$01
0007525E E1FA                       	smpsAlterNote       $FA
00075260 01                         	dc.b	$01
00075261 E100                       	smpsAlterNote       $00
00075263 01                         	dc.b	$01
00075264 E104                       	smpsAlterNote       $04
00075266 01                         	dc.b	$01
00075267 E100                       	smpsAlterNote       $00
00075269 01                         	dc.b	$01
0007526A E1FD                       	smpsAlterNote       $FD
0007526C 01                         	dc.b	$01
0007526D E1F9                       	smpsAlterNote       $F9
0007526F 01                         	dc.b	$01
00075270 E1FD                       	smpsAlterNote       $FD
00075272 01                         	dc.b	$01
00075273 E103                       	smpsAlterNote       $03
00075275 01                         	dc.b	$01
00075276 E104                       	smpsAlterNote       $04
00075278 01                         	dc.b	$01
00075279 E100                       	smpsAlterNote       $00
0007527B 01                         	dc.b	$01
0007527C E1FD                       	smpsAlterNote       $FD
0007527E ECF5                       	smpsPSGAlterVol     $F5
00075280 9203 9106                  	dc.b	nF1, $03, nE1, $06
00075284 EC04                       	smpsPSGAlterVol     $04
00075286 E701                       	dc.b	smpsNoAttack, $01
00075288 EC07                       	smpsPSGAlterVol     $07
0007528A 8006                       	dc.b	nRst, $06
0007528C E100                       	smpsAlterNote       $00
0007528E 01                         	dc.b	$01
0007528F E104                       	smpsAlterNote       $04
00075291 01                         	dc.b	$01
00075292 E103                       	smpsAlterNote       $03
00075294 01                         	dc.b	$01
00075295 E1FD                       	smpsAlterNote       $FD
00075297 01                         	dc.b	$01
00075298 E1F9                       	smpsAlterNote       $F9
0007529A 01                         	dc.b	$01
0007529B E1FD                       	smpsAlterNote       $FD
0007529D 01                         	dc.b	$01
0007529E E100                       	smpsAlterNote       $00
000752A0 01                         	dc.b	$01
000752A1 E104                       	smpsAlterNote       $04
000752A3 01                         	dc.b	$01
000752A4 E1FD                       	smpsAlterNote       $FD
000752A6 ECF5                       	smpsPSGAlterVol     $F5
000752A8 9103 920D                  	dc.b	nE1, $03, nF1, $0D
000752AC E100                       	smpsAlterNote       $00
000752AE E701                       	dc.b	smpsNoAttack, $01
000752B0 E104                       	smpsAlterNote       $04
000752B2 E701                       	dc.b	smpsNoAttack, $01
000752B4 E100                       	smpsAlterNote       $00
000752B6 E701                       	dc.b	smpsNoAttack, $01
000752B8 E1FD                       	smpsAlterNote       $FD
000752BA E701                       	dc.b	smpsNoAttack, $01
000752BC E1F9                       	smpsAlterNote       $F9
000752BE E701                       	dc.b	smpsNoAttack, $01
000752C0 E1FD                       	smpsAlterNote       $FD
000752C2 E701                       	dc.b	smpsNoAttack, $01
000752C4 E103                       	smpsAlterNote       $03
000752C6 E701                       	dc.b	smpsNoAttack, $01
000752C8 E104                       	smpsAlterNote       $04
000752CA E701                       	dc.b	smpsNoAttack, $01
000752CC E100                       	smpsAlterNote       $00
000752CE E701                       	dc.b	smpsNoAttack, $01
000752D0 E1FA                       	smpsAlterNote       $FA
000752D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000752D6 E1FD                       	smpsAlterNote       $FD
000752D8 E701                       	dc.b	smpsNoAttack, $01
000752DA E103                       	smpsAlterNote       $03
000752DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000752E0 E100                       	smpsAlterNote       $00
000752E2 E701                       	dc.b	smpsNoAttack, $01
000752E4 E1FA                       	smpsAlterNote       $FA
000752E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000752EA E100                       	smpsAlterNote       $00
000752EC EC04                       	smpsPSGAlterVol     $04
000752EE E701                       	dc.b	smpsNoAttack, $01
000752F0 EC07                       	smpsPSGAlterVol     $07
000752F2 E104                       	smpsAlterNote       $04
000752F4 8001                       	dc.b	nRst, $01
000752F6 E103                       	smpsAlterNote       $03
000752F8 01                         	dc.b	$01
000752F9 E1FD                       	smpsAlterNote       $FD
000752FB 01                         	dc.b	$01
000752FC E1F9                       	smpsAlterNote       $F9
000752FE 01                         	dc.b	$01
000752FF E1FD                       	smpsAlterNote       $FD
00075301 01                         	dc.b	$01
00075302 E100                       	smpsAlterNote       $00
00075304 01                         	dc.b	$01
00075305 E104                       	smpsAlterNote       $04
00075307 01                         	dc.b	$01
00075308 E1FD                       	smpsAlterNote       $FD
0007530A ECF5                       	smpsPSGAlterVol     $F5
0007530C 9106                       	dc.b	nE1, $06
0007530E EC04                       	smpsPSGAlterVol     $04
00075310 E701                       	dc.b	smpsNoAttack, $01
00075312 EC07                       	smpsPSGAlterVol     $07
00075314 8003                       	dc.b	nRst, $03
00075316 ECF5                       	smpsPSGAlterVol     $F5
00075318 9106                       	dc.b	nE1, $06
0007531A EC04                       	smpsPSGAlterVol     $04
0007531C E701                       	dc.b	smpsNoAttack, $01
0007531E EC07                       	smpsPSGAlterVol     $07
00075320 8006                       	dc.b	nRst, $06
00075322 E100                       	smpsAlterNote       $00
00075324 01                         	dc.b	$01
00075325 E104                       	smpsAlterNote       $04
00075327 01                         	dc.b	$01
00075328 E100                       	smpsAlterNote       $00
0007532A 01                         	dc.b	$01
0007532B E1FD                       	smpsAlterNote       $FD
0007532D 01                         	dc.b	$01
0007532E ECF5                       	smpsPSGAlterVol     $F5
00075330 9206                       	dc.b	nF1, $06
00075332 EC04                       	smpsPSGAlterVol     $04
00075334 E701                       	dc.b	smpsNoAttack, $01
00075336 EC07                       	smpsPSGAlterVol     $07
00075338 8003                       	dc.b	nRst, $03
0007533A ECF5                       	smpsPSGAlterVol     $F5
0007533C 9207                       	dc.b	nF1, $07
0007533E EC0B                       	smpsPSGAlterVol     $0B
00075340 8007                       	dc.b	nRst, $07
00075342 E103                       	smpsAlterNote       $03
00075344 0101                       	dc.b	$01, $01
00075346 E1FD                       	smpsAlterNote       $FD
00075348 01                         	dc.b	$01
00075349 E1FA                       	smpsAlterNote       $FA
0007534B 01                         	dc.b	$01
0007534C E1FD                       	smpsAlterNote       $FD
0007534E ECF5                       	smpsPSGAlterVol     $F5
00075350 9106                       	dc.b	nE1, $06
00075352 EC0B                       	smpsPSGAlterVol     $0B
00075354 8004                       	dc.b	nRst, $04
00075356 ECF5                       	smpsPSGAlterVol     $F5
00075358 9106                       	dc.b	nE1, $06
0007535A EC04                       	smpsPSGAlterVol     $04
0007535C E701                       	dc.b	smpsNoAttack, $01
0007535E EC07                       	smpsPSGAlterVol     $07
00075360 8006                       	dc.b	nRst, $06
00075362 E100                       	smpsAlterNote       $00
00075364 01                         	dc.b	$01
00075365 E104                       	smpsAlterNote       $04
00075367 01                         	dc.b	$01
00075368 E100                       	smpsAlterNote       $00
0007536A 01                         	dc.b	$01
0007536B E1FA                       	smpsAlterNote       $FA
0007536D 01                         	dc.b	$01
0007536E E1FD                       	smpsAlterNote       $FD
00075370 ECF5                       	smpsPSGAlterVol     $F5
00075372 9206                       	dc.b	nF1, $06
00075374 EC04                       	smpsPSGAlterVol     $04
00075376 E701                       	dc.b	smpsNoAttack, $01
00075378 EC07                       	smpsPSGAlterVol     $07
0007537A 8003                       	dc.b	nRst, $03
0007537C ECF5                       	smpsPSGAlterVol     $F5
0007537E 9206                       	dc.b	nF1, $06
00075380 EC04                       	smpsPSGAlterVol     $04
00075382 E701                       	dc.b	smpsNoAttack, $01
00075384 EC07                       	smpsPSGAlterVol     $07
00075386 8006                       	dc.b	nRst, $06
00075388 E100                       	smpsAlterNote       $00
0007538A 01                         	dc.b	$01
0007538B E104                       	smpsAlterNote       $04
0007538D 01                         	dc.b	$01
0007538E E103                       	smpsAlterNote       $03
00075390 01                         	dc.b	$01
00075391 E1FD                       	smpsAlterNote       $FD
00075393 01                         	dc.b	$01
00075394 ECF5                       	smpsPSGAlterVol     $F5
00075396 9107                       	dc.b	nE1, $07
00075398 EC0B                       	smpsPSGAlterVol     $0B
0007539A 8004                       	dc.b	nRst, $04
0007539C ECF5                       	smpsPSGAlterVol     $F5
0007539E 9106                       	dc.b	nE1, $06
000753A0 EC0B                       	smpsPSGAlterVol     $0B
000753A2 8007                       	dc.b	nRst, $07
000753A4 E103                       	smpsAlterNote       $03
000753A6 0101                       	dc.b	$01, $01
000753A8 E100                       	smpsAlterNote       $00
000753AA 01                         	dc.b	$01
000753AB E1FA                       	smpsAlterNote       $FA
000753AD 01                         	dc.b	$01
000753AE E1FD                       	smpsAlterNote       $FD
000753B0 ECF5                       	smpsPSGAlterVol     $F5
000753B2 9206                       	dc.b	nF1, $06
000753B4 EC04                       	smpsPSGAlterVol     $04
000753B6 E701                       	dc.b	smpsNoAttack, $01
000753B8 EC07                       	smpsPSGAlterVol     $07
000753BA 8003                       	dc.b	nRst, $03
000753BC ECF5                       	smpsPSGAlterVol     $F5
000753BE 9206                       	dc.b	nF1, $06
000753C0 EC04                       	smpsPSGAlterVol     $04
000753C2 E701                       	dc.b	smpsNoAttack, $01
000753C4 EC07                       	smpsPSGAlterVol     $07
000753C6 8006                       	dc.b	nRst, $06
000753C8 E100                       	smpsAlterNote       $00
000753CA 01                         	dc.b	$01
000753CB E104                       	smpsAlterNote       $04
000753CD 01                         	dc.b	$01
000753CE E100                       	smpsAlterNote       $00
000753D0 01                         	dc.b	$01
000753D1 E1FD                       	smpsAlterNote       $FD
000753D3 01                         	dc.b	$01
000753D4 ECF5                       	smpsPSGAlterVol     $F5
000753D6 9106                       	dc.b	nE1, $06
000753D8 EC04                       	smpsPSGAlterVol     $04
000753DA E701                       	dc.b	smpsNoAttack, $01
000753DC EC07                       	smpsPSGAlterVol     $07
000753DE 8003                       	dc.b	nRst, $03
000753E0 ECF5                       	smpsPSGAlterVol     $F5
000753E2 9107 9106                  	dc.b	nE1, $07, nE1, $06
000753E6 EC04                       	smpsPSGAlterVol     $04
000753E8 E701                       	dc.b	smpsNoAttack, $01
000753EA ECFC                       	smpsPSGAlterVol     $FC
000753EC 9103                       	dc.b	nE1, $03
000753EE EC04                       	smpsPSGAlterVol     $04
000753F0 E701                       	dc.b	smpsNoAttack, $01
000753F2 ECFC                       	smpsPSGAlterVol     $FC
000753F4 9102                       	dc.b	nE1, $02
000753F6 EC04                       	smpsPSGAlterVol     $04
000753F8 E701                       	dc.b	smpsNoAttack, $01
000753FA ECFC                       	smpsPSGAlterVol     $FC
000753FC 9103                       	dc.b	nE1, $03
000753FE EC0B                       	smpsPSGAlterVol     $0B
00075400 800A                       	dc.b	nRst, $0A
00075402 E100                       	smpsAlterNote       $00
00075404 01                         	dc.b	$01
00075405 E104                       	smpsAlterNote       $04
00075407 01                         	dc.b	$01
00075408 E100                       	smpsAlterNote       $00
0007540A 01                         	dc.b	$01
0007540B E1FA                       	smpsAlterNote       $FA
0007540D 01                         	dc.b	$01
0007540E E1F9                       	smpsAlterNote       $F9
00075410 01                         	dc.b	$01
00075411 E1FD                       	smpsAlterNote       $FD
00075413 01                         	dc.b	$01
00075414 E103                       	smpsAlterNote       $03
00075416 0101                       	dc.b	$01, $01
00075418 E100                       	smpsAlterNote       $00
0007541A 01                         	dc.b	$01
0007541B E1FA                       	smpsAlterNote       $FA
0007541D 0101                       	dc.b	$01, $01
0007541F E1FD                       	smpsAlterNote       $FD
00075421 ECF5                       	smpsPSGAlterVol     $F5
00075423 9206                       	dc.b	nF1, $06
00075425 EC04                       	smpsPSGAlterVol     $04
00075427 E704                       	dc.b	smpsNoAttack, $04
00075429 ECFC                       	smpsPSGAlterVol     $FC
0007542B 9206                       	dc.b	nF1, $06
0007542D EC04                       	smpsPSGAlterVol     $04
0007542F E701                       	dc.b	smpsNoAttack, $01
00075431 EC07                       	smpsPSGAlterVol     $07
00075433 8006                       	dc.b	nRst, $06
00075435 E100                       	smpsAlterNote       $00
00075437 01                         	dc.b	$01
00075438 E104                       	smpsAlterNote       $04
0007543A 01                         	dc.b	$01
0007543B E103                       	smpsAlterNote       $03
0007543D 01                         	dc.b	$01
0007543E E1FD                       	smpsAlterNote       $FD
00075440 01                         	dc.b	$01
00075441 ECF5                       	smpsPSGAlterVol     $F5
00075443 9407                       	dc.b	nG1, $07
00075445 EC0B                       	smpsPSGAlterVol     $0B
00075447 8004                       	dc.b	nRst, $04
00075449 ECF5                       	smpsPSGAlterVol     $F5
0007544B 9406                       	dc.b	nG1, $06
0007544D EC0B                       	smpsPSGAlterVol     $0B
0007544F 8007                       	dc.b	nRst, $07
00075451 E103                       	smpsAlterNote       $03
00075453 0101                       	dc.b	$01, $01
00075455 E1FD                       	smpsAlterNote       $FD
00075457 01                         	dc.b	$01
00075458 E1F9                       	smpsAlterNote       $F9
0007545A 01                         	dc.b	$01
0007545B E1FD                       	smpsAlterNote       $FD
0007545D ECF5                       	smpsPSGAlterVol     $F5
0007545F 9206                       	dc.b	nF1, $06
00075461 EC04                       	smpsPSGAlterVol     $04
00075463 E701                       	dc.b	smpsNoAttack, $01
00075465 EC07                       	smpsPSGAlterVol     $07
00075467 8003                       	dc.b	nRst, $03
00075469 ECF5                       	smpsPSGAlterVol     $F5
0007546B 9206                       	dc.b	nF1, $06
0007546D EC04                       	smpsPSGAlterVol     $04
0007546F E701                       	dc.b	smpsNoAttack, $01
00075471 EC07                       	smpsPSGAlterVol     $07
00075473 8006                       	dc.b	nRst, $06
00075475 E100                       	smpsAlterNote       $00
00075477 01                         	dc.b	$01
00075478 E104                       	smpsAlterNote       $04
0007547A 01                         	dc.b	$01
0007547B E100                       	smpsAlterNote       $00
0007547D 01                         	dc.b	$01
0007547E E1FA                       	smpsAlterNote       $FA
00075480 01                         	dc.b	$01
00075481 E1FD                       	smpsAlterNote       $FD
00075483 ECF5                       	smpsPSGAlterVol     $F5
00075485 9206                       	dc.b	nF1, $06
00075487 EC04                       	smpsPSGAlterVol     $04
00075489 E701                       	dc.b	smpsNoAttack, $01
0007548B EC07                       	smpsPSGAlterVol     $07
0007548D 8003                       	dc.b	nRst, $03
0007548F ECF5                       	smpsPSGAlterVol     $F5
00075491 9107                       	dc.b	nE1, $07
00075493 EC0B                       	smpsPSGAlterVol     $0B
00075495 8006                       	dc.b	nRst, $06
00075497 E100                       	smpsAlterNote       $00
00075499 01                         	dc.b	$01
0007549A E103                       	smpsAlterNote       $03
0007549C 0101                       	dc.b	$01, $01
0007549E E1FD                       	smpsAlterNote       $FD
000754A0 01                         	dc.b	$01
000754A1 ECF5                       	smpsPSGAlterVol     $F5
000754A3 9207                       	dc.b	nF1, $07
000754A5 EC0B                       	smpsPSGAlterVol     $0B
000754A7 8004                       	dc.b	nRst, $04
000754A9 ECF5                       	smpsPSGAlterVol     $F5
000754AB 9206                       	dc.b	nF1, $06
000754AD EC04                       	smpsPSGAlterVol     $04
000754AF E701                       	dc.b	smpsNoAttack, $01
000754B1 EC07                       	smpsPSGAlterVol     $07
000754B3 8006                       	dc.b	nRst, $06
000754B5 E103                       	smpsAlterNote       $03
000754B7 01                         	dc.b	$01
000754B8 E104                       	smpsAlterNote       $04
000754BA 01                         	dc.b	$01
000754BB E100                       	smpsAlterNote       $00
000754BD 01                         	dc.b	$01
000754BE E1FB                       	smpsAlterNote       $FB
000754C0 01                         	dc.b	$01
000754C1 E1FD                       	smpsAlterNote       $FD
000754C3 ECF5                       	smpsPSGAlterVol     $F5
000754C5 9406                       	dc.b	nG1, $06
000754C7 EC04                       	smpsPSGAlterVol     $04
000754C9 E701                       	dc.b	smpsNoAttack, $01
000754CB EC07                       	smpsPSGAlterVol     $07
000754CD 8003                       	dc.b	nRst, $03
000754CF ECF5                       	smpsPSGAlterVol     $F5
000754D1 9406                       	dc.b	nG1, $06
000754D3 EC04                       	smpsPSGAlterVol     $04
000754D5 E701                       	dc.b	smpsNoAttack, $01
000754D7 EC07                       	smpsPSGAlterVol     $07
000754D9 8006                       	dc.b	nRst, $06
000754DB E100                       	smpsAlterNote       $00
000754DD 01                         	dc.b	$01
000754DE E104                       	smpsAlterNote       $04
000754E0 01                         	dc.b	$01
000754E1 E100                       	smpsAlterNote       $00
000754E3 01                         	dc.b	$01
000754E4 E1FD                       	smpsAlterNote       $FD
000754E6 01                         	dc.b	$01
000754E7 ECF5                       	smpsPSGAlterVol     $F5
000754E9 9206                       	dc.b	nF1, $06
000754EB EC04                       	smpsPSGAlterVol     $04
000754ED E701                       	dc.b	smpsNoAttack, $01
000754EF EC07                       	smpsPSGAlterVol     $07
000754F1 8003                       	dc.b	nRst, $03
000754F3 ECF5                       	smpsPSGAlterVol     $F5
000754F5 9207                       	dc.b	nF1, $07
000754F7 EC0B                       	smpsPSGAlterVol     $0B
000754F9 8007                       	dc.b	nRst, $07
000754FB E103                       	smpsAlterNote       $03
000754FD 0101                       	dc.b	$01, $01
000754FF E1FD                       	smpsAlterNote       $FD
00075501 01                         	dc.b	$01
00075502 E1FA                       	smpsAlterNote       $FA
00075504 01                         	dc.b	$01
00075505 E1FD                       	smpsAlterNote       $FD
00075507 ECF5                       	smpsPSGAlterVol     $F5
00075509 9206                       	dc.b	nF1, $06
0007550B EC0B                       	smpsPSGAlterVol     $0B
0007550D 8004                       	dc.b	nRst, $04
0007550F ECF5                       	smpsPSGAlterVol     $F5
00075511 9206                       	dc.b	nF1, $06
00075513 EC04                       	smpsPSGAlterVol     $04
00075515 E701                       	dc.b	smpsNoAttack, $01
00075517 EC07                       	smpsPSGAlterVol     $07
00075519 8006                       	dc.b	nRst, $06
0007551B E100                       	smpsAlterNote       $00
0007551D 01                         	dc.b	$01
0007551E E104                       	smpsAlterNote       $04
00075520 01                         	dc.b	$01
00075521 E100                       	smpsAlterNote       $00
00075523 01                         	dc.b	$01
00075524 E1FA                       	smpsAlterNote       $FA
00075526 01                         	dc.b	$01
00075527 E1FD                       	smpsAlterNote       $FD
00075529 ECF5                       	smpsPSGAlterVol     $F5
0007552B 9206                       	dc.b	nF1, $06
0007552D EC04                       	smpsPSGAlterVol     $04
0007552F E701                       	dc.b	smpsNoAttack, $01
00075531 EC07                       	smpsPSGAlterVol     $07
00075533 8003                       	dc.b	nRst, $03
00075535 ECF5                       	smpsPSGAlterVol     $F5
00075537 9207                       	dc.b	nF1, $07
00075539 EC0B                       	smpsPSGAlterVol     $0B
0007553B 8006                       	dc.b	nRst, $06
0007553D E100                       	smpsAlterNote       $00
0007553F 01                         	dc.b	$01
00075540 E103                       	smpsAlterNote       $03
00075542 0101                       	dc.b	$01, $01
00075544 E1FD                       	smpsAlterNote       $FD
00075546 01                         	dc.b	$01
00075547 ECF5                       	smpsPSGAlterVol     $F5
00075549 9207                       	dc.b	nF1, $07
0007554B EC0B                       	smpsPSGAlterVol     $0B
0007554D 8004                       	dc.b	nRst, $04
0007554F ECF5                       	smpsPSGAlterVol     $F5
00075551 9206                       	dc.b	nF1, $06
00075553 EC0B                       	smpsPSGAlterVol     $0B
00075555 8007                       	dc.b	nRst, $07
00075557 E103                       	smpsAlterNote       $03
00075559 0101                       	dc.b	$01, $01
0007555B E100                       	smpsAlterNote       $00
0007555D 01                         	dc.b	$01
0007555E E1FA                       	smpsAlterNote       $FA
00075560 01                         	dc.b	$01
00075561 E1FD                       	smpsAlterNote       $FD
00075563 ECF5                       	smpsPSGAlterVol     $F5
00075565 9206                       	dc.b	nF1, $06
00075567 EC04                       	smpsPSGAlterVol     $04
00075569 E701                       	dc.b	smpsNoAttack, $01
0007556B EC07                       	smpsPSGAlterVol     $07
0007556D 8003                       	dc.b	nRst, $03
0007556F ECF5                       	smpsPSGAlterVol     $F5
00075571 9206                       	dc.b	nF1, $06
00075573 EC04                       	smpsPSGAlterVol     $04
00075575 E701                       	dc.b	smpsNoAttack, $01
00075577 EC07                       	smpsPSGAlterVol     $07
00075579 8006                       	dc.b	nRst, $06
0007557B E100                       	smpsAlterNote       $00
0007557D 01                         	dc.b	$01
0007557E E104                       	smpsAlterNote       $04
00075580 01                         	dc.b	$01
00075581 E100                       	smpsAlterNote       $00
00075583 01                         	dc.b	$01
00075584 E1FD                       	smpsAlterNote       $FD
00075586 01                         	dc.b	$01
00075587 ECF5                       	smpsPSGAlterVol     $F5
00075589 9206                       	dc.b	nF1, $06
0007558B EC04                       	smpsPSGAlterVol     $04
0007558D E701                       	dc.b	smpsNoAttack, $01
0007558F EC07                       	smpsPSGAlterVol     $07
00075591 8003                       	dc.b	nRst, $03
00075593 ECF5                       	smpsPSGAlterVol     $F5
00075595 9207                       	dc.b	nF1, $07
00075597 EC0B                       	smpsPSGAlterVol     $0B
00075599 8007                       	dc.b	nRst, $07
0007559B E104                       	smpsAlterNote       $04
0007559D 0101                       	dc.b	$01, $01
0007559F E1FB                       	smpsAlterNote       $FB
000755A1 01                         	dc.b	$01
000755A2 E1F6                       	smpsAlterNote       $F6
000755A4 0101                       	dc.b	$01, $01
000755A6 E1FF                       	smpsAlterNote       $FF
000755A8 01                         	dc.b	$01
000755A9 E105                       	smpsAlterNote       $05
000755AB 01                         	dc.b	$01
000755AC E104                       	smpsAlterNote       $04
000755AE 01                         	dc.b	$01
000755AF E1FB                       	smpsAlterNote       $FB
000755B1 01                         	dc.b	$01
000755B2 E1F5                       	smpsAlterNote       $F5
000755B4 01                         	dc.b	$01
000755B5 E1FC                       	smpsAlterNote       $FC
000755B7 ECF5                       	smpsPSGAlterVol     $F5
000755B9 8B0E                       	dc.b	nBb0, $0E
000755BB E102                       	smpsAlterNote       $02
000755BD EC0B                       	smpsPSGAlterVol     $0B
000755BF 8001                       	dc.b	nRst, $01
000755C1 E101                       	smpsAlterNote       $01
000755C3 01                         	dc.b	$01
000755C4 E1FC                       	smpsAlterNote       $FC
000755C6 01                         	dc.b	$01
000755C7 E1F9                       	smpsAlterNote       $F9
000755C9 0101                       	dc.b	$01, $01
000755CB E1FF                       	smpsAlterNote       $FF
000755CD 01                         	dc.b	$01
000755CE E102                       	smpsAlterNote       $02
000755D0 01                         	dc.b	$01
000755D1 E1FF                       	smpsAlterNote       $FF
000755D3 01                         	dc.b	$01
000755D4 E1FC                       	smpsAlterNote       $FC
000755D6 01                         	dc.b	$01
000755D7 E1F8                       	smpsAlterNote       $F8
000755D9 01                         	dc.b	$01
000755DA E1FC                       	smpsAlterNote       $FC
000755DC 01                         	dc.b	$01
000755DD E101                       	smpsAlterNote       $01
000755DF 01                         	dc.b	$01
000755E0 E102                       	smpsAlterNote       $02
000755E2 01                         	dc.b	$01
000755E3 E1FF                       	smpsAlterNote       $FF
000755E5 01                         	dc.b	$01
000755E6 E1FB                       	smpsAlterNote       $FB
000755E8 ECF5                       	smpsPSGAlterVol     $F5
000755EA 8D0D                       	dc.b	nC1, $0D
000755EC E101                       	smpsAlterNote       $01
000755EE EC0B                       	smpsPSGAlterVol     $0B
000755F0 8001                       	dc.b	nRst, $01
000755F2 E102                       	smpsAlterNote       $02
000755F4 01                         	dc.b	$01
000755F5 E1FF                       	smpsAlterNote       $FF
000755F7 01                         	dc.b	$01
000755F8 E1F9                       	smpsAlterNote       $F9
000755FA 0101                       	dc.b	$01, $01
000755FC E1FC                       	smpsAlterNote       $FC
000755FE 01                         	dc.b	$01
000755FF E101                       	smpsAlterNote       $01
00075601 0101                       	dc.b	$01, $01
00075603 E1FC                       	smpsAlterNote       $FC
00075605 01                         	dc.b	$01
00075606 E1F9                       	smpsAlterNote       $F9
00075608 0101                       	dc.b	$01, $01
0007560A E1FF                       	smpsAlterNote       $FF
0007560C 01                         	dc.b	$01
0007560D E102                       	smpsAlterNote       $02
0007560F 01                         	dc.b	$01
00075610 E101                       	smpsAlterNote       $01
00075612 01                         	dc.b	$01
00075613 E1FC                       	smpsAlterNote       $FC
00075615 ECF5                       	smpsPSGAlterVol     $F5
00075617 8F0D                       	dc.b	nD1, $0D
00075619 E1FF                       	smpsAlterNote       $FF
0007561B EC04                       	smpsPSGAlterVol     $04
0007561D E701                       	dc.b	smpsNoAttack, $01
0007561F EC07                       	smpsPSGAlterVol     $07
00075621 E103                       	smpsAlterNote       $03
00075623 8001                       	dc.b	nRst, $01
00075625 E102                       	smpsAlterNote       $02
00075627 01                         	dc.b	$01
00075628 E1FD                       	smpsAlterNote       $FD
0007562A 01                         	dc.b	$01
0007562B E1F9                       	smpsAlterNote       $F9
0007562D 01                         	dc.b	$01
0007562E E1FD                       	smpsAlterNote       $FD
00075630 01                         	dc.b	$01
00075631 E100                       	smpsAlterNote       $00
00075633 01                         	dc.b	$01
00075634 E103                       	smpsAlterNote       $03
00075636 01                         	dc.b	$01
00075637 E100                       	smpsAlterNote       $00
00075639 01                         	dc.b	$01
0007563A E1FA                       	smpsAlterNote       $FA
0007563C 01                         	dc.b	$01
0007563D E1F9                       	smpsAlterNote       $F9
0007563F 01                         	dc.b	$01
00075640 E1FD                       	smpsAlterNote       $FD
00075642 01                         	dc.b	$01
00075643 E102                       	smpsAlterNote       $02
00075645 0101                       	dc.b	$01, $01
00075647 E100                       	smpsAlterNote       $00
00075649 01                         	dc.b	$01
0007564A E1FD                       	smpsAlterNote       $FD
0007564C ECF5                       	smpsPSGAlterVol     $F5
0007564E 910D                       	dc.b	nE1, $0D
00075650 E103                       	smpsAlterNote       $03
00075652 EC0B                       	smpsPSGAlterVol     $0B
00075654 8001 01                    	dc.b	nRst, $01, $01
00075657 E100                       	smpsAlterNote       $00
00075659 01                         	dc.b	$01
0007565A E1FA                       	smpsAlterNote       $FA
0007565C 0101                       	dc.b	$01, $01
0007565E E100                       	smpsAlterNote       $00
00075660 01                         	dc.b	$01
00075661 E103                       	smpsAlterNote       $03
00075663 01                         	dc.b	$01
00075664 E1FD                       	smpsAlterNote       $FD
00075666 ECF5                       	smpsPSGAlterVol     $F5
00075668 9206                       	dc.b	nF1, $06
0007566A EC04                       	smpsPSGAlterVol     $04
0007566C E701                       	dc.b	smpsNoAttack, $01
0007566E EC07                       	smpsPSGAlterVol     $07
00075670 8003                       	dc.b	nRst, $03
00075672 ECF5                       	smpsPSGAlterVol     $F5
00075674 9207                       	dc.b	nF1, $07
00075676 EC0B                       	smpsPSGAlterVol     $0B
00075678 8006                       	dc.b	nRst, $06
0007567A E100                       	smpsAlterNote       $00
0007567C 01                         	dc.b	$01
0007567D E103                       	smpsAlterNote       $03
0007567F 0101                       	dc.b	$01, $01
00075681 E1FD                       	smpsAlterNote       $FD
00075683 01                         	dc.b	$01
00075684 ECF5                       	smpsPSGAlterVol     $F5
00075686 9407                       	dc.b	nG1, $07
00075688 EC0B                       	smpsPSGAlterVol     $0B
0007568A 8004                       	dc.b	nRst, $04
0007568C ECF5                       	smpsPSGAlterVol     $F5
0007568E 9406                       	dc.b	nG1, $06
00075690 EC04                       	smpsPSGAlterVol     $04
00075692 E701                       	dc.b	smpsNoAttack, $01
00075694 EC07                       	smpsPSGAlterVol     $07
00075696 8006                       	dc.b	nRst, $06
00075698 E103                       	smpsAlterNote       $03
0007569A 01                         	dc.b	$01
0007569B E104                       	smpsAlterNote       $04
0007569D 01                         	dc.b	$01
0007569E E100                       	smpsAlterNote       $00
000756A0 01                         	dc.b	$01
000756A1 E1F9                       	smpsAlterNote       $F9
000756A3 01                         	dc.b	$01
000756A4 E1FD                       	smpsAlterNote       $FD
000756A6 ECF5                       	smpsPSGAlterVol     $F5
000756A8 9206                       	dc.b	nF1, $06
000756AA EC04                       	smpsPSGAlterVol     $04
000756AC E701                       	dc.b	smpsNoAttack, $01
000756AE EC07                       	smpsPSGAlterVol     $07
000756B0 8003                       	dc.b	nRst, $03
000756B2 ECF5                       	smpsPSGAlterVol     $F5
000756B4 9206                       	dc.b	nF1, $06
000756B6 EC04                       	smpsPSGAlterVol     $04
000756B8 E701                       	dc.b	smpsNoAttack, $01
000756BA EC07                       	smpsPSGAlterVol     $07
000756BC 8006                       	dc.b	nRst, $06
000756BE E100                       	smpsAlterNote       $00
000756C0 01                         	dc.b	$01
000756C1 E104                       	smpsAlterNote       $04
000756C3 01                         	dc.b	$01
000756C4 E103                       	smpsAlterNote       $03
000756C6 01                         	dc.b	$01
000756C7 E1FD                       	smpsAlterNote       $FD
000756C9 01                         	dc.b	$01
000756CA ECF5                       	smpsPSGAlterVol     $F5
000756CC 9407                       	dc.b	nG1, $07
000756CE EC0B                       	smpsPSGAlterVol     $0B
000756D0 8004                       	dc.b	nRst, $04
000756D2 ECF5                       	smpsPSGAlterVol     $F5
000756D4 9406                       	dc.b	nG1, $06
000756D6 EC0B                       	smpsPSGAlterVol     $0B
000756D8 8007                       	dc.b	nRst, $07
000756DA E103                       	smpsAlterNote       $03
000756DC 0101                       	dc.b	$01, $01
000756DE E100                       	smpsAlterNote       $00
000756E0 01                         	dc.b	$01
000756E1 E1F9                       	smpsAlterNote       $F9
000756E3 01                         	dc.b	$01
000756E4 E1FD                       	smpsAlterNote       $FD
000756E6 ECF5                       	smpsPSGAlterVol     $F5
000756E8 9206                       	dc.b	nF1, $06
000756EA EC04                       	smpsPSGAlterVol     $04
000756EC E701                       	dc.b	smpsNoAttack, $01
000756EE EC07                       	smpsPSGAlterVol     $07
000756F0 8003                       	dc.b	nRst, $03
000756F2 ECF5                       	smpsPSGAlterVol     $F5
000756F4 9206                       	dc.b	nF1, $06
000756F6 EC04                       	smpsPSGAlterVol     $04
000756F8 E701                       	dc.b	smpsNoAttack, $01
000756FA EC07                       	smpsPSGAlterVol     $07
000756FC 8006                       	dc.b	nRst, $06
000756FE E100                       	smpsAlterNote       $00
00075700 01                         	dc.b	$01
00075701 E104                       	smpsAlterNote       $04
00075703 01                         	dc.b	$01
00075704 E100                       	smpsAlterNote       $00
00075706 01                         	dc.b	$01
00075707 E1FB                       	smpsAlterNote       $FB
00075709 01                         	dc.b	$01
0007570A E1FD                       	smpsAlterNote       $FD
0007570C ECF5                       	smpsPSGAlterVol     $F5
0007570E 9406                       	dc.b	nG1, $06
00075710 EC04                       	smpsPSGAlterVol     $04
00075712 E701                       	dc.b	smpsNoAttack, $01
00075714 EC07                       	smpsPSGAlterVol     $07
00075716 8003                       	dc.b	nRst, $03
00075718 ECF5                       	smpsPSGAlterVol     $F5
0007571A 9407                       	dc.b	nG1, $07
0007571C EC0B                       	smpsPSGAlterVol     $0B
0007571E 8006                       	dc.b	nRst, $06
00075720 E100                       	smpsAlterNote       $00
00075722 01                         	dc.b	$01
00075723 E103                       	smpsAlterNote       $03
00075725 0101                       	dc.b	$01, $01
00075727 E1FD                       	smpsAlterNote       $FD
00075729 01                         	dc.b	$01
0007572A ECF5                       	smpsPSGAlterVol     $F5
0007572C 9207                       	dc.b	nF1, $07
0007572E EC0B                       	smpsPSGAlterVol     $0B
00075730 8004                       	dc.b	nRst, $04
00075732 ECF5                       	smpsPSGAlterVol     $F5
00075734 9206                       	dc.b	nF1, $06
00075736 EC04                       	smpsPSGAlterVol     $04
00075738 E701                       	dc.b	smpsNoAttack, $01
0007573A ECFC                       	smpsPSGAlterVol     $FC
0007573C E1FC                       	smpsAlterNote       $FC
0007573E 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00075742 EC04                       	smpsPSGAlterVol     $04
00075744 E701                       	dc.b	smpsNoAttack, $01
00075746 ECFC                       	smpsPSGAlterVol     $FC
00075748 9003                       	dc.b	nEb1, $03
0007574A E1FD                       	smpsAlterNote       $FD
0007574C 9403                       	dc.b	nG1, $03
0007574E EC04                       	smpsPSGAlterVol     $04
00075750 E701                       	dc.b	smpsNoAttack, $01
00075752 E1FE                       	smpsAlterNote       $FE
00075754 ECFC                       	smpsPSGAlterVol     $FC
00075756 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0007575A EC04                       	smpsPSGAlterVol     $04
0007575C E701                       	dc.b	smpsNoAttack, $01
0007575E EC07                       	smpsPSGAlterVol     $07
00075760 8009                       	dc.b	nRst, $09
00075762 E100                       	smpsAlterNote       $00
00075764 01                         	dc.b	$01
00075765 F6F5 19                    	smpsJump            music84_Jump07
00075768                            
00075768                            ; PSG2 Data
00075768                            music84_PSG2:
00075768 E1FC                       	smpsAlterNote       $FC
0007576A EC04                       	smpsPSGAlterVol     $04
0007576C 8F03                       	dc.b	nD1, $03
0007576E E1FD                       	smpsAlterNote       $FD
00075770 9203                       	dc.b	nF1, $03
00075772 EC04                       	smpsPSGAlterVol     $04
00075774 E701                       	dc.b	smpsNoAttack, $01
00075776 E1FE                       	smpsAlterNote       $FE
00075778 ECFC                       	smpsPSGAlterVol     $FC
0007577A 9603                       	dc.b	nA1, $03
0007577C E1FD                       	smpsAlterNote       $FD
0007577E 9103                       	dc.b	nE1, $03
00075780 EC04                       	smpsPSGAlterVol     $04
00075782 E701                       	dc.b	smpsNoAttack, $01
00075784 ECFC                       	smpsPSGAlterVol     $FC
00075786 9403                       	dc.b	nG1, $03
00075788 E1FE                       	smpsAlterNote       $FE
0007578A 9703                       	dc.b	nBb1, $03
0007578C EC04                       	smpsPSGAlterVol     $04
0007578E E701                       	dc.b	smpsNoAttack, $01
00075790 E1FF                       	smpsAlterNote       $FF
00075792 ECFC                       	smpsPSGAlterVol     $FC
00075794 9B02                       	dc.b	nD2, $02
00075796 EC04                       	smpsPSGAlterVol     $04
00075798 E701                       	dc.b	smpsNoAttack, $01
0007579A ECFC                       	smpsPSGAlterVol     $FC
0007579C E1FE                       	smpsAlterNote       $FE
0007579E 9A03                       	dc.b	nCs2, $03
000757A0 EC0B                       	smpsPSGAlterVol     $0B
000757A2 800A                       	dc.b	nRst, $0A
000757A4 E102                       	smpsAlterNote       $02
000757A6 01                         	dc.b	$01
000757A7 E10A                       	smpsAlterNote       $0A
000757A9 01                         	dc.b	$01
000757AA E102                       	smpsAlterNote       $02
000757AC 01                         	dc.b	$01
000757AD E1FC                       	smpsAlterNote       $FC
000757AF 01                         	dc.b	$01
000757B0 E10A                       	smpsAlterNote       $0A
000757B2 01                         	dc.b	$01
000757B3 E1FC                       	smpsAlterNote       $FC
000757B5 01                         	dc.b	$01
000757B6 E108                       	smpsAlterNote       $08
000757B8 01                         	dc.b	$01
000757B9 E10A                       	smpsAlterNote       $0A
000757BB 01                         	dc.b	$01
000757BC E102                       	smpsAlterNote       $02
000757BE 01                         	dc.b	$01
000757BF E1F7                       	smpsAlterNote       $F7
000757C1 0101                       	dc.b	$01, $01
000757C3 E102                       	smpsAlterNote       $02
000757C5 01                         	dc.b	$01
000757C6 E108                       	smpsAlterNote       $08
000757C8 0101                       	dc.b	$01, $01
000757CA E1FC                       	smpsAlterNote       $FC
000757CC 01                         	dc.b	$01
000757CD E10A                       	smpsAlterNote       $0A
000757CF 01                         	dc.b	$01
000757D0 E1F7                       	smpsAlterNote       $F7
000757D2 01                         	dc.b	$01
000757D3 E102                       	smpsAlterNote       $02
000757D5 01                         	dc.b	$01
000757D6 E10A                       	smpsAlterNote       $0A
000757D8 01                         	dc.b	$01
000757D9 E102                       	smpsAlterNote       $02
000757DB 01                         	dc.b	$01
000757DC E1FC                       	smpsAlterNote       $FC
000757DE 01                         	dc.b	$01
000757DF                            
000757DF                            music84_Jump06:
000757DF E10A                       	smpsAlterNote       $0A
000757E1 8001                       	dc.b	nRst, $01
000757E3 E1FC                       	smpsAlterNote       $FC
000757E5 01                         	dc.b	$01
000757E6 E108                       	smpsAlterNote       $08
000757E8 01                         	dc.b	$01
000757E9 E10A                       	smpsAlterNote       $0A
000757EB 01                         	dc.b	$01
000757EC E1FC                       	smpsAlterNote       $FC
000757EE ECF5                       	smpsPSGAlterVol     $F5
000757F0 8F06                       	dc.b	nD1, $06
000757F2 EC04                       	smpsPSGAlterVol     $04
000757F4 E701                       	dc.b	smpsNoAttack, $01
000757F6 EC07                       	smpsPSGAlterVol     $07
000757F8 8003                       	dc.b	nRst, $03
000757FA ECF5                       	smpsPSGAlterVol     $F5
000757FC 8F06                       	dc.b	nD1, $06
000757FE EC04                       	smpsPSGAlterVol     $04
00075800 E701                       	dc.b	smpsNoAttack, $01
00075802 EC07                       	smpsPSGAlterVol     $07
00075804 8006                       	dc.b	nRst, $06
00075806 E1FF                       	smpsAlterNote       $FF
00075808 01                         	dc.b	$01
00075809 E102                       	smpsAlterNote       $02
0007580B 01                         	dc.b	$01
0007580C E1FF                       	smpsAlterNote       $FF
0007580E 01                         	dc.b	$01
0007580F E1F9                       	smpsAlterNote       $F9
00075811 01                         	dc.b	$01
00075812 E1FC                       	smpsAlterNote       $FC
00075814 ECF5                       	smpsPSGAlterVol     $F5
00075816 9006                       	dc.b	nEb1, $06
00075818 EC04                       	smpsPSGAlterVol     $04
0007581A E701                       	dc.b	smpsNoAttack, $01
0007581C EC07                       	smpsPSGAlterVol     $07
0007581E 8003                       	dc.b	nRst, $03
00075820 ECF5                       	smpsPSGAlterVol     $F5
00075822 9007                       	dc.b	nEb1, $07
00075824 EC0B                       	smpsPSGAlterVol     $0B
00075826 8006                       	dc.b	nRst, $06
00075828 E1FF                       	smpsAlterNote       $FF
0007582A 01                         	dc.b	$01
0007582B E103                       	smpsAlterNote       $03
0007582D 0101                       	dc.b	$01, $01
0007582F E1FC                       	smpsAlterNote       $FC
00075831 01                         	dc.b	$01
00075832 ECF5                       	smpsPSGAlterVol     $F5
00075834 8F07                       	dc.b	nD1, $07
00075836 EC0B                       	smpsPSGAlterVol     $0B
00075838 8004                       	dc.b	nRst, $04
0007583A ECF5                       	smpsPSGAlterVol     $F5
0007583C 8F06                       	dc.b	nD1, $06
0007583E EC04                       	smpsPSGAlterVol     $04
00075840 E701                       	dc.b	smpsNoAttack, $01
00075842 EC07                       	smpsPSGAlterVol     $07
00075844 8006                       	dc.b	nRst, $06
00075846 E102                       	smpsAlterNote       $02
00075848 01                         	dc.b	$01
00075849 E103                       	smpsAlterNote       $03
0007584B 01                         	dc.b	$01
0007584C E1FF                       	smpsAlterNote       $FF
0007584E 01                         	dc.b	$01
0007584F E1F9                       	smpsAlterNote       $F9
00075851 01                         	dc.b	$01
00075852 E1FC                       	smpsAlterNote       $FC
00075854 ECF5                       	smpsPSGAlterVol     $F5
00075856 8F06                       	dc.b	nD1, $06
00075858 EC04                       	smpsPSGAlterVol     $04
0007585A E701                       	dc.b	smpsNoAttack, $01
0007585C EC07                       	smpsPSGAlterVol     $07
0007585E 8003                       	dc.b	nRst, $03
00075860 ECF5                       	smpsPSGAlterVol     $F5
00075862 8F06                       	dc.b	nD1, $06
00075864 EC04                       	smpsPSGAlterVol     $04
00075866 E701                       	dc.b	smpsNoAttack, $01
00075868 EC07                       	smpsPSGAlterVol     $07
0007586A 8006                       	dc.b	nRst, $06
0007586C E1FF                       	smpsAlterNote       $FF
0007586E 01                         	dc.b	$01
0007586F E103                       	smpsAlterNote       $03
00075871 01                         	dc.b	$01
00075872 E1FF                       	smpsAlterNote       $FF
00075874 01                         	dc.b	$01
00075875 E1FC                       	smpsAlterNote       $FC
00075877 01                         	dc.b	$01
00075878 ECF5                       	smpsPSGAlterVol     $F5
0007587A 8F06                       	dc.b	nD1, $06
0007587C EC04                       	smpsPSGAlterVol     $04
0007587E E701                       	dc.b	smpsNoAttack, $01
00075880 EC07                       	smpsPSGAlterVol     $07
00075882 8003                       	dc.b	nRst, $03
00075884 ECF5                       	smpsPSGAlterVol     $F5
00075886 8F07                       	dc.b	nD1, $07
00075888 EC0B                       	smpsPSGAlterVol     $0B
0007588A 8007                       	dc.b	nRst, $07
0007588C E101                       	smpsAlterNote       $01
0007588E 0101                       	dc.b	$01, $01
00075890 E1FC                       	smpsAlterNote       $FC
00075892 01                         	dc.b	$01
00075893 E1F9                       	smpsAlterNote       $F9
00075895 01                         	dc.b	$01
00075896 E1FC                       	smpsAlterNote       $FC
00075898 ECF5                       	smpsPSGAlterVol     $F5
0007589A 9006                       	dc.b	nEb1, $06
0007589C EC0B                       	smpsPSGAlterVol     $0B
0007589E 8004                       	dc.b	nRst, $04
000758A0 ECF5                       	smpsPSGAlterVol     $F5
000758A2 9006                       	dc.b	nEb1, $06
000758A4 EC04                       	smpsPSGAlterVol     $04
000758A6 E701                       	dc.b	smpsNoAttack, $01
000758A8 EC07                       	smpsPSGAlterVol     $07
000758AA 8006                       	dc.b	nRst, $06
000758AC E100                       	smpsAlterNote       $00
000758AE 01                         	dc.b	$01
000758AF E102                       	smpsAlterNote       $02
000758B1 01                         	dc.b	$01
000758B2 E100                       	smpsAlterNote       $00
000758B4 01                         	dc.b	$01
000758B5 E1FD                       	smpsAlterNote       $FD
000758B7 01                         	dc.b	$01
000758B8 E1FF                       	smpsAlterNote       $FF
000758BA ECF5                       	smpsPSGAlterVol     $F5
000758BC 9B06                       	dc.b	nD2, $06
000758BE EC04                       	smpsPSGAlterVol     $04
000758C0 E701                       	dc.b	smpsNoAttack, $01
000758C2 EC07                       	smpsPSGAlterVol     $07
000758C4 8003                       	dc.b	nRst, $03
000758C6 ECF5                       	smpsPSGAlterVol     $F5
000758C8 9B07                       	dc.b	nD2, $07
000758CA EC0B                       	smpsPSGAlterVol     $0B
000758CC 8006                       	dc.b	nRst, $06
000758CE E102                       	smpsAlterNote       $02
000758D0 01                         	dc.b	$01
000758D1 E106                       	smpsAlterNote       $06
000758D3 01                         	dc.b	$01
000758D4 E105                       	smpsAlterNote       $05
000758D6 01                         	dc.b	$01
000758D7 E1FF                       	smpsAlterNote       $FF
000758D9 01                         	dc.b	$01
000758DA ECF5                       	smpsPSGAlterVol     $F5
000758DC 9B07                       	dc.b	nD2, $07
000758DE EC0B                       	smpsPSGAlterVol     $0B
000758E0 8004                       	dc.b	nRst, $04
000758E2 ECF5                       	smpsPSGAlterVol     $F5
000758E4 9B06                       	dc.b	nD2, $06
000758E6 EC0B                       	smpsPSGAlterVol     $0B
000758E8 8007                       	dc.b	nRst, $07
000758EA E105                       	smpsAlterNote       $05
000758EC 0101                       	dc.b	$01, $01
000758EE E102                       	smpsAlterNote       $02
000758F0 01                         	dc.b	$01
000758F1 E1FC                       	smpsAlterNote       $FC
000758F3 01                         	dc.b	$01
000758F4 E1FF                       	smpsAlterNote       $FF
000758F6 ECF5                       	smpsPSGAlterVol     $F5
000758F8 9B06                       	dc.b	nD2, $06
000758FA EC04                       	smpsPSGAlterVol     $04
000758FC E701                       	dc.b	smpsNoAttack, $01
000758FE EC07                       	smpsPSGAlterVol     $07
00075900 8003                       	dc.b	nRst, $03
00075902 ECF5                       	smpsPSGAlterVol     $F5
00075904 9B06                       	dc.b	nD2, $06
00075906 EC04                       	smpsPSGAlterVol     $04
00075908 E701                       	dc.b	smpsNoAttack, $01
0007590A EC07                       	smpsPSGAlterVol     $07
0007590C 8006                       	dc.b	nRst, $06
0007590E E102                       	smpsAlterNote       $02
00075910 01                         	dc.b	$01
00075911 E106                       	smpsAlterNote       $06
00075913 01                         	dc.b	$01
00075914 E102                       	smpsAlterNote       $02
00075916 01                         	dc.b	$01
00075917 E1FF                       	smpsAlterNote       $FF
00075919 01                         	dc.b	$01
0007591A ECF5                       	smpsPSGAlterVol     $F5
0007591C 9B06                       	dc.b	nD2, $06
0007591E EC04                       	smpsPSGAlterVol     $04
00075920 E701                       	dc.b	smpsNoAttack, $01
00075922 EC07                       	smpsPSGAlterVol     $07
00075924 8003                       	dc.b	nRst, $03
00075926 ECF5                       	smpsPSGAlterVol     $F5
00075928 9B07                       	dc.b	nD2, $07
0007592A EC0B                       	smpsPSGAlterVol     $0B
0007592C 8007                       	dc.b	nRst, $07
0007592E E105                       	smpsAlterNote       $05
00075930 0101                       	dc.b	$01, $01
00075932 E1FF                       	smpsAlterNote       $FF
00075934 01                         	dc.b	$01
00075935 E1FC                       	smpsAlterNote       $FC
00075937 01                         	dc.b	$01
00075938 E1FF                       	smpsAlterNote       $FF
0007593A ECF5                       	smpsPSGAlterVol     $F5
0007593C 9B06                       	dc.b	nD2, $06
0007593E EC0B                       	smpsPSGAlterVol     $0B
00075940 8004                       	dc.b	nRst, $04
00075942 ECF5                       	smpsPSGAlterVol     $F5
00075944 9B06                       	dc.b	nD2, $06
00075946 EC04                       	smpsPSGAlterVol     $04
00075948 E701                       	dc.b	smpsNoAttack, $01
0007594A EC07                       	smpsPSGAlterVol     $07
0007594C 8006                       	dc.b	nRst, $06
0007594E E105                       	smpsAlterNote       $05
00075950 01                         	dc.b	$01
00075951 E106                       	smpsAlterNote       $06
00075953 01                         	dc.b	$01
00075954 E102                       	smpsAlterNote       $02
00075956 01                         	dc.b	$01
00075957 E1FC                       	smpsAlterNote       $FC
00075959 01                         	dc.b	$01
0007595A E1FF                       	smpsAlterNote       $FF
0007595C ECF5                       	smpsPSGAlterVol     $F5
0007595E 9B06                       	dc.b	nD2, $06
00075960 EC04                       	smpsPSGAlterVol     $04
00075962 E701                       	dc.b	smpsNoAttack, $01
00075964 EC07                       	smpsPSGAlterVol     $07
00075966 8003                       	dc.b	nRst, $03
00075968 ECF5                       	smpsPSGAlterVol     $F5
0007596A 9B06                       	dc.b	nD2, $06
0007596C EC04                       	smpsPSGAlterVol     $04
0007596E E701                       	dc.b	smpsNoAttack, $01
00075970 EC07                       	smpsPSGAlterVol     $07
00075972 8006                       	dc.b	nRst, $06
00075974 E102                       	smpsAlterNote       $02
00075976 01                         	dc.b	$01
00075977 E106                       	smpsAlterNote       $06
00075979 01                         	dc.b	$01
0007597A E105                       	smpsAlterNote       $05
0007597C 01                         	dc.b	$01
0007597D E1FF                       	smpsAlterNote       $FF
0007597F 01                         	dc.b	$01
00075980 ECF5                       	smpsPSGAlterVol     $F5
00075982 9B07                       	dc.b	nD2, $07
00075984 EC0B                       	smpsPSGAlterVol     $0B
00075986 8004                       	dc.b	nRst, $04
00075988 ECF5                       	smpsPSGAlterVol     $F5
0007598A 9B06                       	dc.b	nD2, $06
0007598C EC0B                       	smpsPSGAlterVol     $0B
0007598E 8007                       	dc.b	nRst, $07
00075990 E105                       	smpsAlterNote       $05
00075992 0101                       	dc.b	$01, $01
00075994 E102                       	smpsAlterNote       $02
00075996 01                         	dc.b	$01
00075997 E1FC                       	smpsAlterNote       $FC
00075999 01                         	dc.b	$01
0007599A E1FF                       	smpsAlterNote       $FF
0007599C ECF5                       	smpsPSGAlterVol     $F5
0007599E 9B06                       	dc.b	nD2, $06
000759A0 EC04                       	smpsPSGAlterVol     $04
000759A2 E701                       	dc.b	smpsNoAttack, $01
000759A4 EC07                       	smpsPSGAlterVol     $07
000759A6 8003                       	dc.b	nRst, $03
000759A8 ECF5                       	smpsPSGAlterVol     $F5
000759AA 9B06                       	dc.b	nD2, $06
000759AC EC04                       	smpsPSGAlterVol     $04
000759AE E701                       	dc.b	smpsNoAttack, $01
000759B0 EC07                       	smpsPSGAlterVol     $07
000759B2 8006                       	dc.b	nRst, $06
000759B4 E102                       	smpsAlterNote       $02
000759B6 01                         	dc.b	$01
000759B7 E106                       	smpsAlterNote       $06
000759B9 01                         	dc.b	$01
000759BA E102                       	smpsAlterNote       $02
000759BC 01                         	dc.b	$01
000759BD E1FF                       	smpsAlterNote       $FF
000759BF 01                         	dc.b	$01
000759C0 ECF5                       	smpsPSGAlterVol     $F5
000759C2 9B06                       	dc.b	nD2, $06
000759C4 EC04                       	smpsPSGAlterVol     $04
000759C6 E701                       	dc.b	smpsNoAttack, $01
000759C8 EC07                       	smpsPSGAlterVol     $07
000759CA 8003                       	dc.b	nRst, $03
000759CC ECF5                       	smpsPSGAlterVol     $F5
000759CE 9B07                       	dc.b	nD2, $07
000759D0 E1FE                       	smpsAlterNote       $FE
000759D2 9706                       	dc.b	nBb1, $06
000759D4 EC04                       	smpsPSGAlterVol     $04
000759D6 E701                       	dc.b	smpsNoAttack, $01
000759D8 ECFC                       	smpsPSGAlterVol     $FC
000759DA 9703                       	dc.b	nBb1, $03
000759DC EC04                       	smpsPSGAlterVol     $04
000759DE E701                       	dc.b	smpsNoAttack, $01
000759E0 ECFC                       	smpsPSGAlterVol     $FC
000759E2 9702                       	dc.b	nBb1, $02
000759E4 EC04                       	smpsPSGAlterVol     $04
000759E6 E701                       	dc.b	smpsNoAttack, $01
000759E8 ECFC                       	smpsPSGAlterVol     $FC
000759EA 9606                       	dc.b	nA1, $06
000759EC EC04                       	smpsPSGAlterVol     $04
000759EE E701                       	dc.b	smpsNoAttack, $01
000759F0 EC07                       	smpsPSGAlterVol     $07
000759F2 8006                       	dc.b	nRst, $06
000759F4 E101                       	smpsAlterNote       $01
000759F6 01                         	dc.b	$01
000759F7 E107                       	smpsAlterNote       $07
000759F9 01                         	dc.b	$01
000759FA E101                       	smpsAlterNote       $01
000759FC 01                         	dc.b	$01
000759FD E1F8                       	smpsAlterNote       $F8
000759FF 01                         	dc.b	$01
00075A00 E1F7                       	smpsAlterNote       $F7
00075A02 01                         	dc.b	$01
00075A03 E1FC                       	smpsAlterNote       $FC
00075A05 01                         	dc.b	$01
00075A06 E106                       	smpsAlterNote       $06
00075A08 01                         	dc.b	$01
00075A09 E107                       	smpsAlterNote       $07
00075A0B 01                         	dc.b	$01
00075A0C E101                       	smpsAlterNote       $01
00075A0E 01                         	dc.b	$01
00075A0F E1F8                       	smpsAlterNote       $F8
00075A11 0101                       	dc.b	$01, $01
00075A13 E1FC                       	smpsAlterNote       $FC
00075A15 ECF5                       	smpsPSGAlterVol     $F5
00075A17 8F06                       	dc.b	nD1, $06
00075A19 EC04                       	smpsPSGAlterVol     $04
00075A1B E701                       	dc.b	smpsNoAttack, $01
00075A1D EC07                       	smpsPSGAlterVol     $07
00075A1F 8003                       	dc.b	nRst, $03
00075A21 ECF5                       	smpsPSGAlterVol     $F5
00075A23 8F06                       	dc.b	nD1, $06
00075A25 EC04                       	smpsPSGAlterVol     $04
00075A27 E701                       	dc.b	smpsNoAttack, $01
00075A29 EC07                       	smpsPSGAlterVol     $07
00075A2B 8006                       	dc.b	nRst, $06
00075A2D E1FF                       	smpsAlterNote       $FF
00075A2F 01                         	dc.b	$01
00075A30 E102                       	smpsAlterNote       $02
00075A32 01                         	dc.b	$01
00075A33 E101                       	smpsAlterNote       $01
00075A35 01                         	dc.b	$01
00075A36 E1FC                       	smpsAlterNote       $FC
00075A38 01                         	dc.b	$01
00075A39 ECF5                       	smpsPSGAlterVol     $F5
00075A3B 9007                       	dc.b	nEb1, $07
00075A3D EC0B                       	smpsPSGAlterVol     $0B
00075A3F 8004                       	dc.b	nRst, $04
00075A41 ECF5                       	smpsPSGAlterVol     $F5
00075A43 9006                       	dc.b	nEb1, $06
00075A45 EC0B                       	smpsPSGAlterVol     $0B
00075A47 8007                       	dc.b	nRst, $07
00075A49 E103                       	smpsAlterNote       $03
00075A4B 0101                       	dc.b	$01, $01
00075A4D E1FC                       	smpsAlterNote       $FC
00075A4F 01                         	dc.b	$01
00075A50 E1F9                       	smpsAlterNote       $F9
00075A52 01                         	dc.b	$01
00075A53 E1FC                       	smpsAlterNote       $FC
00075A55 ECF5                       	smpsPSGAlterVol     $F5
00075A57 8F06                       	dc.b	nD1, $06
00075A59 EC04                       	smpsPSGAlterVol     $04
00075A5B E701                       	dc.b	smpsNoAttack, $01
00075A5D EC07                       	smpsPSGAlterVol     $07
00075A5F 8003                       	dc.b	nRst, $03
00075A61 ECF5                       	smpsPSGAlterVol     $F5
00075A63 8F06                       	dc.b	nD1, $06
00075A65 EC04                       	smpsPSGAlterVol     $04
00075A67 E701                       	dc.b	smpsNoAttack, $01
00075A69 EC07                       	smpsPSGAlterVol     $07
00075A6B 8006                       	dc.b	nRst, $06
00075A6D E1FF                       	smpsAlterNote       $FF
00075A6F 01                         	dc.b	$01
00075A70 E103                       	smpsAlterNote       $03
00075A72 01                         	dc.b	$01
00075A73 E1FF                       	smpsAlterNote       $FF
00075A75 01                         	dc.b	$01
00075A76 E1F9                       	smpsAlterNote       $F9
00075A78 01                         	dc.b	$01
00075A79 E1FC                       	smpsAlterNote       $FC
00075A7B ECF5                       	smpsPSGAlterVol     $F5
00075A7D 8F06                       	dc.b	nD1, $06
00075A7F EC04                       	smpsPSGAlterVol     $04
00075A81 E701                       	dc.b	smpsNoAttack, $01
00075A83 EC07                       	smpsPSGAlterVol     $07
00075A85 8003                       	dc.b	nRst, $03
00075A87 ECF5                       	smpsPSGAlterVol     $F5
00075A89 8F07                       	dc.b	nD1, $07
00075A8B EC0B                       	smpsPSGAlterVol     $0B
00075A8D 8006                       	dc.b	nRst, $06
00075A8F E1FF                       	smpsAlterNote       $FF
00075A91 01                         	dc.b	$01
00075A92 E102                       	smpsAlterNote       $02
00075A94 0101                       	dc.b	$01, $01
00075A96 E1FC                       	smpsAlterNote       $FC
00075A98 01                         	dc.b	$01
00075A99 ECF5                       	smpsPSGAlterVol     $F5
00075A9B 8F07                       	dc.b	nD1, $07
00075A9D EC0B                       	smpsPSGAlterVol     $0B
00075A9F 8004                       	dc.b	nRst, $04
00075AA1 ECF5                       	smpsPSGAlterVol     $F5
00075AA3 8F06                       	dc.b	nD1, $06
00075AA5 EC04                       	smpsPSGAlterVol     $04
00075AA7 E701                       	dc.b	smpsNoAttack, $01
00075AA9 EC07                       	smpsPSGAlterVol     $07
00075AAB 8006                       	dc.b	nRst, $06
00075AAD E101                       	smpsAlterNote       $01
00075AAF 01                         	dc.b	$01
00075AB0 E102                       	smpsAlterNote       $02
00075AB2 01                         	dc.b	$01
00075AB3 E1FF                       	smpsAlterNote       $FF
00075AB5 01                         	dc.b	$01
00075AB6 E1F9                       	smpsAlterNote       $F9
00075AB8 01                         	dc.b	$01
00075AB9 E1FC                       	smpsAlterNote       $FC
00075ABB ECF5                       	smpsPSGAlterVol     $F5
00075ABD 9006                       	dc.b	nEb1, $06
00075ABF EC04                       	smpsPSGAlterVol     $04
00075AC1 E701                       	dc.b	smpsNoAttack, $01
00075AC3 EC07                       	smpsPSGAlterVol     $07
00075AC5 8003                       	dc.b	nRst, $03
00075AC7 ECF5                       	smpsPSGAlterVol     $F5
00075AC9 9006                       	dc.b	nEb1, $06
00075ACB EC04                       	smpsPSGAlterVol     $04
00075ACD E701                       	dc.b	smpsNoAttack, $01
00075ACF EC07                       	smpsPSGAlterVol     $07
00075AD1 8006                       	dc.b	nRst, $06
00075AD3 E100                       	smpsAlterNote       $00
00075AD5 01                         	dc.b	$01
00075AD6 E102                       	smpsAlterNote       $02
00075AD8 01                         	dc.b	$01
00075AD9 E100                       	smpsAlterNote       $00
00075ADB 01                         	dc.b	$01
00075ADC E1FF                       	smpsAlterNote       $FF
00075ADE 01                         	dc.b	$01
00075ADF ECF5                       	smpsPSGAlterVol     $F5
00075AE1 9B06                       	dc.b	nD2, $06
00075AE3 EC04                       	smpsPSGAlterVol     $04
00075AE5 E701                       	dc.b	smpsNoAttack, $01
00075AE7 EC07                       	smpsPSGAlterVol     $07
00075AE9 8003                       	dc.b	nRst, $03
00075AEB ECF5                       	smpsPSGAlterVol     $F5
00075AED 9B07                       	dc.b	nD2, $07
00075AEF EC0B                       	smpsPSGAlterVol     $0B
00075AF1 8007                       	dc.b	nRst, $07
00075AF3 E105                       	smpsAlterNote       $05
00075AF5 0101                       	dc.b	$01, $01
00075AF7 E1FF                       	smpsAlterNote       $FF
00075AF9 01                         	dc.b	$01
00075AFA E1FC                       	smpsAlterNote       $FC
00075AFC 01                         	dc.b	$01
00075AFD E1FF                       	smpsAlterNote       $FF
00075AFF ECF5                       	smpsPSGAlterVol     $F5
00075B01 9B06                       	dc.b	nD2, $06
00075B03 EC0B                       	smpsPSGAlterVol     $0B
00075B05 8004                       	dc.b	nRst, $04
00075B07 ECF5                       	smpsPSGAlterVol     $F5
00075B09 9B06                       	dc.b	nD2, $06
00075B0B EC04                       	smpsPSGAlterVol     $04
00075B0D E701                       	dc.b	smpsNoAttack, $01
00075B0F EC07                       	smpsPSGAlterVol     $07
00075B11 8006                       	dc.b	nRst, $06
00075B13 E102                       	smpsAlterNote       $02
00075B15 01                         	dc.b	$01
00075B16 E106                       	smpsAlterNote       $06
00075B18 01                         	dc.b	$01
00075B19 E102                       	smpsAlterNote       $02
00075B1B 01                         	dc.b	$01
00075B1C E1FC                       	smpsAlterNote       $FC
00075B1E 01                         	dc.b	$01
00075B1F E1FF                       	smpsAlterNote       $FF
00075B21 ECF5                       	smpsPSGAlterVol     $F5
00075B23 9B06                       	dc.b	nD2, $06
00075B25 EC04                       	smpsPSGAlterVol     $04
00075B27 E701                       	dc.b	smpsNoAttack, $01
00075B29 EC07                       	smpsPSGAlterVol     $07
00075B2B 8003                       	dc.b	nRst, $03
00075B2D ECF5                       	smpsPSGAlterVol     $F5
00075B2F 9B07                       	dc.b	nD2, $07
00075B31 EC0B                       	smpsPSGAlterVol     $0B
00075B33 8006                       	dc.b	nRst, $06
00075B35 E102                       	smpsAlterNote       $02
00075B37 01                         	dc.b	$01
00075B38 E105                       	smpsAlterNote       $05
00075B3A 0101                       	dc.b	$01, $01
00075B3C E1FF                       	smpsAlterNote       $FF
00075B3E 01                         	dc.b	$01
00075B3F ECF5                       	smpsPSGAlterVol     $F5
00075B41 9B07                       	dc.b	nD2, $07
00075B43 EC0B                       	smpsPSGAlterVol     $0B
00075B45 8004                       	dc.b	nRst, $04
00075B47 ECF5                       	smpsPSGAlterVol     $F5
00075B49 9B06                       	dc.b	nD2, $06
00075B4B EC0B                       	smpsPSGAlterVol     $0B
00075B4D 8007                       	dc.b	nRst, $07
00075B4F E105                       	smpsAlterNote       $05
00075B51 0101                       	dc.b	$01, $01
00075B53 E102                       	smpsAlterNote       $02
00075B55 01                         	dc.b	$01
00075B56 E1FC                       	smpsAlterNote       $FC
00075B58 01                         	dc.b	$01
00075B59 E1FF                       	smpsAlterNote       $FF
00075B5B ECF5                       	smpsPSGAlterVol     $F5
00075B5D 9B06                       	dc.b	nD2, $06
00075B5F EC04                       	smpsPSGAlterVol     $04
00075B61 E701                       	dc.b	smpsNoAttack, $01
00075B63 EC07                       	smpsPSGAlterVol     $07
00075B65 8003                       	dc.b	nRst, $03
00075B67 ECF5                       	smpsPSGAlterVol     $F5
00075B69 9B06                       	dc.b	nD2, $06
00075B6B EC04                       	smpsPSGAlterVol     $04
00075B6D E701                       	dc.b	smpsNoAttack, $01
00075B6F EC07                       	smpsPSGAlterVol     $07
00075B71 8006                       	dc.b	nRst, $06
00075B73 E102                       	smpsAlterNote       $02
00075B75 01                         	dc.b	$01
00075B76 E106                       	smpsAlterNote       $06
00075B78 01                         	dc.b	$01
00075B79 E102                       	smpsAlterNote       $02
00075B7B 01                         	dc.b	$01
00075B7C E1FF                       	smpsAlterNote       $FF
00075B7E 01                         	dc.b	$01
00075B7F ECF5                       	smpsPSGAlterVol     $F5
00075B81 9B06                       	dc.b	nD2, $06
00075B83 EC04                       	smpsPSGAlterVol     $04
00075B85 E701                       	dc.b	smpsNoAttack, $01
00075B87 EC07                       	smpsPSGAlterVol     $07
00075B89 8003                       	dc.b	nRst, $03
00075B8B ECF5                       	smpsPSGAlterVol     $F5
00075B8D 9B07                       	dc.b	nD2, $07
00075B8F EC0B                       	smpsPSGAlterVol     $0B
00075B91 8007                       	dc.b	nRst, $07
00075B93 E105                       	smpsAlterNote       $05
00075B95 0101                       	dc.b	$01, $01
00075B97 E1FF                       	smpsAlterNote       $FF
00075B99 01                         	dc.b	$01
00075B9A E1FC                       	smpsAlterNote       $FC
00075B9C 01                         	dc.b	$01
00075B9D E1FF                       	smpsAlterNote       $FF
00075B9F ECF5                       	smpsPSGAlterVol     $F5
00075BA1 9B06                       	dc.b	nD2, $06
00075BA3 EC0B                       	smpsPSGAlterVol     $0B
00075BA5 8004                       	dc.b	nRst, $04
00075BA7 ECF5                       	smpsPSGAlterVol     $F5
00075BA9 9B06                       	dc.b	nD2, $06
00075BAB EC04                       	smpsPSGAlterVol     $04
00075BAD E701                       	dc.b	smpsNoAttack, $01
00075BAF EC07                       	smpsPSGAlterVol     $07
00075BB1 8006                       	dc.b	nRst, $06
00075BB3 E102                       	smpsAlterNote       $02
00075BB5 01                         	dc.b	$01
00075BB6 E106                       	smpsAlterNote       $06
00075BB8 01                         	dc.b	$01
00075BB9 E102                       	smpsAlterNote       $02
00075BBB 01                         	dc.b	$01
00075BBC E1FC                       	smpsAlterNote       $FC
00075BBE 01                         	dc.b	$01
00075BBF E1FF                       	smpsAlterNote       $FF
00075BC1 ECF5                       	smpsPSGAlterVol     $F5
00075BC3 9B06                       	dc.b	nD2, $06
00075BC5 EC04                       	smpsPSGAlterVol     $04
00075BC7 E701                       	dc.b	smpsNoAttack, $01
00075BC9 EC07                       	smpsPSGAlterVol     $07
00075BCB 8003                       	dc.b	nRst, $03
00075BCD ECF5                       	smpsPSGAlterVol     $F5
00075BCF 9B06                       	dc.b	nD2, $06
00075BD1 EC04                       	smpsPSGAlterVol     $04
00075BD3 E701                       	dc.b	smpsNoAttack, $01
00075BD5 EC07                       	smpsPSGAlterVol     $07
00075BD7 8006                       	dc.b	nRst, $06
00075BD9 E102                       	smpsAlterNote       $02
00075BDB 01                         	dc.b	$01
00075BDC E106                       	smpsAlterNote       $06
00075BDE 01                         	dc.b	$01
00075BDF E105                       	smpsAlterNote       $05
00075BE1 01                         	dc.b	$01
00075BE2 E1FF                       	smpsAlterNote       $FF
00075BE4 01                         	dc.b	$01
00075BE5 ECF5                       	smpsPSGAlterVol     $F5
00075BE7 9B07                       	dc.b	nD2, $07
00075BE9 EC0B                       	smpsPSGAlterVol     $0B
00075BEB 8004                       	dc.b	nRst, $04
00075BED ECF5                       	smpsPSGAlterVol     $F5
00075BEF 9B06                       	dc.b	nD2, $06
00075BF1 EC0B                       	smpsPSGAlterVol     $0B
00075BF3 8007                       	dc.b	nRst, $07
00075BF5 E105                       	smpsAlterNote       $05
00075BF7 0101                       	dc.b	$01, $01
00075BF9 E101                       	smpsAlterNote       $01
00075BFB 01                         	dc.b	$01
00075BFC E1FB                       	smpsAlterNote       $FB
00075BFE 01                         	dc.b	$01
00075BFF E1FE                       	smpsAlterNote       $FE
00075C01 ECF5                       	smpsPSGAlterVol     $F5
00075C03 9A06                       	dc.b	nCs2, $06
00075C05 EC04                       	smpsPSGAlterVol     $04
00075C07 E701                       	dc.b	smpsNoAttack, $01
00075C09 EC07                       	smpsPSGAlterVol     $07
00075C0B 8003                       	dc.b	nRst, $03
00075C0D ECF5                       	smpsPSGAlterVol     $F5
00075C0F 9A06                       	dc.b	nCs2, $06
00075C11 EC04                       	smpsPSGAlterVol     $04
00075C13 E701                       	dc.b	smpsNoAttack, $01
00075C15 EC07                       	smpsPSGAlterVol     $07
00075C17 8003                       	dc.b	nRst, $03
00075C19 E1FC                       	smpsAlterNote       $FC
00075C1B ECF5                       	smpsPSGAlterVol     $F5
00075C1D 8F07                       	dc.b	nD1, $07
00075C1F EC0B                       	smpsPSGAlterVol     $0B
00075C21 8006                       	dc.b	nRst, $06
00075C23 E1FF                       	smpsAlterNote       $FF
00075C25 01                         	dc.b	$01
00075C26 E103                       	smpsAlterNote       $03
00075C28 01                         	dc.b	$01
00075C29 E102                       	smpsAlterNote       $02
00075C2B 01                         	dc.b	$01
00075C2C E1FC                       	smpsAlterNote       $FC
00075C2E 01                         	dc.b	$01
00075C2F E1F8                       	smpsAlterNote       $F8
00075C31 01                         	dc.b	$01
00075C32 E1FC                       	smpsAlterNote       $FC
00075C34 01                         	dc.b	$01
00075C35 E1FF                       	smpsAlterNote       $FF
00075C37 01                         	dc.b	$01
00075C38 E103                       	smpsAlterNote       $03
00075C3A 01                         	dc.b	$01
00075C3B E1FC                       	smpsAlterNote       $FC
00075C3D ECF5                       	smpsPSGAlterVol     $F5
00075C3F 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00075C43 EC04                       	smpsPSGAlterVol     $04
00075C45 E701                       	dc.b	smpsNoAttack, $01
00075C47 EC07                       	smpsPSGAlterVol     $07
00075C49 8009                       	dc.b	nRst, $09
00075C4B E1FF                       	smpsAlterNote       $FF
00075C4D 01                         	dc.b	$01
00075C4E E103                       	smpsAlterNote       $03
00075C50 01                         	dc.b	$01
00075C51 E102                       	smpsAlterNote       $02
00075C53 01                         	dc.b	$01
00075C54 E1FC                       	smpsAlterNote       $FC
00075C56 01                         	dc.b	$01
00075C57 E1F8                       	smpsAlterNote       $F8
00075C59 01                         	dc.b	$01
00075C5A E1FC                       	smpsAlterNote       $FC
00075C5C 01                         	dc.b	$01
00075C5D E1FF                       	smpsAlterNote       $FF
00075C5F 01                         	dc.b	$01
00075C60 E103                       	smpsAlterNote       $03
00075C62 01                         	dc.b	$01
00075C63 E1FF                       	smpsAlterNote       $FF
00075C65 01                         	dc.b	$01
00075C66 E1F9                       	smpsAlterNote       $F9
00075C68 01                         	dc.b	$01
00075C69 E1F8                       	smpsAlterNote       $F8
00075C6B 01                         	dc.b	$01
00075C6C E1FC                       	smpsAlterNote       $FC
00075C6E 01                         	dc.b	$01
00075C6F E102                       	smpsAlterNote       $02
00075C71 0101                       	dc.b	$01, $01
00075C73 E1FF                       	smpsAlterNote       $FF
00075C75 01                         	dc.b	$01
00075C76 E1FC                       	smpsAlterNote       $FC
00075C78 ECF5                       	smpsPSGAlterVol     $F5
00075C7A 8F02                       	dc.b	nD1, $02
00075C7C EC04                       	smpsPSGAlterVol     $04
00075C7E E701                       	dc.b	smpsNoAttack, $01
00075C80 ECFC                       	smpsPSGAlterVol     $FC
00075C82 E1FB                       	smpsAlterNote       $FB
00075C84 8D06                       	dc.b	nC1, $06
00075C86 EC04                       	smpsPSGAlterVol     $04
00075C88 E701                       	dc.b	smpsNoAttack, $01
00075C8A EC07                       	smpsPSGAlterVol     $07
00075C8C 8006                       	dc.b	nRst, $06
00075C8E E1FE                       	smpsAlterNote       $FE
00075C90 01                         	dc.b	$01
00075C91 E102                       	smpsAlterNote       $02
00075C93 01                         	dc.b	$01
00075C94 E1FE                       	smpsAlterNote       $FE
00075C96 01                         	dc.b	$01
00075C97 E1FB                       	smpsAlterNote       $FB
00075C99 01                         	dc.b	$01
00075C9A E1F7                       	smpsAlterNote       $F7
00075C9C 01                         	dc.b	$01
00075C9D E1FB                       	smpsAlterNote       $FB
00075C9F 01                         	dc.b	$01
00075CA0 E101                       	smpsAlterNote       $01
00075CA2 01                         	dc.b	$01
00075CA3 E102                       	smpsAlterNote       $02
00075CA5 01                         	dc.b	$01
00075CA6 E1FB                       	smpsAlterNote       $FB
00075CA8 ECF5                       	smpsPSGAlterVol     $F5
00075CAA 8D02                       	dc.b	nC1, $02
00075CAC EC04                       	smpsPSGAlterVol     $04
00075CAE E701                       	dc.b	smpsNoAttack, $01
00075CB0 E1FC                       	smpsAlterNote       $FC
00075CB2 ECFC                       	smpsPSGAlterVol     $FC
00075CB4 8F0D                       	dc.b	nD1, $0D
00075CB6 E1FF                       	smpsAlterNote       $FF
00075CB8 E701                       	dc.b	smpsNoAttack, $01
00075CBA E103                       	smpsAlterNote       $03
00075CBC E701                       	dc.b	smpsNoAttack, $01
00075CBE E1FF                       	smpsAlterNote       $FF
00075CC0 E701                       	dc.b	smpsNoAttack, $01
00075CC2 E1FC                       	smpsAlterNote       $FC
00075CC4 E701                       	dc.b	smpsNoAttack, $01
00075CC6 E1F8                       	smpsAlterNote       $F8
00075CC8 E701                       	dc.b	smpsNoAttack, $01
00075CCA E1FC                       	smpsAlterNote       $FC
00075CCC E701                       	dc.b	smpsNoAttack, $01
00075CCE E102                       	smpsAlterNote       $02
00075CD0 E701                       	dc.b	smpsNoAttack, $01
00075CD2 E103                       	smpsAlterNote       $03
00075CD4 E701                       	dc.b	smpsNoAttack, $01
00075CD6 E1FF                       	smpsAlterNote       $FF
00075CD8 E701                       	dc.b	smpsNoAttack, $01
00075CDA E1F9                       	smpsAlterNote       $F9
00075CDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00075CE0 E1FC                       	smpsAlterNote       $FC
00075CE2 E701                       	dc.b	smpsNoAttack, $01
00075CE4 E102                       	smpsAlterNote       $02
00075CE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00075CEA E1FC                       	smpsAlterNote       $FC
00075CEC E701                       	dc.b	smpsNoAttack, $01
00075CEE E1F9                       	smpsAlterNote       $F9
00075CF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00075CF4 E1FF                       	smpsAlterNote       $FF
00075CF6 EC04                       	smpsPSGAlterVol     $04
00075CF8 E701                       	dc.b	smpsNoAttack, $01
00075CFA EC07                       	smpsPSGAlterVol     $07
00075CFC E103                       	smpsAlterNote       $03
00075CFE 8001                       	dc.b	nRst, $01
00075D00 E102                       	smpsAlterNote       $02
00075D02 01                         	dc.b	$01
00075D03 E1FB                       	smpsAlterNote       $FB
00075D05 01                         	dc.b	$01
00075D06 E1F7                       	smpsAlterNote       $F7
00075D08 01                         	dc.b	$01
00075D09 E1FB                       	smpsAlterNote       $FB
00075D0B 01                         	dc.b	$01
00075D0C E102                       	smpsAlterNote       $02
00075D0E 01                         	dc.b	$01
00075D0F E103                       	smpsAlterNote       $03
00075D11 01                         	dc.b	$01
00075D12 E1FB                       	smpsAlterNote       $FB
00075D14 ECF5                       	smpsPSGAlterVol     $F5
00075D16 8E06                       	dc.b	nCs1, $06
00075D18 EC04                       	smpsPSGAlterVol     $04
00075D1A E701                       	dc.b	smpsNoAttack, $01
00075D1C EC07                       	smpsPSGAlterVol     $07
00075D1E 8003                       	dc.b	nRst, $03
00075D20 ECF5                       	smpsPSGAlterVol     $F5
00075D22 8E06                       	dc.b	nCs1, $06
00075D24 EC04                       	smpsPSGAlterVol     $04
00075D26 E701                       	dc.b	smpsNoAttack, $01
00075D28 EC07                       	smpsPSGAlterVol     $07
00075D2A 8006                       	dc.b	nRst, $06
00075D2C E1FE                       	smpsAlterNote       $FE
00075D2E 01                         	dc.b	$01
00075D2F E102                       	smpsAlterNote       $02
00075D31 01                         	dc.b	$01
00075D32 E1FE                       	smpsAlterNote       $FE
00075D34 01                         	dc.b	$01
00075D35 E1F9                       	smpsAlterNote       $F9
00075D37 01                         	dc.b	$01
00075D38 E1FC                       	smpsAlterNote       $FC
00075D3A ECF5                       	smpsPSGAlterVol     $F5
00075D3C 8F06                       	dc.b	nD1, $06
00075D3E EC04                       	smpsPSGAlterVol     $04
00075D40 E701                       	dc.b	smpsNoAttack, $01
00075D42 EC07                       	smpsPSGAlterVol     $07
00075D44 8003                       	dc.b	nRst, $03
00075D46 ECF5                       	smpsPSGAlterVol     $F5
00075D48 8F07                       	dc.b	nD1, $07
00075D4A EC0B                       	smpsPSGAlterVol     $0B
00075D4C 8006                       	dc.b	nRst, $06
00075D4E E1FF                       	smpsAlterNote       $FF
00075D50 01                         	dc.b	$01
00075D51 E102                       	smpsAlterNote       $02
00075D53 0101                       	dc.b	$01, $01
00075D55 E1FB                       	smpsAlterNote       $FB
00075D57 01                         	dc.b	$01
00075D58 ECF5                       	smpsPSGAlterVol     $F5
00075D5A 8E07                       	dc.b	nCs1, $07
00075D5C EC0B                       	smpsPSGAlterVol     $0B
00075D5E 8004                       	dc.b	nRst, $04
00075D60 ECF5                       	smpsPSGAlterVol     $F5
00075D62 8E06                       	dc.b	nCs1, $06
00075D64 EC04                       	smpsPSGAlterVol     $04
00075D66 E701                       	dc.b	smpsNoAttack, $01
00075D68 EC07                       	smpsPSGAlterVol     $07
00075D6A 8006                       	dc.b	nRst, $06
00075D6C E101                       	smpsAlterNote       $01
00075D6E 01                         	dc.b	$01
00075D6F E102                       	smpsAlterNote       $02
00075D71 01                         	dc.b	$01
00075D72 E1FE                       	smpsAlterNote       $FE
00075D74 01                         	dc.b	$01
00075D75 E1F8                       	smpsAlterNote       $F8
00075D77 01                         	dc.b	$01
00075D78 E1FB                       	smpsAlterNote       $FB
00075D7A ECF5                       	smpsPSGAlterVol     $F5
00075D7C 8E06                       	dc.b	nCs1, $06
00075D7E EC04                       	smpsPSGAlterVol     $04
00075D80 E701                       	dc.b	smpsNoAttack, $01
00075D82 EC07                       	smpsPSGAlterVol     $07
00075D84 8003                       	dc.b	nRst, $03
00075D86 ECF5                       	smpsPSGAlterVol     $F5
00075D88 8E06                       	dc.b	nCs1, $06
00075D8A EC04                       	smpsPSGAlterVol     $04
00075D8C E701                       	dc.b	smpsNoAttack, $01
00075D8E EC07                       	smpsPSGAlterVol     $07
00075D90 8004                       	dc.b	nRst, $04
00075D92 E1FC                       	smpsAlterNote       $FC
00075D94 ECF5                       	smpsPSGAlterVol     $F5
00075D96 8F06                       	dc.b	nD1, $06
00075D98 EC0B                       	smpsPSGAlterVol     $0B
00075D9A 8006                       	dc.b	nRst, $06
00075D9C E1FF                       	smpsAlterNote       $FF
00075D9E 01                         	dc.b	$01
00075D9F E102                       	smpsAlterNote       $02
00075DA1 0101                       	dc.b	$01, $01
00075DA3 E1FC                       	smpsAlterNote       $FC
00075DA5 01                         	dc.b	$01
00075DA6 E1F8                       	smpsAlterNote       $F8
00075DA8 01                         	dc.b	$01
00075DA9 E1F9                       	smpsAlterNote       $F9
00075DAB 01                         	dc.b	$01
00075DAC E1FF                       	smpsAlterNote       $FF
00075DAE 01                         	dc.b	$01
00075DAF E103                       	smpsAlterNote       $03
00075DB1 01                         	dc.b	$01
00075DB2 E1FC                       	smpsAlterNote       $FC
00075DB4 ECF5                       	smpsPSGAlterVol     $F5
00075DB6 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00075DBA EC04                       	smpsPSGAlterVol     $04
00075DBC E701                       	dc.b	smpsNoAttack, $01
00075DBE EC07                       	smpsPSGAlterVol     $07
00075DC0 8009                       	dc.b	nRst, $09
00075DC2 E1FF                       	smpsAlterNote       $FF
00075DC4 01                         	dc.b	$01
00075DC5 E102                       	smpsAlterNote       $02
00075DC7 0101                       	dc.b	$01, $01
00075DC9 E1FC                       	smpsAlterNote       $FC
00075DCB 01                         	dc.b	$01
00075DCC E1F8                       	smpsAlterNote       $F8
00075DCE 01                         	dc.b	$01
00075DCF E1F9                       	smpsAlterNote       $F9
00075DD1 01                         	dc.b	$01
00075DD2 E1FF                       	smpsAlterNote       $FF
00075DD4 01                         	dc.b	$01
00075DD5 E103                       	smpsAlterNote       $03
00075DD7 01                         	dc.b	$01
00075DD8 E1FF                       	smpsAlterNote       $FF
00075DDA 01                         	dc.b	$01
00075DDB E1FC                       	smpsAlterNote       $FC
00075DDD 01                         	dc.b	$01
00075DDE E1F8                       	smpsAlterNote       $F8
00075DE0 01                         	dc.b	$01
00075DE1 E1FC                       	smpsAlterNote       $FC
00075DE3 01                         	dc.b	$01
00075DE4 E102                       	smpsAlterNote       $02
00075DE6 01                         	dc.b	$01
00075DE7 E103                       	smpsAlterNote       $03
00075DE9 01                         	dc.b	$01
00075DEA E1FF                       	smpsAlterNote       $FF
00075DEC 01                         	dc.b	$01
00075DED E1FC                       	smpsAlterNote       $FC
00075DEF ECF5                       	smpsPSGAlterVol     $F5
00075DF1 8F03                       	dc.b	nD1, $03
00075DF3 E1FB                       	smpsAlterNote       $FB
00075DF5 8D06                       	dc.b	nC1, $06
00075DF7 EC04                       	smpsPSGAlterVol     $04
00075DF9 E701                       	dc.b	smpsNoAttack, $01
00075DFB EC07                       	smpsPSGAlterVol     $07
00075DFD 8006                       	dc.b	nRst, $06
00075DFF E1FE                       	smpsAlterNote       $FE
00075E01 01                         	dc.b	$01
00075E02 E102                       	smpsAlterNote       $02
00075E04 01                         	dc.b	$01
00075E05 E101                       	smpsAlterNote       $01
00075E07 01                         	dc.b	$01
00075E08 E1FB                       	smpsAlterNote       $FB
00075E0A 01                         	dc.b	$01
00075E0B E1F7                       	smpsAlterNote       $F7
00075E0D 01                         	dc.b	$01
00075E0E E1FB                       	smpsAlterNote       $FB
00075E10 01                         	dc.b	$01
00075E11 E1FE                       	smpsAlterNote       $FE
00075E13 01                         	dc.b	$01
00075E14 E102                       	smpsAlterNote       $02
00075E16 01                         	dc.b	$01
00075E17 E1FB                       	smpsAlterNote       $FB
00075E19 ECF5                       	smpsPSGAlterVol     $F5
00075E1B 8D03                       	dc.b	nC1, $03
00075E1D E1FC                       	smpsAlterNote       $FC
00075E1F 8F0D                       	dc.b	nD1, $0D
00075E21 E1FF                       	smpsAlterNote       $FF
00075E23 E701                       	dc.b	smpsNoAttack, $01
00075E25 E103                       	smpsAlterNote       $03
00075E27 E701                       	dc.b	smpsNoAttack, $01
00075E29 E1FF                       	smpsAlterNote       $FF
00075E2B E701                       	dc.b	smpsNoAttack, $01
00075E2D E1FC                       	smpsAlterNote       $FC
00075E2F E701                       	dc.b	smpsNoAttack, $01
00075E31 E1F8                       	smpsAlterNote       $F8
00075E33 E701                       	dc.b	smpsNoAttack, $01
00075E35 E1FC                       	smpsAlterNote       $FC
00075E37 E701                       	dc.b	smpsNoAttack, $01
00075E39 E102                       	smpsAlterNote       $02
00075E3B E701                       	dc.b	smpsNoAttack, $01
00075E3D E103                       	smpsAlterNote       $03
00075E3F E701                       	dc.b	smpsNoAttack, $01
00075E41 E1FF                       	smpsAlterNote       $FF
00075E43 E701                       	dc.b	smpsNoAttack, $01
00075E45 E1F9                       	smpsAlterNote       $F9
00075E47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00075E4B E1FC                       	smpsAlterNote       $FC
00075E4D E701                       	dc.b	smpsNoAttack, $01
00075E4F E102                       	smpsAlterNote       $02
00075E51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00075E55 E1FF                       	smpsAlterNote       $FF
00075E57 E701                       	dc.b	smpsNoAttack, $01
00075E59 E1F9                       	smpsAlterNote       $F9
00075E5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00075E5F E1FF                       	smpsAlterNote       $FF
00075E61 EC04                       	smpsPSGAlterVol     $04
00075E63 E701                       	dc.b	smpsNoAttack, $01
00075E65 EC07                       	smpsPSGAlterVol     $07
00075E67 E103                       	smpsAlterNote       $03
00075E69 8001                       	dc.b	nRst, $01
00075E6B E102                       	smpsAlterNote       $02
00075E6D 01                         	dc.b	$01
00075E6E E1FB                       	smpsAlterNote       $FB
00075E70 01                         	dc.b	$01
00075E71 E1F7                       	smpsAlterNote       $F7
00075E73 01                         	dc.b	$01
00075E74 E1FB                       	smpsAlterNote       $FB
00075E76 01                         	dc.b	$01
00075E77 E1FF                       	smpsAlterNote       $FF
00075E79 01                         	dc.b	$01
00075E7A E103                       	smpsAlterNote       $03
00075E7C 01                         	dc.b	$01
00075E7D E1FB                       	smpsAlterNote       $FB
00075E7F ECF5                       	smpsPSGAlterVol     $F5
00075E81 8E06                       	dc.b	nCs1, $06
00075E83 EC04                       	smpsPSGAlterVol     $04
00075E85 E701                       	dc.b	smpsNoAttack, $01
00075E87 EC07                       	smpsPSGAlterVol     $07
00075E89 8003                       	dc.b	nRst, $03
00075E8B ECF5                       	smpsPSGAlterVol     $F5
00075E8D 8E06                       	dc.b	nCs1, $06
00075E8F EC04                       	smpsPSGAlterVol     $04
00075E91 E701                       	dc.b	smpsNoAttack, $01
00075E93 EC07                       	smpsPSGAlterVol     $07
00075E95 8006                       	dc.b	nRst, $06
00075E97 E1FE                       	smpsAlterNote       $FE
00075E99 01                         	dc.b	$01
00075E9A E102                       	smpsAlterNote       $02
00075E9C 01                         	dc.b	$01
00075E9D E1FE                       	smpsAlterNote       $FE
00075E9F 01                         	dc.b	$01
00075EA0 E1FC                       	smpsAlterNote       $FC
00075EA2 01                         	dc.b	$01
00075EA3 ECF5                       	smpsPSGAlterVol     $F5
00075EA5 8F06                       	dc.b	nD1, $06
00075EA7 EC04                       	smpsPSGAlterVol     $04
00075EA9 E701                       	dc.b	smpsNoAttack, $01
00075EAB EC07                       	smpsPSGAlterVol     $07
00075EAD 8003                       	dc.b	nRst, $03
00075EAF ECF5                       	smpsPSGAlterVol     $F5
00075EB1 8F07                       	dc.b	nD1, $07
00075EB3 EC0B                       	smpsPSGAlterVol     $0B
00075EB5 8007                       	dc.b	nRst, $07
00075EB7 E102                       	smpsAlterNote       $02
00075EB9 0101                       	dc.b	$01, $01
00075EBB E1FB                       	smpsAlterNote       $FB
00075EBD 01                         	dc.b	$01
00075EBE E1F8                       	smpsAlterNote       $F8
00075EC0 01                         	dc.b	$01
00075EC1 E1FB                       	smpsAlterNote       $FB
00075EC3 ECF5                       	smpsPSGAlterVol     $F5
00075EC5 8E06                       	dc.b	nCs1, $06
00075EC7 EC0B                       	smpsPSGAlterVol     $0B
00075EC9 8004                       	dc.b	nRst, $04
00075ECB ECF5                       	smpsPSGAlterVol     $F5
00075ECD 8E06                       	dc.b	nCs1, $06
00075ECF EC04                       	smpsPSGAlterVol     $04
00075ED1 E701                       	dc.b	smpsNoAttack, $01
00075ED3 EC07                       	smpsPSGAlterVol     $07
00075ED5 8006                       	dc.b	nRst, $06
00075ED7 E1FE                       	smpsAlterNote       $FE
00075ED9 01                         	dc.b	$01
00075EDA E102                       	smpsAlterNote       $02
00075EDC 01                         	dc.b	$01
00075EDD E1FE                       	smpsAlterNote       $FE
00075EDF 01                         	dc.b	$01
00075EE0 E1F9                       	smpsAlterNote       $F9
00075EE2 01                         	dc.b	$01
00075EE3 E1FC                       	smpsAlterNote       $FC
00075EE5 ECF5                       	smpsPSGAlterVol     $F5
00075EE7 8F06                       	dc.b	nD1, $06
00075EE9 EC04                       	smpsPSGAlterVol     $04
00075EEB E701                       	dc.b	smpsNoAttack, $01
00075EED EC07                       	smpsPSGAlterVol     $07
00075EEF 8003                       	dc.b	nRst, $03
00075EF1 ECF5                       	smpsPSGAlterVol     $F5
00075EF3 8F06                       	dc.b	nD1, $06
00075EF5 EC04                       	smpsPSGAlterVol     $04
00075EF7 E701                       	dc.b	smpsNoAttack, $01
00075EF9 EC07                       	smpsPSGAlterVol     $07
00075EFB 8006                       	dc.b	nRst, $06
00075EFD E1FF                       	smpsAlterNote       $FF
00075EFF 01                         	dc.b	$01
00075F00 E103                       	smpsAlterNote       $03
00075F02 01                         	dc.b	$01
00075F03 E102                       	smpsAlterNote       $02
00075F05 01                         	dc.b	$01
00075F06 E1FB                       	smpsAlterNote       $FB
00075F08 01                         	dc.b	$01
00075F09 ECF5                       	smpsPSGAlterVol     $F5
00075F0B 8E07                       	dc.b	nCs1, $07
00075F0D EC0B                       	smpsPSGAlterVol     $0B
00075F0F 8004                       	dc.b	nRst, $04
00075F11 ECF5                       	smpsPSGAlterVol     $F5
00075F13 8E06                       	dc.b	nCs1, $06
00075F15 EC0B                       	smpsPSGAlterVol     $0B
00075F17 8007                       	dc.b	nRst, $07
00075F19 E101                       	smpsAlterNote       $01
00075F1B 0101                       	dc.b	$01, $01
00075F1D E1FE                       	smpsAlterNote       $FE
00075F1F 01                         	dc.b	$01
00075F20 E1F9                       	smpsAlterNote       $F9
00075F22 01                         	dc.b	$01
00075F23 E1FC                       	smpsAlterNote       $FC
00075F25 ECF5                       	smpsPSGAlterVol     $F5
00075F27 8F06                       	dc.b	nD1, $06
00075F29 EC04                       	smpsPSGAlterVol     $04
00075F2B E701                       	dc.b	smpsNoAttack, $01
00075F2D EC07                       	smpsPSGAlterVol     $07
00075F2F 8003                       	dc.b	nRst, $03
00075F31 ECF5                       	smpsPSGAlterVol     $F5
00075F33 8F06                       	dc.b	nD1, $06
00075F35 EC04                       	smpsPSGAlterVol     $04
00075F37 E701                       	dc.b	smpsNoAttack, $01
00075F39 EC07                       	smpsPSGAlterVol     $07
00075F3B 8006                       	dc.b	nRst, $06
00075F3D E1FF                       	smpsAlterNote       $FF
00075F3F 01                         	dc.b	$01
00075F40 E103                       	smpsAlterNote       $03
00075F42 01                         	dc.b	$01
00075F43 E1FF                       	smpsAlterNote       $FF
00075F45 01                         	dc.b	$01
00075F46 E1FB                       	smpsAlterNote       $FB
00075F48 01                         	dc.b	$01
00075F49 ECF5                       	smpsPSGAlterVol     $F5
00075F4B 8E06                       	dc.b	nCs1, $06
00075F4D EC04                       	smpsPSGAlterVol     $04
00075F4F E701                       	dc.b	smpsNoAttack, $01
00075F51 EC07                       	smpsPSGAlterVol     $07
00075F53 8003                       	dc.b	nRst, $03
00075F55 ECF5                       	smpsPSGAlterVol     $F5
00075F57 8E07                       	dc.b	nCs1, $07
00075F59 E1FF                       	smpsAlterNote       $FF
00075F5B 9B06                       	dc.b	nD2, $06
00075F5D EC04                       	smpsPSGAlterVol     $04
00075F5F E701                       	dc.b	smpsNoAttack, $01
00075F61 ECFC                       	smpsPSGAlterVol     $FC
00075F63 9B03                       	dc.b	nD2, $03
00075F65 EC04                       	smpsPSGAlterVol     $04
00075F67 E701                       	dc.b	smpsNoAttack, $01
00075F69 ECFC                       	smpsPSGAlterVol     $FC
00075F6B 9B02                       	dc.b	nD2, $02
00075F6D EC04                       	smpsPSGAlterVol     $04
00075F6F E701                       	dc.b	smpsNoAttack, $01
00075F71 ECFC                       	smpsPSGAlterVol     $FC
00075F73 E1FE                       	smpsAlterNote       $FE
00075F75 9A03                       	dc.b	nCs2, $03
00075F77 EC0B                       	smpsPSGAlterVol     $0B
00075F79 800A                       	dc.b	nRst, $0A
00075F7B E102                       	smpsAlterNote       $02
00075F7D 01                         	dc.b	$01
00075F7E E10A                       	smpsAlterNote       $0A
00075F80 01                         	dc.b	$01
00075F81 E102                       	smpsAlterNote       $02
00075F83 01                         	dc.b	$01
00075F84 E1F7                       	smpsAlterNote       $F7
00075F86 01                         	dc.b	$01
00075F87 E10A                       	smpsAlterNote       $0A
00075F89 01                         	dc.b	$01
00075F8A E1FC                       	smpsAlterNote       $FC
00075F8C 01                         	dc.b	$01
00075F8D E108                       	smpsAlterNote       $08
00075F8F 0101                       	dc.b	$01, $01
00075F91 E102                       	smpsAlterNote       $02
00075F93 01                         	dc.b	$01
00075F94 E1F7                       	smpsAlterNote       $F7
00075F96 0101                       	dc.b	$01, $01
00075F98 E1FC                       	smpsAlterNote       $FC
00075F9A ECF5                       	smpsPSGAlterVol     $F5
00075F9C 8F06                       	dc.b	nD1, $06
00075F9E EC04                       	smpsPSGAlterVol     $04
00075FA0 E701                       	dc.b	smpsNoAttack, $01
00075FA2 EC07                       	smpsPSGAlterVol     $07
00075FA4 8003                       	dc.b	nRst, $03
00075FA6 ECF5                       	smpsPSGAlterVol     $F5
00075FA8 8F06                       	dc.b	nD1, $06
00075FAA EC04                       	smpsPSGAlterVol     $04
00075FAC E701                       	dc.b	smpsNoAttack, $01
00075FAE EC07                       	smpsPSGAlterVol     $07
00075FB0 8006                       	dc.b	nRst, $06
00075FB2 E1FF                       	smpsAlterNote       $FF
00075FB4 01                         	dc.b	$01
00075FB5 E102                       	smpsAlterNote       $02
00075FB7 01                         	dc.b	$01
00075FB8 E101                       	smpsAlterNote       $01
00075FBA 01                         	dc.b	$01
00075FBB E1FC                       	smpsAlterNote       $FC
00075FBD 01                         	dc.b	$01
00075FBE ECF5                       	smpsPSGAlterVol     $F5
00075FC0 9007                       	dc.b	nEb1, $07
00075FC2 EC0B                       	smpsPSGAlterVol     $0B
00075FC4 8004                       	dc.b	nRst, $04
00075FC6 ECF5                       	smpsPSGAlterVol     $F5
00075FC8 9006                       	dc.b	nEb1, $06
00075FCA EC0B                       	smpsPSGAlterVol     $0B
00075FCC 8007                       	dc.b	nRst, $07
00075FCE E103                       	smpsAlterNote       $03
00075FD0 0101                       	dc.b	$01, $01
00075FD2 E1FF                       	smpsAlterNote       $FF
00075FD4 01                         	dc.b	$01
00075FD5 E1F9                       	smpsAlterNote       $F9
00075FD7 01                         	dc.b	$01
00075FD8 E1FC                       	smpsAlterNote       $FC
00075FDA ECF5                       	smpsPSGAlterVol     $F5
00075FDC 8F06                       	dc.b	nD1, $06
00075FDE EC04                       	smpsPSGAlterVol     $04
00075FE0 E701                       	dc.b	smpsNoAttack, $01
00075FE2 EC07                       	smpsPSGAlterVol     $07
00075FE4 8003                       	dc.b	nRst, $03
00075FE6 ECF5                       	smpsPSGAlterVol     $F5
00075FE8 8F06                       	dc.b	nD1, $06
00075FEA EC04                       	smpsPSGAlterVol     $04
00075FEC E701                       	dc.b	smpsNoAttack, $01
00075FEE EC07                       	smpsPSGAlterVol     $07
00075FF0 8006                       	dc.b	nRst, $06
00075FF2 E1FF                       	smpsAlterNote       $FF
00075FF4 01                         	dc.b	$01
00075FF5 E103                       	smpsAlterNote       $03
00075FF7 01                         	dc.b	$01
00075FF8 E1FF                       	smpsAlterNote       $FF
00075FFA 01                         	dc.b	$01
00075FFB E1F9                       	smpsAlterNote       $F9
00075FFD 01                         	dc.b	$01
00075FFE E1FC                       	smpsAlterNote       $FC
00076000 ECF5                       	smpsPSGAlterVol     $F5
00076002 8F06                       	dc.b	nD1, $06
00076004 EC04                       	smpsPSGAlterVol     $04
00076006 E701                       	dc.b	smpsNoAttack, $01
00076008 EC07                       	smpsPSGAlterVol     $07
0007600A 8003                       	dc.b	nRst, $03
0007600C ECF5                       	smpsPSGAlterVol     $F5
0007600E 8F07                       	dc.b	nD1, $07
00076010 EC0B                       	smpsPSGAlterVol     $0B
00076012 8006                       	dc.b	nRst, $06
00076014 E1FF                       	smpsAlterNote       $FF
00076016 01                         	dc.b	$01
00076017 E102                       	smpsAlterNote       $02
00076019 0101                       	dc.b	$01, $01
0007601B E1FC                       	smpsAlterNote       $FC
0007601D 01                         	dc.b	$01
0007601E ECF5                       	smpsPSGAlterVol     $F5
00076020 8F07                       	dc.b	nD1, $07
00076022 EC0B                       	smpsPSGAlterVol     $0B
00076024 8004                       	dc.b	nRst, $04
00076026 ECF5                       	smpsPSGAlterVol     $F5
00076028 8F06                       	dc.b	nD1, $06
0007602A EC04                       	smpsPSGAlterVol     $04
0007602C E701                       	dc.b	smpsNoAttack, $01
0007602E EC07                       	smpsPSGAlterVol     $07
00076030 8006                       	dc.b	nRst, $06
00076032 E101                       	smpsAlterNote       $01
00076034 01                         	dc.b	$01
00076035 E102                       	smpsAlterNote       $02
00076037 01                         	dc.b	$01
00076038 E1FF                       	smpsAlterNote       $FF
0007603A 01                         	dc.b	$01
0007603B E1F9                       	smpsAlterNote       $F9
0007603D 01                         	dc.b	$01
0007603E E1FC                       	smpsAlterNote       $FC
00076040 ECF5                       	smpsPSGAlterVol     $F5
00076042 9006                       	dc.b	nEb1, $06
00076044 EC04                       	smpsPSGAlterVol     $04
00076046 E701                       	dc.b	smpsNoAttack, $01
00076048 EC07                       	smpsPSGAlterVol     $07
0007604A 8003                       	dc.b	nRst, $03
0007604C ECF5                       	smpsPSGAlterVol     $F5
0007604E 9006                       	dc.b	nEb1, $06
00076050 EC04                       	smpsPSGAlterVol     $04
00076052 E701                       	dc.b	smpsNoAttack, $01
00076054 EC07                       	smpsPSGAlterVol     $07
00076056 8006                       	dc.b	nRst, $06
00076058 E100                       	smpsAlterNote       $00
0007605A 01                         	dc.b	$01
0007605B E102                       	smpsAlterNote       $02
0007605D 01                         	dc.b	$01
0007605E E100                       	smpsAlterNote       $00
00076060 01                         	dc.b	$01
00076061 E1FF                       	smpsAlterNote       $FF
00076063 01                         	dc.b	$01
00076064 ECF5                       	smpsPSGAlterVol     $F5
00076066 9B06                       	dc.b	nD2, $06
00076068 EC04                       	smpsPSGAlterVol     $04
0007606A E701                       	dc.b	smpsNoAttack, $01
0007606C EC07                       	smpsPSGAlterVol     $07
0007606E 8003                       	dc.b	nRst, $03
00076070 ECF5                       	smpsPSGAlterVol     $F5
00076072 9B07                       	dc.b	nD2, $07
00076074 EC0B                       	smpsPSGAlterVol     $0B
00076076 8007                       	dc.b	nRst, $07
00076078 E105                       	smpsAlterNote       $05
0007607A 0101                       	dc.b	$01, $01
0007607C E1FF                       	smpsAlterNote       $FF
0007607E 01                         	dc.b	$01
0007607F E1FC                       	smpsAlterNote       $FC
00076081 01                         	dc.b	$01
00076082 E1FF                       	smpsAlterNote       $FF
00076084 ECF5                       	smpsPSGAlterVol     $F5
00076086 9B06                       	dc.b	nD2, $06
00076088 EC0B                       	smpsPSGAlterVol     $0B
0007608A 8004                       	dc.b	nRst, $04
0007608C ECF5                       	smpsPSGAlterVol     $F5
0007608E 9B06                       	dc.b	nD2, $06
00076090 EC04                       	smpsPSGAlterVol     $04
00076092 E701                       	dc.b	smpsNoAttack, $01
00076094 EC07                       	smpsPSGAlterVol     $07
00076096 8006                       	dc.b	nRst, $06
00076098 E102                       	smpsAlterNote       $02
0007609A 01                         	dc.b	$01
0007609B E106                       	smpsAlterNote       $06
0007609D 01                         	dc.b	$01
0007609E E102                       	smpsAlterNote       $02
000760A0 01                         	dc.b	$01
000760A1 E1FC                       	smpsAlterNote       $FC
000760A3 01                         	dc.b	$01
000760A4 E1FF                       	smpsAlterNote       $FF
000760A6 ECF5                       	smpsPSGAlterVol     $F5
000760A8 9B06                       	dc.b	nD2, $06
000760AA EC04                       	smpsPSGAlterVol     $04
000760AC E701                       	dc.b	smpsNoAttack, $01
000760AE EC07                       	smpsPSGAlterVol     $07
000760B0 8003                       	dc.b	nRst, $03
000760B2 ECF5                       	smpsPSGAlterVol     $F5
000760B4 9B07                       	dc.b	nD2, $07
000760B6 EC0B                       	smpsPSGAlterVol     $0B
000760B8 8006                       	dc.b	nRst, $06
000760BA E102                       	smpsAlterNote       $02
000760BC 01                         	dc.b	$01
000760BD E105                       	smpsAlterNote       $05
000760BF 0101                       	dc.b	$01, $01
000760C1 E1FF                       	smpsAlterNote       $FF
000760C3 01                         	dc.b	$01
000760C4 ECF5                       	smpsPSGAlterVol     $F5
000760C6 9B07                       	dc.b	nD2, $07
000760C8 EC0B                       	smpsPSGAlterVol     $0B
000760CA 8004                       	dc.b	nRst, $04
000760CC ECF5                       	smpsPSGAlterVol     $F5
000760CE 9B06                       	dc.b	nD2, $06
000760D0 EC04                       	smpsPSGAlterVol     $04
000760D2 E701                       	dc.b	smpsNoAttack, $01
000760D4 EC07                       	smpsPSGAlterVol     $07
000760D6 8006                       	dc.b	nRst, $06
000760D8 E105                       	smpsAlterNote       $05
000760DA 0101                       	dc.b	$01, $01
000760DC E102                       	smpsAlterNote       $02
000760DE 01                         	dc.b	$01
000760DF E1FC                       	smpsAlterNote       $FC
000760E1 01                         	dc.b	$01
000760E2 E1FF                       	smpsAlterNote       $FF
000760E4 ECF5                       	smpsPSGAlterVol     $F5
000760E6 9B06                       	dc.b	nD2, $06
000760E8 EC04                       	smpsPSGAlterVol     $04
000760EA E701                       	dc.b	smpsNoAttack, $01
000760EC EC07                       	smpsPSGAlterVol     $07
000760EE 8003                       	dc.b	nRst, $03
000760F0 ECF5                       	smpsPSGAlterVol     $F5
000760F2 9B06                       	dc.b	nD2, $06
000760F4 EC04                       	smpsPSGAlterVol     $04
000760F6 E701                       	dc.b	smpsNoAttack, $01
000760F8 EC07                       	smpsPSGAlterVol     $07
000760FA 8006                       	dc.b	nRst, $06
000760FC E102                       	smpsAlterNote       $02
000760FE 01                         	dc.b	$01
000760FF E106                       	smpsAlterNote       $06
00076101 01                         	dc.b	$01
00076102 E102                       	smpsAlterNote       $02
00076104 01                         	dc.b	$01
00076105 E1FF                       	smpsAlterNote       $FF
00076107 01                         	dc.b	$01
00076108 ECF5                       	smpsPSGAlterVol     $F5
0007610A 9B06                       	dc.b	nD2, $06
0007610C EC04                       	smpsPSGAlterVol     $04
0007610E E701                       	dc.b	smpsNoAttack, $01
00076110 EC07                       	smpsPSGAlterVol     $07
00076112 8003                       	dc.b	nRst, $03
00076114 ECF5                       	smpsPSGAlterVol     $F5
00076116 9B07                       	dc.b	nD2, $07
00076118 EC0B                       	smpsPSGAlterVol     $0B
0007611A 8007                       	dc.b	nRst, $07
0007611C E107                       	smpsAlterNote       $07
0007611E 0101                       	dc.b	$01, $01
00076120 E1FE                       	smpsAlterNote       $FE
00076122 01                         	dc.b	$01
00076123 E1FA                       	smpsAlterNote       $FA
00076125 0101                       	dc.b	$01, $01
00076127 E103                       	smpsAlterNote       $03
00076129 01                         	dc.b	$01
0007612A E109                       	smpsAlterNote       $09
0007612C 01                         	dc.b	$01
0007612D E107                       	smpsAlterNote       $07
0007612F 01                         	dc.b	$01
00076130 E1FE                       	smpsAlterNote       $FE
00076132 01                         	dc.b	$01
00076133 E108                       	smpsAlterNote       $08
00076135 01                         	dc.b	$01
00076136 E1FD                       	smpsAlterNote       $FD
00076138 ECF5                       	smpsPSGAlterVol     $F5
0007613A 940E                       	dc.b	nG1, $0E
0007613C E103                       	smpsAlterNote       $03
0007613E EC0B                       	smpsPSGAlterVol     $0B
00076140 8001 01                    	dc.b	nRst, $01, $01
00076143 E1FD                       	smpsAlterNote       $FD
00076145 01                         	dc.b	$01
00076146 E1FB                       	smpsAlterNote       $FB
00076148 0101                       	dc.b	$01, $01
0007614A E100                       	smpsAlterNote       $00
0007614C 01                         	dc.b	$01
0007614D E103                       	smpsAlterNote       $03
0007614F 01                         	dc.b	$01
00076150 E100                       	smpsAlterNote       $00
00076152 01                         	dc.b	$01
00076153 E1FD                       	smpsAlterNote       $FD
00076155 01                         	dc.b	$01
00076156 E1FA                       	smpsAlterNote       $FA
00076158 01                         	dc.b	$01
00076159 E1FD                       	smpsAlterNote       $FD
0007615B 01                         	dc.b	$01
0007615C E103                       	smpsAlterNote       $03
0007615E 0101                       	dc.b	$01, $01
00076160 E100                       	smpsAlterNote       $00
00076162 01                         	dc.b	$01
00076163 E1FE                       	smpsAlterNote       $FE
00076165 ECF5                       	smpsPSGAlterVol     $F5
00076167 960D                       	dc.b	nA1, $0D
00076169 E104                       	smpsAlterNote       $04
0007616B EC0B                       	smpsPSGAlterVol     $0B
0007616D 8001 01                    	dc.b	nRst, $01, $01
00076170 E101                       	smpsAlterNote       $01
00076172 01                         	dc.b	$01
00076173 E1FB                       	smpsAlterNote       $FB
00076175 0101                       	dc.b	$01, $01
00076177 E1FE                       	smpsAlterNote       $FE
00076179 01                         	dc.b	$01
0007617A E104                       	smpsAlterNote       $04
0007617C 0101                       	dc.b	$01, $01
0007617E E1FE                       	smpsAlterNote       $FE
00076180 01                         	dc.b	$01
00076181 E1FB                       	smpsAlterNote       $FB
00076183 0101                       	dc.b	$01, $01
00076185 E101                       	smpsAlterNote       $01
00076187 01                         	dc.b	$01
00076188 E104                       	smpsAlterNote       $04
0007618A 0101                       	dc.b	$01, $01
0007618C E1FE                       	smpsAlterNote       $FE
0007618E ECF5                       	smpsPSGAlterVol     $F5
00076190 970D                       	dc.b	nBb1, $0D
00076192 E101                       	smpsAlterNote       $01
00076194 EC04                       	smpsPSGAlterVol     $04
00076196 E701                       	dc.b	smpsNoAttack, $01
00076198 EC07                       	smpsPSGAlterVol     $07
0007619A E104                       	smpsAlterNote       $04
0007619C 8001                       	dc.b	nRst, $01
0007619E E103                       	smpsAlterNote       $03
000761A0 01                         	dc.b	$01
000761A1 E1FE                       	smpsAlterNote       $FE
000761A3 01                         	dc.b	$01
000761A4 E1FA                       	smpsAlterNote       $FA
000761A6 01                         	dc.b	$01
000761A7 E1FE                       	smpsAlterNote       $FE
000761A9 01                         	dc.b	$01
000761AA E101                       	smpsAlterNote       $01
000761AC 01                         	dc.b	$01
000761AD E104                       	smpsAlterNote       $04
000761AF 01                         	dc.b	$01
000761B0 E101                       	smpsAlterNote       $01
000761B2 01                         	dc.b	$01
000761B3 E1FB                       	smpsAlterNote       $FB
000761B5 01                         	dc.b	$01
000761B6 E1FA                       	smpsAlterNote       $FA
000761B8 01                         	dc.b	$01
000761B9 E1FE                       	smpsAlterNote       $FE
000761BB 01                         	dc.b	$01
000761BC E103                       	smpsAlterNote       $03
000761BE 0101                       	dc.b	$01, $01
000761C0 E101                       	smpsAlterNote       $01
000761C2 01                         	dc.b	$01
000761C3 E1FE                       	smpsAlterNote       $FE
000761C5 ECF5                       	smpsPSGAlterVol     $F5
000761C7 990D                       	dc.b	nC2, $0D
000761C9 E104                       	smpsAlterNote       $04
000761CB EC0B                       	smpsPSGAlterVol     $0B
000761CD 8001 01                    	dc.b	nRst, $01, $01
000761D0 E102                       	smpsAlterNote       $02
000761D2 01                         	dc.b	$01
000761D3 E1FC                       	smpsAlterNote       $FC
000761D5 0101                       	dc.b	$01, $01
000761D7 E102                       	smpsAlterNote       $02
000761D9 01                         	dc.b	$01
000761DA E104                       	smpsAlterNote       $04
000761DC 01                         	dc.b	$01
000761DD E1FF                       	smpsAlterNote       $FF
000761DF ECF5                       	smpsPSGAlterVol     $F5
000761E1 9B06                       	dc.b	nD2, $06
000761E3 EC04                       	smpsPSGAlterVol     $04
000761E5 E701                       	dc.b	smpsNoAttack, $01
000761E7 EC07                       	smpsPSGAlterVol     $07
000761E9 8003                       	dc.b	nRst, $03
000761EB ECF5                       	smpsPSGAlterVol     $F5
000761ED 9B07                       	dc.b	nD2, $07
000761EF EC0B                       	smpsPSGAlterVol     $0B
000761F1 8006                       	dc.b	nRst, $06
000761F3 E101                       	smpsAlterNote       $01
000761F5 01                         	dc.b	$01
000761F6 E104                       	smpsAlterNote       $04
000761F8 0101                       	dc.b	$01, $01
000761FA E1FE                       	smpsAlterNote       $FE
000761FC 01                         	dc.b	$01
000761FD E1FC                       	smpsAlterNote       $FC
000761FF 01                         	dc.b	$01
00076200 E1FE                       	smpsAlterNote       $FE
00076202 ECF5                       	smpsPSGAlterVol     $F5
00076204 9C06                       	dc.b	nEb2, $06
00076206 EC0B                       	smpsPSGAlterVol     $0B
00076208 8004                       	dc.b	nRst, $04
0007620A ECF5                       	smpsPSGAlterVol     $F5
0007620C 9C06                       	dc.b	nEb2, $06
0007620E EC04                       	smpsPSGAlterVol     $04
00076210 E701                       	dc.b	smpsNoAttack, $01
00076212 EC07                       	smpsPSGAlterVol     $07
00076214 8006                       	dc.b	nRst, $06
00076216 E105                       	smpsAlterNote       $05
00076218 01                         	dc.b	$01
00076219 E106                       	smpsAlterNote       $06
0007621B 01                         	dc.b	$01
0007621C E102                       	smpsAlterNote       $02
0007621E 01                         	dc.b	$01
0007621F E1FB                       	smpsAlterNote       $FB
00076221 01                         	dc.b	$01
00076222 E1FF                       	smpsAlterNote       $FF
00076224 ECF5                       	smpsPSGAlterVol     $F5
00076226 9B06                       	dc.b	nD2, $06
00076228 EC04                       	smpsPSGAlterVol     $04
0007622A E701                       	dc.b	smpsNoAttack, $01
0007622C EC07                       	smpsPSGAlterVol     $07
0007622E 8003                       	dc.b	nRst, $03
00076230 ECF5                       	smpsPSGAlterVol     $F5
00076232 9B06                       	dc.b	nD2, $06
00076234 EC04                       	smpsPSGAlterVol     $04
00076236 E701                       	dc.b	smpsNoAttack, $01
00076238 EC07                       	smpsPSGAlterVol     $07
0007623A 8006                       	dc.b	nRst, $06
0007623C E101                       	smpsAlterNote       $01
0007623E 01                         	dc.b	$01
0007623F E105                       	smpsAlterNote       $05
00076241 01                         	dc.b	$01
00076242 E104                       	smpsAlterNote       $04
00076244 01                         	dc.b	$01
00076245 E1FE                       	smpsAlterNote       $FE
00076247 01                         	dc.b	$01
00076248 ECF5                       	smpsPSGAlterVol     $F5
0007624A 9C07                       	dc.b	nEb2, $07
0007624C EC0B                       	smpsPSGAlterVol     $0B
0007624E 8004                       	dc.b	nRst, $04
00076250 ECF5                       	smpsPSGAlterVol     $F5
00076252 9C06                       	dc.b	nEb2, $06
00076254 EC0B                       	smpsPSGAlterVol     $0B
00076256 8007                       	dc.b	nRst, $07
00076258 E105                       	smpsAlterNote       $05
0007625A 0101                       	dc.b	$01, $01
0007625C E102                       	smpsAlterNote       $02
0007625E 01                         	dc.b	$01
0007625F E1FB                       	smpsAlterNote       $FB
00076261 01                         	dc.b	$01
00076262 E1FF                       	smpsAlterNote       $FF
00076264 ECF5                       	smpsPSGAlterVol     $F5
00076266 9B06                       	dc.b	nD2, $06
00076268 EC04                       	smpsPSGAlterVol     $04
0007626A E701                       	dc.b	smpsNoAttack, $01
0007626C EC07                       	smpsPSGAlterVol     $07
0007626E 8003                       	dc.b	nRst, $03
00076270 ECF5                       	smpsPSGAlterVol     $F5
00076272 9B06                       	dc.b	nD2, $06
00076274 EC04                       	smpsPSGAlterVol     $04
00076276 E701                       	dc.b	smpsNoAttack, $01
00076278 EC07                       	smpsPSGAlterVol     $07
0007627A 8006                       	dc.b	nRst, $06
0007627C E101                       	smpsAlterNote       $01
0007627E 01                         	dc.b	$01
0007627F E105                       	smpsAlterNote       $05
00076281 01                         	dc.b	$01
00076282 E101                       	smpsAlterNote       $01
00076284 01                         	dc.b	$01
00076285 E1FC                       	smpsAlterNote       $FC
00076287 01                         	dc.b	$01
00076288 E1FE                       	smpsAlterNote       $FE
0007628A ECF5                       	smpsPSGAlterVol     $F5
0007628C 9C06                       	dc.b	nEb2, $06
0007628E EC04                       	smpsPSGAlterVol     $04
00076290 E701                       	dc.b	smpsNoAttack, $01
00076292 EC07                       	smpsPSGAlterVol     $07
00076294 8003                       	dc.b	nRst, $03
00076296 ECF5                       	smpsPSGAlterVol     $F5
00076298 9C07                       	dc.b	nEb2, $07
0007629A EC0B                       	smpsPSGAlterVol     $0B
0007629C 8006                       	dc.b	nRst, $06
0007629E E102                       	smpsAlterNote       $02
000762A0 01                         	dc.b	$01
000762A1 E105                       	smpsAlterNote       $05
000762A3 0101                       	dc.b	$01, $01
000762A5 E1FF                       	smpsAlterNote       $FF
000762A7 01                         	dc.b	$01
000762A8 ECF5                       	smpsPSGAlterVol     $F5
000762AA 9B07                       	dc.b	nD2, $07
000762AC EC0B                       	smpsPSGAlterVol     $0B
000762AE 8004                       	dc.b	nRst, $04
000762B0 ECF5                       	smpsPSGAlterVol     $F5
000762B2 9B06                       	dc.b	nD2, $06
000762B4 EC04                       	smpsPSGAlterVol     $04
000762B6 E701                       	dc.b	smpsNoAttack, $01
000762B8 EC07                       	smpsPSGAlterVol     $07
000762BA 8002                       	dc.b	nRst, $02
000762BC E1FC                       	smpsAlterNote       $FC
000762BE ECF5                       	smpsPSGAlterVol     $F5
000762C0 9006                       	dc.b	nEb1, $06
000762C2 EC04                       	smpsPSGAlterVol     $04
000762C4 E701                       	dc.b	smpsNoAttack, $01
000762C6 ECFC                       	smpsPSGAlterVol     $FC
000762C8 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
000762CC EC04                       	smpsPSGAlterVol     $04
000762CE E701                       	dc.b	smpsNoAttack, $01
000762D0 E1FD                       	smpsAlterNote       $FD
000762D2 ECFC                       	smpsPSGAlterVol     $FC
000762D4 9402                       	dc.b	nG1, $02
000762D6 EC04                       	smpsPSGAlterVol     $04
000762D8 E701                       	dc.b	smpsNoAttack, $01
000762DA E1FE                       	smpsAlterNote       $FE
000762DC ECFC                       	smpsPSGAlterVol     $FC
000762DE 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000762E2 EC04                       	smpsPSGAlterVol     $04
000762E4 E701                       	dc.b	smpsNoAttack, $01
000762E6 EC07                       	smpsPSGAlterVol     $07
000762E8 8008                       	dc.b	nRst, $08
000762EA F6F4 F3                    	smpsJump            music84_Jump06
000762ED                            
000762ED                            ; PSG3 Data
000762ED                            music84_PSG3:
000762ED F500                       	smpsPSGvoice        $00
000762EF E1FF                       	smpsAlterNote       $FF
000762F1 EC0F                       	smpsPSGAlterVol     $0F
000762F3 803A                       	dc.b	nRst, $3A
000762F5                            
000762F5                            music84_Jump05:
000762F5 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00076301 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0007630B F6FF E8                    	smpsJump            music84_Jump05
0007630E                            
0007630E                            ; DAC Data
0007630E                            music84_DAC:
0007630E E0C0                       	smpsPan             panCenter, $00
00076310 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0007631C 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00076328 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00076334 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00076340 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0007634C 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00076358 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00076364 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00076370 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0007637C 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00076388 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00076394 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
000763A0 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000763AC 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000763B8 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
000763C4 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
000763D0 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
000763DC 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
000763E8 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
000763F4 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00076400 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0007640C 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00076418 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00076424 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00076430 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0007643C 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00076448 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00076454 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00076460 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0007646C 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00076478 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00076484 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00076490 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0007649C 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
000764A8 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
000764B4 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000764C0 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
000764CC 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
000764D8 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000764E4 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
000764F0 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
000764FC 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00076508 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00076514 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00076520 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0007652C 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00076538 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00076544 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00076550 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0007655C 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00076568 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00076574 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00076580 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0007658C 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00076598 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000765A4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
000765B0 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
000765BC 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000765C8 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000765D4 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000765E0 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
000765EC 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
000765F8 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00076604 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00076610 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0007661C 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00076628 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00076634 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00076640 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0007664C 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00076658 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00076664 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00076670 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0007667C 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00076688 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00076694 E0C0                       	smpsPan             panCenter, $00
00076696 F2                         	smpsStop
00076697                            
00076697                            music84_Voices:
00076697                            ;	Voice $00
00076697                            ;	$3D
00076697                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00076697                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00076697                            	smpsVcAlgorithm     $05
00076697                            	smpsVcFeedback      $07
00076697                            	smpsVcUnusedBits    $00
00076697                            	smpsVcDetune        $05, $04, $03, $04
00076697                            	smpsVcCoarseFreq    $01, $01, $01, $01
00076697                            	smpsVcRateScale     $00, $00, $00, $00
00076697                            	smpsVcAttackRate    $11, $11, $11, $11
00076697                            	smpsVcAmpMod        $00, $00, $00, $00
00076697                            	smpsVcDecayRate1    $00, $00, $00, $0A
00076697                            	smpsVcDecayRate2    $00, $00, $00, $0B
00076697                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00076697                            	smpsVcReleaseRate   $08, $08, $08, $07
00076697 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000766B0                            
000766B0                            ;	Voice $01
000766B0                            ;	$04
000766B0                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000766B0                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000766B0                            	smpsVcAlgorithm     $04
000766B0                            	smpsVcFeedback      $00
000766B0                            	smpsVcUnusedBits    $00
000766B0                            	smpsVcDetune        $04, $03, $04, $05
000766B0                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000766B0                            	smpsVcRateScale     $00, $01, $00, $01
000766B0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000766B0                            	smpsVcAmpMod        $00, $00, $00, $00
000766B0                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000766B0                            	smpsVcDecayRate2    $05, $00, $05, $00
000766B0                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000766B0                            	smpsVcReleaseRate   $06, $06, $06, $06
000766B0 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
000766C9                            
000766C9                            ;	Voice $02
000766C9                            ;	$30
000766C9                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
000766C9                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
000766C9                            	smpsVcAlgorithm     $00
000766C9                            	smpsVcFeedback      $06
000766C9                            	smpsVcUnusedBits    $00
000766C9                            	smpsVcDetune        $04, $02, $00, $06
000766C9                            	smpsVcCoarseFreq    $01, $01, $03, $0C
000766C9                            	smpsVcRateScale     $00, $00, $00, $00
000766C9                            	smpsVcAttackRate    $1F, $1F, $1F, $14
000766C9                            	smpsVcAmpMod        $00, $00, $00, $00
000766C9                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
000766C9                            	smpsVcDecayRate2    $01, $01, $01, $01
000766C9                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
000766C9                            	smpsVcReleaseRate   $09, $0B, $08, $0F
000766C9 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000766E2                            
000766E2                            ;	Voice $03
000766E2                            ;	$3A
000766E2                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000766E2                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000766E2                            	smpsVcAlgorithm     $02
000766E2                            	smpsVcFeedback      $07
000766E2                            	smpsVcUnusedBits    $00
000766E2                            	smpsVcDetune        $04, $06, $02, $00
000766E2                            	smpsVcCoarseFreq    $01, $01, $01, $01
000766E2                            	smpsVcRateScale     $00, $00, $00, $00
000766E2                            	smpsVcAttackRate    $18, $19, $14, $14
000766E2                            	smpsVcAmpMod        $00, $00, $00, $00
000766E2                            	smpsVcDecayRate1    $09, $0D, $09, $09
000766E2                            	smpsVcDecayRate2    $00, $00, $00, $00
000766E2                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000766E2                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000766E2 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
000766FB                            
000766FB                            ;	Voice $04
000766FB                            ;	$3C
000766FB                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
000766FB                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
000766FB                            	smpsVcAlgorithm     $04
000766FB                            	smpsVcFeedback      $07
000766FB                            	smpsVcUnusedBits    $00
000766FB                            	smpsVcDetune        $07, $00, $00, $03
000766FB                            	smpsVcCoarseFreq    $00, $00, $02, $0A
000766FB                            	smpsVcRateScale     $00, $00, $00, $00
000766FB                            	smpsVcAttackRate    $10, $1F, $10, $1F
000766FB                            	smpsVcAmpMod        $00, $00, $00, $00
000766FB                            	smpsVcDecayRate1    $00, $00, $00, $00
000766FB                            	smpsVcDecayRate2    $00, $00, $00, $00
000766FB                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000766FB                            	smpsVcReleaseRate   $0A, $02, $0A, $02
000766FB 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00076714                            
00076714                            ;	Voice $05
00076714                            ;	$38
00076714                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00076714                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00076714                            	smpsVcAlgorithm     $00
00076714                            	smpsVcFeedback      $07
00076714                            	smpsVcUnusedBits    $00
00076714                            	smpsVcDetune        $04, $06, $02, $00
00076714                            	smpsVcCoarseFreq    $01, $01, $01, $00
00076714                            	smpsVcRateScale     $00, $00, $00, $00
00076714                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00076714                            	smpsVcAmpMod        $00, $00, $00, $00
00076714                            	smpsVcDecayRate1    $00, $03, $00, $17
00076714                            	smpsVcDecayRate2    $00, $08, $08, $0B
00076714                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00076714                            	smpsVcReleaseRate   $08, $05, $05, $05
00076714 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0007672D                            
0007672D                            
0007672E 00                         		even
0007672E                            Music85:	incbin	sound\music85.bin
00076B7A                            		even
00076B7A                            Music86:	incbin	sound\music86.bin
000770CA                            		even
000770CA                            Music87:	incbin	sound\music87.bin
000772B0                            		even
000772B0                            Music88:	incbin	sound\music88.bin
0007739E                            		even
0007739E                            Music89:	incbin	sound\music89.bin
0007B266 00                         		even
0007B266                            Music8A:	incbin	sound\music8A.bin
0007B430                            		even
0007B430                            Music8B:	incbin	sound\music8B.bin
0007B6CA                            		even
0007B6CA                            Music8C:	incbin	sound\music8C.bin
0007B8E6                            		even
0007B8E6                            Music8D:	incbin	sound\music8D.bin
0007BB02                            		even
0007BB02                            Music8E:	incbin	sound\music8E.bin
0007BC58                            		even
0007BC58                            Music8F:	incbin	sound\music8F.bin
0007BDA8                            		even
0007BDA8                            Music90:	incbin	sound\music90.bin
0007BF06                            		even
0007BF06                            Music91:	incbin	sound\music91.bin
0007D1D4                            		even
0007D1D4                            Music92:	incbin	sound\music92.bin
0007D2FE                            		even
0007D2FE                            Music93:	incbin	sound\music93.bin
0007D3CC                            		even
0007D3CC                            ; ---------------------------------------------------------------------------
0007D3CC                            ; Sound	effect pointers
0007D3CC                            ; ---------------------------------------------------------------------------
0007D3CC 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0007D3D8 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0007D3E4 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0007D3F0 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0007D3FC 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0007D408 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0007D414 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0007D420 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0007D42C 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0007D438 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0007D444 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0007D450 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
0007D45C 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0007D468 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0007D474 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0007D480 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
0007D48C 0000 0000                  SoundD0Index:	dc.l SoundD0
0007D490                            SoundA0:	incbin	sound\soundA0.bin
0007D4A6                            		even
0007D4A6                            SoundA1:	incbin	sound\soundA1.bin
0007D4D0                            		even
0007D4D0                            SoundA2:	incbin	sound\soundA2.bin
0007D4F0                            		even
0007D4F0                            SoundA3:	incbin	sound\soundA3.bin
0007D522                            		even
0007D522                            SoundA4:	incbin	sound\soundA4.bin
0007D558                            		even
0007D558                            SoundA5:	incbin	sound\soundA5.bin
0007D584                            		even
0007D584                            SoundA6:	incbin	sound\soundA6.bin
0007D5B4                            		even
0007D5B4                            SoundA7:	incbin	sound\soundA7.bin
0007D5E4                            		even
0007D5E4                            SoundA8:	incbin	sound\soundA8.bin
0007D618                            		even
0007D618                            SoundA9:	incbin	sound\soundA9.bin
0007D62A                            		even
0007D62A                            SoundAA:	incbin	sound\soundAA.bin
0007D66C                            		even
0007D66C                            SoundAB:	incbin	sound\soundAB.bin
0007D68C                            		even
0007D68C                            SoundAC:	incbin	sound\soundAC.bin
0007D6C0                            		even
0007D6C0                            SoundAD:	incbin	sound\soundAD.bin
0007D6F6                            		even
0007D6F6                            SoundAE:	incbin	sound\soundAE.bin
0007D740                            		even
0007D740                            SoundAF:	incbin	sound\soundAF.bin
0007D76E                            		even
0007D76E                            SoundB0:	incbin	sound\soundB0.bin
0007D7A0                            		even
0007D7A0                            SoundB1:	incbin	sound\soundB1.bin
0007D7CC                            		even
0007D7CC                            SoundB2:	incbin	sound\soundB2.bin
0007D81C                            		even
0007D81C                            SoundB3:	incbin	sound\soundB3.bin
0007D866                            		even
0007D866                            SoundB4:	incbin	sound\soundB4.bin
0007D8C2                            		even
0007D8C2                            SoundB5:	incbin	sound\soundB5.bin
0007D8F0                            		even
0007D8F0                            SoundB6:	incbin	sound\soundB6.bin
0007D90E                            		even
0007D90E                            SoundB7:	incbin	sound\soundB7.bin
0007D94A                            		even
0007D94A                            SoundB8:	incbin	sound\soundB8.bin
0007D968                            		even
0007D968                            SoundB9:	incbin	sound\soundB9.bin
0007D9CC                            		even
0007D9CC                            SoundBA:	incbin	sound\soundBA.bin
0007D9F4                            		even
0007D9F4                            SoundBB:	incbin	sound\soundBB.bin
0007DA20                            		even
0007DA20                            SoundBC:	incbin	sound\soundBC.bin
0007DA62                            		even
0007DA62                            SoundBD:	incbin	sound\soundBD.bin
0007DAB6                            		even
0007DAB6                            SoundBE:	incbin	sound\soundBE.bin
0007DAF0                            		even
0007DAF0                            SoundBF:	incbin	sound\soundBF.bin
0007DB62                            		even
0007DB62                            SoundC0:	incbin	sound\soundC0.bin
0007DB90                            		even
0007DB90                            SoundC1:	incbin	sound\soundC1.bin
0007DBCA                            		even
0007DBCA                            SoundC2:	incbin	sound\soundC2.bin
0007DBF4                            		even
0007DBF4                            SoundC3:	incbin	sound\soundC3.bin
0007DC6E                            		even
0007DC6E                            SoundC4:	incbin	sound\soundC4.bin
0007DC96                            		even
0007DC96                            SoundC5:	incbin	sound\soundC5.bin
0007DCFE                            		even
0007DCFE                            SoundC6:	incbin	sound\soundC6.bin
0007DD40                            		even
0007DD40                            SoundC7:	incbin	sound\soundC7.bin
0007DD6E                            		even
0007DD6E                            SoundC8:	incbin	sound\soundC8.bin
0007DD80                            		even
0007DD80                            SoundC9:	incbin	sound\soundC9.bin
0007DDAE                            		even
0007DDAE                            SoundCA:	incbin	sound\soundCA.bin
0007DDDC                            		even
0007DDDC                            SoundCB:	incbin	sound\soundCB.bin
0007DE28                            		even
0007DE28                            SoundCC:	incbin	sound\soundCC.bin
0007DE62                            		even
0007DE62                            SoundCD:	incbin	sound\soundCD.bin
0007DE70                            		even
0007DE70                            SoundCE:	incbin	sound\soundCE.bin
0007DE9E                            		even
0007DE9E                            SoundCF:	incbin	sound\soundCF.bin
0007DED6                            		even
0007DED6                            SoundD0:	incbin	sound\soundD0.bin
0007DF10                            		even
0007DF10                            SegaPCM:	incbin	sound\segapcm.bin
00081B4A                            SegaPCM_end:	even
00081B4A                            
00081B4A                            ; end of 'ROM'
00081B4A                            EndOfRom:
00081B4A                            
00081B4A                            
